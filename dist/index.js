var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __assign = (a10, b10) => {
  for (var prop in b10 || (b10 = {}))
    if (__hasOwnProp.call(b10, prop))
      __defNormalProp(a10, prop, b10[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b10)) {
      if (__propIsEnum.call(b10, prop))
        __defNormalProp(a10, prop, b10[prop]);
    }
  return a10;
};
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject2) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e14) {
        reject2(e14);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e14) {
        reject2(e14);
      }
    };
    var step = (result) => {
      return result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
    };
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports2, module2) => {
  /**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var ReactVersion = "18.1.0";
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign2 = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent2(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent2;
      assign2(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef3() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a10) {
        return isArrayImpl(a10);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e14) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x10) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement129(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i10 = 0; i10 < childrenLength; i10++) {
            childArray[i10] = arguments[i10 + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement4(element, config, children) {
        if (element === null || element === void 0) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign2({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i10 = 0; i10 < childrenLength; i10++) {
            childArray[i10] = arguments[i10 + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement2(object2) {
        return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index2) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index2.toString(36);
      }
      function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c10) {
              return c10;
            });
          } else if (mappedChild != null) {
            if (isValidElement2(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array2.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i10 = 0; i10 < children.length; i10++) {
            child = children[i10];
            nextName = nextNamePrefix + getElementKey(child, i10);
            subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n10 = 0;
        mapChildren(children, function() {
          n10++;
        });
        return n10;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement2(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext8(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === void 0) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef28(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function memo23(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext8(Context2) {
        var dispatcher = resolveDispatcher();
        {
          if (Context2._context !== void 0) {
            var realContext = Context2._context;
            if (realContext.Consumer === Context2) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context2) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context2);
      }
      function useState35(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer4(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef45(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect41(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create3, deps);
      }
      function useInsertionEffect(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create3, deps);
      }
      function useLayoutEffect15(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create3, deps);
      }
      function useCallback45(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo15(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create3, deps);
      }
      function useImperativeHandle(ref, create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create3, deps);
      }
      function useDebugValue2(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x10) {
              var match = x10.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x10) {
                control = x10;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x10) {
                control = x10;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x10) {
              control = x10;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s10 = sampleLines.length - 1;
            var c10 = controlLines.length - 1;
            while (s10 >= 1 && c10 >= 0 && sampleLines[s10] !== controlLines[c10]) {
              c10--;
            }
            for (; s10 >= 1 && c10 >= 0; s10--, c10--) {
              if (sampleLines[s10] !== controlLines[c10]) {
                if (s10 !== 1 || c10 !== 1) {
                  do {
                    s10--;
                    c10--;
                    if (c10 < 0 || sampleLines[s10] !== controlLines[c10]) {
                      var _frame = "\n" + sampleLines[s10].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s10 >= 1 && c10 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x10) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex2) {
                error$1 = ex2;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i10 = 0; i10 < node.length; i10++) {
            var child = node[i10];
            if (isValidElement2(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement2(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement2(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i10 = 0; i10 < keys.length; i10++) {
            var key = keys[i10];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement129.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i10 = 2; i10 < arguments.length; i10++) {
            validateChildKeys(arguments[i10], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement4.apply(this, arguments);
        for (var i10 = 2; i10 < arguments.length; i10++) {
          validateChildKeys(arguments[i10], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module2 && module2[requireString];
            enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject2) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject2);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject2(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject2) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject2);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject2) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject2) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject2);
                }
              });
            } catch (error2) {
              reject2(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i10 = 0;
            try {
              for (; i10 < queue.length; i10++) {
                var callback = queue[i10];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i10 + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children8 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports2.Children = Children8;
      exports2.Component = Component;
      exports2.Fragment = REACT_FRAGMENT_TYPE;
      exports2.Profiler = REACT_PROFILER_TYPE;
      exports2.PureComponent = PureComponent2;
      exports2.StrictMode = REACT_STRICT_MODE_TYPE;
      exports2.Suspense = REACT_SUSPENSE_TYPE;
      exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports2.cloneElement = cloneElement$1;
      exports2.createContext = createContext8;
      exports2.createElement = createElement$1;
      exports2.createFactory = createFactory;
      exports2.createRef = createRef3;
      exports2.forwardRef = forwardRef28;
      exports2.isValidElement = isValidElement2;
      exports2.lazy = lazy;
      exports2.memo = memo23;
      exports2.startTransition = startTransition;
      exports2.unstable_act = act;
      exports2.useCallback = useCallback45;
      exports2.useContext = useContext8;
      exports2.useDebugValue = useDebugValue2;
      exports2.useDeferredValue = useDeferredValue;
      exports2.useEffect = useEffect41;
      exports2.useId = useId2;
      exports2.useImperativeHandle = useImperativeHandle;
      exports2.useInsertionEffect = useInsertionEffect;
      exports2.useLayoutEffect = useLayoutEffect15;
      exports2.useMemo = useMemo15;
      exports2.useReducer = useReducer4;
      exports2.useRef = useRef45;
      exports2.useState = useState35;
      exports2.useSyncExternalStore = useSyncExternalStore;
      exports2.useTransition = useTransition;
      exports2.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
});

// ../../node_modules/react/index.js
var require_react = __commonJS((exports2, module2) => {
  "use strict";
  if (false) {
    module2.exports = null;
  } else {
    module2.exports = require_react_development();
  }
});

// ../../node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports2) => {
  /**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push2(heap, node) {
        var index2 = heap.length;
        heap.push(node);
        siftUp(heap, node, index2);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop2(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i10) {
        var index2 = i10;
        while (index2 > 0) {
          var parentIndex = index2 - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index2] = parent;
            index2 = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i10) {
        var index2 = i10;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index2 < halfLength) {
          var leftIndex = (index2 + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              heap[index2] = left;
              heap[leftIndex] = node;
              index2 = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index2] = right;
            heap[rightIndex] = node;
            index2 = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a10, b10) {
        var diff = a10.sortIndex - b10.sortIndex;
        return diff !== 0 ? diff : a10.id - b10.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms2) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports2.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports2.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop2(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop2(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push2(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports2.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports2.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop2(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop2(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler2) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler2();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler2) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler2();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports2.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push2(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push2(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports2.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1e3 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports2.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms2) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports2.unstable_now());
        }, ms2);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports2.unstable_IdlePriority = IdlePriority;
      exports2.unstable_ImmediatePriority = ImmediatePriority;
      exports2.unstable_LowPriority = LowPriority;
      exports2.unstable_NormalPriority = NormalPriority;
      exports2.unstable_Profiling = unstable_Profiling;
      exports2.unstable_UserBlockingPriority = UserBlockingPriority;
      exports2.unstable_cancelCallback = unstable_cancelCallback;
      exports2.unstable_continueExecution = unstable_continueExecution;
      exports2.unstable_forceFrameRate = forceFrameRate;
      exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports2.unstable_next = unstable_next;
      exports2.unstable_pauseExecution = unstable_pauseExecution;
      exports2.unstable_requestPaint = unstable_requestPaint;
      exports2.unstable_runWithPriority = unstable_runWithPriority;
      exports2.unstable_scheduleCallback = unstable_scheduleCallback;
      exports2.unstable_shouldYield = shouldYieldToHost;
      exports2.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
});

// ../../node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports2, module2) => {
  "use strict";
  if (false) {
    module2.exports = null;
  } else {
    module2.exports = require_scheduler_development();
  }
});

// ../../node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports2) => {
  /**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var React63 = require_react();
      var Scheduler = require_scheduler();
      var ReactSharedInternals = React63.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment35 = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = new Set();
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i10 = 0; i10 < dependencies.length; i10++) {
          allNativeEvents.add(dependencies[i10]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e14) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix2 = name.toLowerCase().slice(0, 5);
              return prefix2 !== "data-" && prefix2 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize2 = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize2);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === void 0 ? void 0 : null;
          }
          var value = node.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x10) {
              var match = x10.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x10) {
                control = x10;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x10) {
                control = x10;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x10) {
              control = x10;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s10 = sampleLines.length - 1;
            var c10 = controlLines.length - 1;
            while (s10 >= 1 && c10 >= 0 && sampleLines[s10] !== controlLines[c10]) {
              c10--;
            }
            for (; s10 >= 1 && c10 >= 0; s10--, c10--) {
              if (sampleLines[s10] !== controlLines[c10]) {
                if (s10 !== 1 || c10 !== 1) {
                  do {
                    s10--;
                    c10--;
                    if (c10 < 0 || sampleLines[s10] !== controlLines[c10]) {
                      var _frame = "\n" + sampleLines[s10].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s10 >= 1 && c10 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x10) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        } catch (x10) {
          return "\nError generating stack: " + x10.message + "\n" + x10.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x10) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment35:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString2(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node[valueField]);
        }
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var get5 = descriptor.get, set6 = descriptor.set;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get5.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set6.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : void 0);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e14) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign2({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString2(value);
            }
          } else if (node.value !== toString2(value)) {
            node.value = toString2(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null)) {
            return;
          }
          var initialValue = toString2(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i10 = 0; i10 < group.length; i10++) {
            var otherNode = group[i10];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString2(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString2(value)) {
            node.defaultValue = toString2(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React63.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString2(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a10) {
        return isArrayImpl(a10);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i10 = 0; i10 < valuePropNames.length; i10++) {
            var propName = valuePropNames[i10];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i10 = 0; i10 < selectedValues.length; i10++) {
            selectedValue["$" + selectedValues[i10]] = true;
          }
          for (var _i2 = 0; _i2 < options2.length; _i2++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i2].value);
            if (options2[_i2].selected !== selected) {
              options2[_i2].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i2].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString2(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i22 = 0; _i22 < options2.length; _i22++) {
            if (options2[_i22].value === _selectedValue) {
              options2[_i22].selected = true;
              if (setDefaultSelected) {
                options2[_i22].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i22].disabled) {
              defaultSelected = options2[_i22];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign2({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign2({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString2(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString2(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString2(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_17, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles2) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles2) {
            if (!styles2.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles2[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles2) {
        var style2 = node.style;
        for (var styleName in styles2) {
          if (!styles2.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles2[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles2) {
        var expanded = {};
        for (var key in styles2) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i10 = 0; i10 < longhands.length; i10++) {
            expanded[longhands[i10]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = assign2({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i10 = 0; i10 < queuedTargets.length; i10++) {
            restoreStateOfTarget(queuedTargets[i10]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a10, b10) {
        if (isInsideEventHandler) {
          return fn(a10, b10);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a10, b10);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e14) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a10, b10, c10, d10, e14, f10) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a10, b10, c10, d10, e14, f10) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a10, b10, c10, d10, e14, f10) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a10, b10, c10, d10, e14, f10) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get4(key) {
        return key._reactInternals;
      }
      function has2(key) {
        return key._reactInternals !== void 0;
      }
      function set5(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var DidCapture = 128;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive = 2048;
      var Hydrating = 4096;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MountLayoutDev = 16777216;
      var MountPassiveDev = 33554432;
      var BeforeMutationMask = Update | Snapshot | 0;
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get4(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a10 = fiber;
        var b10 = alternate;
        while (true) {
          var parentA = a10.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a10 = b10 = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a10) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b10) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a10.return !== b10.return) {
            a10 = parentA;
            b10 = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a10) {
                didFindChild = true;
                a10 = parentA;
                b10 = parentB;
                break;
              }
              if (_child === b10) {
                didFindChild = true;
                b10 = parentA;
                a10 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a10) {
                  didFindChild = true;
                  a10 = parentB;
                  b10 = parentA;
                  break;
                }
                if (_child === b10) {
                  didFindChild = true;
                  b10 = parentB;
                  a10 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a10.alternate !== b10) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a10.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a10.stateNode.current === a10) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null) {
            return match;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null) {
              return match;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now2 = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign2({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root3, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root3, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root3, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root3.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root3) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root3);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue === "function") {
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map2 = new Map();
          var lane = 1;
          for (var index3 = 0; index3 < TotalLanes; index3++) {
            var label = getLabelForLane(lane);
            map2.set(lane, label);
            lane *= 2;
          }
          return map2;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x10) {
        var asUint = x10 >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var InputContinuousHydrationLane = 2;
      var InputContinuousLane = 4;
      var DefaultHydrationLane = 8;
      var DefaultLane = 16;
      var TransitionHydrationLane = 32;
      var TransitionLanes = 4194240;
      var TransitionLane1 = 64;
      var TransitionLane2 = 128;
      var TransitionLane3 = 256;
      var TransitionLane4 = 512;
      var TransitionLane5 = 1024;
      var TransitionLane6 = 2048;
      var TransitionLane7 = 4096;
      var TransitionLane8 = 8192;
      var TransitionLane9 = 16384;
      var TransitionLane10 = 32768;
      var TransitionLane11 = 65536;
      var TransitionLane12 = 131072;
      var TransitionLane13 = 262144;
      var TransitionLane14 = 524288;
      var TransitionLane15 = 1048576;
      var TransitionLane16 = 2097152;
      var RetryLanes = 130023424;
      var RetryLane1 = 4194304;
      var RetryLane2 = 8388608;
      var RetryLane3 = 16777216;
      var RetryLane4 = 33554432;
      var RetryLane5 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root3, wipLanes) {
        var pendingLanes = root3.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root3.suspendedLanes;
        var pingedLanes = root3.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root3.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root3.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            nextLanes |= entanglements[index3];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root3, lanes) {
        var eventTimes = root3.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var eventTime = eventTimes[index3];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root3, currentTime) {
        var pendingLanes = root3.pendingLanes;
        var suspendedLanes = root3.suspendedLanes;
        var pingedLanes = root3.pingedLanes;
        var expirationTimes = root3.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var expirationTime = expirationTimes[index3];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index3] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root3.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root3) {
        return getHighestPriorityLanes(root3.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root3) {
        var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root3, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root3, lanes) {
        return (lanes & root3.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a10, b10) {
        return (a10 & b10) !== NoLanes;
      }
      function isSubsetOfLanes(set6, subset) {
        return (set6 & subset) === subset;
      }
      function mergeLanes(a10, b10) {
        return a10 | b10;
      }
      function removeLanes(set6, subset) {
        return set6 & ~subset;
      }
      function intersectLanes(a10, b10) {
        return a10 & b10;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a10, b10) {
        return a10 !== NoLane && a10 < b10 ? a10 : b10;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i10 = 0; i10 < TotalLanes; i10++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root3, updateLane, eventTime) {
        root3.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
        }
        var eventTimes = root3.eventTimes;
        var index3 = laneToIndex(updateLane);
        eventTimes[index3] = eventTime;
      }
      function markRootSuspended(root3, suspendedLanes) {
        root3.suspendedLanes |= suspendedLanes;
        root3.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root3.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root3, pingedLanes, eventTime) {
        root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root3, remainingLanes) {
        var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
        root3.pendingLanes = remainingLanes;
        root3.suspendedLanes = NoLanes;
        root3.pingedLanes = NoLanes;
        root3.expiredLanes &= remainingLanes;
        root3.mutableReadLanes &= remainingLanes;
        root3.entangledLanes &= remainingLanes;
        var entanglements = root3.entanglements;
        var eventTimes = root3.eventTimes;
        var expirationTimes = root3.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          entanglements[index3] = NoLanes;
          eventTimes[index3] = NoTimestamp;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root3, entangledLanes) {
        var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
        var entanglements = root3.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          if (lane & entangledLanes | entanglements[index3] & entangledLanes) {
            entanglements[index3] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root3, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root3, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root3, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
        var memoizedUpdaters = root3.memoizedUpdaters;
        while (lanes > 0) {
          var index3 = laneToIndex(lanes);
          var lane = 1 << index3;
          var updaters = pendingUpdatersLaneMap[index3];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root3, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a10, b10) {
        return a10 !== 0 && a10 < b10 ? a10 : b10;
      }
      function lowerEventPriority(a10, b10) {
        return a10 === 0 || a10 > b10 ? a10 : b10;
      }
      function isHigherEventPriority(a10, b10) {
        return a10 !== 0 && a10 < b10;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root3) {
        var currentState = root3.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map();
      var queuedPointerCaptures = new Map();
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId2 = nativeEvent.pointerId;
            queuedPointers.delete(pointerId2);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId2 = pointerEvent.pointerId;
            queuedPointers.set(pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root3 = nearestMounted.stateNode;
              if (isRootDehydrated(root3)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i10 = 0;
        for (; i10 < queuedExplicitHydrationTargets.length; i10++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i10].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i10, 0, queuedTarget);
        if (i10 === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map2.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i10 = 1; i10 < queuedDiscreteEvents.length; i10++) {
            var queuedEvent = queuedDiscreteEvents[i10];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i2];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root3 = nearestMounted.stateNode;
              if (isRootDehydrated(root3)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root2 = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root2 = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root2 = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : void 0;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root2) {
          return root2.value;
        }
        return root2.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign2({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === void 0)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign2({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign2({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign2({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to2;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to2 = _related ? getClosestInstanceFromNode(_related) : null;
          if (to2 !== null) {
            var nearestMounted = getNearestMountedFiber(to2);
            if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
              to2 = null;
            }
          }
        } else {
          from = null;
          to2 = targetInst;
        }
        if (from === to2) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to2 == null ? win : getNodeFromInstance(to2);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to2);
      }
      function is(x10, y10) {
        return x10 === y10 && (x10 !== 0 || 1 / x10 === 1 / y10) || x10 !== x10 && y10 !== y10;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual2(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i10 = 0; i10 < keysA.length; i10++) {
          var currentKey = keysA[i10];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root3, offset) {
        var node = getLeafNode(root3);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e14) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i10 = 0; i10 < ancestors.length; i10++) {
            var info = ancestors[i10];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === void 0) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map();
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i10 = 0; i10 < simpleEventPluginEvents.length; i10++) {
          var eventName = simpleEventPluginEvents[i10];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === void 0) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i10 = dispatchListeners.length - 1; i10 >= 0; i10--) {
            var _dispatchListeners$i = dispatchListeners[i10], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i2 = 0; _i2 < dispatchListeners.length; _i2++) {
            var _dispatchListeners$_i = dispatchListeners[_i2], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i10 = 0; i10 < dispatchQueue.length; i10++) {
          var _dispatchQueue$i = dispatchQueue[i10], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = void 0;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== void 0) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== void 0) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container2 = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container2, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container2 !== null) {
                    var parentNode = getClosestInstanceFromNode(container2);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container2 = container2.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to2) {
        var common = from && to2 ? getLowestCommonAncestor(from, to2) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to2 !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop4() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop4;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i10 = 0; i10 < updatePayload.length; i10 += 2) {
          var propKey = updatePayload[i10];
          var propValue = updatePayload[i10 + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement129(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i10 = 0; i10 < mediaEventTypes.length; i10++) {
              listenToNonDelegatedEvent(mediaEventTypes[i10], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i10 = 0; i10 < mediaEventTypes.length; i10++) {
              listenToNonDelegatedEvent(mediaEventTypes[i10], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set();
          var attributes = domElement.attributes;
          for (var _i2 = 0; _i2 < attributes.length; _i2++) {
            var name = attributes[_i2].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i2].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
            var serverValue = void 0;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root3 = rootContainerInstance.documentElement;
            namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container2.namespaceURI || null;
            type = container2.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement129(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === void 0) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : void 0;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container2, child) {
        var parentNode;
        if (container2.nodeType === COMMENT_NODE) {
          parentNode = container2.parentNode;
          parentNode.insertBefore(child, container2);
        } else {
          parentNode = container2;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container2._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container2, child, beforeChild) {
        if (container2.nodeType === COMMENT_NODE) {
          container2.parentNode.insertBefore(child, beforeChild);
        } else {
          container2.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container2, child) {
        if (container2.nodeType === COMMENT_NODE) {
          container2.parentNode.removeChild(child);
        } else {
          container2.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
        if (container2.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container2.parentNode, suspenseInstance);
        } else if (container2.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container2, suspenseInstance);
        }
        retryIfBlockedOn(container2);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container2) {
        if (container2.nodeType === ELEMENT_NODE) {
          container2.textContent = "";
        } else if (container2.nodeType === DOCUMENT_NODE) {
          var body = container2.body;
          if (body != null) {
            body.textContent = "";
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container2) {
        retryIfBlockedOn(container2);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === void 0) {
          elementListenerSet = node[internalEventHandlersKey] = new Set();
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has3 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has3(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex2) {
                error$1 = ex2;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index2 = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop2(cursor, fiber) {
        if (index2 < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index2]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index2];
        valueStack[index2] = null;
        {
          fiberStack[index2] = null;
        }
        index2--;
      }
      function push2(cursor, value, fiber) {
        index2++;
        valueStack[index2] = cursor.current;
        {
          fiberStack[index2] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        {
          pop2(didPerformWorkStackCursor, fiber);
          pop2(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop2(didPerformWorkStackCursor, fiber);
          pop2(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push2(contextStackCursor, context, fiber);
          push2(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign2({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop2(didPerformWorkStackCursor, workInProgress2);
            pop2(contextStackCursor, workInProgress2);
            push2(contextStackCursor, mergedContext, workInProgress2);
            push2(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop2(didPerformWorkStackCursor, workInProgress2);
            push2(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i10 = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (; i10 < queue.length; i10++) {
              var callback = queue[i10];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i10 + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictLegacyMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set6) {
          var array2 = [];
          set6.forEach(function(value) {
            array2.push(value);
          });
          return array2.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign2({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push2(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop2(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node === propagationRoot) {
            break;
          }
          node = node.return;
        }
        {
          if (node !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var interleavedQueues = null;
      function pushInterleavedQueue(queue) {
        if (interleavedQueues === null) {
          interleavedQueues = [queue];
        } else {
          interleavedQueues.push(queue);
        }
      }
      function hasInterleavedUpdates() {
        return interleavedQueues !== null;
      }
      function enqueueInterleavedUpdates() {
        if (interleavedQueues !== null) {
          for (var i10 = 0; i10 < interleavedQueues.length; i10++) {
            var queue = interleavedQueues[i10];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          interleavedQueues = null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isInterleavedUpdate(fiber)) {
          var interleaved = sharedQueue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushInterleavedQueue(sharedQueue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          sharedQueue.interleaved = update;
        } else {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
        }
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }
      function entangleTransitions(root3, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root3, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return assign2({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i10 = 0; i10 < effects.length; i10++) {
            var effect = effects[i10];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React63.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get4(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
          if (root3 !== null) {
            entangleTransitions(root3, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get4(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
          if (root3 !== null) {
            entangleTransitions(root3, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get4(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
          if (root3 !== null) {
            entangleTransitions(root3, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === void 0) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== void 0 && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set5(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id2.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index3) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index3 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id2 = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id2;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id2) {
        return 1 << getBitLength(id2) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment35) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i10 = 0; i10 < newChildren.length; i10++) {
              var child = newChildren[i10];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment35) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c10) {
        if (c10 === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c10;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push2(rootInstanceStackCursor, nextRootInstance, fiber);
        push2(contextFiberStackCursor, fiber, fiber);
        push2(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop2(contextStackCursor$1, fiber);
        push2(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop2(contextStackCursor$1, fiber);
        pop2(contextFiberStackCursor, fiber);
        pop2(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push2(contextFiberStackCursor, fiber, fiber);
        push2(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop2(contextStackCursor$1, fiber);
        pop2(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push2(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop2(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive$1 = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i10 = 0; i10 < workInProgressSources.length; i10++) {
          var mutableSource = workInProgressSources[i10];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root3, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root3.mutableSourceEagerHydrationData == null) {
          root3.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root3.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i10 = 0; i10 <= hookTypesUpdateIndexDev; i10++) {
                var oldHookName = hookTypesDev[i10];
                var newHookName = i10 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i10 + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i10 = 0; i10 < prevDeps.length && i10 < nextDeps.length; i10++) {
          if (objectIs(nextDeps[i10], prevDeps[i10])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action2) {
        return typeof action2 === "function" ? action2(state) : action2;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== void 0) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch2];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action2 = update.action;
                newState = reducer(newState, action2);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch2 = queue.dispatch;
        return [hook.memoizedState, dispatch2];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch2 = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action2 = update.action;
            newState = reducer(newState, action2);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch2];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return void 0;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root3 = getWorkInProgressRoot();
          if (root3 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root3, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root3 = getWorkInProgressRoot();
          if (root3 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root3, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch2];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create3, destroy, deps) {
        var effect = {
          tag,
          create: create3,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
      }
      function mountEffect(create3, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
        }
      }
      function updateEffect(create3, deps) {
        return updateEffectImpl(Passive, Passive$1, create3, deps);
      }
      function mountInsertionEffect(create3, deps) {
        return mountEffectImpl(Update, Insertion, create3, deps);
      }
      function updateInsertionEffect(create3, deps) {
        return updateEffectImpl(Update, Insertion, create3, deps);
      }
      function mountLayoutEffect(create3, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create3, deps);
      }
      function updateLayoutEffect(create3, deps) {
        return updateEffectImpl(Update, Layout, create3, deps);
      }
      function imperativeHandleEffect(create3, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create3();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create3();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create3, deps) {
        {
          if (typeof create3 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create3, deps) {
        {
          if (typeof create3 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root3 = getWorkInProgressRoot();
        var identifierPrefix = root3.identifierPrefix;
        var id2;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id2 = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id2 += "H" + localId.toString(32);
          }
          id2 += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id2;
        return id2;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id2 = hook.memoizedState;
        return id2;
      }
      function dispatchReducerAction(fiber, queue, action2) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action: action2,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          enqueueUpdate$1(fiber, queue, update);
          var eventTime = requestEventTime();
          var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
          if (root3 !== null) {
            entangleTransitionUpdate(root3, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action2) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action: action2,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          enqueueUpdate$1(fiber, queue, update);
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action2);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var eventTime = requestEventTime();
          var root3 = scheduleUpdateOnFiber(fiber, lane, eventTime);
          if (root3 !== null) {
            entangleTransitionUpdate(root3, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        if (isInterleavedUpdate(fiber)) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushInterleavedQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        } else {
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
      }
      function entangleTransitionUpdate(root3, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root3, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action2) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create3, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create3, deps);
          },
          useImperativeHandle: function(ref, create3, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create3, deps);
          },
          useInsertionEffect: function(create3, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create3, deps);
          },
          useLayoutEffect: function(create3, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create3, deps);
          },
          useMemo: function(create3, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create3, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root3 = parentFiber.stateNode;
                root3.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root3 = parentFiber.stateNode;
                if (root3 !== null) {
                  root3.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValue(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
            console["error"](error2);
          }
        } catch (e14) {
          setTimeout(function() {
            throw e14;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root3, wakeable, lanes) {
        var pingCache = root3.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root3.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === void 0) {
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = new Set();
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
            return node;
          }
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root3, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root3, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root3, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root3, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
              queueHydrationError(value);
              return;
            }
          }
        }
        renderDidError(value);
        value = createCapturedValue(value, sourceFiber);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent;
      var updateHostText;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment35:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return workInProgress2;
            }
            if (nextState !== null && nextState.dehydrated !== null) {
              var _wasHydrated3 = popHydrationState(workInProgress2);
              if (current2 === null) {
                if (!_wasHydrated3) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
            }
            upgradeHydrationErrorsToRecoverable();
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current2 === null) {
              popHydrationState(workInProgress2);
            } else {
              var _prevState = current2.memoizedState;
              prevDidTimeout = _prevState !== null;
            }
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var _primaryChildFragment2 = workInProgress2.child;
                  if (_primaryChildFragment2 !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.renderingStartTime = now2();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState2 = current2.memoizedState;
              var prevIsHidden = _prevState2 !== null;
              if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var render2 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual2;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x10) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef$1(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValue(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef$1(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root3 = workInProgress2.stateNode;
        if (root3.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
        } else if (root3.context) {
          pushTopLevelContextObject(workInProgress2, root3.context, false);
        }
        pushHostContainer(workInProgress2, root3.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var root3 = workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef$1(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText$1(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              if (!didSuspend) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, _dehydrated, prevState, renderLanes2);
              } else if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var _nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _nextPrimaryChildren2 = nextProps.children;
              var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
              var _primaryChildFragment3 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            } else {
              var _nextPrimaryChildren3 = nextProps.children;
              var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment4;
            }
          } else {
            if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _nextPrimaryChildren4 = nextProps.children;
              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
              var _primaryChildFragment5 = workInProgress2.child;
              var _prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children;
              var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment6;
            }
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, suspenseInstance, suspenseState, renderLanes2) {
        warnIfHydrating();
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root3 = getWorkInProgressRoot();
          if (root3 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              scheduleUpdateOnFiber(current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture;
          workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          registerSuspenseInstanceRetry(suspenseInstance, retry);
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Hydrating;
          return primaryChildFragment;
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index3) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i10 = 0; i10 < children.length; i10++) {
                if (!validateSuspenseListNestedChild(children[i10], i10)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i2 = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i2)) {
                      return;
                    }
                    _i2++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === void 0) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root3 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent$1(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText$1(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment35:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            var root3 = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            var root3 = interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root3, firstChild) {
        focusedInstanceHandle = prepareForCommit(root3.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root3 = finishedWork.stateNode;
                clearContainer(root3.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = void 0;
              if (destroy !== void 0) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create3 = effect.create;
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create3();
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy !== "function") {
                  var hookName = void 0;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = void 0;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root3 = parentFiber.stateNode;
                        root3.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node, node.return, instance);
            }
            safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node;
                try {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node = node.return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root3, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== void 0) {
                      if ((tag & Insertion) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root3, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root3;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root3);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i10 = 0; i10 < deletions.length; i10++) {
            var childToDelete = deletions[i10];
            try {
              commitDeletionEffects(root3, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root3);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root3.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root3, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root3, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root3, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root3;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root3, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(child, root3, committedLanes);
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i10 = 0; i10 < deletions.length; i10++) {
                var fiberToDelete = deletions[i10];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now2();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now2();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set();
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root3 === null) {
          return null;
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root3, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root3, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root3 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root3, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
        return root3;
      }
      function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
        var current2 = root3.current;
        current2.lanes = lane;
        markRootUpdated(root3, lane, eventTime);
        ensureRootIsScheduled(root3, eventTime);
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root3 = node.stateNode;
          return root3;
        } else {
          return null;
        }
      }
      function isInterleavedUpdate(fiber, lane) {
        return (workInProgressRoot !== null || hasInterleavedUpdates()) && (fiber.mode & ConcurrentMode) !== NoMode && (executionContext & RenderContext) === NoContext;
      }
      function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode;
        markStarvedLanesAsExpired(root3, currentTime);
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root3.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root3.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if (executionContext === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root3, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root3.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now2());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root3, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root3, lanes);
            var finishedWork = root3.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root3, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now2());
                throw _fatalError;
              }
            }
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root3, now2());
        if (root3.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root3);
        }
        return null;
      }
      function recoverFromConcurrentError(root3, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root3)) {
          var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root3.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root3, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors2) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors2;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
        }
      }
      function finishConcurrentRender(root3, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root3, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root3, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root3.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root3, suspendedLanes);
                  break;
                }
                root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root3, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now2() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while (true) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i10 = 0; i10 < checks.length; i10++) {
                  var check = checks[i10];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node;
            node = child;
            continue;
          }
          if (node === finishedWork) {
            return true;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return true;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root3, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
      }
      function performSyncWorkOnRoot(root3) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root3, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root3, now2());
          return null;
        }
        var exitStatus = renderRootSync(root3, lanes);
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root3, NoLanes);
          markRootSuspended$1(root3, lanes);
          ensureRootIsScheduled(root3, now2());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root3, now2());
        return null;
      }
      function flushRoot(root3, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root3, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root3, now2());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn, a10) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a10);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn, a10, b10, c10, d10) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn(a10, b10, c10, d10);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return void 0;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop2(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root3.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root3;
        var rootWorkInProgress = createWorkInProgress(root3.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        enqueueInterleavedUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root3, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now2();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root3, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root3, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root3, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root3, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root3, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root3, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root3, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (finishedWork === root3.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root3.callbackNode = null;
        root3.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes);
        if (root3 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root3, finishedWork, lanes);
          resetAfterCommit(root3.containerInfo);
          root3.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root3, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root3.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root3;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root3.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root3.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root3.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root3, now2());
        if (recoverableErrors !== null) {
          var onRecoverableError = root3.onRecoverableError;
          for (var i10 = 0; i10 < recoverableErrors.length; i10++) {
            var recoverableError = recoverableErrors[i10];
            onRecoverableError(recoverableError);
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root3.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root3 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root3;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root3.current);
        commitPassiveMountEffects(root3, root3.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i10 = 0; i10 < profilerEffects.length; i10++) {
            var _fiber = profilerEffects[i10];
            commitPassiveEffectDurations(root3, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root3.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root3 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root3;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root3);
        {
          var stateNode = root3.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValue(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
          markRootUpdated(root3, SyncLane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              enqueueUpdate(fiber, update);
              var eventTime = requestEventTime();
              var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
              if (root3 !== null) {
                markRootUpdated(root3, SyncLane, eventTime);
                ensureRootIsScheduled(root3, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
        }
      }
      function pingSuspendedRoot(root3, wakeable, pingedLanes) {
        var pingCache = root3.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root3, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
        if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root3, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root3, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root3 !== null) {
          markRootUpdated(root3, retryLane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root3, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root3.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root3, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
        {
          if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root3, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root3, element) {
        {
          if (root3.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root3, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root3, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e14) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== void 0 && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment35, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {};
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set();
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i2 = 0; _i2 < TotalLanes; _i2++) {
            pendingUpdatersLaneMap.push(new Set());
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root3.current = uninitializedFiber;
        uninitializedFiber.stateNode = root3;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root3;
      }
      var ReactVersion = "18.1.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get4(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get4(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root3.context = getContextForSubtree(null);
        var current2 = root3.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== void 0 && callback !== null ? callback : null;
        enqueueUpdate(current2, update);
        scheduleInitialHydrationOnRoot(root3, lane, eventTime);
        return root3;
      }
      function updateContainer(element, container2, parentComponent, callback) {
        {
          onScheduleRoot(container2, element);
        }
        var current$1 = container2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container2.context === null) {
          container2.context = context;
        } else {
          container2.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        var root3 = scheduleUpdateOnFiber(current$1, lane, eventTime);
        if (root3 !== null) {
          entangleTransitions(root3, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container2) {
        var containerFiber = container2.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot:
            var root3 = fiber.stateNode;
            if (isRootDehydrated(root3)) {
              var lanes = getHighestPriorityPendingLanes(root3);
              flushRoot(root3, lanes);
            }
            break;
          case SuspenseComponent:
            var eventTime = requestEventTime();
            flushSync(function() {
              return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index3) {
          var key = path[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
          var oldKey = oldPath[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          if (index3 + 1 === oldPath.length) {
            var newKey = newPath[index3];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i10 = 0; i10 < newPath.length - 1; i10++) {
              if (oldPath[i10] !== newPath[i10]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index3, value) {
          if (index3 >= path.length) {
            return value;
          }
          var key = path[index3];
          var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id2) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id2 > 0) {
            currentHook2 = currentHook2.next;
            id2--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id2, path, value) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateDeletePath = function(fiber, id2, path) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
          var hook = findHook(fiber, id2);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign2({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        scheduleUpdate = function(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root3 = this._internalRoot;
        if (root3 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container2 = root3.containerInfo;
          if (container2.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root3.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container2) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root3, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root3 = this._internalRoot;
        if (root3 !== null) {
          this._internalRoot = null;
          var container2 = root3.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root3, null, null);
          });
          unmarkContainerAsRoot(container2);
        }
      };
      function createRoot2(container2, options2) {
        if (!isValidContainer(container2)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container2);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options2 !== null && options2 !== void 0) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== void 0) {
            transitionCallbacks = options2.transitionCallbacks;
          }
        }
        var root3 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root3.current, container2);
        var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root3);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container2, initialChildren, options2) {
        if (!isValidContainer(container2)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container2);
        {
          if (initialChildren === void 0) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== void 0) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== void 0) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== void 0) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root3.current, container2);
        listenToAllSupportedEvents(container2);
        if (mutableSources) {
          for (var i10 = 0; i10 < mutableSources.length; i10++) {
            var mutableSource = mutableSources[i10];
            registerMutableSourceForHydration(root3, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root3);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container2) {
        {
          if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container2)) {
            if (container2._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container2) {
          if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container2) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container2._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container2);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container2) {
        if (!container2) {
          return null;
        }
        if (container2.nodeType === DOCUMENT_NODE) {
          return container2.documentElement;
        } else {
          return container2.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root3);
              originalCallback.call(instance);
            };
          }
          var root3 = createHydrationContainer(initialChildren, callback, container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container2._reactRootContainer = root3;
          markContainerAsRoot(root3.current, container2);
          var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root3;
        } else {
          var rootSibling;
          while (rootSibling = container2.lastChild) {
            container2.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container2._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container2);
          var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container2);
          warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        }
        var maybeRoot = container2._reactRootContainer;
        var root3;
        if (!maybeRoot) {
          root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
        } else {
          root3 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root3);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root3, parentComponent, callback);
        }
        return getPublicRootInstance(root3);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container2, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container2)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
      }
      function render(element, container2, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container2)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has2(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container2) {
        if (!isValidContainerLegacy(container2)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container2._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container2);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
              container2._reactRootContainer = null;
              unmarkContainerAsRoot(container2);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container2);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container2) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container2)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container2, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container2, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot2(container2, options2);
      }
      function hydrateRoot$1(container2, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container2, initialChildren, options2);
      }
      function flushSync$1(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports2.createPortal = createPortal$1;
      exports2.createRoot = createRoot$1;
      exports2.findDOMNode = findDOMNode;
      exports2.flushSync = flushSync$1;
      exports2.hydrate = hydrate;
      exports2.hydrateRoot = hydrateRoot$1;
      exports2.render = render;
      exports2.unmountComponentAtNode = unmountComponentAtNode;
      exports2.unstable_batchedUpdates = batchedUpdates$1;
      exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports2.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
});

// ../../node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports2, module2) => {
  "use strict";
  if (false) {
    checkDCE();
    module2.exports = null;
  } else {
    module2.exports = require_react_dom_development();
  }
});

// ../../node_modules/react-dom/client.js
var require_client = __commonJS((exports2) => {
  "use strict";
  var m10 = require_react_dom();
  if (false) {
    exports2.createRoot = m10.createRoot;
    exports2.hydrateRoot = m10.hydrateRoot;
  } else {
    i10 = m10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports2.createRoot = function(c10, o13) {
      i10.usingClientEntryPoint = true;
      try {
        return m10.createRoot(c10, o13);
      } finally {
        i10.usingClientEntryPoint = false;
      }
    };
    exports2.hydrateRoot = function(c10, h10, o13) {
      i10.usingClientEntryPoint = true;
      try {
        return m10.hydrateRoot(c10, h10, o13);
      } finally {
        i10.usingClientEntryPoint = false;
      }
    };
  }
  var i10;
});

// ../../node_modules/tslib/tslib.js
var require_tslib = __commonJS((exports2, module2) => {
  var __extends4;
  var __assign6;
  var __rest6;
  var __decorate4;
  var __param4;
  var __metadata4;
  var __awaiter5;
  var __generator4;
  var __exportStar5;
  var __values5;
  var __read5;
  var __spread4;
  var __spreadArrays4;
  var __spreadArray2;
  var __await4;
  var __asyncGenerator4;
  var __asyncDelegator4;
  var __asyncValues4;
  var __makeTemplateObject4;
  var __importStar4;
  var __importDefault4;
  var __classPrivateFieldGet4;
  var __classPrivateFieldSet4;
  var __classPrivateFieldIn2;
  var __createBinding4;
  (function(factory) {
    var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root2, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root2, createExporter(module2.exports)));
    } else {
      factory(createExporter(root2));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root2) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id2, v10) {
        return exports3[id2] = previous ? previous(id2, v10) : v10;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d10, b10) {
      d10.__proto__ = b10;
    } || function(d10, b10) {
      for (var p10 in b10)
        if (Object.prototype.hasOwnProperty.call(b10, p10))
          d10[p10] = b10[p10];
    };
    __extends4 = function(d10, b10) {
      if (typeof b10 !== "function" && b10 !== null)
        throw new TypeError("Class extends value " + String(b10) + " is not a constructor or null");
      extendStatics(d10, b10);
      function __() {
        this.constructor = d10;
      }
      d10.prototype = b10 === null ? Object.create(b10) : (__.prototype = b10.prototype, new __());
    };
    __assign6 = Object.assign || function(t13) {
      for (var s10, i10 = 1, n10 = arguments.length; i10 < n10; i10++) {
        s10 = arguments[i10];
        for (var p10 in s10)
          if (Object.prototype.hasOwnProperty.call(s10, p10))
            t13[p10] = s10[p10];
      }
      return t13;
    };
    __rest6 = function(s10, e14) {
      var t13 = {};
      for (var p10 in s10)
        if (Object.prototype.hasOwnProperty.call(s10, p10) && e14.indexOf(p10) < 0)
          t13[p10] = s10[p10];
      if (s10 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i10 = 0, p10 = Object.getOwnPropertySymbols(s10); i10 < p10.length; i10++) {
          if (e14.indexOf(p10[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p10[i10]))
            t13[p10[i10]] = s10[p10[i10]];
        }
      return t13;
    };
    __decorate4 = function(decorators, target, key, desc) {
      var c10 = arguments.length, r12 = c10 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d10;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r12 = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i10 = decorators.length - 1; i10 >= 0; i10--)
          if (d10 = decorators[i10])
            r12 = (c10 < 3 ? d10(r12) : c10 > 3 ? d10(target, key, r12) : d10(target, key)) || r12;
      return c10 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
    };
    __param4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata4 = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter5 = function(thisArg, _arguments, P10, generator) {
      function adopt(value) {
        return value instanceof P10 ? value : new P10(function(resolve) {
          resolve(value);
        });
      }
      return new (P10 || (P10 = Promise))(function(resolve, reject2) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator4 = function(thisArg, body) {
      var _17 = {label: 0, sent: function() {
        if (t13[0] & 1)
          throw t13[1];
        return t13[1];
      }, trys: [], ops: []}, f10, y10, t13, g10;
      return g10 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g10[Symbol.iterator] = function() {
        return this;
      }), g10;
      function verb(n10) {
        return function(v10) {
          return step([n10, v10]);
        };
      }
      function step(op) {
        if (f10)
          throw new TypeError("Generator is already executing.");
        while (_17)
          try {
            if (f10 = 1, y10 && (t13 = op[0] & 2 ? y10["return"] : op[0] ? y10["throw"] || ((t13 = y10["return"]) && t13.call(y10), 0) : y10.next) && !(t13 = t13.call(y10, op[1])).done)
              return t13;
            if (y10 = 0, t13)
              op = [op[0] & 2, t13.value];
            switch (op[0]) {
              case 0:
              case 1:
                t13 = op;
                break;
              case 4:
                _17.label++;
                return {value: op[1], done: false};
              case 5:
                _17.label++;
                y10 = op[1];
                op = [0];
                continue;
              case 7:
                op = _17.ops.pop();
                _17.trys.pop();
                continue;
              default:
                if (!(t13 = _17.trys, t13 = t13.length > 0 && t13[t13.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _17 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t13 || op[1] > t13[0] && op[1] < t13[3])) {
                  _17.label = op[1];
                  break;
                }
                if (op[0] === 6 && _17.label < t13[1]) {
                  _17.label = t13[1];
                  t13 = op;
                  break;
                }
                if (t13 && _17.label < t13[2]) {
                  _17.label = t13[2];
                  _17.ops.push(op);
                  break;
                }
                if (t13[2])
                  _17.ops.pop();
                _17.trys.pop();
                continue;
            }
            op = body.call(thisArg, _17);
          } catch (e14) {
            op = [6, e14];
            y10 = 0;
          } finally {
            f10 = t13 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __exportStar5 = function(m10, o13) {
      for (var p10 in m10)
        if (p10 !== "default" && !Object.prototype.hasOwnProperty.call(o13, p10))
          __createBinding4(o13, m10, p10);
    };
    __createBinding4 = Object.create ? function(o13, m10, k10, k23) {
      if (k23 === void 0)
        k23 = k10;
      var desc = Object.getOwnPropertyDescriptor(m10, k10);
      if (!desc || ("get" in desc ? !m10.__esModule : desc.writable || desc.configurable)) {
        desc = {enumerable: true, get: function() {
          return m10[k10];
        }};
      }
      Object.defineProperty(o13, k23, desc);
    } : function(o13, m10, k10, k23) {
      if (k23 === void 0)
        k23 = k10;
      o13[k23] = m10[k10];
    };
    __values5 = function(o13) {
      var s10 = typeof Symbol === "function" && Symbol.iterator, m10 = s10 && o13[s10], i10 = 0;
      if (m10)
        return m10.call(o13);
      if (o13 && typeof o13.length === "number")
        return {
          next: function() {
            if (o13 && i10 >= o13.length)
              o13 = void 0;
            return {value: o13 && o13[i10++], done: !o13};
          }
        };
      throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read5 = function(o13, n10) {
      var m10 = typeof Symbol === "function" && o13[Symbol.iterator];
      if (!m10)
        return o13;
      var i10 = m10.call(o13), r12, ar2 = [], e14;
      try {
        while ((n10 === void 0 || n10-- > 0) && !(r12 = i10.next()).done)
          ar2.push(r12.value);
      } catch (error) {
        e14 = {error};
      } finally {
        try {
          if (r12 && !r12.done && (m10 = i10["return"]))
            m10.call(i10);
        } finally {
          if (e14)
            throw e14.error;
        }
      }
      return ar2;
    };
    __spread4 = function() {
      for (var ar2 = [], i10 = 0; i10 < arguments.length; i10++)
        ar2 = ar2.concat(__read5(arguments[i10]));
      return ar2;
    };
    __spreadArrays4 = function() {
      for (var s10 = 0, i10 = 0, il2 = arguments.length; i10 < il2; i10++)
        s10 += arguments[i10].length;
      for (var r12 = Array(s10), k10 = 0, i10 = 0; i10 < il2; i10++)
        for (var a10 = arguments[i10], j10 = 0, jl2 = a10.length; j10 < jl2; j10++, k10++)
          r12[k10] = a10[j10];
      return r12;
    };
    __spreadArray2 = function(to2, from, pack) {
      if (pack || arguments.length === 2)
        for (var i10 = 0, l10 = from.length, ar2; i10 < l10; i10++) {
          if (ar2 || !(i10 in from)) {
            if (!ar2)
              ar2 = Array.prototype.slice.call(from, 0, i10);
            ar2[i10] = from[i10];
          }
        }
      return to2.concat(ar2 || Array.prototype.slice.call(from));
    };
    __await4 = function(v10) {
      return this instanceof __await4 ? (this.v = v10, this) : new __await4(v10);
    };
    __asyncGenerator4 = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g10 = generator.apply(thisArg, _arguments || []), i10, q10 = [];
      return i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10;
      function verb(n10) {
        if (g10[n10])
          i10[n10] = function(v10) {
            return new Promise(function(a10, b10) {
              q10.push([n10, v10, a10, b10]) > 1 || resume(n10, v10);
            });
          };
      }
      function resume(n10, v10) {
        try {
          step(g10[n10](v10));
        } catch (e14) {
          settle(q10[0][3], e14);
        }
      }
      function step(r12) {
        r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q10[0][2], r12);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject2(value) {
        resume("throw", value);
      }
      function settle(f10, v10) {
        if (f10(v10), q10.shift(), q10.length)
          resume(q10[0][0], q10[0][1]);
      }
    };
    __asyncDelegator4 = function(o13) {
      var i10, p10;
      return i10 = {}, verb("next"), verb("throw", function(e14) {
        throw e14;
      }), verb("return"), i10[Symbol.iterator] = function() {
        return this;
      }, i10;
      function verb(n10, f10) {
        i10[n10] = o13[n10] ? function(v10) {
          return (p10 = !p10) ? {value: __await4(o13[n10](v10)), done: n10 === "return"} : f10 ? f10(v10) : v10;
        } : f10;
      }
    };
    __asyncValues4 = function(o13) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m10 = o13[Symbol.asyncIterator], i10;
      return m10 ? m10.call(o13) : (o13 = typeof __values5 === "function" ? __values5(o13) : o13[Symbol.iterator](), i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10);
      function verb(n10) {
        i10[n10] = o13[n10] && function(v10) {
          return new Promise(function(resolve, reject2) {
            v10 = o13[n10](v10), settle(resolve, reject2, v10.done, v10.value);
          });
        };
      }
      function settle(resolve, reject2, d10, v10) {
        Promise.resolve(v10).then(function(v11) {
          resolve({value: v11, done: d10});
        }, reject2);
      }
    };
    __makeTemplateObject4 = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o13, v10) {
      Object.defineProperty(o13, "default", {enumerable: true, value: v10});
    } : function(o13, v10) {
      o13["default"] = v10;
    };
    __importStar4 = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k10 in mod)
          if (k10 !== "default" && Object.prototype.hasOwnProperty.call(mod, k10))
            __createBinding4(result, mod, k10);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    __importDefault4 = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet4 = function(receiver, state, kind, f10) {
      if (kind === "a" && !f10)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f10 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f10 : kind === "a" ? f10.call(receiver) : f10 ? f10.value : state.get(receiver);
    };
    __classPrivateFieldSet4 = function(receiver, state, value, kind, f10) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f10)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f10 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f10.call(receiver, value) : f10 ? f10.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldIn2 = function(state, receiver) {
      if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
        throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === "function" ? receiver === state : state.has(receiver);
    };
    exporter("__extends", __extends4);
    exporter("__assign", __assign6);
    exporter("__rest", __rest6);
    exporter("__decorate", __decorate4);
    exporter("__param", __param4);
    exporter("__metadata", __metadata4);
    exporter("__awaiter", __awaiter5);
    exporter("__generator", __generator4);
    exporter("__exportStar", __exportStar5);
    exporter("__createBinding", __createBinding4);
    exporter("__values", __values5);
    exporter("__read", __read5);
    exporter("__spread", __spread4);
    exporter("__spreadArrays", __spreadArrays4);
    exporter("__spreadArray", __spreadArray2);
    exporter("__await", __await4);
    exporter("__asyncGenerator", __asyncGenerator4);
    exporter("__asyncDelegator", __asyncDelegator4);
    exporter("__asyncValues", __asyncValues4);
    exporter("__makeTemplateObject", __makeTemplateObject4);
    exporter("__importStar", __importStar4);
    exporter("__importDefault", __importDefault4);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
  });
});

// ../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS((exports2) => {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  if (true) {
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object2) {
        if (typeof object2 === "object" && object2 !== null) {
          var $$typeof = object2.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object2.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element2 = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment35 = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal4 = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object2) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object2) {
        return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object2) {
        return typeOf(object2) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object2) {
        return typeOf(object2) === REACT_PROVIDER_TYPE;
      }
      function isElement(object2) {
        return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object2) {
        return typeOf(object2) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object2) {
        return typeOf(object2) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object2) {
        return typeOf(object2) === REACT_LAZY_TYPE;
      }
      function isMemo(object2) {
        return typeOf(object2) === REACT_MEMO_TYPE;
      }
      function isPortal(object2) {
        return typeOf(object2) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object2) {
        return typeOf(object2) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object2) {
        return typeOf(object2) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object2) {
        return typeOf(object2) === REACT_SUSPENSE_TYPE;
      }
      exports2.AsyncMode = AsyncMode;
      exports2.ConcurrentMode = ConcurrentMode;
      exports2.ContextConsumer = ContextConsumer;
      exports2.ContextProvider = ContextProvider;
      exports2.Element = Element2;
      exports2.ForwardRef = ForwardRef;
      exports2.Fragment = Fragment35;
      exports2.Lazy = Lazy;
      exports2.Memo = Memo;
      exports2.Portal = Portal4;
      exports2.Profiler = Profiler;
      exports2.StrictMode = StrictMode;
      exports2.Suspense = Suspense;
      exports2.isAsyncMode = isAsyncMode;
      exports2.isConcurrentMode = isConcurrentMode;
      exports2.isContextConsumer = isContextConsumer;
      exports2.isContextProvider = isContextProvider;
      exports2.isElement = isElement;
      exports2.isForwardRef = isForwardRef;
      exports2.isFragment = isFragment;
      exports2.isLazy = isLazy;
      exports2.isMemo = isMemo;
      exports2.isPortal = isPortal;
      exports2.isProfiler = isProfiler;
      exports2.isStrictMode = isStrictMode;
      exports2.isSuspense = isSuspense;
      exports2.isValidElementType = isValidElementType;
      exports2.typeOf = typeOf;
    })();
  }
});

// ../../node_modules/react-is/index.js
var require_react_is = __commonJS((exports2, module2) => {
  "use strict";
  if (false) {
    module2.exports = null;
  } else {
    module2.exports = require_react_is_development();
  }
});

// ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS((exports2, module2) => {
  "use strict";
  var reactIs = require_react_is();
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
  function getStatics(component) {
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    }
    return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
  }
  var defineProperty3 = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype2 = Object.prototype;
  function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
      if (objectPrototype2) {
        var inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype2) {
          hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
        }
      }
      var keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);
      for (var i10 = 0; i10 < keys.length; ++i10) {
        var key = keys[i10];
        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
          try {
            defineProperty3(targetComponent, key, descriptor);
          } catch (e14) {
          }
        }
      }
    }
    return targetComponent;
  }
  module2.exports = hoistNonReactStatics2;
});

// ../../node_modules/react-remove-scroll/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends4;
  var __assign6;
  var __rest6;
  var __decorate4;
  var __param4;
  var __metadata4;
  var __awaiter5;
  var __generator4;
  var __exportStar5;
  var __values5;
  var __read5;
  var __spread4;
  var __spreadArrays4;
  var __await4;
  var __asyncGenerator4;
  var __asyncDelegator4;
  var __asyncValues4;
  var __makeTemplateObject4;
  var __importStar4;
  var __importDefault4;
  var __classPrivateFieldGet4;
  var __classPrivateFieldSet4;
  var __createBinding4;
  (function(factory) {
    var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root2, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root2, createExporter(module2.exports)));
    } else {
      factory(createExporter(root2));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root2) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id2, v10) {
        return exports3[id2] = previous ? previous(id2, v10) : v10;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d10, b10) {
      d10.__proto__ = b10;
    } || function(d10, b10) {
      for (var p10 in b10)
        if (b10.hasOwnProperty(p10))
          d10[p10] = b10[p10];
    };
    __extends4 = function(d10, b10) {
      extendStatics(d10, b10);
      function __() {
        this.constructor = d10;
      }
      d10.prototype = b10 === null ? Object.create(b10) : (__.prototype = b10.prototype, new __());
    };
    __assign6 = Object.assign || function(t13) {
      for (var s10, i10 = 1, n10 = arguments.length; i10 < n10; i10++) {
        s10 = arguments[i10];
        for (var p10 in s10)
          if (Object.prototype.hasOwnProperty.call(s10, p10))
            t13[p10] = s10[p10];
      }
      return t13;
    };
    __rest6 = function(s10, e14) {
      var t13 = {};
      for (var p10 in s10)
        if (Object.prototype.hasOwnProperty.call(s10, p10) && e14.indexOf(p10) < 0)
          t13[p10] = s10[p10];
      if (s10 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i10 = 0, p10 = Object.getOwnPropertySymbols(s10); i10 < p10.length; i10++) {
          if (e14.indexOf(p10[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p10[i10]))
            t13[p10[i10]] = s10[p10[i10]];
        }
      return t13;
    };
    __decorate4 = function(decorators, target, key, desc) {
      var c10 = arguments.length, r12 = c10 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d10;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r12 = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i10 = decorators.length - 1; i10 >= 0; i10--)
          if (d10 = decorators[i10])
            r12 = (c10 < 3 ? d10(r12) : c10 > 3 ? d10(target, key, r12) : d10(target, key)) || r12;
      return c10 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
    };
    __param4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata4 = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter5 = function(thisArg, _arguments, P10, generator) {
      function adopt(value) {
        return value instanceof P10 ? value : new P10(function(resolve) {
          resolve(value);
        });
      }
      return new (P10 || (P10 = Promise))(function(resolve, reject2) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator4 = function(thisArg, body) {
      var _17 = {label: 0, sent: function() {
        if (t13[0] & 1)
          throw t13[1];
        return t13[1];
      }, trys: [], ops: []}, f10, y10, t13, g10;
      return g10 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g10[Symbol.iterator] = function() {
        return this;
      }), g10;
      function verb(n10) {
        return function(v10) {
          return step([n10, v10]);
        };
      }
      function step(op) {
        if (f10)
          throw new TypeError("Generator is already executing.");
        while (_17)
          try {
            if (f10 = 1, y10 && (t13 = op[0] & 2 ? y10["return"] : op[0] ? y10["throw"] || ((t13 = y10["return"]) && t13.call(y10), 0) : y10.next) && !(t13 = t13.call(y10, op[1])).done)
              return t13;
            if (y10 = 0, t13)
              op = [op[0] & 2, t13.value];
            switch (op[0]) {
              case 0:
              case 1:
                t13 = op;
                break;
              case 4:
                _17.label++;
                return {value: op[1], done: false};
              case 5:
                _17.label++;
                y10 = op[1];
                op = [0];
                continue;
              case 7:
                op = _17.ops.pop();
                _17.trys.pop();
                continue;
              default:
                if (!(t13 = _17.trys, t13 = t13.length > 0 && t13[t13.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _17 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t13 || op[1] > t13[0] && op[1] < t13[3])) {
                  _17.label = op[1];
                  break;
                }
                if (op[0] === 6 && _17.label < t13[1]) {
                  _17.label = t13[1];
                  t13 = op;
                  break;
                }
                if (t13 && _17.label < t13[2]) {
                  _17.label = t13[2];
                  _17.ops.push(op);
                  break;
                }
                if (t13[2])
                  _17.ops.pop();
                _17.trys.pop();
                continue;
            }
            op = body.call(thisArg, _17);
          } catch (e14) {
            op = [6, e14];
            y10 = 0;
          } finally {
            f10 = t13 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding4 = function(o13, m10, k10, k23) {
      if (k23 === void 0)
        k23 = k10;
      o13[k23] = m10[k10];
    };
    __exportStar5 = function(m10, exports3) {
      for (var p10 in m10)
        if (p10 !== "default" && !exports3.hasOwnProperty(p10))
          exports3[p10] = m10[p10];
    };
    __values5 = function(o13) {
      var s10 = typeof Symbol === "function" && Symbol.iterator, m10 = s10 && o13[s10], i10 = 0;
      if (m10)
        return m10.call(o13);
      if (o13 && typeof o13.length === "number")
        return {
          next: function() {
            if (o13 && i10 >= o13.length)
              o13 = void 0;
            return {value: o13 && o13[i10++], done: !o13};
          }
        };
      throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read5 = function(o13, n10) {
      var m10 = typeof Symbol === "function" && o13[Symbol.iterator];
      if (!m10)
        return o13;
      var i10 = m10.call(o13), r12, ar2 = [], e14;
      try {
        while ((n10 === void 0 || n10-- > 0) && !(r12 = i10.next()).done)
          ar2.push(r12.value);
      } catch (error) {
        e14 = {error};
      } finally {
        try {
          if (r12 && !r12.done && (m10 = i10["return"]))
            m10.call(i10);
        } finally {
          if (e14)
            throw e14.error;
        }
      }
      return ar2;
    };
    __spread4 = function() {
      for (var ar2 = [], i10 = 0; i10 < arguments.length; i10++)
        ar2 = ar2.concat(__read5(arguments[i10]));
      return ar2;
    };
    __spreadArrays4 = function() {
      for (var s10 = 0, i10 = 0, il2 = arguments.length; i10 < il2; i10++)
        s10 += arguments[i10].length;
      for (var r12 = Array(s10), k10 = 0, i10 = 0; i10 < il2; i10++)
        for (var a10 = arguments[i10], j10 = 0, jl2 = a10.length; j10 < jl2; j10++, k10++)
          r12[k10] = a10[j10];
      return r12;
    };
    __await4 = function(v10) {
      return this instanceof __await4 ? (this.v = v10, this) : new __await4(v10);
    };
    __asyncGenerator4 = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g10 = generator.apply(thisArg, _arguments || []), i10, q10 = [];
      return i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10;
      function verb(n10) {
        if (g10[n10])
          i10[n10] = function(v10) {
            return new Promise(function(a10, b10) {
              q10.push([n10, v10, a10, b10]) > 1 || resume(n10, v10);
            });
          };
      }
      function resume(n10, v10) {
        try {
          step(g10[n10](v10));
        } catch (e14) {
          settle(q10[0][3], e14);
        }
      }
      function step(r12) {
        r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q10[0][2], r12);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject2(value) {
        resume("throw", value);
      }
      function settle(f10, v10) {
        if (f10(v10), q10.shift(), q10.length)
          resume(q10[0][0], q10[0][1]);
      }
    };
    __asyncDelegator4 = function(o13) {
      var i10, p10;
      return i10 = {}, verb("next"), verb("throw", function(e14) {
        throw e14;
      }), verb("return"), i10[Symbol.iterator] = function() {
        return this;
      }, i10;
      function verb(n10, f10) {
        i10[n10] = o13[n10] ? function(v10) {
          return (p10 = !p10) ? {value: __await4(o13[n10](v10)), done: n10 === "return"} : f10 ? f10(v10) : v10;
        } : f10;
      }
    };
    __asyncValues4 = function(o13) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m10 = o13[Symbol.asyncIterator], i10;
      return m10 ? m10.call(o13) : (o13 = typeof __values5 === "function" ? __values5(o13) : o13[Symbol.iterator](), i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10);
      function verb(n10) {
        i10[n10] = o13[n10] && function(v10) {
          return new Promise(function(resolve, reject2) {
            v10 = o13[n10](v10), settle(resolve, reject2, v10.done, v10.value);
          });
        };
      }
      function settle(resolve, reject2, d10, v10) {
        Promise.resolve(v10).then(function(v11) {
          resolve({value: v11, done: d10});
        }, reject2);
      }
    };
    __makeTemplateObject4 = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar4 = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k10 in mod)
          if (Object.hasOwnProperty.call(mod, k10))
            result[k10] = mod[k10];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault4 = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet4 = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet4 = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends4);
    exporter("__assign", __assign6);
    exporter("__rest", __rest6);
    exporter("__decorate", __decorate4);
    exporter("__param", __param4);
    exporter("__metadata", __metadata4);
    exporter("__awaiter", __awaiter5);
    exporter("__generator", __generator4);
    exporter("__exportStar", __exportStar5);
    exporter("__createBinding", __createBinding4);
    exporter("__values", __values5);
    exporter("__read", __read5);
    exporter("__spread", __spread4);
    exporter("__spreadArrays", __spreadArrays4);
    exporter("__await", __await4);
    exporter("__asyncGenerator", __asyncGenerator4);
    exporter("__asyncDelegator", __asyncDelegator4);
    exporter("__asyncValues", __asyncValues4);
    exporter("__makeTemplateObject", __makeTemplateObject4);
    exporter("__importStar", __importStar4);
    exporter("__importDefault", __importDefault4);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
  });
});

// ../../node_modules/use-sidecar/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends4;
  var __assign6;
  var __rest6;
  var __decorate4;
  var __param4;
  var __metadata4;
  var __awaiter5;
  var __generator4;
  var __exportStar5;
  var __values5;
  var __read5;
  var __spread4;
  var __spreadArrays4;
  var __await4;
  var __asyncGenerator4;
  var __asyncDelegator4;
  var __asyncValues4;
  var __makeTemplateObject4;
  var __importStar4;
  var __importDefault4;
  var __classPrivateFieldGet4;
  var __classPrivateFieldSet4;
  var __createBinding4;
  (function(factory) {
    var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root2, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root2, createExporter(module2.exports)));
    } else {
      factory(createExporter(root2));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root2) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id2, v10) {
        return exports3[id2] = previous ? previous(id2, v10) : v10;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d10, b10) {
      d10.__proto__ = b10;
    } || function(d10, b10) {
      for (var p10 in b10)
        if (b10.hasOwnProperty(p10))
          d10[p10] = b10[p10];
    };
    __extends4 = function(d10, b10) {
      extendStatics(d10, b10);
      function __() {
        this.constructor = d10;
      }
      d10.prototype = b10 === null ? Object.create(b10) : (__.prototype = b10.prototype, new __());
    };
    __assign6 = Object.assign || function(t13) {
      for (var s10, i10 = 1, n10 = arguments.length; i10 < n10; i10++) {
        s10 = arguments[i10];
        for (var p10 in s10)
          if (Object.prototype.hasOwnProperty.call(s10, p10))
            t13[p10] = s10[p10];
      }
      return t13;
    };
    __rest6 = function(s10, e14) {
      var t13 = {};
      for (var p10 in s10)
        if (Object.prototype.hasOwnProperty.call(s10, p10) && e14.indexOf(p10) < 0)
          t13[p10] = s10[p10];
      if (s10 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i10 = 0, p10 = Object.getOwnPropertySymbols(s10); i10 < p10.length; i10++) {
          if (e14.indexOf(p10[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p10[i10]))
            t13[p10[i10]] = s10[p10[i10]];
        }
      return t13;
    };
    __decorate4 = function(decorators, target, key, desc) {
      var c10 = arguments.length, r12 = c10 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d10;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r12 = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i10 = decorators.length - 1; i10 >= 0; i10--)
          if (d10 = decorators[i10])
            r12 = (c10 < 3 ? d10(r12) : c10 > 3 ? d10(target, key, r12) : d10(target, key)) || r12;
      return c10 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
    };
    __param4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata4 = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter5 = function(thisArg, _arguments, P10, generator) {
      function adopt(value) {
        return value instanceof P10 ? value : new P10(function(resolve) {
          resolve(value);
        });
      }
      return new (P10 || (P10 = Promise))(function(resolve, reject2) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e14) {
            reject2(e14);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator4 = function(thisArg, body) {
      var _17 = {label: 0, sent: function() {
        if (t13[0] & 1)
          throw t13[1];
        return t13[1];
      }, trys: [], ops: []}, f10, y10, t13, g10;
      return g10 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g10[Symbol.iterator] = function() {
        return this;
      }), g10;
      function verb(n10) {
        return function(v10) {
          return step([n10, v10]);
        };
      }
      function step(op) {
        if (f10)
          throw new TypeError("Generator is already executing.");
        while (_17)
          try {
            if (f10 = 1, y10 && (t13 = op[0] & 2 ? y10["return"] : op[0] ? y10["throw"] || ((t13 = y10["return"]) && t13.call(y10), 0) : y10.next) && !(t13 = t13.call(y10, op[1])).done)
              return t13;
            if (y10 = 0, t13)
              op = [op[0] & 2, t13.value];
            switch (op[0]) {
              case 0:
              case 1:
                t13 = op;
                break;
              case 4:
                _17.label++;
                return {value: op[1], done: false};
              case 5:
                _17.label++;
                y10 = op[1];
                op = [0];
                continue;
              case 7:
                op = _17.ops.pop();
                _17.trys.pop();
                continue;
              default:
                if (!(t13 = _17.trys, t13 = t13.length > 0 && t13[t13.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _17 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t13 || op[1] > t13[0] && op[1] < t13[3])) {
                  _17.label = op[1];
                  break;
                }
                if (op[0] === 6 && _17.label < t13[1]) {
                  _17.label = t13[1];
                  t13 = op;
                  break;
                }
                if (t13 && _17.label < t13[2]) {
                  _17.label = t13[2];
                  _17.ops.push(op);
                  break;
                }
                if (t13[2])
                  _17.ops.pop();
                _17.trys.pop();
                continue;
            }
            op = body.call(thisArg, _17);
          } catch (e14) {
            op = [6, e14];
            y10 = 0;
          } finally {
            f10 = t13 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding4 = function(o13, m10, k10, k23) {
      if (k23 === void 0)
        k23 = k10;
      o13[k23] = m10[k10];
    };
    __exportStar5 = function(m10, exports3) {
      for (var p10 in m10)
        if (p10 !== "default" && !exports3.hasOwnProperty(p10))
          exports3[p10] = m10[p10];
    };
    __values5 = function(o13) {
      var s10 = typeof Symbol === "function" && Symbol.iterator, m10 = s10 && o13[s10], i10 = 0;
      if (m10)
        return m10.call(o13);
      if (o13 && typeof o13.length === "number")
        return {
          next: function() {
            if (o13 && i10 >= o13.length)
              o13 = void 0;
            return {value: o13 && o13[i10++], done: !o13};
          }
        };
      throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read5 = function(o13, n10) {
      var m10 = typeof Symbol === "function" && o13[Symbol.iterator];
      if (!m10)
        return o13;
      var i10 = m10.call(o13), r12, ar2 = [], e14;
      try {
        while ((n10 === void 0 || n10-- > 0) && !(r12 = i10.next()).done)
          ar2.push(r12.value);
      } catch (error) {
        e14 = {error};
      } finally {
        try {
          if (r12 && !r12.done && (m10 = i10["return"]))
            m10.call(i10);
        } finally {
          if (e14)
            throw e14.error;
        }
      }
      return ar2;
    };
    __spread4 = function() {
      for (var ar2 = [], i10 = 0; i10 < arguments.length; i10++)
        ar2 = ar2.concat(__read5(arguments[i10]));
      return ar2;
    };
    __spreadArrays4 = function() {
      for (var s10 = 0, i10 = 0, il2 = arguments.length; i10 < il2; i10++)
        s10 += arguments[i10].length;
      for (var r12 = Array(s10), k10 = 0, i10 = 0; i10 < il2; i10++)
        for (var a10 = arguments[i10], j10 = 0, jl2 = a10.length; j10 < jl2; j10++, k10++)
          r12[k10] = a10[j10];
      return r12;
    };
    __await4 = function(v10) {
      return this instanceof __await4 ? (this.v = v10, this) : new __await4(v10);
    };
    __asyncGenerator4 = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g10 = generator.apply(thisArg, _arguments || []), i10, q10 = [];
      return i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10;
      function verb(n10) {
        if (g10[n10])
          i10[n10] = function(v10) {
            return new Promise(function(a10, b10) {
              q10.push([n10, v10, a10, b10]) > 1 || resume(n10, v10);
            });
          };
      }
      function resume(n10, v10) {
        try {
          step(g10[n10](v10));
        } catch (e14) {
          settle(q10[0][3], e14);
        }
      }
      function step(r12) {
        r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q10[0][2], r12);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject2(value) {
        resume("throw", value);
      }
      function settle(f10, v10) {
        if (f10(v10), q10.shift(), q10.length)
          resume(q10[0][0], q10[0][1]);
      }
    };
    __asyncDelegator4 = function(o13) {
      var i10, p10;
      return i10 = {}, verb("next"), verb("throw", function(e14) {
        throw e14;
      }), verb("return"), i10[Symbol.iterator] = function() {
        return this;
      }, i10;
      function verb(n10, f10) {
        i10[n10] = o13[n10] ? function(v10) {
          return (p10 = !p10) ? {value: __await4(o13[n10](v10)), done: n10 === "return"} : f10 ? f10(v10) : v10;
        } : f10;
      }
    };
    __asyncValues4 = function(o13) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m10 = o13[Symbol.asyncIterator], i10;
      return m10 ? m10.call(o13) : (o13 = typeof __values5 === "function" ? __values5(o13) : o13[Symbol.iterator](), i10 = {}, verb("next"), verb("throw"), verb("return"), i10[Symbol.asyncIterator] = function() {
        return this;
      }, i10);
      function verb(n10) {
        i10[n10] = o13[n10] && function(v10) {
          return new Promise(function(resolve, reject2) {
            v10 = o13[n10](v10), settle(resolve, reject2, v10.done, v10.value);
          });
        };
      }
      function settle(resolve, reject2, d10, v10) {
        Promise.resolve(v10).then(function(v11) {
          resolve({value: v11, done: d10});
        }, reject2);
      }
    };
    __makeTemplateObject4 = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar4 = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k10 in mod)
          if (Object.hasOwnProperty.call(mod, k10))
            result[k10] = mod[k10];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault4 = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet4 = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet4 = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends4);
    exporter("__assign", __assign6);
    exporter("__rest", __rest6);
    exporter("__decorate", __decorate4);
    exporter("__param", __param4);
    exporter("__metadata", __metadata4);
    exporter("__awaiter", __awaiter5);
    exporter("__generator", __generator4);
    exporter("__exportStar", __exportStar5);
    exporter("__createBinding", __createBinding4);
    exporter("__values", __values5);
    exporter("__read", __read5);
    exporter("__spread", __spread4);
    exporter("__spreadArrays", __spreadArrays4);
    exporter("__await", __await4);
    exporter("__asyncGenerator", __asyncGenerator4);
    exporter("__asyncDelegator", __asyncDelegator4);
    exporter("__asyncValues", __asyncValues4);
    exporter("__makeTemplateObject", __makeTemplateObject4);
    exporter("__importStar", __importStar4);
    exporter("__importDefault", __importDefault4);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
  });
});

// ../../node_modules/react-error-boundary/dist/react-error-boundary.umd.js
var require_react_error_boundary_umd = __commonJS((exports2, module2) => {
  (function(global2, factory) {
    typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactErrorBoundary = {}, global2.React));
  })(exports2, function(exports3, React63) {
    "use strict";
    function _interopNamespace(e14) {
      if (e14 && e14.__esModule)
        return e14;
      var n10 = Object.create(null);
      if (e14) {
        Object.keys(e14).forEach(function(k10) {
          if (k10 !== "default") {
            var d10 = Object.getOwnPropertyDescriptor(e14, k10);
            Object.defineProperty(n10, k10, d10.get ? d10 : {
              enumerable: true,
              get: function() {
                return e14[k10];
              }
            });
          }
        });
      }
      n10["default"] = e14;
      return Object.freeze(n10);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React63);
    function _setPrototypeOf2(o13, p10) {
      _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o14, p11) {
        o14.__proto__ = p11;
        return o14;
      };
      return _setPrototypeOf2(o13, p10);
    }
    function _inheritsLoose2(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf2(subClass, superClass);
    }
    var changedArray = function changedArray2(a10, b10) {
      if (a10 === void 0) {
        a10 = [];
      }
      if (b10 === void 0) {
        b10 = [];
      }
      return a10.length !== b10.length || a10.some(function(item, index2) {
        return !Object.is(item, b10[index2]);
      });
    };
    var initialState = {
      error: null
    };
    var ErrorBoundary = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose2(ErrorBoundary2, _React$Component);
      function ErrorBoundary2() {
        var _this;
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
        _this.state = initialState;
        _this.resetErrorBoundary = function() {
          var _this$props;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);
          _this.reset();
        };
        return _this;
      }
      ErrorBoundary2.getDerivedStateFromError = function getDerivedStateFromError(error) {
        return {
          error
        };
      };
      var _proto = ErrorBoundary2.prototype;
      _proto.reset = function reset() {
        this.setState(initialState);
      };
      _proto.componentDidCatch = function componentDidCatch(error, info) {
        var _this$props$onError, _this$props2;
        (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        var error = this.state.error;
        var resetKeys = this.props.resetKeys;
        if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
          var _this$props$onResetKe, _this$props3;
          (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
          this.reset();
        }
      };
      _proto.render = function render() {
        var error = this.state.error;
        var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
        if (error !== null) {
          var _props = {
            error,
            resetErrorBoundary: this.resetErrorBoundary
          };
          if (/* @__PURE__ */ React__namespace.isValidElement(fallback)) {
            return fallback;
          } else if (typeof fallbackRender === "function") {
            return fallbackRender(_props);
          } else if (FallbackComponent) {
            return /* @__PURE__ */ React__namespace.createElement(FallbackComponent, _props);
          } else {
            throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
          }
        }
        return this.props.children;
      };
      return ErrorBoundary2;
    }(React__namespace.Component);
    function withErrorBoundary(Component, errorBoundaryProps) {
      var Wrapped = function Wrapped2(props) {
        return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary, errorBoundaryProps, /* @__PURE__ */ React__namespace.createElement(Component, props));
      };
      var name = Component.displayName || Component.name || "Unknown";
      Wrapped.displayName = "withErrorBoundary(" + name + ")";
      return Wrapped;
    }
    function useErrorHandler(givenError) {
      var _React$useState = React__namespace.useState(null), error = _React$useState[0], setError = _React$useState[1];
      if (givenError != null)
        throw givenError;
      if (error != null)
        throw error;
      return setError;
    }
    exports3.ErrorBoundary = ErrorBoundary;
    exports3.useErrorHandler = useErrorHandler;
    exports3.withErrorBoundary = withErrorBoundary;
    Object.defineProperty(exports3, "__esModule", {value: true});
  });
});

// src/index.tsx
var import_react22 = __toModule(require_react());
var import_client4 = __toModule(require_client());

// src/multiplayer/multiplayer.tsx
var React61 = __toModule(require_react());

// ../../packages/tldraw/dist/index.mjs
var ge2 = __toModule(require_react());

// ../../node_modules/mobx/dist/mobx.esm.js
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _2(index2, length) {
    return "[mobx.array] Index out of bounds, " + index2 + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _3(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _4(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _5(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _6(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _7(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _8(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _9(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _10(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _11(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _12(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _13(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  },
  38: "'ownKeys()' can only be used on observable objects",
  39: "'defineProperty()' can only be used on observable objects"
};
var errors = true ? niceErrors : {};
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (true) {
    var e14 = typeof error === "string" ? error : errors[error];
    if (typeof e14 === "function")
      e14 = e14.apply(null, args);
    throw new Error("[MobX] " + e14);
  }
  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}
var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return mockGlobal;
}
var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /* @__PURE__ */ Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die(true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : "Proxy not available");
  }
}
function warnAboutProxyRequirement(msg) {
  if (globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}
function getNextId() {
  return ++globalState.mobxGuid;
}
function once(func) {
  var invoked = false;
  return function() {
    if (invoked)
      return;
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop2() {
};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t13 = typeof value;
  switch (t13) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (!isObject(value))
    return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null)
    return true;
  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
}
function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor)
    return false;
  if (constructor.name === "GeneratorFunction" || constructor.displayName === "GeneratorFunction")
    return true;
  return false;
}
function addHiddenProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value
  });
}
function addHiddenFinalProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function(x10) {
    return isObject(x10) && x10[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
function getPlainObjectKeys(object2) {
  var keys = Object.keys(object2);
  if (!hasGetOwnPropertySymbols)
    return keys;
  var symbols = Object.getOwnPropertySymbols(object2);
  if (!symbols.length)
    return keys;
  return [].concat(keys, symbols.filter(function(s10) {
    return objectPrototype.propertyIsEnumerable.call(object2, s10);
  }));
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : Object.getOwnPropertyNames;
function stringifyKey(key) {
  if (typeof key === "string")
    return key;
  if (typeof key === "symbol")
    return key.toString();
  return new String(key).toString();
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
}
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
  var res = {};
  ownKeys(target).forEach(function(key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};
function _defineProperties(target, props) {
  for (var i10 = 0; i10 < props.length; i10++) {
    var descriptor = props[i10];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i10 = 1; i10 < arguments.length; i10++) {
      var source = arguments[i10];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o13, p10) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o14, p11) {
    o14.__proto__ = p11;
    return o14;
  };
  return _setPrototypeOf(o13, p10);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _unsupportedIterableToArray(o13, minLen) {
  if (!o13)
    return;
  if (typeof o13 === "string")
    return _arrayLikeToArray(o13, minLen);
  var n10 = Object.prototype.toString.call(o13).slice(8, -1);
  if (n10 === "Object" && o13.constructor)
    n10 = o13.constructor.name;
  if (n10 === "Map" || n10 === "Set")
    return Array.from(o13);
  if (n10 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n10))
    return _arrayLikeToArray(o13, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i10 = 0, arr2 = new Array(len); i10 < len; i10++)
    arr2[i10] = arr[i10];
  return arr2;
}
function _createForOfIteratorHelperLoose(o13, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o13[Symbol.iterator] || o13["@@iterator"];
  if (it2)
    return (it2 = it2.call(o13)).next.bind(it2);
  if (Array.isArray(o13) || (it2 = _unsupportedIterableToArray(o13)) || allowArrayLike && o13 && typeof o13.length === "number") {
    if (it2)
      o13 = it2;
    var i10 = 0;
    return function() {
      if (i10 >= o13.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o13[i10++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }
  return Object.assign(decorator, annotation);
}
function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  }
  if (isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
  }
  assertNotDecorated(prototype, annotation, key);
  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}
function assertNotDecorated(prototype, annotation, key) {
  if (!isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overriden by subclass.");
  }
}
function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if (!target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    }
    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }
  return target[storedAnnotationsSymbol];
}
var $mobx = /* @__PURE__ */ Symbol("mobx administration");
var Atom = /* @__PURE__ */ function() {
  function Atom2(name_) {
    if (name_ === void 0) {
      name_ = true ? "Atom@" + getNextId() : "Atom";
    }
    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  }
  var _proto = Atom2.prototype;
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  };
  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };
  _proto.toString = function toString2() {
    return this.name_;
  };
  return Atom2;
}();
var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }
  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }
  var atom = new Atom(name);
  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }
  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }
  return atom;
}
function identityComparer(a10, b10) {
  return a10 === b10;
}
function structuralComparer(a10, b10) {
  return deepEqual(a10, b10);
}
function shallowComparer(a10, b10) {
  return deepEqual(a10, b10, 1);
}
function defaultComparer(a10, b10) {
  if (Object.is)
    return Object.is(a10, b10);
  return a10 === b10 ? a10 !== 0 || 1 / a10 === 1 / b10 : a10 !== a10 && b10 !== b10;
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  default: defaultComparer,
  shallow: shallowComparer
};
function deepEnhancer(v10, _17, name) {
  if (isObservable(v10))
    return v10;
  if (Array.isArray(v10))
    return observable.array(v10, {
      name
    });
  if (isPlainObject(v10))
    return observable.object(v10, void 0, {
      name
    });
  if (isES6Map(v10))
    return observable.map(v10, {
      name
    });
  if (isES6Set(v10))
    return observable.set(v10, {
      name
    });
  if (typeof v10 === "function" && !isAction(v10) && !isFlow(v10)) {
    if (isGenerator(v10)) {
      return flow(v10);
    } else {
      return autoAction(name, v10);
    }
  }
  return v10;
}
function shallowEnhancer(v10, _17, name) {
  if (v10 === void 0 || v10 === null)
    return v10;
  if (isObservableObject(v10) || isObservableArray(v10) || isObservableMap(v10) || isObservableSet(v10))
    return v10;
  if (Array.isArray(v10))
    return observable.array(v10, {
      name,
      deep: false
    });
  if (isPlainObject(v10))
    return observable.object(v10, void 0, {
      name,
      deep: false
    });
  if (isES6Map(v10))
    return observable.map(v10, {
      name,
      deep: false
    });
  if (isES6Set(v10))
    return observable.set(v10, {
      name,
      deep: false
    });
  if (true)
    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}
function referenceEnhancer(newValue) {
  return newValue;
}
function refStructEnhancer(v10, oldValue) {
  if (isObservable(v10))
    die("observable.struct should not be used with observable values");
  if (deepEqual(v10, oldValue))
    return oldValue;
  return v10;
}
var OVERRIDE = "override";
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}
function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}
function make_$1(adm, key, descriptor, source) {
  var _this$options_;
  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if (isAction(descriptor.value)) {
    return 1;
  }
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2;
}
function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}
function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}
function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false, (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0),
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}
function make_$2(adm, key, descriptor, source) {
  var _this$options_;
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
    if (this.extend_(adm, key, descriptor, false) === null)
      return 0;
  }
  if (isFlow(descriptor.value)) {
    return 1;
  }
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2;
}
function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}
function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (!isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}
function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if (!isFlow(value)) {
    value = flow(value);
  }
  if (bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    value.isMobXFlow = true;
  }
  return {
    value,
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}
function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}
function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get4 = _ref2.get;
  if (!get4) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}
function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}
function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;
  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}
function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;
  if (!("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}
var AUTO = "true";
var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
function createAutoAnnotation(options) {
  return {
    annotationType_: AUTO,
    options_: options,
    make_: make_$5,
    extend_: extend_$5
  };
}
function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  }
  if (descriptor.set) {
    var set5 = createAction(key.toString(), descriptor.set);
    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set5
      }) === null ? 0 : 2;
    }
    defineProperty(source, key, {
      configurable: true,
      set: set5
    });
    return 2;
  }
  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;
    if (isGenerator(descriptor.value)) {
      var _this$options_;
      var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
      return flowAnnotation2.make_(adm, key, descriptor, source);
    }
    var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
    return actionAnnotation2.make_(adm, key, descriptor, source);
  }
  var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
    var _adm$proxy_;
    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return observableAnnotation2.make_(adm, key, descriptor, source);
}
function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  }
  if (descriptor.set) {
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  }
  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
    var _adm$proxy_2;
    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }
  var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
}
var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct";
var defaultCreateObservableOptions = {
  deep: true,
  name: void 0,
  defaultDecorator: void 0,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}
function getAnnotationFromOptions(options) {
  var _options$defaultDecor;
  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : void 0;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;
  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
function createObservable(v10, arg2, arg3) {
  if (isStringish(arg2)) {
    storeAnnotation(v10, arg2, observableAnnotation);
    return;
  }
  if (isObservable(v10))
    return v10;
  if (isPlainObject(v10))
    return observable.object(v10, arg2, arg3);
  if (Array.isArray(v10))
    return observable.array(v10, arg2);
  if (isES6Map(v10))
    return observable.map(v10, arg2);
  if (isES6Set(v10))
    return observable.set(v10, arg2);
  if (typeof v10 === "object" && v10 !== null)
    return v10;
  return observable.box(v10, arg2);
}
Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o13 = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o13), o13.name, true, o13.equals);
  },
  array: function array(initialValues, options) {
    var o13 = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o13.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o13), o13.name);
  },
  map: function map(initialValues, options) {
    var o13 = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o13), o13.name);
  },
  set: function set(initialValues, options) {
    var o13 = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o13), o13.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
  shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
};
var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
var computed = function computed2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }
  if (isPlainObject(arg1)) {
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  }
  if (true) {
    if (!isFunction(arg1))
      die("First argument to `computed` should be an expression.");
    if (isFunction(arg2))
      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
  }
  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
var _getDescriptor$config;
var _getDescriptor;
var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction2, ref) {
  if (autoAction2 === void 0) {
    autoAction2 = false;
  }
  if (true) {
    if (!isFunction(fn))
      die("`action` can only be invoked on functions");
    if (typeof actionName !== "string" || !actionName)
      die("actions should have valid names, got: '" + actionName + "'");
  }
  function res() {
    return executeAction(actionName, autoAction2, fn, ref || this, arguments);
  }
  res.isMobxAction = true;
  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }
  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation, scope, args) {
  var notifySpy_ = isSpyEnabled() && !!actionName;
  var startTime_ = 0;
  if (notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }
  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges;
  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }
  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_,
    prevAllowStateChanges_,
    prevAllowStateReads_,
    notifySpy_,
    startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }
  currentActionId = runInfo.parentActionId_;
  if (runInfo.error_ !== void 0) {
    globalState.suppressReactionErrors = true;
  }
  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_)
    untrackedEnd(runInfo.prevDerivation_);
  if (runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }
  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges2, func) {
  var prev = allowStateChangesStart(allowStateChanges2);
  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges2) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges2;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}
var _Symbol$toPrimitive;
var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /* @__PURE__ */ function(_Atom, _Symbol$toPrimitive2) {
  _inheritsLoose(ObservableValue2, _Atom);
  function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
    var _this;
    if (name_ === void 0) {
      name_ = true ? "ObservableValue@" + getNextId() : "ObservableValue";
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    if (equals === void 0) {
      equals = comparer["default"];
    }
    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, void 0, name_);
    if (notifySpy && isSpyEnabled()) {
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }
    return _this;
  }
  var _proto = ObservableValue2.prototype;
  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== void 0)
      return this.dehancer(value);
    return value;
  };
  _proto.set = function set5(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if (notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue,
          oldValue
        });
      }
      this.setNewValue_(newValue);
      if (notifySpy)
        spyReportEnd();
    }
  };
  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue
      });
      if (!change)
        return globalState.UNCHANGED;
      newValue = change.newValue;
    }
    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };
  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue,
        oldValue
      });
    }
  };
  _proto.get = function get4() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately)
      listener({
        observableKind: "value",
        debugObjectName: this.name_,
        object: this,
        type: UPDATE,
        newValue: this.value_,
        oldValue: void 0
      });
    return registerListener(this, listener);
  };
  _proto.raw = function raw() {
    return this.value_;
  };
  _proto.toJSON = function toJSON2() {
    return this.get();
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.value_ + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive2] = function() {
    return this.valueOf();
  };
  return ObservableValue2;
}(Atom, _Symbol$toPrimitive);
var _Symbol$toPrimitive$1;
_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /* @__PURE__ */ function(_Symbol$toPrimitive2) {
  function ComputedValue2(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get)
      die(31);
    this.derivation = options.get;
    this.name_ = options.name || (true ? "ComputedValue@" + getNextId() : "ComputedValue");
    if (options.set) {
      this.setter_ = createAction(true ? this.name_ + "-setter" : "ComputedValue-setter", options.set);
    }
    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }
  var _proto = ComputedValue2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.get = function get4() {
    if (this.isComputing_)
      die(32, this.name_, this.derivation);
    if (globalState.inBatch === 0 && this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch();
        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);
      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext)
          globalState.trackingContext = this;
        if (this.trackAndCompute())
          propagateChangeConfirmed(this);
        globalState.trackingContext = prevTrackingContext;
      }
    }
    var result = this.value_;
    if (isCaughtException(result))
      throw result.cause;
    return result;
  };
  _proto.set = function set5(value) {
    if (this.setter_) {
      if (this.isRunningSetter_)
        die(33, this.name_);
      this.isRunningSetter_ = true;
      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else
      die(34, this.name_);
  };
  _proto.trackAndCompute = function trackAndCompute() {
    var oldValue = this.value_;
    var wasSuspended = this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);
    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
    if (changed) {
      this.value_ = newValue;
      if (isSpyEnabled()) {
        spyReport({
          observableKind: "computed",
          debugObjectName: this.name_,
          object: this.scope_,
          type: "update",
          oldValue,
          newValue
        });
      }
    }
    return changed;
  };
  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true;
    var prev = allowStateChangesStart(false);
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e14) {
          res = new CaughtException(e14);
        }
      }
    }
    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };
  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = void 0;
      if (this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = void 0;
    return autorun(function() {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false)
      return;
    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive2] = function() {
    return this.valueOf();
  };
  return ComputedValue2;
}(_Symbol$toPrimitive$1);
var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;
(function(IDerivationState_2) {
  IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
  IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
  IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
  IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));
var TraceMode;
(function(TraceMode2) {
  TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
  TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
  TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = function CaughtException2(cause) {
  this.cause = void 0;
  this.cause = cause;
};
function isCaughtException(e14) {
  return e14 instanceof CaughtException;
}
function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;
    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;
    case IDerivationState_.POSSIBLY_STALE_: {
      var prevAllowStateReads = allowStateReadsStart(true);
      var prevUntracked = untrackedStart();
      var obs = derivation.observing_, l10 = obs.length;
      for (var i10 = 0; i10 < l10; i10++) {
        var obj = obs[i10];
        if (isComputedValue(obj)) {
          if (globalState.disableErrorBoundaries) {
            obj.get();
          } else {
            try {
              obj.get();
            } catch (e14) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
          if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return true;
          }
        }
      }
      changeDependenciesStateTo0(derivation);
      untrackedEnd(prevUntracked);
      allowStateReadsEnd(prevAllowStateReads);
      return false;
    }
  }
}
function checkIfStateModificationsAreAllowed(atom) {
  if (false) {
    return;
  }
  var hasObservers = atom.observers_.size > 0;
  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always"))
    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
}
function checkIfStateReadsAreAllowed(observable2) {
  if (!globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
  }
}
function trackDerivedFunction(derivation, f10, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;
  if (globalState.disableErrorBoundaries === true) {
    result = f10.call(context);
  } else {
    try {
      result = f10.call(context);
    } catch (e14) {
      result = new CaughtException(e14);
    }
  }
  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
  if (false)
    return;
  if (derivation.observing_.length !== 0)
    return;
  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
function bindDependencies(derivation) {
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
  var i02 = 0, l10 = derivation.unboundDepsCount_;
  for (var i10 = 0; i10 < l10; i10++) {
    var dep = observing[i10];
    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i02 !== i10)
        observing[i02] = dep;
      i02++;
    }
    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }
  observing.length = i02;
  derivation.newObserving_ = null;
  l10 = prevObserving.length;
  while (l10--) {
    var _dep = prevObserving[l10];
    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }
    _dep.diffValue_ = 0;
  }
  while (i02--) {
    var _dep2 = observing[i02];
    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  }
  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}
function clearObserving(derivation) {
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i10 = obs.length;
  while (i10--) {
    removeObserver(obs[i10], derivation);
  }
  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action2) {
  var prev = untrackedStart();
  try {
    return action2();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_)
    return;
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i10 = obs.length;
  while (i10--) {
    obs[i10].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
var MobXGlobals = function MobXGlobals2() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /* @__PURE__ */ function() {
  var global2 = /* @__PURE__ */ getGlobal();
  if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals)
    canMergeGlobalState = false;
  if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version)
    canMergeGlobalState = false;
  if (!canMergeGlobalState) {
    setTimeout(function() {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global2.__mobxGlobals) {
    global2.__mobxInstanceCount += 1;
    if (!global2.__mobxGlobals.UNCHANGED)
      global2.__mobxGlobals.UNCHANGED = {};
    return global2.__mobxGlobals;
  } else {
    global2.__mobxInstanceCount = 1;
    return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions)
    die(36);
  isolateCalled = true;
  if (canMergeGlobalState) {
    var global2 = getGlobal();
    if (--global2.__mobxInstanceCount === 0)
      global2.__mobxGlobals = void 0;
    globalState = new MobXGlobals();
  }
}
function addObserver(observable2, node) {
  observable2.observers_.add(node);
  if (observable2.lowestObserverState_ > node.dependenciesState_)
    observable2.lowestObserverState_ = node.dependenciesState_;
}
function removeObserver(observable2, node) {
  observable2.observers_["delete"](node);
  if (observable2.observers_.size === 0) {
    queueForUnobservation(observable2);
  }
}
function queueForUnobservation(observable2) {
  if (observable2.isPendingUnobservation_ === false) {
    observable2.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable2);
  }
}
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    var list = globalState.pendingUnobservations;
    for (var i10 = 0; i10 < list.length; i10++) {
      var observable2 = list[i10];
      observable2.isPendingUnobservation_ = false;
      if (observable2.observers_.size === 0) {
        if (observable2.isBeingObserved_) {
          observable2.isBeingObserved_ = false;
          observable2.onBUO();
        }
        if (observable2 instanceof ComputedValue) {
          observable2.suspend_();
        }
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable2) {
  checkIfStateReadsAreAllowed(observable2);
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    if (derivation.runId_ !== observable2.lastAccessedBy_) {
      observable2.lastAccessedBy_ = derivation.runId_;
      derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
      if (!observable2.isBeingObserved_ && globalState.trackingContext) {
        observable2.isBeingObserved_ = true;
        observable2.onBO();
      }
    }
    return true;
  } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable2);
  }
  return false;
}
function propagateChanged(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d10) {
    if (d10.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if (d10.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d10, observable2);
      }
      d10.onBecomeStale_();
    }
    d10.dependenciesState_ = IDerivationState_.STALE_;
  });
}
function propagateChangeConfirmed(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d10) {
    if (d10.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d10.dependenciesState_ = IDerivationState_.STALE_;
      if (d10.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d10, observable2);
      }
    } else if (d10.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  });
}
function propagateMaybeChanged(observable2) {
  if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable2.observers_.forEach(function(d10) {
    if (d10.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d10.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d10.onBecomeStale_();
    }
  });
}
function logTraceInfo(derivation, observable2) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable2.name_ + "'");
  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1);
    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable2.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}
function printDepTree(tree, lines, depth) {
  if (lines.length >= 1e3) {
    lines.push("(and many more)");
    return;
  }
  lines.push("" + "	".repeat(depth - 1) + tree.name);
  if (tree.dependencies)
    tree.dependencies.forEach(function(child) {
      return printDepTree(child, lines, depth + 1);
    });
}
var Reaction = /* @__PURE__ */ function() {
  function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ = true ? "Reaction@" + getNextId() : "Reaction";
    }
    if (requiresObservable_ === void 0) {
      requiresObservable_ = false;
    }
    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }
  var _proto = Reaction2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };
  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  };
  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;
      if (shouldCompute(this)) {
        this.isTrackPending_ = true;
        try {
          this.onInvalidate_();
          if (this.isTrackPending_ && isSpyEnabled()) {
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e14) {
          this.reportExceptionInDerivation_(e14);
        }
      }
      globalState.trackingContext = prev;
      endBatch();
    }
  };
  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return;
    }
    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if (notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }
    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext;
    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, void 0);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;
    if (this.isDisposed_) {
      clearObserving(this);
    }
    if (isCaughtException(result))
      this.reportExceptionInDerivation_(result.cause);
    if (notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;
    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }
    if (globalState.disableErrorBoundaries)
      throw error;
    var message = true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : "[mobx] uncaught error in '" + this + "'";
    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
    } else if (true)
      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
    if (isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message,
        error: "" + error
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function(f10) {
      return f10(error, _this);
    });
  };
  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;
      if (!this.isRunning_) {
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  _proto.getDisposer_ = function getDisposer_() {
    var r12 = this.dispose.bind(this);
    r12[$mobx] = this;
    return r12;
  };
  _proto.toString = function toString2() {
    return "Reaction[" + this.name_ + "]";
  };
  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }
    trace(this, enterBreakPoint);
  };
  return Reaction2;
}();
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler2(f10) {
  return f10();
};
function runReactions() {
  if (globalState.inBatch > 0 || globalState.isRunningReactions)
    return;
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error(true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : "[mobx] cycle in reaction: " + allReactions[0]);
      allReactions.splice(0);
    }
    var remainingReactions = allReactions.splice(0);
    for (var i10 = 0, l10 = remainingReactions.length; i10 < l10; i10++) {
      remainingReactions[i10].runReaction_();
    }
  }
  globalState.isRunningReactions = false;
}
var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function reactionScheduler3(f10) {
    return fn(function() {
      return baseScheduler(f10);
    });
  };
}
function isSpyEnabled() {
  return !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (false)
    return;
  if (!globalState.spyListeners.length)
    return;
  var listeners = globalState.spyListeners;
  for (var i10 = 0, l10 = listeners.length; i10 < l10; i10++) {
    listeners[i10](event);
  }
}
function spyReportStart(event) {
  if (false)
    return;
  var change = _extends({}, event, {
    spyReportStart: true
  });
  spyReport(change);
}
var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};
function spyReportEnd(change) {
  if (false)
    return;
  if (change)
    spyReport(_extends({}, change, {
      type: "report-end",
      spyReportEnd: true
    }));
  else
    spyReport(END_EVENT);
}
function spy(listener) {
  if (false) {
    console.warn("[mobx.spy] Is a no-op in production builds");
    return function() {
    };
  } else {
    globalState.spyListeners.push(listener);
    return once(function() {
      globalState.spyListeners = globalState.spyListeners.filter(function(l10) {
        return l10 !== listener;
      });
    });
  }
}
var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});
function createActionFactory(autoAction2) {
  var res = function action2(arg1, arg2) {
    if (isFunction(arg1))
      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
    if (isFunction(arg2))
      return createAction(arg1, arg2, autoAction2);
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
    }
    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction2
      }));
    }
    if (true)
      die("Invalid arguments for `action`");
  };
  return res;
}
var action = /* @__PURE__ */ createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /* @__PURE__ */ createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
function autorun(view, opts) {
  var _opts$name, _opts;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (true) {
    if (!isFunction(view))
      die("Autorun expects a function as first argument");
    if (isAction(view))
      die("Autorun does not accept actions since actions are untrackable");
  }
  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : true ? view.name || "Autorun@" + getNextId() : "Autorun";
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;
  if (runSync) {
    reaction = new Reaction(name, function() {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts);
    var isScheduled = false;
    reaction = new Reaction(name, function() {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function() {
          isScheduled = false;
          if (!reaction.isDisposed_)
            reaction.track(reactionRunner);
        });
      }
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction);
  }
  reaction.schedule_();
  return reaction.getDisposer_();
}
var run = function run2(f10) {
  return f10();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function(f10) {
    return setTimeout(f10, opts.delay);
  } : run;
}
var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb2 = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";
  if (atom[listenersKey]) {
    atom[listenersKey].add(cb2);
  } else {
    atom[listenersKey] = new Set([cb2]);
  }
  return function() {
    var hookListeners = atom[listenersKey];
    if (hookListeners) {
      hookListeners["delete"](cb2);
      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}
var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed";
function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }
  var useProxies = options.useProxies, enforceActions = options.enforceActions;
  if (useProxies !== void 0) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }
  if (useProxies === "ifavailable")
    globalState.verifyProxies = true;
  if (enforceActions !== void 0) {
    var ea2 = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea2;
    globalState.allowStateChanges = ea2 === true || ea2 === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function(key) {
    if (key in options)
      globalState[key] = !!options[key];
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;
  if (globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }
  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}
function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4)
      die("'extendObservable' expected 2-4 arguments");
    if (typeof target !== "object")
      die("'extendObservable' expects an object as first argument");
    if (isObservableMap(target))
      die("'extendObservable' should not be used on maps, use map.merge instead");
    if (!isPlainObject(properties))
      die("'extendObservable' only accepts plain objects as second argument");
    if (isObservable(properties) || isObservable(annotations))
      die("Extending an object with another observable (object) is not supported");
  }
  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    ownKeys(descriptors).forEach(function(key) {
      adm.extend_(key, descriptors[key], !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }
  return target;
}
function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0)
    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  return result;
}
function unique(list) {
  return Array.from(new Set(list));
}
var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  }
  if (arguments.length !== 1)
    die("Flow expects single argument with generator function");
  var generator = arg1;
  var name = generator.name || "<unnamed flow>";
  var res = function res2() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = void 0;
    var promise = new Promise(function(resolve, reject2) {
      var stepId = 0;
      rejector = reject2;
      function onFulfilled(res3) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
        } catch (e14) {
          return reject2(e14);
        }
        next(ret);
      }
      function onRejected(err) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e14) {
          return reject2(e14);
        }
        next(ret);
      }
      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          ret.then(next, reject2);
          return;
        }
        if (ret.done)
          return resolve(ret.value);
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }
      onFulfilled(void 0);
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function() {
      try {
        if (pendingPromise)
          cancelPromise(pendingPromise);
        var _res = gen["return"](void 0);
        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise);
        rejector(new FlowCancellationError());
      } catch (e14) {
        rejector(e14);
      }
    });
    return promise;
  };
  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
function cancelPromise(promise) {
  if (isFunction(promise.cancel))
    promise.cancel();
}
function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}
function _isObservable(value, property) {
  if (!value)
    return false;
  if (property !== void 0) {
    if (isObservableMap(value) || isObservableArray(value))
      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }
    return false;
  }
  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}
function isObservable(value) {
  if (arguments.length !== 1)
    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  return _isObservable(value);
}
function trace() {
  if (false)
    die("trace() is not available in production builds");
  var enterBreakPoint = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[args.length - 1] === "boolean")
    enterBreakPoint = args.pop();
  var derivation = getAtomFromArgs(args);
  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }
  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }
  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;
    case 1:
      return getAtom(args[0]);
    case 2:
      return getAtom(args[0], args[1]);
  }
}
function transaction(action2, thisArg) {
  if (thisArg === void 0) {
    thisArg = void 0;
  }
  startBatch();
  try {
    return action2.apply(thisArg);
  } finally {
    endBatch();
  }
}
function getAdm(target) {
  return target[$mobx];
}
var objectProxyTraps = {
  has: function has(target, name) {
    if (globalState.trackingDerivation)
      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set2(target, name, value) {
    var _getAdm$set_;
    if (!isStringish(name))
      return false;
    if (!getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    }
    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;
    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }
    if (!isStringish(name))
      return false;
    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty2(target, name, descriptor) {
    var _getAdm$definePropert;
    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    }
    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys2(target) {
    if (globalState.trackingDerivation)
      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;
  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}
function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function() {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1)
      interceptors.splice(idx, 1);
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    var interceptors = [].concat(interceptable.interceptors_ || []);
    for (var i10 = 0, l10 = interceptors.length; i10 < l10; i10++) {
      change = interceptors[i10](change);
      if (change && !change.type)
        die(14);
      if (!change)
        break;
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}
function hasListeners(listenable) {
  return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function() {
    var idx = listeners.indexOf(handler);
    if (idx !== -1)
      listeners.splice(idx, 1);
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners)
    return;
  listeners = listeners.slice();
  for (var i10 = 0, l10 = listeners.length; i10 < l10; i10++) {
    listeners[i10](change);
  }
  untrackedEnd(prevU);
}
function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();
  try {
    var _annotations;
    if (annotations && target[storedAnnotationsSymbol]) {
      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
    }
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
    ownKeys(annotations).forEach(function(key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }
  return target;
}
var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 1e4;
var arrayTraps = {
  get: function get2(target, name) {
    var adm = target[$mobx];
    if (name === $mobx)
      return adm;
    if (name === "length")
      return adm.getArrayLength_();
    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }
    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }
    return target[name];
  },
  set: function set3(target, name, value) {
    var adm = target[$mobx];
    if (name === "length") {
      adm.setArrayLength_(value);
    }
    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      adm.set_(parseInt(name), value);
    }
    return true;
  },
  preventExtensions: function preventExtensions2() {
    die(15);
  }
};
var ObservableArrayAdministration = /* @__PURE__ */ function() {
  function ObservableArrayAdministration2(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, true ? name + "[..]" : "ObservableArray[..]");
    };
  }
  var _proto = ObservableArrayAdministration2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0)
      return this.dehancer(value);
    return value;
  };
  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== void 0 && values.length > 0)
      return values.map(this.dehancer);
    return values;
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };
  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0)
      die("Out of range: " + newLength);
    var currentLength = this.values_.length;
    if (newLength === currentLength)
      return;
    else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i10 = 0; i10 < newLength - currentLength; i10++) {
        newItems[i10] = void 0;
      }
      this.spliceWithArray_(currentLength, 0, newItems);
    } else
      this.spliceWithArray_(newLength, currentLength - newLength);
  };
  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_)
      die(16);
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0)
      reserveArrayBuffer(oldLength + delta + 1);
  };
  _proto.spliceWithArray_ = function spliceWithArray_(index2, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index2 === void 0)
      index2 = 0;
    else if (index2 > length)
      index2 = length;
    else if (index2 < 0)
      index2 = Math.max(0, length + index2);
    if (arguments.length === 1)
      deleteCount = length - index2;
    else if (deleteCount === void 0 || deleteCount === null)
      deleteCount = 0;
    else
      deleteCount = Math.max(0, Math.min(deleteCount, length - index2));
    if (newItems === void 0)
      newItems = EMPTY_ARRAY;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index2,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change)
        return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.length === 0 ? newItems : newItems.map(function(v10) {
      return _this.enhancer_(v10, void 0);
    });
    if (this.legacyMode_ || true) {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta);
    }
    var res = this.spliceItemsIntoValues_(index2, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0)
      this.notifyArraySplice_(index2, newItems, res);
    return this.dehanceValues_(res);
  };
  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index2, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;
      return (_this$values_ = this.values_).splice.apply(_this$values_, [index2, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index2, index2 + deleteCount);
      var oldItems = this.values_.slice(index2 + deleteCount);
      this.values_.length += newItems.length - deleteCount;
      for (var i10 = 0; i10 < newItems.length; i10++) {
        this.values_[index2 + i10] = newItems[i10];
      }
      for (var _i2 = 0; _i2 < oldItems.length; _i2++) {
        this.values_[index2 + newItems.length + _i2] = oldItems[_i2];
      }
      return res;
    }
  };
  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index2, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index2,
      newValue,
      oldValue
    } : null;
    if (notifySpy)
      spyReportStart(change);
    this.atom_.reportChanged();
    if (notify)
      notifyListeners(this, change);
    if (notifySpy)
      spyReportEnd();
  };
  _proto.notifyArraySplice_ = function notifyArraySplice_(index2, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index2,
      removed,
      added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if (notifySpy)
      spyReportStart(change);
    this.atom_.reportChanged();
    if (notify)
      notifyListeners(this, change);
    if (notifySpy)
      spyReportEnd();
  };
  _proto.get_ = function get_(index2) {
    if (index2 < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index2]);
    }
    console.warn(true ? "[mobx] Out of bounds read: " + index2 : "[mobx.array] Attempt to read an array index (" + index2 + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
  };
  _proto.set_ = function set_(index2, newValue) {
    var values = this.values_;
    if (index2 < values.length) {
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index2];
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index2,
          newValue
        });
        if (!change)
          return;
        newValue = change.newValue;
      }
      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index2] = newValue;
        this.notifyArrayChildUpdate_(index2, newValue, oldValue);
      }
    } else if (index2 === values.length) {
      this.spliceWithArray_(index2, 0, [newValue]);
    } else {
      die(17, index2, values.length);
    }
  };
  return ObservableArrayAdministration2;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
  }
  if (owned === void 0) {
    owned = false;
  }
  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;
  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }
  return proxy;
}
var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  toJSON: function toJSON() {
    return this.slice();
  },
  splice: function splice(index2, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }
    var adm = this[$mobx];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return adm.spliceWithArray_(index2);
      case 2:
        return adm.spliceWithArray_(index2, deleteCount);
    }
    return adm.spliceWithArray_(index2, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index2, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index2, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }
    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }
    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }
    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  }
};
addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc);
addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc);
addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);
function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
}
function simpleFunc(funcName) {
  return function() {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
function mapLikeFunc(funcName) {
  return function(callback, thisArg) {
    var _this2 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function(element, index2) {
      return callback.call(thisArg, element, index2, _this2);
    });
  };
}
function reduceLikeFunc(funcName) {
  return function() {
    var _this3 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    var callback = arguments[0];
    arguments[0] = function(accumulator, currentValue, index2) {
      return callback(accumulator, currentValue, index2, _this3);
    };
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}
var _Symbol$iterator;
var _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete";
_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /* @__PURE__ */ function(_Symbol$iterator2, _Symbol$toStringTag2) {
  function ObservableMap2(initialData, enhancer_, name_) {
    var _this = this;
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableMap@" + getNextId() : "ObservableMap";
    }
    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;
    if (!isFunction(Map)) {
      die(18);
    }
    this.keysAtom_ = createAtom(true ? this.name_ + ".keys()" : "ObservableMap.keys()");
    this.data_ = new Map();
    this.hasMap_ = new Map();
    allowStateChanges(true, function() {
      _this.merge(initialData);
    });
  }
  var _proto = ObservableMap2.prototype;
  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };
  _proto.has = function has2(key) {
    var _this2 = this;
    if (!globalState.trackingDerivation)
      return this.has_(key);
    var entry = this.hasMap_.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableMap.key?", false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function() {
        return _this2.hasMap_["delete"](key);
      });
    }
    return entry.get();
  };
  _proto.set = function set5(key, value) {
    var hasKey = this.has_(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change)
        return this;
      value = change.newValue;
    }
    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }
    return this;
  };
  _proto["delete"] = function _delete(key) {
    var _this3 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change)
        return false;
    }
    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;
      if (notifySpy)
        spyReportStart(_change);
      transaction(function() {
        var _this3$hasMap_$get;
        _this3.keysAtom_.reportChanged();
        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
        var observable2 = _this3.data_.get(key);
        observable2.setNewValue_(void 0);
        _this3.data_["delete"](key);
      });
      if (notify)
        notifyListeners(this, _change);
      if (notifySpy)
        spyReportEnd();
      return true;
    }
    return false;
  };
  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable2 = this.data_.get(key);
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy)
        spyReportStart(change);
      observable2.setNewValue_(newValue);
      if (notify)
        notifyListeners(this, change);
      if (notifySpy)
        spyReportEnd();
    }
  };
  _proto.addValue_ = function addValue_(key, newValue) {
    var _this4 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function() {
      var _this4$hasMap_$get;
      var observable2 = new ObservableValue(newValue, _this4.enhancer_, true ? _this4.name_ + "." + stringifyKey(key) : "ObservableMap.key", false);
      _this4.data_.set(key, observable2);
      newValue = observable2.value_;
      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
      _this4.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue
    } : null;
    if (notifySpy)
      spyReportStart(change);
    if (notify)
      notifyListeners(this, change);
    if (notifySpy)
      spyReportEnd();
  };
  _proto.get = function get4(key) {
    if (this.has(key))
      return this.dehanceValue_(this.data_.get(key).get());
    return this.dehanceValue_(void 0);
  };
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };
  _proto.values = function values() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(), done = _keys$next.done, value = _keys$next.value;
        return {
          done,
          value: done ? void 0 : self2.get(value)
        };
      }
    });
  };
  _proto.entries = function entries2() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(), done = _keys$next2.done, value = _keys$next2.value;
        return {
          done,
          value: done ? void 0 : [value, self2.get(value)]
        };
      }
    });
  };
  _proto[_Symbol$iterator2] = function() {
    return this.entries();
  };
  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  };
  _proto.merge = function merge(other) {
    var _this5 = this;
    if (isObservableMap(other)) {
      other = new Map(other);
    }
    transaction(function() {
      if (isPlainObject(other))
        getPlainObjectKeys(other).forEach(function(key) {
          return _this5.set(key, other[key]);
        });
      else if (Array.isArray(other))
        other.forEach(function(_ref) {
          var key = _ref[0], value = _ref[1];
          return _this5.set(key, value);
        });
      else if (isES6Map(other)) {
        if (other.constructor !== Map)
          die(19, other);
        other.forEach(function(value, key) {
          return _this5.set(key, value);
        });
      } else if (other !== null && other !== void 0)
        die(20, other);
    });
    return this;
  };
  _proto.clear = function clear2() {
    var _this6 = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
          var key = _step2.value;
          _this6["delete"](key);
        }
      });
    });
  };
  _proto.replace = function replace2(values) {
    var _this7 = this;
    transaction(function() {
      var replacementMap = convertToMap(values);
      var orderedData = new Map();
      var keysReportChangedCalled = false;
      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
        var key = _step3.value;
        if (!replacementMap.has(key)) {
          var deleted = _this7["delete"](key);
          if (deleted) {
            keysReportChangedCalled = true;
          } else {
            var value = _this7.data_.get(key);
            orderedData.set(key, value);
          }
        }
      }
      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
        var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
        var keyExisted = _this7.data_.has(_key);
        _this7.set(_key, _value);
        if (_this7.data_.has(_key)) {
          var _value2 = _this7.data_.get(_key);
          orderedData.set(_key, _value2);
          if (!keyExisted) {
            keysReportChangedCalled = true;
          }
        }
      }
      if (!keysReportChangedCalled) {
        if (_this7.data_.size !== orderedData.size) {
          _this7.keysAtom_.reportChanged();
        } else {
          var iter1 = _this7.data_.keys();
          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();
          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this7.keysAtom_.reportChanged();
              break;
            }
            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      }
      _this7.data_ = orderedData;
    });
    return this;
  };
  _proto.toString = function toString2() {
    return "[object ObservableMap]";
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true)
      die("`observe` doesn't support fireImmediately=true in combination with maps.");
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _createClass(ObservableMap2, [{
    key: "size",
    get: function get4() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Map";
    }
  }]);
  return ObservableMap2;
}(_Symbol$iterator, _Symbol$toStringTag);
var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map2 = new Map();
    for (var key in dataStructure) {
      map2.set(key, dataStructure[key]);
    }
    return map2;
  } else {
    return die(21, dataStructure);
  }
}
var _Symbol$iterator$1;
var _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /* @__PURE__ */ function(_Symbol$iterator2, _Symbol$toStringTag2) {
  function ObservableSet2(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = true ? "ObservableSet@" + getNextId() : "ObservableSet";
    }
    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;
    if (!isFunction(Set)) {
      die(22);
    }
    this.atom_ = createAtom(this.name_);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, name_);
    };
    if (initialData) {
      this.replace(initialData);
    }
  }
  var _proto = ObservableSet2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.clear = function clear2() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done; ) {
          var value = _step.value;
          _this["delete"](value);
        }
      });
    });
  };
  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };
  _proto.add = function add(value) {
    var _this2 = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change)
        return this;
    }
    if (!this.has(value)) {
      transaction(function() {
        _this2.data_.add(_this2.enhancer_(value, void 0));
        _this2.atom_.reportChanged();
      });
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;
      if (notifySpy && true)
        spyReportStart(_change);
      if (notify)
        notifyListeners(this, _change);
      if (notifySpy && true)
        spyReportEnd();
    }
    return this;
  };
  _proto["delete"] = function _delete(value) {
    var _this3 = this;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change)
        return false;
    }
    if (this.has(value)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;
      if (notifySpy && true)
        spyReportStart(_change2);
      transaction(function() {
        _this3.atom_.reportChanged();
        _this3.data_["delete"](value);
      });
      if (notify)
        notifyListeners(this, _change2);
      if (notifySpy && true)
        spyReportEnd();
      return true;
    }
    return false;
  };
  _proto.has = function has2(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };
  _proto.entries = function entries2() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index2 = nextIndex;
        nextIndex += 1;
        return index2 < values.length ? {
          value: [keys[index2], values[index2]],
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.keys = function keys() {
    return this.values();
  };
  _proto.values = function values() {
    this.atom_.reportObserved();
    var self2 = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self2.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.replace = function replace2(other) {
    var _this4 = this;
    if (isObservableSet(other)) {
      other = new Set(other);
    }
    transaction(function() {
      if (Array.isArray(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== void 0) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === true)
      die("`observe` doesn't support fireImmediately=true in combination with sets.");
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.toString = function toString2() {
    return "[object ObservableSet]";
  };
  _proto[_Symbol$iterator2] = function() {
    return this.values();
  };
  _createClass(ObservableSet2, [{
    key: "size",
    get: function get4() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Set";
    }
  }]);
  return ObservableSet2;
}(_Symbol$iterator$1, _Symbol$toStringTag$1);
var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
var descriptorCache = /* @__PURE__ */ Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /* @__PURE__ */ function() {
  function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = new Map();
    }
    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }
    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom(true ? this.name_ + ".keys" : "ObservableObject.keys");
    this.isPlainObject_ = isPlainObject(this.target_);
    if (!isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }
    if (true) {
      this.appliedAnnotations_ = {};
    }
  }
  var _proto = ObservableObjectAdministration2.prototype;
  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };
  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable2 = this.values_.get(key);
    if (observable2 instanceof ComputedValue) {
      observable2.set(newValue);
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue
      });
      if (!change)
        return null;
      newValue = change.newValue;
    }
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (notifySpy)
        spyReportStart(_change);
      observable2.setNewValue_(newValue);
      if (notify)
        notifyListeners(this, _change);
      if (notifySpy)
        spyReportEnd();
    }
    return true;
  };
  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      this.has_(key);
    }
    return this.target_[key];
  };
  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (hasProp(this.target_, key)) {
      if (this.values_.has(key)) {
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        return Reflect.set(this.target_, key, value);
      } else {
        this.target_[key] = value;
        return true;
      }
    } else {
      return this.extend_(key, {
        value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  };
  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      return key in this.target_;
    }
    this.pendingKeys_ || (this.pendingKeys_ = new Map());
    var entry = this.pendingKeys_.get(key);
    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer, true ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableObject.key?", false);
      this.pendingKeys_.set(key, entry);
    }
    return entry.get();
  };
  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return;
    }
    assertAnnotable(this, annotation, key);
    if (!(key in this.target_)) {
      var _this$target_$storedA;
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
        return;
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }
    var source = this.target_;
    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);
      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0)
          return;
        if (outcome === 1)
          break;
      }
      source = Object.getPrototypeOf(source);
    }
    recordAnnotationApplied(this, annotation, key);
  };
  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }
    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }
    return outcome;
  };
  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change)
          return null;
        var newValue = change.newValue;
        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      }
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change)
          return null;
        value = change.newValue;
      }
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      var observable2 = new ObservableValue(value, enhancer, true ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
      this.values_.set(key, observable2);
      this.notifyPropertyAddition_(key, observable2.value_);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: void 0
        });
        if (!change)
          return null;
      }
      options.name || (options.name = true ? this.name_ + "." + key.toString() : "ObservableObject.key");
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.values_.set(key, new ComputedValue(options));
      this.notifyPropertyAddition_(key, void 0);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (!hasProp(this.target_, key)) {
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      });
      if (!change)
        return null;
    }
    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;
      startBatch();
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      var observable2 = this.values_.get(key);
      var value = void 0;
      if (!observable2 && (notify || notifySpy)) {
        var _getDescriptor2;
        value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
      }
      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      }
      if (true) {
        delete this.appliedAnnotations_[key];
      }
      if (observable2) {
        this.values_["delete"](key);
        if (observable2 instanceof ObservableValue) {
          value = observable2.value_;
        }
        propagateChanged(observable2);
      }
      this.keysAtom_.reportChanged();
      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if (notifySpy)
          spyReportStart(_change2);
        if (notify)
          notifyListeners(this, _change2);
        if (notifySpy)
          spyReportEnd();
      }
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.observe_ = function observe_(callback, fireImmediately) {
    if (fireImmediately === true)
      die("`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;
    var notify = hasListeners(this);
    var notifySpy = isSpyEnabled();
    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if (notifySpy)
        spyReportStart(change);
      if (notify)
        notifyListeners(this, change);
      if (notifySpy)
        spyReportEnd();
    }
    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
    this.keysAtom_.reportChanged();
  };
  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };
  _proto.keys_ = function keys_() {
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };
  return ObservableObjectAdministration2;
}();
function asObservableObject(target, options) {
  var _options$name;
  if (options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }
  if (hasProp(target, $mobx)) {
    if (!(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
    }
    return target;
  }
  if (!Object.isExtensible(target))
    die("Cannot make the designated object observable; it is not extensible");
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : "ObservableObject";
  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get4() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set5(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}
function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }
  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;
  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  }
  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}
function assertAnnotable(adm, annotation, key) {
  if (!isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  if (!isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overriden by subclass.");
  }
}
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
var StubArray = function StubArray2() {
};
function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== void 0) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}
inherit(StubArray, Array.prototype);
var LegacyObservableArray = /* @__PURE__ */ function(_StubArray, _Symbol$toStringTag2, _Symbol$iterator2) {
  _inheritsLoose(LegacyObservableArray2, _StubArray);
  function LegacyObservableArray2(initialValues, enhancer, name, owned) {
    var _this;
    if (name === void 0) {
      name = true ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    if (owned === void 0) {
      owned = false;
    }
    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      _this.spliceWithArray(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    return _this;
  }
  var _proto = LegacyObservableArray2.prototype;
  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();
    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }
    return Array.prototype.concat.apply(this.slice(), arrays.map(function(a10) {
      return isObservableArray(a10) ? a10.slice() : a10;
    }));
  };
  _proto[_Symbol$iterator2] = function() {
    var self2 = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        return nextIndex < self2.length ? {
          value: self2[nextIndex++],
          done: false
        } : {
          done: true,
          value: void 0
        };
      }
    });
  };
  _createClass(LegacyObservableArray2, [{
    key: "length",
    get: function get4() {
      return this[$mobx].getArrayLength_();
    },
    set: function set5(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Array";
    }
  }]);
  return LegacyObservableArray2;
}(StubArray, Symbol.toStringTag, Symbol.iterator);
Object.entries(arrayExtensions).forEach(function(_ref) {
  var prop = _ref[0], fn = _ref[1];
  if (prop !== "concat")
    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
});
function createArrayEntryDescriptor(index2) {
  return {
    enumerable: false,
    configurable: true,
    get: function get4() {
      return this[$mobx].get_(index2);
    },
    set: function set5(value) {
      this[$mobx].set_(index2, value);
    }
  };
}
function createArrayBufferItem(index2) {
  defineProperty(LegacyObservableArray.prototype, "" + index2, createArrayEntryDescriptor(index2));
}
function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index2 = OBSERVABLE_ARRAY_BUFFER_SIZE; index2 < max + 100; index2++) {
      createArrayBufferItem(index2);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1e3);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}
function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== void 0)
        die(23);
      return thing[$mobx].atom_;
    }
    if (isObservableSet(thing)) {
      return thing[$mobx];
    }
    if (isObservableMap(thing)) {
      if (property === void 0)
        return thing.keysAtom_;
      var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable2)
        die(25, property, getDebugName(thing));
      return observable2;
    }
    if (isObservableObject(thing)) {
      if (!property)
        return die(26);
      var _observable = thing[$mobx].values_.get(property);
      if (!_observable)
        die(27, property, getDebugName(thing));
      return _observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      return thing[$mobx];
    }
  }
  die(28);
}
function getAdministration(thing, property) {
  if (!thing)
    die(29);
  if (property !== void 0)
    return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
    return thing;
  if (isObservableMap(thing) || isObservableSet(thing))
    return thing;
  if (thing[$mobx])
    return thing[$mobx];
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== void 0) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    named = getAtom(thing);
  }
  return named.name_;
}
var toString = objectPrototype.toString;
function deepEqual(a10, b10, depth) {
  if (depth === void 0) {
    depth = -1;
  }
  return eq(a10, b10, depth);
}
function eq(a10, b10, depth, aStack, bStack) {
  if (a10 === b10)
    return a10 !== 0 || 1 / a10 === 1 / b10;
  if (a10 == null || b10 == null)
    return false;
  if (a10 !== a10)
    return b10 !== b10;
  var type = typeof a10;
  if (type !== "function" && type !== "object" && typeof b10 != "object")
    return false;
  var className = toString.call(a10);
  if (className !== toString.call(b10))
    return false;
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a10 === "" + b10;
    case "[object Number]":
      if (+a10 !== +a10)
        return +b10 !== +b10;
      return +a10 === 0 ? 1 / +a10 === 1 / b10 : +a10 === +b10;
    case "[object Date]":
    case "[object Boolean]":
      return +a10 === +b10;
    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a10) === Symbol.valueOf.call(b10);
    case "[object Map]":
    case "[object Set]":
      if (depth >= 0) {
        depth++;
      }
      break;
  }
  a10 = unwrap(a10);
  b10 = unwrap(b10);
  var areArrays = className === "[object Array]";
  if (!areArrays) {
    if (typeof a10 != "object" || typeof b10 != "object")
      return false;
    var aCtor = a10.constructor, bCtor = b10.constructor;
    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a10 && "constructor" in b10) {
      return false;
    }
  }
  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a10)
      return bStack[length] === b10;
  }
  aStack.push(a10);
  bStack.push(b10);
  if (areArrays) {
    length = a10.length;
    if (length !== b10.length)
      return false;
    while (length--) {
      if (!eq(a10[length], b10[length], depth - 1, aStack, bStack))
        return false;
    }
  } else {
    var keys = Object.keys(a10);
    var key;
    length = keys.length;
    if (Object.keys(b10).length !== length)
      return false;
    while (length--) {
      key = keys[length];
      if (!(hasProp(b10, key) && eq(a10[key], b10[key], depth - 1, aStack, bStack)))
        return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function unwrap(a10) {
  if (isObservableArray(a10))
    return a10.slice();
  if (isES6Map(a10) || isObservableMap(a10))
    return Array.from(a10.entries());
  if (isES6Set(a10) || isObservableSet(a10))
    return Array.from(a10.entries());
  return a10;
}
function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}
function getSelf() {
  return this;
}
function isAnnotation(thing) {
  return thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_);
}
["Symbol", "Map", "Set"].forEach(function(m10) {
  var g10 = getGlobal();
  if (typeof g10[m10] === "undefined") {
    die("MobX requires global '" + m10 + "' to be available or polyfilled");
  }
});
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy,
    extras: {
      getDebugName
    },
    $mobx
  });
}

// ../../node_modules/mobx-react-lite/es/utils/assertEnvironment.js
var import_react = __toModule(require_react());
if (!import_react.useState) {
  throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!makeObservable) {
  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}

// ../../node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js
var import_react_dom = __toModule(require_react_dom());

// ../../node_modules/mobx-react-lite/es/utils/observerBatching.js
function defaultNoopBatch(callback) {
  callback();
}
function observerBatching(reactionScheduler3) {
  if (!reactionScheduler3) {
    reactionScheduler3 = defaultNoopBatch;
    if (true) {
      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
    }
  }
  configure({reactionScheduler: reactionScheduler3});
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
var import_react2 = __toModule(require_react());

// ../../node_modules/mobx-react-lite/es/utils/printDebugValue.js
function printDebugValue(v10) {
  return getDependencyTree(v10);
}

// ../../node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js
var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? void 0 : FinalizationRegistry;

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js
function createTrackingData(reaction) {
  var trackingData = {
    reaction,
    mounted: false,
    changedBeforeMount: false,
    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
  };
  return trackingData;
}
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 1e4;
var CLEANUP_TIMER_LOOP_MILLIS = 1e4;

// ../../node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js
function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry2) {
  var cleanupTokenToReactionTrackingMap = new Map();
  var globalCleanupTokensCounter = 1;
  var registry = new FinalizationRegistry2(function cleanupFunction(token) {
    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
    if (trackedReaction) {
      trackedReaction.reaction.dispose();
      cleanupTokenToReactionTrackingMap.delete(token);
    }
  });
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      var token = globalCleanupTokensCounter++;
      registry.register(objectRetainedByReact, token, reactionTrackingRef);
      reactionTrackingRef.current = createTrackingData(reaction);
      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: function(reactionRef) {
      registry.unregister(reactionRef);
      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
      }
    },
    forceCleanupTimerToRunNowForTests: function() {
    },
    resetCleanupScheduleForTests: function() {
    }
  };
}

// ../../node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js
var __values = function(o13) {
  var s10 = typeof Symbol === "function" && Symbol.iterator, m10 = s10 && o13[s10], i10 = 0;
  if (m10)
    return m10.call(o13);
  if (o13 && typeof o13.length === "number")
    return {
      next: function() {
        if (o13 && i10 >= o13.length)
          o13 = void 0;
        return {value: o13 && o13[i10++], done: !o13};
      }
    };
  throw new TypeError(s10 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function createTimerBasedReactionCleanupTracking() {
  var uncommittedReactionRefs = new Set();
  var reactionCleanupHandle;
  function forceCleanupTimerToRunNowForTests2() {
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      cleanUncommittedReactions();
    }
  }
  function resetCleanupScheduleForTests2() {
    var e_1, _a4;
    if (uncommittedReactionRefs.size > 0) {
      try {
        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
          var ref = uncommittedReactionRefs_1_1.value;
          var tracking = ref.current;
          if (tracking) {
            tracking.reaction.dispose();
            ref.current = null;
          }
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a4 = uncommittedReactionRefs_1.return))
            _a4.call(uncommittedReactionRefs_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      uncommittedReactionRefs.clear();
    }
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      reactionCleanupHandle = void 0;
    }
  }
  function ensureCleanupTimerRunning() {
    if (reactionCleanupHandle === void 0) {
      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
    }
  }
  function scheduleCleanupOfReactionIfLeaked(ref) {
    uncommittedReactionRefs.add(ref);
    ensureCleanupTimerRunning();
  }
  function recordReactionAsCommitted2(reactionRef) {
    uncommittedReactionRefs.delete(reactionRef);
  }
  function cleanUncommittedReactions() {
    reactionCleanupHandle = void 0;
    var now2 = Date.now();
    uncommittedReactionRefs.forEach(function(ref) {
      var tracking = ref.current;
      if (tracking) {
        if (now2 >= tracking.cleanAt) {
          tracking.reaction.dispose();
          ref.current = null;
          uncommittedReactionRefs.delete(ref);
        }
      }
    });
    if (uncommittedReactionRefs.size > 0) {
      ensureCleanupTimerRunning();
    }
  }
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      reactionTrackingRef.current = createTrackingData(reaction);
      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: recordReactionAsCommitted2,
    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests2,
    resetCleanupScheduleForTests: resetCleanupScheduleForTests2
  };
}

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js
var _a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking();
var addReactionToTrack = _a.addReactionToTrack;
var recordReactionAsCommitted = _a.recordReactionAsCommitted;
var resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests;
var forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;

// ../../node_modules/mobx-react-lite/es/staticRendering.js
var globalIsUsingStaticRendering = false;
function isUsingStaticRendering() {
  return globalIsUsingStaticRendering;
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
var __read = function(o13, n10) {
  var m10 = typeof Symbol === "function" && o13[Symbol.iterator];
  if (!m10)
    return o13;
  var i10 = m10.call(o13), r12, ar2 = [], e14;
  try {
    while ((n10 === void 0 || n10-- > 0) && !(r12 = i10.next()).done)
      ar2.push(r12.value);
  } catch (error) {
    e14 = {error};
  } finally {
    try {
      if (r12 && !r12.done && (m10 = i10["return"]))
        m10.call(i10);
    } finally {
      if (e14)
        throw e14.error;
    }
  }
  return ar2;
};
function observerComponentNameFor(baseComponentName) {
  return "observer".concat(baseComponentName);
}
var ObjectToBeRetainedByReact = function() {
  function ObjectToBeRetainedByReact2() {
  }
  return ObjectToBeRetainedByReact2;
}();
function objectToBeRetainedByReactFactory() {
  return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
  if (baseComponentName === void 0) {
    baseComponentName = "observed";
  }
  if (isUsingStaticRendering()) {
    return fn();
  }
  var _a4 = __read(import_react2.default.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a4[0];
  var _b2 = __read(import_react2.default.useState(), 2), setState = _b2[1];
  var forceUpdate = function() {
    return setState([]);
  };
  var reactionTrackingRef = import_react2.default.useRef(null);
  if (!reactionTrackingRef.current) {
    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
      if (trackingData_1.mounted) {
        forceUpdate();
      } else {
        trackingData_1.changedBeforeMount = true;
      }
    });
    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
  }
  var reaction = reactionTrackingRef.current.reaction;
  import_react2.default.useDebugValue(reaction, printDebugValue);
  import_react2.default.useEffect(function() {
    recordReactionAsCommitted(reactionTrackingRef);
    if (reactionTrackingRef.current) {
      reactionTrackingRef.current.mounted = true;
      if (reactionTrackingRef.current.changedBeforeMount) {
        reactionTrackingRef.current.changedBeforeMount = false;
        forceUpdate();
      }
    } else {
      reactionTrackingRef.current = {
        reaction: new Reaction(observerComponentNameFor(baseComponentName), function() {
          forceUpdate();
        }),
        mounted: true,
        changedBeforeMount: false,
        cleanAt: Infinity
      };
      forceUpdate();
    }
    return function() {
      reactionTrackingRef.current.reaction.dispose();
      reactionTrackingRef.current = null;
    };
  }, []);
  var rendering;
  var exception;
  reaction.track(function() {
    try {
      rendering = fn();
    } catch (e14) {
      exception = e14;
    }
  });
  if (exception) {
    throw exception;
  }
  return rendering;
}

// ../../node_modules/mobx-react-lite/es/observer.js
var import_react3 = __toModule(require_react());
var __assign2 = function() {
  __assign2 = Object.assign || function(t13) {
    for (var s10, i10 = 1, n10 = arguments.length; i10 < n10; i10++) {
      s10 = arguments[i10];
      for (var p10 in s10)
        if (Object.prototype.hasOwnProperty.call(s10, p10))
          t13[p10] = s10[p10];
    }
    return t13;
  };
  return __assign2.apply(this, arguments);
};
function observer(baseComponent, options) {
  if (isUsingStaticRendering()) {
    return baseComponent;
  }
  var realOptions = __assign2({forwardRef: false}, options);
  var baseComponentName = baseComponent.displayName || baseComponent.name;
  var wrappedComponent = function(props, ref) {
    return useObserver(function() {
      return baseComponent(props, ref);
    }, baseComponentName);
  };
  if (baseComponentName !== "") {
    wrappedComponent.displayName = baseComponentName;
  }
  if (baseComponent.contextTypes) {
    wrappedComponent.contextTypes = baseComponent.contextTypes;
  }
  var memoComponent;
  if (realOptions.forwardRef) {
    memoComponent = (0, import_react3.memo)((0, import_react3.forwardRef)(wrappedComponent));
  } else {
    memoComponent = (0, import_react3.memo)(wrappedComponent);
  }
  copyStaticProperties(baseComponent, memoComponent);
  if (true) {
    Object.defineProperty(memoComponent, "contextTypes", {
      set: function() {
        var _a4;
        throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a4 = this.type) === null || _a4 === void 0 ? void 0 : _a4.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
      }
    });
  }
  return memoComponent;
}
var hoistBlackList = {
  $$typeof: true,
  render: true,
  compare: true,
  type: true,
  displayName: true
};
function copyStaticProperties(base, target) {
  Object.keys(base).forEach(function(key) {
    if (!hoistBlackList[key]) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}

// ../../node_modules/mobx-react-lite/es/ObserverComponent.js
function ObserverComponent(_a4) {
  var children = _a4.children, render = _a4.render;
  var component = children || render;
  if (typeof component !== "function") {
    return null;
  }
  return useObserver(component);
}
if (true) {
  ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
  };
}
ObserverComponent.displayName = "Observer";
function ObserverPropsCheck(props, key, componentName, location2, propFullName) {
  var extraKey = key === "children" ? "render" : "children";
  var hasProp2 = typeof props[key] === "function";
  var hasExtraProp = typeof props[extraKey] === "function";
  if (hasProp2 && hasExtraProp) {
    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
  }
  if (hasProp2 || hasExtraProp) {
    return null;
  }
  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to `" + componentName + "`, expected `function`.");
}

// ../../node_modules/mobx-react-lite/es/useLocalObservable.js
var import_react4 = __toModule(require_react());

// ../../node_modules/mobx-react-lite/es/useLocalStore.js
var import_react6 = __toModule(require_react());

// ../../node_modules/mobx-react-lite/es/useAsObservableSource.js
var import_react5 = __toModule(require_react());

// ../../node_modules/mobx-react-lite/es/index.js
observerBatching(import_react_dom.unstable_batchedUpdates);

// ../../packages/core/dist/index.mjs
var React45 = __toModule(require_react());
var React44 = __toModule(require_react());
var React3 = __toModule(require_react());
var React22 = __toModule(require_react());

// ../../node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
function clamp(v10, min, max) {
  return Math.max(min, Math.min(v10, max));
}
var V = {
  toVector(v10, fallback) {
    if (v10 === void 0)
      v10 = fallback;
    return Array.isArray(v10) ? v10 : [v10, v10];
  },
  add(v12, v23) {
    return [v12[0] + v23[0], v12[1] + v23[1]];
  },
  sub(v12, v23) {
    return [v12[0] - v23[0], v12[1] - v23[1]];
  },
  addTo(v12, v23) {
    v12[0] += v23[0];
    v12[1] += v23[1];
  },
  subTo(v12, v23) {
    v12[0] -= v23[0];
    v12[1] -= v23[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {
  if (constant === 0)
    return clamp(position, min, max);
  if (position < min)
    return -rubberband(min - position, max - min, constant) + min;
  if (position > max)
    return +rubberband(position - max, max - min, constant) + max;
  return position;
}
function computeRubberband(bounds, [Vx2, Vy2], [Rx2, Ry2]) {
  const [[X02, X12], [Y02, Y12]] = bounds;
  return [rubberbandIfOutOfBounds(Vx2, X02, X12, Rx2), rubberbandIfOutOfBounds(Vy2, Y02, Y12, Ry2)];
}

// ../../node_modules/@use-gesture/core/dist/actions-e2a59bb9.esm.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys3(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i10 = 1; i10 < arguments.length; i10++) {
    var source = arguments[i10] != null ? arguments[i10] : {};
    i10 % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string) {
  if (!string)
    return "";
  return string[0].toUpperCase() + string.slice(1);
}
var actionsWithoutCaptureSupported = ["enter", "leave"];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action2 = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action2] || action2 : action2;
  return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
}
var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf("passive");
  if (passive)
    eventKey = eventKey.replace("passive", "");
  const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture)
    eventKey = eventKey.replace("capture", "");
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action2 = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action2] || action2 : action2;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getPointerType(event) {
  if (isTouch(event))
    return "touch";
  if ("pointerType" in event)
    return event.pointerType;
  return "mouse";
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e14) => {
    var _event$currentTarget, _event$currentTarget$;
    return e14.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e14.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P12, P23) {
  const dx2 = P23.clientX - P12.clientX;
  const dy2 = P23.clientY - P12.clientY;
  const cx2 = (P23.clientX + P12.clientX) / 2;
  const cy2 = (P23.clientY + P12.clientY) / 2;
  const distance = Math.hypot(dx2, dy2);
  const angle = -(Math.atan2(dx2, dy2) * 180) / Math.PI;
  const origin = [cx2, cy2];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P12, P23] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P12, P23);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call(v10, ...args) {
  if (typeof v10 === "function") {
    return v10(...args);
  } else {
    return v10;
  }
}
function noop3() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop3;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config.from ? call(config.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  computeValues(values) {
    const state = this.state;
    state._values = values;
    state.values = this.config.transform(values);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config,
      shared
    } = this;
    state.args = this.args;
    let dt2 = 0;
    if (event) {
      state.event = event;
      if (config.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt2 = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent)
      this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t02, t13] = config.threshold;
    const {
      _step,
      values
    } = state;
    if (config.hasCustomTransform) {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t02 && values[0];
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t13 && values[1];
    } else {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t02 && Math.sign(_m0) * t02;
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t13 && Math.sign(_m1) * t13;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional)
      return;
    const movement = [0, 0];
    if (config.hasCustomTransform) {
      const [v02, v12] = values;
      movement[0] = _step[0] !== false ? v02 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v12 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked)
      this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config)
            state._bounds = call(config.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox2, oy2] = state.offset;
    const [[x02, x12], [y02, y12]] = state._bounds;
    state.overflow = [ox2 < x02 ? -1 : ox2 > x12 ? 1 : 0, oy2 < y02 ? -1 : oy2 > y12 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband2 = state._active ? config.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband2);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt2 > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt2 > 0) {
        state.velocity = [absoluteDelta[0] / dt2, absoluteDelta[1] / dt2];
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
      return;
    const memo23 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo23 !== void 0)
      state.memo = memo23;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx2, dy2], threshold) {
  const absDx = Math.abs(dx2);
  const absDy = Math.abs(dy2);
  if (absDx > absDy && absDx > threshold) {
    return "x";
  }
  if (absDy > absDx && absDy > threshold) {
    return "y";
  }
  return void 0;
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config = this.config;
    if (!state.axis && event) {
      const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
  }
  restrictToAxis(v10) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case "x":
          v10[1] = 0;
          break;
        case "y":
          v10[0] = 0;
          break;
      }
    }
  }
};
var identity = (v10) => v10;
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  eventOptions(value, _k2, config) {
    return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === "function")
      return value;
    if (value != null)
      return V.toVector(value);
  },
  transform(value, _k2, config) {
    const transform = value || config.shared.transform;
    this.hasCustomTransform = !!transform;
    if (true) {
      const originalTransform = transform || identity;
      return (v10) => {
        const r12 = originalTransform(v10);
        if (!isFinite(r12[0]) || !isFinite(r12[1])) {
          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r12[0]},${[1]}]`);
        }
        return r12;
      };
    }
    return transform || identity;
  },
  threshold(value) {
    return V.toVector(value, 0);
  }
};
if (true) {
  Object.assign(commonConfigResolver, {
    domTarget(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
      return NaN;
    },
    lockDirection(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
      return NaN;
    },
    initial(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
      return NaN;
    }
  });
}
var DEFAULT_AXIS_THRESHOLD = 0;
var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v2, _k2, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
    return value;
  },
  bounds(value = {}) {
    if (typeof value === "function") {
      return (state) => coordinatesConfigResolver.bounds(value(state));
    }
    if ("current" in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
      return value;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top: top2 = -Infinity,
      bottom = Infinity
    } = value;
    return [[left, right], [top2, bottom]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons))
      return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config.preventScrollAxis && getPointerType(event) !== "mouse") {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config.delay > 0) {
      this.setupDelayTrigger(event);
      if (config.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id2 = pointerId(event);
    if (state._pointerId !== void 0 && id2 !== state._pointerId)
      return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (true) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config = this.config;
    if (!state._active || !state._pointerActive)
      return;
    const id2 = pointerId(event);
    if (state._pointerId !== void 0 && id2 !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx2, dy2] = state._distance;
    state.tap = dx2 <= config.tapsThreshold && dy2 <= config.tapsThreshold;
    if (state.tap && config.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx2, vy2] = state.velocity;
      const [mx2, my2] = state.movement;
      const [svx, svy] = config.swipe.velocity;
      const [sx2, sy2] = config.swipe.distance;
      const sdt = config.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx2) > svx && Math.abs(mx2) > sx2)
          state.swipe[0] = dirx;
        if (Math.abs(vy2) > svy && Math.abs(my2) > sy2)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config = this.config;
    const device = config.device;
    if (true) {
      try {
        if (device === "pointer" && config.preventScrollDelay === void 0) {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    persistEvent(event);
    const remove3 = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", remove3);
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove3);
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
      bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
    }
    bindFunction("key", "down", this.keyDown.bind(this));
    bindFunction("key", "up", this.keyUp.bind(this));
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e14) {
    return false;
  }
}
var SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: isTouchScreen(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v2, _k2, {
    pointer: {
      touch = false,
      lock = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer && !mouse)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScrollAxis(value, _k2, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
    if (!SUPPORT.touchscreen || preventScroll === false)
      return void 0;
    return value ? value : preventScroll !== void 0 ? "y" : void 0;
  },
  pointerCapture(_v2, _k2, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  threshold(value, _k2, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = void 0
  }) {
    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  },
  axisThreshold(value) {
    if (!value)
      return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
  }
});
if (true) {
  Object.assign(dragConfigResolver, {
    useTouch(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
      return NaN;
    },
    experimental_preventWindowScrollY(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
      return NaN;
    },
    swipeVelocity(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
      return NaN;
    },
    swipeDistance(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
      return NaN;
    },
    swipeDuration(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
      return NaN;
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 100;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "pinching");
    _defineProperty(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type,
      movement,
      lastOffset
    } = this.state;
    if (type === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
  }
  restrictToAxis(v10) {
    if (this.config.lockDirection) {
      if (this.state.axis === "scale")
        v10[1] = 0;
      else if (this.state.axis === "angle")
        v10[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id2) => ctrlTouchIds.has(id2)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id2) => ctrlPointerIds.has(id2)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id2) => !this.ctrl.touchIds.has(id2))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && !event[modifierKey])
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (!event.defaultPrevented) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    } else {
      bindFunction("wheel", "", this.wheel.bind(this), {
        passive: false
      });
    }
  }
};
var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v2, _k2, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (SUPPORT.touch && touch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v2, _k2, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D10 = assignDefault(call(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D10.min, D10.max];
    };
    const _angleBounds = (state) => {
      const A10 = assignDefault(call(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A10.min, A10.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k2, config) {
    this.lockDirection = config.axis === "lock";
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value) {
    if (value === void 0)
      return "ctrlKey";
    return value;
  }
});
var MoveEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "moving");
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    if (!this.state._active)
      this.moveStart(event);
    else
      this.moveChange(event);
    this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.computeInitial();
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active)
      return;
    const values = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "change", this.move.bind(this));
    bindFunction("pointer", "leave", this.moveEnd.bind(this));
  }
};
var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var ScrollEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "scrolling");
  }
  scroll(event) {
    if (!this.state._active)
      this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    const values = scrollValues(event);
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("scroll", "", this.scroll.bind(this));
  }
};
var scrollConfigResolver = coordinatesConfigResolver;
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    const [ox2, oy2] = state.overflow;
    const [dx2, dy2] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox2 < 0 && dx2 > 0 && dirx < 0 || ox2 > 0 && dx2 < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy2 < 0 && dy2 > 0 && diry < 0 || oy2 > 0 && dy2 < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var HoverEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "hovering");
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    const state = this.state;
    if (!state._active)
      return;
    state._active = false;
    const values = pointerValues(event);
    state._movement = state._delta = V.sub(values, state._values);
    this.computeValues(values);
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "enter", this.enter.bind(this));
    bindFunction("pointer", "leave", this.leave.bind(this));
  }
};
var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var EngineMap = new Map();
var ConfigResolverMap = new Map();
function registerAction(action2) {
  EngineMap.set(action2.key, action2.engine);
  ConfigResolverMap.set(action2.key, action2.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var hoverAction = {
  key: "hover",
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
var moveAction = {
  key: "move",
  engine: MoveEngine,
  resolver: moveConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var scrollAction = {
  key: "scroll",
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// ../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react7 = __toModule(require_react());

// ../../node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i10;
  for (i10 = 0; i10 < sourceKeys.length; i10++) {
    key = sourceKeys[i10];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i10;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i10 = 0; i10 < sourceSymbolKeys.length; i10++) {
      key = sourceSymbolKeys[i10];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => "current" in value ? value.current : value;
    }
    return void 0;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : void 0) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value) {
    return value;
  }
};
var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case "function":
        if (true) {
          const r12 = resolver.call(result, config[key], key, config);
          if (!Number.isNaN(r12))
            result[key] = r12;
        } else {
          result[key] = resolver.call(result, config[key], key, config);
        }
        break;
      case "object":
        result[key] = resolveWith(config[key], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key] = config[key];
        break;
    }
  }
  return result;
}
function parse(config, gestureKey) {
  const _ref = config, {
    target,
    eventOptions,
    window: window2,
    enabled,
    transform
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
  const _config = {
    shared: resolveWith({
      target,
      eventOptions,
      window: window2,
      enabled,
      transform
    }, sharedConfigResolver)
  };
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (true) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
          if (key === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action2, handler, options) {
    const listeners = this._listeners;
    const type = toDomEventType(device, action2);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
    element.addEventListener(type, handler, eventOptions);
    const remove3 = () => {
      element.removeEventListener(type, handler, eventOptions);
      listeners.delete(remove3);
    };
    listeners.add(remove3);
    return remove3;
  }
  clean() {
    this._listeners.forEach((remove3) => remove3());
    this._listeners.clear();
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty(this, "_timeouts", new Map());
  }
  add(key, callback, ms2 = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms2, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout)
      window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
};
var Controller = class {
  constructor(handlers) {
    _defineProperty(this, "gestures", new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", new Set());
    _defineProperty(this, "touchIds", new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ("pointerId" in event) {
      if (event.type === "pointerup" || event.type === "pointercancel")
        this.pointerIds.delete(event.pointerId);
      else if (event.type === "pointerdown")
        this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config, gestureKey) {
    this.config = parse(config, gestureKey);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target)
        return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
        if (gestureConfig.enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target)
      return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target, device, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action2, handler, options = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action2, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers2) {
  const native = {};
  const handlers = {};
  const actions = new Set();
  for (let key in _handlers2) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers2[key];
    } else {
      native[key] = _handlers2[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key)) {
    if (true) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo23 = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo23 = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo23;
  };
  internalHandlers[key] = fn;
  config[key] = config[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// ../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react7.default.useMemo(() => new Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  import_react7.default.useEffect(ctrl.effect.bind(ctrl));
  import_react7.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture2(_handlers2, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = parseMergedHandlers(_handlers2, _config || {});
    return useRecognizers(handlers, config, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config || {});
}

// ../../packages/vec/dist/index.mjs
var h = Object.defineProperty;
var d = (s10, n10, r12) => n10 in s10 ? h(s10, n10, {enumerable: true, configurable: true, writable: true, value: r12}) : s10[n10] = r12;
var m = (s10, n10, r12) => (d(s10, typeof n10 != "symbol" ? n10 + "" : n10, r12), r12);
var t = class {
  static clamp(n10, r12, u10) {
    return Math.max(r12, typeof u10 != "undefined" ? Math.min(n10, u10) : n10);
  }
  static clampV(n10, r12, u10) {
    return n10.map((b10) => u10 ? t.clamp(b10, r12, u10) : t.clamp(b10, r12));
  }
  static cross(n10, r12, u10) {
    return (r12[0] - n10[0]) * (u10[1] - n10[1]) - (u10[0] - n10[0]) * (r12[1] - n10[1]);
  }
  static snap(n10, r12 = 1) {
    return [Math.round(n10[0] / r12) * r12, Math.round(n10[1] / r12) * r12];
  }
};
var e = t;
m(e, "neg", (n10) => [-n10[0], -n10[1]]), m(e, "add", (n10, r12) => [n10[0] + r12[0], n10[1] + r12[1]]), m(e, "addScalar", (n10, r12) => [n10[0] + r12, n10[1] + r12]), m(e, "sub", (n10, r12) => [n10[0] - r12[0], n10[1] - r12[1]]), m(e, "subScalar", (n10, r12) => [n10[0] - r12, n10[1] - r12]), m(e, "vec", (n10, r12) => [r12[0] - n10[0], r12[1] - n10[1]]), m(e, "mul", (n10, r12) => [n10[0] * r12, n10[1] * r12]), m(e, "mulV", (n10, r12) => [n10[0] * r12[0], n10[1] * r12[1]]), m(e, "div", (n10, r12) => [n10[0] / r12, n10[1] / r12]), m(e, "divV", (n10, r12) => [n10[0] / r12[0], n10[1] / r12[1]]), m(e, "per", (n10) => [n10[1], -n10[0]]), m(e, "dpr", (n10, r12) => n10[0] * r12[0] + n10[1] * r12[1]), m(e, "cpr", (n10, r12) => n10[0] * r12[1] - r12[0] * n10[1]), m(e, "len2", (n10) => n10[0] * n10[0] + n10[1] * n10[1]), m(e, "len", (n10) => Math.hypot(n10[0], n10[1])), m(e, "pry", (n10, r12) => t.dpr(n10, r12) / t.len(r12)), m(e, "uni", (n10) => t.div(n10, t.len(n10))), m(e, "normalize", (n10) => t.uni(n10)), m(e, "tangent", (n10, r12) => t.uni(t.sub(n10, r12))), m(e, "dist2", (n10, r12) => t.len2(t.sub(n10, r12))), m(e, "dist", (n10, r12) => Math.hypot(n10[1] - r12[1], n10[0] - r12[0])), m(e, "fastDist", (n10, r12) => {
  let u10 = [r12[0] - n10[0], r12[1] - n10[1]], b10 = [Math.abs(u10[0]), Math.abs(u10[1])], a10 = 1 / Math.max(b10[0], b10[1]);
  return a10 = a10 * (1.29289 - (b10[0] + b10[1]) * a10 * 0.29289), [u10[0] * a10, u10[1] * a10];
}), m(e, "ang", (n10, r12) => Math.atan2(t.cpr(n10, r12), t.dpr(n10, r12))), m(e, "angle", (n10, r12) => Math.atan2(r12[1] - n10[1], r12[0] - n10[0])), m(e, "med", (n10, r12) => t.mul(t.add(n10, r12), 0.5)), m(e, "rot", (n10, r12 = 0) => [n10[0] * Math.cos(r12) - n10[1] * Math.sin(r12), n10[0] * Math.sin(r12) + n10[1] * Math.cos(r12)]), m(e, "rotWith", (n10, r12, u10 = 0) => {
  if (u10 === 0)
    return n10;
  let b10 = Math.sin(u10), a10 = Math.cos(u10), i10 = n10[0] - r12[0], o13 = n10[1] - r12[1], c10 = i10 * a10 - o13 * b10, l10 = i10 * b10 + o13 * a10;
  return [c10 + r12[0], l10 + r12[1]];
}), m(e, "isEqual", (n10, r12) => n10[0] === r12[0] && n10[1] === r12[1]), m(e, "lrp", (n10, r12, u10) => t.add(n10, t.mul(t.sub(r12, n10), u10))), m(e, "int", (n10, r12, u10, b10, a10 = 1) => {
  let i10 = (t.clamp(u10, b10) - u10) / (b10 - u10);
  return t.add(t.mul(n10, 1 - i10), t.mul(r12, a10));
}), m(e, "ang3", (n10, r12, u10) => {
  let b10 = t.vec(r12, n10), a10 = t.vec(r12, u10);
  return t.ang(b10, a10);
}), m(e, "abs", (n10) => [Math.abs(n10[0]), Math.abs(n10[1])]), m(e, "rescale", (n10, r12) => {
  let u10 = t.len(n10);
  return [r12 * n10[0] / u10, r12 * n10[1] / u10];
}), m(e, "isLeft", (n10, r12, u10) => (r12[0] - n10[0]) * (u10[1] - n10[1]) - (u10[0] - n10[0]) * (r12[1] - n10[1])), m(e, "clockwise", (n10, r12, u10) => t.isLeft(n10, r12, u10) > 0), m(e, "toFixed", (n10) => n10.map((r12) => Math.round(r12 * 100) / 100)), m(e, "nearestPointOnLineThroughPoint", (n10, r12, u10) => t.add(n10, t.mul(r12, t.pry(t.sub(u10, n10), r12)))), m(e, "distanceToLineThroughPoint", (n10, r12, u10) => t.dist(u10, t.nearestPointOnLineThroughPoint(n10, r12, u10))), m(e, "nearestPointOnLineSegment", (n10, r12, u10, b10 = true) => {
  let a10 = t.uni(t.sub(r12, n10)), i10 = t.add(n10, t.mul(a10, t.pry(t.sub(u10, n10), a10)));
  if (b10) {
    if (i10[0] < Math.min(n10[0], r12[0]))
      return n10[0] < r12[0] ? n10 : r12;
    if (i10[0] > Math.max(n10[0], r12[0]))
      return n10[0] > r12[0] ? n10 : r12;
    if (i10[1] < Math.min(n10[1], r12[1]))
      return n10[1] < r12[1] ? n10 : r12;
    if (i10[1] > Math.max(n10[1], r12[1]))
      return n10[1] > r12[1] ? n10 : r12;
  }
  return i10;
}), m(e, "distanceToLineSegment", (n10, r12, u10, b10 = true) => t.dist(u10, t.nearestPointOnLineSegment(n10, r12, u10, b10))), m(e, "nearestPointOnBounds", (n10, r12) => [t.clamp(r12[0], n10.minX, n10.maxX), t.clamp(r12[1], n10.minY, n10.maxY)]), m(e, "distanceToBounds", (n10, r12) => t.dist(r12, t.nearestPointOnBounds(n10, r12))), m(e, "nudge", (n10, r12, u10) => t.isEqual(n10, r12) ? n10 : t.add(n10, t.mul(t.uni(t.sub(r12, n10)), u10))), m(e, "nudgeAtAngle", (n10, r12, u10) => [Math.cos(r12) * u10 + n10[0], Math.sin(r12) * u10 + n10[1]]), m(e, "toPrecision", (n10, r12 = 4) => [+n10[0].toPrecision(r12), +n10[1].toPrecision(r12)]), m(e, "pointsBetween", (n10, r12, u10 = 6) => Array.from(Array(u10)).map((b10, a10) => {
  let i10 = a10 / (u10 - 1), o13 = Math.min(1, 0.5 + Math.abs(0.5 - i10));
  return [...t.lrp(n10, r12, i10), o13];
})), m(e, "slope", (n10, r12) => n10[0] === r12[0] ? NaN : (n10[1] - r12[1]) / (n10[0] - r12[0])), m(e, "max", (...n10) => [Math.max(...n10.map((r12) => r12[0])), Math.max(...n10.map((r12) => r12[1]))]), m(e, "min", (...n10) => [Math.min(...n10.map((r12) => r12[0])), Math.min(...n10.map((r12) => r12[1]))]);
var p = e;

// ../../packages/core/dist/index.mjs
var import_react9 = __toModule(require_react());
var React32 = __toModule(require_react());
var React4 = __toModule(require_react());
var React5 = __toModule(require_react());
var React6 = __toModule(require_react());
var React7 = __toModule(require_react());
var React8 = __toModule(require_react());
var React9 = __toModule(require_react());
var React10 = __toModule(require_react());
var React11 = __toModule(require_react());
var React12 = __toModule(require_react());
var React13 = __toModule(require_react());
var React14 = __toModule(require_react());
var React15 = __toModule(require_react());
var React16 = __toModule(require_react());
var React17 = __toModule(require_react());
var React18 = __toModule(require_react());
var React35 = __toModule(require_react());
var React27 = __toModule(require_react());
var React19 = __toModule(require_react());
var React20 = __toModule(require_react());
var React21 = __toModule(require_react());
var React222 = __toModule(require_react());
var React23 = __toModule(require_react());
var React25 = __toModule(require_react());
var React24 = __toModule(require_react());
var React26 = __toModule(require_react());
var React28 = __toModule(require_react());
var React30 = __toModule(require_react());
var React29 = __toModule(require_react());
var React33 = __toModule(require_react());
var React322 = __toModule(require_react());
var React31 = __toModule(require_react());
var React34 = __toModule(require_react());
var React37 = __toModule(require_react());
var React36 = __toModule(require_react());

// ../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key) {
      var index2 = getIndex(this.__entries__, key);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key, value) {
      var index2 = getIndex(this.__entries__, key);
      if (~index2) {
        this.__entries__[index2][1] = value;
      } else {
        this.__entries__.push([key, value]);
      }
    };
    class_1.prototype.delete = function(key) {
      var entries2 = this.__entries__;
      var index2 = getIndex(entries2, key);
      if (~index2) {
        entries2.splice(index2, 1);
      }
    };
    class_1.prototype.has = function(key) {
      return !!~getIndex(this.__entries__, key);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx) {
      if (ctx === void 0) {
        ctx = null;
      }
      for (var _i2 = 0, _a4 = this.__entries__; _i2 < _a4.length; _i2++) {
        var entry = _a4[_i2];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer2) {
    if (!~this.observers_.indexOf(observer2)) {
      this.observers_.push(observer2);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer2) {
    var observers2 = this.observers_;
    var index2 = observers2.indexOf(observer2);
    if (~index2) {
      observers2.splice(index2, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer2) {
      return observer2.gatherActive(), observer2.hasActive();
    });
    activeObservers.forEach(function(observer2) {
      return observer2.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser2 || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser2 || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a4) {
    var _b2 = _a4.propertyName, propertyName = _b2 === void 0 ? "" : _b2;
    var isReflowProperty = transitionKeys.some(function(key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target, props) {
  for (var _i2 = 0, _a4 = Object.keys(props); _i2 < _a4.length; _i2++) {
    var key = _a4[_i2];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles2) {
  var positions = [];
  for (var _i2 = 1; _i2 < arguments.length; _i2++) {
    positions[_i2 - 1] = arguments[_i2];
  }
  return positions.reduce(function(size, position) {
    var value = styles2["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles2) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i2 = 0, positions_1 = positions; _i2 < positions_1.length; _i2++) {
    var position = positions_1[_i2];
    var value = styles2["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles2 = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles2);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles2.width), height = toFloat(styles2.height);
  if (styles2.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles2, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles2, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser2) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a4) {
  var x10 = _a4.x, y10 = _a4.y, width = _a4.width, height = _a4.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x10,
    y: y10,
    width,
    height,
    top: y10,
    right: x10 + width,
    bottom: height + y10,
    left: x10
  });
  return rect;
}
function createRectInit(x10, y10, width, height) {
  return {x: x10, y: y10, width, height};
}
var ResizeObservation = function() {
  function ResizeObservation2(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, {target, contentRect});
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    var entries2 = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries2, ctx);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? new WeakMap() : new MapShim();
var ResizeObserver2 = function() {
  function ResizeObserver3(callback) {
    if (!(this instanceof ResizeObserver3)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer2 = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer2);
  }
  return ResizeObserver3;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method) {
  ResizeObserver2.prototype[method] = function() {
    var _a4;
    return (_a4 = observers.get(this))[method].apply(_a4, arguments);
  };
});
var index = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver2;
}();
var ResizeObserver_es_default = index;

// ../../packages/core/dist/index.mjs
var React38 = __toModule(require_react());
var React39 = __toModule(require_react());
var React40 = __toModule(require_react());
var React41 = __toModule(require_react());
var React42 = __toModule(require_react());
var React43 = __toModule(require_react());

// ../../node_modules/perfect-freehand/dist/esm/index.js
function W(e14, t13, u10, x10 = (g10) => g10) {
  return e14 * x10(0.5 - t13 * (0.5 - u10));
}
function re(e14) {
  return [-e14[0], -e14[1]];
}
function l(e14, t13) {
  return [e14[0] + t13[0], e14[1] + t13[1]];
}
function a(e14, t13) {
  return [e14[0] - t13[0], e14[1] - t13[1]];
}
function b(e14, t13) {
  return [e14[0] * t13, e14[1] * t13];
}
function le(e14, t13) {
  return [e14[0] / t13, e14[1] / t13];
}
function R(e14) {
  return [e14[1], -e14[0]];
}
function ne(e14, t13) {
  return e14[0] * t13[0] + e14[1] * t13[1];
}
function oe(e14, t13) {
  return e14[0] === t13[0] && e14[1] === t13[1];
}
function fe(e14) {
  return Math.hypot(e14[0], e14[1]);
}
function be(e14) {
  return e14[0] * e14[0] + e14[1] * e14[1];
}
function Y(e14, t13) {
  return be(a(e14, t13));
}
function H(e14) {
  return le(e14, fe(e14));
}
function ue(e14, t13) {
  return Math.hypot(e14[1] - t13[1], e14[0] - t13[0]);
}
function L(e14, t13, u10) {
  let x10 = Math.sin(u10), g10 = Math.cos(u10), y10 = e14[0] - t13[0], n10 = e14[1] - t13[1], f10 = y10 * g10 - n10 * x10, d10 = y10 * x10 + n10 * g10;
  return [f10 + t13[0], d10 + t13[1]];
}
function V2(e14, t13, u10) {
  return l(e14, b(a(t13, e14), u10));
}
function Z(e14, t13, u10) {
  return l(e14, b(t13, u10));
}
var {min: T, PI: ge} = Math;
var se = 0.275;
var j = ge + 1e-4;
function ie(e14, t13 = {}) {
  let {size: u10 = 16, smoothing: x10 = 0.5, thinning: g10 = 0.5, simulatePressure: y10 = true, easing: n10 = (r12) => r12, start: f10 = {}, end: d10 = {}, last: _17 = false} = t13, {cap: S10 = true, easing: q10 = (r12) => r12 * (2 - r12)} = f10, {cap: C10 = true, easing: p10 = (r12) => --r12 * r12 * r12 + 1} = d10;
  if (e14.length === 0 || u10 <= 0)
    return [];
  let m10 = e14[e14.length - 1].runningLength, h10 = f10.taper === false ? 0 : f10.taper === true ? Math.max(u10, m10) : f10.taper, z10 = d10.taper === false ? 0 : d10.taper === true ? Math.max(u10, m10) : d10.taper, $10 = Math.pow(u10 * x10, 2), D10 = [], M10 = [], N10 = e14.slice(0, 10).reduce((r12, i10) => {
    let o13 = i10.pressure;
    if (y10) {
      let s10 = T(1, i10.distance / u10), J10 = T(1, 1 - s10);
      o13 = T(1, r12 + (J10 - r12) * (s10 * se));
    }
    return (r12 + o13) / 2;
  }, e14[0].pressure), c10 = W(u10, g10, e14[e14.length - 1].pressure, n10), U10, B10 = e14[0].vector, I10 = e14[0].point, F10 = I10, O10 = I10, E10 = F10;
  for (let r12 = 0; r12 < e14.length; r12++) {
    let {pressure: i10} = e14[r12], {point: o13, vector: s10, distance: J10, runningLength: K10} = e14[r12];
    if (r12 < e14.length - 1 && m10 - K10 < 3)
      continue;
    if (g10) {
      if (y10) {
        let v10 = T(1, J10 / u10), Q = T(1, 1 - v10);
        i10 = T(1, N10 + (Q - N10) * (v10 * se));
      }
      c10 = W(u10, g10, i10, n10);
    } else
      c10 = u10 / 2;
    U10 === void 0 && (U10 = c10);
    let ce = K10 < h10 ? q10(K10 / h10) : 1, ae2 = m10 - K10 < z10 ? p10((m10 - K10) / z10) : 1;
    if (c10 = Math.max(0.01, c10 * Math.min(ce, ae2)), r12 === e14.length - 1) {
      let v10 = b(R(s10), c10);
      D10.push(a(o13, v10)), M10.push(l(o13, v10));
      continue;
    }
    let A10 = e14[r12 + 1].vector, ee2 = ne(s10, A10);
    if (ee2 < 0) {
      let v10 = b(R(B10), c10);
      for (let Q = 1 / 13, G10 = 0; G10 <= 1; G10 += Q)
        O10 = L(a(o13, v10), o13, j * G10), D10.push(O10), E10 = L(l(o13, v10), o13, j * -G10), M10.push(E10);
      I10 = O10, F10 = E10;
      continue;
    }
    let te = b(R(V2(A10, s10, ee2)), c10);
    O10 = a(o13, te), (r12 <= 1 || Y(I10, O10) > $10) && (D10.push(O10), I10 = O10), E10 = l(o13, te), (r12 <= 1 || Y(F10, E10) > $10) && (M10.push(E10), F10 = E10), N10 = i10, B10 = s10;
  }
  let k10 = e14[0].point.slice(0, 2), P10 = e14.length > 1 ? e14[e14.length - 1].point.slice(0, 2) : l(e14[0].point, [1, 1]), X10 = [], w10 = [];
  if (e14.length === 1) {
    if (!(h10 || z10) || _17) {
      let r12 = Z(k10, H(R(a(k10, P10))), -(U10 || c10)), i10 = [];
      for (let o13 = 1 / 13, s10 = o13; s10 <= 1; s10 += o13)
        i10.push(L(r12, k10, j * 2 * s10));
      return i10;
    }
  } else {
    if (!(h10 || z10 && e14.length === 1))
      if (S10)
        for (let i10 = 1 / 13, o13 = i10; o13 <= 1; o13 += i10) {
          let s10 = L(M10[0], k10, j * o13);
          X10.push(s10);
        }
      else {
        let i10 = a(D10[0], M10[0]), o13 = b(i10, 0.5), s10 = b(i10, 0.51);
        X10.push(a(k10, o13), a(k10, s10), l(k10, s10), l(k10, o13));
      }
    let r12 = R(re(e14[e14.length - 1].vector));
    if (z10 || h10 && e14.length === 1)
      w10.push(P10);
    else if (C10) {
      let i10 = Z(P10, r12, c10);
      for (let o13 = 1 / 29, s10 = o13; s10 < 1; s10 += o13)
        w10.push(L(i10, P10, j * 3 * s10));
    } else
      w10.push(l(P10, b(r12, c10)), l(P10, b(r12, c10 * 0.99)), a(P10, b(r12, c10 * 0.99)), a(P10, b(r12, c10)));
  }
  return D10.concat(w10, M10.reverse(), X10);
}
function me(e14, t13 = {}) {
  var C10;
  let {streamline: u10 = 0.5, size: x10 = 16, last: g10 = false} = t13;
  if (e14.length === 0)
    return [];
  let y10 = 0.15 + (1 - u10) * 0.85, n10 = Array.isArray(e14[0]) ? e14 : e14.map(({x: p10, y: m10, pressure: h10 = 0.5}) => [p10, m10, h10]);
  if (n10.length === 2) {
    let p10 = n10[1];
    n10 = n10.slice(0, -1);
    for (let m10 = 1; m10 < 5; m10++)
      n10.push(V2(n10[0], p10, m10 / 4));
  }
  n10.length === 1 && (n10 = [...n10, [...l(n10[0], [1, 1]), ...n10[0].slice(2)]]);
  let f10 = [{point: [n10[0][0], n10[0][1]], pressure: n10[0][2] >= 0 ? n10[0][2] : 0.25, vector: [1, 1], distance: 0, runningLength: 0}], d10 = false, _17 = 0, S10 = f10[0], q10 = n10.length - 1;
  for (let p10 = 1; p10 < n10.length; p10++) {
    let m10 = g10 && p10 === q10 ? n10[p10].slice(0, 2) : V2(S10.point, n10[p10], y10);
    if (oe(S10.point, m10))
      continue;
    let h10 = ue(m10, S10.point);
    if (_17 += h10, p10 < q10 && !d10) {
      if (_17 < x10)
        continue;
      d10 = true;
    }
    S10 = {point: m10, pressure: n10[p10][2] >= 0 ? n10[p10][2] : 0.5, vector: H(a(S10.point, m10)), distance: h10, runningLength: _17}, f10.push(S10);
  }
  return f10[0].vector = ((C10 = f10[1]) == null ? void 0 : C10.vector) || [0, 0], f10;
}
function pe(e14, t13 = {}) {
  return ie(me(e14, t13), t13);
}
var Te = pe;

// ../../packages/core/dist/index.mjs
var React46 = __toModule(require_react());
var React47 = __toModule(require_react());

// ../../packages/intersect/dist/index.mjs
var __defProp2 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a10, b10) => {
  for (var prop in b10 || (b10 = {}))
    if (__hasOwnProp2.call(b10, prop))
      __defNormalProp2(a10, prop, b10[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b10)) {
      if (__propIsEnum2.call(b10, prop))
        __defNormalProp2(a10, prop, b10[prop]);
    }
  return a10;
};
var __spreadProps = (a10, b10) => __defProps(a10, __getOwnPropDescs(b10));
function createIntersection(message, ...points) {
  const didIntersect = points.length > 0;
  return {didIntersect, message, points};
}
function getRectangleSides(point, size, rotation = 0) {
  const center = [point[0] + size[0] / 2, point[1] + size[1] / 2];
  const tl2 = e.rotWith(point, center, rotation);
  const tr2 = e.rotWith(e.add(point, [size[0], 0]), center, rotation);
  const br2 = e.rotWith(e.add(point, size), center, rotation);
  const bl2 = e.rotWith(e.add(point, [0, size[1]]), center, rotation);
  return [
    ["top", [tl2, tr2]],
    ["right", [tr2, br2]],
    ["bottom", [br2, bl2]],
    ["left", [bl2, tl2]]
  ];
}
function isAngleBetween(a10, b10, c10) {
  if (c10 === a10 || c10 === b10)
    return true;
  const PI2 = Math.PI * 2;
  const AB2 = (b10 - a10 + PI2) % PI2;
  const AC2 = (c10 - a10 + PI2) % PI2;
  return AB2 <= Math.PI !== AC2 > AB2;
}
function intersectLineLine(AB2, PQ) {
  const slopeAB = e.slope(AB2[0], AB2[1]);
  const slopePQ = e.slope(PQ[0], PQ[1]);
  if (slopeAB === slopePQ)
    return void 0;
  if (Number.isNaN(slopeAB) && !Number.isNaN(slopePQ)) {
    return [AB2[0][0], (AB2[0][0] - PQ[0][0]) * slopePQ + PQ[0][1]];
  }
  if (Number.isNaN(slopePQ) && !Number.isNaN(slopeAB)) {
    return [PQ[0][0], (PQ[0][0] - AB2[0][0]) * slopeAB + AB2[0][1]];
  }
  const x10 = (slopeAB * AB2[0][0] - slopePQ * PQ[0][0] + PQ[0][1] - AB2[0][1]) / (slopeAB - slopePQ);
  const y10 = slopePQ * (x10 - PQ[0][0]) + PQ[0][1];
  return [x10, y10];
}
function intersectRayLineSegment(origin, direction, a12, a23) {
  const [x10, y10] = origin;
  const [dx2, dy2] = direction;
  const [x12, y12] = a12;
  const [x23, y23] = a23;
  if (dy2 / dx2 !== (y23 - y12) / (x23 - x12)) {
    const d10 = dx2 * (y23 - y12) - dy2 * (x23 - x12);
    if (d10 !== 0) {
      const r12 = ((y10 - y12) * (x23 - x12) - (x10 - x12) * (y23 - y12)) / d10;
      const s10 = ((y10 - y12) * dx2 - (x10 - x12) * dy2) / d10;
      if (r12 >= 0 && s10 >= 0 && s10 <= 1) {
        return createIntersection("intersection", [x10 + r12 * dx2, y10 + r12 * dy2]);
      }
    }
  }
  return createIntersection("no intersection");
}
function intersectRayRectangle(origin, direction, point, size, rotation = 0) {
  return intersectRectangleRay(point, size, rotation, origin, direction);
}
function intersectRayEllipse(origin, direction, center, rx2, ry2, rotation) {
  const a12 = origin;
  const a23 = e.mul(direction, 999999999);
  return intersectLineSegmentEllipse(a12, a23, center, rx2, ry2, rotation);
}
function intersectRayBounds(origin, direction, bounds, rotation = 0) {
  const {minX, minY, width, height} = bounds;
  return intersectRayRectangle(origin, direction, [minX, minY], [width, height], rotation);
}
function intersectLineSegmentLineSegment(a12, a23, b12, b23) {
  const AB2 = e.sub(a12, b12);
  const BV = e.sub(b23, b12);
  const AV = e.sub(a23, a12);
  const ua_t = BV[0] * AB2[1] - BV[1] * AB2[0];
  const ub_t = AV[0] * AB2[1] - AV[1] * AB2[0];
  const u_b = BV[1] * AV[0] - BV[0] * AV[1];
  if (ua_t === 0 || ub_t === 0) {
    return createIntersection("coincident");
  }
  if (u_b === 0) {
    return createIntersection("parallel");
  }
  if (u_b !== 0) {
    const ua2 = ua_t / u_b;
    const ub2 = ub_t / u_b;
    if (0 <= ua2 && ua2 <= 1 && 0 <= ub2 && ub2 <= 1) {
      return createIntersection("intersection", e.add(a12, e.mul(AV, ua2)));
    }
  }
  return createIntersection("no intersection");
}
function intersectLineSegmentRectangle(a12, a23, point, size) {
  return intersectRectangleLineSegment(point, size, a12, a23);
}
function intersectLineSegmentArc(a12, a23, center, radius, start, end) {
  const sa2 = e.angle(center, start);
  const ea2 = e.angle(center, end);
  const ellipseTest = intersectEllipseLineSegment(center, radius, radius, 0, a12, a23);
  if (!ellipseTest.didIntersect)
    return createIntersection("no intersection");
  const points = ellipseTest.points.filter((point) => isAngleBetween(sa2, ea2, e.angle(center, point)));
  if (points.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentCircle(a12, a23, c10, r12) {
  const a10 = (a23[0] - a12[0]) * (a23[0] - a12[0]) + (a23[1] - a12[1]) * (a23[1] - a12[1]);
  const b10 = 2 * ((a23[0] - a12[0]) * (a12[0] - c10[0]) + (a23[1] - a12[1]) * (a12[1] - c10[1]));
  const cc2 = c10[0] * c10[0] + c10[1] * c10[1] + a12[0] * a12[0] + a12[1] * a12[1] - 2 * (c10[0] * a12[0] + c10[1] * a12[1]) - r12 * r12;
  const deter = b10 * b10 - 4 * a10 * cc2;
  if (deter < 0) {
    return createIntersection("outside");
  }
  if (deter === 0) {
    return createIntersection("tangent");
  }
  const e14 = Math.sqrt(deter);
  const u12 = (-b10 + e14) / (2 * a10);
  const u23 = (-b10 - e14) / (2 * a10);
  if ((u12 < 0 || u12 > 1) && (u23 < 0 || u23 > 1)) {
    if (u12 < 0 && u23 < 0 || u12 > 1 && u23 > 1) {
      return createIntersection("outside");
    } else {
      return createIntersection("inside");
    }
  }
  const results = [];
  if (0 <= u12 && u12 <= 1)
    results.push(e.lrp(a12, a23, u12));
  if (0 <= u23 && u23 <= 1)
    results.push(e.lrp(a12, a23, u23));
  return createIntersection("intersection", ...results);
}
function intersectLineSegmentEllipse(a12, a23, center, rx2, ry2, rotation = 0) {
  if (rx2 === 0 || ry2 === 0 || e.isEqual(a12, a23)) {
    return createIntersection("no intersection");
  }
  rx2 = rx2 < 0 ? rx2 : -rx2;
  ry2 = ry2 < 0 ? ry2 : -ry2;
  a12 = e.sub(e.rotWith(a12, center, -rotation), center);
  a23 = e.sub(e.rotWith(a23, center, -rotation), center);
  const diff = e.sub(a23, a12);
  const A10 = diff[0] * diff[0] / rx2 / rx2 + diff[1] * diff[1] / ry2 / ry2;
  const B10 = 2 * a12[0] * diff[0] / rx2 / rx2 + 2 * a12[1] * diff[1] / ry2 / ry2;
  const C10 = a12[0] * a12[0] / rx2 / rx2 + a12[1] * a12[1] / ry2 / ry2 - 1;
  const tValues = [];
  const discriminant = B10 * B10 - 4 * A10 * C10;
  if (discriminant === 0) {
    tValues.push(-B10 / 2 / A10);
  } else if (discriminant > 0) {
    const root2 = Math.sqrt(discriminant);
    tValues.push((-B10 + root2) / 2 / A10);
    tValues.push((-B10 - root2) / 2 / A10);
  }
  const points = tValues.filter((t13) => t13 >= 0 && t13 <= 1).map((t13) => e.add(center, e.add(a12, e.mul(e.sub(a23, a12), t13)))).map((p10) => e.rotWith(p10, center, rotation));
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentBounds(a12, a23, bounds) {
  return intersectBoundsLineSegment(bounds, a12, a23);
}
function intersectLineSegmentPolyline(a12, a23, points) {
  const pts = [];
  for (let i10 = 1; i10 < points.length; i10++) {
    const int = intersectLineSegmentLineSegment(a12, a23, points[i10 - 1], points[i10]);
    if (int) {
      pts.push(...int.points);
    }
  }
  if (pts.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentPolygon(a12, a23, points) {
  const pts = [];
  for (let i10 = 1; i10 < points.length + 1; i10++) {
    const int = intersectLineSegmentLineSegment(a12, a23, points[i10 - 1], points[i10 % points.length]);
    if (int) {
      pts.push(...int.points);
    }
  }
  if (pts.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectRectangleRay(point, size, rotation, origin, direction) {
  const sideIntersections = getRectangleSides(point, size, rotation).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectRayLineSegment(origin, direction, a12, a23);
    if (intersection) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleLineSegment(point, size, a12, a23) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [b12, b23]]) => {
    const intersection = intersectLineSegmentLineSegment(a12, a23, b12, b23);
    if (intersection) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleRectangle(point1, size1, point2, size2) {
  const sideIntersections = getRectangleSides(point1, size1).reduce((acc, [message, [a12, a23]]) => {
    const intersections = intersectRectangleLineSegment(point2, size2, a12, a23);
    acc.push(...intersections.map((int) => createIntersection(`${message} ${int.message}`, ...int.points)));
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleArc(point, size, center, radius, start, end) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectArcLineSegment(center, radius, start, end, a12, a23);
    if (intersection) {
      acc.push(__spreadProps(__spreadValues({}, intersection), {message}));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleCircle(point, size, c10, r12) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectLineSegmentCircle(a12, a23, c10, r12);
    if (intersection) {
      acc.push(__spreadProps(__spreadValues({}, intersection), {message}));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleEllipse(point, size, c10, rx2, ry2, rotation = 0) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectLineSegmentEllipse(a12, a23, c10, rx2, ry2, rotation);
    if (intersection) {
      acc.push(__spreadProps(__spreadValues({}, intersection), {message}));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectanglePolyline(point, size, points) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectLineSegmentPolyline(a12, a23, points);
    if (intersection.didIntersect) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectanglePolygon(point, size, points) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a12, a23]]) => {
    const intersection = intersectLineSegmentPolygon(a12, a23, points);
    if (intersection.didIntersect) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectArcLineSegment(center, radius, start, end, a12, a23) {
  return intersectLineSegmentArc(a12, a23, center, radius, start, end);
}
function intersectArcRectangle(center, radius, start, end, point, size) {
  return intersectRectangleArc(point, size, center, radius, start, end);
}
function intersectArcBounds(center, radius, start, end, bounds) {
  const {minX, minY, width, height} = bounds;
  return intersectArcRectangle(center, radius, start, end, [minX, minY], [width, height]);
}
function intersectCircleLineSegment(c10, r12, a12, a23) {
  return intersectLineSegmentCircle(a12, a23, c10, r12);
}
function intersectCircleCircle(c12, r12, c23, r23) {
  let dx2 = c23[0] - c12[0], dy2 = c23[1] - c12[1];
  const d10 = Math.sqrt(dx2 * dx2 + dy2 * dy2), x10 = (d10 * d10 - r23 * r23 + r12 * r12) / (2 * d10), y10 = Math.sqrt(r12 * r12 - x10 * x10);
  dx2 /= d10;
  dy2 /= d10;
  return createIntersection("intersection", [c12[0] + dx2 * x10 - dy2 * y10, c12[1] + dy2 * x10 + dx2 * y10], [c12[0] + dx2 * x10 + dy2 * y10, c12[1] + dy2 * x10 - dx2 * y10]);
}
function intersectEllipseLineSegment(center, rx2, ry2, rotation = 0, a12, a23) {
  if (rx2 === ry2) {
    return intersectLineSegmentCircle(a12, a23, center, rx2);
  }
  return intersectLineSegmentEllipse(a12, a23, center, rx2, ry2, rotation);
}
function intersectEllipseRectangle(center, rx2, ry2, rotation = 0, point, size) {
  if (rx2 === ry2) {
    return intersectRectangleCircle(point, size, center, rx2);
  }
  return intersectRectangleEllipse(point, size, center, rx2, ry2, rotation);
}
function intersectEllipseBounds(c10, rx2, ry2, rotation, bounds) {
  const {minX, minY, width, height} = bounds;
  return intersectEllipseRectangle(c10, rx2, ry2, rotation, [minX, minY], [width, height]);
}
function intersectBoundsLineSegment(bounds, a12, a23) {
  const {minX, minY, width, height} = bounds;
  return intersectLineSegmentRectangle(a12, a23, [minX, minY], [width, height]);
}
function intersectBoundsBounds(bounds1, bounds2) {
  return intersectRectangleRectangle([bounds1.minX, bounds1.minY], [bounds1.width, bounds1.height], [bounds2.minX, bounds2.minY], [bounds2.width, bounds2.height]);
}
function intersectBoundsPolyline(bounds, points) {
  return intersectPolylineBounds(points, bounds);
}
function intersectBoundsPolygon(bounds, points) {
  return intersectPolygonBounds(points, bounds);
}
function intersectPolylineBounds(points, bounds) {
  return intersectRectanglePolyline([bounds.minX, bounds.minY], [bounds.width, bounds.height], points);
}
function intersectPolygonBounds(points, bounds) {
  return intersectRectanglePolygon([bounds.minX, bounds.minY], [bounds.width, bounds.height], points);
}

// ../../packages/core/dist/index.mjs
var __defProp3 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp3(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues2 = (a10, b10) => {
  for (var prop in b10 || (b10 = {}))
    if (__hasOwnProp3.call(b10, prop))
      __defNormalProp3(a10, prop, b10[prop]);
  if (__getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(b10)) {
      if (__propIsEnum3.call(b10, prop))
        __defNormalProp3(a10, prop, b10[prop]);
    }
  return a10;
};
var __spreadProps2 = (a10, b10) => __defProps2(a10, __getOwnPropDescs2(b10));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp3.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum3.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var TLContext = React3.createContext({});
function useTLContext() {
  const context = React3.useContext(TLContext);
  return context;
}
var TLBoundsCorner = /* @__PURE__ */ ((TLBoundsCorner2) => {
  TLBoundsCorner2["TopLeft"] = "top_left_corner";
  TLBoundsCorner2["TopRight"] = "top_right_corner";
  TLBoundsCorner2["BottomRight"] = "bottom_right_corner";
  TLBoundsCorner2["BottomLeft"] = "bottom_left_corner";
  return TLBoundsCorner2;
})(TLBoundsCorner || {});
if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function(str, newStr) {
    if (Object.prototype.toString.call(str).toLowerCase() === "[object regexp]") {
      return this.replace(str, newStr);
    }
    return this.replace(new RegExp(str, "g"), newStr);
  };
}
var TAU = Math.PI * 2;
var _Utils = class {
  static lerp(y12, y23, mu) {
    mu = _Utils.clamp(mu, 0, 1);
    return y12 * (1 - mu) + y23 * mu;
  }
  static lerpColor(color1, color2, factor = 0.5) {
    function h2r(hex) {
      const result2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return [parseInt(result2[1], 16), parseInt(result2[2], 16), parseInt(result2[3], 16)];
    }
    function r2h(rgb) {
      return "#" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);
    }
    const c12 = h2r(color1) || [0, 0, 0];
    const c23 = h2r(color2) || [0, 0, 0];
    const result = c12.slice();
    for (let i10 = 0; i10 < 3; i10++) {
      result[i10] = Math.round(result[i10] + factor * (c23[i10] - c12[i10]));
    }
    return r2h(result);
  }
  static modulate(value, rangeA, rangeB, clamp2 = false) {
    const [fromLow, fromHigh] = rangeA;
    const [v02, v12] = rangeB;
    const result = v02 + (value - fromLow) / (fromHigh - fromLow) * (v12 - v02);
    return clamp2 ? v02 < v12 ? Math.max(Math.min(result, v12), v02) : Math.max(Math.min(result, v02), v12) : result;
  }
  static clamp(n10, min, max) {
    return Math.max(min, typeof max !== "undefined" ? Math.min(n10, max) : n10);
  }
  static deepClone(obj) {
    if (obj === null)
      return obj;
    if (Array.isArray(obj)) {
      return [...obj];
    }
    if (typeof obj === "object") {
      const clone = __spreadValues2({}, obj);
      Object.keys(clone).forEach((key) => clone[key] = typeof obj[key] === "object" ? _Utils.deepClone(obj[key]) : obj[key]);
      return clone;
    }
    return obj;
  }
  static rng(seed = "") {
    let x10 = 0;
    let y10 = 0;
    let z10 = 0;
    let w10 = 0;
    function next() {
      const t13 = x10 ^ x10 << 11;
      x10 = y10;
      y10 = z10;
      z10 = w10;
      w10 ^= (w10 >>> 19 ^ t13 ^ t13 >>> 8) >>> 0;
      return w10 / 4294967296;
    }
    for (let k10 = 0; k10 < seed.length + 64; k10++) {
      x10 ^= seed.charCodeAt(k10) | 0;
      next();
    }
    return next;
  }
  static pointsToLineSegments(points, closed = false) {
    const segments = [];
    for (let i10 = 1; i10 < points.length; i10++)
      segments.push([points[i10 - 1], points[i10]]);
    if (closed)
      segments.push([points[points.length - 1], points[0]]);
    return segments;
  }
  static getRectangleSides(point, size, rotation = 0) {
    const center = [point[0] + size[0] / 2, point[1] + size[1] / 2];
    const tl2 = e.rotWith(point, center, rotation);
    const tr2 = e.rotWith(e.add(point, [size[0], 0]), center, rotation);
    const br2 = e.rotWith(e.add(point, size), center, rotation);
    const bl2 = e.rotWith(e.add(point, [0, size[1]]), center, rotation);
    return [
      ["top", [tl2, tr2]],
      ["right", [tr2, br2]],
      ["bottom", [br2, bl2]],
      ["left", [bl2, tl2]]
    ];
  }
  static circleFromThreePoints(A10, B10, C10) {
    const [x12, y12] = A10;
    const [x23, y23] = B10;
    const [x33, y33] = C10;
    const a10 = x12 * (y23 - y33) - y12 * (x23 - x33) + x23 * y33 - x33 * y23;
    const b10 = (x12 * x12 + y12 * y12) * (y33 - y23) + (x23 * x23 + y23 * y23) * (y12 - y33) + (x33 * x33 + y33 * y33) * (y23 - y12);
    const c10 = (x12 * x12 + y12 * y12) * (x23 - x33) + (x23 * x23 + y23 * y23) * (x33 - x12) + (x33 * x33 + y33 * y33) * (x12 - x23);
    const x10 = -b10 / (2 * a10);
    const y10 = -c10 / (2 * a10);
    return [x10, y10, Math.hypot(x10 - x12, y10 - y12)];
  }
  static perimeterOfEllipse(rx2, ry2) {
    const h10 = Math.pow(rx2 - ry2, 2) / Math.pow(rx2 + ry2, 2);
    const p10 = Math.PI * (rx2 + ry2) * (1 + 3 * h10 / (10 + Math.sqrt(4 - 3 * h10)));
    return p10;
  }
  static shortAngleDist(a02, a12) {
    const max = Math.PI * 2;
    const da2 = (a12 - a02) % max;
    return 2 * da2 % max - da2;
  }
  static longAngleDist(a02, a12) {
    return Math.PI * 2 - _Utils.shortAngleDist(a02, a12);
  }
  static lerpAngles(a02, a12, t13) {
    return a02 + _Utils.shortAngleDist(a02, a12) * t13;
  }
  static angleDelta(a02, a12) {
    return _Utils.shortAngleDist(a02, a12);
  }
  static getSweep(C10, A10, B10) {
    return _Utils.angleDelta(e.angle(C10, A10), e.angle(C10, B10));
  }
  static clampRadians(r12) {
    return (Math.PI * 2 + r12) % (Math.PI * 2);
  }
  static snapAngleToSegments(r12, segments) {
    const seg = Math.PI * 2 / segments;
    return Math.floor((_Utils.clampRadians(r12) + seg / 2) / seg) * seg;
  }
  static isAngleBetween(a10, b10, c10) {
    if (c10 === a10 || c10 === b10)
      return true;
    const AB2 = (b10 - a10 + TAU) % TAU;
    const AC2 = (c10 - a10 + TAU) % TAU;
    return AB2 <= Math.PI !== AC2 > AB2;
  }
  static degreesToRadians(d10) {
    return d10 * Math.PI / 180;
  }
  static radiansToDegrees(r12) {
    return r12 * 180 / Math.PI;
  }
  static getArcLength(C10, r12, A10, B10) {
    const sweep = _Utils.getSweep(C10, A10, B10);
    return r12 * (2 * Math.PI) * (sweep / (2 * Math.PI));
  }
  static getSweepFlag(A10, B10, C10) {
    const angleAC = e.angle(A10, C10);
    const angleAB = e.angle(A10, B10);
    const angleCAB = (angleAB - angleAC + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
    return angleCAB > 0 ? 0 : 1;
  }
  static getLargeArcFlag(A10, C10, P10) {
    const anglePA = e.angle(P10, A10);
    const anglePC = e.angle(P10, C10);
    const angleAPC = (anglePC - anglePA + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
    return Math.abs(angleAPC) > Math.PI / 2 ? 0 : 1;
  }
  static getArcDashOffset(C10, r12, A10, B10, step) {
    const del0 = _Utils.getSweepFlag(C10, A10, B10);
    const len0 = _Utils.getArcLength(C10, r12, A10, B10);
    const off0 = del0 < 0 ? len0 : 2 * Math.PI * C10[2] - len0;
    return -off0 / 2 + step;
  }
  static getEllipseDashOffset(A10, step) {
    const c10 = 2 * Math.PI * A10[2];
    return -c10 / 2 + -step;
  }
  static pointInCircle(A10, C10, r12) {
    return e.dist(A10, C10) <= r12;
  }
  static pointInEllipse(A10, C10, rx2, ry2, rotation = 0) {
    rotation = rotation || 0;
    const cos = Math.cos(rotation);
    const sin = Math.sin(rotation);
    const delta = e.sub(A10, C10);
    const tdx = cos * delta[0] + sin * delta[1];
    const tdy = sin * delta[0] - cos * delta[1];
    return tdx * tdx / (rx2 * rx2) + tdy * tdy / (ry2 * ry2) <= 1;
  }
  static pointInRect(point, size) {
    return !(point[0] < size[0] || point[0] > point[0] + size[0] || point[1] < size[1] || point[1] > point[1] + size[1]);
  }
  static pointInPolygon(p10, points) {
    let wn2 = 0;
    points.forEach((a10, i10) => {
      const b10 = points[(i10 + 1) % points.length];
      if (a10[1] <= p10[1]) {
        if (b10[1] > p10[1] && e.cross(a10, b10, p10) > 0) {
          wn2 += 1;
        }
      } else if (b10[1] <= p10[1] && e.cross(a10, b10, p10) < 0) {
        wn2 -= 1;
      }
    });
    return wn2 !== 0;
  }
  static pointInBounds(A10, b10) {
    return !(A10[0] < b10.minX || A10[0] > b10.maxX || A10[1] < b10.minY || A10[1] > b10.maxY);
  }
  static pointInPolyline(A10, points, distance = 3) {
    for (let i10 = 1; i10 < points.length; i10++) {
      if (e.distanceToLineSegment(points[i10 - 1], points[i10], A10) < distance) {
        return true;
      }
    }
    return false;
  }
  static getBoundsSides(bounds) {
    return this.getRectangleSides([bounds.minX, bounds.minY], [bounds.width, bounds.height]);
  }
  static expandBounds(bounds, delta) {
    return {
      minX: bounds.minX - delta,
      minY: bounds.minY - delta,
      maxX: bounds.maxX + delta,
      maxY: bounds.maxY + delta,
      width: bounds.width + delta * 2,
      height: bounds.height + delta * 2
    };
  }
  static boundsCollide(a10, b10) {
    return !(a10.maxX < b10.minX || a10.minX > b10.maxX || a10.maxY < b10.minY || a10.minY > b10.maxY);
  }
  static boundsContain(a10, b10) {
    return a10.minX < b10.minX && a10.minY < b10.minY && a10.maxY > b10.maxY && a10.maxX > b10.maxX;
  }
  static boundsContained(a10, b10) {
    return _Utils.boundsContain(b10, a10);
  }
  static boundsAreEqual(a10, b10) {
    return !(b10.maxX !== a10.maxX || b10.minX !== a10.minX || b10.maxY !== a10.maxY || b10.minY !== a10.minY);
  }
  static getBoundsFromPoints(points, rotation = 0) {
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    if (points.length < 2) {
      minX = 0;
      minY = 0;
      maxX = 1;
      maxY = 1;
    } else {
      for (const [x10, y10] of points) {
        minX = Math.min(x10, minX);
        minY = Math.min(y10, minY);
        maxX = Math.max(x10, maxX);
        maxY = Math.max(y10, maxY);
      }
    }
    if (rotation !== 0) {
      return _Utils.getBoundsFromPoints(points.map((pt2) => e.rotWith(pt2, [(minX + maxX) / 2, (minY + maxY) / 2], rotation)));
    }
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: Math.max(1, maxX - minX),
      height: Math.max(1, maxY - minY)
    };
  }
  static centerBounds(bounds, point) {
    const boundsCenter = this.getBoundsCenter(bounds);
    const dx2 = point[0] - boundsCenter[0];
    const dy2 = point[1] - boundsCenter[1];
    return this.translateBounds(bounds, [dx2, dy2]);
  }
  static snapBoundsToGrid(bounds, gridSize) {
    const minX = Math.round(bounds.minX / gridSize) * gridSize;
    const minY = Math.round(bounds.minY / gridSize) * gridSize;
    const maxX = Math.round(bounds.maxX / gridSize) * gridSize;
    const maxY = Math.round(bounds.maxY / gridSize) * gridSize;
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: Math.max(1, maxX - minX),
      height: Math.max(1, maxY - minY)
    };
  }
  static translateBounds(bounds, delta) {
    return {
      minX: bounds.minX + delta[0],
      minY: bounds.minY + delta[1],
      maxX: bounds.maxX + delta[0],
      maxY: bounds.maxY + delta[1],
      width: bounds.width,
      height: bounds.height
    };
  }
  static rotateBounds(bounds, center, rotation) {
    const [minX, minY] = e.rotWith([bounds.minX, bounds.minY], center, rotation);
    const [maxX, maxY] = e.rotWith([bounds.maxX, bounds.maxY], center, rotation);
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: bounds.width,
      height: bounds.height
    };
  }
  static getRotatedEllipseBounds(x10, y10, rx2, ry2, rotation = 0) {
    const c10 = Math.cos(rotation);
    const s10 = Math.sin(rotation);
    const w10 = Math.hypot(rx2 * c10, ry2 * s10);
    const h10 = Math.hypot(rx2 * s10, ry2 * c10);
    return {
      minX: x10 + rx2 - w10,
      minY: y10 + ry2 - h10,
      maxX: x10 + rx2 + w10,
      maxY: y10 + ry2 + h10,
      width: w10 * 2,
      height: h10 * 2
    };
  }
  static getExpandedBounds(a10, b10) {
    const minX = Math.min(a10.minX, b10.minX);
    const minY = Math.min(a10.minY, b10.minY);
    const maxX = Math.max(a10.maxX, b10.maxX);
    const maxY = Math.max(a10.maxY, b10.maxY);
    const width = Math.abs(maxX - minX);
    const height = Math.abs(maxY - minY);
    return {minX, minY, maxX, maxY, width, height};
  }
  static getCommonBounds(bounds) {
    if (bounds.length < 2)
      return bounds[0];
    let result = bounds[0];
    for (let i10 = 1; i10 < bounds.length; i10++) {
      result = _Utils.getExpandedBounds(result, bounds[i10]);
    }
    return result;
  }
  static getRotatedCorners(b10, rotation = 0) {
    const center = [b10.minX + b10.width / 2, b10.minY + b10.height / 2];
    return [
      [b10.minX, b10.minY],
      [b10.maxX, b10.minY],
      [b10.maxX, b10.maxY],
      [b10.minX, b10.maxY]
    ].map((point) => e.rotWith(point, center, rotation));
  }
  static getTransformedBoundingBox(bounds, handle, delta, rotation = 0, isAspectRatioLocked = false) {
    const [ax0, ay0] = [bounds.minX, bounds.minY];
    const [ax1, ay1] = [bounds.maxX, bounds.maxY];
    let [bx0, by0] = [bounds.minX, bounds.minY];
    let [bx1, by1] = [bounds.maxX, bounds.maxY];
    if (handle === "center") {
      return {
        minX: bx0 + delta[0],
        minY: by0 + delta[1],
        maxX: bx1 + delta[0],
        maxY: by1 + delta[1],
        width: bx1 - bx0,
        height: by1 - by0,
        scaleX: 1,
        scaleY: 1
      };
    }
    const [dx2, dy2] = e.rot(delta, -rotation);
    switch (handle) {
      case "top_edge":
      case "top_left_corner":
      case "top_right_corner": {
        by0 += dy2;
        break;
      }
      case "bottom_edge":
      case "bottom_left_corner":
      case "bottom_right_corner": {
        by1 += dy2;
        break;
      }
    }
    switch (handle) {
      case "left_edge":
      case "top_left_corner":
      case "bottom_left_corner": {
        bx0 += dx2;
        break;
      }
      case "right_edge":
      case "top_right_corner":
      case "bottom_right_corner": {
        bx1 += dx2;
        break;
      }
    }
    const aw2 = ax1 - ax0;
    const ah2 = ay1 - ay0;
    const scaleX = (bx1 - bx0) / aw2;
    const scaleY = (by1 - by0) / ah2;
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    const bw2 = Math.abs(bx1 - bx0);
    const bh2 = Math.abs(by1 - by0);
    if (isAspectRatioLocked) {
      const ar2 = aw2 / ah2;
      const isTall = ar2 < bw2 / bh2;
      const tw2 = bw2 * (scaleY < 0 ? 1 : -1) * (1 / ar2);
      const th2 = bh2 * (scaleX < 0 ? 1 : -1) * ar2;
      switch (handle) {
        case "top_left_corner": {
          if (isTall)
            by0 = by1 + tw2;
          else
            bx0 = bx1 + th2;
          break;
        }
        case "top_right_corner": {
          if (isTall)
            by0 = by1 + tw2;
          else
            bx1 = bx0 - th2;
          break;
        }
        case "bottom_right_corner": {
          if (isTall)
            by1 = by0 - tw2;
          else
            bx1 = bx0 - th2;
          break;
        }
        case "bottom_left_corner": {
          if (isTall)
            by1 = by0 - tw2;
          else
            bx0 = bx1 + th2;
          break;
        }
        case "bottom_edge":
        case "top_edge": {
          const m10 = (bx0 + bx1) / 2;
          const w10 = bh2 * ar2;
          bx0 = m10 - w10 / 2;
          bx1 = m10 + w10 / 2;
          break;
        }
        case "left_edge":
        case "right_edge": {
          const m10 = (by0 + by1) / 2;
          const h10 = bw2 / ar2;
          by0 = m10 - h10 / 2;
          by1 = m10 + h10 / 2;
          break;
        }
      }
    }
    if (rotation % (Math.PI * 2) !== 0) {
      let cv2 = [0, 0];
      const c02 = e.med([ax0, ay0], [ax1, ay1]);
      const c12 = e.med([bx0, by0], [bx1, by1]);
      switch (handle) {
        case "top_left_corner": {
          cv2 = e.sub(e.rotWith([bx1, by1], c12, rotation), e.rotWith([ax1, ay1], c02, rotation));
          break;
        }
        case "top_right_corner": {
          cv2 = e.sub(e.rotWith([bx0, by1], c12, rotation), e.rotWith([ax0, ay1], c02, rotation));
          break;
        }
        case "bottom_right_corner": {
          cv2 = e.sub(e.rotWith([bx0, by0], c12, rotation), e.rotWith([ax0, ay0], c02, rotation));
          break;
        }
        case "bottom_left_corner": {
          cv2 = e.sub(e.rotWith([bx1, by0], c12, rotation), e.rotWith([ax1, ay0], c02, rotation));
          break;
        }
        case "top_edge": {
          cv2 = e.sub(e.rotWith(e.med([bx0, by1], [bx1, by1]), c12, rotation), e.rotWith(e.med([ax0, ay1], [ax1, ay1]), c02, rotation));
          break;
        }
        case "left_edge": {
          cv2 = e.sub(e.rotWith(e.med([bx1, by0], [bx1, by1]), c12, rotation), e.rotWith(e.med([ax1, ay0], [ax1, ay1]), c02, rotation));
          break;
        }
        case "bottom_edge": {
          cv2 = e.sub(e.rotWith(e.med([bx0, by0], [bx1, by0]), c12, rotation), e.rotWith(e.med([ax0, ay0], [ax1, ay0]), c02, rotation));
          break;
        }
        case "right_edge": {
          cv2 = e.sub(e.rotWith(e.med([bx0, by0], [bx0, by1]), c12, rotation), e.rotWith(e.med([ax0, ay0], [ax0, ay1]), c02, rotation));
          break;
        }
      }
      ;
      [bx0, by0] = e.sub([bx0, by0], cv2);
      [bx1, by1] = e.sub([bx1, by1], cv2);
    }
    if (bx1 < bx0) {
      ;
      [bx1, bx0] = [bx0, bx1];
    }
    if (by1 < by0) {
      ;
      [by1, by0] = [by0, by1];
    }
    return {
      minX: bx0,
      minY: by0,
      maxX: bx1,
      maxY: by1,
      width: bx1 - bx0,
      height: by1 - by0,
      scaleX: (bx1 - bx0) / (ax1 - ax0 || 1) * (flipX ? -1 : 1),
      scaleY: (by1 - by0) / (ay1 - ay0 || 1) * (flipY ? -1 : 1)
    };
  }
  static getTransformAnchor(type, isFlippedX, isFlippedY) {
    let anchor = type;
    switch (type) {
      case "top_left_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "bottom_right_corner";
        } else if (isFlippedX) {
          anchor = "top_right_corner";
        } else if (isFlippedY) {
          anchor = "bottom_left_corner";
        } else {
          anchor = "bottom_right_corner";
        }
        break;
      }
      case "top_right_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "bottom_left_corner";
        } else if (isFlippedX) {
          anchor = "top_left_corner";
        } else if (isFlippedY) {
          anchor = "bottom_right_corner";
        } else {
          anchor = "bottom_left_corner";
        }
        break;
      }
      case "bottom_right_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "top_left_corner";
        } else if (isFlippedX) {
          anchor = "bottom_left_corner";
        } else if (isFlippedY) {
          anchor = "top_right_corner";
        } else {
          anchor = "top_left_corner";
        }
        break;
      }
      case "bottom_left_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "top_right_corner";
        } else if (isFlippedX) {
          anchor = "bottom_right_corner";
        } else if (isFlippedY) {
          anchor = "top_left_corner";
        } else {
          anchor = "top_right_corner";
        }
        break;
      }
    }
    return anchor;
  }
  static getRelativeTransformedBoundingBox(bounds, initialBounds, initialShapeBounds, isFlippedX, isFlippedY) {
    const nx2 = (isFlippedX ? initialBounds.maxX - initialShapeBounds.maxX : initialShapeBounds.minX - initialBounds.minX) / initialBounds.width;
    const ny2 = (isFlippedY ? initialBounds.maxY - initialShapeBounds.maxY : initialShapeBounds.minY - initialBounds.minY) / initialBounds.height;
    const nw2 = initialShapeBounds.width / initialBounds.width;
    const nh2 = initialShapeBounds.height / initialBounds.height;
    const minX = bounds.minX + bounds.width * nx2;
    const minY = bounds.minY + bounds.height * ny2;
    const width = bounds.width * nw2;
    const height = bounds.height * nh2;
    return {
      minX,
      minY,
      maxX: minX + width,
      maxY: minY + height,
      width,
      height
    };
  }
  static getRotatedSize(size, rotation) {
    const center = e.div(size, 2);
    const points = [[0, 0], [size[0], 0], size, [0, size[1]]].map((point) => e.rotWith(point, center, rotation));
    const bounds = _Utils.getBoundsFromPoints(points);
    return [bounds.width, bounds.height];
  }
  static getBoundsCenter(bounds) {
    return [bounds.minX + bounds.width / 2, bounds.minY + bounds.height / 2];
  }
  static getBoundsWithCenter(bounds) {
    const center = _Utils.getBoundsCenter(bounds);
    return __spreadProps2(__spreadValues2({}, bounds), {
      midX: center[0],
      midY: center[1]
    });
  }
  static getCommonTopLeft(points) {
    const min = [Infinity, Infinity];
    points.forEach((point) => {
      min[0] = Math.min(min[0], point[0]);
      min[1] = Math.min(min[1], point[1]);
    });
    return min;
  }
  static getFromCache(cache, item, getNext) {
    let value = cache.get(item);
    if (value === void 0) {
      cache.set(item, getNext());
      value = cache.get(item);
      if (value === void 0) {
        throw Error("Cache did not include item!");
      }
    }
    return value;
  }
  static uniqueId(a10 = "") {
    return a10 ? ((Number(a10) ^ Math.random() * 16) >> Number(a10) / 4).toString(16) : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, _Utils.uniqueId);
  }
  static rotateArray(arr, offset) {
    return arr.map((_17, i10) => arr[(i10 + offset) % arr.length]);
  }
  static debounce(fn, ms2 = 0) {
    let timeoutId;
    return function(...args) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => fn.apply(args), ms2);
    };
  }
  static getSvgPathFromStroke(points, closed = true) {
    if (!points.length) {
      return "";
    }
    const max = points.length - 1;
    return points.reduce((acc, point, i10, arr) => {
      if (i10 === max) {
        if (closed)
          acc.push("Z");
      } else
        acc.push(point, e.med(point, arr[i10 + 1]));
      return acc;
    }, ["M", points[0], "Q"]).join(" ").replaceAll(this.TRIM_NUMBERS, "$1");
  }
  static getPerfectDashProps(length, strokeWidth, style, snap = 1, outset = true, lengthRatio = 2) {
    let dashLength;
    let strokeDashoffset;
    let ratio;
    if (style.toLowerCase() === "dashed") {
      dashLength = strokeWidth * lengthRatio;
      ratio = 1;
      strokeDashoffset = outset ? (dashLength / 2).toString() : "0";
    } else if (style.toLowerCase() === "dotted") {
      dashLength = strokeWidth / 100;
      ratio = 100;
      strokeDashoffset = "0";
    } else {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
    let dashes = Math.floor(length / dashLength / (2 * ratio));
    dashes -= dashes % snap;
    dashes = Math.max(dashes, 4);
    const gapLength = Math.max(dashLength, (length - dashes * dashLength) / (outset ? dashes : dashes - 1));
    return {
      strokeDasharray: [dashLength, gapLength].join(" "),
      strokeDashoffset
    };
  }
  static isMobileSize() {
    if (typeof window === "undefined")
      return false;
    return window.innerWidth < 768;
  }
  static isMobileSafari() {
    if (typeof window === "undefined")
      return false;
    const ua2 = window.navigator.userAgent;
    const iOS = !!ua2.match(/iPad/i) || !!ua2.match(/iPhone/i);
    const webkit = !!ua2.match(/WebKit/i);
    return iOS && webkit && !ua2.match(/CriOS/i);
  }
  static throttle(func, limit) {
    let inThrottle;
    let lastResult;
    return function(...args) {
      if (!inThrottle) {
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
        lastResult = func(...args);
      }
      return lastResult;
    };
  }
  static isDarwin() {
    return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
  }
  static metaKey(e14) {
    return _Utils.isDarwin() ? e14.metaKey : e14.ctrlKey;
  }
  static lns(str) {
    const result = str.split("");
    result.push(...result.splice(0, Math.round(result.length / 5)));
    result.push(...result.splice(0, Math.round(result.length / 4)));
    result.push(...result.splice(0, Math.round(result.length / 3)));
    result.push(...result.splice(0, Math.round(result.length / 2)));
    return result.reverse().map((n10) => +n10 ? +n10 < 5 ? 5 + +n10 : +n10 > 5 ? +n10 - 5 : n10 : n10).join("");
  }
};
var Utils = _Utils;
__publicField(Utils, "getSnapPoints", (bounds, others, snapDistance) => {
  const A10 = __spreadValues2({}, bounds);
  const offset = [0, 0];
  const snapLines = [];
  const snaps = {
    ["minX"]: {id: "minX", isSnapped: false},
    ["midX"]: {id: "midX", isSnapped: false},
    ["maxX"]: {id: "maxX", isSnapped: false},
    ["minY"]: {id: "minY", isSnapped: false},
    ["midY"]: {id: "midY", isSnapped: false},
    ["maxY"]: {id: "maxY", isSnapped: false}
  };
  const xs2 = ["midX", "minX", "maxX"];
  const ys2 = ["midY", "minY", "maxY"];
  const snapResults = others.map((B10) => {
    const rx2 = xs2.flatMap((f10, i10) => xs2.map((t13, k10) => {
      const gap = A10[f10] - B10[t13];
      const distance = Math.abs(gap);
      return {
        f: f10,
        t: t13,
        gap,
        distance,
        isCareful: i10 === 0 || i10 + k10 === 3
      };
    }));
    const ry2 = ys2.flatMap((f10, i10) => ys2.map((t13, k10) => {
      const gap = A10[f10] - B10[t13];
      const distance = Math.abs(gap);
      return {
        f: f10,
        t: t13,
        gap,
        distance,
        isCareful: i10 === 0 || i10 + k10 === 3
      };
    }));
    return [B10, rx2, ry2];
  });
  let gapX = Infinity;
  let gapY = Infinity;
  let minX = Infinity;
  let minY = Infinity;
  snapResults.forEach(([_17, rx2, ry2]) => {
    rx2.forEach((r12) => {
      if (r12.distance < snapDistance && r12.distance < minX) {
        minX = r12.distance;
        gapX = r12.gap;
      }
    });
    ry2.forEach((r12) => {
      if (r12.distance < snapDistance && r12.distance < minY) {
        minY = r12.distance;
        gapY = r12.gap;
      }
    });
  });
  snapResults.forEach(([B10, rx2, ry2]) => {
    if (gapX !== Infinity) {
      rx2.forEach((r12) => {
        if (Math.abs(r12.gap - gapX) < 2) {
          snaps[r12.f] = __spreadProps2(__spreadValues2({}, snaps[r12.f]), {
            isSnapped: true,
            to: B10[r12.t],
            B: B10,
            distance: r12.distance
          });
        }
      });
    }
    if (gapY !== Infinity) {
      ry2.forEach((r12) => {
        if (Math.abs(r12.gap - gapY) < 2) {
          snaps[r12.f] = __spreadProps2(__spreadValues2({}, snaps[r12.f]), {
            isSnapped: true,
            to: B10[r12.t],
            B: B10,
            distance: r12.distance
          });
        }
      });
    }
  });
  offset[0] = gapX === Infinity ? 0 : gapX;
  offset[1] = gapY === Infinity ? 0 : gapY;
  A10.minX -= offset[0];
  A10.midX -= offset[0];
  A10.maxX -= offset[0];
  A10.minY -= offset[1];
  A10.midY -= offset[1];
  A10.maxY -= offset[1];
  xs2.forEach((from) => {
    const snap = snaps[from];
    if (!snap.isSnapped)
      return;
    const {id: id2, B: B10} = snap;
    const x10 = A10[id2];
    snapLines.push(id2 === "minX" ? [
      [x10, A10.midY],
      [x10, B10.minY],
      [x10, B10.maxY]
    ] : [
      [x10, A10.minY],
      [x10, A10.maxY],
      [x10, B10.minY],
      [x10, B10.maxY]
    ]);
  });
  ys2.forEach((from) => {
    const snap = snaps[from];
    if (!snap.isSnapped)
      return;
    const {id: id2, B: B10} = snap;
    const y10 = A10[id2];
    snapLines.push(id2 === "midY" ? [
      [A10.midX, y10],
      [B10.minX, y10],
      [B10.maxX, y10]
    ] : [
      [A10.minX, y10],
      [A10.maxX, y10],
      [B10.minX, y10],
      [B10.maxX, y10]
    ]);
  });
  return {offset, snapLines};
});
__publicField(Utils, "deepMerge", (target, patch) => {
  const result = __spreadValues2({}, target);
  const entries2 = Object.entries(patch);
  for (const [key, value] of entries2)
    result[key] = value === Object(value) && !Array.isArray(value) ? _Utils.deepMerge(result[key], value) : value;
  return result;
});
__publicField(Utils, "TRIM_NUMBERS", /(\s?[A-Z]?,?-?[0-9]*\.[0-9]{0,2})(([0-9]|e|-)*)/g);
var utils_default = Utils;
function useZoomEvents(zoomRef, ref) {
  const rOriginPoint = React22.useRef(void 0);
  const rPinchPoint = React22.useRef(void 0);
  const rDelta = React22.useRef([0, 0]);
  const {inputs: inputs2, bounds, callbacks} = useTLContext();
  React22.useEffect(() => {
    const preventGesture = (event) => event.preventDefault();
    document.addEventListener("gesturestart", preventGesture);
    document.addEventListener("gesturechange", preventGesture);
    return () => {
      document.removeEventListener("gesturestart", preventGesture);
      document.removeEventListener("gesturechange", preventGesture);
    };
  }, []);
  const handleWheel = React22.useCallback(({event: e14}) => {
    var _a4, _b2, _c, _d2;
    e14.preventDefault();
    if (inputs2.isPinching)
      return;
    const {offset} = normalizeWheel(e14);
    if ((e14.altKey || e14.ctrlKey || e14.metaKey) && e14.buttons === 0) {
      const point = (_b2 = (_a4 = inputs2.pointer) == null ? void 0 : _a4.point) != null ? _b2 : [bounds.width / 2, bounds.height / 2];
      const delta2 = [...point, offset[1] * 0.618];
      const info2 = inputs2.pan(delta2, e14);
      (_c = callbacks.onZoom) == null ? void 0 : _c.call(callbacks, __spreadProps2(__spreadValues2({}, info2), {delta: delta2}), e14);
      return;
    }
    const delta = e.mul(e14.shiftKey && !utils_default.isDarwin ? [offset[1], 0] : [...offset], 0.5);
    if (e.isEqual(delta, [0, 0]))
      return;
    const info = inputs2.pan(delta, e14);
    (_d2 = callbacks.onPan) == null ? void 0 : _d2.call(callbacks, info, e14);
  }, [callbacks, inputs2, bounds]);
  const handlePinchStart = React22.useCallback(({origin, event}) => {
    var _a4;
    if (event instanceof WheelEvent)
      return;
    const elm = ref.current;
    if (!elm || !(event.target === elm || elm.contains(event.target)))
      return;
    const info = inputs2.pinch(origin, origin);
    inputs2.isPinching = true;
    (_a4 = callbacks.onPinchStart) == null ? void 0 : _a4.call(callbacks, info, event);
    rPinchPoint.current = info.point;
    rOriginPoint.current = info.origin;
    rDelta.current = [0, 0];
  }, [callbacks, inputs2, bounds]);
  const handlePinch = React22.useCallback(({origin, offset, event}) => {
    var _a4;
    if (event instanceof WheelEvent)
      return;
    const elm = ref.current;
    if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
      return;
    if (!rOriginPoint.current)
      return;
    const info = inputs2.pinch(origin, rOriginPoint.current);
    const trueDelta = e.sub(info.delta, rDelta.current);
    rDelta.current = info.delta;
    (_a4 = callbacks.onPinch) == null ? void 0 : _a4.call(callbacks, __spreadProps2(__spreadValues2({}, info), {
      point: info.point,
      origin: rOriginPoint.current,
      delta: [...trueDelta, offset[0]]
    }), event);
    rPinchPoint.current = origin;
  }, [callbacks, inputs2, bounds]);
  const handlePinchEnd = React22.useCallback(({origin, event}) => {
    var _a4;
    const elm = ref.current;
    if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
      return;
    const info = inputs2.pinch(origin, origin);
    inputs2.isPinching = false;
    (_a4 = callbacks.onPinchEnd) == null ? void 0 : _a4.call(callbacks, info, event);
    rPinchPoint.current = void 0;
    rOriginPoint.current = void 0;
    rDelta.current = [0, 0];
  }, []);
  useGesture({
    onWheel: handleWheel,
    onPinchStart: handlePinchStart,
    onPinch: handlePinch,
    onPinchEnd: handlePinchEnd
  }, {
    target: ref,
    eventOptions: {passive: false},
    pinch: {
      from: [zoomRef.current, 0],
      scaleBounds: () => {
        return {from: zoomRef.current, max: 5, min: 0.1};
      }
    }
  });
}
var PIXEL_STEP = 10;
var LINE_HEIGHT2 = 40;
var PAGE_HEIGHT2 = 800;
function normalizeWheel(event) {
  let sX = 0, sY = 0, pX = 0, pY = 0;
  if ("detail" in event)
    sY = event.detail;
  if ("wheelDelta" in event)
    sY = -event.wheelDelta / 120;
  if ("wheelDeltaY" in event)
    sY = -event.wheelDeltaY / 120;
  if ("wheelDeltaX" in event)
    sX = -event.wheelDeltaX / 120;
  if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = "deltaX" in event ? event.deltaX : sX * PIXEL_STEP;
  pY = "deltaY" in event ? event.deltaY : sY * PIXEL_STEP;
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      pX *= LINE_HEIGHT2;
      pY *= LINE_HEIGHT2;
    } else {
      pX *= PAGE_HEIGHT2;
      pY *= PAGE_HEIGHT2;
    }
  }
  if (pX && !sX)
    sX = pX < 1 ? -1 : 1;
  if (pY && !sY)
    sY = pY < 1 ? -1 : 1;
  return {spin: [sX, sY], offset: [pX, pY]};
}
function useSafariFocusOutFix() {
  const {callbacks} = useTLContext();
  (0, import_react9.useEffect)(() => {
    function handleFocusOut() {
      var _a4;
      (_a4 = callbacks.onShapeBlur) == null ? void 0 : _a4.call(callbacks);
    }
    if (utils_default.isMobileSafari()) {
      document.addEventListener("focusout", handleFocusOut);
      return () => document.removeEventListener("focusout", handleFocusOut);
    }
    return () => null;
  }, [callbacks]);
}
function useCanvasEvents() {
  const {callbacks, inputs: inputs2} = useTLContext();
  return React32.useMemo(() => {
    return {
      onPointerDown: (e14) => {
        var _a4, _b2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        if (e14.button !== 0 && e14.button !== 1)
          return;
        if (!inputs2.pointerIsValid(e14))
          return;
        e14.currentTarget.setPointerCapture(e14.pointerId);
        const info = inputs2.pointerDown(e14, "canvas");
        if (e14.button === 0 || e14.button === 1) {
          (_a4 = callbacks.onPointCanvas) == null ? void 0 : _a4.call(callbacks, info, e14);
          (_b2 = callbacks.onPointerDown) == null ? void 0 : _b2.call(callbacks, info, e14);
        }
      },
      onPointerMove: (e14) => {
        var _a4, _b2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        const info = inputs2.pointerMove(e14, "canvas");
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = callbacks.onDragCanvas) == null ? void 0 : _a4.call(callbacks, info, e14);
        }
        (_b2 = callbacks.onPointerMove) == null ? void 0 : _b2.call(callbacks, info, e14);
      },
      onPointerUp: (e14) => {
        var _a4, _b2, _c, _d2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (e14.button !== 0 && e14.button !== 1)
          return;
        inputs2.activePointer = void 0;
        if (!inputs2.pointerIsValid(e14))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e14, "canvas");
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = e14.currentTarget) == null ? void 0 : _a4.releasePointerCapture(e14.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) {
          (_b2 = callbacks.onDoubleClickCanvas) == null ? void 0 : _b2.call(callbacks, info, e14);
        }
        (_c = callbacks.onReleaseCanvas) == null ? void 0 : _c.call(callbacks, info, e14);
        (_d2 = callbacks.onPointerUp) == null ? void 0 : _d2.call(callbacks, info, e14);
      },
      onDrop: callbacks.onDrop,
      onDragOver: callbacks.onDragOver
    };
  }, [callbacks, inputs2]);
}
function useShapeEvents(id2) {
  const {rPageState, rSelectionBounds, callbacks, inputs: inputs2} = React4.useContext(TLContext);
  return React4.useMemo(() => ({
    onPointerDown: (e14) => {
      var _a4, _b2, _c, _d2, _e2, _f2, _g2;
      if (e14.dead)
        return;
      else
        e14.dead = true;
      if (!inputs2.pointerIsValid(e14))
        return;
      if (e14.button === 2) {
        (_a4 = callbacks.onRightPointShape) == null ? void 0 : _a4.call(callbacks, inputs2.pointerDown(e14, id2), e14);
        return;
      }
      if (e14.button !== 0)
        return;
      const info = inputs2.pointerDown(e14, id2);
      (_b2 = e14.currentTarget) == null ? void 0 : _b2.setPointerCapture(e14.pointerId);
      if (rSelectionBounds.current && Utils.pointInBounds(info.point, rSelectionBounds.current) && !rPageState.current.selectedIds.includes(id2)) {
        (_c = callbacks.onPointBounds) == null ? void 0 : _c.call(callbacks, inputs2.pointerDown(e14, "bounds"), e14);
        (_d2 = callbacks.onPointShape) == null ? void 0 : _d2.call(callbacks, info, e14);
        (_e2 = callbacks.onPointerDown) == null ? void 0 : _e2.call(callbacks, info, e14);
        return;
      }
      (_f2 = callbacks.onPointShape) == null ? void 0 : _f2.call(callbacks, info, e14);
      (_g2 = callbacks.onPointerDown) == null ? void 0 : _g2.call(callbacks, info, e14);
    },
    onPointerUp: (e14) => {
      var _a4, _b2, _c, _d2;
      if (e14.dead)
        return;
      else
        e14.dead = true;
      if (e14.button !== 0)
        return;
      inputs2.activePointer = void 0;
      if (!inputs2.pointerIsValid(e14))
        return;
      const isDoubleClick = inputs2.isDoubleClick();
      const info = inputs2.pointerUp(e14, id2);
      if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
        (_a4 = e14.currentTarget) == null ? void 0 : _a4.releasePointerCapture(e14.pointerId);
      }
      if (isDoubleClick && !(info.altKey || info.metaKey)) {
        (_b2 = callbacks.onDoubleClickShape) == null ? void 0 : _b2.call(callbacks, info, e14);
      }
      (_c = callbacks.onReleaseShape) == null ? void 0 : _c.call(callbacks, info, e14);
      (_d2 = callbacks.onPointerUp) == null ? void 0 : _d2.call(callbacks, info, e14);
    },
    onPointerMove: (e14) => {
      var _a4, _b2;
      if (e14.dead)
        return;
      else
        e14.dead = true;
      if (!inputs2.pointerIsValid(e14))
        return;
      if (inputs2.pointer && e14.pointerId !== inputs2.pointer.pointerId)
        return;
      const info = inputs2.pointerMove(e14, id2);
      if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
        (_a4 = callbacks.onDragShape) == null ? void 0 : _a4.call(callbacks, info, e14);
      }
      (_b2 = callbacks.onPointerMove) == null ? void 0 : _b2.call(callbacks, info, e14);
    },
    onPointerEnter: (e14) => {
      var _a4;
      if (!inputs2.pointerIsValid(e14))
        return;
      const info = inputs2.pointerEnter(e14, id2);
      (_a4 = callbacks.onHoverShape) == null ? void 0 : _a4.call(callbacks, info, e14);
    },
    onPointerLeave: (e14) => {
      var _a4;
      if (!inputs2.pointerIsValid(e14))
        return;
      const info = inputs2.pointerEnter(e14, id2);
      (_a4 = callbacks.onUnhoverShape) == null ? void 0 : _a4.call(callbacks, info, e14);
    }
  }), [inputs2, callbacks, id2]);
}
function addToShapeTree(shape, branch, shapes, pageState, assets, isChildOfGhost = false, isChildOfSelected = false, meta) {
  const node = {
    shape,
    asset: shape.assetId ? assets[shape.assetId] : void 0,
    meta,
    isChildOfSelected,
    isGhost: shape.isGhost || isChildOfGhost,
    isEditing: pageState.editingId === shape.id,
    isBinding: pageState.bindingTargetId === shape.id,
    isSelected: pageState.selectedIds.includes(shape.id),
    isHovered: pageState.hoveredId === shape.id || shape.children !== void 0 && (pageState.hoveredId && shape.children.includes(pageState.hoveredId) || shape.children.some((childId) => pageState.selectedIds.includes(childId)))
  };
  branch.push(node);
  if (shape.children) {
    node.children = [];
    shape.children.map((id2) => shapes[id2]).filter(Boolean).sort((a10, b10) => a10.childIndex - b10.childIndex).forEach((childShape) => addToShapeTree(childShape, node.children, shapes, pageState, assets, node.isGhost, node.isSelected || node.isChildOfSelected, meta));
  }
}
function shapeIsInViewport(bounds, viewport) {
  return Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds);
}
function useShapeTree(page, pageState, assets, meta) {
  const {callbacks, shapeUtils, bounds} = useTLContext();
  const rTimeout = React5.useRef();
  const rPreviousCount = React5.useRef(-1);
  const rShapesIdsToRender = React5.useRef(/* @__PURE__ */ new Set());
  const rShapesToRender = React5.useRef(/* @__PURE__ */ new Set());
  const {selectedIds, camera} = pageState;
  const [minX, minY] = e.sub(e.div([0, 0], camera.zoom), camera.point);
  const [maxX, maxY] = e.sub(e.div([bounds.width, bounds.height], camera.zoom), camera.point);
  const viewport = {
    minX,
    minY,
    maxX,
    maxY,
    height: maxX - minX,
    width: maxY - minY
  };
  const shapesToRender = rShapesToRender.current;
  const shapesIdsToRender = rShapesIdsToRender.current;
  shapesToRender.clear();
  shapesIdsToRender.clear();
  const allShapes = Object.values(page.shapes);
  allShapes.filter((shape) => shapeUtils[shape.type].isStateful || selectedIds.includes(shape.id) || shapeIsInViewport(shapeUtils[shape.type].getBounds(shape), viewport)).forEach((shape) => {
    if (shape.parentId === page.id) {
      shapesIdsToRender.add(shape.id);
      shapesToRender.add(shape);
      return;
    }
    const parent = page.shapes[shape.parentId];
    if (parent === void 0) {
      throw Error(`A shape (${shape.id}) has a parent (${shape.parentId}) that does not exist!`);
    } else {
      shapesIdsToRender.add(parent.id);
      shapesToRender.add(parent);
    }
  });
  if (shapesToRender.size !== rPreviousCount.current) {
    if (rTimeout.current) {
      clearTimeout(rTimeout.current);
    }
    rTimeout.current = requestAnimationFrame(() => {
      var _a4;
      (_a4 = callbacks.onRenderCountChange) == null ? void 0 : _a4.call(callbacks, Array.from(shapesIdsToRender.values()));
    });
    rPreviousCount.current = shapesToRender.size;
  }
  const bindingTargetId = pageState.bindingId ? page.bindings[pageState.bindingId].toId : void 0;
  const tree = [];
  shapesToRender.forEach((shape) => {
    if (shape === void 0) {
      throw Error("Rendered shapes included a missing shape");
    }
    addToShapeTree(shape, tree, page.shapes, __spreadProps2(__spreadValues2({}, pageState), {bindingTargetId}), assets, shape.isGhost, false, meta);
  });
  tree.sort((a10, b10) => a10.shape.childIndex - b10.shape.childIndex);
  return tree;
}
var styles = /* @__PURE__ */ new Map();
function makeCssTheme(prefix, theme) {
  return Object.keys(theme).reduce((acc, key) => {
    const value = theme[key];
    if (value) {
      return acc + `${`--${prefix}-${key}`}: ${value};
`;
    }
    return acc;
  }, "");
}
function useTheme(prefix, theme, selector = ":root") {
  React6.useLayoutEffect(() => {
    const style = document.createElement("style");
    const cssTheme = makeCssTheme(prefix, theme);
    style.setAttribute("id", `${prefix}-theme`);
    style.setAttribute("data-selector", selector);
    style.innerHTML = `
        ${selector} {
          ${cssTheme}
        }
      `;
    document.head.appendChild(style);
    return () => {
      if (style && document.head.contains(style)) {
        document.head.removeChild(style);
      }
    };
  }, [prefix, theme, selector]);
}
function useStyle(uid, rules) {
  React6.useLayoutEffect(() => {
    if (styles.get(uid)) {
      return () => void 0;
    }
    const style = document.createElement("style");
    style.innerHTML = rules;
    style.setAttribute("id", uid);
    document.head.appendChild(style);
    styles.set(uid, style);
    return () => {
      if (style && document.head.contains(style)) {
        document.head.removeChild(style);
        styles.delete(uid);
      }
    };
  }, [uid, rules]);
}
var css = (strings, ...args) => strings.reduce((acc, string, index2) => acc + string + (index2 < args.length ? args[index2] : ""), "");
var defaultTheme = {
  accent: "rgb(255, 0, 0)",
  brushFill: "rgba(0,0,0,.05)",
  brushStroke: "rgba(0,0,0,.25)",
  brushDashStroke: "rgba(0,0,0,.6)",
  selectStroke: "rgb(66, 133, 244)",
  selectFill: "rgba(65, 132, 244, 0.05)",
  binding: "rgba(65, 132, 244, 0.12)",
  background: "rgb(248, 249, 250)",
  foreground: "rgb(51, 51, 51)",
  grid: "rgba(144, 144, 144, 1)"
};
var TLCSS = css`
  .tl-container {
    --tl-zoom: 1;
    --tl-scale: calc(1 / var(--tl-zoom));
    --tl-padding: calc(64px * max(1, var(--tl-scale)));
    --tl-performance-all: auto;
    --tl-performance-selected: auto;
    position: relative;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
    z-index: 100;
    overflow: hidden;
    touch-action: none;
    overscroll-behavior: none;
    background-color: var(--tl-background);
  }
  .tl-container * {
    box-sizing: border-box;
  }
  .tl-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
  }
  .tl-grid {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
    user-select: none;
  }
  .tl-snap-line {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-snap-point {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: all;
    overflow: clip;
  }
  .tl-layer {
    position: absolute;
    top: 0px;
    left: 0px;
    height: 0px;
    width: 0px;
    contain: layout style size;
  }
  .tl-absolute {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    contain: layout style size;
  }
  .tl-positioned {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    contain: layout style size;
    will-change: var(--tl-performance-all);
  }
  .tl-positioned-svg {
    width: 100%;
    height: 100%;
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-div {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: var(--tl-padding);
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-selected {
    will-change: var(--tl-performance-selected);
  }
  .tl-inner-div {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .tl-stroke-hitarea {
    fill: none;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: stroke;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-fill-hitarea {
    fill: transparent;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: all;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-counter-scaled {
    transform: scale(var(--tl-scale));
  }
  .tl-dashed {
    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));
  }
  .tl-transparent {
    fill: transparent;
    stroke: transparent;
  }
  .tl-cursor-ns {
    cursor: ns-resize;
  }
  .tl-cursor-ew {
    cursor: ew-resize;
  }
  .tl-cursor-nesw {
    cursor: nesw-resize;
  }
  .tl-cursor-nwse {
    cursor: nwse-resize;
  }
  .tl-corner-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-rotate-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
    cursor: grab;
  }
  .tl-binding {
    fill: var(--tl-selectFill);
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user {
    left: calc(-15px * var(--tl-scale));
    top: calc(-15px * var(--tl-scale));
    height: calc(35px * var(--tl-scale));
    width: calc(35px * var(--tl-scale));
    transform: scale(var(--tl-scale));
    pointer-events: none;
    will-change: transform;
  }
  .tl-indicator {
    fill: transparent;
    stroke-width: calc(1.5px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user-indicator-bounds {
    border-style: solid;
    border-width: calc(1px * var(--tl-scale));
  }
  .tl-hovered {
    stroke: var(--tl-selectStroke);
  }
  .tl-selected {
    stroke: var(--tl-selectStroke);
  }
  .tl-locked {
    stroke-dasharray: calc(3px * var(--tl-scale)) calc(3px * var(--tl-scale));
  }
  .tl-editing {
    stroke-width: calc(2.5px * min(5, var(--tl-scale)));
  }
  .tl-performance {
    will-change: transform, contents;
  }
  .tl-clone-target {
    pointer-events: all;
  }
  .tl-clone-target:hover .tl-clone-button {
    opacity: 1;
  }
  .tl-clone-button-target {
    cursor: pointer;
    pointer-events: all;
  }
  .tl-clone-button-target:hover .tl-clone-button {
    fill: var(--tl-selectStroke);
  }
  .tl-clone-button {
    opacity: 0;
    r: calc(8px * var(--tl-scale));
    stroke-width: calc(1.5px * var(--tl-scale));
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
  }
  .tl-bounds {
    pointer-events: none;
    contain: layout style size;
  }
  .tl-bounds-bg {
    stroke: none;
    fill: var(--tl-selectFill);
    pointer-events: all;
    contain: layout style size;
  }
  .tl-bounds-center {
    fill: transparent;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-brush {
    fill: var(--tl-brushFill);
    stroke: var(--tl-brushStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
    contain: layout style size;
  }
  .tl-dashed-brush-line {
    fill: none;
    stroke: var(--tl-brushDashStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-brush.dashed {
    stroke: none;
  }
  .tl-handle {
    pointer-events: all;
    cursor: grab;
  }
  .tl-handle:hover .tl-handle-bg {
    fill: var(--tl-selectFill);
  }
  .tl-handle:hover .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg {
    cursor: grabbing;
    fill: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle {
    fill: var(--tl-background);
    stroke: var(--tl-selectStroke);
    stroke-width: 1.5px;
  }
  .tl-handle-bg {
    fill: transparent;
    stroke: none;
    pointer-events: all;
    r: calc(16px / max(1, var(--tl-zoom)));
  }
  .tl-binding-indicator {
    fill: transparent;
    stroke: var(--tl-binding);
  }
  .tl-centered-g {
    transform: translate(var(--tl-padding), var(--tl-padding));
  }
  .tl-current-parent > *[data-shy='true'] {
    opacity: 1;
  }
  .tl-binding {
    fill: none;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(2px * var(--tl-scale));
  }
  .tl-grid-dot {
    fill: var(--tl-grid);
  }
  .tl-erase-line {
    stroke-linejoin: round;
    stroke-linecap: round;
    pointer-events: none;
    fill: var(--tl-grid);
    opacity: 0.32;
  }
`;
function useTLTheme(theme, selector) {
  const tltheme = React6.useMemo(() => __spreadValues2(__spreadValues2({}, defaultTheme), theme), [theme]);
  useTheme("tl", tltheme, selector);
  useStyle("tl-canvas", TLCSS);
}
function useBoundsHandleEvents(id2) {
  const {callbacks, inputs: inputs2} = useTLContext();
  const onPointerDown = React7.useCallback((e14) => {
    var _a4, _b2, _c;
    if (e14.dead)
      return;
    else
      e14.dead = true;
    if (e14.button !== 0)
      return;
    if (!inputs2.pointerIsValid(e14))
      return;
    const info = inputs2.pointerDown(e14, id2);
    if (inputs2.isDoubleClick() && !(info.altKey || info.metaKey)) {
      (_a4 = callbacks.onDoubleClickBoundsHandle) == null ? void 0 : _a4.call(callbacks, info, e14);
    }
    (_b2 = callbacks.onPointBoundsHandle) == null ? void 0 : _b2.call(callbacks, info, e14);
    (_c = callbacks.onPointerDown) == null ? void 0 : _c.call(callbacks, info, e14);
  }, [inputs2, callbacks, id2]);
  const onPointerUp = React7.useCallback((e14) => {
    var _a4, _b2;
    if (e14.dead)
      return;
    else
      e14.dead = true;
    if (e14.button !== 0)
      return;
    if (!inputs2.pointerIsValid(e14))
      return;
    const info = inputs2.pointerUp(e14, id2);
    (_a4 = callbacks.onReleaseBoundsHandle) == null ? void 0 : _a4.call(callbacks, info, e14);
    (_b2 = callbacks.onPointerUp) == null ? void 0 : _b2.call(callbacks, info, e14);
  }, [inputs2, callbacks, id2]);
  const onPointerMove = React7.useCallback((e14) => {
    var _a4, _b2;
    if (e14.dead)
      return;
    else
      e14.dead = true;
    if (!inputs2.pointerIsValid(e14))
      return;
    if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
      (_a4 = callbacks.onDragBoundsHandle) == null ? void 0 : _a4.call(callbacks, inputs2.pointerMove(e14, id2), e14);
    }
    const info = inputs2.pointerMove(e14, id2);
    (_b2 = callbacks.onPointerMove) == null ? void 0 : _b2.call(callbacks, info, e14);
  }, [inputs2, callbacks, id2]);
  const onPointerEnter = React7.useCallback((e14) => {
    var _a4;
    if (!inputs2.pointerIsValid(e14))
      return;
    (_a4 = callbacks.onHoverBoundsHandle) == null ? void 0 : _a4.call(callbacks, inputs2.pointerEnter(e14, id2), e14);
  }, [inputs2, callbacks, id2]);
  const onPointerLeave = React7.useCallback((e14) => {
    var _a4;
    if (!inputs2.pointerIsValid(e14))
      return;
    (_a4 = callbacks.onUnhoverBoundsHandle) == null ? void 0 : _a4.call(callbacks, inputs2.pointerEnter(e14, id2), e14);
  }, [inputs2, callbacks, id2]);
  return {
    onPointerDown,
    onPointerUp,
    onPointerEnter,
    onPointerMove,
    onPointerLeave
  };
}
function useCameraCss(layerRef, containerRef, pageState) {
  const rZoom = React8.useRef();
  const rPoint = React8.useRef();
  React8.useLayoutEffect(() => {
    return autorun(() => {
      const {zoom, point} = pageState.camera;
      const didZoom = zoom !== rZoom.current;
      const didPan = point !== rPoint.current;
      rZoom.current = zoom;
      rPoint.current = point;
      if (didZoom || didPan) {
        const layer = layerRef.current;
        if (containerRef && "current" in containerRef) {
          const container2 = containerRef.current;
          if (didZoom) {
            if (container2) {
              container2.style.setProperty("--tl-zoom", zoom.toString());
            }
          }
          if (layer) {
            layer.style.setProperty("transform", `scale(${zoom}) translateX(${point[0]}px) translateY(${point[1]}px)`);
          }
        }
      }
    });
  }, [pageState]);
}
function canvasToScreen(point, camera) {
  return [(point[0] + camera.point[0]) * camera.zoom, (point[1] + camera.point[1]) * camera.zoom];
}
function getShapeUtils(shapeUtils, shape) {
  return shapeUtils[shape.type];
}
function useSelection(page, pageState, shapeUtils) {
  const {rSelectionBounds} = useTLContext();
  const {selectedIds} = pageState;
  const rPrevBounds = React9.useRef();
  let bounds = void 0;
  let rotation = 0;
  let isLocked = false;
  let isLinked = false;
  if (selectedIds.length === 1) {
    const id2 = selectedIds[0];
    const shape = page.shapes[id2];
    if (!shape) {
      throw Error(`selectedIds is set to the id of a shape that doesn't exist: ${id2}`);
    }
    rotation = shape.rotation || 0;
    isLocked = shape.isLocked || false;
    const utils = getShapeUtils(shapeUtils, shape);
    bounds = utils.hideBounds ? void 0 : utils.getBounds(shape);
  } else if (selectedIds.length > 1) {
    const selectedShapes = selectedIds.map((id2) => page.shapes[id2]);
    rotation = 0;
    isLocked = selectedShapes.every((shape) => shape.isLocked);
    bounds = selectedShapes.reduce((acc, shape, i10) => {
      if (i10 === 0) {
        return getShapeUtils(shapeUtils, shape).getRotatedBounds(shape);
      }
      return utils_default.getExpandedBounds(acc, getShapeUtils(shapeUtils, shape).getRotatedBounds(shape));
    }, {});
  }
  if (bounds) {
    const [minX, minY] = canvasToScreen([bounds.minX, bounds.minY], pageState.camera);
    const [maxX, maxY] = canvasToScreen([bounds.maxX, bounds.maxY], pageState.camera);
    isLinked = !!Object.values(page.bindings).find((binding) => selectedIds.includes(binding.toId) || selectedIds.includes(binding.fromId));
    rSelectionBounds.current = {
      minX,
      minY,
      maxX,
      maxY,
      width: maxX - minX,
      height: maxY - minY
    };
  } else {
    rSelectionBounds.current = null;
  }
  const prevBounds = rPrevBounds.current;
  if (!prevBounds || !bounds) {
    rPrevBounds.current = bounds;
  } else if (bounds) {
    if (prevBounds.minX === bounds.minX && prevBounds.minY === bounds.minY && prevBounds.maxX === bounds.maxX && prevBounds.maxY === bounds.maxY) {
      bounds = rPrevBounds.current;
    }
  }
  return {bounds, rotation, isLocked, isLinked};
}
function useHandleEvents(id2) {
  const {inputs: inputs2, callbacks} = useTLContext();
  return React10.useMemo(() => {
    return {
      onPointerDown: (e14) => {
        var _a4, _b2, _c;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        if (e14.button !== 0)
          return;
        if (!inputs2.pointerIsValid(e14))
          return;
        (_a4 = e14.currentTarget) == null ? void 0 : _a4.setPointerCapture(e14.pointerId);
        const info = inputs2.pointerDown(e14, id2);
        (_b2 = callbacks.onPointHandle) == null ? void 0 : _b2.call(callbacks, info, e14);
        (_c = callbacks.onPointerDown) == null ? void 0 : _c.call(callbacks, info, e14);
      },
      onPointerUp: (e14) => {
        var _a4, _b2, _c, _d2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (e14.button !== 0)
          return;
        if (!inputs2.pointerIsValid(e14))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e14, id2);
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = e14.currentTarget) == null ? void 0 : _a4.releasePointerCapture(e14.pointerId);
          if (isDoubleClick && !(info.altKey || info.metaKey)) {
            (_b2 = callbacks.onDoubleClickHandle) == null ? void 0 : _b2.call(callbacks, info, e14);
          }
          (_c = callbacks.onReleaseHandle) == null ? void 0 : _c.call(callbacks, info, e14);
        }
        (_d2 = callbacks.onPointerUp) == null ? void 0 : _d2.call(callbacks, info, e14);
      },
      onPointerMove: (e14) => {
        var _a4, _b2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        const info = inputs2.pointerMove(e14, id2);
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = callbacks.onDragHandle) == null ? void 0 : _a4.call(callbacks, info, e14);
        }
        (_b2 = callbacks.onPointerMove) == null ? void 0 : _b2.call(callbacks, info, e14);
      },
      onPointerEnter: (e14) => {
        var _a4;
        if (!inputs2.pointerIsValid(e14))
          return;
        const info = inputs2.pointerEnter(e14, id2);
        (_a4 = callbacks.onHoverHandle) == null ? void 0 : _a4.call(callbacks, info, e14);
      },
      onPointerLeave: (e14) => {
        var _a4;
        if (!inputs2.pointerIsValid(e14))
          return;
        const info = inputs2.pointerEnter(e14, id2);
        (_a4 = callbacks.onUnhoverHandle) == null ? void 0 : _a4.call(callbacks, info, e14);
      }
    };
  }, [inputs2, callbacks, id2]);
}
function usePreventNavigationCss(rCanvas) {
  const {bounds} = useTLContext();
  React11.useEffect(() => {
    const preventGestureNavigation = (event) => {
      event.preventDefault();
    };
    const preventNavigation = (event) => {
      const touchXPosition = event.touches[0].pageX;
      const touchXRadius = event.touches[0].radiusX || 0;
      if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > bounds.width - 10) {
        event.preventDefault();
      }
    };
    const elm = rCanvas.current;
    if (!elm)
      return () => void 0;
    elm.addEventListener("touchstart", preventGestureNavigation);
    elm.addEventListener("gestureend", preventGestureNavigation);
    elm.addEventListener("gesturechange", preventGestureNavigation);
    elm.addEventListener("gesturestart", preventGestureNavigation);
    elm.addEventListener("touchstart", preventNavigation);
    return () => {
      if (elm) {
        elm.removeEventListener("touchstart", preventGestureNavigation);
        elm.removeEventListener("gestureend", preventGestureNavigation);
        elm.removeEventListener("gesturechange", preventGestureNavigation);
        elm.removeEventListener("gesturestart", preventGestureNavigation);
        elm.removeEventListener("touchstart", preventNavigation);
      }
    };
  }, [rCanvas, bounds.width]);
}
function useBoundsEvents() {
  const {callbacks, inputs: inputs2} = useTLContext();
  return React12.useMemo(() => {
    return {
      onPointerDown: (e14) => {
        var _a4, _b2, _c, _d2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        if (e14.button === 2) {
          (_a4 = callbacks.onRightPointBounds) == null ? void 0 : _a4.call(callbacks, inputs2.pointerDown(e14, "bounds"), e14);
          return;
        }
        if (e14.button !== 0)
          return;
        (_b2 = e14.currentTarget) == null ? void 0 : _b2.setPointerCapture(e14.pointerId);
        const info = inputs2.pointerDown(e14, "bounds");
        (_c = callbacks.onPointBounds) == null ? void 0 : _c.call(callbacks, info, e14);
        (_d2 = callbacks.onPointerDown) == null ? void 0 : _d2.call(callbacks, info, e14);
      },
      onPointerUp: (e14) => {
        var _a4, _b2, _c, _d2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (e14.button !== 0)
          return;
        inputs2.activePointer = void 0;
        if (!inputs2.pointerIsValid(e14))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e14, "bounds");
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = e14.currentTarget) == null ? void 0 : _a4.releasePointerCapture(e14.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) {
          (_b2 = callbacks.onDoubleClickBounds) == null ? void 0 : _b2.call(callbacks, info, e14);
        }
        (_c = callbacks.onReleaseBounds) == null ? void 0 : _c.call(callbacks, info, e14);
        (_d2 = callbacks.onPointerUp) == null ? void 0 : _d2.call(callbacks, info, e14);
      },
      onPointerMove: (e14) => {
        var _a4, _b2;
        if (e14.dead)
          return;
        else
          e14.dead = true;
        if (!inputs2.pointerIsValid(e14))
          return;
        if (e14.currentTarget.hasPointerCapture(e14.pointerId)) {
          (_a4 = callbacks.onDragBounds) == null ? void 0 : _a4.call(callbacks, inputs2.pointerMove(e14, "bounds"), e14);
        }
        const info = inputs2.pointerMove(e14, "bounds");
        (_b2 = callbacks.onPointerMove) == null ? void 0 : _b2.call(callbacks, info, e14);
      },
      onPointerEnter: (e14) => {
        var _a4;
        if (!inputs2.pointerIsValid(e14))
          return;
        (_a4 = callbacks.onHoverBounds) == null ? void 0 : _a4.call(callbacks, inputs2.pointerEnter(e14, "bounds"), e14);
      },
      onPointerLeave: (e14) => {
        var _a4;
        if (!inputs2.pointerIsValid(e14))
          return;
        (_a4 = callbacks.onUnhoverBounds) == null ? void 0 : _a4.call(callbacks, inputs2.pointerEnter(e14, "bounds"), e14);
      }
    };
  }, [inputs2, callbacks]);
}
function usePosition(bounds, rotation = 0) {
  const rBounds = React13.useRef(null);
  React13.useLayoutEffect(() => {
    return autorun(() => {
      const elm = rBounds.current;
      const transform = `
    translate(
      calc(${bounds.minX}px - var(--tl-padding)),
      calc(${bounds.minY}px - var(--tl-padding))
    )
    rotate(${rotation + (bounds.rotation || 0)}rad)`;
      elm.style.setProperty("transform", transform);
      elm.style.setProperty("width", `calc(${Math.floor(bounds.width)}px + (var(--tl-padding) * 2))`);
      elm.style.setProperty("height", `calc(${Math.floor(bounds.height)}px + (var(--tl-padding) * 2))`);
    });
  }, [bounds, rotation]);
  return rBounds;
}
function useKeyEvents() {
  const {inputs: inputs2, callbacks} = useTLContext();
  React14.useEffect(() => {
    const handleKeyDown = (e14) => {
      var _a4;
      (_a4 = callbacks.onKeyDown) == null ? void 0 : _a4.call(callbacks, e14.key, inputs2.keydown(e14), e14);
    };
    const handleKeyUp = (e14) => {
      var _a4;
      inputs2.keyup(e14);
      (_a4 = callbacks.onKeyUp) == null ? void 0 : _a4.call(callbacks, e14.key, inputs2.keyup(e14), e14);
    };
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [inputs2, callbacks]);
}
function useCursorAnimation(ref, point, skip = false) {
  const rState = React15.useRef("idle");
  const rPrevPoint = React15.useRef(point);
  const rQueue = React15.useRef([]);
  const rTimestamp = React15.useRef(performance.now());
  const rLastRequestId = React15.useRef(0);
  const rTimeoutId = React15.useRef(0);
  const [spline] = React15.useState(() => new Spline());
  React15.useLayoutEffect(() => {
    if (skip) {
      const elm = ref.current;
      if (!elm)
        return;
      rState.current = "stopped";
      rPrevPoint.current = point;
      elm.style.setProperty("transform", `translate(${point[0]}px, ${point[1]}px)`);
      return;
    }
    const animateNext = (animation2) => {
      const start = performance.now();
      function loop() {
        const t13 = (performance.now() - start) / animation2.duration;
        if (t13 <= 1) {
          const elm = ref.current;
          if (!elm)
            return;
          const point2 = animation2.curve ? spline.getSplinePoint(t13 + animation2.start) : p.lrp(animation2.from, animation2.to, t13);
          elm.style.setProperty("transform", `translate(${point2[0]}px, ${point2[1]}px)`);
          rLastRequestId.current = requestAnimationFrame(loop);
          return;
        }
        const next = rQueue.current.shift();
        if (next) {
          rState.current = "animating";
          animateNext(next);
        } else {
          rState.current = "idle";
          rTimeoutId.current = setTimeout(() => {
            rState.current = "stopped";
          }, 250);
        }
      }
      loop();
    };
    const now2 = performance.now();
    if (rState.current === "stopped") {
      rTimestamp.current = now2;
      rPrevPoint.current = point;
      spline.clear();
    }
    spline.addPoint(point);
    const animation = {
      distance: spline.totalLength,
      curve: spline.points.length > 3,
      start: spline.points.length - 3,
      from: rPrevPoint.current,
      to: point,
      timeStamp: now2,
      duration: Math.min(now2 - rTimestamp.current, 300)
    };
    rTimestamp.current = now2;
    switch (rState.current) {
      case "stopped": {
        rPrevPoint.current = point;
        rState.current = "idle";
        break;
      }
      case "idle": {
        rState.current = "animating";
        animateNext(animation);
        break;
      }
      case "animating": {
        rPrevPoint.current = point;
        rQueue.current.push(animation);
        break;
      }
    }
    return () => clearTimeout(rTimeoutId.current);
  }, [skip, point, spline]);
}
var Spline = class {
  constructor() {
    __publicField(this, "points", []);
    __publicField(this, "lengths", []);
    __publicField(this, "totalLength", 0);
    __publicField(this, "prev");
  }
  addPoint(point) {
    if (this.prev) {
      const length = p.dist(this.prev, point);
      this.lengths.push(length);
      this.totalLength += length;
      this.points.push(point);
    }
    this.prev = point;
  }
  getSplinePoint(t13) {
    const {points} = this;
    const l10 = points.length - 1;
    const d10 = Math.trunc(t13);
    const p12 = Math.min(d10 + 1, l10);
    const p23 = Math.min(p12 + 1, l10);
    const p33 = Math.min(p23 + 1, l10);
    const p02 = p12 - 1;
    t13 = t13 - d10;
    const tt = t13 * t13, ttt = tt * t13, q12 = -ttt + 2 * tt - t13, q23 = 3 * ttt - 5 * tt + 2, q32 = -3 * ttt + 4 * tt + t13, q42 = ttt - tt;
    if (!(points[p02] && points[p12] && points[p23] && points[p33])) {
      return [0, 0];
    }
    return [
      0.5 * (points[p02][0] * q12 + points[p12][0] * q23 + points[p23][0] * q32 + points[p33][0] * q42),
      0.5 * (points[p02][1] * q12 + points[p12][1] * q23 + points[p23][1] * q32 + points[p33][1] * q42)
    ];
  }
  clear() {
    this.points = [];
    this.totalLength = 0;
  }
};
function usePerformanceCss(performanceMode, rContainer) {
  React16.useLayoutEffect(() => {
    if (rContainer && "current" in rContainer) {
      const container2 = rContainer == null ? void 0 : rContainer.current;
      if (!container2)
        return;
      switch (performanceMode) {
        case "transform_selected": {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "transform_all": {
          container2.style.setProperty("--tl-performance-all", "transform, contents");
          container2.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "translate_selected": {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        case "translate_all": {
          container2.style.setProperty("--tl-performance-all", "transform");
          container2.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        default: {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "auto");
        }
      }
    }
  }, [performanceMode]);
}
var Container = observer(function Container2(_a4) {
  var _b2 = _a4, {
    id: id2,
    bounds,
    rotation = 0,
    isGhost = false,
    isSelected = false,
    children
  } = _b2, props = __objRest(_b2, [
    "id",
    "bounds",
    "rotation",
    "isGhost",
    "isSelected",
    "children"
  ]);
  const rPositioned = usePosition(bounds, rotation);
  return /* @__PURE__ */ React17.createElement("div", __spreadValues2({
    id: id2,
    ref: rPositioned,
    className: `tl-positioned${isGhost ? " tl-ghost" : ""}${isSelected ? ` tl-positioned-selected` : ""}`,
    "aria-label": "container",
    "data-testid": "container"
  }, props), children);
});
var Brush = observer(function Brush2({brush, zoom, dashed}) {
  return /* @__PURE__ */ React18.createElement(Container, {
    bounds: brush,
    rotation: 0
  }, /* @__PURE__ */ React18.createElement(SVGContainer, null, /* @__PURE__ */ React18.createElement("rect", {
    className: "tl-brush" + (dashed ? " dashed" : ""),
    opacity: 1,
    x: 0,
    y: 0,
    width: brush.width,
    height: brush.height,
    "aria-label": "brush"
  }), dashed && /* @__PURE__ */ React18.createElement("g", {
    className: "tl-dashed-brush-line"
  }, /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: 0,
    x2: brush.width,
    y2: 0,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: brush.width,
    y1: 0,
    x2: brush.width,
    y2: brush.height,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: brush.height,
    x2: brush.width,
    y2: brush.height,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: 0,
    x2: 0,
    y2: brush.height,
    zoom
  }))));
});
function PerfectDashLine({x1: x12, y1: y12, x2: x23, y2: y23, zoom}) {
  const dash = utils_default.getPerfectDashProps(Math.hypot(x23 - x12, y23 - y12), 1 / zoom, "dashed", 1, true, 3);
  return /* @__PURE__ */ React18.createElement("line", {
    x1: x12,
    y1: y12,
    x2: x23,
    y2: y23,
    strokeWidth: 1 / zoom,
    strokeDasharray: dash.strokeDasharray,
    strokeDashoffset: dash.strokeDashoffset
  });
}
var CenterHandle = observer(function CenterHandle2({
  bounds,
  isLocked,
  isHidden
}) {
  return /* @__PURE__ */ React19.createElement("rect", {
    className: ["tl-bounds-center", isLocked ? "tl-dashed" : ""].join(" "),
    x: -1,
    y: -1,
    width: bounds.width + 2,
    height: bounds.height + 2,
    opacity: isHidden ? 0 : 1,
    pointerEvents: "none",
    "aria-label": "center handle"
  });
});
var RotateHandle = observer(function RotateHandle2({
  bounds,
  targetSize,
  size,
  isHidden
}) {
  const events = useBoundsHandleEvents("rotate");
  return /* @__PURE__ */ React20.createElement("g", {
    cursor: "grab",
    opacity: isHidden ? 0 : 1
  }, /* @__PURE__ */ React20.createElement("circle", __spreadValues2({
    className: "tl-transparent",
    "aria-label": "rotate handle transparent",
    cx: bounds.width / 2,
    cy: size * -2,
    r: targetSize,
    pointerEvents: isHidden ? "none" : "all"
  }, events)), /* @__PURE__ */ React20.createElement("circle", {
    className: "tl-rotate-handle",
    "aria-label": "rotate handle",
    cx: bounds.width / 2,
    cy: size * -2,
    r: size / 2,
    pointerEvents: "none"
  }));
});
var cornerBgClassnames = {
  ["top_left_corner"]: "tl-cursor-nwse",
  ["top_right_corner"]: "tl-cursor-nesw",
  ["bottom_right_corner"]: "tl-cursor-nwse",
  ["bottom_left_corner"]: "tl-cursor-nesw"
};
var CornerHandle = observer(function CornerHandle2({
  size,
  targetSize,
  isHidden,
  corner,
  bounds
}) {
  const events = useBoundsHandleEvents(corner);
  const isTop = corner === "top_left_corner" || corner === "top_right_corner";
  const isLeft = corner === "top_left_corner" || corner === "bottom_left_corner";
  return /* @__PURE__ */ React21.createElement("g", {
    opacity: isHidden ? 0 : 1
  }, /* @__PURE__ */ React21.createElement("rect", __spreadValues2({
    className: "tl-transparent " + (isHidden ? "" : cornerBgClassnames[corner]),
    "aria-label": "corner transparent",
    x: (isLeft ? -1 : bounds.width + 1) - targetSize,
    y: (isTop ? -1 : bounds.height + 1) - targetSize,
    width: targetSize * 2,
    height: targetSize * 2,
    pointerEvents: isHidden ? "none" : "all"
  }, events)), /* @__PURE__ */ React21.createElement("rect", {
    className: "tl-corner-handle",
    "aria-label": "corner handle",
    x: (isLeft ? -1 : bounds.width + 1) - size / 2,
    y: (isTop ? -1 : bounds.height + 1) - size / 2,
    width: size,
    height: size,
    pointerEvents: "none"
  }));
});
function LinkHandle({size, bounds, isHidden}) {
  const leftEvents = useBoundsHandleEvents("left");
  const centerEvents = useBoundsHandleEvents("center");
  const rightEvents = useBoundsHandleEvents("right");
  return /* @__PURE__ */ React222.createElement("g", {
    cursor: "grab",
    transform: `translate(${bounds.width / 2 - size * 4}, ${bounds.height + size * 2})`,
    "aria-label": "link handle"
  }, /* @__PURE__ */ React222.createElement("g", {
    className: "tl-transparent",
    pointerEvents: isHidden ? "none" : "all"
  }, /* @__PURE__ */ React222.createElement("rect", __spreadValues2({
    x: 0,
    y: 0,
    width: size * 2,
    height: size * 2
  }, leftEvents)), /* @__PURE__ */ React222.createElement("rect", __spreadValues2({
    x: size * 3,
    y: 0,
    width: size * 2,
    height: size * 2
  }, centerEvents)), /* @__PURE__ */ React222.createElement("rect", __spreadValues2({
    x: size * 6,
    y: 0,
    width: size * 2,
    height: size * 2
  }, rightEvents))), /* @__PURE__ */ React222.createElement("g", {
    className: "tl-rotate-handle",
    transform: `translate(${size / 2}, ${size / 2})`,
    "aria-label": "link rotate handle"
  }, /* @__PURE__ */ React222.createElement("path", {
    d: `M 0,${size / 2} L ${size},${size} ${size},0 Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  }), /* @__PURE__ */ React222.createElement("path", {
    transform: `translate(${size * 3}, 0)`,
    d: `M 0,0 L ${size},0 ${size / 2},${size} Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  }), /* @__PURE__ */ React222.createElement("path", {
    transform: `translate(${size * 6}, 0)`,
    d: `M ${size},${size / 2} L 0,0 0,${size} Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  })));
}
var edgeClassnames = {
  ["top_edge"]: "tl-cursor-ns",
  ["right_edge"]: "tl-cursor-ew",
  ["bottom_edge"]: "tl-cursor-ns",
  ["left_edge"]: "tl-cursor-ew"
};
var EdgeHandle = observer(function EdgeHandle2({
  size,
  isHidden,
  bounds,
  edge
}) {
  const events = useBoundsHandleEvents(edge);
  const isHorizontal = edge === "top_edge" || edge === "bottom_edge";
  const isFarEdge = edge === "right_edge" || edge === "bottom_edge";
  const {height, width} = bounds;
  return /* @__PURE__ */ React23.createElement("rect", __spreadValues2({
    pointerEvents: isHidden ? "none" : "all",
    className: "tl-transparent tl-edge-handle " + (isHidden ? "" : edgeClassnames[edge]),
    "aria-label": `${edge} handle`,
    opacity: isHidden ? 0 : 1,
    x: isHorizontal ? size / 2 : (isFarEdge ? width + 1 : -1) - size / 2,
    y: isHorizontal ? (isFarEdge ? height + 1 : -1) - size / 2 : size / 2,
    width: isHorizontal ? Math.max(0, width + 1 - size) : size,
    height: isHorizontal ? size : Math.max(0, height + 1 - size)
  }, events));
});
var ROTATIONS = {
  right: 0,
  bottomRight: 45,
  bottom: 90,
  bottomLeft: 135,
  left: 180,
  topLeft: 225,
  top: 270,
  topRight: 315
};
var CloneButton = observer(function CloneButton2({
  bounds,
  side,
  targetSize,
  size
}) {
  const s10 = targetSize * 2;
  const x10 = {
    left: -s10,
    topLeft: -s10,
    bottomLeft: -s10,
    right: bounds.width,
    topRight: bounds.width,
    bottomRight: bounds.width,
    top: bounds.width / 2 - s10 / 2,
    bottom: bounds.width / 2 - s10 / 2
  }[side];
  const y10 = {
    left: bounds.height / 2 - s10 / 2,
    right: bounds.height / 2 - s10 / 2,
    top: -s10 * 2,
    topLeft: -s10,
    topRight: -s10,
    bottom: bounds.height,
    bottomLeft: bounds.height,
    bottomRight: bounds.height
  }[side];
  const {callbacks, inputs: inputs2} = useTLContext();
  const handleClick = React24.useCallback((e14) => {
    var _a4;
    e14.stopPropagation();
    const info = inputs2.pointerDown(e14, side);
    (_a4 = callbacks.onShapeClone) == null ? void 0 : _a4.call(callbacks, info, e14);
  }, [callbacks.onShapeClone]);
  return /* @__PURE__ */ React24.createElement("g", {
    className: "tl-clone-target",
    transform: `translate(${x10}, ${y10})`,
    "aria-label": "clone button"
  }, /* @__PURE__ */ React24.createElement("rect", {
    className: "tl-transparent",
    width: targetSize * 2,
    height: targetSize * 2
  }), /* @__PURE__ */ React24.createElement("g", {
    className: "tl-clone-button-target",
    onPointerDown: handleClick,
    transform: `translate(${targetSize}, ${targetSize}) rotate(${ROTATIONS[side]})`
  }, /* @__PURE__ */ React24.createElement("circle", {
    className: "tl-transparent ",
    r: targetSize
  }), /* @__PURE__ */ React24.createElement("path", {
    className: "tl-clone-button",
    d: `M -${size / 2},-${size / 2} L ${size / 2},0 -${size / 2},${size / 2} Z`,
    strokeLinejoin: "round"
  })));
});
function CloneButtons({targetSize, size, bounds}) {
  return /* @__PURE__ */ React25.createElement(React25.Fragment, null, /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "top"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "right"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottom"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "left"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "topLeft"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "topRight"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottomLeft"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottomRight"
  }));
}
var SVGContainer = React26.forwardRef(function SVGContainer2(_a4, ref) {
  var _b2 = _a4, {id: id2, className = "", children} = _b2, rest = __objRest(_b2, ["id", "className", "children"]);
  return /* @__PURE__ */ React26.createElement(ObserverComponent, null, () => /* @__PURE__ */ React26.createElement("svg", __spreadValues2({
    ref,
    className: `tl-positioned-svg ${className}`
  }, rest), /* @__PURE__ */ React26.createElement("g", {
    id: id2,
    className: "tl-centered-g"
  }, children)));
});
var Bounds = observer(function Bounds2({
  zoom,
  bounds,
  viewportWidth,
  rotation,
  isHidden,
  isLocked,
  hideCloneHandles,
  hideResizeHandles,
  hideRotateHandle,
  hideBindingHandles
}) {
  const targetSize = (viewportWidth < 768 ? 16 : 8) / zoom;
  const size = 8 / zoom;
  const smallDimension = Math.min(bounds.width, bounds.height) * zoom;
  const showRotateHandle = !hideRotateHandle && !isHidden && !isLocked && smallDimension > 32;
  const showEdgeHandles = !isHidden && !isLocked && smallDimension > 24;
  const showCornerHandles = !isHidden && !isLocked && smallDimension > 20;
  const showCloneHandles = !hideCloneHandles && smallDimension > 24;
  const showResizeHandles = !hideResizeHandles && !isLocked;
  return /* @__PURE__ */ React27.createElement(Container, {
    bounds,
    rotation
  }, /* @__PURE__ */ React27.createElement(SVGContainer, null, /* @__PURE__ */ React27.createElement(CenterHandle, {
    bounds,
    isLocked,
    isHidden
  }), showResizeHandles ? /* @__PURE__ */ React27.createElement(React27.Fragment, null, /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "top_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "right_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "bottom_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "left_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "top_left_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "top_right_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "bottom_right_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "bottom_left_corner"
  })) : null, showRotateHandle && /* @__PURE__ */ React27.createElement(RotateHandle, {
    targetSize,
    size,
    bounds,
    isHidden: !showEdgeHandles
  }), showCloneHandles && /* @__PURE__ */ React27.createElement(CloneButtons, {
    bounds,
    targetSize,
    size
  }), !hideBindingHandles && /* @__PURE__ */ React27.createElement(LinkHandle, {
    targetSize,
    size,
    bounds,
    isHidden: !showEdgeHandles
  })));
});
var BoundsBg = observer(function BoundsBg2({bounds, rotation, isHidden}) {
  const events = useBoundsEvents();
  return /* @__PURE__ */ React28.createElement(Container, {
    bounds,
    rotation
  }, /* @__PURE__ */ React28.createElement(SVGContainer, null, /* @__PURE__ */ React28.createElement("rect", __spreadValues2({
    className: "tl-bounds-bg",
    "aria-label": "bounds bg",
    width: bounds.width,
    height: bounds.height,
    opacity: isHidden ? 0 : 1
  }, events))));
});
var Handle = observer(function Handle2({id: id2, point}) {
  const events = useHandleEvents(id2);
  return /* @__PURE__ */ React29.createElement(Container, {
    bounds: utils_default.translateBounds({
      minX: 0,
      minY: 0,
      maxX: 0,
      maxY: 0,
      width: 0,
      height: 0
    }, point)
  }, /* @__PURE__ */ React29.createElement(SVGContainer, null, /* @__PURE__ */ React29.createElement("g", __spreadValues2({
    className: "tl-handle",
    "aria-label": "handle"
  }, events), /* @__PURE__ */ React29.createElement("circle", {
    className: "tl-handle-bg",
    pointerEvents: "all"
  }), /* @__PURE__ */ React29.createElement("circle", {
    className: "tl-counter-scaled tl-handle",
    pointerEvents: "none",
    r: 4
  }))));
});
var Handles = observer(function Handles2({shape, zoom}) {
  if (shape.handles === void 0) {
    return null;
  }
  let prev = null;
  const handlesToShow = Object.values(shape.handles).reduce((acc, cur) => {
    const point = e.add(cur.point, shape.point);
    if (!prev || e.dist(point, prev) * zoom >= 32) {
      acc.push(cur);
      prev = point;
    }
    return acc;
  }, []);
  if (handlesToShow.length === 1)
    return null;
  return /* @__PURE__ */ React30.createElement(React30.Fragment, null, handlesToShow.map((handle) => /* @__PURE__ */ React30.createElement(Handle, {
    key: shape.id + "_" + handle.id,
    id: handle.id,
    point: e.add(handle.point, shape.point)
  })));
});
var _RenderedShape = observer(function RenderedShape(props) {
  const ref = props.utils.getRef(props.shape);
  return /* @__PURE__ */ React31.createElement(props.utils.Component, __spreadValues2({
    ref
  }, props));
});
var RenderedShape2 = React31.memo(_RenderedShape, (prev, next) => {
  if (prev.isHovered !== next.isHovered || prev.isSelected !== next.isSelected || prev.isEditing !== next.isEditing || prev.isBinding !== next.isBinding || prev.isGhost !== next.isGhost || prev.meta !== next.meta) {
    return false;
  }
  if (next.shape !== prev.shape) {
    return !next.utils.shouldRender(next.shape, prev.shape);
  }
  return true;
});
var Shape = observer(function Shape2(_a4) {
  var _b2 = _a4, {
    shape,
    utils,
    meta
  } = _b2, rest = __objRest(_b2, [
    "shape",
    "utils",
    "meta"
  ]);
  const {callbacks} = useTLContext();
  const bounds = utils.getBounds(shape);
  const events = useShapeEvents(shape.id);
  return /* @__PURE__ */ React322.createElement(Container, {
    id: shape.id,
    bounds,
    rotation: shape.rotation,
    "data-shape": shape.type,
    isGhost: rest.isGhost,
    isSelected: rest.isSelected
  }, /* @__PURE__ */ React322.createElement(RenderedShape2, __spreadValues2({
    shape,
    utils,
    meta,
    events,
    bounds,
    onShapeChange: callbacks.onShapeChange,
    onShapeBlur: callbacks.onShapeBlur
  }, rest)));
});
var ShapeNode = observer(function ShapeNode2(_a4) {
  var _b2 = _a4, {
    shape,
    utils,
    meta,
    children
  } = _b2, rest = __objRest(_b2, [
    "shape",
    "utils",
    "meta",
    "children"
  ]);
  return /* @__PURE__ */ React33.createElement(React33.Fragment, null, /* @__PURE__ */ React33.createElement(Shape, __spreadValues2({
    shape,
    utils: utils[shape.type],
    meta
  }, rest)), children && children.map((childNode) => /* @__PURE__ */ React33.createElement(ShapeNode2, __spreadValues2({
    key: childNode.shape.id,
    utils
  }, childNode))));
});
var ShapeIndicator = observer(function ShapeIndicator2({
  isHovered = false,
  isSelected = false,
  isEditing = false,
  shape,
  user,
  meta
}) {
  const {shapeUtils} = useTLContext();
  const utils = shapeUtils[shape.type];
  const bounds = utils.getBounds(shape);
  const rPositioned = usePosition(bounds, shape.rotation);
  return /* @__PURE__ */ React34.createElement("div", {
    ref: rPositioned,
    draggable: false,
    className: [
      "tl-indicator",
      "tl-absolute",
      isSelected && !user ? "tl-selected" : "tl-hovered",
      isEditing ? "tl-editing" : "",
      shape.isLocked ? "tl-locked" : ""
    ].join(" ")
  }, /* @__PURE__ */ React34.createElement("svg", {
    width: "100%",
    height: "100%"
  }, /* @__PURE__ */ React34.createElement("g", {
    className: "tl-centered-g",
    stroke: user == null ? void 0 : user.color
  }, /* @__PURE__ */ React34.createElement(utils.Indicator, {
    shape,
    meta,
    user,
    bounds,
    isSelected,
    isHovered
  }))));
});
var Page = observer(function _Page({
  page,
  pageState,
  assets,
  hideBounds,
  hideHandles,
  hideIndicators,
  hideBindingHandles,
  hideCloneHandles,
  hideRotateHandle,
  hideResizeHandles,
  meta
}) {
  const {bounds: rendererBounds, shapeUtils} = useTLContext();
  const shapeTree = useShapeTree(page, pageState, assets, meta);
  const {bounds, isLinked, isLocked, rotation} = useSelection(page, pageState, shapeUtils);
  const {
    selectedIds,
    hoveredId,
    editingId,
    camera: {zoom}
  } = pageState;
  let _hideIndicators = hideIndicators;
  let _hideCloneHandles = true;
  let _isEditing = false;
  let shapeWithHandles = void 0;
  const selectedShapes = selectedIds.map((id2) => page.shapes[id2]);
  if (selectedShapes.length === 1) {
    const shape = selectedShapes[0];
    _isEditing = editingId === shape.id;
    if (_isEditing)
      _hideIndicators = true;
    const utils = shapeUtils[shape.type];
    _hideCloneHandles = hideCloneHandles || !utils.showCloneHandles;
    if (shape.handles !== void 0 && !_isEditing) {
      shapeWithHandles = shape;
    }
  }
  return /* @__PURE__ */ React35.createElement(React35.Fragment, null, bounds && /* @__PURE__ */ React35.createElement(BoundsBg, {
    bounds,
    rotation,
    isHidden: hideBounds
  }), shapeTree.map((node) => /* @__PURE__ */ React35.createElement(ShapeNode, __spreadValues2({
    key: node.shape.id,
    utils: shapeUtils
  }, node))), !_hideIndicators && selectedShapes.map((shape) => /* @__PURE__ */ React35.createElement(ShapeIndicator, {
    key: "selected_" + shape.id,
    shape,
    meta,
    isSelected: true,
    isEditing: _isEditing
  })), !_hideIndicators && hoveredId && hoveredId !== editingId && /* @__PURE__ */ React35.createElement(ShapeIndicator, {
    key: "hovered_" + hoveredId,
    shape: page.shapes[hoveredId],
    meta,
    isHovered: true
  }), bounds && /* @__PURE__ */ React35.createElement(Bounds, {
    zoom,
    bounds,
    viewportWidth: rendererBounds.width,
    isLocked,
    rotation,
    isHidden: hideBounds,
    hideRotateHandle,
    hideResizeHandles,
    hideBindingHandles: hideBindingHandles || !isLinked,
    hideCloneHandles: _hideCloneHandles
  }), !hideHandles && shapeWithHandles && /* @__PURE__ */ React35.createElement(Handles, {
    shape: shapeWithHandles,
    zoom
  }));
});
function User({user}) {
  const rCursor = React36.useRef(null);
  useCursorAnimation(rCursor, user.point, user.session);
  return /* @__PURE__ */ React36.createElement("svg", {
    ref: rCursor,
    className: "tl-absolute tl-user tl-counter-scaled",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 35 35",
    fill: "none",
    fillRule: "evenodd"
  }, /* @__PURE__ */ React36.createElement("g", {
    fill: "rgba(0,0,0,.2)",
    transform: "translate(1,1)"
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z"
  })), /* @__PURE__ */ React36.createElement("g", {
    fill: "white"
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z"
  })), /* @__PURE__ */ React36.createElement("g", {
    fill: user.color
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z"
  })));
}
function Users({userId, users}) {
  return /* @__PURE__ */ React37.createElement(React37.Fragment, null, Object.values(users).filter((user) => user && user.id !== userId).map((user) => /* @__PURE__ */ React37.createElement(User, {
    key: user.id,
    user
  })));
}
var getNearestScrollableContainer = (element) => {
  let parent = element.parentElement;
  while (parent) {
    if (parent === document.body) {
      return document;
    }
    const {overflowY} = window.getComputedStyle(parent);
    const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
    if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return document;
};
function useResizeObserver(ref, onBoundsChange) {
  const {inputs: inputs2, callbacks} = useTLContext();
  const rIsMounted = React38.useRef(false);
  const updateBounds = React38.useCallback(() => {
    var _a4, _b2;
    if (rIsMounted.current) {
      const rect = (_a4 = ref.current) == null ? void 0 : _a4.getBoundingClientRect();
      if (rect) {
        const bounds = {
          minX: rect.left,
          maxX: rect.left + rect.width,
          minY: rect.top,
          maxY: rect.top + rect.height,
          width: rect.width,
          height: rect.height
        };
        inputs2.bounds = bounds;
        onBoundsChange(bounds);
        (_b2 = callbacks.onBoundsChange) == null ? void 0 : _b2.call(callbacks, bounds);
      }
    } else {
      rIsMounted.current = true;
    }
  }, [ref, inputs2, callbacks.onBoundsChange]);
  React38.useEffect(() => {
    const scrollingAnchor = ref.current ? getNearestScrollableContainer(ref.current) : document;
    const debouncedupdateBounds = Utils.debounce(updateBounds, 100);
    scrollingAnchor.addEventListener("scroll", debouncedupdateBounds);
    window.addEventListener("resize", debouncedupdateBounds);
    return () => {
      scrollingAnchor.removeEventListener("scroll", debouncedupdateBounds);
      window.removeEventListener("resize", debouncedupdateBounds);
    };
  }, []);
  React38.useEffect(() => {
    const resizeObserver = new ResizeObserver_es_default((entries2) => {
      if (inputs2.isPinching) {
        return;
      }
      if (entries2[0].contentRect) {
        updateBounds();
      }
    });
    if (ref.current) {
      resizeObserver.observe(ref.current);
    }
    return () => {
      resizeObserver.disconnect();
    };
  }, [ref, inputs2]);
  React38.useEffect(() => {
    updateBounds();
  }, [ref]);
}
function UsersIndicators({
  userId,
  users,
  meta,
  page
}) {
  const {shapeUtils} = useTLContext();
  return /* @__PURE__ */ React39.createElement(React39.Fragment, null, Object.values(users).filter(Boolean).filter((user) => user.id !== userId && user.selectedIds.length > 0).map((user) => {
    const shapes = user.selectedIds.map((id2) => page.shapes[id2]).filter(Boolean);
    if (shapes.length === 0)
      return null;
    const bounds = utils_default.getCommonBounds(shapes.map((shape) => shapeUtils[shape.type].getBounds(shape)));
    return /* @__PURE__ */ React39.createElement(React39.Fragment, {
      key: user.id + "_shapes"
    }, /* @__PURE__ */ React39.createElement("div", {
      className: "tl-absolute tl-user-indicator-bounds",
      style: {
        backgroundColor: user.color + "0d",
        borderColor: user.color + "78",
        transform: `translate(${bounds.minX}px, ${bounds.minY}px)`,
        width: bounds.width,
        height: bounds.height,
        pointerEvents: "none"
      }
    }), shapes.map((shape) => /* @__PURE__ */ React39.createElement(ShapeIndicator, {
      key: `${user.id}_${shape.id}_indicator`,
      shape,
      user,
      meta,
      isHovered: true
    })));
  }));
}
var SnapLines = observer(function SnapLines2({snapLines}) {
  return /* @__PURE__ */ React40.createElement(React40.Fragment, null, snapLines.map((snapLine, i10) => /* @__PURE__ */ React40.createElement(SnapLine, {
    key: i10,
    snapLine
  })));
});
var SnapLine = observer(function SnapLine2({snapLine}) {
  const bounds = utils_default.getBoundsFromPoints(snapLine);
  return /* @__PURE__ */ React40.createElement(React40.Fragment, null, /* @__PURE__ */ React40.createElement("line", {
    className: "tl-snap-line",
    x1: bounds.minX,
    y1: bounds.minY,
    x2: bounds.maxX,
    y2: bounds.maxY
  }), snapLine.map(([x10, y10], i10) => /* @__PURE__ */ React40.createElement("use", {
    key: i10,
    href: "#tl-snap-point",
    x: x10,
    y: y10
  })));
});
var STEPS = [
  [-1, 0.15, 64],
  [0.05, 0.375, 16],
  [0.15, 1, 4],
  [0.7, 2.5, 1]
];
function Grid({grid, camera}) {
  return /* @__PURE__ */ React41.createElement("svg", {
    className: "tl-grid",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React41.createElement("defs", null, STEPS.map(([min, mid, size], i10) => {
    const s10 = size * grid * camera.zoom;
    const xo2 = camera.point[0] * camera.zoom;
    const yo2 = camera.point[1] * camera.zoom;
    const gxo = xo2 > 0 ? xo2 % s10 : s10 + xo2 % s10;
    const gyo = yo2 > 0 ? yo2 % s10 : s10 + yo2 % s10;
    const opacity = camera.zoom < mid ? utils_default.modulate(camera.zoom, [min, mid], [0, 1]) : 1;
    return /* @__PURE__ */ React41.createElement("pattern", {
      key: `grid-pattern-${i10}`,
      id: `grid-${i10}`,
      width: s10,
      height: s10,
      patternUnits: "userSpaceOnUse"
    }, /* @__PURE__ */ React41.createElement("circle", {
      className: `tl-grid-dot`,
      cx: gxo,
      cy: gyo,
      r: 1,
      opacity
    }));
  })), STEPS.map((_17, i10) => /* @__PURE__ */ React41.createElement("rect", {
    key: `grid-rect-${i10}`,
    width: "100%",
    height: "100%",
    fill: `url(#grid-${i10})`
  })));
}
var Overlay = observer(function Overlay2({camera: {zoom, point}, children}) {
  const l10 = 2.5 / zoom;
  return /* @__PURE__ */ React42.createElement("svg", {
    className: "tl-overlay"
  }, /* @__PURE__ */ React42.createElement("defs", null, /* @__PURE__ */ React42.createElement("g", {
    id: "tl-snap-point"
  }, /* @__PURE__ */ React42.createElement("path", {
    className: "tl-snap-point",
    d: `M ${-l10},${-l10} L ${l10},${l10} M ${-l10},${l10} L ${l10},${-l10}`
  }))), /* @__PURE__ */ React42.createElement("g", {
    transform: `scale(${zoom}) translate(${point})`
  }, children));
});
var EraseLine = observer(function EraserLine({points, zoom}) {
  if (points.length === 0)
    return null;
  const d10 = utils_default.getSvgPathFromStroke(Te(points, {size: 16 / zoom, start: {taper: true}}));
  return /* @__PURE__ */ React43.createElement("path", {
    d: d10,
    className: "tl-erase-line"
  });
});
var Canvas = observer(function _Canvas({
  id: id2,
  page,
  pageState,
  assets,
  snapLines,
  eraseLine,
  grid,
  users,
  userId,
  meta,
  performanceMode,
  externalContainerRef,
  showDashedBrush,
  hideHandles,
  hideBounds,
  hideIndicators,
  hideBindingHandles,
  hideCloneHandles,
  hideResizeHandles,
  hideRotateHandle,
  hideGrid,
  onBoundsChange
}) {
  const rCanvas = React44.useRef(null);
  const rZoomRef = React44.useRef(pageState.camera.zoom);
  rZoomRef.current = pageState.camera.zoom;
  useZoomEvents(rZoomRef, externalContainerRef || rCanvas);
  useResizeObserver(rCanvas, onBoundsChange);
  useSafariFocusOutFix();
  usePreventNavigationCss(rCanvas);
  const rContainer = React44.useRef(null);
  const rLayer = React44.useRef(null);
  useCameraCss(rLayer, rContainer, pageState);
  usePerformanceCss(performanceMode, rContainer);
  useKeyEvents();
  const events = useCanvasEvents();
  return /* @__PURE__ */ React44.createElement("div", {
    id: id2,
    className: "tl-container",
    ref: rContainer
  }, /* @__PURE__ */ React44.createElement("div", __spreadValues2({
    id: "canvas",
    className: "tl-absolute tl-canvas",
    ref: rCanvas
  }, events), !hideGrid && grid && /* @__PURE__ */ React44.createElement(Grid, {
    grid,
    camera: pageState.camera
  }), /* @__PURE__ */ React44.createElement("div", {
    ref: rLayer,
    className: "tl-absolute tl-layer",
    "data-testid": "layer"
  }, /* @__PURE__ */ React44.createElement(Page, {
    page,
    pageState,
    assets,
    hideBounds,
    hideIndicators,
    hideHandles,
    hideBindingHandles,
    hideCloneHandles,
    hideResizeHandles,
    hideRotateHandle,
    meta
  }), users && userId && /* @__PURE__ */ React44.createElement(UsersIndicators, {
    userId,
    users,
    page,
    meta
  }), pageState.brush && /* @__PURE__ */ React44.createElement(Brush, {
    brush: pageState.brush,
    dashed: showDashedBrush,
    zoom: pageState.camera.zoom
  }), users && /* @__PURE__ */ React44.createElement(Users, {
    userId,
    users
  })), /* @__PURE__ */ React44.createElement(Overlay, {
    camera: pageState.camera
  }, eraseLine && /* @__PURE__ */ React44.createElement(EraseLine, {
    points: eraseLine,
    zoom: pageState.camera.zoom
  }), snapLines && /* @__PURE__ */ React44.createElement(SnapLines, {
    snapLines
  }))));
});
var DOUBLE_CLICK_DURATION = 250;
var Inputs = class {
  constructor() {
    __publicField(this, "pointer");
    __publicField(this, "keyboard");
    __publicField(this, "keys", {});
    __publicField(this, "isPinching", false);
    __publicField(this, "bounds", {
      minX: 0,
      maxX: 640,
      minY: 0,
      maxY: 480,
      width: 640,
      height: 480
    });
    __publicField(this, "pointerUpTime", 0);
    __publicField(this, "activePointer");
    __publicField(this, "panStart", (e14) => {
      var _a4, _b2;
      const {shiftKey, ctrlKey, metaKey, altKey} = e14;
      const info = {
        target: "wheel",
        pointerId: ((_a4 = this.pointer) == null ? void 0 : _a4.pointerId) || 0,
        origin: ((_b2 = this.pointer) == null ? void 0 : _b2.origin) || [0, 0],
        delta: [0, 0],
        pressure: 0.5,
        point: Inputs.getPoint(e14, this.bounds),
        shiftKey,
        ctrlKey,
        metaKey,
        altKey,
        spaceKey: this.keys[" "]
      };
      this.pointer = info;
      return info;
    });
    __publicField(this, "pan", (delta, e14) => {
      if (!this.pointer || this.pointer.target !== "wheel") {
        return this.panStart(e14);
      }
      const {shiftKey, ctrlKey, metaKey, altKey} = e14;
      const prev = this.pointer;
      const point = Inputs.getPoint(e14, this.bounds);
      const info = __spreadProps2(__spreadValues2({}, prev), {
        target: "wheel",
        delta,
        point,
        shiftKey,
        ctrlKey,
        metaKey,
        altKey,
        spaceKey: this.keys[" "]
      });
      this.pointer = info;
      return info;
    });
    __publicField(this, "keydown", (e14) => {
      var _a4, _b2;
      const {shiftKey, ctrlKey, metaKey, altKey} = e14;
      this.keys[e14.key] = true;
      return {
        point: ((_a4 = this.pointer) == null ? void 0 : _a4.point) || [0, 0],
        origin: ((_b2 = this.pointer) == null ? void 0 : _b2.origin) || [0, 0],
        key: e14.key,
        keys: Object.keys(this.keys),
        shiftKey,
        ctrlKey,
        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
        altKey
      };
    });
    __publicField(this, "keyup", (e14) => {
      var _a4, _b2;
      const {shiftKey, ctrlKey, metaKey, altKey} = e14;
      delete this.keys[e14.key];
      return {
        point: ((_a4 = this.pointer) == null ? void 0 : _a4.point) || [0, 0],
        origin: ((_b2 = this.pointer) == null ? void 0 : _b2.origin) || [0, 0],
        key: e14.key,
        keys: Object.keys(this.keys),
        shiftKey,
        ctrlKey,
        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
        altKey
      };
    });
  }
  pointerIsValid(e14) {
    if ("pointerId" in e14) {
      if (this.activePointer && this.activePointer !== e14.pointerId) {
        return false;
      }
    }
    if ("touches" in e14) {
      const touch = e14.changedTouches[0];
      if (this.activePointer && this.activePointer !== touch.identifier) {
        return false;
      }
    }
    return true;
  }
  touchStart(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const touch = e14.changedTouches[0];
    this.activePointer = touch.identifier;
    const info = {
      target,
      pointerId: touch.identifier,
      origin: Inputs.getPoint(touch, this.bounds),
      delta: [0, 0],
      point: Inputs.getPoint(touch, this.bounds),
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  touchEnd(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const touch = e14.changedTouches[0];
    const info = {
      target,
      pointerId: touch.identifier,
      origin: Inputs.getPoint(touch, this.bounds),
      delta: [0, 0],
      point: Inputs.getPoint(touch, this.bounds),
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    this.activePointer = void 0;
    return info;
  }
  touchMove(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const touch = e14.changedTouches[0];
    const prev = this.pointer;
    const point = Inputs.getPoint(touch, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    const info = __spreadProps2(__spreadValues2({
      origin: point
    }, prev), {
      target,
      pointerId: touch.identifier,
      point,
      delta,
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    return info;
  }
  pointerDown(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const point = Inputs.getPoint(e14, this.bounds);
    this.activePointer = e14.pointerId;
    const info = {
      target,
      pointerId: e14.pointerId,
      origin: point,
      point,
      delta: [0, 0],
      pressure: Inputs.getPressure(e14),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  pointerEnter(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const point = Inputs.getPoint(e14, this.bounds);
    const info = {
      target,
      pointerId: e14.pointerId,
      origin: point,
      delta: [0, 0],
      point,
      pressure: Inputs.getPressure(e14),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  pointerMove(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const prev = this.pointer;
    const point = Inputs.getPoint(e14, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    const info = __spreadProps2(__spreadValues2({
      origin: point
    }, prev), {
      target,
      pointerId: e14.pointerId,
      point,
      delta,
      pressure: Inputs.getPressure(e14),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    return info;
  }
  pointerUp(e14, target) {
    const {shiftKey, ctrlKey, metaKey, altKey} = e14;
    const prev = this.pointer;
    const point = Inputs.getPoint(e14, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    this.activePointer = void 0;
    const info = __spreadProps2(__spreadValues2({
      origin: point
    }, prev), {
      target,
      pointerId: e14.pointerId,
      point,
      delta,
      pressure: Inputs.getPressure(e14),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    this.pointerUpTime = performance.now();
    return info;
  }
  isDoubleClick() {
    if (!this.pointer)
      return false;
    const {origin, point} = this.pointer;
    const isDoubleClick = performance.now() - this.pointerUpTime < DOUBLE_CLICK_DURATION && e.dist(origin, point) < 4;
    if (isDoubleClick)
      this.activePointer = void 0;
    return isDoubleClick;
  }
  clear() {
    this.pointer = void 0;
  }
  resetDoubleClick() {
    this.pointerUpTime = 0;
  }
  pinch(point, origin) {
    const {shiftKey, ctrlKey, metaKey, altKey} = this.keys;
    const delta = e.sub(origin, point);
    const info = {
      pointerId: 0,
      target: "pinch",
      origin,
      delta,
      point: e.sub(e.toFixed(point), [this.bounds.minX, this.bounds.minY]),
      pressure: 0.5,
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  reset() {
    this.pointerUpTime = 0;
    this.pointer = void 0;
    this.keyboard = void 0;
    this.activePointer = void 0;
    this.keys = {};
  }
  static getPoint(e14, bounds) {
    return [+e14.clientX.toFixed(2) - bounds.minX, +e14.clientY.toFixed(2) - bounds.minY];
  }
  static getPressure(e14) {
    return "pressure" in e14 ? +e14.pressure.toFixed(2) || 0.5 : 0.5;
  }
  static commandKey() {
    return Utils.isDarwin() ? "\u2318" : "Ctrl";
  }
};
var inputs = new Inputs();
var Renderer = observer(function _Renderer(_a4) {
  var _b2 = _a4, {
    id: id2 = "tl",
    shapeUtils,
    page,
    pageState,
    assets = EMPTY_OBJECT2,
    users,
    userId,
    theme,
    meta,
    snapLines,
    eraseLine,
    grid,
    containerRef,
    performanceMode,
    hideHandles = false,
    hideIndicators = false,
    hideCloneHandles = false,
    hideBindingHandles = false,
    hideResizeHandles = false,
    hideRotateHandles = false,
    hideBounds = false,
    hideGrid = true,
    showDashedBrush = false
  } = _b2, rest = __objRest(_b2, [
    "id",
    "shapeUtils",
    "page",
    "pageState",
    "assets",
    "users",
    "userId",
    "theme",
    "meta",
    "snapLines",
    "eraseLine",
    "grid",
    "containerRef",
    "performanceMode",
    "hideHandles",
    "hideIndicators",
    "hideCloneHandles",
    "hideBindingHandles",
    "hideResizeHandles",
    "hideRotateHandles",
    "hideBounds",
    "hideGrid",
    "showDashedBrush"
  ]);
  useTLTheme(theme, "#" + id2);
  const rSelectionBounds = React45.useRef(null);
  const rPageState = React45.useRef(pageState);
  React45.useEffect(() => {
    rPageState.current = pageState;
  }, [pageState]);
  const [context, setContext] = React45.useState(() => ({
    callbacks: rest,
    shapeUtils,
    rSelectionBounds,
    rPageState,
    bounds: {
      minX: 0,
      minY: 0,
      maxX: Infinity,
      maxY: Infinity,
      width: Infinity,
      height: Infinity
    },
    inputs: new Inputs()
  }));
  const onBoundsChange = React45.useCallback((bounds) => {
    setContext((context2) => __spreadProps2(__spreadValues2({}, context2), {
      bounds
    }));
  }, []);
  return /* @__PURE__ */ React45.createElement(TLContext.Provider, {
    value: context
  }, /* @__PURE__ */ React45.createElement(Canvas, {
    id: id2,
    page,
    pageState,
    assets,
    snapLines,
    eraseLine,
    grid,
    users,
    userId,
    externalContainerRef: containerRef,
    hideBounds,
    hideIndicators,
    hideHandles,
    hideCloneHandles,
    hideBindingHandles,
    hideRotateHandle: hideRotateHandles,
    hideResizeHandles,
    hideGrid,
    showDashedBrush,
    onBoundsChange,
    performanceMode,
    meta
  }));
});
var EMPTY_OBJECT2 = {};
var HTMLContainer = React46.forwardRef(function HTMLContainer2(_a4, ref) {
  var _b2 = _a4, {children, className = ""} = _b2, rest = __objRest(_b2, ["children", "className"]);
  return /* @__PURE__ */ React46.createElement(ObserverComponent, null, () => /* @__PURE__ */ React46.createElement("div", __spreadValues2({
    ref,
    className: `tl-positioned-div ${className}`,
    draggable: false
  }, rest), /* @__PURE__ */ React46.createElement("div", {
    className: "tl-inner-div"
  }, children)));
});
var TLShapeUtil = class {
  constructor() {
    __publicField(this, "refMap", /* @__PURE__ */ new Map());
    __publicField(this, "boundsCache", /* @__PURE__ */ new WeakMap());
    __publicField(this, "showCloneHandles", false);
    __publicField(this, "hideBounds", false);
    __publicField(this, "isStateful", false);
    __publicField(this, "shouldRender", (prev, next) => true);
    __publicField(this, "getRef", (shape) => {
      if (!this.refMap.has(shape.id)) {
        this.refMap.set(shape.id, React47.createRef());
      }
      return this.refMap.get(shape.id);
    });
    __publicField(this, "hitTestBounds", (shape, bounds) => {
      const shapeBounds = this.getBounds(shape);
      const corners = utils_default.getRotatedCorners(shapeBounds, shape.rotation);
      return corners.every((point) => utils_default.pointInBounds(point, bounds)) || intersectPolygonBounds(corners, bounds).length > 0;
    });
    __publicField(this, "getRotatedBounds", (shape) => {
      return utils_default.getBoundsFromPoints(utils_default.getRotatedCorners(this.getBounds(shape), shape.rotation));
    });
  }
};
__publicField(TLShapeUtil, "Component", (component) => {
  return React47.forwardRef(component);
});
__publicField(TLShapeUtil, "Indicator", (component) => component);
/**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */

// ../../node_modules/tslib/modules/index.js
var import_tslib = __toModule(require_tslib());
var {
  __extends,
  __assign: __assign3,
  __rest: __rest2,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar: __exportStar2,
  __createBinding,
  __values: __values2,
  __read: __read2,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// ../../node_modules/react-intl/lib/src/components/useIntl.js
var React50 = __toModule(require_react());

// ../../node_modules/react-intl/lib/src/components/injectIntl.js
var React49 = __toModule(require_react());
var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());

// ../../node_modules/react-intl/lib/src/utils.js
var React48 = __toModule(require_react());

// ../../node_modules/@formatjs/ecma402-abstract/lib/utils.js
function invariant(condition, message, Err) {
  if (Err === void 0) {
    Err = Error;
  }
  if (!condition) {
    throw new Err(message);
  }
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js
var ErrorKind;
(function(ErrorKind2) {
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
  ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js
var TYPE;
(function(TYPE2) {
  TYPE2[TYPE2["literal"] = 0] = "literal";
  TYPE2[TYPE2["argument"] = 1] = "argument";
  TYPE2[TYPE2["number"] = 2] = "number";
  TYPE2[TYPE2["date"] = 3] = "date";
  TYPE2[TYPE2["time"] = 4] = "time";
  TYPE2[TYPE2["select"] = 5] = "select";
  TYPE2[TYPE2["plural"] = 6] = "plural";
  TYPE2[TYPE2["pound"] = 7] = "pound";
  TYPE2[TYPE2["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function(SKELETON_TYPE2) {
  SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
  SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
function isLiteralElement(el2) {
  return el2.type === TYPE.literal;
}
function isArgumentElement(el2) {
  return el2.type === TYPE.argument;
}
function isNumberElement(el2) {
  return el2.type === TYPE.number;
}
function isDateElement(el2) {
  return el2.type === TYPE.date;
}
function isTimeElement(el2) {
  return el2.type === TYPE.time;
}
function isSelectElement(el2) {
  return el2.type === TYPE.select;
}
function isPluralElement(el2) {
  return el2.type === TYPE.plural;
}
function isPoundElement(el2) {
  return el2.type === TYPE.pound;
}
function isTagElement(el2) {
  return el2.type === TYPE.tag;
}
function isNumberSkeleton(el2) {
  return !!(el2 && typeof el2 === "object" && el2.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el2) {
  return !!(el2 && typeof el2 === "object" && el2.type === SKELETON_TYPE.dateTime);
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function(match) {
    var len = match.length;
    switch (match[0]) {
      case "G":
        result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "y":
        result.year = len === 2 ? "2-digit" : "numeric";
        break;
      case "Y":
      case "u":
      case "U":
      case "r":
        throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
      case "q":
      case "Q":
        throw new RangeError("`q/Q` (quarter) patterns are not supported");
      case "M":
      case "L":
        result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
        break;
      case "w":
      case "W":
        throw new RangeError("`w/W` (week) patterns are not supported");
      case "d":
        result.day = ["numeric", "2-digit"][len - 1];
        break;
      case "D":
      case "F":
      case "g":
        throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
      case "E":
        result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
        break;
      case "e":
        if (len < 4) {
          throw new RangeError("`e..eee` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "c":
        if (len < 4) {
          throw new RangeError("`c..ccc` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "a":
        result.hour12 = true;
        break;
      case "b":
      case "B":
        throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
      case "h":
        result.hourCycle = "h12";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "H":
        result.hourCycle = "h23";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "K":
        result.hourCycle = "h11";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "k":
        result.hourCycle = "h24";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "j":
      case "J":
      case "C":
        throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
      case "m":
        result.minute = ["numeric", "2-digit"][len - 1];
        break;
      case "s":
        result.second = ["numeric", "2-digit"][len - 1];
        break;
      case "S":
      case "A":
        throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
      case "z":
        result.timeZoneName = len < 4 ? "short" : "long";
        break;
      case "Z":
      case "O":
      case "v":
      case "V":
      case "X":
      case "x":
        throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
    }
    return "";
  });
  return result;
}

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js
function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error("Number skeleton cannot be empty");
  }
  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x10) {
    return x10.length > 0;
  });
  var tokens = [];
  for (var _i2 = 0, stringTokens_1 = stringTokens; _i2 < stringTokens_1.length; _i2++) {
    var stringToken = stringTokens_1[_i2];
    var stemAndOptions = stringToken.split("/");
    if (stemAndOptions.length === 0) {
      throw new Error("Invalid number skeleton");
    }
    var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
    for (var _a4 = 0, options_1 = options; _a4 < options_1.length; _a4++) {
      var option = options_1[_a4];
      if (option.length === 0) {
        throw new Error("Invalid number skeleton");
      }
    }
    tokens.push({stem, options});
  }
  return tokens;
}
function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, "");
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
  var result = {};
  if (str[str.length - 1] === "r") {
    result.roundingPriority = "morePrecision";
  } else if (str[str.length - 1] === "s") {
    result.roundingPriority = "lessPrecision";
  }
  str.replace(SIGNIFICANT_PRECISION_REGEX, function(_17, g12, g23) {
    if (typeof g23 !== "string") {
      result.minimumSignificantDigits = g12.length;
      result.maximumSignificantDigits = g12.length;
    } else if (g23 === "+") {
      result.minimumSignificantDigits = g12.length;
    } else if (g12[0] === "#") {
      result.maximumSignificantDigits = g12.length;
    } else {
      result.minimumSignificantDigits = g12.length;
      result.maximumSignificantDigits = g12.length + (typeof g23 === "string" ? g23.length : 0);
    }
    return "";
  });
  return result;
}
function parseSign(str) {
  switch (str) {
    case "sign-auto":
      return {
        signDisplay: "auto"
      };
    case "sign-accounting":
    case "()":
      return {
        currencySign: "accounting"
      };
    case "sign-always":
    case "+!":
      return {
        signDisplay: "always"
      };
    case "sign-accounting-always":
    case "()!":
      return {
        signDisplay: "always",
        currencySign: "accounting"
      };
    case "sign-except-zero":
    case "+?":
      return {
        signDisplay: "exceptZero"
      };
    case "sign-accounting-except-zero":
    case "()?":
      return {
        signDisplay: "exceptZero",
        currencySign: "accounting"
      };
    case "sign-never":
    case "+_":
      return {
        signDisplay: "never"
      };
  }
}
function parseConciseScientificAndEngineeringStem(stem) {
  var result;
  if (stem[0] === "E" && stem[1] === "E") {
    result = {
      notation: "engineering"
    };
    stem = stem.slice(2);
  } else if (stem[0] === "E") {
    result = {
      notation: "scientific"
    };
    stem = stem.slice(1);
  }
  if (result) {
    var signDisplay = stem.slice(0, 2);
    if (signDisplay === "+!") {
      result.signDisplay = "always";
      stem = stem.slice(2);
    } else if (signDisplay === "+?") {
      result.signDisplay = "exceptZero";
      stem = stem.slice(2);
    }
    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error("Malformed concise eng/scientific notation");
    }
    result.minimumIntegerDigits = stem.length;
  }
  return result;
}
function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);
  if (signOpts) {
    return signOpts;
  }
  return result;
}
function parseNumberSkeleton(tokens) {
  var result = {};
  for (var _i2 = 0, tokens_1 = tokens; _i2 < tokens_1.length; _i2++) {
    var token = tokens_1[_i2];
    switch (token.stem) {
      case "percent":
      case "%":
        result.style = "percent";
        continue;
      case "%x100":
        result.style = "percent";
        result.scale = 100;
        continue;
      case "currency":
        result.style = "currency";
        result.currency = token.options[0];
        continue;
      case "group-off":
      case ",_":
        result.useGrouping = false;
        continue;
      case "precision-integer":
      case ".":
        result.maximumFractionDigits = 0;
        continue;
      case "measure-unit":
      case "unit":
        result.style = "unit";
        result.unit = icuUnitToEcma(token.options[0]);
        continue;
      case "compact-short":
      case "K":
        result.notation = "compact";
        result.compactDisplay = "short";
        continue;
      case "compact-long":
      case "KK":
        result.notation = "compact";
        result.compactDisplay = "long";
        continue;
      case "scientific":
        result = __assign3(__assign3(__assign3({}, result), {notation: "scientific"}), token.options.reduce(function(all, opt2) {
          return __assign3(__assign3({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "engineering":
        result = __assign3(__assign3(__assign3({}, result), {notation: "engineering"}), token.options.reduce(function(all, opt2) {
          return __assign3(__assign3({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "notation-simple":
        result.notation = "standard";
        continue;
      case "unit-width-narrow":
        result.currencyDisplay = "narrowSymbol";
        result.unitDisplay = "narrow";
        continue;
      case "unit-width-short":
        result.currencyDisplay = "code";
        result.unitDisplay = "short";
        continue;
      case "unit-width-full-name":
        result.currencyDisplay = "name";
        result.unitDisplay = "long";
        continue;
      case "unit-width-iso-code":
        result.currencyDisplay = "symbol";
        continue;
      case "scale":
        result.scale = parseFloat(token.options[0]);
        continue;
      case "integer-width":
        if (token.options.length > 1) {
          throw new RangeError("integer-width stems only accept a single optional option");
        }
        token.options[0].replace(INTEGER_WIDTH_REGEX, function(_17, g12, g23, g33, g43, g53) {
          if (g12) {
            result.minimumIntegerDigits = g23.length;
          } else if (g33 && g43) {
            throw new Error("We currently do not support maximum integer digits");
          } else if (g53) {
            throw new Error("We currently do not support exact integer digits");
          }
          return "";
        });
        continue;
    }
    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
      result.minimumIntegerDigits = token.stem.length;
      continue;
    }
    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      if (token.options.length > 1) {
        throw new RangeError("Fraction-precision stems only accept a single optional option");
      }
      token.stem.replace(FRACTION_PRECISION_REGEX, function(_17, g12, g23, g33, g43, g53) {
        if (g23 === "*") {
          result.minimumFractionDigits = g12.length;
        } else if (g33 && g33[0] === "#") {
          result.maximumFractionDigits = g33.length;
        } else if (g43 && g53) {
          result.minimumFractionDigits = g43.length;
          result.maximumFractionDigits = g43.length + g53.length;
        } else {
          result.minimumFractionDigits = g12.length;
          result.maximumFractionDigits = g12.length;
        }
        return "";
      });
      var opt = token.options[0];
      if (opt === "w") {
        result = __assign3(__assign3({}, result), {trailingZeroDisplay: "stripIfInteger"});
      } else if (opt) {
        result = __assign3(__assign3({}, result), parseSignificantPrecision(opt));
      }
      continue;
    }
    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign3(__assign3({}, result), parseSignificantPrecision(token.stem));
      continue;
    }
    var signOpts = parseSign(token.stem);
    if (signOpts) {
      result = __assign3(__assign3({}, result), signOpts);
    }
    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
    if (conciseScientificAndEngineeringOpts) {
      result = __assign3(__assign3({}, result), conciseScientificAndEngineeringOpts);
    }
  }
  return result;
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
var timeData = {
  AX: [
    "H"
  ],
  BQ: [
    "H"
  ],
  CP: [
    "H"
  ],
  CZ: [
    "H"
  ],
  DK: [
    "H"
  ],
  FI: [
    "H"
  ],
  ID: [
    "H"
  ],
  IS: [
    "H"
  ],
  ML: [
    "H"
  ],
  NE: [
    "H"
  ],
  RU: [
    "H"
  ],
  SE: [
    "H"
  ],
  SJ: [
    "H"
  ],
  SK: [
    "H"
  ],
  AS: [
    "h",
    "H"
  ],
  BT: [
    "h",
    "H"
  ],
  DJ: [
    "h",
    "H"
  ],
  ER: [
    "h",
    "H"
  ],
  GH: [
    "h",
    "H"
  ],
  IN: [
    "h",
    "H"
  ],
  LS: [
    "h",
    "H"
  ],
  PG: [
    "h",
    "H"
  ],
  PW: [
    "h",
    "H"
  ],
  SO: [
    "h",
    "H"
  ],
  TO: [
    "h",
    "H"
  ],
  VU: [
    "h",
    "H"
  ],
  WS: [
    "h",
    "H"
  ],
  "001": [
    "H",
    "h"
  ],
  AL: [
    "h",
    "H",
    "hB"
  ],
  TD: [
    "h",
    "H",
    "hB"
  ],
  "ca-ES": [
    "H",
    "h",
    "hB"
  ],
  CF: [
    "H",
    "h",
    "hB"
  ],
  CM: [
    "H",
    "h",
    "hB"
  ],
  "fr-CA": [
    "H",
    "h",
    "hB"
  ],
  "gl-ES": [
    "H",
    "h",
    "hB"
  ],
  "it-CH": [
    "H",
    "h",
    "hB"
  ],
  "it-IT": [
    "H",
    "h",
    "hB"
  ],
  LU: [
    "H",
    "h",
    "hB"
  ],
  NP: [
    "H",
    "h",
    "hB"
  ],
  PF: [
    "H",
    "h",
    "hB"
  ],
  SC: [
    "H",
    "h",
    "hB"
  ],
  SM: [
    "H",
    "h",
    "hB"
  ],
  SN: [
    "H",
    "h",
    "hB"
  ],
  TF: [
    "H",
    "h",
    "hB"
  ],
  VA: [
    "H",
    "h",
    "hB"
  ],
  CY: [
    "h",
    "H",
    "hb",
    "hB"
  ],
  GR: [
    "h",
    "H",
    "hb",
    "hB"
  ],
  CO: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  DO: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  KP: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  KR: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  NA: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  PA: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  PR: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  VE: [
    "h",
    "H",
    "hB",
    "hb"
  ],
  AC: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  AI: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  BW: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  BZ: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  CC: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  CK: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  CX: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  DG: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  FK: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  GB: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  GG: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  GI: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  IE: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  IM: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  IO: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  JE: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  LT: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  MK: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  MN: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  MS: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  NF: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  NG: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  NR: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  NU: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  PN: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  SH: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  SX: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  TA: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  ZA: [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "af-ZA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  AR: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  CL: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  CR: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  CU: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  EA: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BO": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-EC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-ES": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-GQ": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-PE": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  GT: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  HN: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  IC: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  KG: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  KM: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  LK: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  MA: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  MX: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  NI: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  PY: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  SV: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  UY: [
    "H",
    "h",
    "hB",
    "hb"
  ],
  JP: [
    "H",
    "h",
    "K"
  ],
  AD: [
    "H",
    "hB"
  ],
  AM: [
    "H",
    "hB"
  ],
  AO: [
    "H",
    "hB"
  ],
  AT: [
    "H",
    "hB"
  ],
  AW: [
    "H",
    "hB"
  ],
  BE: [
    "H",
    "hB"
  ],
  BF: [
    "H",
    "hB"
  ],
  BJ: [
    "H",
    "hB"
  ],
  BL: [
    "H",
    "hB"
  ],
  BR: [
    "H",
    "hB"
  ],
  CG: [
    "H",
    "hB"
  ],
  CI: [
    "H",
    "hB"
  ],
  CV: [
    "H",
    "hB"
  ],
  DE: [
    "H",
    "hB"
  ],
  EE: [
    "H",
    "hB"
  ],
  FR: [
    "H",
    "hB"
  ],
  GA: [
    "H",
    "hB"
  ],
  GF: [
    "H",
    "hB"
  ],
  GN: [
    "H",
    "hB"
  ],
  GP: [
    "H",
    "hB"
  ],
  GW: [
    "H",
    "hB"
  ],
  HR: [
    "H",
    "hB"
  ],
  IL: [
    "H",
    "hB"
  ],
  IT: [
    "H",
    "hB"
  ],
  KZ: [
    "H",
    "hB"
  ],
  MC: [
    "H",
    "hB"
  ],
  MD: [
    "H",
    "hB"
  ],
  MF: [
    "H",
    "hB"
  ],
  MQ: [
    "H",
    "hB"
  ],
  MZ: [
    "H",
    "hB"
  ],
  NC: [
    "H",
    "hB"
  ],
  NL: [
    "H",
    "hB"
  ],
  PM: [
    "H",
    "hB"
  ],
  PT: [
    "H",
    "hB"
  ],
  RE: [
    "H",
    "hB"
  ],
  RO: [
    "H",
    "hB"
  ],
  SI: [
    "H",
    "hB"
  ],
  SR: [
    "H",
    "hB"
  ],
  ST: [
    "H",
    "hB"
  ],
  TG: [
    "H",
    "hB"
  ],
  TR: [
    "H",
    "hB"
  ],
  WF: [
    "H",
    "hB"
  ],
  YT: [
    "H",
    "hB"
  ],
  BD: [
    "h",
    "hB",
    "H"
  ],
  PK: [
    "h",
    "hB",
    "H"
  ],
  AZ: [
    "H",
    "hB",
    "h"
  ],
  BA: [
    "H",
    "hB",
    "h"
  ],
  BG: [
    "H",
    "hB",
    "h"
  ],
  CH: [
    "H",
    "hB",
    "h"
  ],
  GE: [
    "H",
    "hB",
    "h"
  ],
  LI: [
    "H",
    "hB",
    "h"
  ],
  ME: [
    "H",
    "hB",
    "h"
  ],
  RS: [
    "H",
    "hB",
    "h"
  ],
  UA: [
    "H",
    "hB",
    "h"
  ],
  UZ: [
    "H",
    "hB",
    "h"
  ],
  XK: [
    "H",
    "hB",
    "h"
  ],
  AG: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  AU: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  BB: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  BM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  BS: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  CA: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  DM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "en-001": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  FJ: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  FM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  GD: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  GM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  GU: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  GY: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  JM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  KI: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  KN: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  KY: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  LC: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  LR: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  MH: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  MP: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  MW: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  NZ: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  SB: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  SG: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  SL: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  SS: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  SZ: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  TC: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  TT: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  UM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  US: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  VC: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  VG: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  VI: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  ZM: [
    "h",
    "hb",
    "H",
    "hB"
  ],
  BO: [
    "H",
    "hB",
    "h",
    "hb"
  ],
  EC: [
    "H",
    "hB",
    "h",
    "hb"
  ],
  ES: [
    "H",
    "hB",
    "h",
    "hb"
  ],
  GQ: [
    "H",
    "hB",
    "h",
    "hb"
  ],
  PE: [
    "H",
    "hB",
    "h",
    "hb"
  ],
  AE: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ar-001": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  BH: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  DZ: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  EG: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  EH: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  HK: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  IQ: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  JO: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  KW: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  LB: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  LY: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  MO: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  MR: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  OM: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  PH: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  PS: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  QA: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  SA: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  SD: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  SY: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  TN: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  YE: [
    "h",
    "hB",
    "hb",
    "H"
  ],
  AF: [
    "H",
    "hb",
    "hB",
    "h"
  ],
  LA: [
    "H",
    "hb",
    "hB",
    "h"
  ],
  CN: [
    "H",
    "hB",
    "hb",
    "h"
  ],
  LV: [
    "H",
    "hB",
    "hb",
    "h"
  ],
  TL: [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "zu-ZA": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  CD: [
    "hB",
    "H"
  ],
  IR: [
    "hB",
    "H"
  ],
  "hi-IN": [
    "hB",
    "h",
    "H"
  ],
  "kn-IN": [
    "hB",
    "h",
    "H"
  ],
  "ml-IN": [
    "hB",
    "h",
    "H"
  ],
  "te-IN": [
    "hB",
    "h",
    "H"
  ],
  KH: [
    "hB",
    "h",
    "H",
    "hb"
  ],
  "ta-IN": [
    "hB",
    "h",
    "hb",
    "H"
  ],
  BN: [
    "hb",
    "hB",
    "h",
    "H"
  ],
  MY: [
    "hb",
    "hB",
    "h",
    "H"
  ],
  ET: [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "gu-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "mr-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "pa-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  TW: [
    "hB",
    "hb",
    "h",
    "H"
  ],
  KE: [
    "hB",
    "hb",
    "H",
    "h"
  ],
  MM: [
    "hB",
    "hb",
    "H",
    "h"
  ],
  TZ: [
    "hB",
    "hb",
    "H",
    "h"
  ],
  UG: [
    "hB",
    "hb",
    "H",
    "h"
  ]
};

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
function getBestPattern(skeleton, locale) {
  var skeletonCopy = "";
  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
    var patternChar = skeleton.charAt(patternPos);
    if (patternChar === "j") {
      var extraLength = 0;
      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
        extraLength++;
        patternPos++;
      }
      var hourLen = 1 + (extraLength & 1);
      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
      var dayPeriodChar = "a";
      var hourChar = getDefaultHourSymbolFromLocale(locale);
      if (hourChar == "H" || hourChar == "k") {
        dayPeriodLen = 0;
      }
      while (dayPeriodLen-- > 0) {
        skeletonCopy += dayPeriodChar;
      }
      while (hourLen-- > 0) {
        skeletonCopy = hourChar + skeletonCopy;
      }
    } else if (patternChar === "J") {
      skeletonCopy += "H";
    } else {
      skeletonCopy += patternChar;
    }
  }
  return skeletonCopy;
}
function getDefaultHourSymbolFromLocale(locale) {
  var hourCycle = locale.hourCycle;
  if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
    hourCycle = locale.hourCycles[0];
  }
  if (hourCycle) {
    switch (hourCycle) {
      case "h24":
        return "k";
      case "h23":
        return "H";
      case "h12":
        return "h";
      case "h11":
        return "K";
      default:
        throw new Error("Invalid hourCycle");
    }
  }
  var languageTag = locale.language;
  var regionTag;
  if (languageTag !== "root") {
    regionTag = locale.maximize().region;
  }
  var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
  return hourCycles[0];
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a2;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
  return {start, end};
}
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n10) {
  return typeof n10 === "number" && isFinite(n10) && Math.floor(n10) === n10 && Math.abs(n10) <= 9007199254740991;
};
var REGEX_SUPPORTS_U_AND_Y = true;
try {
  re3 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  REGEX_SUPPORTS_U_AND_Y = ((_a2 = re3.exec("a")) === null || _a2 === void 0 ? void 0 : _a2[0]) === "a";
} catch (_17) {
  REGEX_SUPPORTS_U_AND_Y = false;
}
var re3;
var startsWith = hasNativeStartsWith ? function startsWith2(s10, search, position) {
  return s10.startsWith(search, position);
} : function startsWith3(s10, search, position) {
  return s10.slice(position, position + search.length) === search;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
  var codePoints = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    codePoints[_i2] = arguments[_i2];
  }
  var elements = "";
  var length = codePoints.length;
  var i10 = 0;
  var code3;
  while (length > i10) {
    code3 = codePoints[i10++];
    if (code3 > 1114111)
      throw RangeError(code3 + " is not a valid code point");
    elements += code3 < 65536 ? String.fromCharCode(code3) : String.fromCharCode(((code3 -= 65536) >> 10) + 55296, code3 % 1024 + 56320);
  }
  return elements;
};
var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries2) {
  var obj = {};
  for (var _i2 = 0, entries_1 = entries2; _i2 < entries_1.length; _i2++) {
    var _a4 = entries_1[_i2], k10 = _a4[0], v10 = _a4[1];
    obj[k10] = v10;
  }
  return obj;
};
var codePointAt = hasNativeCodePointAt ? function codePointAt2(s10, index2) {
  return s10.codePointAt(index2);
} : function codePointAt3(s10, index2) {
  var size = s10.length;
  if (index2 < 0 || index2 >= size) {
    return void 0;
  }
  var first = s10.charCodeAt(index2);
  var second;
  return first < 55296 || first > 56319 || index2 + 1 === size || (second = s10.charCodeAt(index2 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
};
var trimStart = hasTrimStart ? function trimStart2(s10) {
  return s10.trimStart();
} : function trimStart3(s10) {
  return s10.replace(SPACE_SEPARATOR_START_REGEX, "");
};
var trimEnd = hasTrimEnd ? function trimEnd2(s10) {
  return s10.trimEnd();
} : function trimEnd3(s10) {
  return s10.replace(SPACE_SEPARATOR_END_REGEX, "");
};
function RE(s10, flag) {
  return new RegExp(s10, flag);
}
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
  IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s10, index2) {
    var _a4;
    IDENTIFIER_PREFIX_RE_1.lastIndex = index2;
    var match = IDENTIFIER_PREFIX_RE_1.exec(s10);
    return (_a4 = match[1]) !== null && _a4 !== void 0 ? _a4 : "";
  };
} else {
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s10, index2) {
    var match = [];
    while (true) {
      var c10 = codePointAt(s10, index2);
      if (c10 === void 0 || _isWhiteSpace(c10) || _isPatternSyntax(c10)) {
        break;
      }
      match.push(c10);
      index2 += c10 >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match);
  };
}
var IDENTIFIER_PREFIX_RE_1;
var Parser = function() {
  function Parser2(message, options) {
    if (options === void 0) {
      options = {};
    }
    this.message = message;
    this.position = {offset: 0, line: 1, column: 1};
    this.ignoreTag = !!options.ignoreTag;
    this.locale = options.locale;
    this.requiresOtherClause = !!options.requiresOtherClause;
    this.shouldParseSkeletons = !!options.shouldParseSkeletons;
  }
  Parser2.prototype.parse = function() {
    if (this.offset() !== 0) {
      throw Error("parser can only be used once");
    }
    return this.parseMessage(0, "", false);
  };
  Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
    var elements = [];
    while (!this.isEOF()) {
      var char = this.char();
      if (char === 123) {
        var result = this.parseArgument(nestingLevel, expectingCloseTag);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else if (char === 125 && nestingLevel > 0) {
        break;
      } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
        var position = this.clonePosition();
        this.bump();
        elements.push({
          type: TYPE.pound,
          location: createLocation(position, this.clonePosition())
        });
      } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
        if (expectingCloseTag) {
          break;
        } else {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
        }
      } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
        var result = this.parseTag(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else {
        var result = this.parseLiteral(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      }
    }
    return {val: elements, err: null};
  };
  Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
    var startPosition = this.clonePosition();
    this.bump();
    var tagName = this.parseTagName();
    this.bumpSpace();
    if (this.bumpIf("/>")) {
      return {
        val: {
          type: TYPE.literal,
          value: "<".concat(tagName, "/>"),
          location: createLocation(startPosition, this.clonePosition())
        },
        err: null
      };
    } else if (this.bumpIf(">")) {
      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
      if (childrenResult.err) {
        return childrenResult;
      }
      var children = childrenResult.val;
      var endTagStartPosition = this.clonePosition();
      if (this.bumpIf("</")) {
        if (this.isEOF() || !_isAlpha(this.char())) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        var closingTagNameStartPosition = this.clonePosition();
        var closingTagName = this.parseTagName();
        if (tagName !== closingTagName) {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (!this.bumpIf(">")) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        return {
          val: {
            type: TYPE.tag,
            value: tagName,
            children,
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else {
        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
      }
    } else {
      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseTagName = function() {
    var startOffset = this.offset();
    this.bump();
    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
      this.bump();
    }
    return this.message.slice(startOffset, this.offset());
  };
  Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
    var start = this.clonePosition();
    var value = "";
    while (true) {
      var parseQuoteResult = this.tryParseQuote(parentArgType);
      if (parseQuoteResult) {
        value += parseQuoteResult;
        continue;
      }
      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
      if (parseUnquotedResult) {
        value += parseUnquotedResult;
        continue;
      }
      var parseLeftAngleResult = this.tryParseLeftAngleBracket();
      if (parseLeftAngleResult) {
        value += parseLeftAngleResult;
        continue;
      }
      break;
    }
    var location2 = createLocation(start, this.clonePosition());
    return {
      val: {type: TYPE.literal, value, location: location2},
      err: null
    };
  };
  Parser2.prototype.tryParseLeftAngleBracket = function() {
    if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
      this.bump();
      return "<";
    }
    return null;
  };
  Parser2.prototype.tryParseQuote = function(parentArgType) {
    if (this.isEOF() || this.char() !== 39) {
      return null;
    }
    switch (this.peek()) {
      case 39:
        this.bump();
        this.bump();
        return "'";
      case 123:
      case 60:
      case 62:
      case 125:
        break;
      case 35:
        if (parentArgType === "plural" || parentArgType === "selectordinal") {
          break;
        }
        return null;
      default:
        return null;
    }
    this.bump();
    var codePoints = [this.char()];
    this.bump();
    while (!this.isEOF()) {
      var ch2 = this.char();
      if (ch2 === 39) {
        if (this.peek() === 39) {
          codePoints.push(39);
          this.bump();
        } else {
          this.bump();
          break;
        }
      } else {
        codePoints.push(ch2);
      }
      this.bump();
    }
    return fromCodePoint.apply(void 0, codePoints);
  };
  Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
    if (this.isEOF()) {
      return null;
    }
    var ch2 = this.char();
    if (ch2 === 60 || ch2 === 123 || ch2 === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch2 === 125 && nestingLevel > 0) {
      return null;
    } else {
      this.bump();
      return fromCodePoint(ch2);
    }
  };
  Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
    var openingBracePosition = this.clonePosition();
    this.bump();
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    if (this.char() === 125) {
      this.bump();
      return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    var value = this.parseIdentifierIfPossible().value;
    if (!value) {
      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    switch (this.char()) {
      case 125: {
        this.bump();
        return {
          val: {
            type: TYPE.argument,
            value,
            location: createLocation(openingBracePosition, this.clonePosition())
          },
          err: null
        };
      }
      case 44: {
        this.bump();
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
      }
      default:
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseIdentifierIfPossible = function() {
    var startingPosition = this.clonePosition();
    var startOffset = this.offset();
    var value = matchIdentifierAtIndex(this.message, startOffset);
    var endOffset = startOffset + value.length;
    this.bumpTo(endOffset);
    var endPosition = this.clonePosition();
    var location2 = createLocation(startingPosition, endPosition);
    return {value, location: location2};
  };
  Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
    var _a4;
    var typeStartPosition = this.clonePosition();
    var argType = this.parseIdentifierIfPossible().value;
    var typeEndPosition = this.clonePosition();
    switch (argType) {
      case "":
        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      case "number":
      case "date":
      case "time": {
        this.bumpSpace();
        var styleAndLocation = null;
        if (this.bumpIf(",")) {
          this.bumpSpace();
          var styleStartPosition = this.clonePosition();
          var result = this.parseSimpleArgStyleIfPossible();
          if (result.err) {
            return result;
          }
          var style = trimEnd(result.val);
          if (style.length === 0) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          var styleLocation = createLocation(styleStartPosition, this.clonePosition());
          styleAndLocation = {style, styleLocation};
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_1 = createLocation(openingBracePosition, this.clonePosition());
        if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
          var skeleton = trimStart(styleAndLocation.style.slice(2));
          if (argType === "number") {
            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
            if (result.err) {
              return result;
            }
            return {
              val: {type: TYPE.number, value, location: location_1, style: result.val},
              err: null
            };
          } else {
            if (skeleton.length === 0) {
              return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
            }
            var dateTimePattern = skeleton;
            if (this.locale) {
              dateTimePattern = getBestPattern(skeleton, this.locale);
            }
            var style = {
              type: SKELETON_TYPE.dateTime,
              pattern: dateTimePattern,
              location: styleAndLocation.styleLocation,
              parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
            };
            var type = argType === "date" ? TYPE.date : TYPE.time;
            return {
              val: {type, value, location: location_1, style},
              err: null
            };
          }
        }
        return {
          val: {
            type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
            value,
            location: location_1,
            style: (_a4 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a4 !== void 0 ? _a4 : null
          },
          err: null
        };
      }
      case "plural":
      case "selectordinal":
      case "select": {
        var typeEndPosition_1 = this.clonePosition();
        this.bumpSpace();
        if (!this.bumpIf(",")) {
          return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign3({}, typeEndPosition_1)));
        }
        this.bumpSpace();
        var identifierAndLocation = this.parseIdentifierIfPossible();
        var pluralOffset = 0;
        if (argType !== "select" && identifierAndLocation.value === "offset") {
          if (!this.bumpIf(":")) {
            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          this.bumpSpace();
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
          if (result.err) {
            return result;
          }
          this.bumpSpace();
          identifierAndLocation = this.parseIdentifierIfPossible();
          pluralOffset = result.val;
        }
        var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
        if (optionsResult.err) {
          return optionsResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_2 = createLocation(openingBracePosition, this.clonePosition());
        if (argType === "select") {
          return {
            val: {
              type: TYPE.select,
              value,
              options: fromEntries(optionsResult.val),
              location: location_2
            },
            err: null
          };
        } else {
          return {
            val: {
              type: TYPE.plural,
              value,
              options: fromEntries(optionsResult.val),
              offset: pluralOffset,
              pluralType: argType === "plural" ? "cardinal" : "ordinal",
              location: location_2
            },
            err: null
          };
        }
      }
      default:
        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
    }
  };
  Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
    if (this.isEOF() || this.char() !== 125) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bump();
    return {val: true, err: null};
  };
  Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
    var nestedBraces = 0;
    var startPosition = this.clonePosition();
    while (!this.isEOF()) {
      var ch2 = this.char();
      switch (ch2) {
        case 39: {
          this.bump();
          var apostrophePosition = this.clonePosition();
          if (!this.bumpUntil("'")) {
            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
          }
          this.bump();
          break;
        }
        case 123: {
          nestedBraces += 1;
          this.bump();
          break;
        }
        case 125: {
          if (nestedBraces > 0) {
            nestedBraces -= 1;
          } else {
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null
            };
          }
          break;
        }
        default:
          this.bump();
          break;
      }
    }
    return {
      val: this.message.slice(startPosition.offset, this.offset()),
      err: null
    };
  };
  Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
    var tokens = [];
    try {
      tokens = parseNumberSkeletonFromString(skeleton);
    } catch (e14) {
      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
    }
    return {
      val: {
        type: SKELETON_TYPE.number,
        tokens,
        location: location2,
        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
      },
      err: null
    };
  };
  Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
    var _a4;
    var hasOtherClause = false;
    var options = [];
    var parsedSelectors = new Set();
    var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
    while (true) {
      if (selector.length === 0) {
        var startPosition = this.clonePosition();
        if (parentArgType !== "select" && this.bumpIf("=")) {
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
          if (result.err) {
            return result;
          }
          selectorLocation = createLocation(startPosition, this.clonePosition());
          selector = this.message.slice(startPosition.offset, this.offset());
        } else {
          break;
        }
      }
      if (parsedSelectors.has(selector)) {
        return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
      }
      if (selector === "other") {
        hasOtherClause = true;
      }
      this.bumpSpace();
      var openingBracePosition = this.clonePosition();
      if (!this.bumpIf("{")) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
      }
      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
      if (fragmentResult.err) {
        return fragmentResult;
      }
      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
      if (argCloseResult.err) {
        return argCloseResult;
      }
      options.push([
        selector,
        {
          value: fragmentResult.val,
          location: createLocation(openingBracePosition, this.clonePosition())
        }
      ]);
      parsedSelectors.add(selector);
      this.bumpSpace();
      _a4 = this.parseIdentifierIfPossible(), selector = _a4.value, selectorLocation = _a4.location;
    }
    if (options.length === 0) {
      return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
    }
    if (this.requiresOtherClause && !hasOtherClause) {
      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
    }
    return {val: options, err: null};
  };
  Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
    var sign = 1;
    var startingPosition = this.clonePosition();
    if (this.bumpIf("+")) {
    } else if (this.bumpIf("-")) {
      sign = -1;
    }
    var hasDigits = false;
    var decimal = 0;
    while (!this.isEOF()) {
      var ch2 = this.char();
      if (ch2 >= 48 && ch2 <= 57) {
        hasDigits = true;
        decimal = decimal * 10 + (ch2 - 48);
        this.bump();
      } else {
        break;
      }
    }
    var location2 = createLocation(startingPosition, this.clonePosition());
    if (!hasDigits) {
      return this.error(expectNumberError, location2);
    }
    decimal *= sign;
    if (!isSafeInteger(decimal)) {
      return this.error(invalidNumberError, location2);
    }
    return {val: decimal, err: null};
  };
  Parser2.prototype.offset = function() {
    return this.position.offset;
  };
  Parser2.prototype.isEOF = function() {
    return this.offset() === this.message.length;
  };
  Parser2.prototype.clonePosition = function() {
    return {
      offset: this.position.offset,
      line: this.position.line,
      column: this.position.column
    };
  };
  Parser2.prototype.char = function() {
    var offset = this.position.offset;
    if (offset >= this.message.length) {
      throw Error("out of bound");
    }
    var code3 = codePointAt(this.message, offset);
    if (code3 === void 0) {
      throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
    }
    return code3;
  };
  Parser2.prototype.error = function(kind, location2) {
    return {
      val: null,
      err: {
        kind,
        message: this.message,
        location: location2
      }
    };
  };
  Parser2.prototype.bump = function() {
    if (this.isEOF()) {
      return;
    }
    var code3 = this.char();
    if (code3 === 10) {
      this.position.line += 1;
      this.position.column = 1;
      this.position.offset += 1;
    } else {
      this.position.column += 1;
      this.position.offset += code3 < 65536 ? 1 : 2;
    }
  };
  Parser2.prototype.bumpIf = function(prefix) {
    if (startsWith(this.message, prefix, this.offset())) {
      for (var i10 = 0; i10 < prefix.length; i10++) {
        this.bump();
      }
      return true;
    }
    return false;
  };
  Parser2.prototype.bumpUntil = function(pattern) {
    var currentOffset = this.offset();
    var index2 = this.message.indexOf(pattern, currentOffset);
    if (index2 >= 0) {
      this.bumpTo(index2);
      return true;
    } else {
      this.bumpTo(this.message.length);
      return false;
    }
  };
  Parser2.prototype.bumpTo = function(targetOffset) {
    if (this.offset() > targetOffset) {
      throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
    }
    targetOffset = Math.min(targetOffset, this.message.length);
    while (true) {
      var offset = this.offset();
      if (offset === targetOffset) {
        break;
      }
      if (offset > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
      }
      this.bump();
      if (this.isEOF()) {
        break;
      }
    }
  };
  Parser2.prototype.bumpSpace = function() {
    while (!this.isEOF() && _isWhiteSpace(this.char())) {
      this.bump();
    }
  };
  Parser2.prototype.peek = function() {
    if (this.isEOF()) {
      return null;
    }
    var code3 = this.char();
    var offset = this.offset();
    var nextCode = this.message.charCodeAt(offset + (code3 >= 65536 ? 2 : 1));
    return nextCode !== null && nextCode !== void 0 ? nextCode : null;
  };
  return Parser2;
}();
function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
}
function _isPotentialElementNameChar(c10) {
  return c10 === 45 || c10 === 46 || c10 >= 48 && c10 <= 57 || c10 === 95 || c10 >= 97 && c10 <= 122 || c10 >= 65 && c10 <= 90 || c10 == 183 || c10 >= 192 && c10 <= 214 || c10 >= 216 && c10 <= 246 || c10 >= 248 && c10 <= 893 || c10 >= 895 && c10 <= 8191 || c10 >= 8204 && c10 <= 8205 || c10 >= 8255 && c10 <= 8256 || c10 >= 8304 && c10 <= 8591 || c10 >= 11264 && c10 <= 12271 || c10 >= 12289 && c10 <= 55295 || c10 >= 63744 && c10 <= 64975 || c10 >= 65008 && c10 <= 65533 || c10 >= 65536 && c10 <= 983039;
}
function _isWhiteSpace(c10) {
  return c10 >= 9 && c10 <= 13 || c10 === 32 || c10 === 133 || c10 >= 8206 && c10 <= 8207 || c10 === 8232 || c10 === 8233;
}
function _isPatternSyntax(c10) {
  return c10 >= 33 && c10 <= 35 || c10 === 36 || c10 >= 37 && c10 <= 39 || c10 === 40 || c10 === 41 || c10 === 42 || c10 === 43 || c10 === 44 || c10 === 45 || c10 >= 46 && c10 <= 47 || c10 >= 58 && c10 <= 59 || c10 >= 60 && c10 <= 62 || c10 >= 63 && c10 <= 64 || c10 === 91 || c10 === 92 || c10 === 93 || c10 === 94 || c10 === 96 || c10 === 123 || c10 === 124 || c10 === 125 || c10 === 126 || c10 === 161 || c10 >= 162 && c10 <= 165 || c10 === 166 || c10 === 167 || c10 === 169 || c10 === 171 || c10 === 172 || c10 === 174 || c10 === 176 || c10 === 177 || c10 === 182 || c10 === 187 || c10 === 191 || c10 === 215 || c10 === 247 || c10 >= 8208 && c10 <= 8213 || c10 >= 8214 && c10 <= 8215 || c10 === 8216 || c10 === 8217 || c10 === 8218 || c10 >= 8219 && c10 <= 8220 || c10 === 8221 || c10 === 8222 || c10 === 8223 || c10 >= 8224 && c10 <= 8231 || c10 >= 8240 && c10 <= 8248 || c10 === 8249 || c10 === 8250 || c10 >= 8251 && c10 <= 8254 || c10 >= 8257 && c10 <= 8259 || c10 === 8260 || c10 === 8261 || c10 === 8262 || c10 >= 8263 && c10 <= 8273 || c10 === 8274 || c10 === 8275 || c10 >= 8277 && c10 <= 8286 || c10 >= 8592 && c10 <= 8596 || c10 >= 8597 && c10 <= 8601 || c10 >= 8602 && c10 <= 8603 || c10 >= 8604 && c10 <= 8607 || c10 === 8608 || c10 >= 8609 && c10 <= 8610 || c10 === 8611 || c10 >= 8612 && c10 <= 8613 || c10 === 8614 || c10 >= 8615 && c10 <= 8621 || c10 === 8622 || c10 >= 8623 && c10 <= 8653 || c10 >= 8654 && c10 <= 8655 || c10 >= 8656 && c10 <= 8657 || c10 === 8658 || c10 === 8659 || c10 === 8660 || c10 >= 8661 && c10 <= 8691 || c10 >= 8692 && c10 <= 8959 || c10 >= 8960 && c10 <= 8967 || c10 === 8968 || c10 === 8969 || c10 === 8970 || c10 === 8971 || c10 >= 8972 && c10 <= 8991 || c10 >= 8992 && c10 <= 8993 || c10 >= 8994 && c10 <= 9e3 || c10 === 9001 || c10 === 9002 || c10 >= 9003 && c10 <= 9083 || c10 === 9084 || c10 >= 9085 && c10 <= 9114 || c10 >= 9115 && c10 <= 9139 || c10 >= 9140 && c10 <= 9179 || c10 >= 9180 && c10 <= 9185 || c10 >= 9186 && c10 <= 9254 || c10 >= 9255 && c10 <= 9279 || c10 >= 9280 && c10 <= 9290 || c10 >= 9291 && c10 <= 9311 || c10 >= 9472 && c10 <= 9654 || c10 === 9655 || c10 >= 9656 && c10 <= 9664 || c10 === 9665 || c10 >= 9666 && c10 <= 9719 || c10 >= 9720 && c10 <= 9727 || c10 >= 9728 && c10 <= 9838 || c10 === 9839 || c10 >= 9840 && c10 <= 10087 || c10 === 10088 || c10 === 10089 || c10 === 10090 || c10 === 10091 || c10 === 10092 || c10 === 10093 || c10 === 10094 || c10 === 10095 || c10 === 10096 || c10 === 10097 || c10 === 10098 || c10 === 10099 || c10 === 10100 || c10 === 10101 || c10 >= 10132 && c10 <= 10175 || c10 >= 10176 && c10 <= 10180 || c10 === 10181 || c10 === 10182 || c10 >= 10183 && c10 <= 10213 || c10 === 10214 || c10 === 10215 || c10 === 10216 || c10 === 10217 || c10 === 10218 || c10 === 10219 || c10 === 10220 || c10 === 10221 || c10 === 10222 || c10 === 10223 || c10 >= 10224 && c10 <= 10239 || c10 >= 10240 && c10 <= 10495 || c10 >= 10496 && c10 <= 10626 || c10 === 10627 || c10 === 10628 || c10 === 10629 || c10 === 10630 || c10 === 10631 || c10 === 10632 || c10 === 10633 || c10 === 10634 || c10 === 10635 || c10 === 10636 || c10 === 10637 || c10 === 10638 || c10 === 10639 || c10 === 10640 || c10 === 10641 || c10 === 10642 || c10 === 10643 || c10 === 10644 || c10 === 10645 || c10 === 10646 || c10 === 10647 || c10 === 10648 || c10 >= 10649 && c10 <= 10711 || c10 === 10712 || c10 === 10713 || c10 === 10714 || c10 === 10715 || c10 >= 10716 && c10 <= 10747 || c10 === 10748 || c10 === 10749 || c10 >= 10750 && c10 <= 11007 || c10 >= 11008 && c10 <= 11055 || c10 >= 11056 && c10 <= 11076 || c10 >= 11077 && c10 <= 11078 || c10 >= 11079 && c10 <= 11084 || c10 >= 11085 && c10 <= 11123 || c10 >= 11124 && c10 <= 11125 || c10 >= 11126 && c10 <= 11157 || c10 === 11158 || c10 >= 11159 && c10 <= 11263 || c10 >= 11776 && c10 <= 11777 || c10 === 11778 || c10 === 11779 || c10 === 11780 || c10 === 11781 || c10 >= 11782 && c10 <= 11784 || c10 === 11785 || c10 === 11786 || c10 === 11787 || c10 === 11788 || c10 === 11789 || c10 >= 11790 && c10 <= 11798 || c10 === 11799 || c10 >= 11800 && c10 <= 11801 || c10 === 11802 || c10 === 11803 || c10 === 11804 || c10 === 11805 || c10 >= 11806 && c10 <= 11807 || c10 === 11808 || c10 === 11809 || c10 === 11810 || c10 === 11811 || c10 === 11812 || c10 === 11813 || c10 === 11814 || c10 === 11815 || c10 === 11816 || c10 === 11817 || c10 >= 11818 && c10 <= 11822 || c10 === 11823 || c10 >= 11824 && c10 <= 11833 || c10 >= 11834 && c10 <= 11835 || c10 >= 11836 && c10 <= 11839 || c10 === 11840 || c10 === 11841 || c10 === 11842 || c10 >= 11843 && c10 <= 11855 || c10 >= 11856 && c10 <= 11857 || c10 === 11858 || c10 >= 11859 && c10 <= 11903 || c10 >= 12289 && c10 <= 12291 || c10 === 12296 || c10 === 12297 || c10 === 12298 || c10 === 12299 || c10 === 12300 || c10 === 12301 || c10 === 12302 || c10 === 12303 || c10 === 12304 || c10 === 12305 || c10 >= 12306 && c10 <= 12307 || c10 === 12308 || c10 === 12309 || c10 === 12310 || c10 === 12311 || c10 === 12312 || c10 === 12313 || c10 === 12314 || c10 === 12315 || c10 === 12316 || c10 === 12317 || c10 >= 12318 && c10 <= 12319 || c10 === 12320 || c10 === 12336 || c10 === 64830 || c10 === 64831 || c10 >= 65093 && c10 <= 65094;
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js
function pruneLocation(els) {
  els.forEach(function(el2) {
    delete el2.location;
    if (isSelectElement(el2) || isPluralElement(el2)) {
      for (var k10 in el2.options) {
        delete el2.options[k10].location;
        pruneLocation(el2.options[k10].value);
      }
    } else if (isNumberElement(el2) && isNumberSkeleton(el2.style)) {
      delete el2.style.location;
    } else if ((isDateElement(el2) || isTimeElement(el2)) && isDateTimeSkeleton(el2.style)) {
      delete el2.style.location;
    } else if (isTagElement(el2)) {
      pruneLocation(el2.children);
    }
  });
}
function parse2(message, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = __assign3({shouldParseSkeletons: true, requiresOtherClause: true}, opts);
  var result = new Parser(message, opts).parse();
  if (result.err) {
    var error = SyntaxError(ErrorKind[result.err.kind]);
    error.location = result.err.location;
    error.originalMessage = result.err.message;
    throw error;
  }
  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }
  return result.val;
}

// ../../node_modules/@formatjs/fast-memoize/lib/index.js
function memoize(fn, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
  return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
  return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
  return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
var serializerDefault = function() {
  return JSON.stringify(arguments);
};
function ObjectWithoutPrototypeCache() {
  this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function(key) {
  return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
  this.cache[key] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};

// ../../node_modules/intl-messageformat/lib/src/error.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
  ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
  ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = function(_super) {
  __extends(FormatError2, _super);
  function FormatError2(msg, code3, originalMessage) {
    var _this = _super.call(this, msg) || this;
    _this.code = code3;
    _this.originalMessage = originalMessage;
    return _this;
  }
  FormatError2.prototype.toString = function() {
    return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
  };
  return FormatError2;
}(Error);
var InvalidValueError = function(_super) {
  __extends(InvalidValueError2, _super);
  function InvalidValueError2(variableId, value, options, originalMessage) {
    return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueError2;
}(FormatError);
var InvalidValueTypeError = function(_super) {
  __extends(InvalidValueTypeError2, _super);
  function InvalidValueTypeError2(value, type, originalMessage) {
    return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueTypeError2;
}(FormatError);
var MissingValueError = function(_super) {
  __extends(MissingValueError2, _super);
  function MissingValueError2(variableId, originalMessage) {
    return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
  }
  return MissingValueError2;
}(FormatError);

// ../../node_modules/intl-messageformat/lib/src/formatters.js
var PART_TYPE;
(function(PART_TYPE2) {
  PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
  PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }
  return parts.reduce(function(all, part) {
    var lastPart = all[all.length - 1];
    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all.push(part);
    } else {
      lastPart.value += part.value;
    }
    return all;
  }, []);
}
function isFormatXMLElementFn(el2) {
  return typeof el2 === "function";
}
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [
      {
        type: PART_TYPE.literal,
        value: els[0].value
      }
    ];
  }
  var result = [];
  for (var _i2 = 0, els_1 = els; _i2 < els_1.length; _i2++) {
    var el2 = els_1[_i2];
    if (isLiteralElement(el2)) {
      result.push({
        type: PART_TYPE.literal,
        value: el2.value
      });
      continue;
    }
    if (isPoundElement(el2)) {
      if (typeof currentPluralValue === "number") {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }
      continue;
    }
    var varName = el2.value;
    if (!(values && varName in values)) {
      throw new MissingValueError(varName, originalMessage);
    }
    var value = values[varName];
    if (isArgumentElement(el2)) {
      if (!value || typeof value === "string" || typeof value === "number") {
        value = typeof value === "string" || typeof value === "number" ? String(value) : "";
      }
      result.push({
        type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
        value
      });
      continue;
    }
    if (isDateElement(el2)) {
      var style = typeof el2.style === "string" ? formats.date[el2.style] : isDateTimeSkeleton(el2.style) ? el2.style.parsedOptions : void 0;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTimeElement(el2)) {
      var style = typeof el2.style === "string" ? formats.time[el2.style] : isDateTimeSkeleton(el2.style) ? el2.style.parsedOptions : formats.time.medium;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isNumberElement(el2)) {
      var style = typeof el2.style === "string" ? formats.number[el2.style] : isNumberSkeleton(el2.style) ? el2.style.parsedOptions : void 0;
      if (style && style.scale) {
        value = value * (style.scale || 1);
      }
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTagElement(el2)) {
      var children = el2.children, value_1 = el2.value;
      var formatFn = values[value_1];
      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, "function", originalMessage);
      }
      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
      var chunks = formatFn(parts.map(function(p10) {
        return p10.value;
      }));
      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }
      result.push.apply(result, chunks.map(function(c10) {
        return {
          type: typeof c10 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: c10
        };
      }));
    }
    if (isSelectElement(el2)) {
      var opt = el2.options[value] || el2.options.other;
      if (!opt) {
        throw new InvalidValueError(el2.value, value, Object.keys(el2.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }
    if (isPluralElement(el2)) {
      var opt = el2.options["=".concat(value)];
      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
        }
        var rule = formatters.getPluralRules(locales, {type: el2.pluralType}).select(value - (el2.offset || 0));
        opt = el2.options[rule] || el2.options.other;
      }
      if (!opt) {
        throw new InvalidValueError(el2.value, value, Object.keys(el2.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el2.offset || 0)));
      continue;
    }
  }
  return mergeLiteral(result);
}

// ../../node_modules/intl-messageformat/lib/src/core.js
function mergeConfig(c12, c23) {
  if (!c23) {
    return c12;
  }
  return __assign3(__assign3(__assign3({}, c12 || {}), c23 || {}), Object.keys(c12).reduce(function(all, k10) {
    all[k10] = __assign3(__assign3({}, c12[k10]), c23[k10] || {});
    return all;
  }, {}));
}
function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }
  return Object.keys(defaultConfig).reduce(function(all, k10) {
    all[k10] = mergeConfig(defaultConfig[k10], configs[k10]);
    return all;
  }, __assign3({}, defaultConfig));
}
function createFastMemoizeCache(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }
  return {
    getNumberFormat: memoize(function() {
      var _a4;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a4 = Intl.NumberFormat).bind.apply(_a4, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize(function() {
      var _a4;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a4 = Intl.DateTimeFormat).bind.apply(_a4, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize(function() {
      var _a4;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new ((_a4 = Intl.PluralRules).bind.apply(_a4, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.pluralRules),
      strategy: strategies.variadic
    })
  };
}
var IntlMessageFormat = function() {
  function IntlMessageFormat2(message, locales, overrideFormats, opts) {
    var _this = this;
    if (locales === void 0) {
      locales = IntlMessageFormat2.defaultLocale;
    }
    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
    this.format = function(values) {
      var parts = _this.formatToParts(values);
      if (parts.length === 1) {
        return parts[0].value;
      }
      var result = parts.reduce(function(all, part) {
        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
          all.push(part.value);
        } else {
          all[all.length - 1] += part.value;
        }
        return all;
      }, []);
      if (result.length <= 1) {
        return result[0] || "";
      }
      return result;
    };
    this.formatToParts = function(values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
    };
    this.resolvedOptions = function() {
      var _a4;
      return {
        locale: ((_a4 = _this.resolvedLocale) === null || _a4 === void 0 ? void 0 : _a4.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };
    this.getAst = function() {
      return _this.ast;
    };
    this.locales = locales;
    this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
    if (typeof message === "string") {
      this.message = message;
      if (!IntlMessageFormat2.__parse) {
        throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
      }
      this.ast = IntlMessageFormat2.__parse(message, {
        ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
        locale: this.resolvedLocale
      });
    } else {
      this.ast = message;
    }
    if (!Array.isArray(this.ast)) {
      throw new TypeError("A message must be provided as a String or AST.");
    }
    this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }
  Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
    get: function() {
      if (!IntlMessageFormat2.memoizedDefaultLocale) {
        IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
      }
      return IntlMessageFormat2.memoizedDefaultLocale;
    },
    enumerable: false,
    configurable: true
  });
  IntlMessageFormat2.memoizedDefaultLocale = null;
  IntlMessageFormat2.resolveLocale = function(locales) {
    if (typeof Intl.Locale === "undefined") {
      return;
    }
    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
    if (supportedLocales.length > 0) {
      return new Intl.Locale(supportedLocales[0]);
    }
    return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
  };
  IntlMessageFormat2.__parse = parse2;
  IntlMessageFormat2.formats = {
    number: {
      integer: {
        maximumFractionDigits: 0
      },
      currency: {
        style: "currency"
      },
      percent: {
        style: "percent"
      }
    },
    date: {
      short: {
        month: "numeric",
        day: "numeric",
        year: "2-digit"
      },
      medium: {
        month: "short",
        day: "numeric",
        year: "numeric"
      },
      long: {
        month: "long",
        day: "numeric",
        year: "numeric"
      },
      full: {
        weekday: "long",
        month: "long",
        day: "numeric",
        year: "numeric"
      }
    },
    time: {
      short: {
        hour: "numeric",
        minute: "numeric"
      },
      medium: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      long: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      },
      full: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      }
    }
  };
  return IntlMessageFormat2;
}();

// ../../node_modules/@formatjs/intl/lib/src/error.js
var IntlErrorCode;
(function(IntlErrorCode2) {
  IntlErrorCode2["FORMAT_ERROR"] = "FORMAT_ERROR";
  IntlErrorCode2["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
  IntlErrorCode2["INVALID_CONFIG"] = "INVALID_CONFIG";
  IntlErrorCode2["MISSING_DATA"] = "MISSING_DATA";
  IntlErrorCode2["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
})(IntlErrorCode || (IntlErrorCode = {}));
var IntlError = function(_super) {
  __extends(IntlError2, _super);
  function IntlError2(code3, message, exception) {
    var _this = this;
    var err = exception ? exception instanceof Error ? exception : new Error(String(exception)) : void 0;
    _this = _super.call(this, "[@formatjs/intl Error ".concat(code3, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : "")) || this;
    _this.code = code3;
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(_this, IntlError2);
    }
    return _this;
  }
  return IntlError2;
}(Error);
var UnsupportedFormatterError = function(_super) {
  __extends(UnsupportedFormatterError2, _super);
  function UnsupportedFormatterError2(message, exception) {
    return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;
  }
  return UnsupportedFormatterError2;
}(IntlError);
var InvalidConfigError = function(_super) {
  __extends(InvalidConfigError2, _super);
  function InvalidConfigError2(message, exception) {
    return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;
  }
  return InvalidConfigError2;
}(IntlError);
var MissingDataError = function(_super) {
  __extends(MissingDataError2, _super);
  function MissingDataError2(message, exception) {
    return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;
  }
  return MissingDataError2;
}(IntlError);
var IntlFormatError = function(_super) {
  __extends(IntlFormatError2, _super);
  function IntlFormatError2(message, locale, exception) {
    return _super.call(this, IntlErrorCode.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale, "\n"), exception) || this;
  }
  return IntlFormatError2;
}(IntlError);
var MessageFormatError = function(_super) {
  __extends(MessageFormatError2, _super);
  function MessageFormatError2(message, locale, descriptor, exception) {
    var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale, exception) || this;
    _this.descriptor = descriptor;
    return _this;
  }
  return MessageFormatError2;
}(IntlFormatError);
var MissingTranslationError = function(_super) {
  __extends(MissingTranslationError2, _super);
  function MissingTranslationError2(descriptor, locale) {
    var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, 'Missing message: "'.concat(descriptor.id, '" for locale "').concat(locale, '", using ').concat(descriptor.defaultMessage ? "default message (".concat(typeof descriptor.defaultMessage === "string" ? descriptor.defaultMessage : descriptor.defaultMessage.map(function(e14) {
      var _a4;
      return (_a4 = e14.value) !== null && _a4 !== void 0 ? _a4 : JSON.stringify(e14);
    }).join(), ")") : "id", " as fallback.")) || this;
    _this.descriptor = descriptor;
    return _this;
  }
  return MissingTranslationError2;
}(IntlError);

// ../../node_modules/@formatjs/intl/lib/src/utils.js
function filterProps(props, allowlist, defaults) {
  if (defaults === void 0) {
    defaults = {};
  }
  return allowlist.reduce(function(filtered, name) {
    if (name in props) {
      filtered[name] = props[name];
    } else if (name in defaults) {
      filtered[name] = defaults[name];
    }
    return filtered;
  }, {});
}
var defaultErrorHandler = function(error) {
  if (true) {
    console.error(error);
  }
};
var defaultWarnHandler = function(warning) {
  if (true) {
    console.warn(warning);
  }
};
var DEFAULT_INTL_CONFIG = {
  formats: {},
  messages: {},
  timeZone: void 0,
  defaultLocale: "en",
  defaultFormats: {},
  fallbackOnEmptyString: true,
  onError: defaultErrorHandler,
  onWarn: defaultWarnHandler
};
function createIntlCache() {
  return {
    dateTime: {},
    number: {},
    message: {},
    relativeTime: {},
    pluralRules: {},
    list: {},
    displayNames: {}
  };
}
function createFastMemoizeCache2(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createFormatters(cache) {
  if (cache === void 0) {
    cache = createIntlCache();
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  var ListFormat = Intl.ListFormat;
  var DisplayNames = Intl.DisplayNames;
  var getDateTimeFormat = memoize(function() {
    var _a4;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a4 = Intl.DateTimeFormat).bind.apply(_a4, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.dateTime),
    strategy: strategies.variadic
  });
  var getNumberFormat = memoize(function() {
    var _a4;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a4 = Intl.NumberFormat).bind.apply(_a4, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.number),
    strategy: strategies.variadic
  });
  var getPluralRules = memoize(function() {
    var _a4;
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    return new ((_a4 = Intl.PluralRules).bind.apply(_a4, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.pluralRules),
    strategy: strategies.variadic
  });
  return {
    getDateTimeFormat,
    getNumberFormat,
    getMessageFormat: memoize(function(message, locales, overrideFormats, opts) {
      return new IntlMessageFormat(message, locales, overrideFormats, __assign3({formatters: {
        getNumberFormat,
        getDateTimeFormat,
        getPluralRules
      }}, opts || {}));
    }, {
      cache: createFastMemoizeCache2(cache.message),
      strategy: strategies.variadic
    }),
    getRelativeTimeFormat: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.relativeTime),
      strategy: strategies.variadic
    }),
    getPluralRules,
    getListFormat: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.list),
      strategy: strategies.variadic
    }),
    getDisplayNames: memoize(function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.displayNames),
      strategy: strategies.variadic
    })
  };
}
function getNamedFormat(formats, type, name, onError) {
  var formatType = formats && formats[type];
  var format;
  if (formatType) {
    format = formatType[name];
  }
  if (format) {
    return format;
  }
  onError(new UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
}

// ../../node_modules/@formatjs/intl/lib/src/message.js
function setTimeZoneInOptions(opts, timeZone) {
  return Object.keys(opts).reduce(function(all, k10) {
    all[k10] = __assign3({timeZone}, opts[k10]);
    return all;
  }, {});
}
function deepMergeOptions(opts1, opts2) {
  var keys = Object.keys(__assign3(__assign3({}, opts1), opts2));
  return keys.reduce(function(all, k10) {
    all[k10] = __assign3(__assign3({}, opts1[k10] || {}), opts2[k10] || {});
    return all;
  }, {});
}
function deepMergeFormatsAndSetTimeZone(f12, timeZone) {
  if (!timeZone) {
    return f12;
  }
  var mfFormats = IntlMessageFormat.formats;
  return __assign3(__assign3(__assign3({}, mfFormats), f12), {date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f12.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f12.time || {}, timeZone))});
}
var formatMessage = function(_a4, state, messageDescriptor, values, opts) {
  var locale = _a4.locale, formats = _a4.formats, messages = _a4.messages, defaultLocale = _a4.defaultLocale, defaultFormats = _a4.defaultFormats, fallbackOnEmptyString = _a4.fallbackOnEmptyString, onError = _a4.onError, timeZone = _a4.timeZone, defaultRichTextElements = _a4.defaultRichTextElements;
  if (messageDescriptor === void 0) {
    messageDescriptor = {id: ""};
  }
  var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
  invariant(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
  var id2 = String(msgId);
  var message = messages && Object.prototype.hasOwnProperty.call(messages, id2) && messages[id2];
  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {
    return message[0].value;
  }
  if (!values && message && typeof message === "string" && !defaultRichTextElements) {
    return message.replace(/'\{(.*?)\}'/gi, "{$1}");
  }
  values = __assign3(__assign3({}, defaultRichTextElements), values || {});
  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
  if (!message) {
    if (fallbackOnEmptyString === false && message === "") {
      return message;
    }
    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
      onError(new MissingTranslationError(messageDescriptor, locale));
    }
    if (defaultMessage) {
      try {
        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
        return formatter.format(values);
      } catch (e14) {
        onError(new MessageFormatError('Error formatting default message for: "'.concat(id2, '", rendering default message verbatim'), locale, messageDescriptor, e14));
        return typeof defaultMessage === "string" ? defaultMessage : id2;
      }
    }
    return id2;
  }
  try {
    var formatter = state.getMessageFormat(message, locale, formats, __assign3({formatters: state}, opts || {}));
    return formatter.format(values);
  } catch (e14) {
    onError(new MessageFormatError('Error formatting message: "'.concat(id2, '", using ').concat(defaultMessage ? "default message" : "id", " as fallback."), locale, messageDescriptor, e14));
  }
  if (defaultMessage) {
    try {
      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
      return formatter.format(values);
    } catch (e14) {
      onError(new MessageFormatError('Error formatting the default message for: "'.concat(id2, '", rendering message verbatim'), locale, messageDescriptor, e14));
    }
  }
  if (typeof message === "string") {
    return message;
  }
  if (typeof defaultMessage === "string") {
    return defaultMessage;
  }
  return id2;
};

// ../../node_modules/@formatjs/intl/lib/src/dateTime.js
var DATE_TIME_FORMAT_OPTIONS = [
  "formatMatcher",
  "timeZone",
  "hour12",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "hourCycle",
  "dateStyle",
  "timeStyle",
  "calendar",
  "numberingSystem",
  "fractionalSecondDigits"
];
function getFormatter(_a4, type, getDateTimeFormat, options) {
  var locale = _a4.locale, formats = _a4.formats, onError = _a4.onError, timeZone = _a4.timeZone;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = __assign3(__assign3({}, timeZone && {timeZone}), format && getNamedFormat(formats, type, format, onError));
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
  if (type === "time" && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {
    filteredOptions = __assign3(__assign3({}, filteredOptions), {hour: "numeric", minute: "numeric"});
  }
  return getDateTimeFormat(locale, filteredOptions);
}
function formatDate(config, getDateTimeFormat) {
  var _a4 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a4[_i2 - 2] = arguments[_i2];
  }
  var value = _a4[0], _b2 = _a4[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options).format(date);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e14));
  }
  return String(date);
}
function formatTime(config, getDateTimeFormat) {
  var _a4 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a4[_i2 - 2] = arguments[_i2];
  }
  var value = _a4[0], _b2 = _a4[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options).format(date);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e14));
  }
  return String(date);
}
function formatDateTimeRange(config, getDateTimeFormat) {
  var _a4 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a4[_i2 - 2] = arguments[_i2];
  }
  var from = _a4[0], to2 = _a4[1], _b2 = _a4[2], options = _b2 === void 0 ? {} : _b2;
  var timeZone = config.timeZone, locale = config.locale, onError = config.onError;
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? {timeZone} : {});
  try {
    return getDateTimeFormat(locale, filteredOptions).formatRange(from, to2);
  } catch (e14) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date time range.", e14));
  }
  return String(from);
}
function formatDateToParts(config, getDateTimeFormat) {
  var _a4 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a4[_i2 - 2] = arguments[_i2];
  }
  var value = _a4[0], _b2 = _a4[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options).formatToParts(date);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e14));
  }
  return [];
}
function formatTimeToParts(config, getDateTimeFormat) {
  var _a4 = [];
  for (var _i2 = 2; _i2 < arguments.length; _i2++) {
    _a4[_i2 - 2] = arguments[_i2];
  }
  var value = _a4[0], _b2 = _a4[1], options = _b2 === void 0 ? {} : _b2;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options).formatToParts(date);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e14));
  }
  return [];
}

// ../../node_modules/@formatjs/intl/lib/src/displayName.js
var DISPLAY_NAMES_OPTONS = [
  "style",
  "type",
  "fallback"
];
function formatDisplayName(_a4, getDisplayNames, value, options) {
  var locale = _a4.locale, onError = _a4.onError;
  var DisplayNames = Intl.DisplayNames;
  if (!DisplayNames) {
    onError(new FormatError('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);
  try {
    return getDisplayNames(locale, filteredOptions).of(value);
  } catch (e14) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting display name.", e14));
  }
}

// ../../node_modules/@formatjs/intl/lib/src/list.js
var LIST_FORMAT_OPTIONS = [
  "type",
  "style"
];
var now = Date.now();
function generateToken(i10) {
  return "".concat(now, "_").concat(i10, "_").concat(now);
}
function formatList(opts, getListFormat, values, options) {
  if (options === void 0) {
    options = {};
  }
  var results = formatListToParts(opts, getListFormat, values, options).reduce(function(all, el2) {
    var val = el2.value;
    if (typeof val !== "string") {
      all.push(val);
    } else if (typeof all[all.length - 1] === "string") {
      all[all.length - 1] += val;
    } else {
      all.push(val);
    }
    return all;
  }, []);
  return results.length === 1 ? results[0] : results;
}
function formatListToParts(_a4, getListFormat, values, options) {
  var locale = _a4.locale, onError = _a4.onError;
  if (options === void 0) {
    options = {};
  }
  var ListFormat = Intl.ListFormat;
  if (!ListFormat) {
    onError(new FormatError('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);
  try {
    var richValues_1 = {};
    var serializedValues = values.map(function(v10, i10) {
      if (typeof v10 === "object") {
        var id2 = generateToken(i10);
        richValues_1[id2] = v10;
        return id2;
      }
      return String(v10);
    });
    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function(part) {
      return part.type === "literal" ? part : __assign3(__assign3({}, part), {value: richValues_1[part.value] || part.value});
    });
  } catch (e14) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting list.", e14));
  }
  return values;
}

// ../../node_modules/@formatjs/intl/lib/src/plural.js
var PLURAL_FORMAT_OPTIONS = ["type"];
function formatPlural(_a4, getPluralRules, value, options) {
  var locale = _a4.locale, onError = _a4.onError;
  if (options === void 0) {
    options = {};
  }
  if (!Intl.PluralRules) {
    onError(new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
  try {
    return getPluralRules(locale, filteredOptions).select(value);
  } catch (e14) {
    onError(new IntlFormatError("Error formatting plural.", locale, e14));
  }
  return "other";
}

// ../../node_modules/@formatjs/intl/lib/src/relativeTime.js
var RELATIVE_TIME_FORMAT_OPTIONS = ["numeric", "style"];
function getFormatter2(_a4, getRelativeTimeFormat, options) {
  var locale = _a4.locale, formats = _a4.formats, onError = _a4.onError;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = !!format && getNamedFormat(formats, "relative", format, onError) || {};
  var filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);
  return getRelativeTimeFormat(locale, filteredOptions);
}
function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options) {
  if (options === void 0) {
    options = {};
  }
  if (!unit) {
    unit = "second";
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  if (!RelativeTimeFormat) {
    config.onError(new FormatError('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n', ErrorCode.MISSING_INTL_API));
  }
  try {
    return getFormatter2(config, getRelativeTimeFormat, options).format(value, unit);
  } catch (e14) {
    config.onError(new IntlFormatError("Error formatting relative time.", config.locale, e14));
  }
  return String(value);
}

// ../../node_modules/@formatjs/intl/lib/src/number.js
var NUMBER_FORMAT_OPTIONS = [
  "style",
  "currency",
  "currencyDisplay",
  "unit",
  "unitDisplay",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "currencyDisplay",
  "currencySign",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "numberingSystem"
];
function getFormatter3(_a4, getNumberFormat, options) {
  var locale = _a4.locale, formats = _a4.formats, onError = _a4.onError;
  if (options === void 0) {
    options = {};
  }
  var format = options.format;
  var defaults = format && getNamedFormat(formats, "number", format, onError) || {};
  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);
  return getNumberFormat(locale, filteredOptions);
}
function formatNumber(config, getNumberFormat, value, options) {
  if (options === void 0) {
    options = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options).format(value);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e14));
  }
  return String(value);
}
function formatNumberToParts(config, getNumberFormat, value, options) {
  if (options === void 0) {
    options = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options).formatToParts(value);
  } catch (e14) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e14));
  }
  return [];
}

// ../../node_modules/@formatjs/intl/lib/src/create-intl.js
function messagesContainString(messages) {
  var firstMessage = messages ? messages[Object.keys(messages)[0]] : void 0;
  return typeof firstMessage === "string";
}
function verifyConfigMessages(config) {
  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {
    config.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution');
  }
}
function createIntl(config, cache) {
  var formatters = createFormatters(cache);
  var resolvedConfig = __assign3(__assign3({}, DEFAULT_INTL_CONFIG), config);
  var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
  if (!locale) {
    if (onError) {
      onError(new InvalidConfigError('"locale" was not configured, using "'.concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details')));
    }
    resolvedConfig.locale = resolvedConfig.defaultLocale || "en";
  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.NumberFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.DateTimeFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  }
  verifyConfigMessages(resolvedConfig);
  return __assign3(__assign3({}, resolvedConfig), {formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), $t: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)});
}

// ../../node_modules/react-intl/lib/src/utils.js
function invariantIntlContext(intl) {
  invariant(intl, "[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.");
}
var DEFAULT_INTL_CONFIG2 = __assign3(__assign3({}, DEFAULT_INTL_CONFIG), {textComponent: React48.Fragment});
function assignUniqueKeysToParts(formatXMLElementFn) {
  return function(parts) {
    return formatXMLElementFn(React48.Children.toArray(parts));
  };
}
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (var i10 = 0; i10 < len; i10++) {
    var key = aKeys[i10];
    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }
  return true;
}

// ../../node_modules/react-intl/lib/src/components/injectIntl.js
var IntlContext = React49.createContext(null);
var IntlConsumer = IntlContext.Consumer;
var IntlProvider = IntlContext.Provider;
var Provider = IntlProvider;
var Context = IntlContext;

// ../../node_modules/react-intl/lib/src/components/useIntl.js
function useIntl() {
  var intl = React50.useContext(Context);
  invariantIntlContext(intl);
  return intl;
}

// ../../node_modules/react-intl/lib/src/components/provider.js
var React51 = __toModule(require_react());
function processIntlConfig(config) {
  return {
    locale: config.locale,
    timeZone: config.timeZone,
    fallbackOnEmptyString: config.fallbackOnEmptyString,
    formats: config.formats,
    textComponent: config.textComponent,
    messages: config.messages,
    defaultLocale: config.defaultLocale,
    defaultFormats: config.defaultFormats,
    onError: config.onError,
    onWarn: config.onWarn,
    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,
    defaultRichTextElements: config.defaultRichTextElements
  };
}
function assignUniqueKeysToFormatXMLElementFnArgument(values) {
  if (!values) {
    return values;
  }
  return Object.keys(values).reduce(function(acc, k10) {
    var v10 = values[k10];
    acc[k10] = isFormatXMLElementFn(v10) ? assignUniqueKeysToParts(v10) : v10;
    return acc;
  }, {});
}
var formatMessage2 = function(config, formatters, descriptor, rawValues) {
  var rest = [];
  for (var _i2 = 4; _i2 < arguments.length; _i2++) {
    rest[_i2 - 4] = arguments[_i2];
  }
  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);
  var chunks = formatMessage.apply(void 0, __spreadArray([
    config,
    formatters,
    descriptor,
    values
  ], rest, false));
  if (Array.isArray(chunks)) {
    return React51.Children.toArray(chunks);
  }
  return chunks;
};
var createIntl2 = function(_a4, cache) {
  var rawDefaultRichTextElements = _a4.defaultRichTextElements, config = __rest2(_a4, ["defaultRichTextElements"]);
  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);
  var coreIntl = createIntl(__assign3(__assign3(__assign3({}, DEFAULT_INTL_CONFIG2), config), {defaultRichTextElements}), cache);
  var resolvedConfig = {
    locale: coreIntl.locale,
    timeZone: coreIntl.timeZone,
    fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,
    formats: coreIntl.formats,
    defaultLocale: coreIntl.defaultLocale,
    defaultFormats: coreIntl.defaultFormats,
    messages: coreIntl.messages,
    onError: coreIntl.onError,
    defaultRichTextElements
  };
  return __assign3(__assign3({}, coreIntl), {formatMessage: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters), $t: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters)});
};
var IntlProvider2 = function(_super) {
  __extends(IntlProvider3, _super);
  function IntlProvider3() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cache = createIntlCache();
    _this.state = {
      cache: _this.cache,
      intl: createIntl2(processIntlConfig(_this.props), _this.cache),
      prevConfig: processIntlConfig(_this.props)
    };
    return _this;
  }
  IntlProvider3.getDerivedStateFromProps = function(props, _a4) {
    var prevConfig = _a4.prevConfig, cache = _a4.cache;
    var config = processIntlConfig(props);
    if (!shallowEqual(prevConfig, config)) {
      return {
        intl: createIntl2(config, cache),
        prevConfig: config
      };
    }
    return null;
  };
  IntlProvider3.prototype.render = function() {
    invariantIntlContext(this.state.intl);
    return React51.createElement(Provider, {value: this.state.intl}, this.props.children);
  };
  IntlProvider3.displayName = "IntlProvider";
  IntlProvider3.defaultProps = DEFAULT_INTL_CONFIG2;
  return IntlProvider3;
}(React51.PureComponent);
var provider_default = IntlProvider2;

// ../../node_modules/react-intl/lib/src/components/message.js
var React52 = __toModule(require_react());
function areEqual(prevProps, nextProps) {
  var values = prevProps.values, otherProps = __rest2(prevProps, ["values"]);
  var nextValues = nextProps.values, nextOtherProps = __rest2(nextProps, ["values"]);
  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);
}
function FormattedMessage(props) {
  var intl = useIntl();
  var formatMessage3 = intl.formatMessage, _a4 = intl.textComponent, Text = _a4 === void 0 ? React52.Fragment : _a4;
  var id2 = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b2 = props.tagName, Component = _b2 === void 0 ? Text : _b2, ignoreTag = props.ignoreTag;
  var descriptor = {id: id2, description, defaultMessage};
  var nodes = formatMessage3(descriptor, values, {
    ignoreTag
  });
  if (typeof children === "function") {
    return children(Array.isArray(nodes) ? nodes : [nodes]);
  }
  if (Component) {
    return React52.createElement(Component, null, React52.Children.toArray(nodes));
  }
  return React52.createElement(React52.Fragment, null, nodes);
}
FormattedMessage.displayName = "FormattedMessage";
var MemoizedFormattedMessage = React52.memo(FormattedMessage, areEqual);
MemoizedFormattedMessage.displayName = "MemoizedFormattedMessage";
var message_default = MemoizedFormattedMessage;

// ../../node_modules/@stitches/react/dist/index.mjs
var import_react10 = __toModule(require_react());
var e2 = "colors";
var t2 = "sizes";
var r = "space";
var n = {gap: r, gridGap: r, columnGap: r, gridColumnGap: r, rowGap: r, gridRowGap: r, inset: r, insetBlock: r, insetBlockEnd: r, insetBlockStart: r, insetInline: r, insetInlineEnd: r, insetInlineStart: r, margin: r, marginTop: r, marginRight: r, marginBottom: r, marginLeft: r, marginBlock: r, marginBlockEnd: r, marginBlockStart: r, marginInline: r, marginInlineEnd: r, marginInlineStart: r, padding: r, paddingTop: r, paddingRight: r, paddingBottom: r, paddingLeft: r, paddingBlock: r, paddingBlockEnd: r, paddingBlockStart: r, paddingInline: r, paddingInlineEnd: r, paddingInlineStart: r, top: r, right: r, bottom: r, left: r, scrollMargin: r, scrollMarginTop: r, scrollMarginRight: r, scrollMarginBottom: r, scrollMarginLeft: r, scrollMarginX: r, scrollMarginY: r, scrollMarginBlock: r, scrollMarginBlockEnd: r, scrollMarginBlockStart: r, scrollMarginInline: r, scrollMarginInlineEnd: r, scrollMarginInlineStart: r, scrollPadding: r, scrollPaddingTop: r, scrollPaddingRight: r, scrollPaddingBottom: r, scrollPaddingLeft: r, scrollPaddingX: r, scrollPaddingY: r, scrollPaddingBlock: r, scrollPaddingBlockEnd: r, scrollPaddingBlockStart: r, scrollPaddingInline: r, scrollPaddingInlineEnd: r, scrollPaddingInlineStart: r, fontSize: "fontSizes", background: e2, backgroundColor: e2, backgroundImage: e2, borderImage: e2, border: e2, borderBlock: e2, borderBlockEnd: e2, borderBlockStart: e2, borderBottom: e2, borderBottomColor: e2, borderColor: e2, borderInline: e2, borderInlineEnd: e2, borderInlineStart: e2, borderLeft: e2, borderLeftColor: e2, borderRight: e2, borderRightColor: e2, borderTop: e2, borderTopColor: e2, caretColor: e2, color: e2, columnRuleColor: e2, fill: e2, outline: e2, outlineColor: e2, stroke: e2, textDecorationColor: e2, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t2, minBlockSize: t2, maxBlockSize: t2, inlineSize: t2, minInlineSize: t2, maxInlineSize: t2, width: t2, minWidth: t2, maxWidth: t2, height: t2, minHeight: t2, maxHeight: t2, flexBasis: t2, gridTemplateColumns: t2, gridTemplateRows: t2, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices"};
var i = (e14, t13) => typeof t13 == "function" ? {"()": Function.prototype.toString.call(t13)} : t13;
var o = () => {
  const e14 = Object.create(null);
  return (t13, r12, ...n10) => {
    const o13 = ((e15) => JSON.stringify(e15, i))(t13);
    return o13 in e14 ? e14[o13] : e14[o13] = r12(t13, ...n10);
  };
};
var l2 = Symbol.for("sxs.internal");
var s = (e14, t13) => Object.defineProperties(e14, Object.getOwnPropertyDescriptors(t13));
var a2 = (e14) => {
  for (const t13 in e14)
    return true;
  return false;
};
var {hasOwnProperty: c} = Object.prototype;
var d2 = (e14) => e14.includes("-") ? e14 : e14.replace(/[A-Z]/g, (e15) => "-" + e15.toLowerCase());
var g = /\s+(?![^()]*\))/;
var p2 = (e14) => (t13) => e14(...typeof t13 == "string" ? String(t13).split(g) : [t13]);
var u = {appearance: (e14) => ({WebkitAppearance: e14, appearance: e14}), backfaceVisibility: (e14) => ({WebkitBackfaceVisibility: e14, backfaceVisibility: e14}), backdropFilter: (e14) => ({WebkitBackdropFilter: e14, backdropFilter: e14}), backgroundClip: (e14) => ({WebkitBackgroundClip: e14, backgroundClip: e14}), boxDecorationBreak: (e14) => ({WebkitBoxDecorationBreak: e14, boxDecorationBreak: e14}), clipPath: (e14) => ({WebkitClipPath: e14, clipPath: e14}), content: (e14) => ({content: e14.includes('"') || e14.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e14) ? e14 : `"${e14}"`}), hyphens: (e14) => ({WebkitHyphens: e14, hyphens: e14}), maskImage: (e14) => ({WebkitMaskImage: e14, maskImage: e14}), maskSize: (e14) => ({WebkitMaskSize: e14, maskSize: e14}), tabSize: (e14) => ({MozTabSize: e14, tabSize: e14}), textSizeAdjust: (e14) => ({WebkitTextSizeAdjust: e14, textSizeAdjust: e14}), userSelect: (e14) => ({WebkitUserSelect: e14, userSelect: e14}), marginBlock: p2((e14, t13) => ({marginBlockStart: e14, marginBlockEnd: t13 || e14})), marginInline: p2((e14, t13) => ({marginInlineStart: e14, marginInlineEnd: t13 || e14})), maxSize: p2((e14, t13) => ({maxBlockSize: e14, maxInlineSize: t13 || e14})), minSize: p2((e14, t13) => ({minBlockSize: e14, minInlineSize: t13 || e14})), paddingBlock: p2((e14, t13) => ({paddingBlockStart: e14, paddingBlockEnd: t13 || e14})), paddingInline: p2((e14, t13) => ({paddingInlineStart: e14, paddingInlineEnd: t13 || e14}))};
var h2 = /([\d.]+)([^]*)/;
var f = (e14, t13) => e14.length ? e14.reduce((e15, r12) => (e15.push(...t13.map((e16) => e16.includes("&") ? e16.replace(/&/g, /[ +>|~]/.test(r12) && /&.*&/.test(e16) ? `:is(${r12})` : r12) : r12 + " " + e16)), e15), []) : t13;
var m2 = (e14, t13) => e14 in b2 && typeof t13 == "string" ? t13.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t14, r12, n10, i10) => r12 + (n10 === "stretch" ? `-moz-available${i10};${d2(e14)}:${r12}-webkit-fill-available` : `-moz-fit-content${i10};${d2(e14)}:${r12}fit-content`) + i10) : String(t13);
var b2 = {blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1};
var S = (e14) => e14 ? e14 + "-" : "";
var k = (e14, t13, r12) => e14.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e15, n10, i10, o13, l10) => o13 == "$" == !!i10 ? e15 : (n10 || o13 == "--" ? "calc(" : "") + "var(--" + (o13 === "$" ? S(t13) + (l10.includes("$") ? "" : S(r12)) + l10.replace(/\$/g, "-") : l10) + ")" + (n10 || o13 == "--" ? "*" + (n10 || "") + (i10 || "1") + ")" : ""));
var y = /\s*,\s*(?![^()]*\))/;
var B = Object.prototype.toString;
var $ = (e14, t13, r12, n10, i10) => {
  let o13, l10, s10;
  const a10 = (e15, t14, r13) => {
    let c10, g10;
    const p10 = (e16) => {
      for (c10 in e16) {
        const R10 = c10.charCodeAt(0) === 64, z10 = R10 && Array.isArray(e16[c10]) ? e16[c10] : [e16[c10]];
        for (g10 of z10) {
          const e17 = /[A-Z]/.test($10 = c10) ? $10 : $10.replace(/-[^]/g, (e18) => e18[1].toUpperCase()), z11 = typeof g10 == "object" && g10 && g10.toString === B && (!n10.utils[e17] || !t14.length);
          if (e17 in n10.utils && !z11) {
            const t15 = n10.utils[e17];
            if (t15 !== l10) {
              l10 = t15, p10(t15(g10)), l10 = null;
              continue;
            }
          } else if (e17 in u) {
            const t15 = u[e17];
            if (t15 !== s10) {
              s10 = t15, p10(t15(g10)), s10 = null;
              continue;
            }
          }
          if (R10 && (b10 = c10.slice(1) in n10.media ? "@media " + n10.media[c10.slice(1)] : c10, c10 = b10.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e18, t15, r14, n11, i11, o14) => {
            const l11 = h2.test(t15), s11 = 0.0625 * (l11 ? -1 : 1), [a11, c11] = l11 ? [n11, t15] : [t15, n11];
            return "(" + (r14[0] === "=" ? "" : r14[0] === ">" === l11 ? "max-" : "min-") + a11 + ":" + (r14[0] !== "=" && r14.length === 1 ? c11.replace(h2, (e19, t16, n12) => Number(t16) + s11 * (r14 === ">" ? 1 : -1) + n12) : c11) + (i11 ? ") and (" + (i11[0] === ">" ? "min-" : "max-") + a11 + ":" + (i11.length === 1 ? o14.replace(h2, (e19, t16, r15) => Number(t16) + s11 * (i11 === ">" ? -1 : 1) + r15) : o14) : "") + ")";
          })), z11) {
            const e18 = R10 ? r13.concat(c10) : [...r13], n11 = R10 ? [...t14] : f(t14, c10.split(y));
            o13 !== void 0 && i10(x(...o13)), o13 = void 0, a10(g10, n11, e18);
          } else
            o13 === void 0 && (o13 = [[], t14, r13]), c10 = R10 || c10.charCodeAt(0) !== 36 ? c10 : `--${S(n10.prefix)}${c10.slice(1).replace(/\$/g, "-")}`, g10 = z11 ? g10 : typeof g10 == "number" ? g10 && e17 in I ? String(g10) + "px" : String(g10) : k(m2(e17, g10 == null ? "" : g10), n10.prefix, n10.themeMap[e17]), o13[0].push(`${R10 ? `${c10} ` : `${d2(c10)}:`}${g10}`);
        }
      }
      var b10, $10;
    };
    p10(e15), o13 !== void 0 && i10(x(...o13)), o13 = void 0;
  };
  a10(e14, t13, r12);
};
var x = (e14, t13, r12) => `${r12.map((e15) => `${e15}{`).join("")}${t13.length ? `${t13.join(",")}{` : ""}${e14.join(";")}${t13.length ? "}" : ""}${Array(r12.length ? r12.length + 1 : 0).join("}")}`;
var I = {animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1};
var R2 = (e14) => String.fromCharCode(e14 + (e14 > 25 ? 39 : 97));
var z = (e14) => ((e15) => {
  let t13, r12 = "";
  for (t13 = Math.abs(e15); t13 > 52; t13 = t13 / 52 | 0)
    r12 = R2(t13 % 52) + r12;
  return R2(t13 % 52) + r12;
})(((e15, t13) => {
  let r12 = t13.length;
  for (; r12; )
    e15 = 33 * e15 ^ t13.charCodeAt(--r12);
  return e15;
})(5381, JSON.stringify(e14)) >>> 0);
var W2 = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
var j2 = (e14) => {
  if (e14.href && !e14.href.startsWith(location.origin))
    return false;
  try {
    return !!e14.cssRules;
  } catch (e15) {
    return false;
  }
};
var E = (e14) => {
  let t13;
  const r12 = () => {
    const {cssRules: e15} = t13.sheet;
    return [].map.call(e15, (r13, n11) => {
      const {cssText: i10} = r13;
      let o13 = "";
      if (i10.startsWith("--sxs"))
        return "";
      if (e15[n11 - 1] && (o13 = e15[n11 - 1].cssText).startsWith("--sxs")) {
        if (!r13.cssRules.length)
          return "";
        for (const e16 in t13.rules)
          if (t13.rules[e16].group === r13)
            return `--sxs{--sxs:${[...t13.rules[e16].cache].join(" ")}}${i10}`;
        return r13.cssRules.length ? `${o13}${i10}` : "";
      }
      return i10;
    }).join("");
  }, n10 = () => {
    if (t13) {
      const {rules: e15, sheet: r13} = t13;
      if (!r13.deleteRule) {
        for (; Object(Object(r13.cssRules)[0]).type === 3; )
          r13.cssRules.splice(0, 1);
        r13.cssRules = [];
      }
      for (const t14 in e15)
        delete e15[t14];
    }
    const i10 = Object(e14).styleSheets || [];
    for (const e15 of i10)
      if (j2(e15)) {
        for (let i11 = 0, o14 = e15.cssRules; o14[i11]; ++i11) {
          const l11 = Object(o14[i11]);
          if (l11.type !== 1)
            continue;
          const s10 = Object(o14[i11 + 1]);
          if (s10.type !== 4)
            continue;
          ++i11;
          const {cssText: a10} = l11;
          if (!a10.startsWith("--sxs"))
            continue;
          const c10 = a10.slice(14, -3).trim().split(/\s+/), d10 = W2[c10[0]];
          d10 && (t13 || (t13 = {sheet: e15, reset: n10, rules: {}, toString: r12}), t13.rules[d10] = {group: s10, index: i11, cache: new Set(c10)});
        }
        if (t13)
          break;
      }
    if (!t13) {
      const i11 = (e15, t14) => ({type: t14, cssRules: [], insertRule(e16, t15) {
        this.cssRules.splice(t15, 0, i11(e16, {import: 3, undefined: 1}[(e16.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
      }, get cssText() {
        return e15 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e16) => e16.cssText).join("")}}` : e15;
      }});
      t13 = {sheet: e14 ? (e14.head || e14).appendChild(document.createElement("style")).sheet : i11("", "text/css"), rules: {}, reset: n10, toString: r12};
    }
    const {sheet: o13, rules: l10} = t13;
    for (let e15 = W2.length - 1; e15 >= 0; --e15) {
      const t14 = W2[e15];
      if (!l10[t14]) {
        const r13 = W2[e15 + 1], n11 = l10[r13] ? l10[r13].index : o13.cssRules.length;
        o13.insertRule("@media{}", n11), o13.insertRule(`--sxs{--sxs:${e15}}`, n11), l10[t14] = {group: o13.cssRules[n11 + 1], index: n11, cache: new Set([e15])};
      }
      v(l10[t14]);
    }
  };
  return n10(), t13;
};
var v = (e14) => {
  const t13 = e14.group;
  let r12 = t13.cssRules.length;
  e14.apply = (e15) => {
    try {
      t13.insertRule(e15, r12), ++r12;
    } catch (e16) {
    }
  };
};
var T2 = Symbol();
var w = o();
var M = (e14, t13) => w(e14, () => (...r12) => {
  let n10 = {type: null, composers: new Set()};
  for (const t14 of r12)
    if (t14 != null)
      if (t14[l2]) {
        n10.type == null && (n10.type = t14[l2].type);
        for (const e15 of t14[l2].composers)
          n10.composers.add(e15);
      } else
        t14.constructor !== Object || t14.$$typeof ? n10.type == null && (n10.type = t14) : n10.composers.add(C(t14, e14));
  return n10.type == null && (n10.type = "span"), n10.composers.size || n10.composers.add(["PJLV", {}, [], [], {}, []]), P(e14, n10, t13);
});
var C = (_a4, i10) => {
  var {variants: e14, compoundVariants: t13, defaultVariants: r12} = _a4, n10 = __rest(_a4, ["variants", "compoundVariants", "defaultVariants"]);
  const o13 = `${S(i10.prefix)}c-${z(n10)}`, l10 = [], s10 = [], d10 = Object.create(null), g10 = [];
  for (const e15 in r12)
    d10[e15] = String(r12[e15]);
  if (typeof e14 == "object" && e14)
    for (const t14 in e14) {
      p10 = d10, u10 = t14, c.call(p10, u10) || (d10[t14] = "undefined");
      const r13 = e14[t14];
      for (const e15 in r13) {
        const n11 = {[t14]: String(e15)};
        String(e15) === "undefined" && g10.push(t14);
        const i11 = r13[e15], o14 = [n11, i11, !a2(i11)];
        l10.push(o14);
      }
    }
  var p10, u10;
  if (typeof t13 == "object" && t13)
    for (const e15 of t13) {
      let {css: t14} = e15, r13 = __rest(e15, ["css"]);
      t14 = typeof t14 == "object" && t14 || {};
      for (const e16 in r13)
        r13[e16] = String(r13[e16]);
      const n11 = [r13, t14, !a2(t14)];
      s10.push(n11);
    }
  return [o13, n10, l10, s10, d10, g10];
};
var P = (e14, t13, r12) => {
  const [n10, i10, o13, a10] = L2(t13.composers), c10 = typeof t13.type == "function" || t13.type.$$typeof ? ((e15) => {
    function t14() {
      for (let r13 = 0; r13 < t14[T2].length; r13++) {
        const [n11, i11] = t14[T2][r13];
        e15.rules[n11].apply(i11);
      }
      return t14[T2] = [], null;
    }
    return t14[T2] = [], t14.rules = {}, W2.forEach((e16) => t14.rules[e16] = {apply: (r13) => t14[T2].push([e16, r13])}), t14;
  })(r12) : null, d10 = (c10 || r12).rules, g10 = `.${n10}${i10.length > 1 ? `:where(.${i10.slice(1).join(".")})` : ""}`, p10 = (l10) => {
    l10 = typeof l10 == "object" && l10 || A;
    const {css: s10} = l10, p11 = __rest(l10, ["css"]), u10 = {};
    for (const e15 in o13)
      if (delete p11[e15], e15 in l10) {
        let t14 = l10[e15];
        typeof t14 == "object" && t14 ? u10[e15] = __assign({"@initial": o13[e15]}, t14) : (t14 = String(t14), u10[e15] = t14 !== "undefined" || a10.has(e15) ? t14 : o13[e15]);
      } else
        u10[e15] = o13[e15];
    const h10 = new Set([...i10]);
    for (const [n11, i11, o14, l11] of t13.composers) {
      r12.rules.styled.cache.has(n11) || (r12.rules.styled.cache.add(n11), $(i11, [`.${n11}`], [], e14, (e15) => {
        d10.styled.apply(e15);
      }));
      const t14 = O(o14, u10, e14.media), s11 = O(l11, u10, e14.media, true);
      for (const i12 of t14)
        if (i12 !== void 0)
          for (const [t15, o15, l12] of i12) {
            const i13 = `${n11}-${z(o15)}-${t15}`;
            h10.add(i13);
            const s12 = (l12 ? r12.rules.resonevar : r12.rules.onevar).cache, a11 = l12 ? d10.resonevar : d10.onevar;
            s12.has(i13) || (s12.add(i13), $(o15, [`.${i13}`], [], e14, (e15) => {
              a11.apply(e15);
            }));
          }
      for (const t15 of s11)
        if (t15 !== void 0)
          for (const [i12, o15] of t15) {
            const t16 = `${n11}-${z(o15)}-${i12}`;
            h10.add(t16), r12.rules.allvar.cache.has(t16) || (r12.rules.allvar.cache.add(t16), $(o15, [`.${t16}`], [], e14, (e15) => {
              d10.allvar.apply(e15);
            }));
          }
    }
    if (typeof s10 == "object" && s10) {
      const t14 = `${n10}-i${z(s10)}-css`;
      h10.add(t14), r12.rules.inline.cache.has(t14) || (r12.rules.inline.cache.add(t14), $(s10, [`.${t14}`], [], e14, (e15) => {
        d10.inline.apply(e15);
      }));
    }
    for (const e15 of String(l10.className || "").trim().split(/\s+/))
      e15 && h10.add(e15);
    const f10 = p11.className = [...h10].join(" ");
    return {type: t13.type, className: f10, selector: g10, props: p11, toString: () => f10, deferredInjector: c10};
  };
  return s(p10, {className: n10, selector: g10, [l2]: t13, toString: () => (r12.rules.styled.cache.has(n10) || p10(), n10)});
};
var L2 = (e14) => {
  let t13 = "";
  const r12 = [], n10 = {}, i10 = [];
  for (const [o13, , , , l10, s10] of e14) {
    t13 === "" && (t13 = o13), r12.push(o13), i10.push(...s10);
    for (const e15 in l10) {
      const t14 = l10[e15];
      (n10[e15] === void 0 || t14 !== "undefined" || s10.includes(t14)) && (n10[e15] = t14);
    }
  }
  return [t13, r12, n10, new Set(i10)];
};
var O = (e14, t13, r12, n10) => {
  const i10 = [];
  e:
    for (let [o13, l10, s10] of e14) {
      if (s10)
        continue;
      let e15, a10 = 0, c10 = false;
      for (e15 in o13) {
        const n11 = o13[e15];
        let i11 = t13[e15];
        if (i11 !== n11) {
          if (typeof i11 != "object" || !i11)
            continue e;
          {
            let e16, t14, o14 = 0;
            for (const l11 in i11) {
              if (n11 === String(i11[l11])) {
                if (l11 !== "@initial") {
                  const e17 = l11.slice(1);
                  (t14 = t14 || []).push(e17 in r12 ? r12[e17] : l11.replace(/^@media ?/, "")), c10 = true;
                }
                a10 += o14, e16 = true;
              }
              ++o14;
            }
            if (t14 && t14.length && (l10 = {["@media " + t14.join(", ")]: l10}), !e16)
              continue e;
          }
        }
      }
      (i10[a10] = i10[a10] || []).push([n10 ? "cv" : `${e15}-${o13[e15]}`, l10, c10]);
    }
  return i10;
};
var A = {};
var N = o();
var D = (e14, t13) => N(e14, () => (...r12) => {
  const n10 = () => {
    for (let n11 of r12) {
      n11 = typeof n11 == "object" && n11 || {};
      let r13 = z(n11);
      if (!t13.rules.global.cache.has(r13)) {
        if (t13.rules.global.cache.add(r13), "@import" in n11) {
          let e15 = [].indexOf.call(t13.sheet.cssRules, t13.rules.themed.group) - 1;
          for (let r14 of [].concat(n11["@import"]))
            r14 = r14.includes('"') || r14.includes("'") ? r14 : `"${r14}"`, t13.sheet.insertRule(`@import ${r14};`, e15++);
          delete n11["@import"];
        }
        $(n11, [], [], e14, (e15) => {
          t13.rules.global.apply(e15);
        });
      }
    }
    return "";
  };
  return s(n10, {toString: n10});
});
var H2 = o();
var V3 = (e14, t13) => H2(e14, () => (r12) => {
  const n10 = `${S(e14.prefix)}k-${z(r12)}`, i10 = () => {
    if (!t13.rules.global.cache.has(n10)) {
      t13.rules.global.cache.add(n10);
      const i11 = [];
      $(r12, [], [], e14, (e15) => i11.push(e15));
      const o13 = `@keyframes ${n10}{${i11.join("")}}`;
      t13.rules.global.apply(o13);
    }
    return n10;
  };
  return s(i10, {get name() {
    return i10();
  }, toString: i10});
});
var G = class {
  constructor(e14, t13, r12, n10) {
    this.token = e14 == null ? "" : String(e14), this.value = t13 == null ? "" : String(t13), this.scale = r12 == null ? "" : String(r12), this.prefix = n10 == null ? "" : String(n10);
  }
  get computedValue() {
    return "var(" + this.variable + ")";
  }
  get variable() {
    return "--" + S(this.prefix) + S(this.scale) + this.token;
  }
  toString() {
    return this.computedValue;
  }
};
var F = o();
var J = (e14, t13) => F(e14, () => (r12, n10) => {
  n10 = typeof r12 == "object" && r12 || Object(n10);
  const i10 = `.${r12 = (r12 = typeof r12 == "string" ? r12 : "") || `${S(e14.prefix)}t-${z(n10)}`}`, o13 = {}, l10 = [];
  for (const t14 in n10) {
    o13[t14] = {};
    for (const r13 in n10[t14]) {
      const i11 = `--${S(e14.prefix)}${t14}-${r13}`, s11 = k(String(n10[t14][r13]), e14.prefix, t14);
      o13[t14][r13] = new G(r13, s11, t14, e14.prefix), l10.push(`${i11}:${s11}`);
    }
  }
  const s10 = () => {
    if (l10.length && !t13.rules.themed.cache.has(r12)) {
      t13.rules.themed.cache.add(r12);
      const i11 = `${n10 === e14.theme ? ":root," : ""}.${r12}{${l10.join(";")}}`;
      t13.rules.themed.apply(i11);
    }
    return r12;
  };
  return __assign(__assign({}, o13), {get className() {
    return s10();
  }, selector: i10, toString: s10});
});
var U = o();
var X;
var Y2 = o();
var q = (e14) => {
  const t13 = ((e15) => {
    let t14 = false;
    const r12 = U(e15, (e16) => {
      t14 = true;
      const r13 = "prefix" in (e16 = typeof e16 == "object" && e16 || {}) ? String(e16.prefix) : "", i10 = typeof e16.media == "object" && e16.media || {}, o13 = typeof e16.root == "object" ? e16.root || null : globalThis.document || null, l10 = typeof e16.theme == "object" && e16.theme || {}, s10 = {prefix: r13, media: i10, theme: l10, themeMap: typeof e16.themeMap == "object" && e16.themeMap || __assign({}, n), utils: typeof e16.utils == "object" && e16.utils || {}}, a10 = E(o13), c10 = {css: M(s10, a10), globalCss: D(s10, a10), keyframes: V3(s10, a10), createTheme: J(s10, a10), reset() {
        a10.reset(), c10.theme.toString();
      }, theme: {}, sheet: a10, config: s10, prefix: r13, getCssText: a10.toString, toString: a10.toString};
      return String(c10.theme = c10.createTheme(l10)), c10;
    });
    return t14 || r12.reset(), r12;
  })(e14);
  return t13.styled = (({config: e15, sheet: t14}) => Y2(e15, () => {
    const r12 = M(e15, t14);
    return (...e16) => {
      const t15 = r12(...e16), n10 = t15[l2].type, i10 = import_react10.default.forwardRef((e17, r13) => {
        const i11 = e17 && e17.as || n10, {props: o13, deferredInjector: l10} = t15(e17);
        return delete o13.as, o13.ref = r13, l10 ? import_react10.default.createElement(import_react10.default.Fragment, null, import_react10.default.createElement(i11, o13), import_react10.default.createElement(l10, null)) : import_react10.default.createElement(i11, o13);
      });
      return i10.className = t15.className, i10.displayName = `Styled.${n10.displayName || n10.name || n10}`, i10.selector = t15.selector, i10.toString = () => t15.selector, i10[l2] = t15[l2], i10;
    };
  }))(t13), t13;
};
var K = () => X || (X = q());
var re2 = (...e14) => K().styled(...e14);

// ../../node_modules/safari-14-idb-fix/dist/index.js
function idbReady() {
  var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
  if (!isSafari || !indexedDB.databases)
    return Promise.resolve();
  var intervalId;
  return new Promise(function(resolve) {
    var tryIdb = function() {
      return indexedDB.databases().finally(resolve);
    };
    intervalId = setInterval(tryIdb, 100);
    tryIdb();
  }).finally(function() {
    return clearInterval(intervalId);
  });
}
var dist_default = idbReady;

// ../../node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject2) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject2(request.error);
  });
}
function createStore(dbName, storeName) {
  const dbp = dist_default().then(() => {
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    return promisifyRequest(request);
  });
  return (txMode, callback) => dbp.then((db2) => callback(db2.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get3(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set4(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}

// ../../packages/tldraw/dist/index.mjs
var Yt = __toModule(require_react());
var na = __toModule(require_react());
var Ve = __toModule(require_react());
var dn = __toModule(require_react());
var _t = __toModule(require_react());
var aa = __toModule(require_react());
var jt = __toModule(require_react());
var ln = __toModule(require_react());
var Zt = __toModule(require_react());
var Sa = __toModule(require_react());
var Xt = __toModule(require_react());
var cn = __toModule(require_react());
var vn = __toModule(require_react());
var Le = __toModule(require_react());
var qt = __toModule(require_react());
var hs = __toModule(require_react());
var Jt = __toModule(require_react());
var vo = __toModule(require_react());
var un = __toModule(require_react());
var Oe = __toModule(require_react());
var je = __toModule(require_react());
var Ze = __toModule(require_react());
var Gt = __toModule(require_react());
var st = __toModule(require_react());

// ../../node_modules/zustand/esm/vanilla.mjs
function createStore2(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace2 ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = {setState, getState, subscribe, destroy};
  state = createState(setState, getState, api);
  return api;
}

// ../../node_modules/zustand/esm/index.mjs
var import_react11 = __toModule(require_react());
function createStore3(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace2 ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = {setState, getState, subscribe, destroy};
  state = createState(setState, getState, api);
  return api;
}
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react11.useEffect : import_react11.useLayoutEffect;
function create2(createState) {
  const api = typeof createState === "function" ? createStore3(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = (0, import_react11.useReducer)((c10) => c10 + 1, 0);
    const state = api.getState();
    const stateRef = (0, import_react11.useRef)(state);
    const selectorRef = (0, import_react11.useRef)(selector);
    const equalityFnRef = (0, import_react11.useRef)(equalityFn);
    const erroredRef = (0, import_react11.useRef)(false);
    const currentSliceRef = (0, import_react11.useRef)();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = (0, import_react11.useRef)(state);
    useIsomorphicLayoutEffect(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    (0, import_react11.useDebugValue)(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return {value: items.shift(), done};
      }
    };
  };
  return useStore;
}

// ../../packages/tldraw/dist/index.mjs
var Ts = __toModule(require_react());

// ../../node_modules/hotkeys-js/dist/hotkeys.esm.js
/*!
 * hotkeys-js v3.8.7
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 * 
 * Copyright (c) 2021 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 * 
 * Licensed under the MIT license.
 */
var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
function addEvent(object2, event, method) {
  if (object2.addEventListener) {
    object2.addEventListener(event, method, false);
  } else if (object2.attachEvent) {
    object2.attachEvent("on".concat(event), function() {
      method(window.event);
    });
  }
}
function getMods(modifier, key) {
  var mods = key.slice(0, key.length - 1);
  for (var i10 = 0; i10 < mods.length; i10++) {
    mods[i10] = modifier[mods[i10].toLowerCase()];
  }
  return mods;
}
function getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  var keys = key.split(",");
  var index2 = keys.lastIndexOf("");
  for (; index2 >= 0; ) {
    keys[index2 - 1] += ",";
    keys.splice(index2, 1);
    index2 = keys.lastIndexOf("");
  }
  return keys;
}
function compareArray(a12, a23) {
  var arr1 = a12.length >= a23.length ? a12 : a23;
  var arr2 = a12.length >= a23.length ? a23 : a12;
  var isIndex = true;
  for (var i10 = 0; i10 < arr1.length; i10++) {
    if (arr2.indexOf(arr1[i10]) === -1)
      isIndex = false;
  }
  return isIndex;
}
var _keyMap = {
  backspace: 8,
  tab: 9,
  clear: 12,
  enter: 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  "\u21EA": 20,
  ",": 188,
  ".": 190,
  "/": 191,
  "`": 192,
  "-": isff ? 173 : 189,
  "=": isff ? 61 : 187,
  ";": isff ? 59 : 186,
  "'": 222,
  "[": 219,
  "]": 221,
  "\\": 220
};
var _modifier = {
  "\u21E7": 16,
  shift: 16,
  "\u2325": 18,
  alt: 18,
  option: 18,
  "\u2303": 17,
  ctrl: 17,
  control: 17,
  "\u2318": 91,
  cmd: 91,
  command: 91
};
var modifierMap = {
  16: "shiftKey",
  18: "altKey",
  17: "ctrlKey",
  91: "metaKey",
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
var _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
var _handlers = {};
for (var k10 = 1; k10 < 20; k10++) {
  _keyMap["f".concat(k10)] = 111 + k10;
}
var _downKeys = [];
var _scope = "all";
var elementHasBindEvent = [];
var code = function code2(x10) {
  return _keyMap[x10.toLowerCase()] || _modifier[x10.toLowerCase()] || x10.toUpperCase().charCodeAt(0);
};
function setScope(scope) {
  _scope = scope || "all";
}
function getScope() {
  return _scope || "all";
}
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function filter(event) {
  var target = event.target || event.srcElement;
  var tagName = target.tagName;
  var flag = true;
  if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
    flag = false;
  }
  return flag;
}
function isPressed(keyCode) {
  if (typeof keyCode === "string") {
    keyCode = code(keyCode);
  }
  return _downKeys.indexOf(keyCode) !== -1;
}
function deleteScope(scope, newScope) {
  var handlers;
  var i10;
  if (!scope)
    scope = getScope();
  for (var key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i10 = 0; i10 < handlers.length; ) {
        if (handlers[i10].scope === scope)
          handlers.splice(i10, 1);
        else
          i10++;
      }
    }
  }
  if (getScope() === scope)
    setScope(newScope || "all");
}
function clearModifier(event) {
  var key = event.keyCode || event.which || event.charCode;
  var i10 = _downKeys.indexOf(key);
  if (i10 >= 0) {
    _downKeys.splice(i10, 1);
  }
  if (event.key && event.key.toLowerCase() === "meta") {
    _downKeys.splice(0, _downKeys.length);
  }
  if (key === 93 || key === 224)
    key = 91;
  if (key in _mods) {
    _mods[key] = false;
    for (var k10 in _modifier) {
      if (_modifier[k10] === key)
        hotkeys[k10] = false;
    }
  }
}
function unbind(keysInfo) {
  if (!keysInfo) {
    Object.keys(_handlers).forEach(function(key) {
      return delete _handlers[key];
    });
  } else if (Array.isArray(keysInfo)) {
    keysInfo.forEach(function(info) {
      if (info.key)
        eachUnbind(info);
    });
  } else if (typeof keysInfo === "object") {
    if (keysInfo.key)
      eachUnbind(keysInfo);
  } else if (typeof keysInfo === "string") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var scope = args[0], method = args[1];
    if (typeof scope === "function") {
      method = scope;
      scope = "";
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: "+"
    });
  }
}
var eachUnbind = function eachUnbind2(_ref) {
  var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
  var multipleKeys = getKeys(key);
  multipleKeys.forEach(function(originKey) {
    var unbindKeys = originKey.split(splitKey);
    var len = unbindKeys.length;
    var lastKey = unbindKeys[len - 1];
    var keyCode = lastKey === "*" ? "*" : code(lastKey);
    if (!_handlers[keyCode])
      return;
    if (!scope)
      scope = getScope();
    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    _handlers[keyCode] = _handlers[keyCode].map(function(record) {
      var isMatchingMethod = method ? record.method === method : true;
      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {
        return {};
      }
      return record;
    });
  });
};
function eventHandler(event, handler, scope) {
  var modifiersMatch;
  if (handler.scope === scope || handler.scope === "all") {
    modifiersMatch = handler.mods.length > 0;
    for (var y10 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y10)) {
        if (!_mods[y10] && handler.mods.indexOf(+y10) > -1 || _mods[y10] && handler.mods.indexOf(+y10) === -1) {
          modifiersMatch = false;
        }
      }
    }
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
      if (handler.method(event, handler) === false) {
        if (event.preventDefault)
          event.preventDefault();
        else
          event.returnValue = false;
        if (event.stopPropagation)
          event.stopPropagation();
        if (event.cancelBubble)
          event.cancelBubble = true;
      }
    }
  }
}
function dispatch(event) {
  var asterisk = _handlers["*"];
  var key = event.keyCode || event.which || event.charCode;
  if (!hotkeys.filter.call(this, event))
    return;
  if (key === 93 || key === 224)
    key = 91;
  if (_downKeys.indexOf(key) === -1 && key !== 229)
    _downKeys.push(key);
  ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
    var keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  if (key in _mods) {
    _mods[key] = true;
    for (var k10 in _modifier) {
      if (_modifier[k10] === key)
        hotkeys[k10] = true;
    }
    if (!asterisk)
      return;
  }
  for (var e14 in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e14)) {
      _mods[e14] = event[modifierMap[e14]];
    }
  }
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }
  var scope = getScope();
  if (asterisk) {
    for (var i10 = 0; i10 < asterisk.length; i10++) {
      if (asterisk[i10].scope === scope && (event.type === "keydown" && asterisk[i10].keydown || event.type === "keyup" && asterisk[i10].keyup)) {
        eventHandler(event, asterisk[i10], scope);
      }
    }
  }
  if (!(key in _handlers))
    return;
  for (var _i2 = 0; _i2 < _handlers[key].length; _i2++) {
    if (event.type === "keydown" && _handlers[key][_i2].keydown || event.type === "keyup" && _handlers[key][_i2].keyup) {
      if (_handlers[key][_i2].key) {
        var record = _handlers[key][_i2];
        var splitKey = record.splitKey;
        var keyShortcut = record.key.split(splitKey);
        var _downKeysCurrent = [];
        for (var a10 = 0; a10 < keyShortcut.length; a10++) {
          _downKeysCurrent.push(code(keyShortcut[a10]));
        }
        if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
          eventHandler(event, record, scope);
        }
      }
    }
  }
}
function isElementBind(element) {
  return elementHasBindEvent.indexOf(element) > -1;
}
function hotkeys(key, option, method) {
  _downKeys = [];
  var keys = getKeys(key);
  var mods = [];
  var scope = "all";
  var element = document;
  var i10 = 0;
  var keyup = false;
  var keydown = true;
  var splitKey = "+";
  if (method === void 0 && typeof option === "function") {
    method = option;
  }
  if (Object.prototype.toString.call(option) === "[object Object]") {
    if (option.scope)
      scope = option.scope;
    if (option.element)
      element = option.element;
    if (option.keyup)
      keyup = option.keyup;
    if (option.keydown !== void 0)
      keydown = option.keydown;
    if (typeof option.splitKey === "string")
      splitKey = option.splitKey;
  }
  if (typeof option === "string")
    scope = option;
  for (; i10 < keys.length; i10++) {
    key = keys[i10].split(splitKey);
    mods = [];
    if (key.length > 1)
      mods = getMods(_modifier, key);
    key = key[key.length - 1];
    key = key === "*" ? "*" : code(key);
    if (!(key in _handlers))
      _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i10],
      method,
      key: keys[i10],
      splitKey
    });
  }
  if (typeof element !== "undefined" && !isElementBind(element) && window) {
    elementHasBindEvent.push(element);
    addEvent(element, "keydown", function(e14) {
      dispatch(e14);
    });
    addEvent(window, "focus", function() {
      _downKeys = [];
    });
    addEvent(element, "keyup", function(e14) {
      dispatch(e14);
      clearModifier(e14);
    });
  }
}
var _api = {
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  isPressed,
  filter,
  unbind
};
for (var a10 in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a10)) {
    hotkeys[a10] = _api[a10];
  }
}
if (typeof window !== "undefined") {
  _hotkeys = window.hotkeys;
  hotkeys.noConflict = function(deep) {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}
var _hotkeys;
var hotkeys_esm_default = hotkeys;

// ../../node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js
var import_react12 = __toModule(require_react());
hotkeys_esm_default.filter = function() {
  return true;
};
var tagFilter = function tagFilter2(_ref, enableOnTags) {
  var target = _ref.target;
  var targetTagName = target && target.tagName;
  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
};
var isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput2(ev2) {
  return tagFilter(ev2, ["INPUT", "TEXTAREA", "SELECT"]);
};
function useHotkeys(keys, callback, options, deps) {
  if (options instanceof Array) {
    deps = options;
    options = void 0;
  }
  var _ref2 = options || {}, enableOnTags = _ref2.enableOnTags, filter2 = _ref2.filter, keyup = _ref2.keyup, keydown = _ref2.keydown, _ref2$filterPreventDe = _ref2.filterPreventDefault, filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe, _ref2$enabled = _ref2.enabled, enabled = _ref2$enabled === void 0 ? true : _ref2$enabled, _ref2$enableOnContent = _ref2.enableOnContentEditable, enableOnContentEditable = _ref2$enableOnContent === void 0 ? false : _ref2$enableOnContent;
  var ref = (0, import_react12.useRef)(null);
  var memoisedCallback = (0, import_react12.useCallback)(function(keyboardEvent, hotkeysEvent) {
    var _keyboardEvent$target;
    if (filter2 && !filter2(keyboardEvent)) {
      return !filterPreventDefault;
    }
    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags) || (_keyboardEvent$target = keyboardEvent.target) != null && _keyboardEvent$target.isContentEditable && !enableOnContentEditable) {
      return true;
    }
    if (ref.current === null || document.activeElement === ref.current) {
      callback(keyboardEvent, hotkeysEvent);
      return true;
    }
    return false;
  }, deps ? [ref, enableOnTags, filter2].concat(deps) : [ref, enableOnTags, filter2]);
  (0, import_react12.useEffect)(function() {
    if (!enabled) {
      hotkeys_esm_default.unbind(keys, memoisedCallback);
      return;
    }
    if (keyup && keydown !== true) {
      options.keydown = false;
    }
    hotkeys_esm_default(keys, options || {}, memoisedCallback);
    return function() {
      return hotkeys_esm_default.unbind(keys, memoisedCallback);
    };
  }, [memoisedCallback, keys, enabled]);
  return ref;
}
var isHotkeyPressed = hotkeys_esm_default.isPressed;

// ../../packages/tldraw/dist/index.mjs
var ys = __toModule(require_react());
var Ad = __toModule(require_react());
var po = __toModule(require_react());
var Yn = __toModule(require_react());
var sl = __toModule(require_react());
var St = __toModule(require_react());
var Gi = __toModule(require_react());
var ho = __toModule(require_react());

// ../../node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var o2 = __toModule(require_react());
var useLayoutEffect8 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? o2.useLayoutEffect : () => {
};

// ../../node_modules/@radix-ui/react-id/dist/index.module.js
var e3 = __toModule(require_react());
var r2 = e3["useId".toString()] || (() => {
});
var n2 = 0;
function useId(o13) {
  const [u10, i10] = e3.useState(r2());
  return useLayoutEffect8(() => {
    o13 || i10((t13) => t13 != null ? t13 : String(n2++));
  }, [o13]), o13 || (u10 ? `radix-${u10}` : "");
}

// ../../node_modules/@radix-ui/react-focus-guards/dist/index.module.js
var e4 = __toModule(require_react());
var t3 = 0;
function useFocusGuards() {
  e4.useEffect(() => {
    var e14, n10;
    const r12 = document.querySelectorAll("[data-radix-focus-guard]");
    return document.body.insertAdjacentElement("afterbegin", (e14 = r12[0]) !== null && e14 !== void 0 ? e14 : o3()), document.body.insertAdjacentElement("beforeend", (n10 = r12[1]) !== null && n10 !== void 0 ? n10 : o3()), t3++, () => {
      t3 === 1 && document.querySelectorAll("[data-radix-focus-guard]").forEach((e15) => e15.remove()), t3--;
    };
  }, []);
}
function o3() {
  const e14 = document.createElement("span");
  return e14.setAttribute("data-radix-focus-guard", ""), e14.tabIndex = 0, e14.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none", e14;
}

// ../../node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
var e5 = __toModule(require_react());
function useCallbackRef(r12) {
  const t13 = e5.useRef(r12);
  return e5.useEffect(() => {
    t13.current = r12;
  }), e5.useMemo(() => (...e14) => {
    var r13;
    return (r13 = t13.current) === null || r13 === void 0 ? void 0 : r13.call(t13, ...e14);
  }, []);
}

// ../../node_modules/@radix-ui/react-use-direction/dist/index.module.js
var e6 = __toModule(require_react());
function useDirection(t13, n10) {
  const [r12, o13] = e6.useState("ltr"), [i10, u10] = e6.useState(), c10 = e6.useRef(0);
  return e6.useEffect(() => {
    if (n10 === void 0 && t13 != null && t13.parentElement) {
      const e14 = getComputedStyle(t13.parentElement);
      u10(e14);
    }
  }, [t13, n10]), e6.useEffect(() => (n10 === void 0 && function e14() {
    c10.current = requestAnimationFrame(() => {
      const t14 = i10 == null ? void 0 : i10.direction;
      t14 && o13(t14), e14();
    });
  }(), () => cancelAnimationFrame(c10.current)), [i10, n10, o13]), n10 || r12;
}

// ../../node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
var t4 = __toModule(require_react());
function useControllableState({prop: o13, defaultProp: r12, onChange: n10 = () => {
}}) {
  const [a10, u10] = function({defaultProp: o14, onChange: r13}) {
    const n11 = t4.useState(o14), [a11] = n11, u11 = t4.useRef(a11), c11 = useCallbackRef(r13);
    return t4.useEffect(() => {
      u11.current !== a11 && (c11(a11), u11.current = a11);
    }, [a11, u11, c11]), n11;
  }({defaultProp: r12, onChange: n10}), c10 = o13 !== void 0, f10 = c10 ? o13 : a10, l10 = useCallbackRef(n10);
  return [f10, t4.useCallback((e14) => {
    if (c10) {
      const t13 = e14, r13 = typeof e14 == "function" ? t13(o13) : e14;
      r13 !== o13 && l10(r13);
    } else
      u10(e14);
  }, [c10, o13, u10, l10])];
}

// ../../node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var o4 = __toModule(require_react());
function composeRefs(...o13) {
  return (e14) => o13.forEach((o14) => function(o15, e15) {
    typeof o15 == "function" ? o15(e15) : o15 != null && (o15.current = e15);
  }(o14, e14));
}
function useComposedRefs(...e14) {
  return o4.useCallback(composeRefs(...e14), e14);
}

// ../../node_modules/@radix-ui/react-slot/dist/index.module.js
var t5 = __toModule(require_react());

// ../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i10 = 1; i10 < arguments.length; i10++) {
      var source = arguments[i10];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}

// ../../node_modules/@radix-ui/react-slot/dist/index.module.js
var Slot = /* @__PURE__ */ t5.forwardRef((e14, o13) => {
  const {children: a10} = e14, s10 = __rest(e14, ["children"]);
  return t5.Children.toArray(a10).some(l3) ? /* @__PURE__ */ t5.createElement(t5.Fragment, null, t5.Children.map(a10, (e15) => l3(e15) ? /* @__PURE__ */ t5.createElement(n3, _extends2({}, s10, {ref: o13}), e15.props.children) : e15)) : /* @__PURE__ */ t5.createElement(n3, _extends2({}, s10, {ref: o13}), a10);
});
Slot.displayName = "Slot";
var n3 = /* @__PURE__ */ t5.forwardRef((r12, n10) => {
  const {children: l10} = r12, a10 = __rest(r12, ["children"]);
  return t5.isValidElement(l10) ? /* @__PURE__ */ t5.cloneElement(l10, __assign(__assign({}, o5(a10, l10.props)), {ref: composeRefs(n10, l10.ref)})) : t5.Children.count(l10) > 1 ? t5.Children.only(null) : null;
});
n3.displayName = "SlotClone";
var Slottable = ({children: e14}) => /* @__PURE__ */ t5.createElement(t5.Fragment, null, e14);
function l3(e14) {
  return t5.isValidElement(e14) && e14.type === Slottable;
}
function o5(e14, t13) {
  const r12 = __assign({}, t13);
  for (const n10 in t13) {
    const l10 = e14[n10], o13 = t13[n10];
    /^on[A-Z]/.test(n10) ? r12[n10] = (...e15) => {
      o13 == null || o13(...e15), l10 == null || l10(...e15);
    } : n10 === "style" ? r12[n10] = __assign(__assign({}, l10), o13) : n10 === "className" && (r12[n10] = [l10, o13].filter(Boolean).join(" "));
  }
  return __assign(__assign({}, e14), r12);
}

// ../../node_modules/@radix-ui/react-primitive/dist/index.module.js
var r3 = __toModule(require_react());
var Primitive = ["a", "button", "div", "h2", "h3", "img", "li", "nav", "ol", "p", "span", "svg", "ul"].reduce((o13, i10) => __assign(__assign({}, o13), {[i10]: /* @__PURE__ */ r3.forwardRef((o14, m10) => {
  const {asChild: a10} = o14, s10 = __rest(o14, ["asChild"]), n10 = a10 ? Slot : i10;
  return r3.useEffect(() => {
    window[Symbol.for("radix-ui")] = true;
  }, []), /* @__PURE__ */ r3.createElement(n10, _extends2({}, s10, {ref: m10}));
})}), {});

// ../../node_modules/@radix-ui/react-context/dist/index.module.js
var e7 = __toModule(require_react());
function createContext4(t13, n10) {
  const o13 = /* @__PURE__ */ e7.createContext(n10);
  function r12(t14) {
    const {children: n11} = t14, r13 = __rest(t14, ["children"]), c10 = e7.useMemo(() => r13, Object.values(r13));
    return e7.createElement(o13.Provider, {value: c10}, n11);
  }
  return r12.displayName = t13 + "Provider", [r12, function(r13) {
    const c10 = e7.useContext(o13);
    if (c10)
      return c10;
    if (n10 !== void 0)
      return n10;
    throw new Error(`\`${r13}\` must be used within \`${t13}\``);
  }];
}
function createContextScope(n10, o13 = []) {
  let r12 = [];
  const c10 = () => {
    const t13 = r12.map((t14) => /* @__PURE__ */ e7.createContext(t14));
    return function(o14) {
      const r13 = (o14 == null ? void 0 : o14[n10]) || t13;
      return e7.useMemo(() => ({[`__scope${n10}`]: __assign(__assign({}, o14), {[n10]: r13})}), [o14, r13]);
    };
  };
  return c10.scopeName = n10, [function(t13, o14) {
    const c11 = /* @__PURE__ */ e7.createContext(o14), u10 = r12.length;
    function s10(t14) {
      const {scope: o15, children: r13} = t14, s11 = __rest(t14, ["scope", "children"]), i10 = (o15 == null ? void 0 : o15[n10][u10]) || c11, a10 = e7.useMemo(() => s11, Object.values(s11));
      return e7.createElement(i10.Provider, {value: a10}, r13);
    }
    return r12 = [...r12, o14], s10.displayName = t13 + "Provider", [s10, function(r13, s11) {
      const i10 = (s11 == null ? void 0 : s11[n10][u10]) || c11, a10 = e7.useContext(i10);
      if (a10)
        return a10;
      if (o14 !== void 0)
        return o14;
      throw new Error(`\`${r13}\` must be used within \`${t13}\``);
    }];
  }, t6(c10, ...o13)];
}
function t6(...t13) {
  const n10 = t13[0];
  if (t13.length === 1)
    return n10;
  const o13 = () => {
    const o14 = t13.map((e14) => ({useScope: e14(), scopeName: e14.scopeName}));
    return function(t14) {
      const r12 = o14.reduce((e14, {useScope: n11, scopeName: o15}) => __assign(__assign({}, e14), n11(t14)[`__scope${o15}`]), {});
      return e7.useMemo(() => ({[`__scope${n10.scopeName}`]: r12}), [r12]);
    };
  };
  return o13.scopeName = n10.scopeName, o13;
}

// ../../node_modules/@radix-ui/react-collection/dist/index.module.js
var import_react13 = __toModule(require_react());
function createCollection(c10) {
  const n10 = c10 + "CollectionProvider", [l10, i10] = createContextScope(n10), [f10, a10] = l10(n10, {collectionRef: {current: null}, itemMap: new Map()}), u10 = (e14) => {
    const {scope: r12, children: t13} = e14, c11 = import_react13.default.useRef(null), n11 = import_react13.default.useRef(new Map()).current;
    return import_react13.default.createElement(f10, {scope: r12, itemMap: n11, collectionRef: c11}, t13);
  }, m10 = c10 + "CollectionSlot", s10 = /* @__PURE__ */ import_react13.default.forwardRef((t13, c11) => {
    const {scope: n11, children: l11} = t13, i11 = a10(m10, n11), f11 = useComposedRefs(c11, i11.collectionRef);
    return import_react13.default.createElement(Slot, {ref: f11}, l11);
  }), p10 = c10 + "CollectionItemSlot", d10 = "data-radix-collection-item", R10 = /* @__PURE__ */ import_react13.default.forwardRef((t13, c11) => {
    const {scope: n11, children: l11} = t13, i11 = __rest(t13, ["scope", "children"]), f11 = import_react13.default.useRef(null), u11 = useComposedRefs(c11, f11), m11 = a10(p10, n11);
    return import_react13.default.useEffect(() => (m11.itemMap.set(f11, __assign({ref: f11}, i11)), () => {
      m11.itemMap.delete(f11);
    })), /* @__PURE__ */ import_react13.default.createElement(Slot, {[d10]: "", ref: u11}, l11);
  });
  return [{Provider: u10, Slot: s10, ItemSlot: R10}, function(e14) {
    const r12 = a10(c10 + "CollectionConsumer", e14);
    return import_react13.default.useCallback(() => {
      const e15 = r12.collectionRef.current;
      if (!e15)
        return [];
      const t13 = Array.from(e15.querySelectorAll(`[${d10}]`));
      return Array.from(r12.itemMap.values()).sort((e16, r13) => t13.indexOf(e16.ref.current) - t13.indexOf(r13.ref.current));
    }, [r12.collectionRef, r12.itemMap]);
  }, i10];
}

// ../../node_modules/@radix-ui/primitive/dist/index.module.js
function composeEventHandlers(e14, n10, {checkForDefaultPrevented: t13 = true} = {}) {
  return function(r12) {
    if (e14 == null || e14(r12), t13 === false || !r12.defaultPrevented)
      return n10 == null ? void 0 : n10(r12);
  };
}

// ../../node_modules/@radix-ui/react-roving-focus/dist/index.module.js
var s2 = __toModule(require_react());
var f2 = {bubbles: false, cancelable: true};
var [p3, l4, m3] = createCollection("RovingFocusGroup");
var [d3, v2] = createContextScope("RovingFocusGroup", [m3]);
var [g2, F2] = d3("RovingFocusGroup");
var RovingFocusGroup = /* @__PURE__ */ s2.forwardRef((e14, o13) => /* @__PURE__ */ s2.createElement(p3.Provider, {scope: e14.__scopeRovingFocusGroup}, /* @__PURE__ */ s2.createElement(p3.Slot, {scope: e14.__scopeRovingFocusGroup}, /* @__PURE__ */ s2.createElement(w2, _extends2({}, e14, {ref: o13})))));
var w2 = /* @__PURE__ */ s2.forwardRef((t13, n10) => {
  const {__scopeRovingFocusGroup: c10, orientation: p10, dir: m10 = "ltr", loop: d10 = false, currentTabStopId: v10, defaultCurrentTabStopId: F10, onCurrentTabStopIdChange: w10, onEntryFocus: b10} = t13, x10 = __rest(t13, ["__scopeRovingFocusGroup", "orientation", "dir", "loop", "currentTabStopId", "defaultCurrentTabStopId", "onCurrentTabStopIdChange", "onEntryFocus"]), E10 = s2.useRef(null), I10 = useComposedRefs(n10, E10), [G10 = null, h10] = useControllableState({prop: v10, defaultProp: F10, onChange: w10}), [T10, A10] = s2.useState(false), y10 = useCallbackRef(b10), D10 = l4(c10), S10 = s2.useRef(false);
  return s2.useEffect(() => {
    const e14 = E10.current;
    if (e14)
      return e14.addEventListener("rovingFocusGroup.onEntryFocus", y10), () => e14.removeEventListener("rovingFocusGroup.onEntryFocus", y10);
  }, [y10]), /* @__PURE__ */ s2.createElement(g2, {scope: c10, orientation: p10, dir: m10, loop: d10, currentTabStopId: G10, onItemFocus: s2.useCallback((e14) => h10(e14), [h10]), onItemShiftTab: s2.useCallback(() => A10(true), [])}, /* @__PURE__ */ s2.createElement(Primitive.div, _extends2({tabIndex: T10 ? -1 : 0, "data-orientation": p10}, x10, {ref: I10, style: __assign({outline: "none"}, t13.style), onMouseDown: composeEventHandlers(t13.onMouseDown, () => {
    S10.current = true;
  }), onFocus: composeEventHandlers(t13.onFocus, (e14) => {
    const o13 = !S10.current;
    if (e14.target === e14.currentTarget && o13 && !T10) {
      const o14 = new Event("rovingFocusGroup.onEntryFocus", f2);
      if (e14.currentTarget.dispatchEvent(o14), !o14.defaultPrevented) {
        const e15 = D10().filter((e16) => e16.focusable);
        R3([e15.find((e16) => e16.active), e15.find((e16) => e16.id === G10), ...e15].filter(Boolean).map((e16) => e16.ref.current));
      }
    }
    S10.current = false;
  }), onBlur: composeEventHandlers(t13.onBlur, () => A10(false))})));
});
var RovingFocusGroupItem = /* @__PURE__ */ s2.forwardRef((e14, o13) => {
  const {__scopeRovingFocusGroup: n10, focusable: i10 = true, active: c10 = false} = e14, f10 = __rest(e14, ["__scopeRovingFocusGroup", "focusable", "active"]), m10 = useId(), d10 = F2("RovingFocusGroupItem", n10), v10 = d10.currentTabStopId === m10, g10 = l4(n10);
  return s2.createElement(p3.ItemSlot, {scope: n10, id: m10, focusable: i10, active: c10}, /* @__PURE__ */ s2.createElement(Primitive.span, _extends2({tabIndex: v10 ? 0 : -1, "data-orientation": d10.orientation}, f10, {ref: o13, onMouseDown: composeEventHandlers(e14.onMouseDown, (e15) => {
    i10 ? d10.onItemFocus(m10) : e15.preventDefault();
  }), onFocus: composeEventHandlers(e14.onFocus, () => d10.onItemFocus(m10)), onKeyDown: composeEventHandlers(e14.onKeyDown, (e15) => {
    if (e15.key === "Tab" && e15.shiftKey)
      return void d10.onItemShiftTab();
    if (e15.target !== e15.currentTarget)
      return;
    const o14 = function(e16, o15, r13) {
      const t14 = function(e17, o16) {
        return o16 !== "rtl" ? e17 : e17 === "ArrowLeft" ? "ArrowRight" : e17 === "ArrowRight" ? "ArrowLeft" : e17;
      }(e16.key, r13);
      return o15 === "vertical" && ["ArrowLeft", "ArrowRight"].includes(t14) || o15 === "horizontal" && ["ArrowUp", "ArrowDown"].includes(t14) ? void 0 : b3[t14];
    }(e15, d10.orientation, d10.dir);
    if (o14 !== void 0) {
      e15.preventDefault();
      let n11 = g10().filter((e16) => e16.focusable).map((e16) => e16.ref.current);
      if (o14 === "last")
        n11.reverse();
      else if (o14 === "prev" || o14 === "next") {
        o14 === "prev" && n11.reverse();
        const i11 = n11.indexOf(e15.currentTarget);
        n11 = d10.loop ? (t13 = i11 + 1, (r12 = n11).map((e16, o15) => r12[(t13 + o15) % r12.length])) : n11.slice(i11 + 1);
      }
      setTimeout(() => R3(n11));
    }
    var r12, t13;
  })})));
});
var b3 = {ArrowLeft: "prev", ArrowUp: "prev", ArrowRight: "next", ArrowDown: "next", PageUp: "first", Home: "first", PageDown: "last", End: "last"};
function R3(e14) {
  const o13 = document.activeElement;
  for (const r12 of e14) {
    if (r12 === o13)
      return;
    if (r12.focus(), document.activeElement !== o13)
      return;
  }
}
var Root = RovingFocusGroup;
var Item = RovingFocusGroupItem;

// ../../node_modules/@radix-ui/react-portal/dist/index.module.js
var import_react_dom2 = __toModule(require_react_dom());
var r4 = __toModule(require_react());
var Portal = /* @__PURE__ */ r4.forwardRef((a10, i10) => {
  var n10, d10;
  const {containerRef: s10, style: u10} = a10, c10 = __rest(a10, ["containerRef", "style"]), m10 = (n10 = s10 == null ? void 0 : s10.current) !== null && n10 !== void 0 ? n10 : globalThis === null || globalThis === void 0 || (d10 = globalThis.document) === null || d10 === void 0 ? void 0 : d10.body, [, f10] = r4.useState({});
  return useLayoutEffect8(() => {
    f10({});
  }, []), m10 ? /* @__PURE__ */ import_react_dom2.default.createPortal(/* @__PURE__ */ r4.createElement(Primitive.div, _extends2({"data-radix-portal": ""}, c10, {ref: i10, style: m10 === document.body ? __assign({position: "absolute", top: 0, left: 0, zIndex: 2147483647}, u10) : void 0})), m10) : null;
});
var UnstablePortal = /* @__PURE__ */ r4.forwardRef((t13, a10) => {
  var i10;
  const {container: n10 = globalThis === null || globalThis === void 0 || (i10 = globalThis.document) === null || i10 === void 0 ? void 0 : i10.body} = t13, d10 = __rest(t13, ["container"]);
  return n10 ? /* @__PURE__ */ import_react_dom2.default.createPortal(/* @__PURE__ */ r4.createElement(Primitive.div, _extends2({}, d10, {ref: a10})), n10) : null;
});

// ../../node_modules/@radix-ui/react-arrow/dist/index.module.js
var r5 = __toModule(require_react());
var Arrow = /* @__PURE__ */ r5.forwardRef((o13, i10) => {
  const {children: n10, width: s10 = 10, height: m10 = 5} = o13, p10 = __rest(o13, ["children", "width", "height"]);
  return r5.createElement(Primitive.svg, _extends2({}, p10, {ref: i10, width: s10, height: m10, viewBox: "0 0 30 10", preserveAspectRatio: "none"}), o13.asChild ? n10 : /* @__PURE__ */ r5.createElement("polygon", {points: "0,0 30,0 15,10"}));
});
var Root2 = Arrow;

// ../../node_modules/@radix-ui/react-use-size/dist/index.module.js
var e9 = __toModule(require_react());
function useSize(r12) {
  const [i10, t13] = e9.useState(void 0);
  return e9.useEffect(() => {
    if (r12) {
      const e14 = new ResizeObserver((e15) => {
        if (!Array.isArray(e15))
          return;
        if (!e15.length)
          return;
        const i11 = e15[0];
        let o13, n10;
        if ("borderBoxSize" in i11) {
          const e16 = i11.borderBoxSize, r13 = Array.isArray(e16) ? e16[0] : e16;
          o13 = r13.inlineSize, n10 = r13.blockSize;
        } else {
          const e16 = r12.getBoundingClientRect();
          o13 = e16.width, n10 = e16.height;
        }
        t13({width: o13, height: n10});
      });
      return e14.observe(r12, {box: "border-box"}), () => e14.unobserve(r12);
    }
    t13(void 0);
  }, [r12]), i10;
}

// ../../node_modules/@radix-ui/rect/dist/index.module.js
function observeElementRect(n10, o13) {
  const i10 = e10.get(n10);
  return i10 === void 0 ? (e10.set(n10, {rect: {}, callbacks: [o13]}), e10.size === 1 && (t7 = requestAnimationFrame(c2))) : (i10.callbacks.push(o13), o13(n10.getBoundingClientRect())), () => {
    const c10 = e10.get(n10);
    if (c10 === void 0)
      return;
    const i11 = c10.callbacks.indexOf(o13);
    i11 > -1 && c10.callbacks.splice(i11, 1), c10.callbacks.length === 0 && (e10.delete(n10), e10.size === 0 && cancelAnimationFrame(t7));
  };
}
var t7;
var e10 = new Map();
function c2() {
  const n10 = [];
  e10.forEach((t13, e14) => {
    const c10 = e14.getBoundingClientRect();
    var o13, i10;
    o13 = t13.rect, i10 = c10, (o13.width !== i10.width || o13.height !== i10.height || o13.top !== i10.top || o13.right !== i10.right || o13.bottom !== i10.bottom || o13.left !== i10.left) && (t13.rect = c10, n10.push(t13));
  }), n10.forEach((t13) => {
    t13.callbacks.forEach((e14) => e14(t13.rect));
  }), t7 = requestAnimationFrame(c2);
}

// ../../node_modules/@radix-ui/react-use-rect/dist/index.module.js
var r6 = __toModule(require_react());
function useRect(e14) {
  const [o13, c10] = r6.useState();
  return r6.useEffect(() => {
    if (e14) {
      const r12 = observeElementRect(e14, c10);
      return () => {
        c10(void 0), r12();
      };
    }
  }, [e14]), o13;
}

// ../../node_modules/@radix-ui/popper/dist/index.module.js
function getPlacementData({anchorRect: p10, popperSize: c10, arrowSize: f10, arrowOffset: l10 = 0, side: d10, sideOffset: h10 = 0, align: x10, alignOffset: g10 = 0, shouldAvoidCollisions: u10 = true, collisionBoundariesRect: w10, collisionTolerance: m10 = 0}) {
  if (!p10 || !c10 || !w10)
    return {popperStyles: o7, arrowStyles: n4};
  const y10 = function(e14, r12, o13 = 0, n10 = 0, i10) {
    const p11 = i10 ? i10.height : 0, a10 = t8(r12, e14, "x"), s10 = t8(r12, e14, "y"), c11 = s10.before - o13 - p11, f11 = s10.after + o13 + p11, l11 = a10.before - o13 - p11, d11 = a10.after + o13 + p11;
    return {top: {start: {x: a10.start + n10, y: c11}, center: {x: a10.center, y: c11}, end: {x: a10.end - n10, y: c11}}, right: {start: {x: d11, y: s10.start + n10}, center: {x: d11, y: s10.center}, end: {x: d11, y: s10.end - n10}}, bottom: {start: {x: a10.start + n10, y: f11}, center: {x: a10.center, y: f11}, end: {x: a10.end - n10, y: f11}}, left: {start: {x: l11, y: s10.start + n10}, center: {x: l11, y: s10.center}, end: {x: l11, y: s10.end - n10}}};
  }(c10, p10, h10, g10, f10), b10 = y10[d10][x10];
  if (u10 === false) {
    const t13 = e11(b10);
    let o13 = n4;
    f10 && (o13 = i2({popperSize: c10, arrowSize: f10, arrowOffset: l10, side: d10, align: x10}));
    return {popperStyles: __assign(__assign({}, t13), {"--radix-popper-transform-origin": r7(c10, d10, x10, l10, f10)}), arrowStyles: o13, placedSide: d10, placedAlign: x10};
  }
  const S10 = DOMRect.fromRect(__assign(__assign({}, c10), b10)), $10 = (O10 = w10, z10 = m10, DOMRect.fromRect({width: O10.width - 2 * z10, height: O10.height - 2 * z10, x: O10.left + z10, y: O10.top + z10}));
  var O10, z10;
  const R10 = s3(S10, $10), M10 = y10[a3(d10)][x10], D10 = function(t13, e14, r12) {
    const o13 = a3(t13);
    return e14[t13] && !r12[o13] ? o13 : t13;
  }(d10, R10, s3(DOMRect.fromRect(__assign(__assign({}, c10), M10)), $10)), A10 = function(t13, e14, r12, o13, n10) {
    const i10 = r12 === "top" || r12 === "bottom", p11 = i10 ? "left" : "top", a10 = i10 ? "right" : "bottom", s10 = i10 ? "width" : "height", c11 = e14[s10] > t13[s10];
    if ((o13 === "start" || o13 === "center") && (n10[p11] && c11 || n10[a10] && !c11))
      return "end";
    if ((o13 === "end" || o13 === "center") && (n10[a10] && c11 || n10[p11] && !c11))
      return "start";
    return o13;
  }(c10, p10, d10, x10, R10), I10 = e11(y10[D10][A10]);
  let C10 = n4;
  f10 && (C10 = i2({popperSize: c10, arrowSize: f10, arrowOffset: l10, side: D10, align: A10}));
  return {popperStyles: __assign(__assign({}, I10), {"--radix-popper-transform-origin": r7(c10, D10, A10, l10, f10)}), arrowStyles: C10, placedSide: D10, placedAlign: A10};
}
function t8(t13, e14, r12) {
  const o13 = t13[r12 === "x" ? "left" : "top"], n10 = r12 === "x" ? "width" : "height", i10 = t13[n10], p10 = e14[n10];
  return {before: o13 - p10, start: o13, center: o13 + (i10 - p10) / 2, end: o13 + i10 - p10, after: o13 + i10};
}
function e11(t13) {
  return {position: "absolute", top: 0, left: 0, minWidth: "max-content", willChange: "transform", transform: `translate3d(${Math.round(t13.x + window.scrollX)}px, ${Math.round(t13.y + window.scrollY)}px, 0)`};
}
function r7(t13, e14, r12, o13, n10) {
  const i10 = e14 === "top" || e14 === "bottom", p10 = n10 ? n10.width : 0, a10 = n10 ? n10.height : 0, s10 = p10 / 2 + o13;
  let c10 = "", f10 = "";
  return i10 ? (c10 = {start: `${s10}px`, center: "center", end: t13.width - s10 + "px"}[r12], f10 = e14 === "top" ? `${t13.height + a10}px` : -a10 + "px") : (c10 = e14 === "left" ? `${t13.width + a10}px` : -a10 + "px", f10 = {start: `${s10}px`, center: "center", end: t13.height - s10 + "px"}[r12]), `${c10} ${f10}`;
}
var o7 = {position: "fixed", top: 0, left: 0, opacity: 0, transform: "translate3d(0, -200%, 0)"};
var n4 = {position: "absolute", opacity: 0};
function i2({popperSize: t13, arrowSize: e14, arrowOffset: r12, side: o13, align: n10}) {
  const i10 = (t13.width - e14.width) / 2, a10 = (t13.height - e14.width) / 2, s10 = {top: 0, right: 90, bottom: 180, left: -90}[o13], c10 = Math.max(e14.width, e14.height), f10 = {width: `${c10}px`, height: `${c10}px`, transform: `rotate(${s10}deg)`, willChange: "transform", position: "absolute", [o13]: "100%", direction: p4(o13, n10)};
  return o13 !== "top" && o13 !== "bottom" || (n10 === "start" && (f10.left = `${r12}px`), n10 === "center" && (f10.left = `${i10}px`), n10 === "end" && (f10.right = `${r12}px`)), o13 !== "left" && o13 !== "right" || (n10 === "start" && (f10.top = `${r12}px`), n10 === "center" && (f10.top = `${a10}px`), n10 === "end" && (f10.bottom = `${r12}px`)), f10;
}
function p4(t13, e14) {
  return (t13 !== "top" && t13 !== "right" || e14 !== "end") && (t13 !== "bottom" && t13 !== "left" || e14 === "end") ? "ltr" : "rtl";
}
function a3(t13) {
  return {top: "bottom", right: "left", bottom: "top", left: "right"}[t13];
}
function s3(t13, e14) {
  return {top: t13.top < e14.top, right: t13.right > e14.right, bottom: t13.bottom > e14.bottom, left: t13.left < e14.left};
}

// ../../node_modules/@radix-ui/react-popper/dist/index.module.js
var s4 = __toModule(require_react());
var [c3, l5] = createContextScope("Popper");
var [f3, d4] = c3("Popper");
var Popper = (e14) => {
  const {__scopePopper: o13, children: r12} = e14, [t13, n10] = s4.useState(null);
  return s4.createElement(f3, {scope: o13, anchor: t13, onAnchorChange: n10}, r12);
};
var PopperAnchor = /* @__PURE__ */ s4.forwardRef((e14, r12) => {
  const {__scopePopper: t13, virtualRef: n10} = e14, p10 = __rest(e14, ["__scopePopper", "virtualRef"]), c10 = d4("PopperAnchor", t13), l10 = s4.useRef(null), f10 = useComposedRefs(r12, l10);
  return s4.useEffect(() => {
    c10.onAnchorChange((n10 == null ? void 0 : n10.current) || l10.current);
  }), n10 ? null : /* @__PURE__ */ s4.createElement(Primitive.div, _extends2({}, p10, {ref: f10}));
});
var [u2, m4] = c3("PopperContent");
var PopperContent = /* @__PURE__ */ s4.forwardRef((e14, n10) => {
  const {__scopePopper: c10, side: l10 = "bottom", sideOffset: f10, align: m10 = "center", alignOffset: w10, collisionTolerance: h10, avoidCollisions: x10 = true} = e14, v10 = __rest(e14, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "collisionTolerance", "avoidCollisions"]), P10 = d4("PopperContent", c10), [A10, g10] = s4.useState(), E10 = useRect(P10.anchor), [y10, C10] = s4.useState(null), S10 = useSize(y10), [R10, O10] = s4.useState(null), _17 = useSize(R10), b10 = useComposedRefs(n10, (e15) => C10(e15)), z10 = function() {
    const [e15, o13] = s4.useState(void 0);
    return s4.useEffect(() => {
      let e16;
      function r12() {
        o13({width: window.innerWidth, height: window.innerHeight});
      }
      function t13() {
        window.clearTimeout(e16), e16 = window.setTimeout(r12, 100);
      }
      return r12(), window.addEventListener("resize", t13), () => window.removeEventListener("resize", t13);
    }, []), e15;
  }(), T10 = z10 ? DOMRect.fromRect(__assign(__assign({}, z10), {x: 0, y: 0})) : void 0, {popperStyles: k10, arrowStyles: L10, placedSide: B10, placedAlign: D10} = getPlacementData({anchorRect: E10, popperSize: S10, arrowSize: _17, arrowOffset: A10, side: l10, sideOffset: f10, align: m10, alignOffset: w10, shouldAvoidCollisions: x10, collisionBoundariesRect: T10, collisionTolerance: h10}), H10 = B10 !== void 0;
  return s4.createElement("div", {style: k10, "data-radix-popper-content-wrapper": ""}, /* @__PURE__ */ s4.createElement(u2, {scope: c10, arrowStyles: L10, onArrowChange: O10, onArrowOffsetChange: g10}, /* @__PURE__ */ s4.createElement(Primitive.div, _extends2({"data-side": B10, "data-align": D10}, v10, {style: __assign(__assign({}, v10.style), {animation: H10 ? void 0 : "none"}), ref: b10}))));
});
var PopperArrow = /* @__PURE__ */ s4.forwardRef(function(o13, r12) {
  const {__scopePopper: t13, offset: n10} = o13, i10 = __rest(o13, ["__scopePopper", "offset"]), p10 = m4("PopperArrow", t13), {onArrowOffsetChange: c10} = p10;
  return s4.useEffect(() => c10(n10), [c10, n10]), /* @__PURE__ */ s4.createElement("span", {style: __assign(__assign({}, p10.arrowStyles), {pointerEvents: "none"})}, /* @__PURE__ */ s4.createElement("span", {ref: p10.onArrowChange, style: {display: "inline-block", verticalAlign: "top", pointerEvents: "auto"}}, /* @__PURE__ */ s4.createElement(Root2, _extends2({}, i10, {ref: r12, style: __assign(__assign({}, i10.style), {display: "block"})}))));
});
var Root3 = Popper;
var Anchor = PopperAnchor;
var Content = PopperContent;
var Arrow2 = PopperArrow;

// ../../node_modules/@radix-ui/react-presence/dist/index.module.js
var t9 = __toModule(require_react());
var Presence = (u10) => {
  const {present: o13, children: i10} = u10, s10 = function(n10) {
    const [u11, o14] = t9.useState(), i11 = t9.useRef({}), s11 = t9.useRef(n10), c11 = t9.useRef("none"), a11 = n10 ? "mounted" : "unmounted", [d10, m10] = function(e14, n11) {
      return t9.useReducer((e15, t13) => {
        const r12 = n11[e15][t13];
        return r12 != null ? r12 : e15;
      }, e14);
    }(a11, {mounted: {UNMOUNT: "unmounted", ANIMATION_OUT: "unmountSuspended"}, unmountSuspended: {MOUNT: "mounted", ANIMATION_END: "unmounted"}, unmounted: {MOUNT: "mounted"}});
    return t9.useEffect(() => {
      const e14 = r8(i11.current);
      c11.current = d10 === "mounted" ? e14 : "none";
    }, [d10]), useLayoutEffect8(() => {
      const e14 = i11.current, t13 = s11.current;
      if (t13 !== n10) {
        const u12 = c11.current, o15 = r8(e14);
        if (n10)
          m10("MOUNT");
        else if (o15 === "none" || (e14 == null ? void 0 : e14.display) === "none")
          m10("UNMOUNT");
        else {
          const e15 = u12 !== o15;
          m10(t13 && e15 ? "ANIMATION_OUT" : "UNMOUNT");
        }
        s11.current = n10;
      }
    }, [n10, m10]), useLayoutEffect8(() => {
      if (u11) {
        const e14 = (e15) => {
          const n12 = r8(i11.current).includes(e15.animationName);
          e15.target === u11 && n12 && m10("ANIMATION_END");
        }, n11 = (e15) => {
          e15.target === u11 && (c11.current = r8(i11.current));
        };
        return u11.addEventListener("animationstart", n11), u11.addEventListener("animationcancel", e14), u11.addEventListener("animationend", e14), () => {
          u11.removeEventListener("animationstart", n11), u11.removeEventListener("animationcancel", e14), u11.removeEventListener("animationend", e14);
        };
      }
      m10("ANIMATION_END");
    }, [u11, m10]), {isPresent: ["mounted", "unmountSuspended"].includes(d10), ref: t9.useCallback((e14) => {
      e14 && (i11.current = getComputedStyle(e14)), o14(e14);
    }, [])};
  }(o13), c10 = typeof i10 == "function" ? i10({present: s10.isPresent}) : t9.Children.only(i10), a10 = useComposedRefs(s10.ref, c10.ref);
  return typeof i10 == "function" || s10.isPresent ? /* @__PURE__ */ t9.cloneElement(c10, {ref: a10}) : null;
};
function r8(e14) {
  return (e14 == null ? void 0 : e14.animationName) || "none";
}
Presence.displayName = "Presence";

// ../../node_modules/@radix-ui/react-focus-scope/dist/index.module.js
var o8 = __toModule(require_react());
var c4 = {bubbles: false, cancelable: true};
var FocusScope = /* @__PURE__ */ o8.forwardRef((i10, f10) => {
  const {loop: l10 = false, trapped: m10 = false, onMountAutoFocus: p10, onUnmountAutoFocus: v10} = i10, E10 = __rest(i10, ["loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus"]), [F10, S10] = o8.useState(null), b10 = useCallbackRef(p10), T10 = useCallbackRef(v10), y10 = o8.useRef(null), L10 = useComposedRefs(f10, (e14) => S10(e14)), h10 = o8.useRef({paused: false, pause() {
    this.paused = true;
  }, resume() {
    this.paused = false;
  }}).current;
  o8.useEffect(() => {
    if (m10) {
      let e14 = function(e15) {
        if (h10.paused || !F10)
          return;
        const t14 = e15.target;
        F10.contains(t14) ? y10.current = t14 : a4(y10.current, {select: true});
      }, t13 = function(e15) {
        !h10.paused && F10 && (F10.contains(e15.relatedTarget) || a4(y10.current, {select: true}));
      };
      return document.addEventListener("focusin", e14), document.addEventListener("focusout", t13), () => {
        document.removeEventListener("focusin", e14), document.removeEventListener("focusout", t13);
      };
    }
  }, [m10, F10, h10.paused]), o8.useEffect(() => {
    if (F10) {
      d5.add(h10);
      const t13 = document.activeElement;
      if (!F10.contains(t13)) {
        const n10 = new Event("focusScope.autoFocusOnMount", c4);
        F10.addEventListener("focusScope.autoFocusOnMount", b10), F10.dispatchEvent(n10), n10.defaultPrevented || (!function(e15, {select: t14 = false} = {}) {
          const n11 = document.activeElement;
          for (const o13 of e15)
            if (a4(o13, {select: t14}), document.activeElement !== n11)
              return;
        }((e14 = r9(F10), e14.filter((e15) => e15.tagName !== "A")), {select: true}), document.activeElement === t13 && a4(F10));
      }
      return () => {
        F10.removeEventListener("focusScope.autoFocusOnMount", b10), setTimeout(() => {
          const e15 = new Event("focusScope.autoFocusOnUnmount", c4);
          F10.addEventListener("focusScope.autoFocusOnUnmount", T10), F10.dispatchEvent(e15), e15.defaultPrevented || a4(t13 != null ? t13 : document.body, {select: true}), F10.removeEventListener("focusScope.autoFocusOnUnmount", T10), d5.remove(h10);
        }, 0);
      };
    }
    var e14;
  }, [F10, b10, T10, h10]);
  const N10 = o8.useCallback((e14) => {
    if (!l10 && !m10)
      return;
    if (h10.paused)
      return;
    const t13 = e14.key === "Tab" && !e14.altKey && !e14.ctrlKey && !e14.metaKey, n10 = document.activeElement;
    if (t13 && n10) {
      const t14 = e14.currentTarget, [o13, u10] = function(e15) {
        const t15 = r9(e15), n11 = s5(t15, e15), o14 = s5(t15.reverse(), e15);
        return [n11, o14];
      }(t14);
      o13 && u10 ? e14.shiftKey || n10 !== u10 ? e14.shiftKey && n10 === o13 && (e14.preventDefault(), l10 && a4(u10, {select: true})) : (e14.preventDefault(), l10 && a4(o13, {select: true})) : n10 === t14 && e14.preventDefault();
    }
  }, [l10, m10, h10.paused]);
  return o8.createElement(Primitive.div, _extends2({tabIndex: -1}, E10, {ref: L10, onKeyDown: N10}));
});
function r9(e14) {
  const t13 = [], n10 = document.createTreeWalker(e14, NodeFilter.SHOW_ELEMENT, {acceptNode: (e15) => {
    const t14 = e15.tagName === "INPUT" && e15.type === "hidden";
    return e15.disabled || e15.hidden || t14 ? NodeFilter.FILTER_SKIP : e15.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
  }});
  for (; n10.nextNode(); )
    t13.push(n10.currentNode);
  return t13;
}
function s5(e14, t13) {
  for (const n10 of e14)
    if (!i3(n10, {upTo: t13}))
      return n10;
}
function i3(e14, {upTo: t13}) {
  if (getComputedStyle(e14).visibility === "hidden")
    return true;
  for (; e14; ) {
    if (t13 !== void 0 && e14 === t13)
      return false;
    if (getComputedStyle(e14).display === "none")
      return true;
    e14 = e14.parentElement;
  }
  return false;
}
function a4(e14, {select: t13 = false} = {}) {
  if (e14 && e14.focus) {
    const n10 = document.activeElement;
    e14.focus({preventScroll: true}), e14 !== n10 && function(e15) {
      return e15 instanceof HTMLInputElement && "select" in e15;
    }(e14) && t13 && e14.select();
  }
}
var d5 = function() {
  let e14 = [];
  return {add(t13) {
    const n10 = e14[0];
    t13 !== n10 && (n10 == null || n10.pause()), e14 = f4(e14, t13), e14.unshift(t13);
  }, remove(t13) {
    var n10;
    e14 = f4(e14, t13), (n10 = e14[0]) === null || n10 === void 0 || n10.resume();
  }};
}();
function f4(e14, t13) {
  const n10 = [...e14], o13 = n10.indexOf(t13);
  return o13 !== -1 && n10.splice(o13, 1), n10;
}

// ../../node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
var t10 = __toModule(require_react());
function useEscapeKeydown(n10) {
  const o13 = useCallbackRef(n10);
  t10.useEffect(() => {
    const e14 = (e15) => {
      e15.key === "Escape" && o13(e15);
    };
    return document.addEventListener("keydown", e14), () => document.removeEventListener("keydown", e14);
  }, [o13]);
}

// ../../node_modules/@radix-ui/react-use-body-pointer-events/dist/index.module.js
var t11 = __toModule(require_react());
var n5;
var o9 = 0;
function useBodyPointerEvents({disabled: r12}) {
  const i10 = t11.useRef(false);
  useLayoutEffect8(() => {
    if (r12) {
      let e14 = function() {
        o9--, o9 === 0 && (document.body.style.pointerEvents = n5);
      }, t13 = function(e15) {
        i10.current = e15.pointerType !== "mouse";
      };
      return o9 === 0 && (n5 = document.body.style.pointerEvents), document.body.style.pointerEvents = "none", o9++, document.addEventListener("pointerup", t13), () => {
        i10.current ? document.addEventListener("click", e14, {once: true}) : e14(), document.removeEventListener("pointerup", t13);
      };
    }
  }, [r12]);
}

// ../../node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
var i4 = __toModule(require_react());
var u3 = /* @__PURE__ */ i4.createContext({layers: new Set(), layersWithOutsidePointerEventsDisabled: new Set(), branches: new Set()});
var DismissableLayer = /* @__PURE__ */ i4.forwardRef((l10, m10) => {
  const {disableOutsidePointerEvents: f10 = false, onEscapeKeyDown: p10, onPointerDownOutside: v10, onFocusOutside: b10, onInteractOutside: E10, onDismiss: y10} = l10, w10 = __rest(l10, ["disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss"]), h10 = i4.useContext(u3), [D10, x10] = i4.useState(null), [, C10] = i4.useState({}), L10 = useComposedRefs(m10, (e14) => x10(e14)), P10 = Array.from(h10.layers), [O10] = [...h10.layersWithOutsidePointerEventsDisabled].slice(-1), g10 = P10.indexOf(O10), B10 = D10 ? P10.indexOf(D10) : -1, R10 = h10.layersWithOutsidePointerEventsDisabled.size > 0, F10 = B10 >= g10, S10 = function(e14) {
    const n10 = useCallbackRef(e14), r12 = i4.useRef(false);
    return i4.useEffect(() => {
      const e15 = (e16) => {
        if (e16.target && !r12.current) {
          d6("dismissableLayer.pointerDownOutside", n10, {originalEvent: e16});
        }
        r12.current = false;
      }, t13 = window.setTimeout(() => {
        document.addEventListener("pointerdown", e15);
      }, 0);
      return () => {
        window.clearTimeout(t13), document.removeEventListener("pointerdown", e15);
      };
    }, [n10]), {onPointerDownCapture: () => r12.current = true};
  }((e14) => {
    const t13 = e14.target, n10 = [...h10.branches].some((e15) => e15.contains(t13));
    F10 && !n10 && (v10 == null || v10(e14), E10 == null || E10(e14), e14.defaultPrevented || y10 == null || y10());
  }), W10 = function(e14) {
    const n10 = useCallbackRef(e14), r12 = i4.useRef(false);
    return i4.useEffect(() => {
      const e15 = (e16) => {
        if (e16.target && !r12.current) {
          d6("dismissableLayer.focusOutside", n10, {originalEvent: e16});
        }
      };
      return document.addEventListener("focusin", e15), () => document.removeEventListener("focusin", e15);
    }, [n10]), {onFocusCapture: () => r12.current = true, onBlurCapture: () => r12.current = false};
  }((e14) => {
    const t13 = e14.target;
    [...h10.branches].some((e15) => e15.contains(t13)) || (b10 == null || b10(e14), E10 == null || E10(e14), e14.defaultPrevented || y10 == null || y10());
  });
  return useEscapeKeydown((e14) => {
    B10 === h10.layers.size - 1 && (p10 == null || p10(e14), e14.defaultPrevented || y10 == null || y10());
  }), useBodyPointerEvents({disabled: f10}), i4.useEffect(() => {
    D10 && (f10 && h10.layersWithOutsidePointerEventsDisabled.add(D10), h10.layers.add(D10), c5());
  }, [D10, f10, h10]), i4.useEffect(() => () => {
    D10 && (h10.layers.delete(D10), h10.layersWithOutsidePointerEventsDisabled.delete(D10), c5());
  }, [D10, h10]), i4.useEffect(() => {
    const e14 = () => C10({});
    return document.addEventListener("dismissableLayer.update", e14), () => document.removeEventListener("dismissableLayer.update", e14);
  }, []), /* @__PURE__ */ i4.createElement(Primitive.div, _extends2({}, w10, {ref: L10, style: __assign({pointerEvents: R10 ? F10 ? "auto" : "none" : void 0}, l10.style), onFocusCapture: composeEventHandlers(l10.onFocusCapture, W10.onFocusCapture), onBlurCapture: composeEventHandlers(l10.onBlurCapture, W10.onBlurCapture), onPointerDownCapture: composeEventHandlers(l10.onPointerDownCapture, S10.onPointerDownCapture)}));
});
function c5() {
  const e14 = new Event("dismissableLayer.update");
  document.dispatchEvent(e14);
}
function d6(e14, t13, n10) {
  const r12 = n10.originalEvent.target, s10 = new CustomEvent(e14, {bubbles: false, cancelable: true, detail: n10});
  return t13 && r12.addEventListener(e14, t13, {once: true}), !r12.dispatchEvent(s10);
}

// ../../node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {};
var lockCount = 0;
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (parentNode === void 0) {
    parentNode = getDefaultParent(originalTarget);
  }
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
  if (!markerMap[markerName]) {
    markerMap[markerName] = new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = new Set();
  var keep = function(el2) {
    if (!el2 || elementsToKeep.has(el2)) {
      return;
    }
    elementsToKeep.add(el2);
    keep(el2.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || targets.indexOf(parent) >= 0) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        var attr = node.getAttribute("aria-hidden");
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node) || 0) + 1;
        var markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenNodes.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node, true);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node.setAttribute("aria-hidden", "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute("aria-hidden");
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = new WeakMap();
      counterMap = new WeakMap();
      uncontrolledNodes = new WeakMap();
      markerMap = {};
    }
  };
};

// ../../node_modules/react-remove-scroll/node_modules/tslib/modules/index.js
var import_tslib17 = __toModule(require_tslib2());
var {
  __extends: __extends2,
  __assign: __assign4,
  __rest: __rest3,
  __decorate: __decorate2,
  __param: __param2,
  __metadata: __metadata2,
  __awaiter: __awaiter2,
  __generator: __generator2,
  __exportStar: __exportStar3,
  __createBinding: __createBinding2,
  __values: __values3,
  __read: __read3,
  __spread: __spread2,
  __spreadArrays: __spreadArrays2,
  __await: __await2,
  __asyncGenerator: __asyncGenerator2,
  __asyncDelegator: __asyncDelegator2,
  __asyncValues: __asyncValues2,
  __makeTemplateObject: __makeTemplateObject2,
  __importStar: __importStar2,
  __importDefault: __importDefault2,
  __classPrivateFieldGet: __classPrivateFieldGet2,
  __classPrivateFieldSet: __classPrivateFieldSet2
} = import_tslib17.default;

// ../../node_modules/react-remove-scroll/dist/es2015/Combination.js
var React58 = __toModule(require_react());

// ../../node_modules/react-remove-scroll/dist/es2015/UI.js
var React54 = __toModule(require_react());

// ../../node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// ../../node_modules/use-sidecar/node_modules/tslib/modules/index.js
var import_tslib18 = __toModule(require_tslib3());
var {
  __extends: __extends3,
  __assign: __assign5,
  __rest: __rest4,
  __decorate: __decorate3,
  __param: __param3,
  __metadata: __metadata3,
  __awaiter: __awaiter3,
  __generator: __generator3,
  __exportStar: __exportStar4,
  __createBinding: __createBinding3,
  __values: __values4,
  __read: __read4,
  __spread: __spread3,
  __spreadArrays: __spreadArrays3,
  __await: __await3,
  __asyncGenerator: __asyncGenerator3,
  __asyncDelegator: __asyncDelegator3,
  __asyncValues: __asyncValues3,
  __makeTemplateObject: __makeTemplateObject3,
  __importStar: __importStar3,
  __importDefault: __importDefault3,
  __classPrivateFieldGet: __classPrivateFieldGet3,
  __classPrivateFieldSet: __classPrivateFieldSet3
} = import_tslib18.default;

// ../../node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a10) {
  return a10;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x10) {
          return x10 !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x10) {
          return cb2(x10);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x10) {
          pendingQueue.push(x10);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign5({async: true, ssr: false}, options);
  return medium;
}

// ../../node_modules/use-sidecar/dist/es2015/exports.js
var React53 = __toModule(require_react());
var SideCar = function(_a4) {
  var sideCar = _a4.sideCar, rest = __rest4(_a4, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React53.createElement(Target, __assign5({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// ../../node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// ../../node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// ../../node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react14 = __toModule(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react14.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// ../../node_modules/use-callback-ref/dist/es2015/useMergeRef.js
function useMergeRefs(refs, defaultValue) {
  return useCallbackRef2(defaultValue, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
}

// ../../node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React54.forwardRef(function(props, parentRef) {
  var ref = React54.useRef(null);
  var _a4 = React54.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a4[0], setCallbacks = _a4[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container3 = _b2 === void 0 ? "div" : _b2, rest = __rest3(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([
    ref,
    parentRef
  ]);
  var containerProps = __assign4({}, rest, callbacks);
  return React54.createElement(React54.Fragment, null, enabled && React54.createElement(SideCar2, {sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref}), forwardProps ? React54.cloneElement(React54.Children.only(children), __assign4({}, containerProps, {ref: containerRef})) : React54.createElement(Container3, __assign4({}, containerProps, {className, ref: containerRef}), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// ../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React57 = __toModule(require_react());

// ../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React56 = __toModule(require_react());

// ../../node_modules/react-style-singleton/dist/es2015/hook.js
var React55 = __toModule(require_react());

// ../../node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// ../../node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// ../../node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2) {
    React55.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, []);
  };
};

// ../../node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet = function(_a4) {
    var styles2 = _a4.styles;
    useStyle2(styles2);
    return null;
  };
  return Sheet;
};

// ../../node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse3 = function(x10) {
  return parseInt(x10 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs2 = window.getComputedStyle(document.body);
  var left = cs2[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs2[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs2[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [
    parse3(left),
    parse3(top2),
    parse3(right)
  ];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// ../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var getStyles = function(_a4, allowRelative, gapMode, important) {
  var left = _a4.left, top2 = _a4.top, right = _a4.right, gap = _a4.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  ." + noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
    allowRelative && "position: relative " + important + ";",
    gapMode === "margin" && "\n    padding-left: " + left + "px;\n    padding-top: " + top2 + "px;\n    padding-right: " + right + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
    gapMode === "padding" && "padding-right: " + gap + "px " + important + ";"
  ].filter(Boolean).join("") + "\n  }\n  \n  ." + zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + zeroRightClassName + " ." + zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + fullWidthClassName + " ." + fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + removedBarSizeVariable + ": " + gap + "px;\n  }\n";
};
var RemoveScrollBar = function(props) {
  var _a4 = React56.useState(getGapWidth(props.gapMode)), gap = _a4[0], setGap = _a4[1];
  React56.useEffect(function() {
    setGap(getGapWidth(props.gapMode));
  }, [props.gapMode]);
  var noRelative = props.noRelative, noImportant = props.noImportant, _b2 = props.gapMode, gapMode = _b2 === void 0 ? "margin" : _b2;
  return React56.createElement(Style, {styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "")});
};

// ../../node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var elementCouldBeVScrolled = function(node) {
  var styles2 = window.getComputedStyle(node);
  return styles2.overflowY !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowY === "visible");
};
var elementCouldBeHScrolled = function(node) {
  var styles2 = window.getComputedStyle(node);
  if (node.type === "range") {
    return true;
  }
  return styles2.overflowX !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowX === "visible");
};
var locationCouldBeScrolled = function(axis, node) {
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a4 = getScrollVariables(axis, current), s10 = _a4[1], d10 = _a4[2];
      if (s10 > d10) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a4) {
  var scrollTop = _a4.scrollTop, scrollHeight = _a4.scrollHeight, clientHeight = _a4.clientHeight;
  return [scrollTop, scrollHeight, clientHeight];
};
var getHScrollVariables = function(_a4) {
  var scrollLeft = _a4.scrollLeft, scrollWidth = _a4.scrollWidth, clientWidth = _a4.clientWidth;
  return [scrollLeft, scrollWidth, clientWidth];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a4 = getScrollVariables(axis, target), position = _a4[0], scroll_1 = _a4[1], capacity = _a4[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// ../../node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? {passive: false} : false;

// ../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x10, y10) {
  return x10[0] === y10[0] && x10[1] === y10[1];
};
var generateStyle = function(id2) {
  return "\n  .block-interactivity-" + id2 + " {pointer-events: none;}\n  .allow-interactivity-" + id2 + " {pointer-events: all;}\n";
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React57.useRef([]);
  var touchStartRef = React57.useRef([0, 0]);
  var activeAxis = React57.useRef();
  var id2 = React57.useState(idCounter++)[0];
  var Style2 = React57.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React57.useRef(props);
  React57.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React57.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-" + id2);
      var allow_1 = [
        props.lockRef.current
      ].concat((props.shards || []).map(extractRef)).filter(Boolean);
      allow_1.forEach(function(el2) {
        return el2.classList.add("allow-interactivity-" + id2);
      });
      return function() {
        document.body.classList.remove("block-interactivity-" + id2);
        allow_1.forEach(function(el2) {
          return el2.classList.remove("allow-interactivity-" + id2);
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React57.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React57.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e14) {
      return e14.name === event.type && e14.target === event.target && deltaCompare(e14.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      event.preventDefault();
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        event.preventDefault();
      }
    }
  }, []);
  var shouldCancel = React57.useCallback(function(name, delta, target, should) {
    var event = {name, delta, target, should};
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e14) {
        return e14 !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React57.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React57.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React57.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React57.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React57.createElement(React57.Fragment, null, inert ? React57.createElement(Style2, {styles: generateStyle(id2)}) : null, removeScrollBar ? React57.createElement(RemoveScrollBar, {gapMode: "margin"}) : null);
}

// ../../node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// ../../node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React58.forwardRef(function(props, ref) {
  return React58.createElement(RemoveScroll, __assign4({}, props, {ref, sideCar: sidecar_default}));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// ../../node_modules/@radix-ui/react-menu/dist/index.module.js
var E2 = __toModule(require_react());
var x2 = ["Enter", " "];
var b4 = ["ArrowUp", "PageDown", "End"];
var R4 = ["ArrowDown", "PageUp", "Home", ...b4];
var _14 = {ltr: [...x2, "ArrowRight"], rtl: [...x2, "ArrowLeft"]};
var y2 = {ltr: ["ArrowLeft"], rtl: ["ArrowRight"]};
var [I2, k2, P2] = createCollection("Menu");
var [D2, S2] = createContextScope("Menu", [P2, l5, v2]);
var O2 = l5();
var T3 = v2();
var [L3, A2] = D2("Menu");
var Menu = (e14) => {
  const {__scopeMenu: n10, open: o13 = false, children: u10, onOpenChange: c10, modal: i10 = true} = e14, s10 = O2(n10), [l10, d10] = E2.useState(null), p10 = E2.useRef(false), f10 = useCallbackRef(c10), m10 = useDirection(l10, e14.dir);
  return E2.useEffect(() => {
    const e15 = () => {
      p10.current = true, document.addEventListener("pointerdown", n11, {capture: true, once: true}), document.addEventListener("pointermove", n11, {capture: true, once: true});
    }, n11 = () => p10.current = false;
    return document.addEventListener("keydown", e15, {capture: true}), () => {
      document.removeEventListener("keydown", e15, {capture: true}), document.removeEventListener("pointerdown", n11, {capture: true}), document.removeEventListener("pointermove", n11, {capture: true});
    };
  }, []), /* @__PURE__ */ E2.createElement(Root3, s10, /* @__PURE__ */ E2.createElement(L3, {scope: n10, isSubmenu: false, isUsingKeyboardRef: p10, dir: m10, open: o13, onOpenChange: f10, content: l10, onContentChange: d10, onRootClose: E2.useCallback(() => f10(false), [f10]), modal: i10}, u10));
};
var MenuSub = (n10) => {
  const {__scopeMenu: r12, children: o13, open: u10 = false, onOpenChange: c10} = n10, i10 = A2("MenuSub", r12), s10 = O2(r12), [l10, d10] = E2.useState(null), [p10, f10] = E2.useState(null), m10 = useCallbackRef(c10);
  return E2.useEffect(() => (i10.open === false && m10(false), () => m10(false)), [i10.open, m10]), /* @__PURE__ */ E2.createElement(Root3, s10, /* @__PURE__ */ E2.createElement(L3, {scope: r12, isSubmenu: true, isUsingKeyboardRef: i10.isUsingKeyboardRef, dir: i10.dir, open: u10, onOpenChange: m10, content: p10, onContentChange: f10, onRootClose: i10.onRootClose, contentId: useId(), trigger: l10, onTriggerChange: d10, triggerId: useId(), modal: false}, o13));
};
var MenuAnchor = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13} = e14, r12 = __rest(e14, ["__scopeMenu"]), o13 = O2(t13);
  return E2.createElement(Anchor, _extends2({}, o13, r12, {ref: n10}));
});
var [F3, K2] = D2("MenuContent");
var MenuContent = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {forceMount: t13} = e14, r12 = __rest(e14, ["forceMount"]), o13 = A2("MenuContent", e14.__scopeMenu);
  return E2.createElement(I2.Provider, {scope: e14.__scopeMenu}, /* @__PURE__ */ E2.createElement(Presence, {present: t13 || o13.open}, /* @__PURE__ */ E2.createElement(I2.Slot, {scope: e14.__scopeMenu}, o13.isSubmenu ? /* @__PURE__ */ E2.createElement(X2, _extends2({}, r12, {ref: n10})) : /* @__PURE__ */ E2.createElement(G2, _extends2({}, r12, {ref: n10})))));
});
var G2 = /* @__PURE__ */ E2.forwardRef((e14, n10) => A2("MenuContent", e14.__scopeMenu).modal ? /* @__PURE__ */ E2.createElement(U2, _extends2({}, e14, {ref: n10})) : /* @__PURE__ */ E2.createElement(V4, _extends2({}, e14, {ref: n10})));
var U2 = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const t13 = A2("MenuContent", e14.__scopeMenu), r12 = E2.useRef(null), o13 = useComposedRefs(n10, r12);
  return E2.useEffect(() => {
    const e15 = r12.current;
    if (e15)
      return hideOthers(e15);
  }, []), /* @__PURE__ */ E2.createElement(B2, _extends2({}, e14, {ref: o13, trapFocus: t13.open, disableOutsidePointerEvents: t13.open, disableOutsideScroll: true, onFocusOutside: composeEventHandlers(e14.onFocusOutside, (e15) => e15.preventDefault(), {checkForDefaultPrevented: false}), onDismiss: () => t13.onOpenChange(false)}));
});
var V4 = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const t13 = A2("MenuContent", e14.__scopeMenu);
  return E2.createElement(B2, _extends2({}, e14, {ref: n10, trapFocus: false, disableOutsidePointerEvents: false, disableOutsideScroll: false, onDismiss: () => t13.onOpenChange(false)}));
});
var X2 = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const t13 = A2("MenuContent", e14.__scopeMenu), r12 = E2.useRef(null), o13 = useComposedRefs(n10, r12);
  return t13.isSubmenu ? /* @__PURE__ */ E2.createElement(B2, _extends2({id: t13.contentId, "aria-labelledby": t13.triggerId}, e14, {ref: o13, align: "start", side: t13.dir === "rtl" ? "left" : "right", portalled: true, disableOutsidePointerEvents: false, disableOutsideScroll: false, trapFocus: false, onOpenAutoFocus: (e15) => {
    var n11;
    t13.isUsingKeyboardRef.current && ((n11 = r12.current) === null || n11 === void 0 || n11.focus()), e15.preventDefault();
  }, onCloseAutoFocus: (e15) => e15.preventDefault(), onFocusOutside: composeEventHandlers(e14.onFocusOutside, (e15) => {
    e15.target !== t13.trigger && t13.onOpenChange(false);
  }), onEscapeKeyDown: composeEventHandlers(e14.onEscapeKeyDown, t13.onRootClose), onKeyDown: composeEventHandlers(e14.onKeyDown, (e15) => {
    const n11 = e15.currentTarget.contains(e15.target), r13 = y2[t13.dir].includes(e15.key);
    var o14;
    n11 && r13 && (t13.onOpenChange(false), (o14 = t13.trigger) === null || o14 === void 0 || o14.focus(), e15.preventDefault());
  })})) : null;
});
var B2 = /* @__PURE__ */ E2.forwardRef((e14, t13) => {
  const {__scopeMenu: r12, loop: u10 = false, trapFocus: i10, onOpenAutoFocus: s10, onCloseAutoFocus: l10, disableOutsidePointerEvents: f10, onEscapeKeyDown: v10, onPointerDownOutside: g10, onFocusOutside: h10, onInteractOutside: x10, onDismiss: _17, disableOutsideScroll: y10, allowPinchZoom: I10, portalled: P10} = e14, D10 = __rest(e14, ["__scopeMenu", "loop", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss", "disableOutsideScroll", "allowPinchZoom", "portalled"]), S10 = A2("MenuContent", r12), L10 = O2(r12), K10 = T3(r12), G10 = k2(r12), [U10, V10] = E2.useState(null), X10 = E2.useRef(null), B10 = useComposedRefs(t13, X10, S10.onContentChange), Y10 = E2.useRef(0), Z10 = E2.useRef(""), z10 = E2.useRef(0), H10 = E2.useRef(null), W10 = E2.useRef("right"), q10 = E2.useRef(0), N10 = P10 ? Portal : E2.Fragment, Q = y10 ? Combination_default : E2.Fragment, $10 = y10 ? {allowPinchZoom: I10} : void 0, ee2 = (e15) => {
    var n10, t14;
    const r13 = Z10.current + e15, o13 = G10().filter((e16) => !e16.disabled), u11 = document.activeElement, c10 = (n10 = o13.find((e16) => e16.ref.current === u11)) === null || n10 === void 0 ? void 0 : n10.textValue, a10 = function(e16, n11, t15) {
      const r14 = n11.length > 1 && Array.from(n11).every((e17) => e17 === n11[0]) ? n11[0] : n11, o14 = t15 ? e16.indexOf(t15) : -1;
      let u12 = (c11 = e16, a11 = Math.max(o14, 0), c11.map((e17, n12) => c11[(a11 + n12) % c11.length]));
      var c11, a11;
      r14.length === 1 && (u12 = u12.filter((e17) => e17 !== t15));
      const i12 = u12.find((e17) => e17.toLowerCase().startsWith(r14.toLowerCase()));
      return i12 !== t15 ? i12 : void 0;
    }(o13.map((e16) => e16.textValue), r13, c10), i11 = (t14 = o13.find((e16) => e16.textValue === a10)) === null || t14 === void 0 ? void 0 : t14.ref.current;
    !function e16(n11) {
      Z10.current = n11, window.clearTimeout(Y10.current), n11 !== "" && (Y10.current = window.setTimeout(() => e16(""), 1e3));
    }(r13), i11 && setTimeout(() => i11.focus());
  };
  E2.useEffect(() => () => window.clearTimeout(Y10.current), []), useFocusGuards();
  const ne3 = E2.useCallback((e15) => {
    var n10, t14;
    return W10.current === ((n10 = H10.current) === null || n10 === void 0 ? void 0 : n10.side) && function(e16, n11) {
      if (!n11)
        return false;
      return function(e17, n12) {
        const {x: t15, y: r13} = e17;
        let o13 = false;
        for (let e18 = 0, u11 = n12.length - 1; e18 < n12.length; u11 = e18++) {
          const c10 = n12[e18].x, a10 = n12[e18].y, i11 = n12[u11].x, s11 = n12[u11].y;
          a10 > r13 != s11 > r13 && t15 < (i11 - c10) * (r13 - a10) / (s11 - a10) + c10 && (o13 = !o13);
        }
        return o13;
      }({x: e16.clientX, y: e16.clientY}, n11);
    }(e15, (t14 = H10.current) === null || t14 === void 0 ? void 0 : t14.area);
  }, []);
  return E2.createElement(N10, null, /* @__PURE__ */ E2.createElement(Q, $10, /* @__PURE__ */ E2.createElement(F3, {scope: r12, searchRef: Z10, onItemEnter: E2.useCallback((e15) => {
    ne3(e15) && e15.preventDefault();
  }, [ne3]), onItemLeave: E2.useCallback((e15) => {
    var n10;
    ne3(e15) || ((n10 = X10.current) === null || n10 === void 0 || n10.focus(), V10(null));
  }, [ne3]), onTriggerLeave: E2.useCallback((e15) => {
    ne3(e15) && e15.preventDefault();
  }, [ne3]), pointerGraceTimerRef: z10, onPointerGraceIntentChange: E2.useCallback((e15) => {
    H10.current = e15;
  }, [])}, /* @__PURE__ */ E2.createElement(FocusScope, {asChild: true, trapped: i10, onMountAutoFocus: composeEventHandlers(s10, (e15) => {
    var n10;
    e15.preventDefault(), (n10 = X10.current) === null || n10 === void 0 || n10.focus();
  }), onUnmountAutoFocus: l10}, /* @__PURE__ */ E2.createElement(DismissableLayer, {asChild: true, disableOutsidePointerEvents: f10, onEscapeKeyDown: v10, onPointerDownOutside: g10, onFocusOutside: h10, onInteractOutside: x10, onDismiss: _17}, /* @__PURE__ */ E2.createElement(Root, _extends2({asChild: true}, K10, {dir: S10.dir, orientation: "vertical", loop: u10, currentTabStopId: U10, onCurrentTabStopIdChange: V10, onEntryFocus: (e15) => {
    S10.isUsingKeyboardRef.current || e15.preventDefault();
  }}), /* @__PURE__ */ E2.createElement(Content, _extends2({role: "menu", "aria-orientation": "vertical", "data-state": j3(S10.open), dir: S10.dir}, L10, D10, {ref: B10, style: __assign({outline: "none"}, D10.style), onKeyDown: composeEventHandlers(D10.onKeyDown, (e15) => {
    const n10 = e15.target, t14 = e15.currentTarget.contains(n10), r13 = e15.ctrlKey || e15.altKey || e15.metaKey, o13 = e15.key.length === 1;
    t14 && (e15.key === "Tab" && e15.preventDefault(), !r13 && o13 && ee2(e15.key));
    const u11 = X10.current;
    if (e15.target !== u11)
      return;
    if (!R4.includes(e15.key))
      return;
    e15.preventDefault();
    const c10 = G10().filter((e16) => !e16.disabled).map((e16) => e16.ref.current);
    b4.includes(e15.key) && c10.reverse(), function(e16) {
      const n11 = document.activeElement;
      for (const t15 of e16) {
        if (t15 === n11)
          return;
        if (t15.focus(), document.activeElement !== n11)
          return;
      }
    }(c10);
  }), onBlur: composeEventHandlers(e14.onBlur, (e15) => {
    e15.currentTarget.contains(e15.target) || (window.clearTimeout(Y10.current), Z10.current = "");
  }), onPointerMove: composeEventHandlers(e14.onPointerMove, J2((e15) => {
    const n10 = e15.target, t14 = q10.current !== e15.clientX;
    if (e15.currentTarget.contains(n10) && t14) {
      const n11 = e15.clientX > q10.current ? "right" : "left";
      W10.current = n11, q10.current = e15.clientX;
    }
  }))}))))))));
});
var MenuGroup = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13} = e14, r12 = __rest(e14, ["__scopeMenu"]);
  return E2.createElement(Primitive.div, _extends2({role: "group"}, r12, {ref: n10}));
});
var MenuItem = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {disabled: t13 = false, onSelect: r12} = e14, o13 = __rest(e14, ["disabled", "onSelect"]), u10 = E2.useRef(null), c10 = A2("MenuItem", e14.__scopeMenu), a10 = K2("MenuItem", e14.__scopeMenu), i10 = useComposedRefs(n10, u10), s10 = E2.useRef(false);
  return E2.createElement(Y3, _extends2({}, o13, {ref: i10, disabled: t13, onClick: composeEventHandlers(e14.onClick, () => {
    const e15 = u10.current;
    if (!t13 && e15) {
      const n11 = new Event("menu.itemSelect", {bubbles: true, cancelable: true});
      e15.addEventListener("menu.itemSelect", (e16) => r12 == null ? void 0 : r12(e16), {once: true}), e15.dispatchEvent(n11), n11.defaultPrevented ? s10.current = false : c10.onRootClose();
    }
  }), onPointerDown: (n11) => {
    var t14;
    (t14 = e14.onPointerDown) === null || t14 === void 0 || t14.call(e14, n11), s10.current = true;
  }, onPointerUp: composeEventHandlers(e14.onPointerUp, (e15) => {
    var n11;
    s10.current || (n11 = e15.currentTarget) === null || n11 === void 0 || n11.click();
  }), onKeyDown: composeEventHandlers(e14.onKeyDown, (e15) => {
    const n11 = a10.searchRef.current !== "";
    t13 || n11 && e15.key === " " || x2.includes(e15.key) && (e15.currentTarget.click(), e15.preventDefault());
  })}));
});
var MenuSubTrigger = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const t13 = A2("MenuSubTrigger", e14.__scopeMenu), r12 = K2("MenuSubTrigger", e14.__scopeMenu), o13 = E2.useRef(null), {pointerGraceTimerRef: u10, onPointerGraceIntentChange: c10} = r12, a10 = {__scopeMenu: e14.__scopeMenu}, i10 = E2.useCallback(() => {
    o13.current && window.clearTimeout(o13.current), o13.current = null;
  }, []);
  return E2.useEffect(() => i10, [i10]), E2.useEffect(() => {
    const e15 = u10.current;
    return () => {
      window.clearTimeout(e15), c10(null);
    };
  }, [u10, c10]), t13.isSubmenu ? /* @__PURE__ */ E2.createElement(MenuAnchor, _extends2({asChild: true}, a10), /* @__PURE__ */ E2.createElement(Y3, _extends2({id: t13.triggerId, "aria-haspopup": "menu", "aria-expanded": t13.open, "aria-controls": t13.contentId, "data-state": j3(t13.open)}, e14, {ref: composeRefs(n10, t13.onTriggerChange), onClick: (n11) => {
    var r13;
    (r13 = e14.onClick) === null || r13 === void 0 || r13.call(e14, n11), e14.disabled || n11.defaultPrevented || (n11.currentTarget.focus(), t13.open || t13.onOpenChange(true));
  }, onPointerMove: composeEventHandlers(e14.onPointerMove, J2((n11) => {
    r12.onItemEnter(n11), n11.defaultPrevented || e14.disabled || t13.open || o13.current || (r12.onPointerGraceIntentChange(null), o13.current = window.setTimeout(() => {
      t13.onOpenChange(true), i10();
    }, 100));
  })), onPointerLeave: composeEventHandlers(e14.onPointerLeave, J2((e15) => {
    var n11;
    i10();
    const o14 = (n11 = t13.content) === null || n11 === void 0 ? void 0 : n11.getBoundingClientRect();
    if (o14) {
      var c11;
      const n12 = (c11 = t13.content) === null || c11 === void 0 ? void 0 : c11.dataset.side, a11 = n12 === "right", i11 = a11 ? -5 : 5, s10 = o14[a11 ? "left" : "right"], l10 = o14[a11 ? "right" : "left"];
      r12.onPointerGraceIntentChange({area: [{x: e15.clientX + i11, y: e15.clientY}, {x: s10, y: o14.top}, {x: l10, y: o14.top}, {x: l10, y: o14.bottom}, {x: s10, y: o14.bottom}], side: n12}), window.clearTimeout(u10.current), u10.current = window.setTimeout(() => r12.onPointerGraceIntentChange(null), 300);
    } else {
      if (r12.onTriggerLeave(e15), e15.defaultPrevented)
        return;
      r12.onPointerGraceIntentChange(null);
    }
  })), onKeyDown: composeEventHandlers(e14.onKeyDown, (n11) => {
    const o14 = r12.searchRef.current !== "";
    var u11;
    e14.disabled || o14 && n11.key === " " || _14[t13.dir].includes(n11.key) && (t13.onOpenChange(true), (u11 = t13.content) === null || u11 === void 0 || u11.focus(), n11.preventDefault());
  })}))) : null;
});
var Y3 = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13, disabled: r12 = false, textValue: u10} = e14, c10 = __rest(e14, ["__scopeMenu", "disabled", "textValue"]), a10 = K2("MenuItem", t13), i10 = T3(t13), l10 = E2.useRef(null), d10 = useComposedRefs(n10, l10), [p10, f10] = E2.useState("");
  return E2.useEffect(() => {
    const e15 = l10.current;
    var n11;
    e15 && f10(((n11 = e15.textContent) !== null && n11 !== void 0 ? n11 : "").trim());
  }, [c10.children]), /* @__PURE__ */ E2.createElement(I2.ItemSlot, {scope: t13, disabled: r12, textValue: u10 != null ? u10 : p10}, /* @__PURE__ */ E2.createElement(Item, _extends2({asChild: true}, i10, {focusable: !r12}), /* @__PURE__ */ E2.createElement(Primitive.div, _extends2({role: "menuitem", "aria-disabled": r12 || void 0, "data-disabled": r12 ? "" : void 0}, c10, {ref: d10, onPointerMove: composeEventHandlers(e14.onPointerMove, J2((e15) => {
    if (r12)
      a10.onItemLeave(e15);
    else if (a10.onItemEnter(e15), !e15.defaultPrevented) {
      e15.currentTarget.focus();
    }
  })), onPointerLeave: composeEventHandlers(e14.onPointerLeave, J2((e15) => a10.onItemLeave(e15)))}))));
});
var MenuCheckboxItem = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {checked: t13 = false, onCheckedChange: r12} = e14, o13 = __rest(e14, ["checked", "onCheckedChange"]);
  return E2.createElement(H3, {scope: e14.__scopeMenu, checked: t13}, /* @__PURE__ */ E2.createElement(MenuItem, _extends2({role: "menuitemcheckbox", "aria-checked": t13}, o13, {ref: n10, "data-state": q2(t13), onSelect: composeEventHandlers(o13.onSelect, () => r12 == null ? void 0 : r12(!t13), {checkForDefaultPrevented: false})})));
});
var [Z3, z2] = D2("MenuRadioGroup", {value: void 0, onValueChange: () => {
}});
var MenuRadioGroup = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {value: r12, onValueChange: o13} = e14, u10 = __rest(e14, ["value", "onValueChange"]), c10 = useCallbackRef(o13);
  return E2.createElement(Z3, {scope: e14.__scopeMenu, value: r12, onValueChange: c10}, /* @__PURE__ */ E2.createElement(MenuGroup, _extends2({}, u10, {ref: n10})));
});
var MenuRadioItem = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {value: t13} = e14, r12 = __rest(e14, ["value"]), o13 = z2("MenuRadioItem", e14.__scopeMenu), u10 = t13 === o13.value;
  return E2.createElement(H3, {scope: e14.__scopeMenu, checked: u10}, /* @__PURE__ */ E2.createElement(MenuItem, _extends2({role: "menuitemradio", "aria-checked": u10}, r12, {ref: n10, "data-state": q2(u10), onSelect: composeEventHandlers(r12.onSelect, () => {
    var e15;
    return (e15 = o13.onValueChange) === null || e15 === void 0 ? void 0 : e15.call(o13, t13);
  }, {checkForDefaultPrevented: false})})));
});
var [H3, W3] = D2("MenuItemIndicator", {checked: false});
var MenuItemIndicator = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13, forceMount: r12} = e14, o13 = __rest(e14, ["__scopeMenu", "forceMount"]), u10 = W3("MenuItemIndicator", t13);
  return E2.createElement(Presence, {present: r12 || u10.checked}, /* @__PURE__ */ E2.createElement(Primitive.span, _extends2({}, o13, {ref: n10, "data-state": q2(u10.checked)})));
});
var MenuSeparator = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13} = e14, r12 = __rest(e14, ["__scopeMenu"]);
  return E2.createElement(Primitive.div, _extends2({role: "separator", "aria-orientation": "horizontal"}, r12, {ref: n10}));
});
var MenuArrow = /* @__PURE__ */ E2.forwardRef((e14, n10) => {
  const {__scopeMenu: t13} = e14, r12 = __rest(e14, ["__scopeMenu"]), o13 = O2(t13);
  return E2.createElement(Arrow2, _extends2({}, o13, r12, {ref: n10}));
});
function j3(e14) {
  return e14 ? "open" : "closed";
}
function q2(e14) {
  return e14 ? "checked" : "unchecked";
}
function J2(e14) {
  return (n10) => n10.pointerType === "mouse" ? e14(n10) : void 0;
}
var Root4 = Menu;
var Sub = MenuSub;
var Anchor2 = MenuAnchor;
var SubTrigger = MenuSubTrigger;
var Content2 = MenuContent;
var Item2 = MenuItem;
var CheckboxItem = MenuCheckboxItem;
var RadioGroup = MenuRadioGroup;
var RadioItem = MenuRadioItem;
var ItemIndicator = MenuItemIndicator;
var Separator = MenuSeparator;
var Arrow3 = MenuArrow;

// ../../node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
var c6 = __toModule(require_react());
var [s6, i5] = createContextScope("DropdownMenu", [S2]);
var l6 = S2();
var [m5, w3] = s6("DropdownMenu");
var DropdownMenu = (e14) => {
  const {__scopeDropdownMenu: n10, children: r12, open: p10, defaultOpen: d10, onOpenChange: a10} = e14, s10 = M2("DropdownMenu", n10), i10 = l6(n10), [w10 = false, D10] = useControllableState({prop: p10, defaultProp: d10, onChange: a10}), g10 = c6.useCallback(() => D10((e15) => !e15), [D10]);
  return s10.isInsideContent ? /* @__PURE__ */ c6.createElement(m5, {scope: n10, isRootMenu: false, open: w10, onOpenChange: D10, onOpenToggle: g10}, /* @__PURE__ */ c6.createElement(Sub, _extends2({}, i10, {open: w10, onOpenChange: D10}), r12)) : /* @__PURE__ */ c6.createElement(f5, _extends2({}, e14, {open: w10, onOpenChange: D10, onOpenToggle: g10}), r12);
};
var f5 = (n10) => {
  const {__scopeDropdownMenu: r12, children: t13, dir: p10, open: d10, onOpenChange: a10, onOpenToggle: s10, modal: i10 = true} = n10, w10 = l6(r12), f10 = c6.useRef(null);
  return c6.createElement(m5, {scope: r12, isRootMenu: true, triggerId: useId(), triggerRef: f10, contentId: useId(), open: d10, onOpenChange: a10, onOpenToggle: s10, modal: i10}, /* @__PURE__ */ c6.createElement(Root4, _extends2({}, w10, {open: d10, onOpenChange: a10, dir: p10, modal: i10}), t13));
};
var DropdownMenuTrigger = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: t13, disabled: p10 = false} = e14, s10 = __rest(e14, ["__scopeDropdownMenu", "disabled"]), i10 = w3("DropdownMenuTrigger", t13), m10 = l6(t13);
  return i10.isRootMenu ? /* @__PURE__ */ c6.createElement(Anchor2, _extends2({asChild: true}, m10), /* @__PURE__ */ c6.createElement(Primitive.button, _extends2({type: "button", id: i10.triggerId, "aria-haspopup": "menu", "aria-expanded": !!i10.open || void 0, "aria-controls": i10.open ? i10.contentId : void 0, "data-state": i10.open ? "open" : "closed", "data-disabled": p10 ? "" : void 0, disabled: p10}, s10, {ref: composeRefs(n10, i10.triggerRef), onPointerDown: composeEventHandlers(e14.onPointerDown, (e15) => {
    p10 || e15.button !== 0 || e15.ctrlKey !== false || (i10.open || e15.preventDefault(), i10.onOpenToggle());
  }), onKeyDown: composeEventHandlers(e14.onKeyDown, (e15) => {
    p10 || (["Enter", " "].includes(e15.key) && i10.onOpenToggle(), e15.key === "ArrowDown" && i10.onOpenChange(true), [" ", "ArrowDown"].includes(e15.key) && e15.preventDefault());
  })}))) : null;
});
var [D3, M2] = s6("DropdownMenuContent", {isInsideContent: false});
var DropdownMenuContent = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = w3("DropdownMenuContent", r12), d10 = l6(r12), a10 = __assign(__assign({}, t13), {style: __assign(__assign({}, e14.style), {"--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)"})});
  return c6.createElement(D3, {scope: r12, isInsideContent: true}, p10.isRootMenu ? /* @__PURE__ */ c6.createElement(g3, _extends2({__scopeDropdownMenu: r12}, a10, {ref: n10})) : /* @__PURE__ */ c6.createElement(Content2, _extends2({}, d10, a10, {ref: n10})));
});
var g3 = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12, portalled: t13 = true} = e14, p10 = __rest(e14, ["__scopeDropdownMenu", "portalled"]), d10 = w3("DropdownMenuContent", r12), s10 = l6(r12), i10 = c6.useRef(false);
  return d10.isRootMenu ? /* @__PURE__ */ c6.createElement(Content2, _extends2({id: d10.contentId, "aria-labelledby": d10.triggerId}, s10, p10, {ref: n10, portalled: t13, onCloseAutoFocus: composeEventHandlers(e14.onCloseAutoFocus, (e15) => {
    var o13;
    i10.current || (o13 = d10.triggerRef.current) === null || o13 === void 0 || o13.focus(), i10.current = false, e15.preventDefault();
  }), onInteractOutside: composeEventHandlers(e14.onInteractOutside, (e15) => {
    const o13 = e15.detail.originalEvent, n11 = o13.button === 0 && o13.ctrlKey === true, r13 = o13.button === 2 || n11;
    d10.modal && !r13 || (i10.current = true);
  })})) : null;
});
var DropdownMenuItem = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(Item2, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuTriggerItem = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(SubTrigger, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuCheckboxItem = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(CheckboxItem, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuRadioGroup = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(RadioGroup, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuRadioItem = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(RadioItem, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuItemIndicator = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(ItemIndicator, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuSeparator = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(Separator, _extends2({}, p10, t13, {ref: n10}));
});
var DropdownMenuArrow = /* @__PURE__ */ c6.forwardRef((e14, n10) => {
  const {__scopeDropdownMenu: r12} = e14, t13 = __rest(e14, ["__scopeDropdownMenu"]), p10 = l6(r12);
  return c6.createElement(Arrow3, _extends2({}, p10, t13, {ref: n10}));
});
var Root5 = DropdownMenu;
var Trigger = DropdownMenuTrigger;
var Content3 = DropdownMenuContent;
var Item3 = DropdownMenuItem;
var TriggerItem = DropdownMenuTriggerItem;
var CheckboxItem2 = DropdownMenuCheckboxItem;
var RadioGroup2 = DropdownMenuRadioGroup;
var RadioItem2 = DropdownMenuRadioItem;
var ItemIndicator2 = DropdownMenuItemIndicator;
var Separator2 = DropdownMenuSeparator;
var Arrow4 = DropdownMenuArrow;

// ../../node_modules/@radix-ui/react-icons/dist/react-icons.esm.js
var import_react15 = __toModule(require_react());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i10;
  for (i10 = 0; i10 < sourceKeys.length; i10++) {
    key = sourceKeys[i10];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["color"];
var AlignBottomIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M9 3C9 2.44772 8.55229 2 8 2H7C6.44772 2 6 2.44772 6 3L6 14H1.5C1.22386 14 1 14.2239 1 14.5C1 14.7761 1.22386 15 1.5 15L6 15H9H13.5C13.7761 15 14 14.7761 14 14.5C14 14.2239 13.7761 14 13.5 14H9V3Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4 = ["color"];
var AlignCenterHorizontallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1.99988 6C1.44759 6 0.999877 6.44772 0.999877 7L0.999877 8C0.999877 8.55228 1.44759 9 1.99988 9L6.99988 9L6.99988 13.5C6.99988 13.7761 7.22374 14 7.49988 14C7.77602 14 7.99988 13.7761 7.99988 13.5L7.99988 9L12.9999 9C13.5522 9 13.9999 8.55228 13.9999 8L13.9999 7C13.9999 6.44772 13.5522 6 12.9999 6L7.99988 6L7.99988 1.5C7.99988 1.22386 7.77602 1 7.49988 1C7.22373 1 6.99988 1.22386 6.99988 1.5L6.99988 6L1.99988 6Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$5 = ["color"];
var AlignCenterVerticallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$5);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M6.99988 1C6.44759 1 5.99988 1.44772 5.99988 2V7H1.49988C1.22374 7 0.999878 7.22386 0.999878 7.5C0.999878 7.77614 1.22374 8 1.49988 8H5.99988V13C5.99988 13.5523 6.44759 14 6.99988 14H7.99988C8.55216 14 8.99988 13.5523 8.99988 13V8H13.4999C13.776 8 13.9999 7.77614 13.9999 7.5C13.9999 7.22386 13.776 7 13.4999 7H8.99988V2C8.99988 1.44772 8.55216 1 7.99988 1L6.99988 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$6 = ["color"];
var AlignLeftIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$6);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M0.499995 0.999995C0.223855 0.999995 -5.58458e-07 1.22385 -5.46388e-07 1.49999L-2.18554e-08 13.4999C-9.78492e-09 13.776 0.223855 13.9999 0.499995 13.9999C0.776136 13.9999 0.999991 13.776 0.999991 13.4999L0.999991 8.99993L12 8.99993C12.5523 8.99993 13 8.55222 13 7.99993L13 6.99994C13 6.44766 12.5523 5.99995 12 5.99995L0.999991 5.99995L0.999991 1.49999C0.999991 1.22385 0.776135 0.999995 0.499995 0.999995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$7 = ["color"];
var AlignRightIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$7);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M14.4999 1C14.2237 1 13.9999 1.22386 13.9999 1.5L13.9999 6L2.99988 6C2.44759 6 1.99988 6.44772 1.99988 7L1.99988 8C1.99988 8.55228 2.44759 9 2.99988 9L13.9999 9L13.9999 13.5C13.9999 13.7761 14.2237 14 14.4999 14C14.776 14 14.9999 13.7761 14.9999 13.5L14.9999 9L14.9999 6L14.9999 1.5C14.9999 1.22386 14.776 1 14.4999 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$8 = ["color"];
var AlignTopIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$8);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1.5 0C1.22386 0 1 0.223858 1 0.5C1 0.776142 1.22386 1 1.5 1H6V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V1H13.5C13.7761 1 14 0.776142 14 0.5C14 0.223858 13.7761 0 13.5 0H9H6H1.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$a = ["color"];
var AngleIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$a);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M8.8914 2.1937C9.1158 2.35464 9.16725 2.66701 9.00631 2.89141L2.47388 12H13.5C13.7761 12 14 12.2239 14 12.5C14 12.7762 13.7761 13 13.5 13H1.5C1.31254 13 1.14082 12.8952 1.0552 12.7284C0.969578 12.5616 0.984438 12.361 1.09369 12.2086L8.19369 2.30862C8.35462 2.08422 8.667 2.03277 8.8914 2.1937ZM11.1 6.50001C11.1 6.22387 11.3238 6.00001 11.6 6.00001C11.8761 6.00001 12.1 6.22387 12.1 6.50001C12.1 6.77615 11.8761 7.00001 11.6 7.00001C11.3238 7.00001 11.1 6.77615 11.1 6.50001ZM10.4 4.00001C10.1239 4.00001 9.90003 4.22387 9.90003 4.50001C9.90003 4.77615 10.1239 5.00001 10.4 5.00001C10.6762 5.00001 10.9 4.77615 10.9 4.50001C10.9 4.22387 10.6762 4.00001 10.4 4.00001ZM12.1 8.50001C12.1 8.22387 12.3238 8.00001 12.6 8.00001C12.8761 8.00001 13.1 8.22387 13.1 8.50001C13.1 8.77615 12.8761 9.00001 12.6 9.00001C12.3238 9.00001 12.1 8.77615 12.1 8.50001ZM13.4 10C13.1239 10 12.9 10.2239 12.9 10.5C12.9 10.7761 13.1239 11 13.4 11C13.6762 11 13.9 10.7761 13.9 10.5C13.9 10.2239 13.6762 10 13.4 10Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$e = ["color"];
var ArrowDownIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$e);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M7.5 2C7.77614 2 8 2.22386 8 2.5L8 11.2929L11.1464 8.14645C11.3417 7.95118 11.6583 7.95118 11.8536 8.14645C12.0488 8.34171 12.0488 8.65829 11.8536 8.85355L7.85355 12.8536C7.75979 12.9473 7.63261 13 7.5 13C7.36739 13 7.24021 12.9473 7.14645 12.8536L3.14645 8.85355C2.95118 8.65829 2.95118 8.34171 3.14645 8.14645C3.34171 7.95118 3.65829 7.95118 3.85355 8.14645L7 11.2929L7 2.5C7 2.22386 7.22386 2 7.5 2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$i = ["color"];
var ArrowTopRightIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$i);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$j = ["color"];
var ArrowUpIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$j);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$k = ["color"];
var AspectRatioIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$k);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M2.5 2H12.5C12.7761 2 13 2.22386 13 2.5V12.5C13 12.7761 12.7761 13 12.5 13H2.5C2.22386 13 2 12.7761 2 12.5V2.5C2 2.22386 2.22386 2 2.5 2ZM1 2.5C1 1.67157 1.67157 1 2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5ZM7.5 4C7.77614 4 8 3.77614 8 3.5C8 3.22386 7.77614 3 7.5 3C7.22386 3 7 3.22386 7 3.5C7 3.77614 7.22386 4 7.5 4ZM8 5.5C8 5.77614 7.77614 6 7.5 6C7.22386 6 7 5.77614 7 5.5C7 5.22386 7.22386 5 7.5 5C7.77614 5 8 5.22386 8 5.5ZM7.5 8C7.77614 8 8 7.77614 8 7.5C8 7.22386 7.77614 7 7.5 7C7.22386 7 7 7.22386 7 7.5C7 7.77614 7.22386 8 7.5 8ZM10 7.5C10 7.77614 9.77614 8 9.5 8C9.22386 8 9 7.77614 9 7.5C9 7.22386 9.22386 7 9.5 7C9.77614 7 10 7.22386 10 7.5ZM11.5 8C11.7761 8 12 7.77614 12 7.5C12 7.22386 11.7761 7 11.5 7C11.2239 7 11 7.22386 11 7.5C11 7.77614 11.2239 8 11.5 8Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$F = ["color"];
var BoxIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$F);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M12.5 2H2.5C2.22386 2 2 2.22386 2 2.5V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V2.5C13 2.22386 12.7761 2 12.5 2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$T = ["color"];
var CheckIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$T);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$Y = ["color"];
var ChevronRightIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$Y);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$_ = ["color"];
var CircleIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$_);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M0.877075 7.49991C0.877075 3.84222 3.84222 0.877075 7.49991 0.877075C11.1576 0.877075 14.1227 3.84222 14.1227 7.49991C14.1227 11.1576 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1576 0.877075 7.49991ZM7.49991 1.82708C4.36689 1.82708 1.82708 4.36689 1.82708 7.49991C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49991C13.1727 4.36689 10.6329 1.82708 7.49991 1.82708Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$10 = ["color"];
var ClipboardIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$10);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM11 2V2.25C11 2.66421 10.6642 3 10.25 3H4.75C4.33579 3 4 2.66421 4 2.25V2H3.5C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V2.5C12 2.22386 11.7761 2 11.5 2H11Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1h = ["color"];
var CopyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1h);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1 9.50006C1 10.3285 1.67157 11.0001 2.5 11.0001H4L4 10.0001H2.5C2.22386 10.0001 2 9.7762 2 9.50006L2 2.50006C2 2.22392 2.22386 2.00006 2.5 2.00006L9.5 2.00006C9.77614 2.00006 10 2.22392 10 2.50006V4.00002H5.5C4.67158 4.00002 4 4.67159 4 5.50002V12.5C4 13.3284 4.67158 14 5.5 14H12.5C13.3284 14 14 13.3284 14 12.5V5.50002C14 4.67159 13.3284 4.00002 12.5 4.00002H11V2.50006C11 1.67163 10.3284 1.00006 9.5 1.00006H2.5C1.67157 1.00006 1 1.67163 1 2.50006V9.50006ZM5 5.50002C5 5.22388 5.22386 5.00002 5.5 5.00002H12.5C12.7761 5.00002 13 5.22388 13 5.50002V12.5C13 12.7762 12.7761 13 12.5 13H5.5C5.22386 13 5 12.7762 5 12.5V5.50002Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1r = ["color"];
var Cross2Icon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1r);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1x = ["color"];
var CursorArrowIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1x);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3.29227 0.048984C3.47033 -0.032338 3.67946 -0.00228214 3.8274 0.125891L12.8587 7.95026C13.0134 8.08432 13.0708 8.29916 13.0035 8.49251C12.9362 8.68586 12.7578 8.81866 12.5533 8.82768L9.21887 8.97474L11.1504 13.2187C11.2648 13.47 11.1538 13.7664 10.9026 13.8808L8.75024 14.8613C8.499 14.9758 8.20255 14.8649 8.08802 14.6137L6.15339 10.3703L3.86279 12.7855C3.72196 12.934 3.50487 12.9817 3.31479 12.9059C3.1247 12.8301 3 12.6461 3 12.4414V0.503792C3 0.308048 3.11422 0.130306 3.29227 0.048984ZM4 1.59852V11.1877L5.93799 9.14425C6.05238 9.02363 6.21924 8.96776 6.38319 8.99516C6.54715 9.02256 6.68677 9.12965 6.75573 9.2809L8.79056 13.7441L10.0332 13.178L8.00195 8.71497C7.93313 8.56376 7.94391 8.38824 8.03072 8.24659C8.11753 8.10494 8.26903 8.01566 8.435 8.00834L11.2549 7.88397L4 1.59852Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1I = ["color"];
var DotFilledIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1I);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M9.875 7.5C9.875 8.81168 8.81168 9.875 7.5 9.875C6.18832 9.875 5.125 8.81168 5.125 7.5C5.125 6.18832 6.18832 5.125 7.5 5.125C8.81168 5.125 9.875 6.18832 9.875 7.5Z",
    fill: color
  }));
});
var _excluded$1J = ["color"];
var DotsHorizontalIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1J);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM12.5 8.625C13.1213 8.625 13.625 8.12132 13.625 7.5C13.625 6.87868 13.1213 6.375 12.5 6.375C11.8787 6.375 11.375 6.87868 11.375 7.5C11.375 8.12132 11.8787 8.625 12.5 8.625Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$21 = ["color"];
var ExitIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$21);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3 1C2.44771 1 2 1.44772 2 2V13C2 13.5523 2.44772 14 3 14H10.5C10.7761 14 11 13.7761 11 13.5C11 13.2239 10.7761 13 10.5 13H3V2L10.5 2C10.7761 2 11 1.77614 11 1.5C11 1.22386 10.7761 1 10.5 1H3ZM12.6036 4.89645C12.4083 4.70118 12.0917 4.70118 11.8964 4.89645C11.7012 5.09171 11.7012 5.40829 11.8964 5.60355L13.2929 7H6.5C6.22386 7 6 7.22386 6 7.5C6 7.77614 6.22386 8 6.5 8H13.2929L11.8964 9.39645C11.7012 9.59171 11.7012 9.90829 11.8964 10.1036C12.0917 10.2988 12.4083 10.2988 12.6036 10.1036L14.8536 7.85355C15.0488 7.65829 15.0488 7.34171 14.8536 7.14645L12.6036 4.89645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$23 = ["color"];
var ExternalLinkIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$23);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2p = ["color"];
var GroupIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2p);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1.44995 0.949951C1.31734 0.949951 1.19016 1.00263 1.0964 1.0964C1.00263 1.19017 0.949951 1.31735 0.949951 1.44995L0.949966 3.44995C0.949969 3.7261 1.17383 3.94995 1.44997 3.94995C1.72611 3.94995 1.94997 3.72609 1.94997 3.44995L1.94995 1.94995H3.44997C3.72611 1.94995 3.94997 1.72609 3.94997 1.44995C3.94997 1.17381 3.72611 0.949951 3.44997 0.949951H1.44995ZM5.94995 0.949951C5.67381 0.949951 5.44995 1.17381 5.44995 1.44995C5.44995 1.72609 5.67381 1.94995 5.94995 1.94995H8.94995C9.22609 1.94995 9.44995 1.72609 9.44995 1.44995C9.44995 1.17381 9.22609 0.949951 8.94995 0.949951H5.94995ZM5.44995 13.45C5.44995 13.1738 5.67381 12.95 5.94995 12.95H8.94995C9.22609 12.95 9.44995 13.1738 9.44995 13.45C9.44995 13.7261 9.22609 13.95 8.94995 13.95H5.94995C5.67381 13.95 5.44995 13.7261 5.44995 13.45ZM1.94995 5.94995C1.94995 5.67381 1.72609 5.44995 1.44995 5.44995C1.17381 5.44995 0.949951 5.67381 0.949951 5.94995V8.94995C0.949951 9.22609 1.17381 9.44995 1.44995 9.44995C1.72609 9.44995 1.94995 9.22609 1.94995 8.94995V5.94995ZM13.45 5.44995C13.7261 5.44995 13.95 5.67381 13.95 5.94995V8.94995C13.95 9.22609 13.7261 9.44995 13.45 9.44995C13.1738 9.44995 12.95 9.22609 12.95 8.94995V5.94995C12.95 5.67381 13.1738 5.44995 13.45 5.44995ZM11.45 0.949951C11.1738 0.949951 10.95 1.17381 10.95 1.44995C10.95 1.72609 11.1738 1.94995 11.45 1.94995H12.9499V3.44995C12.9499 3.72609 13.1738 3.94995 13.4499 3.94995C13.7261 3.94995 13.9499 3.72609 13.9499 3.44995V1.44995C13.9499 1.17381 13.7252 0.949951 13.449 0.949951H11.45ZM1.44995 10.95C1.72609 10.95 1.94995 11.1738 1.94995 11.45V12.95H3.44997C3.72611 12.95 3.94997 13.1738 3.94997 13.45C3.94997 13.7261 3.72611 13.95 3.44997 13.95H1.44995C1.17381 13.95 0.949951 13.7261 0.949951 13.45V11.45C0.949951 11.1738 1.17381 10.95 1.44995 10.95ZM13.95 11.45C13.95 11.1738 13.7261 10.95 13.45 10.95C13.1738 10.9499 12.95 11.1738 12.95 11.4499L12.9491 12.95H11.45C11.1738 12.95 10.95 13.1738 10.95 13.45C10.95 13.7261 11.1738 13.95 11.45 13.95H13.4499C13.7261 13.95 13.9499 13.7261 13.9499 13.45L13.95 11.45Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2s = ["color"];
var HamburgerMenuIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2s);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H13.5C13.7761 11 14 11.2239 14 11.5C14 11.7761 13.7761 12 13.5 12H1.5C1.22386 12 1 11.7761 1 11.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2_ = ["color"];
var LockClosedIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2_);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2$ = ["color"];
var LockOpen1Icon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2$);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M7.4986 0C6.3257 0 5.36107 0.38943 4.73753 1.19361C4.23745 1.83856 4 2.68242 4 3.63325H5C5 2.84313 5.19691 2.23312 5.5278 1.80636C5.91615 1.30552 6.55152 1 7.4986 1C8.35683 1 8.96336 1.26502 9.35846 1.68623C9.75793 2.11211 10 2.76044 10 3.63601V6H3C2.44772 6 2 6.44772 2 7V13C2 13.5523 2.44772 14 3 14H12C12.5523 14 13 13.5523 13 13V7C13 6.44771 12.5523 6 12 6H11V3.63601C11 2.58135 10.7065 1.66167 10.0878 1.0021C9.46477 0.337871 8.57061 0 7.4986 0ZM3 7H12V13H3V7Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3b = ["color"];
var MixerVerticalIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3b);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M5 1.5C5 1.22386 4.77614 1 4.5 1C4.22386 1 4 1.22386 4 1.5L4 7C4 7.01671 4.00082 7.03323 4.00242 7.04952C2.86009 7.28022 2 8.28967 2 9.5C2 10.7103 2.86009 11.7198 4.00242 11.9505C4.00082 11.9668 4 11.9833 4 12V13.5C4 13.7761 4.22386 14 4.5 14C4.77614 14 5 13.7761 5 13.5V12C5 11.9833 4.99918 11.9668 4.99758 11.9505C6.1399 11.7198 7 10.7103 7 9.5C7 8.28967 6.1399 7.28022 4.99758 7.04952C4.99918 7.03323 5 7.01671 5 7L5 1.5ZM11 1.5C11 1.22386 10.7761 1 10.5 1C10.2239 1 10 1.22386 10 1.5V3C10 3.01671 10.0008 3.03323 10.0024 3.04952C8.8601 3.28022 8 4.28967 8 5.5C8 6.71033 8.8601 7.71978 10.0024 7.95048C10.0008 7.96677 10 7.98329 10 8V13.5C10 13.7761 10.2239 14 10.5 14C10.7761 14 11 13.7761 11 13.5V8C11 7.98329 10.9992 7.96677 10.9976 7.95048C12.1399 7.71978 13 6.71033 13 5.5C13 4.28967 12.1399 3.28022 10.9976 3.04952C10.9992 3.03323 11 3.01671 11 3V1.5ZM4.5 8C3.67157 8 3 8.67157 3 9.5C3 10.3284 3.67157 11 4.5 11C5.32843 11 6 10.3284 6 9.5C6 8.67157 5.32843 8 4.5 8ZM9 5.5C9 4.67157 9.67157 4 10.5 4C11.3284 4 12 4.67157 12 5.5C12 6.32843 11.3284 7 10.5 7C9.67157 7 9 6.32843 9 5.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3n = ["color"];
var Pencil1Icon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3n);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3o = ["color"];
var Pencil2Icon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3o);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3s = ["color"];
var PinBottomIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3s);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M13.5 13.95C13.7485 13.95 13.95 13.7485 13.95 13.5C13.95 13.2514 13.7485 13.05 13.5 13.05L1.49995 13.05C1.25142 13.05 1.04995 13.2514 1.04995 13.5C1.04995 13.7485 1.25142 13.95 1.49995 13.95L13.5 13.95ZM11.0681 7.5683C11.2439 7.39257 11.2439 7.10764 11.0681 6.93191C10.8924 6.75617 10.6075 6.75617 10.4317 6.93191L7.94993 9.41371L7.94993 1.49998C7.94993 1.25146 7.74846 1.04998 7.49993 1.04998C7.2514 1.04998 7.04993 1.25146 7.04993 1.49998L7.04993 9.41371L4.56813 6.93191C4.39239 6.75617 4.10746 6.75617 3.93173 6.93191C3.75599 7.10764 3.75599 7.39257 3.93173 7.5683L7.18173 10.8183C7.35746 10.994 7.64239 10.994 7.81812 10.8183L11.0681 7.5683Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3v = ["color"];
var PinTopIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3v);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1.50005 1.05005C1.25152 1.05005 1.05005 1.25152 1.05005 1.50005C1.05005 1.74858 1.25152 1.95005 1.50005 1.95005L13.5 1.95005C13.7486 1.95005 13.95 1.74858 13.95 1.50005C13.95 1.25152 13.7486 1.05005 13.5 1.05005H1.50005ZM3.93188 7.43169C3.75614 7.60743 3.75614 7.89236 3.93188 8.06809C4.10761 8.24383 4.39254 8.24383 4.56827 8.06809L7.05007 5.58629V13.5C7.05007 13.7485 7.25155 13.95 7.50007 13.95C7.7486 13.95 7.95007 13.7485 7.95007 13.5L7.95007 5.58629L10.4319 8.06809C10.6076 8.24383 10.8925 8.24383 11.0683 8.06809C11.244 7.89235 11.244 7.60743 11.0683 7.43169L7.81827 4.18169C7.64254 4.00596 7.35761 4.00596 7.18188 4.18169L3.93188 7.43169Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3x = ["color"];
var PlusIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3x);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3z = ["color"];
var QuestionMarkIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3z);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M5.07505 4.10001C5.07505 2.91103 6.25727 1.92502 7.50005 1.92502C8.74283 1.92502 9.92505 2.91103 9.92505 4.10001C9.92505 5.19861 9.36782 5.71436 8.61854 6.37884L8.58757 6.4063C7.84481 7.06467 6.92505 7.87995 6.92505 9.5C6.92505 9.81757 7.18248 10.075 7.50005 10.075C7.81761 10.075 8.07505 9.81757 8.07505 9.5C8.07505 8.41517 8.62945 7.90623 9.38156 7.23925L9.40238 7.22079C10.1496 6.55829 11.075 5.73775 11.075 4.10001C11.075 2.12757 9.21869 0.775024 7.50005 0.775024C5.7814 0.775024 3.92505 2.12757 3.92505 4.10001C3.92505 4.41758 4.18249 4.67501 4.50005 4.67501C4.81761 4.67501 5.07505 4.41758 5.07505 4.10001ZM7.50005 13.3575C7.9833 13.3575 8.37505 12.9657 8.37505 12.4825C8.37505 11.9992 7.9833 11.6075 7.50005 11.6075C7.0168 11.6075 6.62505 11.9992 6.62505 12.4825C6.62505 12.9657 7.0168 13.3575 7.50005 13.3575Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3I = ["color"];
var RotateCounterClockwiseIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3I);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M7.59664 2.93628C7.76085 3.06401 8.00012 2.94698 8.00012 2.73895V1.99998C9.98143 2 11.1848 2.3637 11.9105 3.08945C12.6363 3.81522 13 5.0186 13 6.99998C13 7.27613 13.2239 7.49998 13.5 7.49998C13.7761 7.49998 14 7.27613 14 6.99998C14 4.9438 13.6325 3.39719 12.6176 2.38234C11.6028 1.36752 10.0562 0.999999 8.00012 0.999984V0.261266C8.00012 0.0532293 7.76085 -0.0637944 7.59664 0.063928L6.00384 1.30277C5.87516 1.40286 5.87516 1.59735 6.00384 1.69744L7.59664 2.93628ZM9.5 5H2.5C2.22386 5 2 5.22386 2 5.5V12.5C2 12.7761 2.22386 13 2.5 13H9.5C9.77614 13 10 12.7761 10 12.5V5.5C10 5.22386 9.77614 5 9.5 5ZM2.5 4C1.67157 4 1 4.67157 1 5.5V12.5C1 13.3284 1.67157 14 2.5 14H9.5C10.3284 14 11 13.3284 11 12.5V5.5C11 4.67157 10.3284 4 9.5 4H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$42 = ["color"];
var SpaceEvenlyHorizontallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$42);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992ZM0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992ZM1.99998 6.99994C1.99998 6.44766 2.44769 5.99995 2.99998 5.99995L5.99995 5.99995C6.55223 5.99995 6.99994 6.44766 6.99994 6.99994L6.99994 7.99993C6.99994 8.55221 6.55223 8.99992 5.99995 8.99992L2.99998 8.99992C2.4477 8.99992 1.99998 8.55221 1.99998 7.99993L1.99998 6.99994ZM8.99993 5.99995C8.44765 5.99995 7.99993 6.44766 7.99993 6.99994L7.99993 7.99993C7.99993 8.55221 8.44765 8.99992 8.99993 8.99992L11.9999 8.99992C12.5522 8.99992 12.9999 8.55221 12.9999 7.99993L12.9999 6.99994C12.9999 6.44766 12.5522 5.99995 11.9999 5.99995L8.99993 5.99995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$43 = ["color"];
var SpaceEvenlyVerticallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$43);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM7 2C6.44772 2 6 2.44772 6 3V6C6 6.55228 6.44772 7 7 7H8C8.55228 7 9 6.55228 9 6V3C9 2.44772 8.55228 2 8 2H7ZM7 8C6.44772 8 6 8.44771 6 9V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V9C9 8.44772 8.55228 8 8 8H7ZM1.49988 14C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H1.49988Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$48 = ["color"];
var SquareIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$48);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M1 1H1.5H13.5H14V1.5V13.5V14H13.5H1.5H1V13.5V1.5V1ZM2 2V13H13V2H2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4f = ["color"];
var StretchHorizontallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4f);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 5.99995L0.999992 5.99995L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 8.99992L13.9999 8.99992L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4g = ["color"];
var StretchVerticallyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4g);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H6H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM9 14V1L6 1V14H1.49988C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H9Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4n = ["color"];
var TextIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4n);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4p = ["color"];
var TextAlignCenterIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4p);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H10.5C10.7761 7 11 7.22386 11 7.5C11 7.77614 10.7761 8 10.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM3 10.5C3 10.2239 3.22386 10 3.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H3.5C3.22386 11 3 10.7761 3 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4q = ["color"];
var TextAlignJustifyIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4q);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M2.5 4C2.22386 4 2 4.22386 2 4.5C2 4.77614 2.22386 5 2.5 5H12.5C12.7761 5 13 4.77614 13 4.5C13 4.22386 12.7761 4 12.5 4H2.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4r = ["color"];
var TextAlignLeftIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4r);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H7.5C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H10.5C10.7761 10 11 10.2239 11 10.5C11 10.7761 10.7761 11 10.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4t = ["color"];
var TextAlignRightIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4t);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM7 7.5C7 7.22386 7.22386 7 7.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H7.5C7.22386 8 7 7.77614 7 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H4.5C4.22386 11 4 10.7761 4 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4R = ["color"];
var VercelLogoIcon = /* @__PURE__ */ (0, import_react15.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4R);
  return (0, import_react15.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react15.createElement)("path", {
    d: "M7.49998 1L6.92321 2.00307L1.17498 12L0.599976 13H1.7535H13.2464H14.4L13.825 12L8.07674 2.00307L7.49998 1ZM7.49998 3.00613L2.3285 12H12.6714L7.49998 3.00613Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});

// ../../packages/tldraw/dist/index.mjs
var Vt = __toModule(require_react());
var Vi = __toModule(require_react());
var Ce = __toModule(require_react());
var $t = __toModule(require_react());

// ../../node_modules/@radix-ui/react-visually-hidden/dist/index.module.js
var r10 = __toModule(require_react());
var VisuallyHidden = /* @__PURE__ */ r10.forwardRef((i10, o13) => /* @__PURE__ */ r10.createElement(Primitive.span, _extends2({}, i10, {ref: o13, style: __assign({position: "absolute", border: 0, width: 1, height: 1, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", wordWrap: "normal"}, i10.style)})));
var Root6 = VisuallyHidden;

// ../../node_modules/@radix-ui/react-use-previous/dist/index.module.js
var e13 = __toModule(require_react());
function usePrevious(r12) {
  const u10 = e13.useRef({value: r12, previous: r12});
  return e13.useMemo(() => (u10.current.value !== r12 && (u10.current.previous = u10.current.value, u10.current.value = r12), u10.current.previous), [r12]);
}

// ../../node_modules/@radix-ui/react-tooltip/dist/index.module.js
var T4 = __toModule(require_react());
var [w4, x3] = createContextScope("Tooltip", [l5]);
var g4 = l5();
var E3 = 700;
var [v3, b5] = w4("TooltipProvider", {isOpenDelayed: true, delayDuration: E3, onOpen: () => {
}, onClose: () => {
}});
var [y3, _15] = w4("Tooltip");
var Tooltip = (o13) => {
  const {__scopeTooltip: t13, children: r12, open: i10, defaultOpen: a10 = false, onOpenChange: l10, delayDuration: c10} = o13, s10 = b5("Tooltip", t13), u10 = g4(t13), [d10, m10] = T4.useState(null), f10 = useId(), C10 = T4.useRef(0), w10 = c10 != null ? c10 : s10.delayDuration, x10 = T4.useRef(false), {onOpen: E10, onClose: v10} = s10, [_17 = false, h10] = useControllableState({prop: i10, defaultProp: a10, onChange: (e14) => {
    e14 && (document.dispatchEvent(new CustomEvent("tooltip.open")), E10()), l10 == null || l10(e14);
  }}), k10 = T4.useMemo(() => _17 ? x10.current ? "delayed-open" : "instant-open" : "closed", [_17]), D10 = T4.useCallback(() => {
    window.clearTimeout(C10.current), x10.current = false, h10(true);
  }, [h10]), O10 = T4.useCallback(() => {
    window.clearTimeout(C10.current), C10.current = window.setTimeout(() => {
      x10.current = true, h10(true);
    }, w10);
  }, [w10, h10]);
  return T4.useEffect(() => () => window.clearTimeout(C10.current), []), /* @__PURE__ */ T4.createElement(Root3, u10, /* @__PURE__ */ T4.createElement(y3, {scope: t13, contentId: f10, open: _17, stateAttribute: k10, trigger: d10, onTriggerChange: m10, onTriggerEnter: T4.useCallback(() => {
    s10.isOpenDelayed ? O10() : D10();
  }, [s10.isOpenDelayed, O10, D10]), onOpen: T4.useCallback(D10, [D10]), onClose: T4.useCallback(() => {
    window.clearTimeout(C10.current), h10(false), v10();
  }, [h10, v10])}, r12));
};
var TooltipTrigger = /* @__PURE__ */ T4.forwardRef((e14, o13) => {
  const {__scopeTooltip: t13} = e14, r12 = __rest(e14, ["__scopeTooltip"]), i10 = _15("TooltipTrigger", t13), l10 = g4(t13), c10 = useComposedRefs(o13, i10.onTriggerChange), s10 = T4.useRef(false), u10 = T4.useCallback(() => s10.current = false, []);
  return T4.useEffect(() => () => document.removeEventListener("mouseup", u10), [u10]), /* @__PURE__ */ T4.createElement(Anchor, _extends2({asChild: true}, l10), /* @__PURE__ */ T4.createElement(Primitive.button, _extends2({"aria-describedby": i10.open ? i10.contentId : void 0, "data-state": i10.stateAttribute}, r12, {ref: c10, onMouseEnter: composeEventHandlers(e14.onMouseEnter, i10.onTriggerEnter), onMouseLeave: composeEventHandlers(e14.onMouseLeave, i10.onClose), onMouseDown: composeEventHandlers(e14.onMouseDown, () => {
    i10.onClose(), s10.current = true, document.addEventListener("mouseup", u10, {once: true});
  }), onFocus: composeEventHandlers(e14.onFocus, () => {
    s10.current || i10.onOpen();
  }), onBlur: composeEventHandlers(e14.onBlur, i10.onClose), onClick: composeEventHandlers(e14.onClick, (e15) => {
    e15.detail === 0 && i10.onClose();
  })})));
});
var TooltipContent = /* @__PURE__ */ T4.forwardRef((e14, o13) => {
  const {forceMount: t13} = e14, r12 = __rest(e14, ["forceMount"]), n10 = _15("TooltipContent", e14.__scopeTooltip);
  return T4.createElement(Presence, {present: t13 || n10.open}, /* @__PURE__ */ T4.createElement(h3, _extends2({ref: o13}, r12)));
});
var h3 = /* @__PURE__ */ T4.forwardRef((e14, i10) => {
  const {__scopeTooltip: a10, children: l10, "aria-label": c10, portalled: s10 = true} = e14, p10 = __rest(e14, ["__scopeTooltip", "children", "aria-label", "portalled"]), d10 = _15("TooltipContent", a10), m10 = g4(a10), f10 = s10 ? Portal : T4.Fragment, {onClose: w10} = d10;
  return useEscapeKeydown(() => w10()), T4.useEffect(() => (document.addEventListener("tooltip.open", w10), () => document.removeEventListener("tooltip.open", w10)), [w10]), /* @__PURE__ */ T4.createElement(f10, null, /* @__PURE__ */ T4.createElement(k3, {__scopeTooltip: a10}), /* @__PURE__ */ T4.createElement(Content, _extends2({"data-state": d10.stateAttribute}, m10, p10, {ref: i10, style: __assign(__assign({}, p10.style), {"--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)"})}), /* @__PURE__ */ T4.createElement(Slottable, null, l10), /* @__PURE__ */ T4.createElement(Root6, {id: d10.contentId, role: "tooltip"}, c10 || l10)));
});
var TooltipArrow = /* @__PURE__ */ T4.forwardRef((e14, o13) => {
  const {__scopeTooltip: t13} = e14, r12 = __rest(e14, ["__scopeTooltip"]), i10 = g4(t13);
  return T4.createElement(Arrow2, _extends2({}, i10, r12, {ref: o13}));
});
function k3(e14) {
  const {__scopeTooltip: o13} = e14, t13 = _15("CheckTriggerMoved", o13), r12 = useRect(t13.trigger), n10 = r12 == null ? void 0 : r12.left, i10 = usePrevious(n10), a10 = r12 == null ? void 0 : r12.top, l10 = usePrevious(a10), u10 = t13.onClose;
  return T4.useEffect(() => {
    (i10 !== void 0 && i10 !== n10 || l10 !== void 0 && l10 !== a10) && u10();
  }, [u10, i10, l10, n10, a10]), null;
}
var Root7 = Tooltip;
var Trigger2 = TooltipTrigger;
var Content4 = TooltipContent;
var Arrow5 = TooltipArrow;

// ../../packages/tldraw/dist/index.mjs
var Rn = __toModule(require_react());
var ze = __toModule(require_react());
var Pz = __toModule(require_react());
var $i = __toModule(require_react());
var Ki = __toModule(require_react());
var Wi = __toModule(require_react());
var _i = __toModule(require_react());
var Yi = __toModule(require_react());
var Mz = __toModule(require_react());
var Zi = __toModule(require_react());
var $o = __toModule(require_react());
var Xi = __toModule(require_react());
var qi = __toModule(require_react());
var Ji = __toModule(require_react());
var Qi = __toModule(require_react());
var No = __toModule(require_react());
var Ez = __toModule(require_react());
var Rz = __toModule(require_react());
var er = __toModule(require_react());
var Lz = __toModule(require_react());
var tr = __toModule(require_react());
var J3 = __toModule(require_react());
var or = __toModule(require_react());
var sr = __toModule(require_react());
var ir = __toModule(require_react());
var zn = __toModule(require_react());
var rr = __toModule(require_react());
var mo = __toModule(require_react());
var et = __toModule(require_react());

// ../../node_modules/@radix-ui/react-popover/dist/index.module.js
var v4 = __toModule(require_react());
var [C2, g5] = createContextScope("Popover", [l5]);
var x4 = l5();
var [h4, E4] = C2("Popover");
var Popover = (e14) => {
  const {__scopePopover: o13, children: t13, open: n10, defaultOpen: c10, onOpenChange: a10, modal: s10 = false} = e14, i10 = x4(o13), u10 = v4.useRef(null), [d10, m10] = v4.useState(false), [f10 = false, P10] = useControllableState({prop: n10, defaultProp: c10, onChange: a10});
  return v4.createElement(Root3, i10, /* @__PURE__ */ v4.createElement(h4, {scope: o13, contentId: useId(), triggerRef: u10, open: f10, onOpenChange: P10, onOpenToggle: v4.useCallback(() => P10((e15) => !e15), [P10]), hasCustomAnchor: d10, onCustomAnchorAdd: v4.useCallback(() => m10(true), []), onCustomAnchorRemove: v4.useCallback(() => m10(false), []), modal: s10}, t13));
};
var PopoverAnchor = /* @__PURE__ */ v4.forwardRef((e14, o13) => {
  const {__scopePopover: r12} = e14, t13 = __rest(e14, ["__scopePopover"]), n10 = E4("PopoverAnchor", r12), c10 = x4(r12), {onCustomAnchorAdd: a10, onCustomAnchorRemove: s10} = n10;
  return v4.useEffect(() => (a10(), () => s10()), [a10, s10]), /* @__PURE__ */ v4.createElement(Anchor, _extends2({}, c10, t13, {ref: o13}));
});
var PopoverTrigger = /* @__PURE__ */ v4.forwardRef((e14, o13) => {
  const {__scopePopover: r12} = e14, n10 = __rest(e14, ["__scopePopover"]), c10 = E4("PopoverTrigger", r12), a10 = x4(r12), s10 = useComposedRefs(o13, c10.triggerRef), i10 = /* @__PURE__ */ v4.createElement(Primitive.button, _extends2({type: "button", "aria-haspopup": "dialog", "aria-expanded": c10.open, "aria-controls": c10.contentId, "data-state": w5(c10.open)}, n10, {ref: s10, onClick: composeEventHandlers(e14.onClick, c10.onOpenToggle)}));
  return c10.hasCustomAnchor ? i10 : /* @__PURE__ */ v4.createElement(Anchor, _extends2({asChild: true}, a10), i10);
});
var PopoverContent = /* @__PURE__ */ v4.forwardRef((e14, o13) => {
  const {forceMount: r12} = e14, t13 = __rest(e14, ["forceMount"]), c10 = E4("PopoverContent", e14.__scopePopover);
  return v4.createElement(Presence, {present: r12 || c10.open}, c10.modal ? /* @__PURE__ */ v4.createElement(A3, _extends2({}, t13, {ref: o13})) : /* @__PURE__ */ v4.createElement(O3, _extends2({}, t13, {ref: o13})));
});
var A3 = /* @__PURE__ */ v4.forwardRef((r12, t13) => {
  const {allowPinchZoom: n10, portalled: c10 = true} = r12, s10 = __rest(r12, ["allowPinchZoom", "portalled"]), i10 = E4("PopoverContent", r12.__scopePopover), p10 = v4.useRef(null), u10 = useComposedRefs(t13, p10), l10 = v4.useRef(false);
  v4.useEffect(() => {
    const o13 = p10.current;
    if (o13)
      return hideOthers(o13);
  }, []);
  const d10 = c10 ? Portal : v4.Fragment;
  return v4.createElement(d10, null, /* @__PURE__ */ v4.createElement(Combination_default, {allowPinchZoom: n10}, /* @__PURE__ */ v4.createElement(R5, _extends2({}, s10, {ref: u10, trapFocus: i10.open, disableOutsidePointerEvents: true, onCloseAutoFocus: composeEventHandlers(r12.onCloseAutoFocus, (e14) => {
    var o13;
    e14.preventDefault(), l10.current || (o13 = i10.triggerRef.current) === null || o13 === void 0 || o13.focus();
  }), onPointerDownOutside: composeEventHandlers(r12.onPointerDownOutside, (e14) => {
    const o13 = e14.detail.originalEvent, r13 = o13.button === 0 && o13.ctrlKey === true, t14 = o13.button === 2 || r13;
    l10.current = t14;
  }, {checkForDefaultPrevented: false}), onFocusOutside: composeEventHandlers(r12.onFocusOutside, (e14) => e14.preventDefault(), {checkForDefaultPrevented: false})}))));
});
var O3 = /* @__PURE__ */ v4.forwardRef((e14, o13) => {
  const {portalled: r12 = true} = e14, t13 = __rest(e14, ["portalled"]), n10 = E4("PopoverContent", e14.__scopePopover), c10 = v4.useRef(false), s10 = r12 ? Portal : v4.Fragment;
  return v4.createElement(s10, null, /* @__PURE__ */ v4.createElement(R5, _extends2({}, t13, {ref: o13, trapFocus: false, disableOutsidePointerEvents: false, onCloseAutoFocus: (o14) => {
    var r13, t14;
    ((r13 = e14.onCloseAutoFocus) === null || r13 === void 0 || r13.call(e14, o14), o14.defaultPrevented) || (c10.current || (t14 = n10.triggerRef.current) === null || t14 === void 0 || t14.focus(), o14.preventDefault());
    c10.current = false;
  }, onInteractOutside: (o14) => {
    var r13, t14;
    (r13 = e14.onInteractOutside) === null || r13 === void 0 || r13.call(e14, o14), o14.defaultPrevented || (c10.current = true);
    const a10 = o14.target;
    ((t14 = n10.triggerRef.current) === null || t14 === void 0 ? void 0 : t14.contains(a10)) && o14.preventDefault();
  }})));
});
var R5 = /* @__PURE__ */ v4.forwardRef((e14, o13) => {
  const {__scopePopover: r12, trapFocus: t13, onOpenAutoFocus: n10, onCloseAutoFocus: a10, disableOutsidePointerEvents: u10, onEscapeKeyDown: l10, onPointerDownOutside: d10, onFocusOutside: m10, onInteractOutside: f10} = e14, C10 = __rest(e14, ["__scopePopover", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside"]), g10 = E4("PopoverContent", r12), h10 = x4(r12);
  return useFocusGuards(), /* @__PURE__ */ v4.createElement(FocusScope, {asChild: true, loop: true, trapped: t13, onMountAutoFocus: n10, onUnmountAutoFocus: a10}, /* @__PURE__ */ v4.createElement(DismissableLayer, {asChild: true, disableOutsidePointerEvents: u10, onInteractOutside: f10, onEscapeKeyDown: l10, onPointerDownOutside: d10, onFocusOutside: m10, onDismiss: () => g10.onOpenChange(false)}, /* @__PURE__ */ v4.createElement(Content, _extends2({"data-state": w5(g10.open), role: "dialog", id: g10.contentId}, h10, C10, {ref: o13, style: __assign(__assign({}, C10.style), {"--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)"})}))));
});
function w5(e14) {
  return e14 ? "open" : "closed";
}
var Root8 = Popover;
var Anchor3 = PopoverAnchor;
var Trigger3 = PopoverTrigger;
var Content5 = PopoverContent;

// ../../packages/tldraw/dist/index.mjs
var Nt = __toModule(require_react());
var Qe = __toModule(require_react());

// ../../node_modules/@radix-ui/react-dialog/dist/index.module.js
var m6 = __toModule(require_react());
var [x5, C3] = createContextScope("Dialog");
var [v5, E5] = x5("Dialog");
var Dialog = (e14) => {
  const {__scopeDialog: o13, children: t13, open: r12, defaultOpen: n10, onOpenChange: a10, modal: i10 = true, allowPinchZoom: l10} = e14, c10 = m6.useRef(null), p10 = m6.useRef(null), [d10 = false, f10] = useControllableState({prop: r12, defaultProp: n10, onChange: a10});
  return m6.createElement(v5, {scope: o13, triggerRef: c10, contentRef: p10, contentId: useId(), titleId: useId(), descriptionId: useId(), open: d10, onOpenChange: f10, onOpenToggle: m6.useCallback(() => f10((e15) => !e15), [f10]), modal: i10, allowPinchZoom: l10}, t13);
};
var DialogTrigger = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {__scopeDialog: t13} = e14, r12 = __rest(e14, ["__scopeDialog"]), a10 = E5("DialogTrigger", t13), i10 = useComposedRefs(o13, a10.triggerRef);
  return m6.createElement(Primitive.button, _extends2({type: "button", "aria-haspopup": "dialog", "aria-expanded": a10.open, "aria-controls": a10.contentId, "data-state": b6(a10.open)}, r12, {ref: i10, onClick: composeEventHandlers(e14.onClick, a10.onOpenToggle)}));
});
var DialogPortal = (e14) => {
  const {__scopeDialog: o13, forceMount: t13, children: r12, container: n10} = e14, l10 = E5("DialogPortal", o13);
  return m6.createElement(m6.Fragment, null, m6.Children.map(r12, (e15) => /* @__PURE__ */ m6.createElement(Presence, {present: t13 || l10.open}, /* @__PURE__ */ m6.createElement(UnstablePortal, {asChild: true, container: n10}, e15))));
};
var DialogOverlay = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {forceMount: t13} = e14, r12 = __rest(e14, ["forceMount"]), n10 = E5("DialogOverlay", e14.__scopeDialog);
  return n10.modal ? /* @__PURE__ */ m6.createElement(Presence, {present: t13 || n10.open}, /* @__PURE__ */ m6.createElement(R6, _extends2({}, r12, {ref: o13}))) : null;
});
var R6 = /* @__PURE__ */ m6.forwardRef((o13, r12) => {
  const {__scopeDialog: a10} = o13, i10 = __rest(o13, ["__scopeDialog"]), l10 = E5("DialogOverlay", a10);
  return m6.createElement(Combination_default, {as: Slot, allowPinchZoom: l10.allowPinchZoom, shards: [l10.contentRef]}, /* @__PURE__ */ m6.createElement(Primitive.div, _extends2({"data-state": b6(l10.open)}, i10, {ref: r12, style: __assign({pointerEvents: "auto"}, i10.style)})));
});
var DialogContent = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {forceMount: t13} = e14, r12 = __rest(e14, ["forceMount"]), n10 = E5("DialogContent", e14.__scopeDialog);
  return m6.createElement(Presence, {present: t13 || n10.open}, n10.modal ? /* @__PURE__ */ m6.createElement(_16, _extends2({}, r12, {ref: o13})) : /* @__PURE__ */ m6.createElement(O4, _extends2({}, r12, {ref: o13})));
});
var _16 = /* @__PURE__ */ m6.forwardRef((e14, t13) => {
  const r12 = E5("DialogContent", e14.__scopeDialog), n10 = m6.useRef(null), a10 = useComposedRefs(t13, r12.contentRef, n10);
  return m6.useEffect(() => {
    const e15 = n10.current;
    if (e15)
      return hideOthers(e15);
  }, []), /* @__PURE__ */ m6.createElement(h5, _extends2({}, e14, {ref: a10, trapFocus: r12.open, disableOutsidePointerEvents: true, onCloseAutoFocus: composeEventHandlers(e14.onCloseAutoFocus, (e15) => {
    var o13;
    e15.preventDefault(), (o13 = r12.triggerRef.current) === null || o13 === void 0 || o13.focus();
  }), onPointerDownOutside: composeEventHandlers(e14.onPointerDownOutside, (e15) => {
    const o13 = e15.detail.originalEvent, t14 = o13.button === 0 && o13.ctrlKey === true;
    (o13.button === 2 || t14) && e15.preventDefault();
  }), onFocusOutside: composeEventHandlers(e14.onFocusOutside, (e15) => e15.preventDefault())}));
});
var O4 = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const t13 = E5("DialogContent", e14.__scopeDialog), r12 = m6.useRef(false);
  return m6.createElement(h5, _extends2({}, e14, {ref: o13, trapFocus: false, disableOutsidePointerEvents: false, onCloseAutoFocus: (o14) => {
    var n10, a10;
    ((n10 = e14.onCloseAutoFocus) === null || n10 === void 0 || n10.call(e14, o14), o14.defaultPrevented) || (r12.current || (a10 = t13.triggerRef.current) === null || a10 === void 0 || a10.focus(), o14.preventDefault());
    r12.current = false;
  }, onInteractOutside: (o14) => {
    var n10, a10;
    (n10 = e14.onInteractOutside) === null || n10 === void 0 || n10.call(e14, o14), o14.defaultPrevented || (r12.current = true);
    const i10 = o14.target;
    ((a10 = t13.triggerRef.current) === null || a10 === void 0 ? void 0 : a10.contains(i10)) && o14.preventDefault();
  }}));
});
var h5 = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {__scopeDialog: t13, trapFocus: n10, onOpenAutoFocus: a10, onCloseAutoFocus: i10} = e14, s10 = __rest(e14, ["__scopeDialog", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus"]), u10 = E5("DialogContent", t13), p10 = m6.useRef(null), d10 = useComposedRefs(o13, p10);
  return useFocusGuards(), /* @__PURE__ */ m6.createElement(m6.Fragment, null, /* @__PURE__ */ m6.createElement(FocusScope, {asChild: true, loop: true, trapped: n10, onMountAutoFocus: a10, onUnmountAutoFocus: i10}, /* @__PURE__ */ m6.createElement(DismissableLayer, _extends2({role: "dialog", id: u10.contentId, "aria-describedby": u10.descriptionId, "aria-labelledby": u10.titleId, "data-state": b6(u10.open)}, s10, {ref: d10, onDismiss: () => u10.onOpenChange(false)}))), false);
});
var DialogTitle = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {__scopeDialog: t13} = e14, r12 = __rest(e14, ["__scopeDialog"]), a10 = E5("DialogTitle", t13);
  return m6.createElement(Primitive.h2, _extends2({id: a10.titleId}, r12, {ref: o13}));
});
var DialogClose = /* @__PURE__ */ m6.forwardRef((e14, o13) => {
  const {__scopeDialog: t13} = e14, r12 = __rest(e14, ["__scopeDialog"]), a10 = E5("DialogClose", t13);
  return m6.createElement(Primitive.button, _extends2({type: "button"}, r12, {ref: o13, onClick: composeEventHandlers(e14.onClick, () => a10.onOpenChange(false))}));
});
function b6(e14) {
  return e14 ? "open" : "closed";
}
var [w6, F4] = createContext4("DialogTitleWarning", {contentName: "DialogContent", titleName: "DialogTitle", docsSlug: "dialog"});
var Root9 = Dialog;
var Trigger4 = DialogTrigger;
var Portal2 = DialogPortal;
var Overlay3 = DialogOverlay;
var Content6 = DialogContent;
var Title = DialogTitle;
var Close = DialogClose;

// ../../packages/tldraw/dist/index.mjs
var it = __toModule(require_react());
var A4 = __toModule(require_react());
var fe2 = __toModule(require_react());
var me2 = __toModule(require_react());
var Se = __toModule(require_react());

// ../../node_modules/@radix-ui/react-alert-dialog/dist/index.module.js
var a6 = __toModule(require_react());
var [c7, s7] = createContextScope("AlertDialog", [C3]);
var p6 = C3();
var AlertDialog = (e14) => {
  const {__scopeAlertDialog: t13} = e14, o13 = __rest(e14, ["__scopeAlertDialog"]), l10 = p6(t13);
  return a6.createElement(Root9, _extends2({}, l10, o13, {modal: true}));
};
var AlertDialogTrigger = /* @__PURE__ */ a6.forwardRef((e14, t13) => {
  const {__scopeAlertDialog: o13} = e14, l10 = __rest(e14, ["__scopeAlertDialog"]), n10 = p6(o13);
  return a6.createElement(Trigger4, _extends2({}, n10, l10, {ref: t13}));
});
var AlertDialogPortal = (e14) => {
  const {__scopeAlertDialog: t13} = e14, o13 = __rest(e14, ["__scopeAlertDialog"]), l10 = p6(t13);
  return a6.createElement(Portal2, _extends2({}, l10, o13));
};
var AlertDialogOverlay = /* @__PURE__ */ a6.forwardRef((e14, t13) => {
  const {__scopeAlertDialog: o13} = e14, l10 = __rest(e14, ["__scopeAlertDialog"]), n10 = p6(o13);
  return a6.createElement(Overlay3, _extends2({}, n10, l10, {ref: t13}));
});
var [g6, D4] = c7("AlertDialogContent");
var AlertDialogContent = /* @__PURE__ */ a6.forwardRef((o13, n10) => {
  const {__scopeAlertDialog: c10, children: s10} = o13, D10 = __rest(o13, ["__scopeAlertDialog", "children"]), A10 = p6(c10), m10 = a6.useRef(null), u10 = useComposedRefs(n10, m10), x10 = a6.useRef(null);
  return a6.createElement(w6, {contentName: "AlertDialogContent", titleName: f6, docsSlug: "alert-dialog"}, /* @__PURE__ */ a6.createElement(g6, {scope: c10, cancelRef: x10}, /* @__PURE__ */ a6.createElement(Content6, _extends2({role: "alertdialog"}, A10, D10, {ref: u10, onOpenAutoFocus: composeEventHandlers(D10.onOpenAutoFocus, (e14) => {
    var t13;
    e14.preventDefault(), (t13 = x10.current) === null || t13 === void 0 || t13.focus({preventScroll: true});
  }), onPointerDownOutside: (e14) => e14.preventDefault(), onInteractOutside: (e14) => e14.preventDefault()}), /* @__PURE__ */ a6.createElement(Slottable, null, s10), false)));
});
var f6 = "AlertDialogTitle";
var AlertDialogAction = /* @__PURE__ */ a6.forwardRef((e14, t13) => {
  const {__scopeAlertDialog: o13} = e14, l10 = __rest(e14, ["__scopeAlertDialog"]), n10 = p6(o13);
  return a6.createElement(Close, _extends2({}, n10, l10, {ref: t13}));
});
var AlertDialogCancel = /* @__PURE__ */ a6.forwardRef((e14, t13) => {
  const {__scopeAlertDialog: o13} = e14, n10 = __rest(e14, ["__scopeAlertDialog"]), {cancelRef: c10} = D4("AlertDialogCancel", o13), s10 = p6(o13), g10 = useComposedRefs(t13, c10);
  return a6.createElement(Close, _extends2({}, s10, n10, {ref: g10}));
});
var Root10 = AlertDialog;
var Trigger5 = AlertDialogTrigger;
var Portal3 = AlertDialogPortal;
var Overlay4 = AlertDialogOverlay;
var Content7 = AlertDialogContent;
var Action = AlertDialogAction;
var Cancel = AlertDialogCancel;

// ../../packages/tldraw/dist/index.mjs
var fo = __toModule(require_react());
var ht = __toModule(require_react());
var ne2 = __toModule(require_react());
var ye = __toModule(require_react());
var lr = __toModule(require_react());
var k4 = __toModule(require_react());

// ../../node_modules/@radix-ui/react-context-menu/dist/index.module.js
var u4 = __toModule(require_react());
var [s8, i6] = createContextScope("ContextMenu", [S2]);
var x6 = S2();
var [p7, C4] = s8("ContextMenu");
var ContextMenu = (n10) => {
  const {__scopeContextMenu: o13, children: r12, onOpenChange: c10, dir: s10, modal: i10 = true} = n10, [C10, m10] = u4.useState(false), f10 = l7("ContextMenu", o13), d10 = x6(o13), M10 = useCallbackRef(c10), R10 = u4.useCallback((e14) => {
    m10(e14), M10(e14);
  }, [M10]);
  return f10.isInsideContent ? /* @__PURE__ */ u4.createElement(p7, {scope: o13, isRootMenu: false, open: C10, onOpenChange: R10, modal: i10}, /* @__PURE__ */ u4.createElement(Sub, _extends2({}, d10, {open: C10, onOpenChange: R10}), r12)) : /* @__PURE__ */ u4.createElement(p7, {scope: o13, isRootMenu: true, open: C10, onOpenChange: R10, modal: i10}, /* @__PURE__ */ u4.createElement(Root4, _extends2({}, d10, {dir: s10, open: C10, onOpenChange: R10, modal: i10}), r12));
};
var ContextMenuTrigger = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: r12} = e14, s10 = __rest(e14, ["__scopeContextMenu"]), i10 = C4("ContextMenuTrigger", r12), p10 = x6(r12), l10 = u4.useRef({x: 0, y: 0}), f10 = u4.useRef({getBoundingClientRect: () => DOMRect.fromRect(__assign({width: 0, height: 0}, l10.current))}), M10 = u4.useRef(0), R10 = u4.useCallback(() => window.clearTimeout(M10.current), []), _17 = (e15) => {
    l10.current = {x: e15.clientX, y: e15.clientY}, i10.onOpenChange(true);
  };
  return u4.useEffect(() => R10, [R10]), /* @__PURE__ */ u4.createElement(m7, {scope: r12, isInsideContent: false}, /* @__PURE__ */ u4.createElement(Anchor2, _extends2({}, p10, {virtualRef: f10})), /* @__PURE__ */ u4.createElement(Primitive.span, _extends2({}, s10, {ref: n10, style: __assign({WebkitTouchCallout: "none"}, e14.style), onContextMenu: composeEventHandlers(e14.onContextMenu, (e15) => {
    R10(), e15.preventDefault(), _17(e15);
  }), onPointerDown: composeEventHandlers(e14.onPointerDown, d7((e15) => {
    R10(), M10.current = window.setTimeout(() => _17(e15), 700);
  })), onPointerMove: composeEventHandlers(e14.onPointerMove, d7(R10)), onPointerCancel: composeEventHandlers(e14.onPointerCancel, d7(R10)), onPointerUp: composeEventHandlers(e14.onPointerUp, d7(R10))})));
});
var [m7, l7] = s8("ContextMenuContent", {isInsideContent: false});
var ContextMenuContent = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: o13} = e14, r12 = __rest(e14, ["__scopeContextMenu"]), c10 = C4("ContextMenuContent", o13), s10 = x6(o13), i10 = __assign(__assign({}, r12), {style: __assign(__assign({}, e14.style), {"--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)"})});
  return u4.createElement(m7, {scope: o13, isInsideContent: true}, c10.isRootMenu ? /* @__PURE__ */ u4.createElement(f7, _extends2({__scopeContextMenu: o13}, i10, {ref: n10})) : /* @__PURE__ */ u4.createElement(Content2, _extends2({}, s10, i10, {ref: n10})));
});
var f7 = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: o13} = e14, r12 = __rest(e14, ["__scopeContextMenu"]), c10 = C4("ContextMenuContent", o13), s10 = x6(o13), i10 = u4.useRef(false);
  return u4.createElement(Content2, _extends2({}, s10, r12, {ref: n10, portalled: true, side: "right", sideOffset: 2, align: "start", onCloseAutoFocus: (t13) => {
    var n11;
    (n11 = e14.onCloseAutoFocus) === null || n11 === void 0 || n11.call(e14, t13), !t13.defaultPrevented && i10.current && t13.preventDefault(), i10.current = false;
  }, onInteractOutside: (t13) => {
    var n11;
    (n11 = e14.onInteractOutside) === null || n11 === void 0 || n11.call(e14, t13), t13.defaultPrevented || c10.modal || (i10.current = true);
  }}));
});
var ContextMenuItem = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: o13} = e14, r12 = __rest(e14, ["__scopeContextMenu"]), c10 = x6(o13);
  return u4.createElement(Item2, _extends2({}, c10, r12, {ref: n10}));
});
var ContextMenuTriggerItem = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: o13} = e14, r12 = __rest(e14, ["__scopeContextMenu"]), c10 = x6(o13);
  return u4.createElement(SubTrigger, _extends2({}, c10, r12, {ref: n10}));
});
var ContextMenuArrow = /* @__PURE__ */ u4.forwardRef((e14, n10) => {
  const {__scopeContextMenu: o13} = e14, r12 = __rest(e14, ["__scopeContextMenu"]), c10 = x6(o13);
  return u4.createElement(Arrow3, _extends2({}, c10, r12, {ref: n10}));
});
function d7(e14) {
  return (t13) => t13.pointerType !== "mouse" ? e14(t13) : void 0;
}
var Root11 = ContextMenu;
var Trigger6 = ContextMenuTrigger;
var Content8 = ContextMenuContent;

// ../../packages/tldraw/dist/index.mjs
var Es = __toModule(require_react());
var mr = __toModule(require_react());
var import_react_error_boundary = __toModule(require_react_error_boundary_umd());
var Mt = __toModule(require_react());
var Sr = Object.defineProperty;
var ql = Object.defineProperties;
var Jl = Object.getOwnPropertyDescriptors;
var Yo = Object.getOwnPropertySymbols;
var Tr = Object.prototype.hasOwnProperty;
var br = Object.prototype.propertyIsEnumerable;
var Ls = (s10, e14, t13) => e14 in s10 ? Sr(s10, e14, {enumerable: true, configurable: true, writable: true, value: t13}) : s10[e14] = t13;
var f8 = (s10, e14) => {
  for (var t13 in e14 || (e14 = {}))
    Tr.call(e14, t13) && Ls(s10, t13, e14[t13]);
  if (Yo)
    for (var t13 of Yo(e14))
      br.call(e14, t13) && Ls(s10, t13, e14[t13]);
  return s10;
};
var C5 = (s10, e14) => ql(s10, Jl(e14));
var _e = (s10, e14) => {
  var t13 = {};
  for (var n10 in s10)
    Tr.call(s10, n10) && e14.indexOf(n10) < 0 && (t13[n10] = s10[n10]);
  if (s10 != null && Yo)
    for (var n10 of Yo(s10))
      e14.indexOf(n10) < 0 && br.call(s10, n10) && (t13[n10] = s10[n10]);
  return t13;
};
var Ot = (s10, e14) => () => (s10 && (e14 = s10(s10 = 0)), e14);
var Gn = (s10, e14) => {
  for (var t13 in e14)
    Sr(s10, t13, {get: e14[t13], enumerable: true});
};
var d8 = (s10, e14, t13) => (Ls(s10, typeof e14 != "symbol" ? e14 + "" : e14, t13), t13);
var ee = (s10, e14, t13) => new Promise((n10, o13) => {
  var i10 = (r12) => {
    try {
      l10(t13.next(r12));
    } catch (c10) {
      o13(c10);
    }
  }, a10 = (r12) => {
    try {
      l10(t13.throw(r12));
    } catch (c10) {
      o13(c10);
    }
  }, l10 = (r12) => r12.done ? n10(r12.value) : Promise.resolve(r12.value).then(i10, a10);
  l10((t13 = t13.apply(s10, e14)).next());
});
var ic;
var bn;
var yo = Ot(() => {
  ic = (() => {
    if (typeof self == "undefined")
      return false;
    if ("top" in self && self !== top)
      try {
        top.location + "";
      } catch (s10) {
        return false;
      }
    else if ("showOpenFilePicker" in self)
      return "showOpenFilePicker";
    return false;
  })(), bn = ic;
});
var yr = {};
Gn(yr, {default: () => rc});
var rc;
var wr = Ot(() => {
  rc = (...e14) => ee(void 0, [...e14], function* (s10 = [{}]) {
    return Array.isArray(s10) || (s10 = [s10]), new Promise((t13, n10) => {
      let o13 = document.createElement("input");
      o13.type = "file";
      let i10 = [...s10.map((c10) => c10.mimeTypes || []).join(), s10.map((c10) => c10.extensions || []).join()].join();
      o13.multiple = s10[0].multiple || false, o13.accept = i10 || "";
      let a10 = () => r12(n10), l10 = (c10) => {
        typeof r12 == "function" && r12(), t13(c10);
      }, r12 = s10[0].legacySetup && s10[0].legacySetup(l10, a10, o13);
      o13.addEventListener("change", () => {
        l10(o13.multiple ? Array.from(o13.files) : o13.files[0]);
      }), o13.click();
    });
  });
});
var xr = {};
Gn(xr, {default: () => dc});
var ac;
var dc;
var Ir = Ot(() => {
  ac = (s10) => ee(void 0, null, function* () {
    let e14 = yield s10.getFile();
    return e14.handle = s10, e14;
  }), dc = (...e14) => ee(void 0, [...e14], function* (s10 = [{}]) {
    Array.isArray(s10) || (s10 = [s10]);
    let t13 = [];
    s10.forEach((i10, a10) => {
      t13[a10] = {description: i10.description || "", accept: {}}, i10.mimeTypes ? i10.mimeTypes.map((l10) => {
        t13[a10].accept[l10] = i10.extensions || [];
      }) : t13[a10].accept["*/*"] = i10.extensions || [];
    });
    let n10 = yield window.showOpenFilePicker({id: s10[0].id, startIn: s10[0].startIn, types: t13, multiple: s10[0].multiple || false, excludeAcceptAllOption: s10[0].excludeAcceptAllOption || false}), o13 = yield Promise.all(n10.map(ac));
    return s10[0].multiple ? o13 : o13[0];
  });
});
function Cr(...s10) {
  return ee(this, null, function* () {
    return (yield lc).default(...s10);
  });
}
var lc;
var vr = Ot(() => {
  yo();
  lc = bn ? Promise.resolve().then(() => (Ir(), xr)) : Promise.resolve().then(() => (wr(), yr));
});
var kr = {};
Gn(kr, {default: () => cc});
var cc;
var Dr = Ot(() => {
  cc = (...e14) => ee(void 0, [...e14], function* (s10 = [{}]) {
    return Array.isArray(s10) || (s10 = [s10]), s10[0].recursive = s10[0].recursive || false, new Promise((t13, n10) => {
      let o13 = document.createElement("input");
      o13.type = "file", o13.webkitdirectory = true;
      let i10 = () => l10(n10), a10 = (r12) => {
        typeof l10 == "function" && l10(), t13(r12);
      }, l10 = s10[0].legacySetup && s10[0].legacySetup(a10, i10, o13);
      o13.addEventListener("change", () => {
        let r12 = Array.from(o13.files);
        s10[0].recursive ? s10[0].recursive && s10[0].skipDirectory && (r12 = r12.filter((c10) => c10.webkitRelativePath.split("/").every((u10) => !s10[0].skipDirectory({name: u10, kind: "directory"})))) : r12 = r12.filter((c10) => c10.webkitRelativePath.split("/").length === 2), a10(r12);
      }), o13.click();
    });
  });
});
var Br = {};
Gn(Br, {default: () => pc});
var Pr;
var pc;
var Mr = Ot(() => {
  Pr = (o13, i10, ...a10) => ee(void 0, [o13, i10, ...a10], function* (s10, e14, t13 = s10.name, n10) {
    let l10 = [], r12 = [];
    for (let c10 of s10.values()) {
      let p10 = `${t13}/${c10.name}`;
      c10.kind === "file" ? r12.push(yield c10.getFile().then((u10) => (u10.directoryHandle = s10, Object.defineProperty(u10, "webkitRelativePath", {configurable: true, enumerable: true, get: () => p10})))) : c10.kind === "directory" && e14 && (!n10 || !n10(c10)) && l10.push(yield Pr(c10, e14, p10, n10));
    }
    return [...(yield Promise.all(l10)).flat(), ...yield Promise.all(r12)];
  }), pc = (...e14) => ee(void 0, [...e14], function* (s10 = {}) {
    s10.recursive = s10.recursive || false;
    let t13 = yield window.showDirectoryPicker({id: s10.id, startIn: s10.startIn});
    return Pr(t13, s10.recursive, void 0, s10.skipDirectory);
  });
});
function Er(...s10) {
  return ee(this, null, function* () {
    return (yield uc).default(...s10);
  });
}
var uc;
var Rr = Ot(() => {
  yo();
  uc = bn ? Promise.resolve().then(() => (Mr(), Br)) : Promise.resolve().then(() => (Dr(), kr));
});
var Lr = {};
Gn(Lr, {default: () => hc});
function mc(s10, e14) {
  return ee(this, null, function* () {
    let t13 = s10.getReader(), n10 = new ReadableStream({start(i10) {
      return a10();
      function a10() {
        return ee(this, null, function* () {
          return t13.read().then(({done: l10, value: r12}) => {
            if (l10) {
              i10.close();
              return;
            }
            return i10.enqueue(r12), a10();
          });
        });
      }
    }}), o13 = new Response(n10);
    return t13.releaseLock(), new Blob([yield o13.blob()], {type: e14});
  });
}
var hc;
var Ar = Ot(() => {
  hc = (t13, ...n10) => ee(void 0, [t13, ...n10], function* (s10, e14 = {}) {
    Array.isArray(e14) && (e14 = e14[0]);
    let o13 = document.createElement("a"), i10 = s10;
    "body" in s10 && (i10 = yield mc(s10.body, s10.headers.get("content-type"))), o13.download = e14.fileName || "Untitled", o13.href = URL.createObjectURL(i10);
    let a10 = () => r12(reject), l10 = () => {
      typeof r12 == "function" && r12();
    }, r12 = e14.legacySetup && e14.legacySetup(l10, a10, o13);
    return o13.addEventListener("click", () => {
      setTimeout(() => URL.revokeObjectURL(o13.href), 30 * 1e3), l10(null);
    }), o13.click(), null;
  });
});
var Hr = {};
Gn(Hr, {default: () => gc});
var gc;
var zr = Ot(() => {
  gc = (o13, ...i10) => ee(void 0, [o13, ...i10], function* (s10, e14 = [{}], t13 = null, n10 = false) {
    Array.isArray(e14) || (e14 = [e14]), e14[0].fileName = e14[0].fileName || "Untitled";
    let a10 = [];
    if (e14.forEach((c10, p10) => {
      a10[p10] = {description: c10.description || "", accept: {}}, c10.mimeTypes ? (p10 === 0 && (s10.type ? c10.mimeTypes.push(s10.type) : s10.headers && s10.headers.get("content-type") && c10.mimeTypes.push(s10.headers.get("content-type"))), c10.mimeTypes.map((u10) => {
        a10[p10].accept[u10] = c10.extensions || [];
      })) : s10.type && (a10[p10].accept[s10.type] = c10.extensions || []);
    }), t13)
      try {
        yield t13.getFile();
      } catch (c10) {
        if (t13 = null, n10)
          throw c10;
      }
    let l10 = t13 || (yield window.showSaveFilePicker({suggestedName: e14[0].fileName, id: e14[0].id, startIn: e14[0].startIn, types: a10, excludeAcceptAllOption: e14[0].excludeAcceptAllOption || false})), r12 = yield l10.createWritable();
    return "stream" in s10 ? (yield s10.stream().pipeTo(r12), l10) : "body" in s10 ? (yield s10.body.pipeTo(r12), l10) : (yield r12.write(blob), yield r12.close(), l10);
  });
});
function Or(...s10) {
  return ee(this, null, function* () {
    return (yield fc).default(...s10);
  });
}
var fc;
var Fr = Ot(() => {
  yo();
  fc = bn ? Promise.resolve().then(() => (zr(), Hr)) : Promise.resolve().then(() => (Ar(), Lr));
});
var ns = {};
Gn(ns, {directoryOpen: () => Er, fileOpen: () => Cr, fileSave: () => Or, supported: () => bn});
var wo = Ot(() => {
  vr();
  Rr();
  Fr();
  yo();
});
var {styled: M3, createTheme: tc} = q({themeMap: f8({}, n), theme: {colors: {bounds: "rgba(65, 132, 244, 1.000)", boundsBg: "rgba(65, 132, 244, 0.05)", hover: "#ececec", overlay: "rgba(0, 0, 0, 0.15)", overlayContrast: "rgba(255, 255, 255, 0.15)", panel: "#fefefe", panelContrast: "#ffffff", selected: "rgba(66, 133, 244, 1.000)", selectedContrast: "#fefefe", sponsor: "#ec6cb9", sponsorContrast: "#ec6cb944", text: "#333333", tooltip: "#1d1d1d", tooltipContrast: "#ffffff", warn: "rgba(255, 100, 100, 1)", canvas: "rgb(248, 249, 250)"}, shadows: {2: "0px 1px 1px rgba(0, 0, 0, 0.14)", 3: "0px 2px 3px rgba(0, 0, 0, 0.14)", 4: "0px 4px 5px -1px rgba(0, 0, 0, 0.14)", 8: "0px 12px 17px rgba(0, 0, 0, 0.14)", 12: "0px 12px 17px rgba(0, 0, 0, 0.14)", 24: "0px 24px 38px rgba(0, 0, 0, 0.14)", key: "1px 1px rgba(0,0,0,1)", panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -8px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -12px rgba(0, 0, 0, 0.12),
        0px 0px 2px 0px rgba(0, 0, 0, 0.08)`}, space: {0: "2px", 1: "3px", 2: "4px", 3: "8px", 4: "12px", 5: "16px", 6: "32px", 7: "48px"}, fontSizes: {0: "10px", 1: "12px", 2: "13px", 3: "16px", 4: "18px"}, fonts: {ui: '"Recursive", system-ui, sans-serif', body: '"Recursive", system-ui, sans-serif', mono: '"Recursive Mono", monospace'}, fontWeights: {}, lineHeights: {}, letterSpacings: {}, sizes: {}, borderWidths: {0: "$1"}, borderStyles: {}, radii: {0: "2px", 1: "4px", 2: "8px", 3: "12px", 4: "16px"}, zIndices: {}, transitions: {}}, media: {micro: "(max-width: 370px)", sm: "(min-width: 640px)", md: "(min-width: 768px)", lg: "(min-width: 1024px)"}, utils: {zStrokeWidth: () => (s10) => Array.isArray(s10) ? {strokeWidth: `calc(${s10[0]}px / var(--camera-zoom))`} : {strokeWidth: `calc(${s10}px / var(--camera-zoom))`}}});
var As = tc({colors: {bounds: "rgba(38, 150, 255, 1.000)", boundsBg: "rgba(38, 150, 255, 0.05)", hover: "#444A50", overlay: "rgba(0, 0, 0, 0.15)", overlayContrast: "rgba(255, 255, 255, 0.15)", panel: "#363D44", panelContrast: "#49555f", selected: "rgba(38, 150, 255, 1.000)", selectedContrast: "#fefefe", text: "#f8f9fa", tooltip: "#1d1d1d", tooltipContrast: "#ffffff", canvas: "#212529"}, shadows: {2: "0px 1px 1px rgba(0, 0, 0, 0.24)", 3: "0px 2px 3px rgba(0, 0, 0, 0.24)", 4: "0px 4px 5px -1px rgba(0, 0, 0, 0.24)", 8: "0px 12px 17px rgba(0, 0, 0, 0.24)", 12: "0px 12px 17px rgba(0, 0, 0, 0.24)", 24: "0px 24px 38px rgba(0, 0, 0, 0.24)", panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
      0px 0px 16px -8px rgba(0, 0, 0, 0.09), 
      0px 0px 16px -12px rgba(0, 0, 0, 0.2)`}});
var Hs = class {
  constructor() {
    d8(this, "onPinchStart");
    d8(this, "onPinchEnd");
    d8(this, "onPinch");
    d8(this, "onKeyDown");
    d8(this, "onKeyUp");
    d8(this, "onPointerMove");
    d8(this, "onPointerUp");
    d8(this, "onPan");
    d8(this, "onZoom");
    d8(this, "onPointerDown");
    d8(this, "onPointCanvas");
    d8(this, "onDoubleClickCanvas");
    d8(this, "onRightPointCanvas");
    d8(this, "onDragCanvas");
    d8(this, "onReleaseCanvas");
    d8(this, "onPointShape");
    d8(this, "onDoubleClickShape");
    d8(this, "onRightPointShape");
    d8(this, "onDragShape");
    d8(this, "onHoverShape");
    d8(this, "onUnhoverShape");
    d8(this, "onReleaseShape");
    d8(this, "onPointBounds");
    d8(this, "onDoubleClickBounds");
    d8(this, "onRightPointBounds");
    d8(this, "onDragBounds");
    d8(this, "onHoverBounds");
    d8(this, "onUnhoverBounds");
    d8(this, "onReleaseBounds");
    d8(this, "onPointBoundsHandle");
    d8(this, "onDoubleClickBoundsHandle");
    d8(this, "onRightPointBoundsHandle");
    d8(this, "onDragBoundsHandle");
    d8(this, "onHoverBoundsHandle");
    d8(this, "onUnhoverBoundsHandle");
    d8(this, "onReleaseBoundsHandle");
    d8(this, "onPointHandle");
    d8(this, "onDoubleClickHandle");
    d8(this, "onRightPointHandle");
    d8(this, "onDragHandle");
    d8(this, "onHoverHandle");
    d8(this, "onUnhoverHandle");
    d8(this, "onReleaseHandle");
    d8(this, "onShapeBlur");
    d8(this, "onShapeClone");
  }
};
var nc = ((o13) => (o13.Idle = "idle", o13.Connecting = "connecting", o13.Connected = "connected", o13.Disconnected = "disconnected", o13))(nc || {});
var Ee = ((u10) => (u10.Transform = "transform", u10.Translate = "translate", u10.TransformSingle = "transformSingle", u10.Brush = "brush", u10.Arrow = "arrow", u10.Draw = "draw", u10.Erase = "erase", u10.Rotate = "rotate", u10.Handle = "handle", u10.Grid = "grid", u10.Edit = "edit", u10))(Ee || {});
var vt = ((g10) => (g10.Idle = "idle", g10.PointingHandle = "pointingHandle", g10.PointingBounds = "pointingBounds", g10.PointingBoundsHandle = "pointingBoundsHandle", g10.TranslatingLabel = "translatingLabel", g10.TranslatingHandle = "translatingHandle", g10.Translating = "translating", g10.Transforming = "transforming", g10.Rotating = "rotating", g10.Pinching = "pinching", g10.Brushing = "brushing", g10.Creating = "creating", g10.EditingText = "editing-text", g10))(vt || {});
var zs = ((o13) => (o13.Backward = "backward", o13.Forward = "forward", o13.ToFront = "toFront", o13.ToBack = "toBack", o13))(zs || {});
var Zo = ((a10) => (a10.Top = "top", a10.CenterVertical = "centerVertical", a10.Bottom = "bottom", a10.Left = "left", a10.CenterHorizontal = "centerHorizontal", a10.Right = "right", a10))(Zo || {});
var Xo = ((t13) => (t13.Horizontal = "horizontal", t13.Vertical = "vertical", t13))(Xo || {});
var qo = ((t13) => (t13.Horizontal = "horizontal", t13.Vertical = "vertical", t13))(qo || {});
var Os = ((t13) => (t13.Horizontal = "horizontal", t13.Vertical = "vertical", t13))(Os || {});
var Te2 = ((u10) => (u10.Sticky = "sticky", u10.Ellipse = "ellipse", u10.Rectangle = "rectangle", u10.Triangle = "triangle", u10.Draw = "draw", u10.Arrow = "arrow", u10.Line = "line", u10.Text = "text", u10.Group = "group", u10.Image = "image", u10.Video = "video", u10))(Te2 || {});
var Jo = ((e14) => (e14.Arrow = "arrow", e14))(Jo || {});
var Fs = ((h10) => (h10.White = "white", h10.LightGray = "lightGray", h10.Gray = "gray", h10.Black = "black", h10.Green = "green", h10.Cyan = "cyan", h10.Blue = "blue", h10.Indigo = "indigo", h10.Violet = "violet", h10.Red = "red", h10.Orange = "orange", h10.Yellow = "yellow", h10))(Fs || {});
var Qo = ((n10) => (n10.Small = "small", n10.Medium = "medium", n10.Large = "large", n10))(Qo || {});
var on = ((o13) => (o13.Draw = "draw", o13.Solid = "solid", o13.Dashed = "dashed", o13.Dotted = "dotted", o13))(on || {});
var oc = ((o13) => (o13.Small = "small", o13.Medium = "medium", o13.Large = "large", o13.ExtraLarge = "extraLarge", o13))(oc || {});
var Wt = ((o13) => (o13.Start = "start", o13.Middle = "middle", o13.End = "end", o13.Justify = "justify", o13))(Wt || {});
var To = ((o13) => (o13.Script = "script", o13.Sans = "sans", o13.Serif = "erif", o13.Mono = "mono", o13))(To || {});
var js = ((t13) => (t13.Image = "image", t13.Video = "video", t13))(js || {});
var bo = ((i10) => (i10.PNG = "png", i10.JPG = "jpeg", i10.WEBP = "webp", i10.SVG = "svg", i10.JSON = "json", i10))(bo || {});
function sn(s10, e14) {
  let {document: t13, settings: n10} = s10, {version: o13 = 0} = t13;
  "assets" in t13 || (t13.assets = {});
  let i10 = new Set();
  return Object.values(t13.pages).forEach((a10) => Object.values(a10.shapes).forEach((l10) => {
    let {parentId: r12, children: c10, assetId: p10} = l10;
    p10 && i10.add(p10), r12 !== a10.id && !a10.shapes[r12] && (console.warn("Encountered a shape with a missing parent!"), l10.parentId = a10.id), l10.type === "group" && c10 && c10.forEach((u10) => {
      a10.shapes[u10] || (console.warn("Encountered a parent with a missing child!", l10.id, u10), c10 == null || c10.splice(c10.indexOf(u10), 1));
    });
  })), Object.keys(t13.assets).forEach((a10) => {
    i10.has(a10) || delete t13.assets[a10];
  }), o13 === e14 || (o13 < 14 && Object.values(t13.pages).forEach((a10) => {
    Object.values(a10.shapes).filter((l10) => l10.type === "text").forEach((l10) => l10.style.font === "script");
  }), o13 <= 13 && Object.values(t13.pages).forEach((a10) => {
    Object.values(a10.bindings).forEach((l10) => {
      Object.assign(l10, l10.meta);
    }), Object.values(a10.shapes).forEach((l10) => {
      Object.entries(l10.style).forEach(([r12, c10]) => {
        typeof c10 == "string" && (l10.style[r12] = c10.toLowerCase());
      }), l10.type === "arrow" && l10.decorations && Object.entries(l10.decorations).forEach(([r12, c10]) => {
        c10 === "Arrow" && (l10.decorations = C5(f8({}, l10.decorations), {[r12]: "arrow"}));
      });
    });
  }), o13 <= 13.1 && (t13.name = "New Document"), o13 < 15 && (t13.assets = {}), Object.values(t13.pages).forEach((a10) => {
    Object.values(a10.shapes).forEach((l10) => {
      o13 < 15.2 && (l10.type === "image" || l10.type === "video") && (l10.style.isFilled = true), o13 < 15.3 && (l10.type === "rectangle" || l10.type === "triangle" || l10.type === "ellipse" || l10.type === "arrow") && (l10.label = l10.text || "", l10.labelPoint = [0.5, 0.5]);
    });
  }), o13 < 15.4 && (n10.dockPosition = "bottom"), Object.values(t13.pageStates).forEach((a10) => {
    a10.selectedIds = a10.selectedIds.filter((l10) => t13.pages[a10.id].shapes[l10] !== void 0), a10.bindingId = void 0, a10.editingId = void 0, a10.hoveredId = void 0, a10.pointedId = void 0;
  }), t13.version = e14), s10;
}
var Vn = "-0.03em";
var qn = [0.5, 0.5];
var eU = Math.PI * 2;
var $n = {linear: (s10) => s10, easeInQuad: (s10) => s10 * s10, easeOutQuad: (s10) => s10 * (2 - s10), easeInOutQuad: (s10) => s10 < 0.5 ? 2 * s10 * s10 : -1 + (4 - 2 * s10) * s10, easeInCubic: (s10) => s10 * s10 * s10, easeOutCubic: (s10) => --s10 * s10 * s10 + 1, easeInOutCubic: (s10) => s10 < 0.5 ? 4 * s10 * s10 * s10 : (s10 - 1) * (2 * s10 - 2) * (2 * s10 - 2) + 1, easeInQuart: (s10) => s10 * s10 * s10 * s10, easeOutQuart: (s10) => 1 - --s10 * s10 * s10 * s10, easeInOutQuart: (s10) => s10 < 0.5 ? 8 * s10 * s10 * s10 * s10 : 1 - 8 * --s10 * s10 * s10 * s10, easeInQuint: (s10) => s10 * s10 * s10 * s10 * s10, easeOutQuint: (s10) => 1 + --s10 * s10 * s10 * s10 * s10, easeInOutQuint: (s10) => s10 < 0.5 ? 16 * s10 * s10 * s10 * s10 * s10 : 1 + 16 * --s10 * s10 * s10 * s10 * s10, easeInSine: (s10) => 1 - Math.cos(s10 * Math.PI / 2), easeOutSine: (s10) => Math.sin(s10 * Math.PI / 2), easeInOutSine: (s10) => -(Math.cos(Math.PI * s10) - 1) / 2, easeInExpo: (s10) => s10 <= 0 ? 0 : Math.pow(2, 10 * s10 - 10), easeOutExpo: (s10) => s10 >= 1 ? 1 : 1 - Math.pow(2, -10 * s10), easeInOutExpo: (s10) => s10 <= 0 ? 0 : s10 >= 1 ? 1 : s10 < 0.5 ? Math.pow(2, 20 * s10 - 10) / 2 : (2 - Math.pow(2, -20 * s10 + 10)) / 2};
var Us = ["#EC5E41", "#F2555A", "#F04F88", "#E34BA9", "#BD54C6", "#9D5BD2", "#7B66DC", "#02B1CC", "#11B3A3", "#39B178", "#55B467", "#FF802B"];
var sc = typeof Window == "undefined" ? false : /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
var es = [".png", ".svg", ".jpg", ".jpeg", ".gif"];
var ts = sc ? [] : [".mp4", ".webm"];
var jr = {mode: "readwrite"};
var bc = (s10) => ee(void 0, null, function* () {
  return (yield s10.queryPermission(jr)) === "granted" || (yield s10.requestPermission(jr)) === "granted";
});
function Ur() {
  return ee(this, null, function* () {
    if (typeof Window == "undefined" || !("_location" in Window))
      return;
    let s10 = yield get3(`Tldraw_file_handle_${window.location.origin}`);
    return s10 || null;
  });
}
function Gr(s10) {
  return ee(this, null, function* () {
    return set4(`Tldraw_file_handle_${window.location.origin}`, s10);
  });
}
function Gs(s10, e14) {
  return ee(this, null, function* () {
    let t13 = {name: s10.name || "New Document", fileHandle: e14 != null ? e14 : null, document: s10, assets: {}}, n10 = JSON.stringify(t13, null, 2), o13 = new Blob([n10], {type: "application/vnd.Tldraw+json"});
    if (e14 && !(yield bc(e14)))
      return null;
    let l10 = yield (yield Promise.resolve().then(() => (wo(), ns))).fileSave(o13, {fileName: `${t13.name}.tldr`, description: "Tldraw File", extensions: [".tldr"]}, e14);
    return yield Gr(l10), l10;
  });
}
function Vr() {
  return ee(this, null, function* () {
    var a10;
    let t13 = yield (yield Promise.resolve().then(() => (wo(), ns))).fileOpen({description: "Tldraw File", extensions: [".tldr"], multiple: false});
    if (!t13)
      return null;
    let n10 = yield new Promise((l10) => {
      let r12 = new FileReader();
      r12.onloadend = () => {
        r12.readyState === FileReader.DONE && l10(r12.result);
      }, r12.readAsText(t13, "utf8");
    }), o13 = JSON.parse(n10), i10 = (a10 = t13.handle) != null ? a10 : null;
    return yield Gr(i10), {fileHandle: i10, document: o13.document};
  });
}
function $r() {
  return ee(this, null, function* () {
    return (yield Promise.resolve().then(() => (wo(), ns))).fileOpen({description: "Image or Video", extensions: [...es, ...ts], multiple: true});
  });
}
function Nr(s10) {
  return new Promise((e14, t13) => {
    if (s10) {
      let n10 = new FileReader();
      n10.readAsDataURL(s10), n10.onload = () => e14(n10.result), n10.onerror = (o13) => t13(o13), n10.onabort = (o13) => t13(o13);
    }
  });
}
function Kr(s10) {
  return new Promise((e14, t13) => {
    if (s10) {
      let n10 = new FileReader();
      n10.readAsText(s10), n10.onload = () => e14(n10.result), n10.onerror = (o13) => t13(o13), n10.onabort = (o13) => t13(o13);
    }
  });
}
function Wr(s10) {
  return new Promise((e14, t13) => {
    let n10 = new Image();
    n10.onload = () => e14([n10.width, n10.height]), n10.onerror = () => t13(new Error("Could not get image size")), n10.src = s10;
  });
}
function _r(s10) {
  return new Promise((e14, t13) => {
    let n10 = document.createElement("video");
    n10.onloadedmetadata = () => e14([n10.videoWidth, n10.videoHeight]), n10.onerror = () => t13(new Error("Could not get video size")), n10.src = s10;
  });
}
wo();
var Yr = "#fafafa";
var Vs = "#343d45";
var Qn = {["white"]: "#f0f1f3", ["lightGray"]: "#c6cbd1", ["gray"]: "#788492", ["black"]: "#1d1d1d", ["green"]: "#36b24d", ["cyan"]: "#0e98ad", ["blue"]: "#1c7ed6", ["indigo"]: "#4263eb", ["violet"]: "#7746f1", ["red"]: "#ff2133", ["orange"]: "#ff9433", ["yellow"]: "#ffc936"};
var yc = {light: C5(f8({}, Object.fromEntries(Object.entries(Qn).map(([s10, e14]) => [s10, Utils.lerpColor(e14, Yr, 0.45)]))), {["white"]: "#ffffff", ["black"]: "#3d3d3d"}), dark: C5(f8({}, Object.fromEntries(Object.entries(Qn).map(([s10, e14]) => [s10, Utils.lerpColor(Utils.lerpColor(e14, "#999999", 0.3), Vs, 0.4)]))), {["white"]: "#1d1d1d", ["black"]: "#bbbbbb"})};
var eo = {light: C5(f8({}, Qn), {["white"]: "#1d1d1d"}), dark: C5(f8({}, Object.fromEntries(Object.entries(Qn).map(([s10, e14]) => [s10, Utils.lerpColor(e14, Vs, 0.1)]))), {["white"]: "#cecece", ["black"]: "#cecece"})};
var os = {light: C5(f8({}, Object.fromEntries(Object.entries(Qn).map(([s10, e14]) => [s10, Utils.lerpColor(e14, Yr, 0.82)]))), {["white"]: "#fefefe"}), dark: C5(f8({}, Object.fromEntries(Object.entries(Qn).map(([s10, e14]) => [s10, Utils.lerpColor(e14, Vs, 0.82)]))), {["white"]: "rgb(30,33,37)", ["black"]: "#1e1e1f"})};
var wc = {["small"]: 2, ["medium"]: 3.5, ["large"]: 5};
var xc = {["small"]: 28, ["medium"]: 48, ["large"]: 96, auto: "auto"};
var Ic = {["script"]: '"Caveat Brush"', ["sans"]: '"Source Sans Pro"', ["erif"]: '"Crimson Pro"', ["mono"]: '"Source Code Pro"'};
var Cc = {["script"]: 1, ["sans"]: 1, ["erif"]: 1, ["mono"]: 1};
var vc = {["small"]: 24, ["medium"]: 36, ["large"]: 48, auto: "auto"};
function kc(s10) {
  return wc[s10];
}
function $s(s10, e14 = "script") {
  return xc[s10] * Cc[e14];
}
function ss(s10 = "script") {
  return Ic[s10];
}
function Dc(s10) {
  return vc[s10];
}
function wt(s10) {
  let e14 = $s(s10.size, s10.font), t13 = ss(s10.font), {scale: n10 = 1} = s10;
  return `${e14 * n10}px/1 ${t13}`;
}
function Zr(s10) {
  let e14 = Dc(s10.size), t13 = ss(s10.font), {scale: n10 = 1} = s10;
  return `${e14 * n10}px/1 ${t13}`;
}
function Ns(s10, e14 = false) {
  let {color: t13} = s10, n10 = e14 ? "dark" : "light", o13 = t13 === "white" || t13 === "black" ? "yellow" : t13;
  return {fill: yc[n10][o13], stroke: eo[n10][o13], color: e14 ? "#1d1d1d" : "#0d0d0d"};
}
function le2(s10, e14) {
  let {color: t13, size: n10, isFilled: o13} = s10, i10 = kc(n10), a10 = e14 ? "dark" : "light";
  return {stroke: eo[a10][t13], fill: o13 ? os[a10][t13] : "none", strokeWidth: i10};
}
var Ye = {color: "black", size: "small", isFilled: false, dash: "draw", scale: 1};
var to = C5(f8({}, Ye), {font: "script", textAlign: "middle"});
var Pc = {["start"]: "left", ["middle"]: "center", ["end"]: "right", ["justify"]: "justify"};
function xo(s10 = "start") {
  return Pc[s10];
}
function no(s10, e14, t13) {
  var l10;
  let n10 = $s(e14.size, e14.font), o13 = document.createElementNS("http://www.w3.org/2000/svg", "g"), i10 = (l10 = e14.scale) != null ? l10 : 1, a10 = s10.split(`
`).map((r12, c10) => {
    let p10 = document.createElementNS("http://www.w3.org/2000/svg", "text");
    return p10.textContent = r12, p10.setAttribute("y", n10 * (0.5 + c10 * 1) + ""), p10.setAttribute("letter-spacing", n10 * -0.03 + ""), p10.setAttribute("font-size", n10 + "px"), p10.setAttribute("font-family", ss(e14.font).slice(1, -1)), p10.setAttribute("text-align", xo(e14.textAlign)), p10.setAttribute("text-align", xo(e14.textAlign)), p10.setAttribute("alignment-baseline", "central"), e14.scale !== 1 && p10.setAttribute("transform", `scale(${e14.scale})`), o13.appendChild(p10), p10;
  });
  switch (e14.textAlign) {
    case "middle": {
      o13.setAttribute("text-align", "center"), o13.setAttribute("text-anchor", "middle"), a10.forEach((r12) => {
        r12.setAttribute("x", t13.width / 2 / i10 + "");
      });
      break;
    }
    case "end": {
      o13.setAttribute("text-align", "right"), o13.setAttribute("text-anchor", "end"), a10.forEach((r12) => r12.setAttribute("x", t13.width / i10 + ""));
      break;
    }
    case "start":
      o13.setAttribute("text-align", "left"), o13.setAttribute("text-anchor", "start");
  }
  return o13;
}
var yn;
function Mc() {
  var e14;
  (e14 = document.getElementById("__textLabelMeasure")) == null || e14.remove();
  let s10 = document.createElement("pre");
  return s10.id = "__textLabelMeasure", Object.assign(s10.style, {whiteSpace: "pre", width: "auto", border: "1px solid transparent", padding: "4px", margin: "0px", letterSpacing: Vn, opacity: "0", position: "absolute", top: "-500px", left: "0px", zIndex: "9999", pointerEvents: "none", userSelect: "none", alignmentBaseline: "mathematical", dominantBaseline: "mathematical"}), s10.tabIndex = -1, document.body.appendChild(s10), s10;
}
typeof window != "undefined" && (yn = Mc());
var Ws = "";
var Xr = "";
var Ks = [0, 0];
function qr() {
  Ws = "";
}
function Nn(s10, e14) {
  if (!s10)
    return [16, 32];
  if (!yn)
    return [10, 10];
  if (yn.parent || document.body.appendChild(yn), s10 === Ws && e14 === Xr)
    return Ks;
  Ws = s10, Xr = e14, yn.textContent = s10, yn.style.font = e14;
  let t13 = yn.offsetWidth || 1, n10 = yn.offsetHeight || 1;
  return Ks = [t13, n10], Ks;
}
function Et(s10, e14) {
  let t13 = Utils.getFromCache(e14, s10, () => {
    let [n10, o13] = s10.size;
    return {minX: 0, maxX: n10, minY: 0, maxY: o13, width: n10, height: o13};
  });
  return Utils.translateBounds(t13, s10.point);
}
function wn(s10, e14, {initialShape: t13, transformOrigin: n10, scaleX: o13, scaleY: i10}) {
  if (s10.rotation || t13.isAspectRatioLocked) {
    let a10 = p.toFixed(p.mul(t13.size, Math.min(Math.abs(o13), Math.abs(i10)))), l10 = p.toFixed([e14.minX + (e14.width - s10.size[0]) * (o13 < 0 ? 1 - n10[0] : n10[0]), e14.minY + (e14.height - s10.size[1]) * (i10 < 0 ? 1 - n10[1] : n10[1])]), r12 = o13 < 0 && i10 >= 0 || i10 < 0 && o13 >= 0 ? t13.rotation ? -t13.rotation : 0 : t13.rotation;
    return {size: a10, point: l10, rotation: r12};
  } else
    return {point: p.toFixed([e14.minX, e14.minY]), size: p.toFixed([e14.width, e14.height])};
}
function xn(s10, e14) {
  return {size: p.toFixed([e14.width, e14.height]), point: p.toFixed([e14.minX, e14.minY])};
}
var ea = "  ";
var Ge = class {
  static insertTextFirefox(e14, t13) {
    e14.setRangeText(t13, e14.selectionStart || 0, e14.selectionEnd || 0, "end"), e14.dispatchEvent(new InputEvent("input", {data: t13, inputType: "insertText", isComposing: false}));
  }
  static insert(e14, t13) {
    let n10 = e14.ownerDocument, o13 = n10.activeElement;
    o13 !== e14 && e14.focus(), n10.execCommand("insertText", false, t13) || Ge.insertTextFirefox(e14, t13), o13 === n10.body ? e14.blur() : o13 instanceof HTMLElement && o13 !== e14 && o13.focus();
  }
  static set(e14, t13) {
    e14.select(), Ge.insert(e14, t13);
  }
  static getSelection(e14) {
    let {selectionStart: t13, selectionEnd: n10} = e14;
    return e14.value.slice(t13 || void 0, n10 || void 0);
  }
  static wrapSelection(e14, t13, n10) {
    let {selectionStart: o13, selectionEnd: i10} = e14, a10 = Ge.getSelection(e14);
    Ge.insert(e14, t13 + a10 + (n10 != null ? n10 : t13)), e14.selectionStart = (o13 || 0) + t13.length, e14.selectionEnd = (i10 || 0) + t13.length;
  }
  static replace(e14, t13, n10) {
    let o13 = 0;
    e14.value.replace(t13, (...i10) => {
      let a10 = o13 + i10[i10.length - 2], l10 = i10[0].length;
      e14.selectionStart = a10, e14.selectionEnd = a10 + l10;
      let r12 = typeof n10 == "string" ? n10 : n10(...i10);
      return Ge.insert(e14, r12), e14.selectionStart = a10, o13 += r12.length - l10, r12;
    });
  }
  static findLineEnd(e14, t13) {
    let n10 = e14.lastIndexOf(`
`, t13 - 1) + 1;
    return e14.charAt(n10) !== "	" ? t13 : n10 + 1;
  }
  static indent(e14) {
    var l10;
    let {selectionStart: t13, selectionEnd: n10, value: o13} = e14, i10 = o13.slice(t13, n10), a10 = (l10 = /\n/g.exec(i10)) == null ? void 0 : l10.length;
    if (a10 && a10 > 0) {
      let r12 = o13.lastIndexOf(`
`, t13 - 1) + 1, c10 = e14.value.slice(r12, n10 - 1), p10 = c10.replace(/^|\n/g, `$&${ea}`), u10 = p10.length - c10.length;
      e14.setSelectionRange(r12, n10 - 1), Ge.insert(e14, p10), e14.setSelectionRange(t13 + 1, n10 + u10);
    } else
      Ge.insert(e14, ea);
  }
  static unindent(e14) {
    let {selectionStart: t13, selectionEnd: n10, value: o13} = e14, i10 = o13.lastIndexOf(`
`, t13 - 1) + 1, a10 = Ge.findLineEnd(o13, n10), l10 = e14.value.slice(i10, a10), r12 = l10.replace(/(^|\n)(\t| {1,2})/g, "$1"), c10 = l10.length - r12.length;
    e14.setSelectionRange(i10, a10), Ge.insert(e14, r12);
    let p10 = /\t| {1,2}/.exec(o13.slice(i10, t13)), u10 = p10 ? p10[0].length : 0, h10 = t13 - u10;
    e14.setSelectionRange(t13 - u10, Math.max(h10, n10 - c10));
  }
};
var rt = (s10) => s10.stopPropagation();
var In = Ve.memo(function({font: e14, text: t13, color: n10, offsetX: o13 = 0, offsetY: i10 = 0, scale: a10 = 1, isEditing: l10 = false, onBlur: r12, onChange: c10}) {
  let p10 = Ve.useRef(null), u10 = Ve.useRef(false), h10 = Ve.useCallback((S10) => {
    c10(x7.normalizeText(S10.currentTarget.value));
  }, [c10]), g10 = Ve.useCallback((S10) => {
    if (S10.key === "Escape") {
      S10.preventDefault(), S10.stopPropagation(), r12 == null || r12();
      return;
    }
    if (S10.key === "Tab" && t13.length === 0) {
      S10.preventDefault();
      return;
    }
    if (!(S10.key === "Meta" || S10.metaKey))
      S10.stopPropagation();
    else if (S10.key === "z" && S10.metaKey) {
      S10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), S10.stopPropagation(), S10.preventDefault();
      return;
    }
    (S10.metaKey || S10.ctrlKey) && S10.key === "=" && S10.preventDefault(), S10.key === "Tab" && (S10.preventDefault(), S10.shiftKey ? Ge.unindent(S10.currentTarget) : Ge.indent(S10.currentTarget), c10 == null || c10(x7.normalizeText(S10.currentTarget.value)));
  }, [c10]), m10 = Ve.useCallback((S10) => {
    S10.currentTarget.setSelectionRange(0, 0), r12 == null || r12();
  }, [r12]), T10 = Ve.useCallback((S10) => {
    !l10 || !u10.current || document.activeElement === S10.currentTarget && S10.currentTarget.select();
  }, [l10]), y10 = Ve.useCallback((S10) => {
    l10 && S10.stopPropagation();
  }, [l10]);
  Ve.useEffect(() => {
    l10 ? requestAnimationFrame(() => {
      u10.current = true;
      let S10 = p10.current;
      S10 && (S10.focus(), S10.select());
    }) : r12 == null || r12();
  }, [l10, r12]);
  let b10 = Ve.useRef(null);
  return Ve.useLayoutEffect(() => {
    let S10 = b10.current;
    if (!S10)
      return;
    let w10 = Nn(t13, e14);
    S10.style.transform = `scale(${a10}, ${a10}) translate(${o13}px, ${i10}px)`, S10.style.width = w10[0] + 1 + "px", S10.style.height = w10[1] + 1 + "px";
  }, [t13, e14, i10, o13, a10]), Ve.createElement(Ec, null, Ve.createElement(Rc, {ref: b10, hasText: !!t13, isEditing: l10, style: {font: e14, color: n10}}, l10 ? Ve.createElement(Lc, {ref: p10, style: {font: e14, color: n10}, name: "text", tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, placeholder: "", spellCheck: "true", wrap: "off", dir: "auto", datatype: "wysiwyg", defaultValue: t13, color: n10, onFocus: T10, onChange: h10, onKeyDown: g10, onBlur: m10, onPointerDown: y10, onContextMenu: rt, onCopy: rt, onPaste: rt, onCut: rt}) : t13, "\u200B"));
});
var Ec = M3("div", {position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center", pointerEvents: "none", userSelect: "none", variants: {isGhost: {false: {opacity: 1}, true: {transition: "opacity .2s", opacity: 0.3}}}});
var ta = {whiteSpace: "pre-wrap", overflowWrap: "break-word"};
var Rc = M3("div", f8({position: "absolute", padding: "4px", zIndex: 1, minHeight: 1, minWidth: 1, lineHeight: 1, letterSpacing: Vn, outline: 0, fontWeight: "500", textAlign: "center", backfaceVisibility: "hidden", userSelect: "none", WebkitUserSelect: "none", WebkitTouchCallout: "none", variants: {hasText: {false: {pointerEvents: "none"}, true: {pointerEvents: "all"}}, isEditing: {false: {userSelect: "none"}, true: {background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text"}}}}, ta));
var Lc = M3("textarea", C5(f8({position: "absolute", top: 0, left: 0, zIndex: 1, width: "100%", height: "100%", border: "none", padding: "4px", resize: "none", textAlign: "inherit", minHeight: "inherit", minWidth: "inherit", lineHeight: "inherit", letterSpacing: "inherit", outline: 0, fontWeight: "inherit", overflow: "hidden", backfaceVisibility: "hidden", display: "inline-block", pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text", fontSmooth: "always", WebkitFontSmoothing: "subpixel-antialiased", MozOsxFontSmoothing: "auto"}, ta), {"&:focus": {outline: "none", border: "none"}}));
var he = class extends TLShapeUtil {
  constructor() {
    super(...arguments);
    d8(this, "canBind", false);
    d8(this, "canEdit", false);
    d8(this, "canClone", false);
    d8(this, "isAspectRatioLocked", false);
    d8(this, "hideResizeHandles", false);
    d8(this, "bindingDistance", 16);
    d8(this, "hitTestPoint", (e14, t13) => Utils.pointInBounds(t13, this.getRotatedBounds(e14)));
    d8(this, "hitTestLineSegment", (e14, t13, n10) => {
      let o13 = Utils.getBoundsFromPoints([t13, n10]), i10 = this.getBounds(e14);
      return Utils.boundsContain(i10, o13) || e14.rotation ? intersectLineSegmentPolyline(t13, n10, Utils.getRotatedCorners(this.getBounds(e14))).didIntersect : intersectLineSegmentBounds(t13, n10, this.getBounds(e14)).length > 0;
    });
    d8(this, "create", (e14) => (this.refMap.set(e14.id, na.createRef()), this.getShape(e14)));
    d8(this, "getCenter", (e14) => Utils.getBoundsCenter(this.getBounds(e14)));
    d8(this, "getExpandedBounds", (e14) => Utils.expandBounds(this.getBounds(e14), this.bindingDistance));
    d8(this, "getBindingPoint", (e14, t13, n10, o13, i10, a10) => {
      let l10 = this.getBounds(e14), r12 = this.getExpandedBounds(e14);
      if (!Utils.pointInBounds(n10, r12))
        return;
      let c10 = intersectRayBounds(o13, i10, r12).filter((y10) => y10.didIntersect).map((y10) => y10.points[0]);
      if (!c10.length)
        return;
      let p10 = this.getCenter(e14), u10 = c10.sort((y10, b10) => e.dist(b10, o13) - e.dist(y10, o13))[0], h10 = e.med(n10, u10), g10, m10;
      a10 ? (g10 = e.dist(n10, p10) < 16 / 2 ? p10 : n10, m10 = 0) : (e.distanceToLineSegment(n10, h10, p10) < 16 / 2 ? g10 = p10 : g10 = h10, Utils.pointInBounds(n10, l10) ? m10 = this.bindingDistance : m10 = Math.max(this.bindingDistance, Utils.getBoundsSides(l10).map((y10) => e.distanceToLineSegment(y10[1][0], y10[1][1], n10)).sort((y10, b10) => y10 - b10)[0]));
      let T10 = e.divV(e.sub(g10, [r12.minX, r12.minY]), [r12.width, r12.height]);
      return {point: e.clampV(T10, 0, 1), distance: m10};
    });
    d8(this, "mutate", (e14, t13) => t13);
    d8(this, "transform", (e14, t13, n10) => C5(f8({}, e14), {point: [t13.minX, t13.minY]}));
    d8(this, "transformSingle", (e14, t13, n10) => this.transform(e14, t13, n10));
    d8(this, "updateChildren");
    d8(this, "onChildrenChange");
    d8(this, "onHandleChange");
    d8(this, "onRightPointHandle");
    d8(this, "onDoubleClickHandle");
    d8(this, "onDoubleClickBoundsHandle");
    d8(this, "onSessionComplete");
    d8(this, "getSvgElement", (e14, t13) => {
      var o13;
      let n10 = (o13 = document.getElementById(e14.id + "_svg")) == null ? void 0 : o13.cloneNode(true);
      if (!!n10) {
        if ("label" in e14 && e14.label) {
          let i10 = e14, a10 = document.createElementNS("http://www.w3.org/2000/svg", "g"), l10 = this.getBounds(e14), r12 = no(i10.label, e14.style, l10);
          r12.setAttribute("fill", le2(e14.style, t13).stroke);
          let c10 = wt(e14.style), p10 = Nn(i10.label, c10);
          return r12.setAttribute("transform-origin", "top left"), r12.setAttribute("transform", `translate(${l10.width / 2}, ${(l10.height - p10[1]) / 2})`), a10.setAttribute("text-align", "center"), a10.setAttribute("text-anchor", "middle"), a10.appendChild(n10), a10.appendChild(r12), a10;
        }
        return n10;
      }
    });
  }
};
function Uc(s10, e14, t13) {
  let n10 = le2(e14), o13 = Utils.rng(s10), i10 = n10.strokeWidth, a10 = Math.max(0, t13[0]), l10 = Math.max(0, t13[1]), r12 = Array.from(Array(4)).map(() => [o13() * i10 * 0.75, o13() * i10 * 0.75]), c10 = p.add([i10 / 2, i10 / 2], r12[0]), p10 = p.add([a10 - i10 / 2, i10 / 2], r12[1]), u10 = p.add([a10 - i10 / 2, l10 - i10 / 2], r12[2]), h10 = p.add([i10 / 2, l10 - i10 / 2], r12[3]), g10 = Math.round(Math.abs(o13() * 2 * 4)), m10 = Math.min(a10 / 4, i10 * 2), T10 = Math.min(l10 / 4, i10 * 2), y10 = Math.max(8, Math.floor(a10 / 16)), b10 = Math.max(8, Math.floor(l10 / 16)), S10 = Utils.rotateArray([p.pointsBetween(p.add(c10, [m10, 0]), p.sub(p10, [m10, 0]), y10), p.pointsBetween(p.add(p10, [0, T10]), p.sub(u10, [0, T10]), b10), p.pointsBetween(p.sub(u10, [m10, 0]), p.add(h10, [m10, 0]), y10), p.pointsBetween(p.sub(h10, [0, T10]), p.add(c10, [0, T10]), b10)], g10);
  return {points: [...S10.flat(), ...S10[0]].slice(5, Math.floor((g10 % 2 === 0 ? y10 : b10) / -2) + 3)};
}
function oa(s10, e14, t13) {
  let {points: n10} = Uc(s10, e14, t13), {strokeWidth: o13} = le2(e14);
  return {points: n10, options: {size: o13, thinning: 0.65, streamline: 0.3, smoothing: 1, simulatePressure: false, last: true}};
}
function sa(s10, e14, t13) {
  let {points: n10, options: o13} = oa(s10, e14, t13), i10 = Te(n10, o13);
  return Utils.getSvgPathFromStroke(i10);
}
function rs(s10, e14, t13) {
  let {points: n10, options: o13} = oa(s10, e14, t13), i10 = me(n10, o13);
  return Utils.getSvgPathFromStroke(i10.map((a10) => a10.point.slice(0, 2)), false);
}
var ia = dn.memo(function({id: e14, style: t13, size: n10, isSelected: o13, isDarkMode: i10}) {
  let {isFilled: a10} = t13, {stroke: l10, strokeWidth: r12, fill: c10} = le2(t13, i10), p10 = sa(e14, t13, n10), u10 = rs(e14, t13, n10);
  return dn.createElement(dn.Fragment, null, dn.createElement("path", {className: t13.isFilled || o13 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: u10}), a10 && dn.createElement("path", {d: u10, fill: c10, pointerEvents: "none"}), dn.createElement("path", {d: p10, fill: l10, stroke: l10, strokeWidth: r12, pointerEvents: "none"}));
});
var ra = _t.memo(function({id: e14, style: t13, size: n10, isSelected: o13, isDarkMode: i10}) {
  let {stroke: a10, strokeWidth: l10, fill: r12} = le2(t13, i10), c10 = 1 + l10 * 1.618, p10 = Math.max(0, n10[0] - c10 / 2), u10 = Math.max(0, n10[1] - c10 / 2), g10 = [[[c10 / 2, c10 / 2], [p10, c10 / 2], p10 - c10 / 2], [[p10, c10 / 2], [p10, u10], u10 - c10 / 2], [[p10, u10], [c10 / 2, u10], p10 - c10 / 2], [[c10 / 2, u10], [c10 / 2, c10 / 2], u10 - c10 / 2]].map(([m10, T10, y10], b10) => {
    let {strokeDasharray: S10, strokeDashoffset: w10} = Utils.getPerfectDashProps(y10, l10 * 1.618, t13.dash);
    return _t.createElement("line", {key: e14 + "_" + b10, x1: m10[0], y1: m10[1], x2: T10[0], y2: T10[1], strokeDasharray: S10, strokeDashoffset: w10});
  });
  return _t.createElement(_t.Fragment, null, _t.createElement("rect", {className: o13 || t13.isFilled ? "tl-fill-hitarea" : "tl-stroke-hitarea", x: c10 / 2, y: c10 / 2, width: p10, height: u10, strokeWidth: 16}), t13.isFilled && _t.createElement("rect", {x: c10 / 2, y: c10 / 2, width: p10, height: u10, fill: r12, pointerEvents: "none"}), _t.createElement("g", {pointerEvents: "none", stroke: a10, strokeWidth: c10, strokeLinecap: "round"}, g10));
});
function da({strokeWidth: s10, size: e14}) {
  return aa.createElement("rect", {className: "tl-binding-indicator", x: s10, y: s10, width: Math.max(0, e14[0] - s10 / 2), height: Math.max(0, e14[1] - s10 / 2), strokeWidth: 16 * 2});
}
var _s = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "rectangle");
    d8(this, "canBind", true);
    d8(this, "canClone", true);
    d8(this, "canEdit", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "rectangle", name: "Rectangle", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: Ye, label: "", labelPoint: [0.5, 0.5]}, e14));
    d8(this, "Component", he.Component(({shape: e14, isEditing: t13, isBinding: n10, isSelected: o13, isGhost: i10, meta: a10, bounds: l10, events: r12, onShapeBlur: c10, onShapeChange: p10}, u10) => {
      let {id: h10, size: g10, style: m10, label: T10 = "", labelPoint: y10 = qn} = e14, b10 = wt(m10), S10 = le2(m10, a10.isDarkMode), w10 = m10.dash === "draw" ? ia : ra, D10 = Yt.useCallback((B10) => p10 == null ? void 0 : p10({id: h10, label: B10}), [p10]);
      return Yt.createElement(Nc, f8({ref: u10}, r12), Yt.createElement(In, {isEditing: t13, onChange: D10, onBlur: c10, font: b10, text: T10, color: S10.stroke, offsetX: (y10[0] - 0.5) * l10.width, offsetY: (y10[1] - 0.5) * l10.height}), Yt.createElement(SVGContainer, {id: e14.id + "_svg", opacity: i10 ? 0.3 : 1}, n10 && Yt.createElement(da, {strokeWidth: S10.strokeWidth, size: g10}), Yt.createElement(w10, {id: h10, style: m10, size: g10, isSelected: o13, isDarkMode: a10.isDarkMode})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {id: t13, style: n10, size: o13} = e14, a10 = le2(n10, false).strokeWidth;
      return n10.dash === "draw" ? Yt.createElement("path", {d: rs(t13, n10, o13)}) : Yt.createElement("rect", {x: a10, y: a10, rx: 1, ry: 1, width: Math.max(1, o13[0] - a10 * 2), height: Math.max(1, o13[1] - a10 * 2)});
    }));
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style || t13.label !== e14.label);
    d8(this, "transform", wn);
    d8(this, "transformSingle", xn);
  }
};
var Nc = M3("div", {width: "100%", height: "100%"});
var as = Math.PI * 2;
var kt = class {
  static inwardEdgeNormal(e14) {
    let t13 = p.sub(e14[1], e14[0]), n10 = p.len2(t13);
    return [-t13[0] / n10, t13[1] / n10];
  }
  static outwardEdgeNormal(e14) {
    return p.neg(kt.inwardEdgeNormal(e14));
  }
  static isReflexVertex(e14, t13) {
    let n10 = e14.length, o13 = e14[(t13 + n10 - 1) % n10], i10 = e14[t13], a10 = e14[(t13 + 1) % n10];
    return kt.leftSide(o13, a10, i10) < 0;
  }
  static getEdges(e14) {
    return e14.map((t13, n10) => [t13, e14[(n10 + 1) % e14.length]]);
  }
  static edgesIntersection([e14, t13], [n10, o13]) {
    let i10 = (o13[1] - n10[1]) * (t13[0] - e14[0]) - (o13[0] - n10[0]) * (t13[1] - e14[1]);
    if (i10 == 0)
      return null;
    let a10 = ((o13[0] - n10[0]) * (e14[1] - n10[1]) - (o13[1] - n10[1]) * (e14[0] - n10[0])) / i10, l10 = ((t13[0] - e14[0]) * (e14[1] - n10[1]) - (t13[1] - e14[1]) * (e14[0] - n10[0])) / i10;
    return a10 < 0 || l10 < 0 || a10 > 1 || l10 > 1 ? null : [e14[0] + a10 * (t13[0] - e14[0]), e14[1] + a10 * (t13[1] - e14[1])];
  }
  static appendArc(e14, t13, n10, o13, i10, a10 = false) {
    let l10 = [...e14], r12 = Math.atan2(o13[1] - t13[1], o13[0] - t13[0]), c10 = Math.atan2(i10[1] - t13[1], i10[0] - t13[0]);
    r12 < 0 && (r12 += as), c10 < 0 && (c10 += as);
    let p10 = 5, u10 = r12 > c10 ? r12 - c10 : r12 + as - c10, h10 = (a10 ? -u10 : as - u10) / p10;
    l10.push(o13);
    for (let g10 = 1; g10 < p10; ++g10) {
      let m10 = r12 + h10 * g10;
      l10.push([t13[0] + Math.cos(m10) * n10, t13[1] + Math.sin(m10) * n10]);
    }
    return l10.push(i10), l10;
  }
  static createOffsetEdge(e14, t13) {
    return e14.map((n10) => p.add(n10, t13));
  }
  static getOffsetPolygon(e14, t13 = 0) {
    let n10 = kt.getEdges(e14), o13 = n10.map((a10) => kt.createOffsetEdge(a10, p.mul(kt.outwardEdgeNormal(a10), t13))), i10 = [];
    for (let a10 = 0; a10 < o13.length; a10++) {
      let l10 = o13[a10], r12 = o13[(a10 + o13.length - 1) % o13.length], c10 = kt.edgesIntersection(r12, l10);
      c10 ? i10.push(c10) : kt.appendArc(i10, n10[a10][0], t13, r12[1], l10[0], false);
    }
    return i10;
  }
  static createPaddingPolygon(e14, t13 = 0) {
    let n10 = e14.map((i10) => kt.createOffsetEdge(i10, kt.inwardEdgeNormal(i10))), o13 = [];
    for (let i10 = 0; i10 < n10.length; i10++) {
      let a10 = n10[i10], l10 = n10[(i10 + n10.length - 1) % n10.length], r12 = kt.edgesIntersection(l10, a10);
      r12 ? o13.push(r12) : kt.appendArc(o13, e14[i10][0], t13, l10[1], a10[0], true);
    }
    return o13;
  }
};
var la = kt;
d8(la, "leftSide", p.isLeft);
function ca(s10, e14) {
  if (s10.length < 3)
    throw Error("Polygon must have at least 3 points");
  let t13 = s10.length;
  return s10.map((n10, o13) => [n10, s10[(o13 + 1) % t13]]).map(([n10, o13]) => {
    let i10 = p.mul(p.per(p.uni(p.sub(o13, n10))), e14);
    return [p.add(n10, i10), p.add(o13, i10)];
  }).map((n10, o13, i10) => {
    let a10 = intersectLineLine(n10, i10[(o13 + 1) % i10.length]);
    if (a10 === void 0)
      throw Error("Expected an intersection");
    return a10;
  });
}
function Ft(s10, e14 = 0, t13 = 0) {
  let [n10, o13] = s10, i10 = [[n10 / 2, 0], [n10, o13], [0, o13]];
  return e14 && (i10 = ca(i10, e14)), t13 && (i10 = i10.map((a10) => p.rotWith(a10, [n10 / 2, o13 / 2], t13))), i10;
}
function Ys(s10) {
  let [e14, t13] = s10, n10 = [[e14 / 2, 0], [e14, t13], [0, t13]];
  return [(n10[0][0] + n10[1][0] + n10[2][0]) / 3, (n10[0][1] + n10[1][1] + n10[2][1]) / 3];
}
function Yc(s10, e14, t13) {
  let [n10, o13] = e14, i10 = Utils.rng(s10), a10 = Array.from(Array(3)).map(() => [i10() * t13 * 0.75, i10() * t13 * 0.75]), l10 = [p.add([n10 / 2, 0], a10[0]), p.add([n10, o13], a10[1]), p.add([0, o13], a10[2])], r12 = Math.round(Math.abs(i10() * 2 * 3)), c10 = Utils.rotateArray([p.pointsBetween(l10[0], l10[1], 32), p.pointsBetween(l10[1], l10[2], 32), p.pointsBetween(l10[2], l10[0], 32)], r12);
  return {points: [...c10.flat(), ...c10[0]]};
}
function pa(s10, e14, t13) {
  let {strokeWidth: n10} = le2(t13), {points: o13} = Yc(s10, e14, n10);
  return {points: o13, options: {size: n10, thinning: 0.65, streamline: 0.3, smoothing: 1, simulatePressure: false, last: true}};
}
function ua(s10, e14, t13) {
  let {points: n10, options: o13} = pa(s10, e14, t13), i10 = Te(n10, o13);
  return Utils.getSvgPathFromStroke(i10);
}
function ha(s10, e14, t13) {
  let {points: n10, options: o13} = pa(s10, e14, t13), i10 = me(n10, o13);
  return Utils.getSvgPathFromStroke(i10.map((a10) => a10.point.slice(0, 2)), false);
}
var ma = ln.memo(function({id: e14, size: t13, style: n10, isSelected: o13, isDarkMode: i10}) {
  let {stroke: a10, strokeWidth: l10, fill: r12} = le2(n10, i10), c10 = ua(e14, t13, n10), p10 = ha(e14, t13, n10);
  return ln.createElement(ln.Fragment, null, ln.createElement("path", {className: n10.isFilled || o13 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: p10}), n10.isFilled && ln.createElement("path", {d: p10, fill: r12, pointerEvents: "none"}), ln.createElement("path", {d: c10, fill: a10, stroke: a10, strokeWidth: l10, pointerEvents: "none"}));
});
var fa = Zt.memo(function({id: e14, size: t13, style: n10, isSelected: o13, isDarkMode: i10}) {
  let {stroke: a10, strokeWidth: l10, fill: r12} = le2(n10, i10), c10 = 1 + l10 * 1.618, p10 = Ft(t13), h10 = Utils.pointsToLineSegments(p10, true).map(([m10, T10], y10) => {
    let {strokeDasharray: b10, strokeDashoffset: S10} = Utils.getPerfectDashProps(p.dist(m10, T10), l10 * 1.618, n10.dash);
    return Zt.createElement("line", {key: e14 + "_" + y10, x1: m10[0], y1: m10[1], x2: T10[0], y2: T10[1], stroke: a10, strokeWidth: c10, strokeLinecap: "round", strokeDasharray: b10, strokeDashoffset: S10});
  }), g10 = p10.join();
  return Zt.createElement(Zt.Fragment, null, Zt.createElement("polygon", {className: n10.isFilled || o13 ? "tl-fill-hitarea" : "tl-stroke-hitarea", points: g10}), n10.isFilled && Zt.createElement("polygon", {fill: r12, points: g10, pointerEvents: "none"}), Zt.createElement("g", {pointerEvents: "stroke"}, h10));
});
function Ta({size: s10}) {
  let e14 = Ft(s10).join();
  return Sa.createElement("polygon", {className: "tl-binding-indicator", points: e14, strokeWidth: 16 * 2});
}
var Zs = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "triangle");
    d8(this, "canBind", true);
    d8(this, "canClone", true);
    d8(this, "canEdit", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "triangle", name: "Triangle", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: Ye, label: "", labelPoint: [0.5, 0.5]}, e14));
    d8(this, "Component", he.Component(({shape: e14, bounds: t13, isBinding: n10, isEditing: o13, isSelected: i10, isGhost: a10, meta: l10, events: r12, onShapeChange: c10, onShapeBlur: p10}, u10) => {
      let {id: h10, label: g10 = "", size: m10, style: T10, labelPoint: y10 = qn} = e14, b10 = wt(T10), S10 = le2(T10, l10.isDarkMode), w10 = T10.dash === "draw" ? ma : fa, D10 = jt.useCallback((I10) => c10 == null ? void 0 : c10({id: h10, label: I10}), [c10]), B10 = jt.useMemo(() => {
        let I10 = p.div(m10, 2);
        return (Ys(m10)[1] - I10[1]) * 0.72;
      }, [m10]);
      return jt.createElement(ep, f8({ref: u10}, r12), jt.createElement(In, {font: b10, text: g10, color: S10.stroke, offsetX: (y10[0] - 0.5) * t13.width, offsetY: B10 + (y10[1] - 0.5) * t13.height, isEditing: o13, onChange: D10, onBlur: p10}), jt.createElement(SVGContainer, {id: e14.id + "_svg", opacity: a10 ? 0.3 : 1}, n10 && jt.createElement(Ta, {size: m10}), jt.createElement(w10, {id: h10, style: T10, size: m10, isSelected: i10, isDarkMode: l10.isDarkMode})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {size: t13} = e14;
      return jt.createElement("polygon", {points: Ft(t13).join()});
    }));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style || t13.label !== e14.label);
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "getExpandedBounds", (e14) => Utils.getBoundsFromPoints(Ft(e14.size, this.bindingDistance).map((t13) => p.add(t13, e14.point))));
    d8(this, "hitTestLineSegment", (e14, t13, n10) => intersectLineSegmentPolyline(t13, n10, this.getPoints(e14)).didIntersect);
    d8(this, "hitTestBounds", (e14, t13) => Utils.boundsContained(this.getBounds(e14), t13) || intersectBoundsPolygon(t13, this.getPoints(e14)).length > 0);
    d8(this, "getBindingPoint", (e14, t13, n10, o13, i10, a10) => {
      let l10 = this.getExpandedBounds(e14);
      if (!Utils.pointInBounds(n10, l10))
        return;
      let r12 = Ft(e14.size).map((S10) => p.add(S10, e14.point)), c10 = Ft(e14.size, this.bindingDistance).map((S10) => p.add(S10, e14.point)), p10 = Utils.pointsToLineSegments(r12, true).map(([S10, w10]) => p.distanceToLineSegment(S10, w10, n10)).sort((S10, w10) => S10 - w10)[0];
      if (!(Utils.pointInPolygon(n10, c10) || p10 < this.bindingDistance))
        return;
      let u10 = Utils.pointsToLineSegments(c10.concat([c10[0]])).map((S10) => intersectRayLineSegment(o13, i10, S10[0], S10[1])).filter((S10) => S10.didIntersect).flatMap((S10) => S10.points);
      if (!u10.length)
        return;
      let h10 = p.add(Ys(e14.size), e14.point), g10 = u10.sort((S10, w10) => p.dist(w10, o13) - p.dist(S10, o13))[0], m10 = p.med(n10, g10), T10, y10;
      a10 ? (T10 = p.dist(n10, h10) < 16 / 2 ? h10 : n10, y10 = 0) : (p.distanceToLineSegment(n10, m10, h10) < 16 / 2 ? T10 = h10 : T10 = m10, Utils.pointInPolygon(n10, r12) ? y10 = this.bindingDistance : y10 = Math.max(this.bindingDistance, p10));
      let b10 = p.divV(p.sub(T10, [l10.minX, l10.minY]), [l10.width, l10.height]);
      return {point: p.clampV(b10, 0, 1), distance: y10};
    });
    d8(this, "transform", wn);
    d8(this, "transformSingle", xn);
  }
  getPoints(e14) {
    let {rotation: t13 = 0, point: [n10, o13], size: [i10, a10]} = e14;
    return [[n10 + i10 / 2, o13], [n10, o13 + a10], [n10 + i10, o13 + a10]].map((l10) => p.rotWith(l10, this.getCenter(e14), t13));
  }
};
var ep = M3("div", {width: "100%", height: "100%"});
function ba(s10, e14, t13) {
  let {strokeWidth: n10} = le2(t13), o13 = Utils.rng(s10), i10 = e14[0] + o13() * n10 * 2, a10 = e14[1] + o13() * n10 * 2, l10 = Utils.perimeterOfEllipse(i10, a10), r12 = [], c10 = Math.PI + Math.PI * o13(), p10 = Math.abs(o13()), u10 = Math.max(16, l10 / 10);
  for (let h10 = 0; h10 < u10; h10++) {
    let g10 = $n.easeInOutSine(h10 / (u10 + 1)), m10 = c10 * 2 + Math.PI * (2 + p10) * g10, T10 = Math.cos(m10), y10 = Math.sin(m10);
    r12.push([i10 * T10 + e14[0], a10 * y10 + e14[1], g10 + 0.5 + o13() / 2]);
  }
  return me(r12, {size: 1 + n10 * 2, thinning: 0.618, end: {taper: l10 / 8}, start: {taper: l10 / 12}, streamline: 0, simulatePressure: true});
}
function ya(s10, e14, t13) {
  let {strokeWidth: n10} = le2(t13), o13 = Utils.rng(s10), i10 = e14[0] + o13() * n10 * 2, a10 = e14[1] + o13() * n10 * 2, l10 = Utils.perimeterOfEllipse(i10, a10);
  return Utils.getSvgPathFromStroke(ie(ba(s10, e14, t13), {size: 2 + n10 * 2, thinning: 0.618, end: {taper: l10 / 8}, start: {taper: l10 / 12}, streamline: 0, simulatePressure: true}));
}
function ls(s10, e14, t13) {
  return Utils.getSvgPathFromStroke(ba(s10, e14, t13).map((n10) => n10.point.slice(0, 2)), false);
}
var wa = cn.memo(function({id: e14, radius: t13, style: n10, isSelected: o13, isDarkMode: i10}) {
  let {stroke: a10, strokeWidth: l10, fill: r12} = le2(n10, i10), c10 = ya(e14, t13, n10);
  return cn.createElement(cn.Fragment, null, cn.createElement("ellipse", {className: n10.isFilled || o13 ? "tl-fill-hitarea" : "tl-stroke-hitarea", cx: t13[0], cy: t13[1], rx: t13[0], ry: t13[1]}), n10.isFilled && cn.createElement("path", {d: ls(e14, t13, n10), stroke: "none", fill: r12, pointerEvents: "none"}), cn.createElement("path", {d: c10, fill: a10, stroke: a10, strokeWidth: l10, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round"}));
});
var Ia = vn.memo(function({radius: e14, style: t13, isSelected: n10, isDarkMode: o13}) {
  let {stroke: i10, strokeWidth: a10, fill: l10} = le2(t13, o13), r12 = 1 + a10 * 1.618, c10 = Math.max(0, e14[0] - r12 / 2), p10 = Math.max(0, e14[1] - r12 / 2), u10 = Utils.perimeterOfEllipse(c10, p10), {strokeDasharray: h10, strokeDashoffset: g10} = Utils.getPerfectDashProps(u10 < 64 ? u10 * 2 : u10, a10 * 1.618, t13.dash, 4);
  return vn.createElement(vn.Fragment, null, vn.createElement("ellipse", {className: t13.isFilled || n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", cx: e14[0], cy: e14[1], rx: e14[0], ry: e14[1]}), vn.createElement("ellipse", {cx: e14[0], cy: e14[1], rx: c10, ry: p10, fill: l10, stroke: i10, strokeWidth: r12, strokeDasharray: h10, strokeDashoffset: g10, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round"}));
});
var qs = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "ellipse");
    d8(this, "canBind", true);
    d8(this, "canClone", true);
    d8(this, "canEdit", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "ellipse", name: "Ellipse", parentId: "page", childIndex: 1, point: [0, 0], radius: [1, 1], rotation: 0, style: Ye, label: "", labelPoint: [0.5, 0.5]}, e14));
    d8(this, "Component", he.Component(({shape: e14, isGhost: t13, isSelected: n10, isBinding: o13, isEditing: i10, meta: a10, bounds: l10, events: r12, onShapeChange: c10, onShapeBlur: p10}, u10) => {
      let {id: h10, radius: g10, style: m10, label: T10 = "", labelPoint: y10 = qn} = e14, b10 = wt(e14.style), S10 = le2(m10, a10.isDarkMode), w10 = S10.strokeWidth, D10 = 1 + w10 * 1.618, B10 = Math.max(0, g10[0] - D10 / 2), I10 = Math.max(0, g10[1] - D10 / 2), P10 = m10.dash === "draw" ? wa : Ia, v10 = Xt.useCallback((Q) => c10 == null ? void 0 : c10({id: h10, label: Q}), [c10]);
      return Xt.createElement(rp, f8({ref: u10}, r12), Xt.createElement(In, {isEditing: i10, onChange: v10, onBlur: p10, font: b10, text: T10, color: S10.stroke, offsetX: (y10[0] - 0.5) * l10.width, offsetY: (y10[1] - 0.5) * l10.height}), Xt.createElement(SVGContainer, {id: e14.id + "_svg", opacity: t13 ? 0.3 : 1}, o13 && Xt.createElement("ellipse", {className: "tl-binding-indicator", cx: g10[0], cy: g10[1], rx: B10, ry: I10, strokeWidth: this.bindingDistance}), Xt.createElement(P10, {id: h10, radius: g10, style: m10, isSelected: n10, isDarkMode: a10.isDarkMode})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {id: t13, radius: n10, style: o13} = e14, a10 = le2(o13).strokeWidth, l10 = 1 + a10 * 1.618, r12 = Math.max(0, n10[0] - l10 / 2), c10 = Math.max(0, n10[1] - l10 / 2);
      return o13.dash === "draw" ? Xt.createElement("path", {d: ls(t13, n10, o13)}) : Xt.createElement("ellipse", {cx: n10[0], cy: n10[1], rx: r12, ry: c10});
    }));
    d8(this, "hitTestPoint", (e14, t13) => Utils.pointInBounds(t13, this.getRotatedBounds(e14)) && Utils.pointInEllipse(t13, this.getCenter(e14), e14.radius[0], e14.radius[1], e14.rotation || 0));
    d8(this, "hitTestLineSegment", (e14, t13, n10) => intersectLineSegmentEllipse(t13, n10, this.getCenter(e14), e14.radius[0], e14.radius[1], e14.rotation || 0).didIntersect);
    d8(this, "getBounds", (e14) => Utils.getFromCache(this.boundsCache, e14, () => Utils.getRotatedEllipseBounds(e14.point[0], e14.point[1], e14.radius[0], e14.radius[1], 0)));
    d8(this, "getRotatedBounds", (e14) => Utils.getRotatedEllipseBounds(e14.point[0], e14.point[1], e14.radius[0], e14.radius[1], e14.rotation));
    d8(this, "hitTestBounds", (e14, t13) => {
      let n10 = this.getBounds(e14);
      return Utils.boundsContained(n10, t13) || intersectEllipseBounds(this.getCenter(e14), e14.radius[0], e14.radius[1], e14.rotation || 0, t13).length > 0;
    });
    d8(this, "shouldRender", (e14, t13) => t13.radius !== e14.radius || t13.style !== e14.style || t13.label !== e14.label);
    d8(this, "getCenter", (e14) => e.add(e14.point, e14.radius));
    d8(this, "getBindingPoint", (e14, t13, n10, o13, i10, a10) => {
      {
        let l10 = this.getExpandedBounds(e14), r12 = this.getCenter(e14), c10, p10;
        if (!Utils.pointInEllipse(n10, r12, e14.radius[0] + this.bindingDistance, e14.radius[1] + this.bindingDistance))
          return;
        if (a10)
          e.dist(n10, this.getCenter(e14)) < 12 ? c10 = [0.5, 0.5] : c10 = e.divV(e.sub(n10, [l10.minX, l10.minY]), [l10.width, l10.height]), p10 = 0;
        else {
          let u10 = intersectRayEllipse(o13, i10, r12, e14.radius[0], e14.radius[1], e14.rotation || 0).points.sort((g10, m10) => e.dist(g10, o13) - e.dist(m10, o13))[0];
          if (u10 || (u10 = intersectLineSegmentEllipse(n10, r12, r12, e14.radius[0], e14.radius[1], e14.rotation || 0).points.sort((g10, m10) => e.dist(g10, n10) - e.dist(m10, n10))[0]), !u10)
            return;
          let h10 = e.med(n10, u10);
          if (e.distanceToLineSegment(n10, h10, this.getCenter(e14)) < 12 ? c10 = [0.5, 0.5] : c10 = e.divV(e.sub(h10, [l10.minX, l10.minY]), [l10.width, l10.height]), Utils.pointInEllipse(n10, r12, e14.radius[0], e14.radius[1], e14.rotation || 0))
            p10 = this.bindingDistance / 2;
          else {
            let g10 = intersectLineSegmentEllipse(n10, r12, r12, e14.radius[0], e14.radius[1], e14.rotation || 0).points[0];
            if (!g10)
              return;
            p10 = Math.max(this.bindingDistance / 2, e.dist(n10, g10));
          }
        }
        return {point: c10, distance: p10};
      }
    });
    d8(this, "transform", (e14, t13, {scaleX: n10, scaleY: o13, initialShape: i10}) => {
      let {rotation: a10 = 0} = i10;
      return {point: [t13.minX, t13.minY], radius: [t13.width / 2, t13.height / 2], rotation: n10 < 0 && o13 >= 0 || o13 < 0 && n10 >= 0 ? -(a10 || 0) : a10 || 0};
    });
    d8(this, "transformSingle", (e14, t13) => ({point: e.toFixed([t13.minX, t13.minY]), radius: e.div([t13.width, t13.height], 2)}));
  }
};
var rp = M3("div", {width: "100%", height: "100%"});
function Da(s10, e14, t13, n10) {
  return ["M", s10[0], s10[1], "A", t13[2], t13[2], 0, 0, n10 < 0 ? 0 : 1, e14[0], e14[1]].join(" ");
}
function cs(s10, e14) {
  let {start: t13, end: n10} = s10, o13 = p.dist(t13.point, n10.point), i10 = p.med(t13.point, n10.point), a10 = o13 / 2 * e14, l10 = p.uni(p.vec(t13.point, n10.point));
  return p.toFixed(Math.abs(a10) < 10 ? i10 : p.add(i10, p.mul(p.per(l10), a10)));
}
function Pa(s10, e14, t13, n10, o13, i10) {
  let a10 = Utils.rng(s10), l10 = le2(e14).strokeWidth, r12 = o13 ? p.nudge(t13, n10, l10) : t13, c10 = i10 ? p.nudge(n10, t13, l10) : n10, p10 = Te([r12, c10], {size: l10, thinning: 0.618 + a10() * 0.2, easing: $n.easeOutQuad, simulatePressure: true, streamline: 0, last: true});
  return Utils.getSvgPathFromStroke(p10);
}
function Ba(s10, e14, t13, n10, o13, i10, a10, l10, r12, c10) {
  let p10 = Utils.rng(s10), u10 = le2(e14).strokeWidth, h10 = o13 ? p.rotWith(t13, a10, u10 / r12) : t13, g10 = i10 ? p.rotWith(n10, a10, -(u10 / r12)) : n10, m10 = p.angle(a10, h10), T10 = p.angle(a10, g10), y10 = [], b10 = 8 + Math.floor(Math.abs(r12) / 20 * 1 + p10() / 2);
  for (let w10 = 0; w10 < b10; w10++) {
    let D10 = c10(w10 / b10), B10 = Utils.lerpAngles(m10, T10, D10);
    y10.push(p.toFixed(p.nudgeAtAngle(a10, B10, l10)));
  }
  let S10 = Te([h10, ...y10, g10], {size: 1 + u10, thinning: 0.618 + p10() * 0.2, easing: $n.easeOutQuad, simulatePressure: false, streamline: 0, last: true});
  return Utils.getSvgPathFromStroke(S10);
}
function Dn(s10, e14, t13) {
  return Utils.circleFromThreePoints(s10, t13, e14);
}
function ps(s10, e14, t13, n10, o13) {
  let i10 = intersectCircleCircle(s10, e14 * 0.618, t13, n10).points;
  if (!i10)
    return x7.warn("Could not find an intersection for the arrow head."), {left: s10, right: s10};
  let a10 = o13 ? i10[0] : i10[1], l10 = a10 ? p.nudge(p.rotWith(a10, s10, Math.PI / 6), s10, e14 * -0.382) : s10, r12 = a10 ? p.nudge(p.rotWith(a10, s10, -Math.PI / 6), s10, e14 * -0.382) : s10;
  return {left: l10, right: r12};
}
function us(s10, e14, t13) {
  let n10 = intersectCircleLineSegment(s10, t13, s10, e14).points;
  if (!n10)
    return x7.warn("Could not find an intersection for the arrow head."), {left: s10, right: s10};
  let o13 = n10[0], i10 = o13 ? p.rotWith(o13, s10, Math.PI / 6) : s10, a10 = o13 ? p.rotWith(o13, s10, -Math.PI / 6) : s10;
  return {left: i10, right: a10};
}
function Ca(s10, e14, t13, n10, o13) {
  let {left: i10, right: a10} = ps(s10, e14, t13, n10, o13);
  return `M ${i10} L ${s10} ${a10}`;
}
function va(s10, e14, t13) {
  let {left: n10, right: o13} = us(s10, e14, t13);
  return `M ${n10} L ${s10} ${o13}`;
}
function Ma(s10, e14, t13, n10, o13, i10) {
  let {strokeWidth: a10} = le2(s10, false), l10 = p.dist(e14, n10), r12 = Math.min(l10 / 3, a10 * 8), c10 = [];
  if (p.dist(t13, p.toFixed(p.med(e14, n10))) < 1)
    c10.push(`M ${e14} L ${n10}`), o13 && c10.push(va(e14, n10, r12)), i10 && c10.push(va(n10, e14, r12));
  else {
    let u10 = Dn(e14, t13, n10), h10 = [u10[0], u10[1]], g10 = u10[2], m10 = so(h10, g10, e14, n10);
    c10.push(`M ${e14} A ${g10} ${g10} 0 0 ${m10 > 0 ? "1" : "0"} ${n10}`), o13 && c10.push(Ca(e14, r12, h10, g10, m10 < 0)), i10 && c10.push(Ca(n10, r12, h10, g10, m10 >= 0));
  }
  return c10.join(" ");
}
function Co(s10, e14, t13) {
  if (p.dist2(e14, p.med(s10, t13)) <= 4)
    return [s10, t13];
  let n10 = [], o13 = Dn(s10, e14, t13), i10 = [o13[0], o13[1]], a10 = o13[2], l10 = p.angle(i10, s10), r12 = p.angle(i10, t13);
  for (let c10 = 1 / 20; c10 < 1; c10 += 1 / 20) {
    let p10 = Utils.lerpAngles(l10, r12, c10);
    n10.push(p.nudgeAtAngle(i10, p10, a10));
  }
  return n10;
}
function Ea(s10, e14, t13) {
  if (t13 === s10 || t13 === e14)
    return true;
  let n10 = Math.PI * 2, o13 = (e14 - s10 + n10) % n10, i10 = (t13 - s10 + n10) % n10;
  return o13 <= Math.PI != i10 > o13;
}
function so(s10, e14, t13, n10) {
  let o13 = Utils.getSweep(s10, t13, n10);
  return e14 * (2 * Math.PI) * (o13 / (2 * Math.PI));
}
function io({left: s10, middle: e14, right: t13, stroke: n10, strokeWidth: o13}) {
  return hs.createElement("g", null, hs.createElement("path", {className: "tl-stroke-hitarea", d: `M ${s10} L ${e14} ${t13}`}), hs.createElement("path", {d: `M ${s10} L ${e14} ${t13}`, fill: "none", stroke: n10, strokeWidth: o13, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "none"}));
}
var Ra = qt.memo(function({id: e14, style: t13, start: n10, end: o13, decorationStart: i10, decorationEnd: a10, isDraw: l10, isDarkMode: r12}) {
  let c10 = p.dist(n10, o13);
  if (c10 < 2)
    return null;
  let p10 = le2(t13, r12), {strokeWidth: u10} = p10, h10 = 1 + u10 * 1.618, g10 = l10 ? Pa(e14, t13, n10, o13, i10, a10) : "M" + p.toFixed(n10) + "L" + p.toFixed(o13), {strokeDasharray: m10, strokeDashoffset: T10} = Utils.getPerfectDashProps(c10, u10 * 1.618, t13.dash, 2, false), y10 = Math.min(c10 / 3, u10 * 8), b10 = i10 ? us(n10, o13, y10) : null, S10 = a10 ? us(o13, n10, y10) : null;
  return qt.createElement(qt.Fragment, null, qt.createElement("path", {className: "tl-stroke-hitarea", d: g10}), qt.createElement("path", {d: g10, fill: p10.stroke, stroke: p10.stroke, strokeWidth: l10 ? h10 / 2 : h10, strokeDasharray: m10, strokeDashoffset: T10, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "stroke"}), b10 && qt.createElement(io, {left: b10.left, middle: n10, right: b10.right, stroke: p10.stroke, strokeWidth: h10}), S10 && qt.createElement(io, {left: S10.left, middle: o13, right: S10.right, stroke: p10.stroke, strokeWidth: h10}));
});
var Aa = Jt.memo(function({id: e14, style: t13, start: n10, bend: o13, end: i10, arrowBend: a10, decorationStart: l10, decorationEnd: r12, isDraw: c10, isDarkMode: p10}) {
  let u10 = p.dist(n10, i10);
  if (u10 < 2)
    return null;
  let h10 = le2(t13, p10), {strokeWidth: g10} = h10, m10 = 1 + g10 * 1.618, T10 = Dn(n10, o13, i10), y10 = [T10[0], T10[1]], b10 = T10[2], S10 = so(y10, b10, n10, i10), w10 = Utils.rng(e14), D10 = $n[w10() > 0 ? "easeInOutSine" : "easeInOutCubic"], B10 = c10 ? Ba(e14, t13, n10, i10, l10, r12, y10, b10, S10, D10) : Da(n10, i10, T10, a10), {strokeDasharray: I10, strokeDashoffset: P10} = Utils.getPerfectDashProps(Math.abs(S10), m10, t13.dash, 2, false), v10 = Math.min(u10 / 3, g10 * 8), Q = l10 ? ps(n10, v10, y10, b10, S10 < 0) : null, oe2 = r12 ? ps(i10, v10, y10, b10, S10 >= 0) : null;
  return Jt.createElement(Jt.Fragment, null, Jt.createElement("path", {className: "tl-stroke-hitarea", d: B10}), Jt.createElement("path", {d: B10, fill: c10 ? h10.stroke : "none", stroke: h10.stroke, strokeWidth: c10 ? 0 : m10, strokeDasharray: I10, strokeDashoffset: P10, strokeLinecap: "round", strokeLinejoin: "round", pointerEvents: "none"}), Q && Jt.createElement(io, {left: Q.left, middle: n10, right: Q.right, stroke: h10.stroke, strokeWidth: m10}), oe2 && Jt.createElement(io, {left: oe2.left, middle: i10, right: oe2.right, stroke: h10.stroke, strokeWidth: m10}));
});
function Ha({id: s10, bounds: e14, labelSize: t13, offset: n10, scale: o13 = 1}) {
  return vo.createElement("defs", null, vo.createElement("mask", {id: s10 + "_clip"}, vo.createElement("rect", {x: -100, y: -100, width: e14.width + 200, height: e14.height + 200, fill: "white"}), vo.createElement("rect", {x: e14.width / 2 - t13[0] / 2 * o13 + ((n10 == null ? void 0 : n10[0]) || 0), y: e14.height / 2 - t13[1] / 2 * o13 + ((n10 == null ? void 0 : n10[1]) || 0), width: t13[0] * o13, height: t13[1] * o13, rx: 4 * o13, ry: 4 * o13, fill: "black", opacity: Math.max(o13, 0.8)})));
}
var Qs = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "arrow");
    d8(this, "hideBounds", true);
    d8(this, "canEdit", true);
    d8(this, "pathCache", new WeakMap());
    d8(this, "getShape", (e14) => {
      var t13, n10, o13, i10;
      return f8({id: "id", type: "arrow", name: "Arrow", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, bend: 0, handles: {start: f8({id: "start", index: 0, point: [0, 0], canBind: true}, (t13 = e14.handles) == null ? void 0 : t13.start), end: f8({id: "end", index: 1, point: [1, 1], canBind: true}, (n10 = e14.handles) == null ? void 0 : n10.end), bend: f8({id: "bend", index: 2, point: [0.5, 0.5]}, (o13 = e14.handles) == null ? void 0 : o13.bend)}, decorations: (i10 = e14.decorations) != null ? i10 : {end: "arrow"}, style: f8(C5(f8({}, Ye), {isFilled: false}), e14.style), label: "", labelPoint: [0.5, 0.5]}, e14);
    });
    d8(this, "Component", he.Component(({shape: e14, isEditing: t13, isGhost: n10, meta: o13, events: i10, onShapeChange: a10, onShapeBlur: l10}, r12) => {
      var te, ke;
      let {id: c10, label: p10 = "", handles: {start: u10, bend: h10, end: g10}, decorations: m10 = {}, style: T10} = e14, y10 = (ke = (te = p10 == null ? void 0 : p10.trim()) == null ? void 0 : te.length) != null ? ke : 0 > 0, b10 = e.dist(h10.point, e.toFixed(e.med(u10.point, g10.point))) < 1, S10 = wt(T10), w10 = le2(T10, o13.isDarkMode), D10 = y10 || t13 ? Nn(p10, S10) : [0, 0], B10 = this.getBounds(e14), I10 = Le.useMemo(() => {
        let {start: be2, bend: xe, end: Me} = e14.handles;
        if (b10)
          return e.dist(be2.point, Me.point);
        let Fe = Dn(be2.point, xe.point, Me.point), We = Fe.slice(0, 2), ot = Fe[2], Tt = so(We, ot, be2.point, Me.point);
        return Math.abs(Tt);
      }, [e14.handles]), P10 = Math.max(0.5, Math.min(1, Math.max(I10 / (D10[1] + 128), I10 / (D10[0] + 128)))), v10 = Le.useMemo(() => {
        let be2 = this.getBounds(e14);
        return e.sub(e14.handles.bend.point, e.toFixed([be2.width / 2, be2.height / 2]));
      }, [e14, P10]), Q = Le.useCallback((be2) => {
        a10 == null || a10({id: c10, label: be2});
      }, [a10]), oe2 = b10 ? Ra : Aa;
      return Le.createElement(gp, f8({ref: r12}, i10), Le.createElement(In, {font: S10, text: p10, color: w10.stroke, offsetX: v10[0], offsetY: v10[1], scale: P10, isEditing: t13, onChange: Q, onBlur: l10}), Le.createElement(SVGContainer, {id: e14.id + "_svg"}, Le.createElement("defs", null, Le.createElement("mask", {id: e14.id + "_clip"}, Le.createElement("rect", {x: -100, y: -100, width: B10.width + 200, height: B10.height + 200, fill: "white"}), Le.createElement("rect", {x: B10.width / 2 - D10[0] / 2 * P10 + v10[0], y: B10.height / 2 - D10[1] / 2 * P10 + v10[1], width: D10[0] * P10, height: D10[1] * P10, rx: 4 * P10, ry: 4 * P10, fill: "black", opacity: 1}))), Le.createElement("g", {pointerEvents: "none", opacity: n10 ? 0.3 : 1, mask: y10 || t13 ? `url(#${e14.id}_clip)` : ""}, Le.createElement(oe2, {id: c10, style: T10, start: u10.point, end: g10.point, bend: h10.point, arrowBend: e14.bend, decorationStart: m10 == null ? void 0 : m10.start, decorationEnd: m10 == null ? void 0 : m10.end, isDraw: T10.dash === "draw", isDarkMode: o13.isDarkMode}))));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14, bounds: t13}) => {
      var y10, b10;
      let {style: n10, decorations: o13, label: i10, handles: {start: a10, bend: l10, end: r12}} = e14, c10 = (b10 = (y10 = i10 == null ? void 0 : i10.trim()) == null ? void 0 : y10.length) != null ? b10 : 0 > 0, p10 = wt(n10), u10 = c10 ? Nn(i10, p10) : [0, 0], h10 = e.dist(l10.point, e.toFixed(e.med(a10.point, r12.point))) < 1, g10 = Le.useMemo(() => {
        let {start: S10, bend: w10, end: D10} = e14.handles;
        if (h10)
          return e.dist(S10.point, D10.point);
        let B10 = Dn(S10.point, w10.point, D10.point), I10 = B10.slice(0, 2), P10 = B10[2], v10 = so(I10, P10, S10.point, D10.point);
        return Math.abs(v10);
      }, [e14.handles]), m10 = Math.max(0.5, Math.min(1, Math.max(g10 / (u10[1] + 128), g10 / (u10[0] + 128)))), T10 = Le.useMemo(() => {
        let S10 = this.getBounds(e14);
        return e.sub(e14.handles.bend.point, [S10.width / 2, S10.height / 2]);
      }, [e14, m10]);
      return Le.createElement(Le.Fragment, null, c10 && Le.createElement(Ha, {id: e14.id, scale: m10, offset: T10, bounds: t13, labelSize: u10}), Le.createElement("path", {d: Ma(n10, a10.point, l10.point, r12.point, o13 == null ? void 0 : o13.start, o13 == null ? void 0 : o13.end), mask: c10 ? `url(#${e14.id}_clip)` : ""}), c10 && Le.createElement("rect", {x: t13.width / 2 - u10[0] / 2 * m10 + T10[0], y: t13.height / 2 - u10[1] / 2 * m10 + T10[1], width: u10[0] * m10, height: u10[1] * m10, rx: 4 * m10, ry: 4 * m10, fill: "transparent"}));
    }));
    d8(this, "getBounds", (e14) => {
      let t13 = Utils.getFromCache(this.boundsCache, e14, () => {
        let {handles: {start: n10, bend: o13, end: i10}} = e14;
        return Utils.getBoundsFromPoints(Co(n10.point, o13.point, i10.point));
      });
      return Utils.translateBounds(t13, e14.point);
    });
    d8(this, "getRotatedBounds", (e14) => {
      let {handles: {start: t13, bend: n10, end: o13}} = e14, i10 = Co(t13.point, n10.point, o13.point), {minX: a10, minY: l10, maxX: r12, maxY: c10} = Utils.getBoundsFromPoints(i10);
      return e14.rotation !== 0 && (i10 = i10.map((p10) => e.rotWith(p10, [(a10 + r12) / 2, (l10 + c10) / 2], e14.rotation || 0))), Utils.translateBounds(Utils.getBoundsFromPoints(i10), e14.point);
    });
    d8(this, "getCenter", (e14) => {
      let {start: t13, end: n10} = e14.handles;
      return e.add(e14.point, e.med(t13.point, n10.point));
    });
    d8(this, "shouldRender", (e14, t13) => t13.decorations !== e14.decorations || t13.handles !== e14.handles || t13.style !== e14.style || t13.label !== e14.label);
    d8(this, "hitTestPoint", (e14, t13) => {
      let {handles: {start: n10, bend: o13, end: i10}} = e14, a10 = e.sub(t13, e14.point), l10 = Co(n10.point, o13.point, i10.point);
      for (let r12 = 1; r12 < l10.length; r12++)
        if (e.distanceToLineSegment(l10[r12 - 1], l10[r12], a10) < 1)
          return true;
      return false;
    });
    d8(this, "hitTestLineSegment", (e14, t13, n10) => {
      let {handles: {start: o13, bend: i10, end: a10}} = e14, l10 = e.sub(t13, e14.point), r12 = e.sub(n10, e14.point), c10 = Co(o13.point, i10.point, a10.point);
      for (let p10 = 1; p10 < c10.length; p10++)
        if (intersectLineSegmentLineSegment(c10[p10 - 1], c10[p10], l10, r12).didIntersect)
          return true;
      return false;
    });
    d8(this, "hitTestBounds", (e14, t13) => {
      let {start: n10, end: o13, bend: i10} = e14.handles, a10 = e.add(e14.point, n10.point), l10 = e.add(e14.point, o13.point);
      if (Utils.pointInBounds(a10, t13) || Utils.pointInBounds(l10, t13))
        return true;
      if (e.isEqual(e.med(n10.point, o13.point), i10.point))
        return intersectLineSegmentBounds(a10, l10, t13).length > 0;
      {
        let [r12, c10, p10] = Dn(n10.point, i10.point, o13.point), u10 = e.add(e14.point, [r12, c10]);
        return intersectArcBounds(u10, p10, a10, l10, t13).length > 0;
      }
    });
    d8(this, "transform", (e14, t13, {initialShape: n10, scaleX: o13, scaleY: i10}) => {
      let a10 = this.getBounds(n10), l10 = ["start", "end"], r12 = f8({}, n10.handles);
      l10.forEach((b10) => {
        let [S10, w10] = r12[b10].point, D10 = S10 / a10.width, B10 = w10 / a10.height;
        r12[b10] = C5(f8({}, r12[b10]), {point: [t13.width * (o13 < 0 ? 1 - D10 : D10), t13.height * (i10 < 0 ? 1 - B10 : B10)]});
      });
      let {start: c10, bend: p10, end: u10} = r12, h10 = e.dist(c10.point, u10.point), g10 = e.med(c10.point, u10.point), m10 = h10 / 2 * n10.bend, T10 = e.uni(e.vec(c10.point, u10.point)), y10 = e.add(g10, e.mul(e.per(T10), m10));
      return r12.bend = C5(f8({}, p10), {point: e.toFixed(Math.abs(m10) < 10 ? g10 : y10)}), {point: e.toFixed([t13.minX, t13.minY]), handles: r12};
    });
    d8(this, "onDoubleClickHandle", (e14, t13) => {
      var n10, o13;
      switch (t13) {
        case "bend":
          return {bend: 0, handles: C5(f8({}, e14.handles), {bend: C5(f8({}, e14.handles.bend), {point: cs(e14.handles, e14.bend)})})};
        case "start":
          return {decorations: C5(f8({}, e14.decorations), {start: ((n10 = e14.decorations) == null ? void 0 : n10.start) ? void 0 : "arrow"})};
        case "end":
          return {decorations: C5(f8({}, e14.decorations), {end: ((o13 = e14.decorations) == null ? void 0 : o13.end) ? void 0 : "arrow"})};
      }
      return this;
    });
    d8(this, "onHandleChange", (e14, t13) => {
      let n10 = Utils.deepMerge(e14.handles, t13), o13 = e14.bend;
      if (n10 = Utils.deepMerge(n10, {start: {point: e.toFixed(n10.start.point)}, end: {point: e.toFixed(n10.end.point)}}), e.isEqual(n10.start.point, n10.end.point))
        return;
      if ("bend" in t13) {
        let {start: c10, end: p10, bend: u10} = n10, h10 = e.dist(c10.point, p10.point), g10 = e.med(c10.point, p10.point), m10 = e.angle(c10.point, p10.point), T10 = e.uni(e.vec(c10.point, p10.point)), y10 = e.add(g10, e.mul(e.per(T10), h10)), b10 = e.sub(g10, e.mul(e.per(T10), h10)), S10 = e.nearestPointOnLineSegment(y10, b10, u10.point, true), D10 = e.dist(g10, S10) / (h10 / 2);
        o13 = Utils.clamp(D10, -0.99, 0.99);
        let B10 = e.angle(c10.point, S10);
        e.isEqual(g10, cs(n10, o13)) ? o13 = 0 : Ea(m10, m10 + Math.PI, B10) && (o13 *= -1);
      }
      let i10 = {point: e14.point, bend: o13, handles: C5(f8({}, n10), {bend: C5(f8({}, n10.bend), {point: cs(n10, o13)})})}, a10 = e14.point, l10 = this.getBounds(f8({}, i10)), r12 = e.sub([l10.minX, l10.minY], a10);
      return e.isEqual(r12, [0, 0]) || (Object.values(i10.handles).forEach((c10) => {
        c10.point = e.toFixed(e.sub(c10.point, r12));
      }), i10.point = e.toFixed(e.add(i10.point, r12))), i10;
    });
  }
};
var gp = M3("div", {width: "100%", height: "100%"});
var ei = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "group");
    d8(this, "canBind", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "group", name: "Group", parentId: "page", childIndex: 1, point: [0, 0], size: [100, 100], rotation: 0, children: [], style: Ye}, e14));
    d8(this, "Component", he.Component(({shape: e14, isBinding: t13, isGhost: n10, isHovered: o13, isSelected: i10, events: a10}, l10) => {
      let {id: r12, size: c10} = e14, p10 = 2, u10 = Math.max(0, c10[0] - p10 / 2), h10 = Math.max(0, c10[1] - p10 / 2), m10 = [[[p10 / 2, p10 / 2], [u10, p10 / 2], u10 - p10 / 2], [[u10, p10 / 2], [u10, h10], h10 - p10 / 2], [[u10, h10], [p10 / 2, h10], u10 - p10 / 2], [[p10 / 2, h10], [p10 / 2, p10 / 2], h10 - p10 / 2]].map(([T10, y10], b10) => un.createElement("line", {key: r12 + "_" + b10, x1: T10[0], y1: T10[1], x2: y10[0], y2: y10[1]}));
      return un.createElement(SVGContainer, f8({ref: l10}, a10), t13 && un.createElement("rect", {className: "tl-binding-indicator", strokeWidth: this.bindingDistance}), un.createElement("g", {opacity: n10 ? 0.3 : 1}, un.createElement("rect", {x: 0, y: 0, width: c10[0], height: c10[1], fill: "transparent", pointerEvents: "all"}), un.createElement(za, {stroke: "black", opacity: o13 || i10 ? 1 : 0, strokeLinecap: "round", pointerEvents: "stroke"}, m10)));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {id: t13, size: n10} = e14, o13 = 2, i10 = Math.max(0, n10[0] - o13 / 2), a10 = Math.max(0, n10[1] - o13 / 2), r12 = [[[o13 / 2, o13 / 2], [i10, o13 / 2], i10 - o13 / 2], [[i10, o13 / 2], [i10, a10], a10 - o13 / 2], [[i10, a10], [o13 / 2, a10], i10 - o13 / 2], [[o13 / 2, a10], [o13 / 2, o13 / 2], a10 - o13 / 2]].map(([c10, p10], u10) => un.createElement("line", {key: t13 + "_" + u10, x1: c10[0], y1: c10[1], x2: p10[0], y2: p10[1]}));
      return un.createElement(za, {strokeLinecap: "round", pointerEvents: "stroke"}, r12);
    }));
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style);
  }
};
var za = M3("g", {strokeWidth: "calc(1.5px * var(--tl-scale))", strokeDasharray: "calc(1px * var(--tl-scale)), calc(3px * var(--tl-scale))"});
var ni = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "sticky");
    d8(this, "canBind", true);
    d8(this, "canEdit", true);
    d8(this, "canClone", true);
    d8(this, "hideResizeHandles", true);
    d8(this, "showCloneHandles", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "sticky", name: "Sticky", parentId: "page", childIndex: 1, point: [0, 0], size: [200, 200], text: "", rotation: 0, style: to}, e14));
    d8(this, "Component", he.Component(({shape: e14, meta: t13, events: n10, isGhost: o13, isBinding: i10, isEditing: a10, onShapeBlur: l10, onShapeChange: r12}, c10) => {
      let p10 = Zr(e14.style), {color: u10, fill: h10} = Ns(e14.style, t13.isDarkMode), g10 = Oe.useRef(null), m10 = Oe.useRef(null), T10 = Oe.useRef(null), y10 = Oe.useRef(false), b10 = Oe.useCallback((v10) => {
        v10.stopPropagation();
      }, []), S10 = Oe.useCallback((v10) => {
        r12 == null || r12({id: e14.id, type: e14.type, text: x7.normalizeText(v10)});
      }, [e14.id]), w10 = Oe.useCallback((v10) => {
        S10(v10.currentTarget.value);
      }, [r12, S10]), D10 = Oe.useCallback((v10) => {
        if (v10.key === "Escape") {
          v10.preventDefault(), v10.stopPropagation(), l10 == null || l10();
          return;
        }
        if (v10.key === "Tab" && e14.text.length === 0) {
          v10.preventDefault();
          return;
        }
        if (!(v10.key === "Meta" || v10.metaKey))
          v10.stopPropagation();
        else if (v10.key === "z" && v10.metaKey) {
          v10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), v10.stopPropagation(), v10.preventDefault();
          return;
        }
        (v10.metaKey || v10.ctrlKey) && v10.key === "=" && v10.preventDefault(), v10.key === "Tab" && (v10.preventDefault(), v10.shiftKey ? Ge.unindent(v10.currentTarget) : Ge.indent(v10.currentTarget), r12 == null || r12(C5(f8({}, e14), {text: x7.normalizeText(v10.currentTarget.value)})));
      }, [e14, r12]), B10 = Oe.useCallback((v10) => {
        v10.currentTarget.setSelectionRange(0, 0), l10 == null || l10();
      }, []), I10 = Oe.useCallback((v10) => {
        !a10 || !y10.current || v10.currentTarget.select();
      }, [a10]);
      Oe.useEffect(() => {
        if (a10) {
          y10.current = true;
          let v10 = m10.current;
          v10.focus(), v10.select();
        }
      }, [a10]), Oe.useEffect(() => {
        let v10 = T10.current, {size: Q} = e14, {offsetHeight: oe2} = v10, te = ti - Qt * 2, ke = Q[1] - Qt * 2;
        if (oe2 === ke)
          return;
        if (oe2 > te) {
          r12 == null || r12({id: e14.id, size: [Q[0], oe2 + Qt * 2]});
          return;
        }
        if (oe2 < te && Q[1] > ti) {
          r12 == null || r12({id: e14.id, size: [Q[0], ti]});
          return;
        }
        let be2 = m10.current;
        be2 == null || be2.focus();
      }, [e14.text, e14.size[1], e14.style]);
      let P10 = {font: p10, color: u10, textShadow: t13.isDarkMode ? "0.5px 0.5px 2px rgba(255, 255, 255,.25)" : "0.5px 0.5px 2px rgba(255, 255, 255,.5)"};
      return Oe.createElement(HTMLContainer, f8({ref: c10}, n10), Oe.createElement(yp, {ref: g10, isDarkMode: t13.isDarkMode, isGhost: o13, style: f8({backgroundColor: h10}, P10)}, i10 && Oe.createElement("div", {className: "tl-binding-indicator", style: {position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)"}}), Oe.createElement(wp, {ref: T10, isEditing: a10, alignment: e14.style.textAlign}, e14.text, "\u200B"), a10 && Oe.createElement(xp, {ref: m10, onPointerDown: b10, value: e14.text, onChange: w10, onKeyDown: D10, onFocus: I10, onBlur: B10, tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, spellCheck: true, alignment: e14.style.textAlign, onContextMenu: rt, onCopy: rt, onPaste: rt, onCut: rt})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {size: [t13, n10]} = e14;
      return Oe.createElement("rect", {x: 0, y: 0, rx: 3, ry: 3, width: Math.max(1, t13), height: Math.max(1, n10)});
    }));
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style || t13.text !== e14.text);
    d8(this, "transform", (e14, t13, {scaleX: n10, scaleY: o13, transformOrigin: i10}) => ({point: e.toFixed([t13.minX + (t13.width - e14.size[0]) * (n10 < 0 ? 1 - i10[0] : i10[0]), t13.minY + (t13.height - e14.size[1]) * (o13 < 0 ? 1 - i10[1] : i10[1])])}));
    d8(this, "transformSingle", (e14) => e14);
    d8(this, "getSvgElement", (e14, t13) => {
      let n10 = this.getBounds(e14), o13 = Utils.expandBounds(n10, -Qt), i10 = no(e14.text, e14.style, o13), a10 = Ns(e14.style, t13);
      i10.setAttribute("fill", a10.color), i10.setAttribute("transform", `translate(${Qt}, ${Qt})`);
      let l10 = document.createElementNS("http://www.w3.org/2000/svg", "g"), r12 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      return r12.setAttribute("width", n10.width + ""), r12.setAttribute("height", n10.height + ""), r12.setAttribute("fill", a10.fill), r12.setAttribute("rx", "3"), r12.setAttribute("ry", "3"), l10.appendChild(r12), l10.appendChild(i10), l10;
    });
  }
};
var Qt = 16;
var ti = 200;
var yp = M3("div", {pointerEvents: "all", position: "relative", backgroundColor: "rgba(255, 220, 100)", fontFamily: "sans-serif", height: "100%", width: "100%", padding: Qt + "px", borderRadius: "3px", perspective: "800px", variants: {isGhost: {false: {opacity: 1}, true: {transition: "opacity .2s", opacity: 0.3}}, isDarkMode: {true: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"}, false: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"}}}});
var Fa = {whiteSpace: "pre-wrap", overflowWrap: "break-word"};
var wp = M3("div", f8({position: "absolute", top: Qt, left: Qt, width: `calc(100% - ${Qt * 2}px)`, height: "fit-content", font: "inherit", pointerEvents: "none", userSelect: "none", variants: {isEditing: {true: {opacity: 1}, false: {opacity: 1}}, alignment: {["start"]: {textAlign: "left"}, ["middle"]: {textAlign: "center"}, ["end"]: {textAlign: "right"}, ["justify"]: {textAlign: "justify"}}}}, Fa));
var xp = M3("textarea", C5(f8({width: "100%", height: "100%", border: "none", overflow: "hidden", background: "none", outline: "none", textAlign: "left", font: "inherit", padding: 0, color: "transparent", verticalAlign: "top", resize: "none", caretColor: "black"}, Fa), {variants: {alignment: {["start"]: {textAlign: "left"}, ["middle"]: {textAlign: "center"}, ["end"]: {textAlign: "right"}, ["justify"]: {textAlign: "justify"}}}, "&:focus": {outline: "none", border: "none"}}));
var si = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "text");
    d8(this, "isAspectRatioLocked", true);
    d8(this, "canEdit", true);
    d8(this, "canBind", true);
    d8(this, "canClone", true);
    d8(this, "bindingDistance", 16 / 2);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "text", name: "Text", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, text: " ", style: to}, e14));
    d8(this, "texts", new Map());
    d8(this, "Component", he.Component(({shape: e14, isBinding: t13, isGhost: n10, isEditing: o13, onShapeBlur: i10, onShapeChange: a10, meta: l10, events: r12}, c10) => {
      let {text: p10, style: u10} = e14, h10 = le2(u10, l10.isDarkMode), g10 = wt(e14.style), m10 = je.useRef(null), T10 = je.useRef(false), y10 = je.useRef(p10);
      je.useLayoutEffect(() => {
        if (p10 !== y10.current) {
          let I10 = [0, 0];
          this.texts.set(e14.id, p10);
          let P10 = this.getBounds(e14), v10 = this.getBounds(e14);
          switch (e14.style.textAlign) {
            case "start":
              break;
            case "middle": {
              I10 = e.div([v10.width - P10.width, 0], 2);
              break;
            }
            case "end": {
              I10 = [v10.width - P10.width, 0];
              break;
            }
          }
          y10.current = p10, a10 == null || a10(C5(f8({}, e14), {id: e14.id, point: e.sub(e14.point, I10), text: p10}));
        }
      }, [p10]);
      let b10 = je.useCallback((I10) => {
        let P10 = [0, 0], v10 = x7.normalizeText(I10.currentTarget.value), Q = this.getBounds(e14);
        this.texts.set(e14.id, v10);
        let oe2 = this.getBounds(C5(f8({}, e14), {text: v10}));
        switch (e14.style.textAlign) {
          case "start":
            break;
          case "middle": {
            P10 = e.div([oe2.width - Q.width, 0], 2);
            break;
          }
          case "end": {
            P10 = [oe2.width - Q.width, 0];
            break;
          }
        }
        y10.current = v10, a10 == null || a10(C5(f8({}, e14), {id: e14.id, point: e.sub(e14.point, P10), text: v10}));
      }, [e14.id, e14.point]), S10 = je.useCallback((I10) => {
        if (I10.key === "Escape") {
          I10.preventDefault(), I10.stopPropagation(), i10 == null || i10();
          return;
        }
        if (I10.key === "Tab" && e14.text.length === 0) {
          I10.preventDefault();
          return;
        }
        if (I10.key === "Enter" && (I10.metaKey || I10.ctrlKey)) {
          I10.preventDefault(), I10.stopPropagation(), m10.current.blur();
          return;
        }
        if (!(I10.key === "Meta" || I10.metaKey))
          I10.stopPropagation();
        else if (I10.key === "z" && I10.metaKey) {
          I10.shiftKey ? document.execCommand("redo", false) : document.execCommand("undo", false), I10.stopPropagation(), I10.preventDefault();
          return;
        }
        (I10.metaKey || I10.ctrlKey) && I10.key === "=" && I10.preventDefault(), I10.key === "Tab" && (I10.preventDefault(), I10.shiftKey ? Ge.unindent(I10.currentTarget) : Ge.indent(I10.currentTarget), a10 == null || a10(C5(f8({}, e14), {text: x7.normalizeText(I10.currentTarget.value)})));
      }, [e14, a10]), w10 = je.useCallback((I10) => {
        I10.currentTarget.setSelectionRange(0, 0), i10 == null || i10();
      }, []), D10 = je.useCallback((I10) => {
        !o13 || !T10.current || document.activeElement === I10.currentTarget && I10.currentTarget.select();
      }, [o13]), B10 = je.useCallback((I10) => {
        o13 && I10.stopPropagation();
      }, [o13]);
      return je.useEffect(() => {
        o13 ? (this.texts.set(e14.id, p10), requestAnimationFrame(() => {
          T10.current = true;
          let I10 = m10.current;
          I10 && (I10.focus(), I10.select());
        })) : i10 == null || i10();
      }, [o13]), je.createElement(HTMLContainer, f8({ref: c10}, r12), je.createElement(vp, {isGhost: n10, isEditing: o13, onPointerDown: B10}, je.createElement(kp, {style: {font: g10, color: h10.stroke, textAlign: xo(u10.textAlign)}}, t13 && je.createElement("div", {className: "tl-binding-indicator", style: {position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)"}}), o13 ? je.createElement(Dp, {ref: m10, style: {font: g10, color: h10.stroke}, name: "text", tabIndex: -1, autoComplete: "false", autoCapitalize: "false", autoCorrect: "false", autoSave: "false", autoFocus: true, placeholder: "", spellCheck: "true", wrap: "off", dir: "auto", datatype: "wysiwyg", defaultValue: p10, color: h10.stroke, onFocus: D10, onChange: b10, onKeyDown: S10, onBlur: w10, onPointerDown: B10, onContextMenu: rt, onCopy: rt, onPaste: rt, onCut: rt}) : p10, "\u200B")));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {width: t13, height: n10} = this.getBounds(e14);
      return je.createElement("rect", {x: 0, y: 0, width: t13, height: n10});
    }));
    d8(this, "getBounds", (e14) => {
      let t13 = Utils.getFromCache(this.boundsCache, e14, () => {
        var i10;
        if (!Bn)
          return {minX: 0, minY: 0, maxX: 10, maxY: 10, width: 10, height: 10};
        Bn.parentNode || document.body.appendChild(Bn), Bn.style.font = wt(e14.style), Bn.textContent = (i10 = this.texts.get(e14.id)) != null ? i10 : e14.text;
        let n10 = Bn.offsetWidth || 1, o13 = Bn.offsetHeight || 1;
        return {minX: 0, maxX: n10, minY: 0, maxY: o13, width: n10, height: o13};
      });
      return Utils.translateBounds(t13, e14.point);
    });
    d8(this, "shouldRender", (e14, t13) => t13.text !== e14.text || t13.style.scale !== e14.style.scale || t13.style !== e14.style);
    d8(this, "transform", (e14, t13, {initialShape: n10, scaleX: o13, scaleY: i10}) => {
      let {rotation: a10 = 0, style: {scale: l10 = 1}} = n10, r12 = l10 * Math.abs(Math.min(o13, i10));
      return {point: [t13.minX, t13.minY], rotation: o13 < 0 && i10 >= 0 || i10 < 0 && o13 >= 0 ? -(a10 || 0) : a10, style: C5(f8({}, n10.style), {scale: r12})};
    });
    d8(this, "transformSingle", (e14, t13, {initialShape: n10, scaleX: o13, scaleY: i10}) => {
      let {style: {scale: a10 = 1}} = n10;
      return {point: e.toFixed([t13.minX, t13.minY]), style: C5(f8({}, n10.style), {scale: a10 * Math.max(Math.abs(i10), Math.abs(o13))})};
    });
    d8(this, "onDoubleClickBoundsHandle", (e14) => {
      let t13 = this.getCenter(e14), n10 = this.getCenter(C5(f8({}, e14), {style: C5(f8({}, e14.style), {scale: 1})}));
      return {style: C5(f8({}, e14.style), {scale: 1}), point: e.toFixed(e.add(e14.point, e.sub(t13, n10)))};
    });
    d8(this, "getSvgElement", (e14, t13) => {
      let n10 = this.getBounds(e14), o13 = le2(e14.style, t13), i10 = no(e14.text, e14.style, n10);
      return i10.setAttribute("fill", o13.stroke), i10;
    });
  }
};
var Bn;
function Cp() {
  var e14;
  (e14 = document.getElementById("__textMeasure")) == null || e14.remove();
  let s10 = document.createElement("pre");
  return s10.id = "__textMeasure", Object.assign(s10.style, {whiteSpace: "pre", width: "auto", border: "1px solid transparent", padding: "4px", margin: "0px", letterSpacing: Vn, opacity: "0", position: "absolute", top: "-500px", left: "0px", zIndex: "9999", pointerEvents: "none", userSelect: "none", alignmentBaseline: "mathematical", dominantBaseline: "mathematical"}), s10.tabIndex = -1, document.body.appendChild(s10), s10;
}
typeof window != "undefined" && (Bn = Cp());
var vp = M3("div", {width: "100%", height: "100%", variants: {isGhost: {false: {opacity: 1}, true: {transition: "opacity .2s", opacity: 0.3}}, isEditing: {false: {pointerEvents: "all", userSelect: "all"}, true: {pointerEvents: "none", userSelect: "none"}}}});
var ja = {whiteSpace: "pre-wrap", overflowWrap: "break-word"};
var kp = M3("div", f8({position: "absolute", width: "100%", height: "100%", padding: "4px", zIndex: 1, minHeight: 1, minWidth: 1, lineHeight: 1, letterSpacing: Vn, outline: 0, fontWeight: "500", backfaceVisibility: "hidden", userSelect: "none", pointerEvents: "none", WebkitUserSelect: "none", WebkitTouchCallout: "none", isEditing: {false: {}, true: {pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text"}}}, ja));
var Dp = M3("textarea", C5(f8({position: "absolute", top: 0, left: 0, zIndex: 1, width: "100%", height: "100%", border: "none", padding: "4px", resize: "none", textAlign: "inherit", minHeight: "inherit", minWidth: "inherit", lineHeight: "inherit", letterSpacing: "inherit", outline: 0, fontWeight: "inherit", overflow: "hidden", backfaceVisibility: "hidden", display: "inline-block", pointerEvents: "all", background: "$boundsBg", userSelect: "text", WebkitUserSelect: "text"}, ja), {"&:focus": {outline: "none", border: "none"}}));
var Mp = {easing: (s10) => Math.sin(s10 * Math.PI / 2), simulatePressure: true};
var Ep = {easing: (s10) => s10 * s10, simulatePressure: false};
function ri(s10) {
  let e14 = le2(s10.style);
  return C5(f8({size: 1 + e14.strokeWidth * 1.5, thinning: 0.65, streamline: 0.65, smoothing: 0.65}, s10.points[1][2] === 0.5 ? Mp : Ep), {last: s10.isComplete});
}
function Ga(s10) {
  return s10.points.length < 2 ? "" : Utils.getSvgPathFromStroke(me(s10.points, ri(s10)).map((e14) => e14.point));
}
function Va(s10, e14) {
  return me(s10.points, e14);
}
function $a(s10) {
  if (s10.points.length < 2)
    return "";
  let e14 = ri(s10), t13 = Va(s10, e14);
  return Utils.getSvgPathFromStroke(ie(t13, e14));
}
function ai(s10) {
  let {points: e14} = s10;
  if (e14.length < 2)
    return "M 0 0 L 0 0";
  let t13 = ri(s10), n10 = Va(s10, t13).map((a10) => a10.point.slice(0, 2)), o13 = e14[e14.length - 1].slice(0, 2);
  return p.isEqual(n10[0], o13) || n10.push(o13), Utils.getSvgPathFromStroke(n10, false);
}
var li = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "draw");
    d8(this, "pointsBoundsCache", new WeakMap([]));
    d8(this, "shapeBoundsCache", new Map());
    d8(this, "rotatedCache", new WeakMap([]));
    d8(this, "pointCache", {});
    d8(this, "canClone", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "id", type: "draw", name: "Draw", parentId: "page", childIndex: 1, point: [0, 0], rotation: 0, style: Ye, points: [], isComplete: false}, e14));
    d8(this, "Component", he.Component(({shape: e14, meta: t13, isSelected: n10, isGhost: o13, events: i10}, a10) => {
      let {points: l10, style: r12, isComplete: c10} = e14, p10 = Ze.useMemo(() => Ga(e14), [l10, r12.size]), u10 = Ze.useMemo(() => r12.dash === "draw" ? $a(e14) : ai(e14), [l10, r12.size, r12.dash, c10]), h10 = le2(r12, t13.isDarkMode), {stroke: g10, fill: m10, strokeWidth: T10} = h10, y10 = this.getBounds(e14);
      if (y10.width <= T10 / 2 && y10.height <= T10 / 2) {
        let I10 = 1 + T10;
        return Ze.createElement(SVGContainer, f8({ref: a10, id: e14.id + "_svg"}, i10), Ze.createElement("circle", {r: I10, fill: g10, stroke: g10, pointerEvents: "all", opacity: o13 ? 0.3 : 1}));
      }
      let S10 = r12.isFilled && l10.length > 3 && e.dist(l10[0], l10[l10.length - 1]) < T10 * 2;
      if (e14.style.dash === "draw")
        return Ze.createElement(SVGContainer, f8({ref: a10, id: e14.id + "_svg"}, i10), Ze.createElement("g", {opacity: o13 ? 0.3 : 1}, Ze.createElement("path", {className: S10 || n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: u10}), S10 && Ze.createElement("path", {d: p10, stroke: "none", fill: m10, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none"}), Ze.createElement("path", {d: u10, fill: g10, stroke: g10, strokeWidth: T10 / 2, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none"})));
      let w10 = {["draw"]: "none", ["solid"]: "none", ["dotted"]: `0.1 ${T10 * 4}`, ["dashed"]: `${T10 * 4} ${T10 * 4}`}[r12.dash], D10 = {["draw"]: "none", ["solid"]: "none", ["dotted"]: "0", ["dashed"]: "0"}[r12.dash], B10 = 1 + T10 * 1.5;
      return Ze.createElement(SVGContainer, f8({ref: a10, id: e14.id + "_svg"}, i10), Ze.createElement("g", {opacity: o13 ? 0.3 : 1}, Ze.createElement("path", {className: S10 && n10 ? "tl-fill-hitarea" : "tl-stroke-hitarea", d: u10}), Ze.createElement("path", {d: u10, fill: S10 ? m10 : "none", stroke: "none", strokeWidth: Math.min(4, T10 * 2), strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none"}), Ze.createElement("path", {d: u10, fill: "none", stroke: g10, strokeWidth: B10, strokeDasharray: w10, strokeDashoffset: D10, strokeLinejoin: "round", strokeLinecap: "round", pointerEvents: "none"})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {points: t13} = e14, n10 = Ze.useMemo(() => ai(e14), [t13]), o13 = this.getBounds(e14);
      return o13.width < 4 && o13.height < 4 ? Ze.createElement("circle", {x: o13.width / 2, y: o13.height / 2, r: 1}) : Ze.createElement("path", {d: n10});
    }));
    d8(this, "transform", (e14, t13, {initialShape: n10, scaleX: o13, scaleY: i10}) => {
      let a10 = Utils.getFromCache(this.boundsCache, n10, () => Utils.getBoundsFromPoints(n10.points)), l10 = n10.points.map(([p10, u10, h10]) => [t13.width * (o13 < 0 ? 1 - p10 / a10.width : p10 / a10.width), t13.height * (i10 < 0 ? 1 - u10 / a10.height : u10 / a10.height), h10]), r12 = Utils.getBoundsFromPoints(e14.points), c10 = e.sub([t13.minX, t13.minY], [r12.minX, r12.minY]);
      return {points: l10, point: c10};
    });
    d8(this, "getBounds", (e14) => {
      let t13 = !this.pointsBoundsCache.has(e14.points), n10 = this.pointCache[e14.id] !== e14.point;
      if (t13) {
        let o13 = Utils.getBoundsFromPoints(e14.points);
        this.pointsBoundsCache.set(e14.points, o13), this.shapeBoundsCache.set(e14.id, Utils.translateBounds(o13, e14.point)), this.pointCache[e14.id] = e14.point;
      } else
        n10 && !t13 && (this.pointCache[e14.id] = e14.point, this.shapeBoundsCache.set(e14.id, Utils.translateBounds(this.pointsBoundsCache.get(e14.points), e14.point)));
      return this.shapeBoundsCache.get(e14.id);
    });
    d8(this, "shouldRender", (e14, t13) => t13.points !== e14.points || t13.style !== e14.style || t13.isComplete !== e14.isComplete);
    d8(this, "hitTestPoint", (e14, t13) => {
      let n10 = e.sub(t13, e14.point);
      return Utils.pointInPolyline(n10, e14.points);
    });
    d8(this, "hitTestLineSegment", (e14, t13, n10) => {
      let {points: o13, point: i10} = e14, a10 = e.sub(t13, i10), l10 = e.sub(n10, i10), r12 = this.getBounds(e14);
      if (r12.width < 8 && r12.height < 8)
        return e.distanceToLineSegment(t13, n10, Utils.getBoundsCenter(r12)) < 5;
      if (intersectLineSegmentBounds(a10, l10, r12)) {
        for (let c10 = 1; c10 < o13.length; c10++)
          if (intersectLineSegmentLineSegment(o13[c10 - 1], o13[c10], a10, l10).didIntersect)
            return true;
      }
      return false;
    });
    d8(this, "hitTestBounds", (e14, t13) => {
      if (!e14.rotation) {
        let i10 = this.getBounds(e14);
        return Utils.boundsContain(t13, i10) || (Utils.boundsContain(i10, t13) || intersectBoundsBounds(i10, t13).length > 0) && intersectBoundsPolyline(Utils.translateBounds(t13, e.neg(e14.point)), e14.points).length > 0;
      }
      let n10 = this.getRotatedBounds(e14), o13 = Utils.getFromCache(this.rotatedCache, e14, () => {
        let i10 = Utils.getBoundsCenter(Utils.getBoundsFromPoints(e14.points));
        return e14.points.map((a10) => e.rotWith(a10, i10, e14.rotation || 0));
      });
      return Utils.boundsContain(t13, n10) || intersectBoundsPolyline(Utils.translateBounds(t13, e.neg(e14.point)), o13).length > 0;
    });
  }
};
var ci = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "image");
    d8(this, "canBind", true);
    d8(this, "canClone", true);
    d8(this, "isAspectRatioLocked", true);
    d8(this, "showCloneHandles", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "image", type: "image", name: "Image", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: C5(f8({}, Ye), {isFilled: true}), assetId: "assetId"}, e14));
    d8(this, "Component", he.Component(({shape: e14, asset: t13 = {src: ""}, isBinding: n10, isGhost: o13, meta: i10, events: a10, onShapeChange: l10}, r12) => {
      let {size: c10, style: p10} = e14, u10 = Gt.useRef(null), h10 = Gt.useRef(null);
      return Gt.useLayoutEffect(() => {
        let g10 = h10.current;
        if (!g10)
          return;
        let [m10, T10] = c10;
        g10.style.width = `${m10}px`, g10.style.height = `${T10}px`;
      }, [c10]), Gt.createElement(HTMLContainer, f8({ref: r12}, a10), n10 && Gt.createElement("div", {className: "tl-binding-indicator", style: {position: "absolute", top: `calc(${-this.bindingDistance}px * var(--tl-zoom))`, left: `calc(${-this.bindingDistance}px * var(--tl-zoom))`, width: `calc(100% + ${this.bindingDistance * 2}px * var(--tl-zoom))`, height: `calc(100% + ${this.bindingDistance * 2}px * var(--tl-zoom))`, backgroundColor: "var(--tl-selectFill)"}}), Gt.createElement(Op, {ref: h10, isDarkMode: i10.isDarkMode, isFilled: p10.isFilled, isGhost: o13}, Gt.createElement(Fp, {id: e14.id + "_image", ref: u10, src: t13.src, alt: "tl_image_asset", draggable: false})));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {size: [t13, n10]} = e14;
      return Gt.createElement("rect", {x: 0, y: 0, rx: 2, ry: 2, width: Math.max(1, t13), height: Math.max(1, n10)});
    }));
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style);
    d8(this, "transform", wn);
    d8(this, "transformSingle", xn);
    d8(this, "getSvgElement", (e14) => {
      let t13 = this.getBounds(e14), n10 = document.createElementNS("http://www.w3.org/2000/svg", "image");
      return n10.setAttribute("width", `${t13.width}`), n10.setAttribute("height", `${t13.height}`), n10.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n10;
    });
  }
};
var Op = re2("div", {pointerEvents: "all", position: "relative", fontFamily: "sans-serif", fontSize: "2em", height: "100%", width: "100%", borderRadius: "3px", perspective: "800px", overflow: "hidden", p: {userSelect: "none"}, img: {userSelect: "none"}, variants: {isGhost: {false: {opacity: 1}, true: {transition: "opacity .2s", opacity: 0.3}}, isFilled: {true: {}, false: {}}, isDarkMode: {true: {}, false: {}}}, compoundVariants: [{isFilled: true, isDarkMode: true, css: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"}}, {isFilled: true, isDarkMode: false, css: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"}}]});
var Fp = re2("img", {position: "absolute", top: 0, left: 0, width: "100%", height: "100%", maxWidth: "100%", minWidth: "100%", pointerEvents: "none", objectFit: "cover", userSelect: "none", borderRadius: 2});
var pi = class extends he {
  constructor() {
    super(...arguments);
    d8(this, "type", "video");
    d8(this, "canBind", true);
    d8(this, "canEdit", true);
    d8(this, "canClone", true);
    d8(this, "isAspectRatioLocked", true);
    d8(this, "showCloneHandles", true);
    d8(this, "isStateful", true);
    d8(this, "getShape", (e14) => Utils.deepMerge({id: "video", type: "video", name: "Video", parentId: "page", childIndex: 1, point: [0, 0], size: [1, 1], rotation: 0, style: Ye, assetId: "assetId", isPlaying: true, currentTime: 0}, e14));
    d8(this, "Component", he.Component(({shape: e14, asset: t13 = {src: ""}, isBinding: n10, isEditing: o13, isGhost: i10, meta: a10, events: l10, onShapeChange: r12}, c10) => {
      let p10 = st.useRef(null), u10 = st.useRef(null), {currentTime: h10 = 0, size: g10, isPlaying: m10, style: T10} = e14;
      st.useLayoutEffect(() => {
        let w10 = u10.current;
        if (!w10)
          return;
        let [D10, B10] = g10;
        w10.style.width = `${D10}px`, w10.style.height = `${B10}px`;
      }, [g10]), st.useLayoutEffect(() => {
        let w10 = p10.current;
        !w10 || (m10 ? w10.play() : w10.pause());
      }, [m10]), st.useLayoutEffect(() => {
        let w10 = p10.current;
        !w10 || h10 !== w10.currentTime && (w10.currentTime = h10);
      }, [h10]);
      let y10 = st.useCallback(() => {
        r12 == null || r12({id: e14.id, isPlaying: true});
      }, []), b10 = st.useCallback(() => {
        r12 == null || r12({id: e14.id, isPlaying: false});
      }, []), S10 = st.useCallback(() => {
        let w10 = p10.current;
        !w10 || !o13 || r12 == null || r12({id: e14.id, currentTime: w10.currentTime});
      }, [o13]);
      return st.createElement(HTMLContainer, f8({ref: c10}, l10), n10 && st.createElement("div", {className: "tl-binding-indicator", style: {position: "absolute", top: -this.bindingDistance, left: -this.bindingDistance, width: `calc(100% + ${this.bindingDistance * 2}px)`, height: `calc(100% + ${this.bindingDistance * 2}px)`, backgroundColor: "var(--tl-selectFill)"}}), st.createElement(Gp, {ref: u10, isDarkMode: a10.isDarkMode, isGhost: i10, isFilled: T10.isFilled}, st.createElement(Vp, {ref: p10, id: e14.id + "_video", muted: true, loop: true, playsInline: true, disableRemotePlayback: true, disablePictureInPicture: true, controls: o13, autoPlay: m10, onPlay: y10, onPause: b10, onTimeUpdate: S10}, st.createElement("source", {src: t13.src}))));
    }));
    d8(this, "Indicator", he.Indicator(({shape: e14}) => {
      let {size: [t13, n10]} = e14;
      return st.createElement("rect", {x: 0, y: 0, rx: 2, ry: 2, width: Math.max(1, t13), height: Math.max(1, n10)});
    }));
    d8(this, "getBounds", (e14) => Et(e14, this.boundsCache));
    d8(this, "shouldRender", (e14, t13) => t13.size !== e14.size || t13.style !== e14.style || t13.isPlaying !== e14.isPlaying);
    d8(this, "getSvgElement", (e14) => {
      let t13 = this.getBounds(e14), n10 = document.createElementNS("http://www.w3.org/2000/svg", "image");
      return n10.setAttribute("width", `${t13.width}`), n10.setAttribute("height", `${t13.height}`), n10.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n10;
    });
    d8(this, "transform", wn);
    d8(this, "transformSingle", xn);
  }
};
var Gp = re2("div", {pointerEvents: "all", position: "relative", fontFamily: "sans-serif", fontSize: "2em", height: "100%", width: "100%", borderRadius: "3px", perspective: "800px", overflow: "hidden", p: {userSelect: "none"}, img: {userSelect: "none"}, variants: {isGhost: {false: {opacity: 1}, true: {transition: "opacity .2s", opacity: 0.3}}, isFilled: {true: {}, false: {}}, isDarkMode: {true: {}, false: {}}}, compoundVariants: [{isFilled: true, isDarkMode: true, css: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"}}, {isFilled: true, isDarkMode: false, css: {boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"}}]});
var Vp = re2("video", {position: "absolute", top: 0, left: 0, width: "100%", height: "100%", maxWidth: "100%", minWidth: "100%", pointerEvents: "none", objectFit: "cover", userSelect: "none", borderRadius: 2});
var ui = new _s();
var hi = new Zs();
var mi = new qs();
var gi = new li();
var ko = new Qs();
var $p = new si();
var Np = new ei();
var ms = new ni();
var Kp = new ci();
var Wp = new pi();
var mn = {["rectangle"]: ui, ["triangle"]: hi, ["ellipse"]: mi, ["draw"]: gi, ["arrow"]: ko, ["text"]: $p, ["group"]: Np, ["sticky"]: ms, ["image"]: Kp, ["video"]: Wp};
var _a3 = (s10) => typeof s10 == "string" ? mn[s10] : mn[s10.type];
function dt(s10) {
  if (s10 === null)
    return s10;
  if (s10 instanceof Date)
    return new Date(s10.getTime());
  if (typeof s10 == "object")
    if (typeof s10[Symbol.iterator] == "function") {
      let e14 = [];
      if (s10.length > 0)
        for (let t13 of s10)
          e14.push(dt(t13));
      return e14;
    } else {
      let e14 = Object.keys(s10), t13 = {};
      if (e14.length > 0)
        for (let n10 of e14)
          t13[n10] = dt(s10[n10]);
      return t13;
    }
  return s10;
}
var Ya = false;
var ie2 = class {
  static getShapeUtil(e14) {
    return _a3(e14);
  }
  static getSelectedShapes(e14, t13) {
    let n10 = ie2.getPage(e14, t13);
    return ie2.getSelectedIds(e14, t13).map((i10) => n10.shapes[i10]);
  }
  static screenToWorld(e14, t13) {
    let n10 = ie2.getPageState(e14, e14.appState.currentPageId).camera;
    return e.sub(e.div(t13, n10.zoom), n10.point);
  }
  static getCameraZoom(e14) {
    return Utils.clamp(e14, 0.1, 5);
  }
  static getPage(e14, t13) {
    return e14.document.pages[t13];
  }
  static getPageState(e14, t13) {
    return e14.document.pageStates[t13];
  }
  static getSelectedIds(e14, t13) {
    return ie2.getPageState(e14, t13).selectedIds;
  }
  static getShapes(e14, t13) {
    return Object.values(ie2.getPage(e14, t13).shapes);
  }
  static getCamera(e14, t13) {
    return ie2.getPageState(e14, t13).camera;
  }
  static getShape(e14, t13, n10) {
    return ie2.getPage(e14, n10).shapes[t13];
  }
  static getCenter(e14) {
    return ie2.getShapeUtil(e14).getCenter(e14);
  }
  static getBounds(e14) {
    return ie2.getShapeUtil(e14).getBounds(e14);
  }
  static getRotatedBounds(e14) {
    return ie2.getShapeUtil(e14).getRotatedBounds(e14);
  }
  static getSelectedBounds(e14) {
    return Utils.getCommonBounds(ie2.getSelectedShapes(e14, e14.appState.currentPageId).map((t13) => ie2.getShapeUtil(t13).getBounds(t13)));
  }
  static getParentId(e14, t13, n10) {
    return ie2.getShape(e14, t13, n10).parentId;
  }
  static getDocumentBranch(e14, t13, n10) {
    let o13 = ie2.getShape(e14, t13, n10);
    return o13.children === void 0 ? [t13] : [t13, ...o13.children.flatMap((i10) => ie2.getDocumentBranch(e14, i10, n10))];
  }
  static getSelectedBranchSnapshot(e14, t13, n10) {
    let o13 = ie2.getPage(e14, t13), i10 = ie2.getSelectedIds(e14, t13).flatMap((a10) => ie2.getDocumentBranch(e14, a10, t13).map((l10) => o13.shapes[l10])).filter((a10) => !a10.isLocked).map(Utils.deepClone);
    return n10 !== void 0 ? i10.map((a10) => f8({id: a10.id}, n10(a10))) : i10;
  }
  static getSelectedShapeSnapshot(e14, t13, n10) {
    let o13 = ie2.getSelectedShapes(e14, t13).filter((i10) => !i10.isLocked).map(Utils.deepClone);
    return n10 !== void 0 ? o13.map((i10) => f8({id: i10.id}, n10(i10))) : o13;
  }
  static getAllEffectedShapeIds(e14, t13, n10) {
    let o13 = ie2.getPage(e14, n10), i10 = new Set(t13);
    return t13.forEach((a10) => {
      let l10 = o13.shapes[a10];
      function r12(p10) {
        p10.children !== void 0 && p10.children.filter((u10) => !i10.has(u10)).forEach((u10) => {
          i10.add(u10), r12(o13.shapes[u10]);
        });
      }
      r12(l10);
      function c10(p10) {
        let u10 = p10.parentId;
        u10 !== o13.id && (i10.has(u10) || (i10.add(u10), c10(o13.shapes[u10])));
      }
      c10(l10), i10.forEach((p10) => {
        Object.values(o13.bindings).filter((u10) => u10.fromId === p10 || u10.toId === p10).forEach((u10) => i10.add(u10.fromId === p10 ? u10.toId : u10.fromId));
      });
    }), Array.from(i10.values());
  }
  static getLinkedShapeIds(e14, t13, n10, o13 = true) {
    let i10 = ie2.getSelectedIds(e14, t13), a10 = ie2.getPage(e14, t13), l10 = new Set(i10), r12 = new Set(), c10 = [...i10], p10 = new Set(Object.values(a10.shapes).filter((u10) => {
      var h10;
      return u10.type === "arrow" && (u10.handles.start.bindingId || ((h10 = u10.handles) == null ? void 0 : h10.end.bindingId));
    }));
    for (; c10.length; ) {
      let u10 = c10.pop();
      if (!(u10 && p10.size))
        break;
      r12.has(u10) || (r12.add(u10), p10.forEach((h10) => {
        var S10, w10;
        let {handles: {start: {bindingId: g10}, end: {bindingId: m10}}} = h10, T10 = g10 ? a10.bindings[g10] : null, y10 = m10 ? a10.bindings[m10] : null, b10 = false;
        T10 && T10.toId === u10 ? (n10 === "center" ? b10 = true : ((S10 = h10.decorations) == null ? void 0 : S10.start) && y10 ? b10 = n10 === "left" : b10 = n10 === "right", b10 && (o13 && l10.add(h10.id), l10.add(u10), y10 && (l10.add(y10.toId), c10.push(y10.toId)))) : y10 && y10.toId === u10 && (n10 === "center" ? b10 = true : ((w10 = h10.decorations) == null ? void 0 : w10.end) && T10 ? b10 = n10 === "left" : b10 = n10 === "right", b10 && (o13 && l10.add(h10.id), l10.add(u10), T10 && (l10.add(T10.toId), c10.push(T10.toId)))), (!T10 || l10.has(T10.toId)) && (!y10 || l10.has(y10.toId)) && p10.delete(h10);
      }));
    }
    return Array.from(l10.values());
  }
  static getChildIndexAbove(e14, t13, n10) {
    let o13 = e14.document.pages[n10], i10 = o13.shapes[t13], a10;
    if (i10.parentId === o13.id)
      a10 = Object.values(o13.shapes).filter((c10) => c10.parentId === o13.id).sort((c10, p10) => c10.childIndex - p10.childIndex);
    else {
      let c10 = o13.shapes[i10.parentId];
      if (!c10.children)
        throw Error("No children in parent!");
      a10 = c10.children.map((p10) => o13.shapes[p10]).sort((p10, u10) => p10.childIndex - u10.childIndex);
    }
    let l10 = a10.indexOf(i10), r12 = a10[l10 + 1];
    return r12 ? r12.childIndex : i10.childIndex + 1;
  }
  static getBeforeShape(e14, t13) {
    return Object.fromEntries(Object.keys(t13).map((n10) => [n10, e14[n10]]));
  }
  static mutateShapes(e14, t13, n10, o13) {
    let i10 = {}, a10 = {};
    t13.forEach((r12, c10) => {
      let p10 = ie2.getShape(e14, r12, o13);
      if (p10.isLocked)
        return;
      let u10 = n10(p10, c10);
      u10 && (i10[r12] = ie2.getBeforeShape(p10, u10), a10[r12] = u10);
    });
    let l10 = Utils.deepMerge(e14, {document: {pages: {[e14.appState.currentPageId]: {shapes: a10}}}});
    return {before: i10, after: a10, data: l10};
  }
  static createShapes(e14, t13, n10) {
    let o13 = {document: {pages: {[n10]: {shapes: f8({}, Object.fromEntries(t13.flatMap((a10) => {
      let l10 = [[a10.id, void 0]];
      if (a10.parentId !== n10) {
        let r12 = ie2.getShape(e14, a10.parentId, n10);
        if (!r12.children)
          throw Error("No children in parent!");
        l10.push([r12.id, {children: r12.children}]);
      }
      return l10;
    })))}}}}, i10 = {document: {pages: {[n10]: {shapes: {shapes: f8({}, Object.fromEntries(t13.flatMap((a10) => {
      let l10 = [[a10.id, a10]];
      if (a10.parentId !== n10) {
        let r12 = ie2.getShape(e14, a10.parentId, n10);
        if (!r12.children)
          throw Error("No children in parent!");
        l10.push([r12.id, {children: [...r12.children, a10.id]}]);
      }
      return l10;
    })))}}}}};
    return {before: o13, after: i10};
  }
  static deleteShapes(e14, t13, n10) {
    n10 = n10 || e14.appState.currentPageId;
    let o13 = ie2.getPage(e14, n10), i10 = typeof t13[0] == "string" ? t13 : t13.map((r12) => r12.id), a10 = {document: {pages: {[n10]: {shapes: f8({}, Object.fromEntries(i10.flatMap((r12) => {
      let c10 = o13.shapes[r12], p10 = [[c10.id, c10]];
      if (c10.parentId !== n10) {
        let u10 = o13.shapes[c10.parentId];
        if (!u10.children)
          throw Error("No children in parent!");
        p10.push([u10.id, {children: u10.children}]);
      }
      return p10;
    }))), bindings: f8({}, Object.fromEntries(Object.values(o13.bindings).filter((r12) => i10.includes(r12.fromId) || i10.includes(r12.toId)).map((r12) => [r12.id, r12])))}}}}, l10 = {document: {pages: {[n10]: {shapes: f8({}, Object.fromEntries(i10.flatMap((r12) => {
      let c10 = o13.shapes[r12], p10 = [[c10.id, void 0]];
      if (c10.parentId !== o13.id) {
        let u10 = o13.shapes[c10.parentId];
        if (!u10.children)
          throw Error("No children in parent!");
        p10.push([u10.id, {children: u10.children.filter((h10) => h10 !== c10.id)}]);
      }
      return p10;
    })))}}}};
    return {before: a10, after: l10};
  }
  static onSessionComplete(e14) {
    var n10, o13;
    let t13 = (o13 = (n10 = ie2.getShapeUtil(e14)).onSessionComplete) == null ? void 0 : o13.call(n10, e14);
    return t13 ? f8(f8({}, e14), t13) : e14;
  }
  static onChildrenChange(e14, t13, n10) {
    var i10, a10;
    if (!t13.children)
      return;
    let o13 = (a10 = (i10 = ie2.getShapeUtil(t13)).onChildrenChange) == null ? void 0 : a10.call(i10, t13, t13.children.map((l10) => ie2.getShape(e14, l10, n10)));
    return o13 ? f8(f8({}, t13), o13) : t13;
  }
  static updateArrowBindings(e14, t13) {
    var a10, l10, r12, c10, p10, u10;
    let n10 = {start: dt(t13.handles.start), end: dt(t13.handles.end)}, o13 = {isBound: false, handle: t13.handles.start, point: e.add(t13.handles.start.point, t13.point)}, i10 = {isBound: false, handle: t13.handles.end, point: e.add(t13.handles.end.point, t13.point)};
    if (t13.handles.start.bindingId) {
      let h10 = ((a10 = t13.decorations) == null ? void 0 : a10.start) !== void 0, g10 = t13.handles.start, m10 = e14.bindings[t13.handles.start.bindingId];
      if (!m10)
        throw Error("Could not find a binding to match the start handle's bindingId");
      let T10 = e14.shapes[m10.toId], y10 = ie2.getShapeUtil(T10), b10 = y10.getBounds(T10), S10 = y10.getExpandedBounds(T10), w10 = h10 ? Utils.expandBounds(b10, m10.distance) : b10, {minX: D10, minY: B10, width: I10, height: P10} = S10, v10 = e.add([D10, B10], e.mulV([I10, P10], e.rotWith(m10.point, [0.5, 0.5], T10.rotation || 0)));
      o13 = {isBound: true, hasDecoration: h10, binding: m10, handle: g10, point: v10, util: y10, target: T10, bounds: b10, expandedBounds: S10, intersectBounds: w10, center: y10.getCenter(T10)};
    }
    if (t13.handles.end.bindingId) {
      let h10 = ((l10 = t13.decorations) == null ? void 0 : l10.end) !== void 0, g10 = t13.handles.end, m10 = e14.bindings[t13.handles.end.bindingId];
      if (!m10)
        throw Error("Could not find a binding to match the end handle's bindingId");
      let T10 = e14.shapes[m10.toId], y10 = ie2.getShapeUtil(T10), b10 = y10.getBounds(T10), S10 = y10.getExpandedBounds(T10), w10 = h10 ? Utils.expandBounds(b10, m10.distance) : b10, {minX: D10, minY: B10, width: I10, height: P10} = S10, v10 = e.add([D10, B10], e.mulV([I10, P10], e.rotWith(m10.point, [0.5, 0.5], T10.rotation || 0)));
      i10 = {isBound: true, hasDecoration: h10, binding: m10, handle: g10, point: v10, util: y10, target: T10, bounds: b10, expandedBounds: S10, intersectBounds: w10, center: y10.getCenter(T10)};
    }
    for (let h10 of ["end", "start"]) {
      let g10 = h10 === "start" ? o13 : i10, m10 = h10 === "start" ? i10 : o13;
      if (g10.isBound)
        if (!g10.binding.distance)
          n10[h10].point = e.sub(g10.point, t13.point);
        else {
          let T10 = e.uni(e.sub(g10.point, m10.point));
          switch (g10.target.type) {
            case "ellipse": {
              let y10 = intersectRayEllipse(m10.point, T10, g10.center, g10.target.radius[0] + (g10.hasDecoration ? g10.binding.distance : 0), g10.target.radius[1] + (g10.hasDecoration ? g10.binding.distance : 0), g10.target.rotation || 0).points.sort((b10, S10) => e.dist(b10, m10.point) - e.dist(S10, m10.point));
              y10[0] !== void 0 && (n10[h10].point = e.toFixed(e.sub(y10[0], t13.point)));
              break;
            }
            case "triangle": {
              let y10 = g10.target.point, b10 = Ft(g10.target.size, g10.hasDecoration ? 16 : 0, g10.target.rotation).map((w10) => e.add(w10, y10)), S10 = Utils.pointsToLineSegments(b10, true).map(([w10, D10]) => intersectRayLineSegment(m10.point, T10, w10, D10)).filter((w10) => w10.didIntersect).flatMap((w10) => w10.points).sort((w10, D10) => e.dist(w10, m10.point) - e.dist(D10, m10.point));
              S10[0] !== void 0 && (n10[h10].point = e.toFixed(e.sub(S10[0], t13.point)));
              break;
            }
            default: {
              let y10 = intersectRayBounds(m10.point, T10, g10.intersectBounds, g10.target.rotation).filter((S10) => S10.didIntersect).map((S10) => S10.points[0]).sort((S10, w10) => e.dist(S10, m10.point) - e.dist(w10, m10.point));
              if (!y10[0])
                continue;
              let b10;
              if (m10.isBound && (b10 = intersectRayBounds(m10.point, T10, m10.intersectBounds, m10.target.rotation).filter((w10) => w10.didIntersect).map((w10) => w10.points[0]).sort((w10, D10) => e.dist(w10, m10.point) - e.dist(D10, m10.point))[0]), m10.isBound && (y10.length < 2 || b10 && y10[0] && Math.ceil(e.dist(y10[0], b10)) < 16 * 2.5 || Utils.boundsContain(g10.expandedBounds, m10.expandedBounds) || Utils.boundsCollide(g10.expandedBounds, m10.expandedBounds))) {
                let S10 = e.uni(e.sub(m10.point, g10.point)), w10 = intersectRayBounds(g10.point, S10, g10.bounds, g10.target.rotation).filter((D10) => D10.didIntersect).map((D10) => D10.points[0]);
                if (!w10[0])
                  continue;
                n10[h10].point = e.toFixed(e.sub(w10[0], t13.point)), n10[h10 === "start" ? "end" : "start"].point = e.toFixed(e.add(e.sub(w10[0], t13.point), e.mul(S10, Math.min(e.dist(w10[0], m10.point), 16 * 2.5 * (Utils.boundsContain(m10.bounds, g10.intersectBounds) ? -1 : 1)))));
              } else if (!m10.isBound && (y10[0] && e.dist(y10[0], m10.point) < 16 * 2.5 || Utils.pointInBounds(m10.point, g10.intersectBounds))) {
                let S10 = e.uni(e.sub(g10.center, m10.point));
                return (c10 = (r12 = ie2.getShapeUtil(t13)).onHandleChange) == null ? void 0 : c10.call(r12, t13, {[h10]: C5(f8({}, t13.handles[h10]), {point: e.toFixed(e.add(e.sub(m10.point, t13.point), e.mul(S10, 16 * 2.5)))})});
              } else
                y10[0] && (n10[h10].point = e.toFixed(e.sub(y10[0], t13.point)));
            }
          }
        }
    }
    return (u10 = (p10 = ie2.getShapeUtil(t13)).onHandleChange) == null ? void 0 : u10.call(p10, t13, n10);
  }
  static transform(e14, t13, n10) {
    let o13 = ie2.getShapeUtil(e14).transform(e14, t13, n10);
    return o13 ? f8(f8({}, e14), o13) : e14;
  }
  static transformSingle(e14, t13, n10) {
    let o13 = ie2.getShapeUtil(e14).transformSingle(e14, t13, n10);
    return o13 ? f8(f8({}, e14), o13) : e14;
  }
  static getRotatedShapeMutation(e14, t13, n10, o13) {
    var c10, p10;
    let i10 = e.sub(t13, e14.point), a10 = e.rotWith(t13, n10, o13), l10 = e.toFixed(e.sub(a10, i10));
    if (e14.handles !== void 0)
      return (p10 = (c10 = this.getShapeUtil(e14)).onHandleChange) == null ? void 0 : p10.call(c10, C5(f8({}, e14), {point: l10}), Object.fromEntries(Object.entries(e14.handles).map(([h10, g10]) => {
        let m10 = e.toFixed(e.rotWith(g10.point, i10, o13));
        return [h10, C5(f8({}, g10), {point: m10})];
      })));
    let r12 = Utils.clampRadians((e14.rotation || 0) + o13);
    return {point: l10, rotation: r12};
  }
  static updateParents(e14, t13, n10) {
    let o13 = ie2.getPage(e14, t13);
    if (n10.length === 0)
      return;
    let {shapes: i10} = ie2.getPage(e14, t13), a10 = Array.from(new Set(n10.map((l10) => i10[l10].parentId).values())).filter((l10) => l10 !== o13.id);
    for (let l10 of a10) {
      let r12 = i10[l10];
      if (!r12.children)
        throw Error("A shape is parented to a shape without a children array.");
      ie2.onChildrenChange(e14, r12, t13);
    }
    ie2.updateParents(e14, t13, a10);
  }
  static getBinding(e14, t13, n10) {
    return ie2.getPage(e14, n10).bindings[t13];
  }
  static getBindings(e14, t13) {
    let n10 = ie2.getPage(e14, t13);
    return Object.values(n10.bindings);
  }
  static getBindableShapeIds(e14) {
    return ie2.getShapes(e14, e14.appState.currentPageId).filter((t13) => ie2.getShapeUtil(t13).canBind).sort((t13, n10) => n10.childIndex - t13.childIndex).map((t13) => t13.id);
  }
  static getBindingsWithShapeIds(e14, t13, n10) {
    return Array.from(new Set(ie2.getBindings(e14, n10).filter((o13) => t13.includes(o13.toId) || t13.includes(o13.fromId))).values());
  }
  static getRelatedBindings(e14, t13, n10) {
    let o13 = new Set(t13), i10 = ie2.getPage(e14, n10), a10 = Object.values(i10.bindings), l10 = new Set(a10.filter((p10) => o13.has(p10.toId) || o13.has(p10.fromId))), r12 = l10.size, c10 = -1;
    for (; c10 !== 0; )
      l10.forEach((p10) => {
        let u10 = p10.fromId;
        for (let h10 of a10)
          h10.fromId === u10 && l10.add(h10), h10.toId === u10 && l10.add(h10);
      }), c10 = l10.size - r12, r12 = l10.size;
    return Array.from(l10.values());
  }
  static normalizeText(e14) {
    return e14.replace(ie2.fixNewLines, `
`).split(`
`).map((t13) => t13 || " ").join(`
`);
  }
  static assertShapeHasProperty(e14, t13) {
    if (e14[t13] === void 0)
      throw new Error();
  }
  static warn(e14) {
    Ya && console.warn(e14);
  }
  static error(e14) {
    Ya && console.error(e14);
  }
  static getSvgString(e14, t13 = 1) {
    let n10 = e14.cloneNode(true);
    return e14.setAttribute("width", +e14.getAttribute("width") * t13 + ""), e14.setAttribute("height", +e14.getAttribute("height") * t13 + ""), new XMLSerializer().serializeToString(n10).replaceAll("&#10;      ", "").replaceAll(/((\s|")[0-9]*\.[0-9]{2})([0-9]*)(\b|"|\))/g, "$1");
  }
  static getSvgAsDataUrl(e14, t13 = 1) {
    let n10 = ie2.getSvgString(e14, t13);
    return `data:image/svg+xml;base64,${window.btoa(unescape(n10))}`;
  }
  static getImageForSvg(o13) {
    return ee(this, arguments, function* (e14, t13 = "png", n10 = {}) {
      let {scale: i10 = 2, quality: a10 = 1} = n10, l10 = ie2.getSvgString(e14, i10), r12 = +e14.getAttribute("width"), c10 = +e14.getAttribute("height");
      if (!l10)
        return;
      let p10 = yield new Promise((h10) => {
        let g10 = new Image();
        g10.crossOrigin = "anonymous";
        let T10 = `data:image/svg+xml;base64,${window.btoa(unescape(encodeURIComponent(l10)))}`;
        g10.onload = () => {
          let y10 = document.createElement("canvas"), b10 = y10.getContext("2d");
          y10.width = r12, y10.height = c10, b10.drawImage(g10, 0, 0, r12, c10), URL.revokeObjectURL(T10), h10(y10);
        }, g10.onerror = () => {
          console.warn("Could not convert that SVG to an image.");
        }, g10.src = T10;
      });
      return yield new Promise((h10) => p10.toBlob((g10) => h10(g10), "image/" + t13, a10));
    });
  }
};
var x7 = ie2;
d8(x7, "copyStringToClipboard", (e14) => {
  try {
    navigator.clipboard && navigator.clipboard.write([new ClipboardItem({"text/plain": new Blob([e14], {type: "text/plain"})})]);
  } catch (t13) {
    let n10 = document.createElement("textarea");
    n10.setAttribute("position", "fixed"), n10.setAttribute("top", "0"), n10.setAttribute("readonly", "true"), n10.setAttribute("contenteditable", "true"), n10.style.position = "fixed", n10.value = e14, document.body.appendChild(n10), n10.focus(), n10.select();
    try {
      let o13 = document.createRange();
      o13.selectNodeContents(n10);
      let i10 = window.getSelection();
      i10 && (i10.removeAllRanges(), i10.addRange(o13), n10.setSelectionRange(0, n10.value.length)), document.execCommand("copy");
    } catch (o13) {
    } finally {
      document.body.removeChild(n10);
    }
  }
}), d8(x7, "flattenShape", (e14, t13) => {
  var n10;
  return [t13, ...((n10 = t13.children) != null ? n10 : []).map((o13) => ie2.getShape(e14, o13, e14.appState.currentPageId)).sort((o13, i10) => o13.childIndex - i10.childIndex).flatMap((o13) => ie2.flattenShape(e14, o13))];
}), d8(x7, "flattenPage", (e14, t13) => Object.values(e14.document.pages[t13].shapes).sort((n10, o13) => n10.childIndex - o13.childIndex).reduce((n10, o13) => [...n10, ...ie2.flattenShape(e14, o13)], [])), d8(x7, "getTopChildIndex", (e14, t13) => {
  let n10 = ie2.getShapes(e14, t13);
  return n10.length === 0 ? 1 : n10.filter((o13) => o13.parentId === t13).sort((o13, i10) => i10.childIndex - o13.childIndex)[0].childIndex + 1;
}), d8(x7, "fixNewLines", /\r?\n|\r/g);
function Xa(s10, e14, t13) {
  let {currentPageId: n10} = s10, o13 = e14.map((h10) => s10.getShape(h10)), i10 = o13.map((h10) => ({id: h10.id, point: [...h10.point], bounds: x7.getBounds(h10)})), a10 = Utils.getCommonBounds(i10.map(({bounds: h10}) => h10)), l10 = a10.minX + a10.width / 2, r12 = a10.minY + a10.height / 2, c10 = Object.fromEntries(i10.map(({id: h10, point: g10, bounds: m10}) => [h10, {prev: g10, next: {["top"]: [g10[0], a10.minY], ["centerVertical"]: [g10[0], r12 - m10.height / 2], ["bottom"]: [g10[0], a10.maxY - m10.height], ["left"]: [a10.minX, g10[1]], ["centerHorizontal"]: [l10 - m10.width / 2, g10[1]], ["right"]: [a10.maxX - m10.width, g10[1]]}[t13]}])), {before: p10, after: u10} = x7.mutateShapes(s10.state, e14, (h10) => c10[h10.id] ? {point: c10[h10.id].next} : h10, n10);
  return o13.forEach((h10) => {
    if (h10.type === "group") {
      let g10 = e.sub(u10[h10.id].point, p10[h10.id].point);
      h10.children.forEach((m10) => {
        let T10 = s10.getShape(m10);
        p10[T10.id] = {point: T10.point}, u10[T10.id] = {point: e.add(T10.point, g10)};
      }), delete p10[h10.id], delete u10[h10.id];
    }
  }), {id: "align", before: {document: {pages: {[n10]: {shapes: p10}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: u10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function qa(s10, e14) {
  return {id: "change_page", before: {appState: {currentPageId: s10.currentPageId}}, after: {appState: {currentPageId: e14}}};
}
function Ja(s10, e14) {
  var o13;
  let t13 = s10, n10 = new Set(e14);
  for (; n10.has(t13); )
    t13 = ((o13 = /^.*(\d+)$/.exec(t13)) == null ? void 0 : o13[1]) ? t13.replace(/(\d+)(?=\D?)$/, (i10) => (+i10 + 1).toString()) : `${t13} 1`;
  return t13;
}
function Qa(s10, e14, t13 = Utils.uniqueId(), n10 = "Page") {
  let {currentPageId: o13} = s10, i10 = Object.values(s10.state.document.pages).sort((p10, u10) => {
    var h10, g10;
    return ((h10 = p10.childIndex) != null ? h10 : 0) - ((g10 = u10.childIndex) != null ? g10 : 0);
  }), a10 = i10[i10.length - 1], l10 = (a10 == null ? void 0 : a10.childIndex) ? (a10 == null ? void 0 : a10.childIndex) + 1 : 1, r12 = {id: t13, name: Ja(n10, i10.map((p10) => {
    var u10;
    return (u10 = p10.name) != null ? u10 : "";
  })), childIndex: l10, shapes: {}, bindings: {}}, c10 = {id: t13, selectedIds: [], camera: {point: e14, zoom: 1}, editingId: void 0, bindingId: void 0, hoveredId: void 0, pointedId: void 0};
  return {id: "create_page", before: {appState: {currentPageId: o13}, document: {pages: {[t13]: void 0}, pageStates: {[t13]: void 0}}}, after: {appState: {currentPageId: r12.id}, document: {pages: {[t13]: r12}, pageStates: {[t13]: c10}}}};
}
function Si(s10, e14, t13 = []) {
  let {currentPageId: n10} = s10, o13 = {}, i10 = {};
  e14.forEach((r12) => {
    o13[r12.id] = void 0, i10[r12.id] = r12;
  });
  let a10 = {}, l10 = {};
  return t13.forEach((r12) => {
    a10[r12.id] = void 0, l10[r12.id] = r12;
  }), {id: "create", before: {document: {pages: {[n10]: {shapes: o13, bindings: a10}}, pageStates: {[n10]: {selectedIds: [...s10.selectedIds]}}}}, after: {document: {pages: {[n10]: {shapes: i10, bindings: l10}}, pageStates: {[n10]: {selectedIds: e14.map((r12) => r12.id)}}}}};
}
function ed(s10, e14) {
  let {currentPageId: t13, document: {pages: n10, pageStates: o13}} = s10, i10 = Object.values(n10).sort((r12, c10) => (r12.childIndex || 0) - (c10.childIndex || 0)), a10 = i10.findIndex((r12) => r12.id === e14), l10;
  return e14 === t13 ? a10 === i10.length - 1 ? l10 = i10[i10.length - 2].id : l10 = i10[a10 + 1].id : l10 = t13, {id: "delete_page", before: {appState: {currentPageId: e14}, document: {pages: {[e14]: f8({}, n10[e14])}, pageStates: {[e14]: f8({}, o13[e14])}}}, after: {appState: {currentPageId: l10}, document: {pages: {[e14]: void 0}, pageStates: {[e14]: void 0}}}};
}
function td(s10, e14, t13) {
  let n10 = {shapes: {}, bindings: {}}, o13 = {shapes: {}, bindings: {}}, i10 = [], a10 = new Set(), l10 = new Set();
  e14.filter((c10) => !x7.getShape(s10, c10, t13).isLocked).forEach((c10) => {
    a10.add(c10);
    let p10 = x7.getShape(s10, c10, t13);
    n10.shapes[c10] = p10, o13.shapes[c10] = void 0, p10.children !== void 0 && p10.children.forEach((u10) => {
      a10.add(u10);
      let h10 = x7.getShape(s10, u10, t13);
      n10.shapes[u10] = h10, o13.shapes[u10] = void 0;
    }), p10.parentId !== t13 && i10.push(x7.getShape(s10, p10.parentId, t13)), p10.assetId && l10.add(p10.assetId);
  }), i10.forEach((c10) => {
    var p10;
    e14.includes(c10.id) || (a10.add(c10.id), n10.shapes[c10.id] = {children: c10.children}, o13.shapes[c10.id] = {children: c10.children.filter((u10) => !e14.includes(u10))}, ((p10 = o13.shapes[c10.id]) == null ? void 0 : p10.children.length) === 0 && (o13.shapes[c10.id] = void 0, n10.shapes[c10.id] = x7.getShape(s10, c10.id, t13)));
  });
  let r12 = x7.getPage(s10, t13);
  return Object.values(r12.bindings).filter((c10) => a10.has(c10.fromId) || a10.has(c10.toId)).forEach((c10) => {
    for (let p10 of [c10.toId, c10.fromId])
      if (o13.shapes[p10] === void 0) {
        n10.bindings[c10.id] = c10, o13.bindings[c10.id] = void 0;
        let u10 = r12.shapes[p10];
        u10 && u10.handles && Object.values(u10.handles).filter((h10) => h10.bindingId === c10.id).forEach((h10) => {
          var g10, m10, T10, y10, b10, S10;
          n10.shapes[p10] = C5(f8({}, n10.shapes[p10]), {handles: C5(f8({}, (g10 = n10.shapes[p10]) == null ? void 0 : g10.handles), {[h10.id]: C5(f8({}, (T10 = (m10 = n10.shapes[p10]) == null ? void 0 : m10.handles) == null ? void 0 : T10[h10.id]), {bindingId: c10.id})})}), a10.has(p10) || (o13.shapes[p10] = C5(f8({}, o13.shapes[p10]), {handles: C5(f8({}, (y10 = o13.shapes[p10]) == null ? void 0 : y10.handles), {[h10.id]: C5(f8({}, (S10 = (b10 = o13.shapes[p10]) == null ? void 0 : b10.handles) == null ? void 0 : S10[h10.id]), {bindingId: void 0})})}));
        });
      }
  }), Object.values(s10.document.pages).flatMap((c10) => Object.values(c10.shapes)).forEach((c10) => {
    "assetId" in c10 && c10.assetId && !a10.has(c10.id) && l10.delete(c10.assetId);
  }), {before: n10, after: o13, assetsToRemove: Array.from(l10)};
}
var qp = (s10, e14) => {
  let t13 = f8({}, s10);
  return e14.forEach((n10) => t13[n10] = void 0), t13;
};
function Ti(s10, e14, t13 = s10.currentPageId) {
  let {pageState: n10, selectedIds: o13, document: {assets: i10}} = s10, {before: a10, after: l10, assetsToRemove: r12} = td(s10.state, e14, t13), c10 = qp(i10, r12);
  return {id: "delete", before: {document: {assets: i10, pages: {[t13]: a10}, pageStates: {[t13]: {selectedIds: [...s10.selectedIds]}}}}, after: {document: {assets: c10, pages: {[t13]: l10}, pageStates: {[t13]: {selectedIds: o13.filter((p10) => !e14.includes(p10)), hoveredId: n10.hoveredId && e14.includes(n10.hoveredId) ? void 0 : n10.hoveredId}}}}};
}
function od(s10, e14, t13) {
  let {currentPageId: n10} = s10, o13 = e14.map((r12) => s10.getShape(r12)), i10 = Object.fromEntries(Qp(o13, t13).map((r12) => [r12.id, r12])), {before: a10, after: l10} = x7.mutateShapes(s10.state, e14.filter((r12) => i10[r12] !== void 0), (r12) => ({point: i10[r12.id].next}), n10);
  return o13.forEach((r12) => {
    if (r12.type === "group") {
      let c10 = p.sub(l10[r12.id].point, a10[r12.id].point);
      r12.children.forEach((p10) => {
        let u10 = s10.getShape(p10);
        a10[u10.id] = {point: u10.point}, l10[u10.id] = {point: p.add(u10.point, c10)};
      }), delete a10[r12.id], delete l10[r12.id];
    }
  }), {id: "distribute", before: {document: {pages: {[n10]: {shapes: a10}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: l10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function Qp(s10, e14) {
  let t13 = s10.map((a10) => {
    let l10 = x7.getShapeUtil(a10);
    return {id: a10.id, point: [...a10.point], bounds: l10.getBounds(a10), center: l10.getCenter(a10)};
  }), n10 = t13.length, o13 = Utils.getCommonBounds(t13.map(({bounds: a10}) => a10)), i10 = [];
  switch (e14) {
    case "horizontal": {
      let a10 = t13.reduce((l10, r12) => l10 + r12.bounds.width, 0);
      if (a10 > o13.width) {
        let l10 = t13.sort((h10, g10) => h10.bounds.minX - g10.bounds.minX)[0], r12 = t13.sort((h10, g10) => g10.bounds.maxX - h10.bounds.maxX)[0], c10 = t13.filter((h10) => h10 !== l10 && h10 !== r12).sort((h10, g10) => h10.center[0] - g10.center[0]), p10 = (r12.center[0] - l10.center[0]) / (n10 - 1), u10 = l10.center[0] + p10;
        c10.forEach(({id: h10, point: g10, bounds: m10}, T10) => {
          i10.push({id: h10, prev: g10, next: [u10 + p10 * T10 - m10.width / 2, m10.minY]});
        });
      } else {
        let l10 = t13.sort((p10, u10) => p10.center[0] - u10.center[0]), r12 = o13.minX, c10 = (o13.width - a10) / (n10 - 1);
        l10.forEach(({id: p10, point: u10, bounds: h10}) => {
          i10.push({id: p10, prev: u10, next: [r12, h10.minY]}), r12 += h10.width + c10;
        });
      }
      break;
    }
    case "vertical": {
      let a10 = t13.reduce((l10, r12) => l10 + r12.bounds.height, 0);
      if (a10 > o13.height) {
        let l10 = t13.sort((h10, g10) => h10.bounds.minY - g10.bounds.minY)[0], r12 = t13.sort((h10, g10) => g10.bounds.maxY - h10.bounds.maxY)[0], c10 = t13.filter((h10) => h10 !== l10 && h10 !== r12).sort((h10, g10) => h10.center[1] - g10.center[1]), p10 = (r12.center[1] - l10.center[1]) / (n10 - 1), u10 = l10.center[1] + p10;
        c10.forEach(({id: h10, point: g10, bounds: m10}, T10) => {
          i10.push({id: h10, prev: g10, next: [m10.minX, u10 + p10 * T10 - m10.height / 2]});
        });
      } else {
        let l10 = t13.sort((p10, u10) => p10.center[1] - u10.center[1]), r12 = o13.minY, c10 = (o13.height - a10) / (n10 - 1);
        l10.forEach(({id: p10, point: u10, bounds: h10}) => {
          i10.push({id: p10, prev: u10, next: [h10.minX, r12]}), r12 += h10.height + c10;
        });
      }
      break;
    }
  }
  return i10;
}
function sd(s10, e14) {
  let t13 = Utils.uniqueId(), {currentPageId: n10, page: o13, pageState: {camera: i10}} = s10, a10 = C5(f8({}, o13), {id: t13, name: o13.name + " Copy", shapes: Object.fromEntries(Object.entries(o13.shapes).map(([l10, r12]) => [l10, C5(f8({}, r12), {parentId: r12.parentId === e14 ? t13 : r12.parentId})]))});
  return {id: "duplicate_page", before: {appState: {currentPageId: n10}, document: {pages: {[t13]: void 0}, pageStates: {[t13]: void 0}}}, after: {appState: {currentPageId: t13}, document: {pages: {[t13]: a10}, pageStates: {[t13]: C5(f8({}, o13), {id: t13, selectedIds: [], camera: f8({}, i10), editingId: void 0, bindingId: void 0, hoveredId: void 0, pointedId: void 0})}}}};
}
function id(s10, e14, t13) {
  let {selectedIds: n10, currentPageId: o13, page: i10, shapes: a10} = s10, l10 = {shapes: {}, bindings: {}}, r12 = {shapes: {}, bindings: {}}, c10 = {}, p10 = e14.map((g10) => s10.getShape(g10)).filter((g10) => !e14.includes(g10.parentId));
  p10.forEach((g10) => {
    let m10 = Utils.uniqueId();
    if (l10.shapes[m10] = void 0, r12.shapes[m10] = C5(f8({}, Utils.deepClone(g10)), {id: m10, childIndex: x7.getChildIndexAbove(s10.state, g10.id, o13)}), g10.children && (r12.shapes[m10].children = []), g10.parentId !== o13) {
      let T10 = s10.getShape(g10.parentId);
      l10.shapes[T10.id] = C5(f8({}, l10.shapes[T10.id]), {children: T10.children}), r12.shapes[T10.id] = C5(f8({}, r12.shapes[T10.id]), {children: [...(r12.shapes[T10.id] || T10).children, m10]});
    }
    c10[g10.id] = m10;
  }), p10.forEach((g10) => {
    g10.children && g10.children.forEach((m10) => {
      var S10, w10;
      let T10 = s10.getShape(m10), y10 = Utils.uniqueId(), b10 = c10[g10.id];
      l10.shapes[y10] = void 0, r12.shapes[y10] = C5(f8({}, Utils.deepClone(T10)), {id: y10, parentId: b10, childIndex: x7.getChildIndexAbove(s10.state, T10.id, o13)}), c10[m10] = y10, (w10 = (S10 = r12.shapes[c10[g10.id]]) == null ? void 0 : S10.children) == null || w10.push(y10);
    });
  });
  let u10 = new Set(Object.keys(c10));
  Object.values(i10.bindings).filter((g10) => u10.has(g10.fromId) || u10.has(g10.toId)).forEach((g10) => {
    if (u10.has(g10.fromId))
      if (u10.has(g10.toId)) {
        let m10 = Utils.uniqueId(), T10 = C5(f8({}, Utils.deepClone(g10)), {id: m10, fromId: c10[g10.fromId], toId: c10[g10.toId]});
        l10.bindings[m10] = void 0, r12.bindings[m10] = T10;
        let y10 = r12.shapes[T10.fromId];
        Object.values(y10.handles).forEach((b10) => {
          b10.bindingId === g10.id && (b10.bindingId = m10);
        });
      } else {
        let m10 = r12.shapes[c10[g10.fromId]];
        Object.values(m10.handles).forEach((T10) => {
          T10.bindingId === g10.id && (T10.bindingId = void 0);
        });
      }
  });
  let h10 = Object.values(r12.shapes);
  if (t13) {
    let g10 = Utils.getCommonBounds(h10.map((T10) => x7.getBounds(T10))), m10 = Utils.getBoundsCenter(g10);
    h10.forEach((T10) => {
      !T10.point || (T10.point = e.sub(t13, e.sub(m10, T10.point)));
    });
  } else {
    let g10 = [16, 16];
    h10.forEach((m10) => {
      !m10.point || (m10.point = e.add(m10.point, g10));
    });
  }
  return h10.forEach((g10) => {
    g10.isLocked && (g10.isLocked = false);
  }), {id: "duplicate", before: {document: {pages: {[o13]: l10}, pageStates: {[o13]: {selectedIds: n10}}}}, after: {document: {pages: {[o13]: r12}, pageStates: {[o13]: {selectedIds: Array.from(u10.values()).map((g10) => c10[g10])}}}}};
}
function wi(s10, e14, t13) {
  let {selectedIds: n10, currentPageId: o13, page: {shapes: i10}} = s10, a10 = e14.map((p10) => x7.getBounds(i10[p10])), l10 = Utils.getCommonBounds(a10), {before: r12, after: c10} = x7.mutateShapes(s10.state, e14, (p10) => {
    let u10 = x7.getBounds(p10);
    switch (t13) {
      case "horizontal": {
        let h10 = Utils.getRelativeTransformedBoundingBox(l10, l10, u10, true, false);
        return x7.getShapeUtil(p10).transform(p10, h10, {type: TLBoundsCorner.TopLeft, scaleX: -1, scaleY: 1, initialShape: p10, transformOrigin: [0.5, 0.5]});
      }
      case "vertical": {
        let h10 = Utils.getRelativeTransformedBoundingBox(l10, l10, u10, false, true);
        return x7.getShapeUtil(p10).transform(p10, h10, {type: TLBoundsCorner.TopLeft, scaleX: 1, scaleY: -1, initialShape: p10, transformOrigin: [0.5, 0.5]});
      }
    }
  }, o13);
  return {id: "flip", before: {document: {pages: {[o13]: {shapes: r12}}, pageStates: {[o13]: {selectedIds: n10}}}}, after: {document: {pages: {[o13]: {shapes: c10}}, pageStates: {[o13]: {selectedIds: e14}}}}};
}
function ad(s10, e14, t13, n10) {
  var D10, B10;
  if (e14.length < 2)
    return;
  let o13 = {}, i10 = {}, a10 = {}, l10 = {}, r12 = [...e14], c10 = [], p10 = [], u10 = [];
  for (let I10 of e14) {
    let P10 = s10.getShape(I10);
    if (!P10.isLocked)
      if (P10.children === void 0)
        c10.push(P10);
      else {
        let v10 = P10.children.filter((Q) => !s10.getShape(Q).isLocked);
        u10.push(P10), r12.push(...v10), c10.push(...v10.map((Q) => s10.getShape(Q)).filter(Boolean));
      }
  }
  if (c10.every((I10) => I10.parentId === c10[0].parentId) && c10[0].parentId !== n10 && ((D10 = s10.getShape(c10[0].parentId).children) == null ? void 0 : D10.length) === r12.length)
    return;
  let h10 = x7.flattenPage(s10.state, n10), g10 = Object.fromEntries(c10.map((I10) => [I10.id, h10.indexOf(I10)])), m10 = c10.sort((I10, P10) => g10[I10.id] - g10[P10.id]), T10 = n10, y10 = (m10.filter((I10) => I10.parentId === n10)[0] || m10[0]).childIndex, b10 = Utils.getCommonBounds(c10.map((I10) => x7.getBounds(I10)));
  for (o13[t13] = void 0, i10[t13] = x7.getShapeUtil("group").create({id: t13, childIndex: y10, parentId: T10, point: [b10.minX, b10.minY], size: [b10.width, b10.height], children: m10.map((I10) => I10.id)}), m10.forEach((I10, P10) => {
    if (I10.parentId !== n10) {
      let v10 = s10.getShape(I10.parentId);
      u10.push(v10);
    }
    o13[I10.id] = C5(f8({}, o13[I10.id]), {parentId: I10.parentId, childIndex: I10.childIndex}), i10[I10.id] = C5(f8({}, i10[I10.id]), {parentId: t13, childIndex: P10 + 1});
  }); u10.length > 0; ) {
    let I10 = u10.pop();
    if (!I10)
      break;
    let P10 = (((B10 = o13[I10.id]) == null ? void 0 : B10.children) || I10.children).filter((v10) => v10 && !(r12.includes(v10) || p10.includes(v10)));
    P10.length === 0 ? (o13[I10.id] = I10, i10[I10.id] = void 0, I10.parentId !== n10 && (p10.push(I10.id), u10.push(s10.getShape(I10.parentId)))) : (o13[I10.id] = C5(f8({}, o13[I10.id]), {children: I10.children}), i10[I10.id] = C5(f8({}, i10[I10.id]), {children: P10}));
  }
  let {bindings: S10} = s10, w10 = new Set(p10);
  return S10.forEach((I10) => {
    for (let P10 of [I10.toId, I10.fromId])
      if (w10.has(P10)) {
        a10[I10.id] = I10, l10[I10.id] = void 0;
        let v10 = s10.getShape(P10);
        v10.handles && Object.values(v10.handles).filter((Q) => Q.bindingId === I10.id).forEach((Q) => {
          var oe2, te;
          o13[P10] = C5(f8({}, o13[P10]), {handles: C5(f8({}, (oe2 = o13[P10]) == null ? void 0 : oe2.handles), {[Q.id]: {bindingId: I10.id}})}), p10.includes(P10) || (i10[P10] = C5(f8({}, i10[P10]), {handles: C5(f8({}, (te = i10[P10]) == null ? void 0 : te.handles), {[Q.id]: {bindingId: void 0}})}));
        });
      }
  }), {id: "group", before: {document: {pages: {[n10]: {shapes: o13, bindings: a10}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: i10, bindings: a10}}, pageStates: {[n10]: {selectedIds: [t13]}}}}};
}
function ld(s10, e14, t13, n10, o13) {
  let {page: i10} = s10, a10 = {before: {shapes: {}, bindings: {}}, after: {shapes: {}, bindings: {}}}, l10 = {before: {shapes: {}, bindings: {}}, after: {shapes: {}, bindings: {}}}, r12 = new Set(), c10 = new Set();
  e14.map((S10) => s10.getShape(S10, n10)).filter((S10) => !S10.isLocked).forEach((S10) => {
    r12.add(S10.id), c10.add(S10), S10.children !== void 0 && S10.children.forEach((w10) => {
      r12.add(w10), c10.add(s10.getShape(w10, n10));
    });
  });
  let p10 = x7.getTopChildIndex(s10.state, o13), u10 = Array.from(c10.values());
  u10.forEach((S10, w10) => {
    if (a10.before.shapes[S10.id] = S10, a10.after.shapes[S10.id] = void 0, l10.before.shapes[S10.id] = void 0, l10.after.shapes[S10.id] = S10, !r12.has(S10.parentId) && (l10.after.shapes[S10.id] = C5(f8({}, S10), {parentId: o13, childIndex: p10 + w10}), S10.parentId !== n10)) {
      let D10 = s10.getShape(S10.parentId, n10);
      a10.before.shapes[D10.id] = {children: D10.children}, a10.after.shapes[D10.id] = {children: D10.children.filter((B10) => B10 !== S10.id)};
    }
  }), Object.values(i10.bindings).filter((S10) => r12.has(S10.fromId) || r12.has(S10.toId)).forEach((S10) => {
    a10.before.bindings[S10.id] = S10, a10.after.bindings[S10.id] = void 0;
    let w10 = s10.getShape(S10.fromId, n10);
    if (r12.has(S10.fromId) && r12.has(S10.toId))
      l10.before.bindings[S10.id] = void 0, l10.after.bindings[S10.id] = S10;
    else if (r12.has(S10.fromId)) {
      let B10 = s10.getShape(S10.fromId, n10), P10 = Object.values(w10.handles).find((Q) => Q.bindingId === S10.id).id, v10 = l10.after.shapes[B10.id];
      v10.handles = C5(f8({}, v10.handles), {[P10]: C5(f8({}, v10.handles[P10]), {bindingId: void 0})});
    } else {
      let B10 = s10.getShape(S10.fromId, n10), I10 = Object.values(w10.handles).find((P10) => P10.bindingId === S10.id);
      a10.before.shapes[B10.id] = {handles: {[I10.id]: {bindingId: S10.id}}}, a10.after.shapes[B10.id] = {handles: {[I10.id]: {bindingId: void 0}}};
    }
  });
  let h10 = s10.state.document.pageStates[o13], g10 = Utils.getCommonBounds(u10.map((S10) => x7.getBounds(S10))), m10 = x7.getCameraZoom(t13.width < t13.height ? (t13.width - 128) / g10.width : (t13.height - 128) / g10.height), T10 = (t13.width - g10.width * m10) / 2 / m10, y10 = (t13.height - g10.height * m10) / 2 / m10, b10 = e.toFixed(e.add([-g10.minX, -g10.minY], [T10, y10]));
  return {id: "move_to_page", before: {appState: {currentPageId: n10}, document: {pages: {[n10]: a10.before, [o13]: l10.before}, pageStates: {[n10]: {selectedIds: e14}, [o13]: {selectedIds: h10.selectedIds, camera: h10.camera}}}}, after: {appState: {currentPageId: o13}, document: {pages: {[n10]: a10.after, [o13]: l10.after}, pageStates: {[n10]: {selectedIds: []}, [o13]: {selectedIds: e14, camera: {zoom: m10, point: b10}}}}}};
}
function cd(s10, e14, t13) {
  let {pages: n10} = s10.document, o13 = n10[e14], i10 = Object.values(n10).sort((r12, c10) => {
    var p10, u10;
    return ((p10 = r12.childIndex) != null ? p10 : 0) - ((u10 = c10.childIndex) != null ? u10 : 0);
  }), a10 = i10.indexOf(o13), l10 = [...i10];
  return l10.splice(a10, 1), l10.splice(t13 > a10 ? t13 - 1 : t13, 0, o13), {id: "move_page", before: {document: {pages: Object.fromEntries(i10.map((r12) => [r12.id, {childIndex: r12.childIndex}]))}}, after: {document: {pages: Object.fromEntries(l10.map((r12, c10) => [r12.id, {childIndex: c10}]))}}};
}
function Do(s10, e14, t13) {
  let {currentPageId: n10, page: o13} = s10, i10 = new Set(e14.map((p10) => s10.getShape(p10).parentId)), a10 = {before: {}, after: {}}, l10, r12, c10;
  return Array.from(i10.values()).forEach((p10) => {
    let u10 = [];
    if (p10 === o13.id)
      u10 = Object.values(o13.shapes).sort((m10, T10) => m10.childIndex - T10.childIndex);
    else {
      let m10 = s10.getShape(p10);
      if (!m10.children)
        throw Error("No children in parent!");
      u10 = m10.children.map((T10) => s10.getShape(T10)).sort((T10, y10) => T10.childIndex - y10.childIndex);
    }
    let h10 = u10.map((m10) => m10.id), g10 = e14.filter((m10) => h10.includes(m10)).map((m10) => h10.indexOf(m10)).sort((m10, T10) => m10 - T10);
    if (g10.length !== h10.length)
      switch (t13) {
        case "toBack": {
          for (let m10 = 0; m10 < h10.length; m10++)
            if (!g10.includes(m10)) {
              l10 = m10;
              break;
            }
          r12 = u10[l10].childIndex, c10 = r12 / (g10.length + 1), a10 = x7.mutateShapes(s10.state, g10.map((m10) => u10[m10].id).reverse(), (m10, T10) => ({childIndex: r12 - (T10 + 1) * c10}), n10);
          break;
        }
        case "toFront": {
          for (let m10 = h10.length - 1; m10 >= 0; m10--)
            if (!g10.includes(m10)) {
              l10 = m10;
              break;
            }
          r12 = u10[l10].childIndex, c10 = 1, a10 = x7.mutateShapes(s10.state, g10.map((m10) => u10[m10].id), (m10, T10) => ({childIndex: r12 + (T10 + 1)}), n10);
          break;
        }
        case "backward": {
          let m10 = {};
          for (let T10 = h10.length - 1; T10 >= 0; T10--)
            if (g10.includes(T10)) {
              for (let y10 = T10; y10 >= 0; y10--)
                if (!g10.includes(y10)) {
                  let b10 = u10[y10].childIndex, S10, w10;
                  y10 === 0 ? (S10 = b10 / 2, w10 = b10 / 2 / (T10 - y10 + 1)) : (S10 = u10[y10 - 1].childIndex, w10 = (b10 - S10) / (T10 - y10 + 1), S10 += w10);
                  for (let D10 = 0; D10 < T10 - y10; D10++)
                    m10[u10[y10 + D10 + 1].id] = S10 + w10 * D10;
                  break;
                }
            }
          Object.values(m10).length > 0 && (a10 = x7.mutateShapes(s10.state, g10.map((T10) => u10[T10].id), (T10) => ({childIndex: m10[T10.id]}), n10));
          break;
        }
        case "forward": {
          let m10 = {};
          for (let T10 = 0; T10 < h10.length; T10++)
            if (g10.includes(T10)) {
              for (let y10 = T10; y10 < h10.length; y10++)
                if (!g10.includes(y10)) {
                  r12 = u10[y10].childIndex;
                  let b10 = y10 === h10.length - 1 ? 1 : (u10[y10 + 1].childIndex - r12) / (y10 - T10 + 1);
                  for (let S10 = 0; S10 < y10 - T10; S10++)
                    m10[u10[T10 + S10].id] = r12 + b10 * (S10 + 1);
                  break;
                }
            }
          Object.values(m10).length > 0 && (a10 = x7.mutateShapes(s10.state, g10.map((T10) => u10[T10].id), (T10) => ({childIndex: m10[T10.id]}), n10));
          break;
        }
      }
  }), {id: "move", before: {document: {pages: {[n10]: {shapes: a10.before}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: a10.after}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function pd(s10, e14, t13) {
  let {page: n10} = s10;
  return {id: "rename_page", before: {document: {pages: {[e14]: {name: n10.name}}}}, after: {document: {pages: {[e14]: {name: t13}}}}};
}
function xi(s10, e14, t13) {
  let {currentPageId: n10} = s10, {before: o13, after: i10} = x7.mutateShapes(s10.state, e14, (a10) => {
    var l10, r12;
    return (r12 = (l10 = s10.getShapeUtil(a10)).onDoubleClickBoundsHandle) == null ? void 0 : r12.call(l10, a10);
  }, t13);
  return {id: "reset_bounds", before: {document: {pages: {[n10]: {shapes: o13}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: i10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
var ou = Math.PI * 2;
function hd(s10, e14, t13 = -ou / 4) {
  let {currentPageId: n10} = s10, o13 = {}, i10 = {}, a10 = e14.flatMap((r12) => {
    let c10 = s10.getShape(r12);
    return c10.children ? c10.children.map((p10) => s10.getShape(p10)) : c10;
  }).filter((r12) => !r12.isLocked), l10 = Utils.getBoundsCenter(Utils.getCommonBounds(a10.map((r12) => x7.getBounds(r12))));
  return a10.forEach((r12) => {
    let c10 = x7.getRotatedShapeMutation(r12, x7.getCenter(r12), l10, t13);
    !c10 || (o13[r12.id] = x7.getBeforeShape(r12, c10), i10[r12.id] = c10);
  }), {id: "rotate", before: {document: {pages: {[n10]: {shapes: o13}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: i10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function gd(s10, e14, t13) {
  let {currentPageId: n10, selectedIds: o13} = s10, i10 = e14.map((u10) => s10.getShape(u10)), a10 = i10.map((u10) => x7.getBounds(u10)), l10 = Utils.getCommonBounds(a10), r12 = e14.flatMap((u10) => {
    let h10 = s10.getShape(u10);
    return h10.children ? h10.children : h10.id;
  }).filter((u10) => !s10.getShape(u10).isLocked), {before: c10, after: p10} = x7.mutateShapes(s10.state, r12, (u10) => {
    let h10 = x7.getBounds(u10);
    switch (t13) {
      case "horizontal": {
        let g10 = C5(f8({}, h10), {minX: l10.minX, maxX: l10.maxX, width: l10.width});
        return x7.getShapeUtil(u10).transformSingle(u10, g10, {type: TLBoundsCorner.TopLeft, scaleX: g10.width / h10.width, scaleY: 1, initialShape: u10, transformOrigin: [0.5, 0.5]});
      }
      case "vertical": {
        let g10 = C5(f8({}, h10), {minY: l10.minY, maxY: l10.maxY, height: l10.height});
        return x7.getShapeUtil(u10).transformSingle(u10, g10, {type: TLBoundsCorner.TopLeft, scaleX: 1, scaleY: g10.height / h10.height, initialShape: u10, transformOrigin: [0.5, 0.5]});
      }
    }
  }, n10);
  return i10.forEach((u10) => {
    u10.type === "group" && (delete c10[u10.id], delete p10[u10.id]);
  }), {id: "stretch", before: {document: {pages: {[n10]: {shapes: c10}}, pageStates: {[n10]: {selectedIds: o13}}}}, after: {document: {pages: {[n10]: {shapes: p10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function fd(s10, e14, t13) {
  let {currentPageId: n10, selectedIds: o13} = s10, i10 = e14.flatMap((r12) => x7.getDocumentBranch(s10.state, r12, n10)).filter((r12) => !s10.getShape(r12).isLocked), a10 = {}, l10 = {};
  return i10.map((r12) => s10.getShape(r12)).filter((r12) => !r12.isLocked).forEach((r12) => {
    a10[r12.id] = {style: f8({}, Object.fromEntries(Object.keys(t13).map((c10) => [c10, r12.style[c10]])))}, l10[r12.id] = {style: t13}, r12.type === "text" && (a10[r12.id].point = r12.point, l10[r12.id].point = e.toFixed(e.add(r12.point, e.sub(s10.getShapeUtil(r12).getCenter(r12), s10.getShapeUtil(r12).getCenter(C5(f8({}, r12), {style: f8(f8({}, r12.style), t13)}))))));
  }), {id: "style", before: {document: {pages: {[n10]: {shapes: a10}}, pageStates: {[n10]: {selectedIds: o13}}}, appState: {currentStyle: f8({}, s10.appState.currentStyle)}}, after: {document: {pages: {[n10]: {shapes: l10}}, pageStates: {[n10]: {selectedIds: e14}}}, appState: {currentStyle: t13}}};
}
function Sd(s10, e14, t13) {
  let {currentPageId: n10, selectedIds: o13} = s10, i10 = Object.fromEntries(e14.map((l10) => {
    var r12;
    return [l10, {decorations: {[t13]: (r12 = s10.getShape(l10).decorations) == null ? void 0 : r12[t13]}}];
  })), a10 = Object.fromEntries(e14.filter((l10) => !s10.getShape(l10).isLocked).map((l10) => {
    var r12;
    return [l10, {decorations: {[t13]: ((r12 = s10.getShape(l10).decorations) == null ? void 0 : r12[t13]) ? void 0 : "arrow"}}];
  }));
  return {id: "toggle_decorations", before: {document: {pages: {[n10]: {shapes: i10}}, pageStates: {[n10]: {selectedIds: o13}}}}, after: {document: {pages: {[n10]: {shapes: a10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function gs(s10, e14, t13) {
  let {currentPageId: n10} = s10, o13 = e14.map((r12) => s10.getShape(r12)).filter((r12) => t13 === "isLocked" ? true : !r12.isLocked), i10 = o13.every((r12) => r12[t13]), a10 = {}, l10 = {};
  return o13.forEach((r12) => {
    a10[r12.id] = {[t13]: r12[t13]}, l10[r12.id] = {[t13]: !i10};
  }), {id: "toggle", before: {document: {pages: {[n10]: {shapes: a10}}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: {shapes: l10}}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function bd(s10, e14, t13) {
  let {currentPageId: n10, selectedIds: o13} = s10;
  s10.rotationInfo.selectedIds = [...o13];
  let i10 = {shapes: {}, bindings: {}}, a10 = {shapes: {}, bindings: {}}, l10 = e14.flatMap((p10) => {
    let u10 = s10.getShape(p10);
    return u10.children ? u10.children : u10.id;
  }).filter((p10) => !s10.getShape(p10).isLocked), r12 = x7.mutateShapes(s10.state, l10, (p10) => ({point: e.toFixed(e.add(p10.point, t13))}), n10);
  return i10.shapes = r12.before, a10.shapes = r12.after, x7.getBindings(s10.state, n10).filter((p10) => e14.includes(p10.fromId) && !e14.includes(p10.toId)).forEach((p10) => {
    i10.bindings[p10.id] = p10, a10.bindings[p10.id] = void 0;
    for (let u10 of [p10.toId, p10.fromId]) {
      let h10 = s10.getShape(u10);
      !h10.handles || Object.values(h10.handles).filter((g10) => g10.bindingId === p10.id).forEach((g10) => {
        var m10, T10;
        i10.shapes[u10] = C5(f8({}, i10.shapes[u10]), {handles: C5(f8({}, (m10 = i10.shapes[u10]) == null ? void 0 : m10.handles), {[g10.id]: {bindingId: p10.id}})}), a10.shapes[u10] = C5(f8({}, a10.shapes[u10]), {handles: C5(f8({}, (T10 = a10.shapes[u10]) == null ? void 0 : T10.handles), {[g10.id]: {bindingId: void 0}})});
      });
    }
  }), {id: "translate", before: {document: {pages: {[n10]: i10}, pageStates: {[n10]: {selectedIds: e14}}}}, after: {document: {pages: {[n10]: a10}, pageStates: {[n10]: {selectedIds: e14}}}}};
}
function yd(s10, e14, t13, n10) {
  let {bindings: o13} = s10, i10 = {}, a10 = {}, l10 = {}, r12 = {}, c10 = e14, p10 = e14.filter((u10) => !t13.find((h10) => h10.id === u10));
  return t13.filter((u10) => !u10.isLocked).forEach((u10) => {
    let h10 = [], g10 = [];
    i10[u10.id] = u10, a10[u10.id] = void 0, u10.children.forEach((S10) => {
      p10.push(S10);
      let w10 = s10.getShape(S10, n10);
      h10.push(w10);
    });
    let m10 = u10.childIndex, y10 = (x7.getChildIndexAbove(s10.state, u10.id, n10) - m10) / h10.length;
    h10.sort((S10, w10) => S10.childIndex - w10.childIndex).forEach((S10, w10) => {
      i10[S10.id] = {parentId: S10.parentId, childIndex: S10.childIndex}, a10[S10.id] = {parentId: n10, childIndex: m10 + y10 * w10};
    }), o13.filter((S10) => S10.toId === u10.id || S10.fromId === u10.id).forEach((S10) => {
      for (let w10 of [S10.toId, S10.fromId])
        if (a10[w10] === void 0) {
          l10[S10.id] = S10, r12[S10.id] = void 0;
          let D10 = s10.getShape(w10, n10);
          D10.handles && Object.values(D10.handles).filter((B10) => B10.bindingId === S10.id).forEach((B10) => {
            var I10, P10;
            i10[w10] = C5(f8({}, i10[w10]), {handles: C5(f8({}, (I10 = i10[w10]) == null ? void 0 : I10.handles), {[B10.id]: {bindingId: S10.id}})}), g10.includes(w10) || (a10[w10] = C5(f8({}, a10[w10]), {handles: C5(f8({}, (P10 = a10[w10]) == null ? void 0 : P10.handles), {[B10.id]: {bindingId: void 0}})}));
          });
        }
    });
  }), {id: "ungroup", before: {document: {pages: {[n10]: {shapes: i10, bindings: l10}}, pageStates: {[n10]: {selectedIds: c10}}}}, after: {document: {pages: {[n10]: {shapes: a10, bindings: l10}}, pageStates: {[n10]: {selectedIds: p10}}}}};
}
function Ci(s10, e14, t13) {
  let n10 = e14.map((i10) => i10.id), o13 = x7.mutateShapes(s10.state, n10.filter((i10) => !s10.getShape(i10, t13).isLocked), (i10, a10) => e14[a10], t13);
  return {id: "update", before: {document: {pages: {[t13]: {shapes: o13.before}}}}, after: {document: {pages: {[t13]: {shapes: o13.after}}}}};
}
function wd(s10, e14, t13) {
  let {currentPageId: n10, selectedIds: o13} = s10, i10 = e14.map((c10) => s10.getShape(c10)).filter((c10) => t13.isLocked ? true : !c10.isLocked), a10 = {}, l10 = {}, r12 = Object.keys(t13);
  return i10.forEach((c10) => {
    a10[c10.id] = Object.fromEntries(r12.map((p10) => [p10, c10[p10]])), l10[c10.id] = t13;
  }), {id: "set_props", before: {document: {pages: {[n10]: {shapes: a10}}, pageStates: {[n10]: {selectedIds: o13}}}}, after: {document: {pages: {[n10]: {shapes: l10}}, pageStates: {[n10]: {selectedIds: o13}}}}};
}
function xd(s10, e14, t13 = {}) {
  let {currentPageId: n10} = s10, {point: o13, select: i10, overwrite: a10} = t13, l10 = s10.document.pages[n10], r12 = {shapes: {}, bindings: {}}, c10 = {}, p10 = {shapes: {}, bindings: {}};
  if (a10) {
    for (let h10 of e14.shapes)
      r12.shapes[h10.id] = l10.shapes[h10.id], p10.shapes[h10.id] = h10;
    if (e14.bindings)
      for (let h10 of e14.bindings)
        r12.bindings[h10.id] = l10.bindings[h10.id], p10.bindings[h10.id] = h10;
    if (e14.assets)
      for (let h10 of e14.assets)
        c10[h10.id] = h10;
  } else {
    let h10 = {}, g10 = x7.getTopChildIndex(s10.state, n10), m10 = e14.shapes.sort((b10, S10) => b10.childIndex - S10.childIndex).map((b10) => {
      let S10 = Utils.uniqueId();
      return h10[b10.id] = S10, C5(f8({}, Utils.deepClone(b10)), {id: S10});
    }), T10 = new Set();
    for (; m10.length > 0; ) {
      let b10 = m10.shift();
      if (!b10)
        break;
      if (T10.add(b10.id), b10.parentId === "currentPageId")
        b10.parentId = n10, b10.childIndex = g10++;
      else {
        b10.parentId = h10[b10.parentId];
        let S10 = p10.shapes[b10.parentId];
        if (!S10) {
          T10.has(b10.id) && (b10.parentId = "currentPageId"), m10.push(b10);
          continue;
        }
        S10.children.push(b10.id);
      }
      b10.children && (b10.children = []), r12.shapes[b10.id] = void 0, p10.shapes[b10.id] = b10;
    }
    Object.values(p10.shapes).forEach((b10) => {
      b10.children && b10.children.length === 0 && (delete r12.shapes[b10.id], delete p10.shapes[b10.id]);
    }), e14.bindings && e14.bindings.forEach((b10) => {
      let S10 = Utils.uniqueId();
      h10[b10.id] = S10;
      let w10 = h10[b10.toId], D10 = h10[b10.fromId];
      if (!w10 || !D10) {
        if (D10) {
          let v10 = p10.shapes[D10].handles;
          v10 && Object.values(v10).forEach((Q) => {
            Q.bindingId === b10.id && (Q.bindingId = void 0);
          });
        }
        if (w10) {
          let v10 = p10.shapes[w10].handles;
          v10 && Object.values(v10).forEach((Q) => {
            Q.bindingId === b10.id && (Q.bindingId = void 0);
          });
        }
        return;
      }
      let B10 = p10.shapes[D10].handles;
      B10 && Object.values(B10).forEach((v10) => {
        v10.bindingId === b10.id && (v10.bindingId = S10);
      }), p10.shapes[w10].handles && Object.values(p10.shapes[w10].handles).forEach((v10) => {
        v10.bindingId === b10.id && (v10.bindingId = S10);
      });
      let P10 = C5(f8({}, Utils.deepClone(b10)), {id: S10, toId: w10, fromId: D10});
      r12.bindings[P10.id] = void 0, p10.bindings[P10.id] = P10;
    });
    let y10 = Object.values(p10.shapes);
    if (y10.length > 0)
      if (o13) {
        let b10 = Utils.getCommonBounds(y10.map((w10) => x7.getBounds(w10))), S10 = Utils.getBoundsCenter(b10);
        y10.forEach((w10) => {
          !w10.point || (w10.point = e.sub(o13, e.sub(S10, w10.point)));
        });
      } else {
        let b10 = Utils.getCommonBounds(y10.map(x7.getBounds));
        if (!(Utils.boundsContain(s10.viewport, b10) || Utils.boundsCollide(s10.viewport, b10))) {
          let S10 = e.toFixed(s10.getPagePoint(s10.centerPoint)), w10 = Utils.centerBounds(b10, S10), D10 = e.sub(Utils.getBoundsCenter(w10), Utils.getBoundsCenter(b10));
          y10.forEach((B10) => {
            B10.point = e.toFixed(e.add(B10.point, D10));
          });
        }
      }
    if (e14.assets)
      for (let b10 of e14.assets)
        c10[b10.id] = b10;
  }
  let u10 = document.createElement("textarea");
  return Object.values(p10.shapes).forEach((h10) => {
    "text" in h10 && (u10.innerHTML = h10.text, h10.text = u10.value), "label" in h10 && (u10.innerHTML = h10.label, h10.label = u10.value);
  }), u10.remove(), {id: "insert", before: {document: {pages: {[n10]: r12}, pageStates: {[n10]: {selectedIds: [...s10.selectedIds]}}}}, after: {document: {pages: {[n10]: p10}, assets: c10, pageStates: {[n10]: {selectedIds: i10 ? Object.keys(p10.shapes) : [...s10.selectedIds]}}}}};
}
var Ae = class {
  constructor(e14) {
    this.app = e14;
  }
};
var vi = class extends Ae {
  constructor(e14, t13, n10, o13 = false) {
    super(e14);
    d8(this, "type", "arrow");
    d8(this, "performanceMode");
    d8(this, "status", "translatingHandle");
    d8(this, "newStartBindingId", Utils.uniqueId());
    d8(this, "draggedBindingId", Utils.uniqueId());
    d8(this, "didBind", false);
    d8(this, "initialShape");
    d8(this, "handleId");
    d8(this, "bindableShapeIds");
    d8(this, "initialBinding");
    d8(this, "startBindingShapeId");
    d8(this, "isCreate");
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      var B10, I10, P10;
      let {initialShape: e15} = this, {currentPoint: t14, shiftKey: n11, altKey: o14, metaKey: i11, currentGrid: a11, settings: {showGrid: l11}} = this.app, r13 = this.app.getShape(e15.id);
      if (r13.isLocked)
        return;
      let {handles: c11} = e15, p11 = this.handleId;
      if (!c11[p11].canBind)
        return;
      let u11 = e.sub(t14, e.add(c11[p11].point, e15.point));
      if (n11) {
        let v10 = o14 ? e.med(c11.start.point, c11.end.point) : c11[p11 === "start" ? "end" : "start"].point, Q = c11[p11].point, oe2 = e.add(Q, u11), te = e.angle(v10, oe2), ke = e.rotWith(oe2, v10, Utils.snapAngleToSegments(te, 24) - te);
        u11 = e.add(u11, e.sub(ke, oe2));
      }
      let h10 = e.add(c11[p11].point, u11), g10 = {[p11]: C5(f8({}, c11[p11]), {point: l11 ? e.snap(h10, a11) : e.toFixed(h10), bindingId: void 0})}, m10 = mn["arrow"], T10 = (B10 = m10.onHandleChange) == null ? void 0 : B10.call(m10, e15, g10);
      if (!T10)
        return;
      let y10 = {shape: Utils.deepMerge(r13, T10), bindings: {}}, b10, S10 = y10.shape.handles[this.handleId], w10 = y10.shape.handles[this.handleId === "start" ? "end" : "start"];
      if (this.startBindingShapeId) {
        let v10, Q = this.app.page.shapes[this.startBindingShapeId], oe2 = x7.getShapeUtil(Q), te = oe2.getCenter(Q), ke = y10.shape.handles.start, be2 = y10.shape.handles.end, xe = e.add(ke.point, y10.shape.point);
        e.isEqual(xe, te) && xe[1]++;
        let Me = te, Fe = oe2.hitTestPoint(Q, t14), We = e.uni(e.sub(xe, Me)), ot = this.app.getBinding(this.newStartBindingId) !== void 0;
        !i11 && !oe2.hitTestPoint(Q, e.add(y10.shape.point, be2.point)) && (v10 = this.findBindingPoint(r13, Q, "start", this.newStartBindingId, te, Me, We, Fe)), v10 && !ot ? (this.didBind = true, y10.bindings[this.newStartBindingId] = v10, y10.shape = Utils.deepMerge(y10.shape, {handles: {start: {bindingId: v10.id}}})) : !v10 && ot && (this.didBind = false, y10.bindings[this.newStartBindingId] = void 0, y10.shape = Utils.deepMerge(e15, {handles: {start: {bindingId: void 0}}}));
      }
      if (!i11) {
        let v10 = e.add(w10.point, y10.shape.point), Q = e.add(S10.point, y10.shape.point), oe2 = e.uni(e.sub(Q, v10)), te = e.add(y10.shape.point, y10.shape.handles.start.point), ke = e.add(y10.shape.point, y10.shape.handles.end.point), be2 = this.bindableShapeIds.map((xe) => this.app.page.shapes[xe]).sort((xe, Me) => Me.childIndex - xe.childIndex).filter((xe) => {
          if (xe.isLocked)
            return false;
          let Me = x7.getShapeUtil(xe);
          return ![te, ke].every((Fe) => Me.hitTestPoint(xe, Fe));
        });
        for (let xe of be2)
          if (b10 = this.findBindingPoint(r13, xe, this.handleId, this.draggedBindingId, Q, v10, oe2, o14), b10)
            break;
      }
      if (b10)
        this.didBind = true, y10.bindings[this.draggedBindingId] = b10, y10.shape = Utils.deepMerge(y10.shape, {handles: {[this.handleId]: {bindingId: this.draggedBindingId}}});
      else {
        this.didBind = this.didBind || false;
        let v10 = r13.handles[this.handleId].bindingId;
        v10 !== void 0 && (y10.bindings[v10] = void 0, y10.shape = Utils.deepMerge(y10.shape, {handles: {[this.handleId]: {bindingId: void 0}}}));
      }
      let D10 = (P10 = (I10 = x7.getShapeUtil(y10.shape)).onHandleChange) == null ? void 0 : P10.call(I10, y10.shape, y10.shape.handles);
      return {document: {pages: {[this.app.currentPageId]: {shapes: {[r13.id]: f8(f8({}, y10.shape), D10 != null ? D10 : {})}, bindings: y10.bindings}}, pageStates: {[this.app.currentPageId]: {bindingId: y10.shape.handles[p11].bindingId}}}};
    });
    d8(this, "cancel", () => {
      let {initialShape: e15, initialBinding: t14, newStartBindingId: n11, draggedBindingId: o14} = this, i11 = x7.onSessionComplete(this.app.page.shapes[e15.id]), a11 = this.isCreate || e.dist(i11.handles.start.point, i11.handles.end.point) < 4, l11 = {};
      return l11[o14] = void 0, t14 && (l11[t14.id] = a11 ? void 0 : t14), n11 && (l11[n11] = void 0), {document: {pages: {[this.app.currentPageId]: {shapes: {[e15.id]: a11 ? void 0 : e15}, bindings: l11}}, pageStates: {[this.app.currentPageId]: {selectedIds: a11 ? [] : [e15.id], bindingId: void 0, hoveredId: void 0, editingId: void 0}}}};
    });
    d8(this, "complete", () => {
      let {initialShape: e15, initialBinding: t14, newStartBindingId: n11, startBindingShapeId: o14, handleId: i11} = this, a11 = x7.onSessionComplete(this.app.page.shapes[e15.id]), l11 = a11.handles[i11].bindingId, r13 = e.dist(a11.handles.start.point, a11.handles.end.point);
      if (!(l11 || t14) && r13 < 4)
        return this.cancel();
      let c11 = {}, p11 = {};
      return t14 && (c11[t14.id] = this.isCreate ? void 0 : t14, p11[t14.id] = void 0), l11 && (c11[l11] = void 0, p11[l11] = this.app.page.bindings[l11]), o14 && (c11[n11] = void 0, p11[n11] = this.app.page.bindings[n11]), {id: "arrow", before: {document: {pages: {[this.app.currentPageId]: {shapes: {[e15.id]: this.isCreate ? void 0 : e15}, bindings: c11}}, pageStates: {[this.app.currentPageId]: {selectedIds: this.isCreate ? [] : [e15.id], bindingId: void 0, hoveredId: void 0, editingId: void 0}}}}, after: {document: {pages: {[this.app.currentPageId]: {shapes: {[e15.id]: a11}, bindings: p11}}, pageStates: {[this.app.currentPageId]: {selectedIds: [e15.id], bindingId: void 0, hoveredId: void 0, editingId: void 0}}}}};
    });
    d8(this, "findBindingPoint", (e15, t14, n11, o14, i11, a11, l11, r13) => {
      let p11 = x7.getShapeUtil(t14.type).getBindingPoint(t14, e15, i11, a11, l11, r13);
      if (!!p11)
        return {id: o14, type: "arrow", fromId: e15.id, toId: t14.id, handleId: n11, point: e.toFixed(p11.point), distance: p11.distance};
    });
    var c10, p10, u10;
    this.isCreate = o13;
    let {currentPageId: i10} = e14.state.appState, a10 = e14.state.document.pages[i10];
    this.handleId = n10, this.initialShape = dt(a10.shapes[t13]), this.bindableShapeIds = x7.getBindableShapeIds(e14.state).filter((h10) => !(h10 === this.initialShape.id || h10 === this.initialShape.parentId));
    let l10 = (c10 = this.initialShape.handles[n10 === "start" ? "end" : "start"]) == null ? void 0 : c10.bindingId;
    if (l10) {
      let h10 = (p10 = a10.bindings[l10]) == null ? void 0 : p10.toId;
      h10 && (this.bindableShapeIds = this.bindableShapeIds.filter((g10) => g10 !== h10));
    }
    let {originPoint: r12} = this.app;
    if (this.isCreate)
      this.startBindingShapeId = (u10 = this.bindableShapeIds.map((h10) => a10.shapes[h10]).filter((h10) => !h10.isLocked && Utils.pointInBounds(r12, x7.getShapeUtil(h10).getBounds(h10))).sort((h10, g10) => g10.childIndex - h10.childIndex)[0]) == null ? void 0 : u10.id, this.startBindingShapeId && this.bindableShapeIds.splice(this.bindableShapeIds.indexOf(this.startBindingShapeId), 1);
    else {
      let h10 = this.initialShape.handles[this.handleId].bindingId;
      h10 ? this.initialBinding = a10.bindings[h10] : this.initialShape.handles[this.handleId].bindingId = void 0;
    }
  }
};
var ki = class extends Ae {
  constructor(e14) {
    super(e14);
    d8(this, "type", "brush");
    d8(this, "performanceMode");
    d8(this, "status", "brushing");
    d8(this, "initialSelectedIds");
    d8(this, "shapesToTest");
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      let {initialSelectedIds: e15, shapesToTest: t14, app: {metaKey: n10, settings: o13, originPoint: i10, currentPoint: a10}} = this, l10 = Utils.getBoundsFromPoints([i10, a10]), r12 = o13.isCadSelectMode ? !n10 && i10[0] < a10[0] : n10, c10 = new Set(), p10 = new Set(e15);
      t14.forEach(({id: m10, selectId: T10}) => {
        let y10 = this.app.getShape(m10);
        if (!c10.has(T10)) {
          let b10 = this.app.getShapeUtil(y10);
          (r12 ? Utils.boundsContain(l10, b10.getBounds(y10)) : b10.hitTestBounds(y10, l10)) ? (c10.add(T10), p10.has(T10) || p10.add(T10)) : p10.has(T10) && p10.delete(T10);
        }
      });
      let u10 = this.app.selectedIds, h10 = p10.size !== u10.length || u10.some((m10) => !p10.has(m10)), g10 = h10 ? Array.from(p10.values()) : u10;
      return h10 ? {appState: {selectByContain: r12}, document: {pageStates: {[this.app.currentPageId]: {brush: l10, selectedIds: g10}}}} : {document: {pageStates: {[this.app.currentPageId]: {brush: l10}}}};
    });
    d8(this, "cancel", () => ({appState: {selectByContain: false}, document: {pageStates: {[this.app.currentPageId]: {brush: null, selectedIds: Array.from(this.initialSelectedIds.values())}}}}));
    d8(this, "complete", () => ({appState: {selectByContain: false}, document: {pageStates: {[this.app.currentPageId]: {brush: null, selectedIds: [...this.app.selectedIds]}}}}));
    let {currentPageId: t13} = e14;
    this.initialSelectedIds = new Set(this.app.selectedIds), this.shapesToTest = this.app.shapes.filter((n10) => !(n10.isLocked || n10.isHidden || n10.parentId !== t13 || this.initialSelectedIds.has(n10.id) || this.initialSelectedIds.has(n10.parentId))).map((n10) => ({id: n10.id, bounds: this.app.getShapeUtil(n10).getBounds(n10), selectId: n10.id})), this.update();
  }
};
var Di = class extends Ae {
  constructor(e14, t13) {
    super(e14);
    d8(this, "type", "draw");
    d8(this, "performanceMode");
    d8(this, "status", "creating");
    d8(this, "topLeft");
    d8(this, "points");
    d8(this, "initialShape");
    d8(this, "lastAdjustedPoint");
    d8(this, "shiftedPoints", []);
    d8(this, "shapeId");
    d8(this, "isLocked");
    d8(this, "isExtending");
    d8(this, "lockedDirection");
    d8(this, "start", () => {
      var i11;
      let e15 = this.app.originPoint, t14 = [0, 0, (i11 = e15[2]) != null ? i11 : 0.5];
      this.points.push(t14);
      let n11 = [Math.min(this.topLeft[0], e15[0]), Math.min(this.topLeft[1], e15[1])], o14 = e.sub(n11, e15);
      return this.topLeft = n11, this.shiftedPoints = this.points.map((a11) => e.toFixed(e.sub(a11, o14)).concat(a11[2])), {document: {pages: {[this.app.currentPageId]: {shapes: {[this.shapeId]: {point: this.topLeft, points: this.shiftedPoints}}}}, pageStates: {[this.app.currentPageId]: {selectedIds: [this.shapeId]}}}};
    });
    d8(this, "update", () => {
      let {shapeId: e15} = this, {currentPoint: t14, originPoint: n11, shiftKey: o14} = this.app;
      if (!this.lockedDirection && this.points.length > 1) {
        let a11 = Utils.getBoundsFromPoints(this.points);
        (a11.width > 8 || a11.height > 8) && (this.lockedDirection = a11.width > a11.height ? "horizontal" : "vertical");
      }
      if (o14) {
        if (!this.isLocked && this.points.length > 2) {
          if (!this.lockedDirection) {
            let l11 = Utils.getBoundsFromPoints(this.points);
            this.lockedDirection = l11.width > l11.height ? "horizontal" : "vertical";
          }
          this.isLocked = true;
          let a11 = [...this.lastAdjustedPoint];
          this.lockedDirection === "vertical" ? a11[0] = 0 : a11[1] = 0, this.points.push(a11.concat(t14[2]));
        }
      } else
        this.isLocked && (this.isLocked = false);
      this.isLocked && (this.lockedDirection === "vertical" ? t14[0] = n11[0] : t14[1] = n11[1]);
      let i11 = this.addPoint(t14);
      if (!!i11)
        return {document: {pages: {[this.app.currentPageId]: {shapes: {[e15]: i11}}}, pageStates: {[this.app.currentPageId]: {selectedIds: [e15]}}}};
    });
    d8(this, "cancel", () => {
      let {shapeId: e15} = this, t14 = this.app.currentPageId;
      return {document: {pages: {[t14]: {shapes: {[e15]: this.isExtending ? this.initialShape : void 0}}}, pageStates: {[t14]: {selectedIds: []}}}};
    });
    d8(this, "complete", () => {
      let {shapeId: e15} = this, t14 = this.app.currentPageId, n11 = this.app.getShape(e15);
      return {id: "create_draw", before: {document: {pages: {[t14]: {shapes: {[e15]: this.isExtending ? this.initialShape : void 0}}}, pageStates: {[t14]: {selectedIds: []}}}}, after: {document: {pages: {[t14]: {shapes: {[e15]: C5(f8({}, n11), {point: e.toFixed(n11.point), points: n11.points.map((o14) => e.toFixed(o14)), isComplete: true})}}}, pageStates: {[this.app.currentPageId]: {selectedIds: []}}}}};
    });
    d8(this, "addPoint", (e15) => {
      let {originPoint: t14} = this.app, n11 = e.toFixed(e.sub(e15, t14)).concat(e15[2]);
      if (e.isEqual(this.lastAdjustedPoint, n11))
        return;
      this.points.push(n11), this.lastAdjustedPoint = n11;
      let o14 = [...this.topLeft], i11 = [Math.min(this.topLeft[0], e15[0]), Math.min(this.topLeft[1], e15[1])], a11 = e.sub(i11, t14), l11;
      return o14[0] !== i11[0] || o14[1] !== i11[1] ? (this.topLeft = i11, l11 = this.points.map((r13) => e.toFixed(e.sub(r13, a11)).concat(r13[2]))) : l11 = [...this.shiftedPoints, e.sub(n11, a11).concat(n11[2])], this.shiftedPoints = l11, {point: this.topLeft, points: l11};
    });
    var r12;
    let {originPoint: n10} = this.app;
    this.shapeId = t13, this.initialShape = this.app.getShape(t13), this.topLeft = [...this.initialShape.point];
    let o13 = [0, 0, (r12 = n10[2]) != null ? r12 : 0.5], i10 = e.sub(n10, this.topLeft), a10 = this.initialShape.points.map((c10) => e.sub(c10, i10).concat(c10[2]));
    this.isExtending = a10.length > 0;
    let l10 = [];
    if (this.isExtending) {
      let c10 = a10[a10.length - 1];
      if (c10) {
        l10.push(c10, c10);
        let p10 = Math.floor(e.dist(c10, o13) / 16);
        if (p10 > 1)
          for (let u10 = 0; u10 < p10; u10++) {
            let h10 = u10 / (p10 - 1);
            l10.push(e.lrp(c10, o13, h10).concat(c10[2]));
          }
        else
          l10.push(o13, o13);
      }
    } else
      l10.push(o13);
    this.points = [...a10, ...l10], this.shiftedPoints = this.points.map((c10) => e.add(c10, i10).concat(c10[2])), this.lastAdjustedPoint = this.points[this.points.length - 1];
  }
};
var Bi = class extends Ae {
  constructor(e14, t13, n10, o13 = "move_handle") {
    super(e14);
    d8(this, "type", "handle");
    d8(this, "performanceMode");
    d8(this, "status", "translatingHandle");
    d8(this, "commandId");
    d8(this, "topLeft");
    d8(this, "shiftKey", false);
    d8(this, "initialShape");
    d8(this, "handleId");
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      var p10, u10;
      let {initialShape: e15, app: {currentPageId: t14, currentPoint: n11}} = this, o14 = this.app.getShape(e15.id);
      if (o14.isLocked)
        return;
      let i11 = o14.handles, a10 = this.handleId, l10 = e.sub(n11, i11[a10].point), r12 = {[a10]: C5(f8({}, i11[a10]), {point: e.sub(e.add(i11[a10].point, l10), o14.point)})}, c10 = (u10 = (p10 = x7.getShapeUtil(o14)).onHandleChange) == null ? void 0 : u10.call(p10, o14, r12);
      if (!!c10)
        return {document: {pages: {[t14]: {shapes: {[o14.id]: c10}}}}};
    });
    d8(this, "cancel", () => {
      let {initialShape: e15, app: {currentPageId: t14}} = this;
      return {document: {pages: {[t14]: {shapes: {[e15.id]: e15}}}}};
    });
    d8(this, "complete", () => {
      let {initialShape: e15, app: {currentPageId: t14}} = this;
      return {id: this.commandId, before: {document: {pages: {[t14]: {shapes: {[e15.id]: e15}}}}}, after: {document: {pages: {[t14]: {shapes: {[e15.id]: x7.onSessionComplete(this.app.getShape(this.initialShape.id))}}}}}};
    });
    let {originPoint: i10} = e14;
    this.topLeft = [...i10], this.handleId = n10, this.initialShape = this.app.getShape(t13), this.commandId = o13;
  }
};
var Mi = class extends Ae {
  constructor(e14) {
    super(e14);
    d8(this, "type", "rotate");
    d8(this, "status", "transforming");
    d8(this, "performanceMode");
    d8(this, "delta", [0, 0]);
    d8(this, "commonBoundsCenter");
    d8(this, "initialAngle");
    d8(this, "initialShapes");
    d8(this, "changes", {});
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      let {commonBoundsCenter: e15, initialShapes: t14, app: {currentPageId: n11, currentPoint: o14, shiftKey: i11}} = this, a10 = {}, l10 = e.angle(e15, o14) - this.initialAngle;
      return i11 && (l10 = Utils.snapAngleToSegments(l10, 24)), t14.forEach(({center: r12, shape: c10}) => {
        let {rotation: p10 = 0} = c10, u10 = 0;
        i11 && (u10 = Utils.snapAngleToSegments(p10, 24) - p10);
        let h10 = x7.getRotatedShapeMutation(c10, r12, e15, i11 ? l10 + u10 : l10);
        h10 && (a10[c10.id] = h10);
      }), this.changes = a10, {document: {pages: {[n11]: {shapes: a10}}}};
    });
    d8(this, "cancel", () => {
      let {initialShapes: e15, app: {currentPageId: t14}} = this, n11 = {};
      return e15.forEach(({shape: o14}) => n11[o14.id] = o14), {document: {pages: {[t14]: {shapes: n11}}}};
    });
    d8(this, "complete", () => {
      let {initialShapes: e15, app: {currentPageId: t14}} = this, n11 = {}, o14 = this.changes;
      return e15.forEach(({shape: {id: i11, point: a10, rotation: l10, handles: r12}}) => {
        n11[i11] = {point: a10, rotation: l10, handles: r12};
      }), {id: "rotate", before: {document: {pages: {[t14]: {shapes: n11}}}}, after: {document: {pages: {[t14]: {shapes: o14}}}}};
    });
    let {app: {currentPageId: t13, pageState: n10, originPoint: o13}} = this, i10 = x7.getSelectedBranchSnapshot(e14.state, t13).filter((a10) => !a10.isLocked);
    if (i10.length === 0)
      throw Error("No selected shapes!");
    if (e14.rotationInfo.selectedIds === n10.selectedIds) {
      if (e14.rotationInfo.center === void 0)
        throw Error("We should have a center for rotation!");
      this.commonBoundsCenter = e14.rotationInfo.center;
    } else
      this.commonBoundsCenter = Utils.getBoundsCenter(Utils.getCommonBounds(i10.map(x7.getBounds))), e14.rotationInfo.selectedIds = n10.selectedIds, e14.rotationInfo.center = this.commonBoundsCenter;
    this.initialShapes = i10.filter((a10) => a10.children === void 0).map((a10) => ({shape: a10, center: this.app.getShapeUtil(a10).getCenter(a10)})), this.initialAngle = e.angle(this.commonBoundsCenter, o13);
  }
};
var Ei = class extends Ae {
  constructor(e14, t13 = TLBoundsCorner.BottomRight, n10 = false) {
    super(e14);
    this.transformType = t13;
    this.isCreate = n10;
    d8(this, "type", "transform");
    d8(this, "performanceMode");
    d8(this, "status", "transforming");
    d8(this, "scaleX", 1);
    d8(this, "scaleY", 1);
    d8(this, "initialShapes");
    d8(this, "initialShapeIds");
    d8(this, "initialSelectedIds");
    d8(this, "shapeBounds");
    d8(this, "hasUnlockedShapes");
    d8(this, "isAllAspectRatioLocked");
    d8(this, "initialCommonBounds");
    d8(this, "snapInfo", {state: "empty"});
    d8(this, "prevPoint", [0, 0]);
    d8(this, "speed", 1);
    d8(this, "start", () => {
      this.snapInfo = {state: "ready", bounds: this.app.shapes.filter((e15) => !this.initialShapeIds.includes(e15.id)).map((e15) => Utils.getBoundsWithCenter(x7.getRotatedBounds(e15)))};
    });
    d8(this, "update", () => {
      let {transformType: e15, shapeBounds: t14, initialCommonBounds: n11, isAllAspectRatioLocked: o14, app: {currentPageId: i11, pageState: {camera: a11}, viewport: l10, currentPoint: r12, previousPoint: c10, originPoint: p10, shiftKey: u10, altKey: h10, metaKey: g10, currentGrid: m10, settings: {isSnapping: T10, showGrid: y10}}} = this, b10 = {}, S10 = h10 ? e.mul(e.sub(r12, p10), 2) : e.sub(r12, p10), w10 = Utils.getTransformedBoundingBox(n11, e15, S10, 0, u10 || o14);
      h10 && (w10 = f8(f8({}, w10), Utils.centerBounds(w10, Utils.getBoundsCenter(n11)))), y10 && (w10 = f8(f8({}, w10), Utils.snapBoundsToGrid(w10, m10)));
      let B10 = e.dist(r12, c10) - this.speed;
      this.speed = this.speed + B10 * (B10 > 1 ? 0.5 : 0.15);
      let I10 = [];
      if ((T10 && !g10 || !T10 && g10) && this.speed * a11.zoom < 10 && this.snapInfo.state === "ready") {
        let P10 = Utils.getSnapPoints(Utils.getBoundsWithCenter(w10), this.snapInfo.bounds.filter((v10) => Utils.boundsContain(l10, v10) || Utils.boundsCollide(l10, v10)), 5 / a11.zoom);
        P10 && (I10 = P10.snapLines, w10 = Utils.getTransformedBoundingBox(n11, e15, e.sub(S10, P10.offset), 0, u10 || o14));
      }
      return this.scaleX = w10.scaleX, this.scaleY = w10.scaleY, t14.forEach(({initialShape: P10, initialShapeBounds: v10, transformOrigin: Q}) => {
        let oe2 = Utils.getRelativeTransformedBoundingBox(w10, n11, v10, this.scaleX < 0, this.scaleY < 0);
        y10 && (oe2 = Utils.snapBoundsToGrid(oe2, m10));
        let te = x7.transform(this.app.getShape(P10.id), oe2, {type: this.transformType, initialShape: P10, scaleX: this.scaleX, scaleY: this.scaleY, transformOrigin: Q});
        b10[P10.id] = te;
      }), {appState: {snapLines: I10}, document: {pages: {[i11]: {shapes: b10}}}};
    });
    d8(this, "cancel", () => {
      let {shapeBounds: e15, app: {currentPageId: t14}} = this, n11 = {};
      return this.isCreate ? e15.forEach((o14) => n11[o14.initialShape.id] = void 0) : e15.forEach((o14) => n11[o14.initialShape.id] = o14.initialShape), {appState: {snapLines: []}, document: {pages: {[t14]: {shapes: n11}}, pageStates: {[t14]: {selectedIds: this.isCreate ? [] : e15.map((o14) => o14.initialShape.id)}}}};
    });
    d8(this, "complete", () => {
      let {isCreate: e15, shapeBounds: t14, hasUnlockedShapes: n11, app: {currentPageId: o14}} = this;
      if (!n11)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2)
        return this.cancel();
      let i11 = {}, a11 = {}, l10, r12;
      return e15 ? (l10 = [], r12 = [], t14.forEach(({initialShape: c10}) => {
        i11[c10.id] = void 0, a11[c10.id] = this.app.getShape(c10.id);
      })) : (l10 = this.initialSelectedIds, r12 = this.initialSelectedIds, t14.forEach(({initialShape: c10}) => {
        i11[c10.id] = c10, a11[c10.id] = this.app.getShape(c10.id);
      })), {id: "transform", before: {appState: {snapLines: []}, document: {pages: {[o14]: {shapes: i11}}, pageStates: {[o14]: {selectedIds: l10, hoveredId: void 0, editingId: void 0}}}}, after: {appState: {snapLines: []}, document: {pages: {[o14]: {shapes: a11}}, pageStates: {[o14]: {selectedIds: r12, hoveredId: void 0, editingId: void 0}}}}};
    });
    this.initialSelectedIds = [...this.app.selectedIds], this.app.rotationInfo.selectedIds = [...this.initialSelectedIds], this.initialShapes = x7.getSelectedBranchSnapshot(this.app.state, this.app.currentPageId).filter((l10) => !l10.isLocked), this.initialShapeIds = this.initialShapes.map((l10) => l10.id), this.hasUnlockedShapes = this.initialShapes.length > 0, this.isAllAspectRatioLocked = this.initialShapes.every((l10) => l10.isAspectRatioLocked || x7.getShapeUtil(l10).isAspectRatioLocked);
    let o13 = Object.fromEntries(this.initialShapes.map((l10) => [l10.id, x7.getBounds(l10)])), i10 = Object.values(o13);
    this.initialCommonBounds = Utils.getCommonBounds(i10);
    let a10 = Utils.getBoundsFromPoints(i10.map(Utils.getBoundsCenter));
    this.shapeBounds = this.initialShapes.map((l10) => {
      let r12 = o13[l10.id], c10 = Utils.getBoundsCenter(r12), p10 = (c10[0] - a10.minX) / a10.width, u10 = (c10[1] - a10.minY) / a10.height;
      return {initialShape: l10, initialShapeBounds: r12, transformOrigin: [p10, u10]};
    });
  }
};
var Ri = class extends Ae {
  constructor(e14, t13, n10, o13 = false) {
    super(e14);
    d8(this, "type", "transformSingle");
    d8(this, "status", "transforming");
    d8(this, "performanceMode");
    d8(this, "transformType");
    d8(this, "scaleX", 1);
    d8(this, "scaleY", 1);
    d8(this, "isCreate");
    d8(this, "initialShape");
    d8(this, "initialShapeBounds");
    d8(this, "initialCommonBounds");
    d8(this, "snapInfo", {state: "empty"});
    d8(this, "prevPoint", [0, 0]);
    d8(this, "speed", 1);
    d8(this, "start", () => {
      this.snapInfo = {state: "ready", bounds: this.app.shapes.filter((e15) => e15.id !== this.initialShape.id).map((e15) => Utils.getBoundsWithCenter(x7.getRotatedBounds(e15)))};
    });
    d8(this, "update", () => {
      let {transformType: e15, initialShape: t14, initialShapeBounds: n11, app: {settings: {isSnapping: o14, showGrid: i11}, currentPageId: a10, pageState: {camera: l10}, viewport: r12, currentPoint: c10, previousPoint: p10, originPoint: u10, currentGrid: h10, shiftKey: g10, altKey: m10, metaKey: T10}} = this;
      if (t14.isLocked)
        return;
      let y10 = {}, b10 = m10 ? e.mul(e.sub(c10, u10), 2) : e.sub(c10, u10), S10 = this.app.getShape(t14.id), w10 = x7.getShapeUtil(S10), D10 = Utils.getTransformedBoundingBox(n11, e15, b10, S10.rotation, g10 || S10.isAspectRatioLocked || w10.isAspectRatioLocked);
      m10 && (D10 = f8(f8({}, D10), Utils.centerBounds(D10, Utils.getBoundsCenter(n11)))), i11 && (D10 = f8(f8({}, D10), Utils.snapBoundsToGrid(D10, h10)));
      let I10 = e.dist(c10, p10) - this.speed;
      this.speed = this.speed + I10 * (I10 > 1 ? 0.5 : 0.15);
      let P10 = [];
      if ((o14 && !T10 || !o14 && T10) && !t14.rotation && this.speed * l10.zoom < 10 && this.snapInfo.state === "ready") {
        let Q = Utils.getSnapPoints(Utils.getBoundsWithCenter(D10), this.snapInfo.bounds.filter((oe2) => Utils.boundsContain(r12, oe2) || Utils.boundsCollide(r12, oe2)), 5 / l10.zoom);
        Q && (P10 = Q.snapLines, D10 = Utils.getTransformedBoundingBox(n11, e15, e.sub(b10, Q.offset), S10.rotation, g10 || S10.isAspectRatioLocked || w10.isAspectRatioLocked));
      }
      let v10 = x7.getShapeUtil(S10).transformSingle(S10, D10, {initialShape: t14, type: this.transformType, scaleX: D10.scaleX, scaleY: D10.scaleY, transformOrigin: [0.5, 0.5]});
      return v10 && (y10[S10.id] = v10), i11 && v10 && v10.point && (v10.point = e.snap(v10.point, h10)), {appState: {snapLines: P10}, document: {pages: {[a10]: {shapes: y10}}}};
    });
    d8(this, "cancel", () => {
      let {initialShape: e15, app: {currentPageId: t14}} = this, n11 = {};
      return this.isCreate ? n11[e15.id] = void 0 : n11[e15.id] = e15, {appState: {snapLines: []}, document: {pages: {[t14]: {shapes: n11}}, pageStates: {[t14]: {selectedIds: this.isCreate ? [] : [e15.id]}}}};
    });
    d8(this, "complete", () => {
      let {initialShape: e15, app: {currentPageId: t14}} = this;
      if (e15.isLocked)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2)
        return this.cancel();
      let n11 = {}, o14 = {};
      return n11[e15.id] = this.isCreate ? void 0 : e15, o14[e15.id] = x7.onSessionComplete(this.app.getShape(e15.id)), {id: "transform_single", before: {appState: {snapLines: []}, document: {pages: {[t14]: {shapes: n11}}, pageStates: {[t14]: {selectedIds: this.isCreate ? [] : [e15.id], editingId: void 0, hoveredId: void 0}}}}, after: {appState: {snapLines: []}, document: {pages: {[t14]: {shapes: o14}}, pageStates: {[t14]: {selectedIds: [e15.id], editingId: void 0, hoveredId: void 0}}}}};
    });
    this.isCreate = o13, this.transformType = n10;
    let i10 = this.app.getShape(t13);
    this.initialShape = i10, this.initialShapeBounds = x7.getBounds(i10), this.initialCommonBounds = x7.getRotatedBounds(i10), this.app.rotationInfo.selectedIds = [i10.id];
  }
};
var Li = class extends Ae {
  constructor(e14, t13 = false, n10 = false) {
    super(e14);
    d8(this, "performanceMode");
    d8(this, "type", "translate");
    d8(this, "status", "translating");
    d8(this, "delta", [0, 0]);
    d8(this, "prev", [0, 0]);
    d8(this, "prevPoint", [0, 0]);
    d8(this, "speed", 1);
    d8(this, "cloneInfo", {state: "empty"});
    d8(this, "snapInfo", {state: "empty"});
    d8(this, "snapLines", []);
    d8(this, "isCloning", false);
    d8(this, "isCreate");
    d8(this, "link");
    d8(this, "initialIds");
    d8(this, "hasUnlockedShapes");
    d8(this, "initialSelectedIds");
    d8(this, "initialCommonBounds");
    d8(this, "initialShapes");
    d8(this, "initialParentChildren");
    d8(this, "bindingsToDelete");
    d8(this, "start", () => {
      let {bindingsToDelete: e15, initialIds: t14, app: {currentPageId: n11, page: o14}} = this, i11 = [], a11 = [];
      if (Object.values(o14.shapes).forEach((r13) => {
        let c10 = Utils.getBoundsWithCenter(x7.getRotatedBounds(r13));
        i11.push(c10), t14.has(r13.id) || a11.push(c10);
      }), this.snapInfo = {state: "ready", bounds: i11, others: a11}, e15.length === 0)
        return;
      let l11 = {};
      return e15.forEach((r13) => l11[r13.id] = void 0), {document: {pages: {[n11]: {bindings: l11}}}};
    });
    d8(this, "update", () => {
      let {initialParentChildren: e15, initialShapes: t14, initialCommonBounds: n11, bindingsToDelete: o14, app: {pageState: {camera: i11}, settings: {isSnapping: a11, showGrid: l11}, currentPageId: r13, viewport: c10, selectedIds: p10, currentPoint: u10, previousPoint: h10, originPoint: g10, altKey: m10, shiftKey: T10, metaKey: y10, currentGrid: b10}} = this, S10 = {}, w10 = {}, D10 = {}, B10 = e.sub(u10, g10), I10 = false;
      this.isCreate || (m10 && !this.isCloning ? (this.isCloning = true, I10 = true) : !m10 && this.isCloning && (this.isCloning = false, I10 = true)), T10 && (Math.abs(B10[0]) < Math.abs(B10[1]) ? B10[0] = 0 : B10[1] = 0);
      let v10 = e.dist(u10, h10) - this.speed;
      if (this.speed = this.speed + v10 * (v10 > 1 ? 0.5 : 0.15), this.snapLines = [], (a11 && !y10 || !a11 && y10) && this.speed * i11.zoom < 10 && this.snapInfo.state === "ready") {
        let Q = Utils.getSnapPoints(Utils.getBoundsWithCenter(l11 ? Utils.snapBoundsToGrid(Utils.translateBounds(n11, B10), b10) : Utils.translateBounds(n11, B10)), (this.isCloning ? this.snapInfo.bounds : this.snapInfo.others).filter((oe2) => Utils.boundsContain(c10, oe2) || Utils.boundsCollide(c10, oe2)), 5 / i11.zoom);
        Q && (this.snapLines = Q.snapLines, B10 = e.sub(B10, Q.offset));
      }
      if (this.prev = B10, this.isCloning)
        if (I10) {
          if (this.cloneInfo.state === "empty" && this.createCloneInfo(), this.cloneInfo.state === "empty")
            throw Error;
          let {clones: Q, clonedBindings: oe2} = this.cloneInfo;
          this.isCloning = true, o14.forEach((te) => S10[te.id] = te), t14.forEach((te) => w10[te.id] = {point: te.point}), Q.forEach((te) => {
            var ke;
            if (w10[te.id] = f8({}, te), te.parentId !== r13 && !p10.includes(te.parentId)) {
              let be2 = ((ke = w10[te.parentId]) == null ? void 0 : ke.children) || e15[te.parentId];
              be2.includes(te.id) || (w10[te.parentId] = C5(f8({}, w10[te.parentId]), {children: [...be2, te.id]}));
            }
          });
          for (let te of oe2)
            S10[te.id] = te;
          D10.selectedIds = Q.map((te) => te.id), Q.forEach((te) => {
            w10[te.id] = C5(f8({}, te), {point: l11 ? e.snap(e.toFixed(e.add(te.point, B10)), b10) : e.toFixed(e.add(te.point, B10))});
          });
        } else {
          if (this.cloneInfo.state === "empty")
            throw Error;
          let {clones: Q} = this.cloneInfo;
          Q.forEach((oe2) => {
            w10[oe2.id] = {point: l11 ? e.snap(e.toFixed(e.add(oe2.point, B10)), b10) : e.toFixed(e.add(oe2.point, B10))};
          });
        }
      else if (I10) {
        if (this.cloneInfo.state === "empty")
          throw Error;
        let {clones: Q, clonedBindings: oe2} = this.cloneInfo;
        this.isCloning = false, o14.forEach((te) => S10[te.id] = void 0), Q.forEach((te) => {
          te.parentId !== r13 && (w10[te.parentId] = C5(f8({}, w10[te.parentId]), {children: e15[te.parentId]}));
        }), Q.forEach((te) => w10[te.id] = void 0), t14.forEach((te) => {
          w10[te.id] = {point: l11 ? e.snap(e.toFixed(e.add(te.point, B10)), b10) : e.toFixed(e.add(te.point, B10))};
        });
        for (let te of oe2)
          S10[te.id] = void 0;
        D10.selectedIds = t14.map((te) => te.id);
      } else
        t14.forEach((Q) => {
          w10[Q.id] = {point: l11 ? e.snap(e.toFixed(e.add(Q.point, B10)), b10) : e.toFixed(e.add(Q.point, B10))};
        });
      return {appState: {snapLines: this.snapLines}, document: {pages: {[r13]: {shapes: w10, bindings: S10}}, pageStates: {[r13]: D10}}};
    });
    d8(this, "cancel", () => {
      let {initialShapes: e15, initialSelectedIds: t14, bindingsToDelete: n11, app: {currentPageId: o14}} = this, i11 = {}, a11 = {}, l11 = {editingId: void 0, hoveredId: void 0};
      if (n11.forEach((r13) => i11[r13.id] = r13), this.isCreate ? (e15.forEach(({id: r13}) => a11[r13] = void 0), l11.selectedIds = []) : (e15.forEach(({id: r13, point: c10}) => a11[r13] = C5(f8({}, a11[r13]), {point: c10})), l11.selectedIds = t14), this.cloneInfo.state === "ready") {
        let {clones: r13, clonedBindings: c10} = this.cloneInfo;
        r13.forEach((p10) => a11[p10.id] = void 0), c10.forEach((p10) => i11[p10.id] = void 0);
      }
      return {appState: {snapLines: []}, document: {pages: {[o14]: {shapes: a11, bindings: i11}}, pageStates: {[o14]: l11}}};
    });
    d8(this, "complete", () => {
      let {initialShapes: e15, initialParentChildren: t14, bindingsToDelete: n11, app: {currentPageId: o14}} = this, i11 = {}, a11 = {}, l11 = {}, r13 = {};
      if (this.isCloning) {
        if (this.cloneInfo.state === "empty" && this.createCloneInfo(), this.cloneInfo.state !== "ready")
          throw Error;
        let {clones: c10, clonedBindings: p10} = this.cloneInfo;
        c10.forEach((u10) => {
          a11[u10.id] = void 0, r13[u10.id] = this.app.getShape(u10.id), u10.parentId !== o14 && (a11[u10.parentId] = C5(f8({}, a11[u10.parentId]), {children: t14[u10.parentId]}), r13[u10.parentId] = C5(f8({}, r13[u10.parentId]), {children: this.app.getShape(u10.parentId).children}));
        }), p10.forEach((u10) => {
          i11[u10.id] = void 0, l11[u10.id] = this.app.getBinding(u10.id);
        });
      } else
        e15.forEach((c10) => {
          a11[c10.id] = this.isCreate ? void 0 : C5(f8({}, a11[c10.id]), {point: c10.point}), r13[c10.id] = f8(f8({}, r13[c10.id]), this.isCreate ? this.app.getShape(c10.id) : {point: this.app.getShape(c10.id).point});
        });
      return n11.forEach((c10) => {
        i11[c10.id] = c10;
        for (let p10 of [c10.toId, c10.fromId]) {
          let u10 = this.app.getShape(p10);
          !u10.handles || Object.values(u10.handles).filter((h10) => h10.bindingId === c10.id).forEach((h10) => {
            a11[p10] = C5(f8({}, a11[p10]), {handles: {}}), r13[p10] = C5(f8({}, r13[p10]), {handles: {}}), a11[p10].handles[h10.id] = {bindingId: c10.id}, r13[p10].handles[h10.id] = {bindingId: void 0};
          });
        }
      }), {id: "translate", before: {appState: {snapLines: []}, document: {pages: {[o14]: {shapes: a11, bindings: i11}}, pageStates: {[o14]: {selectedIds: this.isCreate ? [] : [...this.initialSelectedIds]}}}}, after: {appState: {snapLines: []}, document: {pages: {[o14]: {shapes: r13, bindings: l11}}, pageStates: {[o14]: {selectedIds: [...this.app.selectedIds]}}}}};
    });
    d8(this, "createCloneInfo", () => {
      let {initialShapes: e15, initialParentChildren: t14, app: {selectedIds: n11, currentPageId: o14, page: i11}} = this, a11 = {}, l11 = {}, r13 = [], c10 = [];
      e15.forEach((u10) => {
        let h10 = Utils.uniqueId();
        t14[h10] = t14[u10.id], a11[u10.id] = h10;
        let g10 = C5(f8({}, Utils.deepClone(u10)), {id: h10, parentId: u10.parentId, childIndex: x7.getChildIndexAbove(this.app.state, u10.id, o14)});
        if (g10.type === "video") {
          let m10 = document.getElementById(u10.id + "_video");
          m10 && (g10.currentTime = (m10.currentTime + 16) % m10.duration);
        }
        c10.push(g10);
      }), c10.forEach((u10) => {
        u10.children !== void 0 && (u10.children = u10.children.map((h10) => a11[h10]));
      }), c10.forEach((u10) => {
        n11.includes(u10.parentId) && (u10.parentId = a11[u10.parentId]);
      });
      let p10 = new Set(Object.keys(a11));
      Object.values(i11.bindings).filter((u10) => p10.has(u10.fromId) || p10.has(u10.toId)).forEach((u10) => {
        if (p10.has(u10.fromId) && p10.has(u10.toId)) {
          let h10 = Utils.uniqueId(), g10 = C5(f8({}, Utils.deepClone(u10)), {id: h10, fromId: a11[u10.fromId] || u10.fromId, toId: a11[u10.toId] || u10.toId});
          l11[u10.id] = h10, r13.push(g10);
        }
      }), c10.forEach((u10) => {
        if (u10.handles && u10.handles)
          for (let h10 in u10.handles) {
            let g10 = u10.handles[h10];
            g10.bindingId = g10.bindingId ? l11[g10.bindingId] : void 0;
          }
      }), c10.forEach((u10) => {
        if (i11.shapes[u10.id])
          throw Error("uh oh, we didn't clone correctly");
      }), this.cloneInfo = {state: "ready", clones: c10, cloneMap: a11, clonedBindings: r13};
    });
    this.isCreate = t13, this.link = n10;
    let {currentPageId: o13, selectedIds: i10, page: a10} = this.app;
    this.initialSelectedIds = [...i10];
    let l10 = (n10 ? x7.getLinkedShapeIds(this.app.state, o13, n10, false) : i10).map((c10) => this.app.getShape(c10)).filter((c10) => !c10.isLocked), r12 = new Set(l10.map((c10) => c10.id));
    this.hasUnlockedShapes = l10.length > 0, this.initialShapes = Array.from(new Set(l10.filter((c10) => !r12.has(c10.parentId)).flatMap((c10) => c10.children ? [c10, ...c10.children.map((p10) => this.app.getShape(p10))] : [c10])).values()), this.initialIds = new Set(this.initialShapes.map((c10) => c10.id)), this.bindingsToDelete = [], Object.values(a10.bindings).filter((c10) => this.initialIds.has(c10.fromId) || this.initialIds.has(c10.toId)).forEach((c10) => {
      this.initialIds.has(c10.fromId) && (this.initialIds.has(c10.toId) || this.bindingsToDelete.push(c10));
    }), this.initialParentChildren = {}, this.initialShapes.map((c10) => c10.parentId).filter((c10) => c10 !== a10.id).forEach((c10) => {
      this.initialParentChildren[c10] = this.app.getShape(c10).children;
    }), this.initialCommonBounds = Utils.getCommonBounds(this.initialShapes.map(x7.getRotatedBounds)), this.app.rotationInfo.selectedIds = [...this.app.selectedIds];
  }
};
var Ai = class extends Ae {
  constructor(e14) {
    super(e14);
    d8(this, "type", "draw");
    d8(this, "performanceMode");
    d8(this, "status", "creating");
    d8(this, "isLocked");
    d8(this, "lockedDirection");
    d8(this, "erasedShapes", new Set());
    d8(this, "erasedBindings", new Set());
    d8(this, "initialSelectedShapes");
    d8(this, "erasableShapes");
    d8(this, "prevPoint");
    d8(this, "prevEraseShapesSize", 0);
    d8(this, "interval");
    d8(this, "timestamp1", 0);
    d8(this, "timestamp2", 0);
    d8(this, "prevErasePoint", []);
    d8(this, "loop", () => {
      let e15 = Date.now(), t13 = e15 - this.timestamp1, n10 = e15 - this.timestamp2, {eraseLine: o13} = this.app.appState, i10 = [...o13], a10 = false;
      t13 > 16 && this.prevErasePoint !== this.prevPoint && (a10 = true, i10 = [...o13, this.prevPoint], this.prevErasePoint = this.prevPoint), n10 > 32 && i10.length > 1 && (a10 = true, i10.splice(0, Math.ceil(i10.length * 0.1)), this.timestamp2 = e15), a10 && this.app.patchState({appState: {eraseLine: i10}}, "eraseline"), this.interval = requestAnimationFrame(this.loop);
    });
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      let {page: e15, shiftKey: t13, originPoint: n10, currentPoint: o13, zoom: i10} = this.app;
      if (t13) {
        if (!this.isLocked && e.dist(n10, o13) > 4 / i10) {
          if (!this.lockedDirection) {
            let c10 = e.sub(o13, n10);
            this.lockedDirection = c10[0] > c10[1] ? "horizontal" : "vertical";
          }
          this.isLocked = true;
        }
      } else
        this.isLocked && (this.isLocked = false);
      this.isLocked && (this.lockedDirection === "vertical" ? o13[0] = n10[0] : o13[1] = n10[1]);
      let a10 = e.toFixed(e.add(n10, e.sub(o13, n10))), l10 = new Set([]);
      this.erasableShapes.forEach((c10) => {
        if (!this.erasedShapes.has(c10) && this.app.getShapeUtil(c10).hitTestLineSegment(c10, this.prevPoint, a10) && (this.erasedShapes.add(c10), l10.add(c10.id), c10.children !== void 0))
          for (let p10 of c10.children)
            this.erasedShapes.add(this.app.getShape(p10)), l10.add(p10);
      }), Object.values(e15.bindings).forEach((c10) => {
        for (let p10 of [c10.toId, c10.fromId])
          l10.has(p10) && this.erasedBindings.add(c10);
      }), this.erasedShapes.forEach((c10) => {
        this.app.getShape(c10.id) || (this.erasedShapes.delete(c10), this.erasableShapes.delete(c10), l10.delete(c10.id));
      });
      let r12 = Array.from(this.erasedShapes.values());
      if (this.prevPoint = a10, r12.length !== this.prevEraseShapesSize)
        return this.prevEraseShapesSize = r12.length, {document: {pages: {[e15.id]: {shapes: Object.fromEntries(r12.map((c10) => [c10.id, {isGhost: true}]))}}}};
    });
    d8(this, "cancel", () => {
      let {page: e15} = this.app;
      cancelAnimationFrame(this.interval), this.erasedShapes.forEach((n10) => {
        this.app.getShape(n10.id) || (this.erasedShapes.delete(n10), this.erasableShapes.delete(n10));
      });
      let t13 = Array.from(this.erasedShapes.values());
      return {document: {pages: {[e15.id]: {shapes: Object.fromEntries(t13.map((n10) => [n10.id, {isGhost: false}]))}}, pageStates: {[e15.id]: {selectedIds: this.initialSelectedShapes.map((n10) => n10.id)}}}, appState: {eraseLine: []}};
    });
    d8(this, "complete", () => {
      let {page: e15} = this.app;
      cancelAnimationFrame(this.interval), this.erasedShapes.forEach((r12) => {
        this.app.getShape(r12.id) || (this.erasedShapes.delete(r12), this.erasableShapes.delete(r12));
      }), this.erasedBindings.forEach((r12) => {
        this.app.getBinding(r12.id) || this.erasedBindings.delete(r12);
      });
      let t13 = Array.from(this.erasedShapes.values()), n10 = Array.from(this.erasedBindings.values()), o13 = t13.map((r12) => r12.id), i10 = n10.map((r12) => r12.id), a10 = {shapes: Object.fromEntries(t13.map((r12) => [r12.id, r12])), bindings: Object.fromEntries(n10.map((r12) => [r12.id, r12]))}, l10 = {shapes: Object.fromEntries(t13.map((r12) => [r12.id, void 0])), bindings: Object.fromEntries(n10.map((r12) => [r12.id, void 0]))};
      return this.app.shapes.forEach((r12) => {
        r12.handles && !l10.shapes[r12.id] && Object.values(r12.handles).forEach((c10) => {
          var p10, u10;
          c10.bindingId && i10.includes(c10.bindingId) && (a10.shapes[r12.id] = C5(f8({}, a10.shapes[r12.id]), {handles: C5(f8({}, (p10 = a10.shapes[r12.id]) == null ? void 0 : p10.handles), {[c10.id]: c10})}), o13.includes(r12.id) || (l10.shapes[r12.id] = C5(f8({}, l10.shapes[r12.id]), {handles: C5(f8({}, (u10 = l10.shapes[r12.id]) == null ? void 0 : u10.handles), {[c10.id]: C5(f8({}, c10), {bindingId: void 0})})})));
        });
      }), {id: "erase", before: {document: {pages: {[e15.id]: a10}, pageStates: {[e15.id]: {selectedIds: this.initialSelectedShapes.filter((r12) => !!this.app.getShape(r12.id)).map((r12) => r12.id)}}}, appState: {eraseLine: []}}, after: {document: {pages: {[e15.id]: l10}, pageStates: {[e15.id]: {selectedIds: this.initialSelectedShapes.filter((r12) => !!this.app.getShape(r12.id)).filter((r12) => !o13.includes(r12.id)).map((r12) => r12.id)}}}, appState: {eraseLine: []}}};
    });
    this.prevPoint = [...e14.originPoint], this.initialSelectedShapes = this.app.selectedIds.map((t13) => this.app.getShape(t13)), this.erasableShapes = new Set(this.app.shapes.filter((t13) => !t13.isLocked)), this.interval = this.loop();
  }
};
var Hi = class extends Ae {
  constructor(e14, t13) {
    super(e14);
    d8(this, "type", "grid");
    d8(this, "performanceMode");
    d8(this, "status", "translating");
    d8(this, "shape");
    d8(this, "bounds");
    d8(this, "initialSelectedIds");
    d8(this, "initialSiblings");
    d8(this, "grid", {});
    d8(this, "columns", 1);
    d8(this, "rows", 1);
    d8(this, "isCopying", false);
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
      let {currentPageId: e15, altKey: t14, shiftKey: n11, currentPoint: o13} = this.app, i10 = {}, a10 = {}, l10 = Utils.getBoundsCenter(this.bounds), r12 = e.sub(o13, l10);
      n11 && (Math.abs(r12[0]) < Math.abs(r12[1]) ? r12[0] = 0 : r12[1] = 0);
      let c10 = this.bounds.width + 32, p10 = this.bounds.height + 32, u10 = Math.ceil(r12[0] / c10), h10 = Math.ceil(r12[1] / p10), g10 = Math.min(u10, 0), m10 = Math.min(h10, 0), T10 = Math.max(u10, 1), y10 = Math.max(h10, 1), b10 = new Set(), S10 = t14;
      S10 !== this.isCopying && (Object.values(this.grid).filter((w10) => w10 !== this.shape.id).forEach((w10) => i10[w10] = void 0), this.grid = {"0_0": this.shape.id}, this.isCopying = S10);
      for (let w10 = g10; w10 < T10; w10++)
        for (let D10 = m10; D10 < y10; D10++) {
          let B10 = `${w10}_${D10}`;
          if (b10.add(B10), this.grid[B10] || w10 === 0 && D10 === 0)
            continue;
          let I10 = this.getClone(e.add(this.shape.point, [w10 * c10, D10 * p10]), S10);
          i10[I10.id] = I10, this.grid[B10] = I10.id;
        }
      if (Object.entries(this.grid).forEach(([w10, D10]) => {
        b10.has(w10) || (i10[D10] = void 0, delete this.grid[w10]);
      }), Object.values(i10).length !== 0)
        return this.initialSiblings && (i10[this.shape.parentId] = {children: [...this.initialSiblings, ...Object.values(this.grid)]}), {document: {pages: {[e15]: {shapes: i10}}, pageStates: {[e15]: a10}}};
    });
    d8(this, "cancel", () => {
      let {currentPageId: e15} = this.app, t14 = {};
      return Object.values(this.grid).forEach((n11) => {
        t14[n11] = void 0;
      }), t14[this.shape.id] = C5(f8({}, t14[this.shape.id]), {point: this.shape.point}), this.initialSiblings && (t14[this.shape.parentId] = {children: [...this.initialSiblings, this.shape.id]}), {document: {pages: {[e15]: {shapes: t14}}, pageStates: {[e15]: {selectedIds: [this.shape.id]}}}};
    });
    d8(this, "complete", () => {
      let {currentPageId: e15} = this.app, t14 = {}, n11 = {}, o13 = [];
      if (Object.values(this.grid).forEach((i10) => {
        t14[i10] = void 0, n11[i10] = this.app.getShape(i10), o13.push(i10);
      }), t14[this.shape.id] = this.shape, this.initialSiblings && (t14[this.shape.parentId] = {children: [...this.initialSiblings, this.shape.id]}, n11[this.shape.parentId] = {children: [...this.initialSiblings, ...Object.values(this.grid)]}), o13.length !== 1)
        return {id: "grid", before: {document: {pages: {[e15]: {shapes: t14}}, pageStates: {[e15]: {selectedIds: [], hoveredId: void 0}}}}, after: {document: {pages: {[e15]: {shapes: n11}}, pageStates: {[e15]: {selectedIds: o13, hoveredId: void 0}}}}};
    });
    d8(this, "getClone", (e15, t14) => {
      let n11 = C5(f8({}, this.shape), {id: Utils.uniqueId(), point: e15});
      return t14 || n11.type === "sticky" && (n11.text = ""), n11;
    });
    var n10;
    this.shape = this.app.getShape(t13), this.grid["0_0"] = this.shape.id, this.bounds = this.app.getShapeBounds(t13), this.initialSelectedIds = [...this.app.selectedIds], this.shape.parentId !== this.app.currentPageId && (this.initialSiblings = (n10 = this.app.getShape(this.shape.parentId).children) == null ? void 0 : n10.filter((o13) => o13 !== this.shape.id));
  }
};
var zi = class extends Ae {
  constructor(e14, t13, n10) {
    super(e14);
    d8(this, "type", "edit");
    d8(this, "performanceMode");
    d8(this, "initialShape");
    d8(this, "initialSelectedIds");
    d8(this, "currentPageId");
    d8(this, "isCreating");
    d8(this, "start", () => {
    });
    d8(this, "update", () => {
    });
    d8(this, "cancel", () => ({document: {pages: {[this.currentPageId]: {shapes: {[this.initialShape.id]: this.isCreating ? void 0 : this.initialShape}}}, pageStates: {[this.currentPageId]: {selectedIds: this.isCreating ? [] : this.initialSelectedIds, editingId: void 0}}}}));
    d8(this, "complete", () => {
      let e15 = this.app.getShape(this.initialShape.id);
      return {id: "edit", before: {document: {pages: {[this.currentPageId]: {shapes: {[this.initialShape.id]: this.isCreating ? void 0 : this.initialShape}}}, pageStates: {[this.currentPageId]: {selectedIds: this.isCreating ? [] : this.initialSelectedIds, editingId: void 0}}}}, after: {document: {pages: {[this.currentPageId]: {shapes: {[this.initialShape.id]: e15}}}, pageStates: {[this.currentPageId]: {selectedIds: [e15.id], editingId: void 0}}}}};
    });
    this.initialShape = e14.getShape(t13, e14.currentPageId), this.currentPageId = e14.currentPageId, this.isCreating = n10, this.initialSelectedIds = [...e14.selectedIds];
  }
};
var au = {["arrow"]: vi, ["brush"]: ki, ["draw"]: Di, ["erase"]: Ai, ["handle"]: Bi, ["rotate"]: Mi, ["transform"]: Ei, ["transformSingle"]: Ri, ["translate"]: Li, ["grid"]: Hi, ["edit"]: zi};
var Pd = (s10) => au[s10];
var Ue = class extends Hs {
  constructor(e14) {
    super();
    this.app = e14;
    d8(this, "type", "select");
    d8(this, "previous");
    d8(this, "status", "idle");
    d8(this, "setStatus", (e15) => {
      this.status = e15, this.app.setStatus(this.status);
    });
    d8(this, "onEnter", () => {
      this.setStatus("idle");
    });
    d8(this, "onExit", () => {
      this.setStatus("idle");
    });
    d8(this, "onCancel", () => {
      this.status === "idle" ? this.app.selectTool("select") : this.setStatus("idle"), this.app.cancelSession();
    });
    d8(this, "getNextChildIndex", () => {
      let {shapes: e15, appState: {currentPageId: t13}} = this.app;
      return e15.length === 0 ? 1 : e15.filter((n10) => n10.parentId === t13).sort((n10, o13) => o13.childIndex - n10.childIndex)[0].childIndex + 1;
    });
    d8(this, "onPinchStart", () => {
      this.app.cancelSession(), this.setStatus("pinching");
    });
    d8(this, "onPinchEnd", () => {
      Utils.isMobileSafari() && this.app.undoSelect(), this.setStatus("idle");
    });
    d8(this, "onPinch", (e15, t13) => {
      var n10;
      this.status === "pinching" && (isNaN(e15.delta[0]) || isNaN(e15.delta[1]) || (this.app.pinchZoom(e15.point, e15.delta, e15.delta[2]), (n10 = this.onPointerMove) == null || n10.call(this, e15, t13)));
    });
    d8(this, "onKeyDown", (e15) => {
      if (e15 === "Escape") {
        this.onCancel();
        return;
      }
      if (e15 === "Meta" || e15 === "Control" || e15 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    d8(this, "onKeyUp", (e15) => {
      if (e15 === "Meta" || e15 === "Control" || e15 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    d8(this, "onPointerMove", () => {
      this.status === "creating" && this.app.updateSession();
    });
    d8(this, "onPointerUp", () => {
      if (this.status === "creating") {
        this.app.completeSession();
        let {isToolLocked: e15} = this.app.appState;
        e15 || this.app.selectTool("select");
      }
      this.setStatus("idle");
    });
  }
};
var Ro = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "select");
    d8(this, "pointedId");
    d8(this, "selectedGroupId");
    d8(this, "pointedHandleId");
    d8(this, "pointedBoundsHandle");
    d8(this, "pointedLinkHandleId");
    d8(this, "onEnter", () => {
      this.setStatus("idle");
    });
    d8(this, "onExit", () => {
      this.setStatus("idle");
    });
    d8(this, "clonePaint", (e14) => {
      if (this.app.selectedIds.length === 0)
        return;
      let t13 = this.app.selectedIds.map((c10) => this.app.getShape(c10)), n10 = Utils.expandBounds(Utils.getCommonBounds(t13.map(x7.getBounds)), 16), o13 = Utils.getBoundsCenter(n10), i10 = [n10.width, n10.height], a10 = [o13[0] + i10[0] * Math.floor((e14[0] + i10[0] / 2 - o13[0]) / i10[0]), o13[1] + i10[1] * Math.floor((e14[1] + i10[1] / 2 - o13[1]) / i10[1])], l10 = Utils.centerBounds(n10, a10);
      this.app.shapes.some((c10) => x7.getShapeUtil(c10).hitTestBounds(c10, l10)) || this.app.duplicate(this.app.selectedIds, a10);
    });
    d8(this, "getShapeClone", (e14, t13) => {
      let n10 = this.app.getShape(e14), o13 = x7.getShapeUtil(n10);
      if (o13.canClone) {
        let i10 = o13.getBounds(n10), a10 = o13.getCenter(n10), l10 = {top: [i10.minX, i10.minY - (i10.height + 32)], right: [i10.maxX + 32, i10.minY], bottom: [i10.minX, i10.maxY + 32], left: [i10.minX - (i10.width + 32), i10.minY], topLeft: [i10.minX - (i10.width + 32), i10.minY - (i10.height + 32)], topRight: [i10.maxX + 32, i10.minY - (i10.height + 32)], bottomLeft: [i10.minX - (i10.width + 32), i10.maxY + 32], bottomRight: [i10.maxX + 32, i10.maxY + 32]}[t13];
        if (n10.rotation !== 0) {
          let p10 = p.add(l10, [i10.width / 2, i10.height / 2]), u10 = p.rotWith(p10, a10, n10.rotation || 0);
          l10 = p.sub(u10, [i10.width / 2, i10.height / 2]);
        }
        let r12 = Utils.uniqueId(), c10 = C5(f8({}, n10), {id: r12, point: l10});
        return c10.type === "sticky" && (c10.text = ""), c10;
      }
    });
    d8(this, "onCancel", () => {
      this.app.session ? this.app.cancelSession() : this.selectNone(), this.setStatus("idle");
    });
    d8(this, "onKeyDown", (e14, t13, n10) => {
      switch (e14) {
        case "Escape": {
          this.onCancel();
          break;
        }
        case "Tab": {
          if (this.app.readOnly)
            return;
          if (!this.app.pageState.editingId && this.status === "idle" && this.app.selectedIds.length === 1) {
            let [o13] = this.app.selectedIds, i10 = this.getShapeClone(o13, "right");
            i10 && (this.app.createShapes(i10), this.setStatus("idle"), i10.type === "sticky" && (this.app.select(i10.id), this.app.setEditingId(i10.id)));
          }
          break;
        }
        case "Meta":
        case "Control":
        case "Alt": {
          this.app.updateSession();
          break;
        }
        case "Enter": {
          if (this.app.readOnly)
            return;
          let {pageState: o13} = this.app;
          o13.selectedIds.length === 1 && !o13.editingId && (this.app.setEditingId(o13.selectedIds[0]), n10.preventDefault());
        }
      }
    });
    d8(this, "onKeyUp", (e14, t13) => {
      if (this.status === "clonePainting" && !(t13.altKey && t13.shiftKey)) {
        this.setStatus("idle");
        return;
      }
      if (e14 === "Meta" || e14 === "Control" || e14 === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    d8(this, "onPointerMove", () => {
      let {originPoint: e14, currentPoint: t13} = this.app;
      if (this.app.readOnly && this.app.isPointing) {
        this.app.session ? this.app.updateSession() : p.dist(e14, t13) > 3 && (this.app.startSession("brush"), this.setStatus("brushing"));
        return;
      }
      switch (this.status) {
        case "pointingBoundsHandle": {
          if (!this.pointedBoundsHandle)
            throw Error("No pointed bounds handle");
          if (p.dist(e14, t13) > 3) {
            if (this.pointedBoundsHandle === "rotate")
              this.setStatus("rotating"), this.app.startSession("rotate");
            else if (this.pointedBoundsHandle === "center" || this.pointedBoundsHandle === "left" || this.pointedBoundsHandle === "right")
              this.setStatus("translating"), this.app.startSession("translate", false, this.pointedBoundsHandle);
            else {
              this.setStatus("transforming");
              let n10 = this.app.selectedIds.flatMap((o13) => x7.getDocumentBranch(this.app.state, o13, this.app.currentPageId));
              n10.length === 1 ? this.app.startSession("transformSingle", n10[0], this.pointedBoundsHandle) : this.app.startSession("transform", this.pointedBoundsHandle);
            }
            this.app.updateSession();
          }
          break;
        }
        case "pointingCanvas": {
          p.dist(e14, t13) > 3 && (this.app.startSession("brush"), this.setStatus("brushing"));
          break;
        }
        case "pointingClone": {
          p.dist(e14, t13) > 3 && (this.setStatus("translatingClone"), this.app.startSession("translate"), this.app.updateSession());
          break;
        }
        case "pointingBounds": {
          p.dist(e14, t13) > 3 && (this.setStatus("translating"), this.app.startSession("translate"), this.app.updateSession());
          break;
        }
        case "pointingHandle": {
          if (!this.pointedHandleId)
            throw Error("No pointed handle");
          if (p.dist(e14, t13) > 3) {
            this.setStatus("translatingHandle");
            let n10 = this.app.getShape(this.app.selectedIds[0]);
            n10 && (this.pointedHandleId === "bend" ? (this.app.startSession("handle", n10.id, this.pointedHandleId), this.app.updateSession()) : (this.app.startSession("arrow", n10.id, this.pointedHandleId, false), this.app.updateSession()));
          }
          break;
        }
        case "clonePainting": {
          this.clonePaint(t13);
          break;
        }
        default:
          if (this.app.session) {
            this.app.updateSession();
            break;
          }
      }
    });
    d8(this, "onPointerDown", (e14, t13) => {
      if (e14.target === "canvas" && this.status === "idle") {
        let {currentPoint: n10} = this.app;
        if (e14.spaceKey && t13.buttons === 1)
          return;
        if (this.status === "idle" && e14.altKey && e14.shiftKey) {
          this.setStatus("clonePainting"), this.clonePaint(n10);
          return;
        }
        if (!e14.shiftKey) {
          if (this.app.onShapeBlur(), e14.altKey && this.app.selectedIds.length > 0) {
            this.app.duplicate(this.app.selectedIds, n10);
            return;
          }
          this.selectNone();
        }
        this.setStatus("pointingCanvas");
      }
    });
    d8(this, "onPointerUp", (e14) => {
      var t13;
      if (this.status === "translatingClone" || this.status === "pointingClone") {
        this.pointedId && (this.app.completeSession(), this.app.setEditingId(this.pointedId)), this.setStatus("idle"), this.pointedId = void 0;
        return;
      }
      if (this.status === "pointingBounds") {
        if (e14.target === "bounds")
          this.selectNone();
        else if (this.app.isSelected(e14.target))
          e14.shiftKey ? this.pointedId !== e14.target && this.deselect(e14.target) : this.pointedId !== e14.target && this.app.selectedIds.length > 1 && this.select(e14.target);
        else if (this.pointedId === e14.target) {
          if (this.app.getShape(e14.target).isLocked)
            return;
          e14.shiftKey ? this.pushSelect(e14.target) : this.select(e14.target);
        }
      }
      this.setStatus("idle"), this.pointedBoundsHandle = void 0, this.pointedHandleId = void 0, this.pointedId = void 0, ((t13 = this.app.session) == null ? void 0 : t13.type) !== "edit" && this.app.completeSession();
    });
    d8(this, "onDoubleClickCanvas", () => {
      !this.app.readOnly;
    });
    d8(this, "onPointShape", (e14, t13) => {
      if (e14.spaceKey && t13.buttons === 1 || this.app.getShape(e14.target).isLocked)
        return;
      let {editingId: n10, hoveredId: o13} = this.app.pageState;
      if (n10 && e14.target !== n10 && this.app.onShapeBlur(), (this.status === "idle" || this.status === "pointingBounds") && e14.metaKey && e14.shiftKey && o13) {
        this.pointedId = o13, this.app.isSelected(o13) ? this.deselect(o13) : (this.pushSelect(o13), this.setStatus("pointingBounds"));
        return;
      }
      if (this.status === "pointingBounds") {
        let {parentId: i10} = this.app.getShape(e14.target);
        this.pointedId = i10 === this.app.currentPageId ? e14.target : i10;
        return;
      }
      if (this.status === "idle") {
        if (this.setStatus("pointingBounds"), e14.metaKey) {
          e14.shiftKey || this.selectNone(), this.app.startSession("brush"), this.setStatus("brushing");
          return;
        }
        let i10, {parentId: a10} = this.app.getShape(e14.target);
        a10 === this.app.currentPageId ? (i10 = e14.target, this.selectedGroupId = void 0) : a10 === this.selectedGroupId ? i10 = e14.target : (i10 = a10, this.selectedGroupId = void 0), this.app.isSelected(i10) || (this.pointedId = i10, e14.shiftKey ? this.pushSelect(i10) : this.select(i10));
      }
    });
    d8(this, "onDoubleClickShape", (e14) => {
      if (this.app.readOnly)
        return;
      let t13 = this.app.getShape(e14.target);
      if (t13.isLocked) {
        this.app.select(e14.target);
        return;
      }
      x7.getShapeUtil(t13.type).canEdit && (t13.parentId === this.app.currentPageId || t13.parentId === this.selectedGroupId) && this.app.setEditingId(e14.target), t13.parentId !== this.app.currentPageId && (this.selectedGroupId = t13.parentId), this.app.select(e14.target);
    });
    d8(this, "onRightPointShape", (e14) => {
      this.app.isSelected(e14.target) || this.app.select(e14.target);
    });
    d8(this, "onHoverShape", (e14) => {
      this.app.setHoveredId(e14.target);
    });
    d8(this, "onUnhoverShape", (e14) => {
      let {currentPageId: t13} = this.app;
      requestAnimationFrame(() => {
        t13 === this.app.currentPageId && this.app.pageState.hoveredId === e14.target && this.app.setHoveredId(void 0);
      });
    });
    d8(this, "onPointBounds", (e14) => {
      if (e14.metaKey) {
        e14.shiftKey || this.selectNone(), this.app.startSession("brush"), this.setStatus("brushing");
        return;
      }
      this.setStatus("pointingBounds");
    });
    d8(this, "onRightPointBounds", (e14, t13) => {
      t13.stopPropagation();
    });
    d8(this, "onReleaseBounds", () => {
      (this.status === "translating" || this.status === "brushing") && this.app.completeSession(), this.setStatus("idle");
    });
    d8(this, "onPointBoundsHandle", (e14) => {
      this.pointedBoundsHandle = e14.target, this.setStatus("pointingBoundsHandle");
    });
    d8(this, "onDoubleClickBoundsHandle", (e14) => {
      switch (e14.target) {
        case "center":
        case "left":
        case "right": {
          this.app.select(...x7.getLinkedShapeIds(this.app.state, this.app.currentPageId, e14.target, e14.shiftKey));
          break;
        }
        default:
          if (this.app.selectedIds.length === 1) {
            this.app.resetBounds(this.app.selectedIds);
            let t13 = this.app.getShape(this.app.selectedIds[0]);
            "label" in t13 && this.app.setEditingId(t13.id);
          }
      }
    });
    d8(this, "onReleaseBoundsHandle", () => {
      this.setStatus("idle");
    });
    d8(this, "onPointHandle", (e14) => {
      this.pointedHandleId = e14.target, this.setStatus("pointingHandle");
    });
    d8(this, "onDoubleClickHandle", (e14) => {
      if (e14.target === "bend") {
        let {selectedIds: t13} = this.app;
        if (t13.length !== 1)
          return;
        let n10 = this.app.getShape(t13[0]);
        x7.getShapeUtil(n10.type).canEdit && (n10.parentId === this.app.currentPageId || n10.parentId === this.selectedGroupId) && this.app.setEditingId(n10.id);
        return;
      }
      this.app.toggleDecoration(e14.target);
    });
    d8(this, "onReleaseHandle", () => {
      this.setStatus("idle");
    });
    d8(this, "onShapeClone", (e14) => {
      let t13 = this.app.selectedIds[0], n10 = this.getShapeClone(t13, e14.target);
      e14.target === "left" || e14.target === "right" || e14.target === "top" || e14.target === "bottom" ? n10 && (this.app.createShapes(n10), this.pointedId = n10.id, this.setStatus("pointingClone")) : (this.setStatus("gridCloning"), this.app.startSession("grid", t13));
    });
  }
  deselect(e14) {
    this.app.select(...this.app.selectedIds.filter((t13) => t13 !== e14));
  }
  select(e14) {
    this.app.select(e14);
  }
  pushSelect(e14) {
    let t13 = this.app.getShape(e14);
    this.app.select(...this.app.selectedIds.filter((n10) => n10 !== t13.parentId), e14);
  }
  selectNone() {
    this.app.selectNone();
  }
};
var Lo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "erase");
    d8(this, "status", "idle");
    d8(this, "onPointerDown", () => {
      this.app.readOnly || this.status === "idle" && this.setStatus("pointing");
    });
    d8(this, "onPointerMove", (e14) => {
      if (!this.app.readOnly)
        switch (this.status) {
          case "pointing": {
            p.dist(e14.origin, e14.point) > 3 && (this.app.startSession("erase"), this.app.updateSession(), this.setStatus("erasing"));
            break;
          }
          case "erasing":
            this.app.updateSession();
        }
    });
    d8(this, "onPointerUp", () => {
      if (!this.app.readOnly) {
        switch (this.status) {
          case "pointing": {
            let e14 = this.app.shapes.filter((t13) => !t13.isLocked).filter((t13) => this.app.getShapeUtil(t13).hitTestPoint(t13, this.app.currentPoint)).flatMap((t13) => t13.children ? [t13.id, ...t13.children] : t13.id);
            this.app.delete(e14);
            break;
          }
          case "erasing":
            this.app.completeSession();
        }
        this.setStatus("idle");
      }
    });
    d8(this, "onCancel", () => {
      this.status === "idle" ? this.previous ? this.app.selectTool(this.previous) : this.app.selectTool("select") : this.setStatus("idle"), this.app.cancelSession();
    });
  }
};
var Ao = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "text");
    d8(this, "stopEditingShape", () => {
      this.setStatus("idle"), this.app.appState.isToolLocked || this.app.selectTool("select");
    });
    d8(this, "onKeyUp", () => {
    });
    d8(this, "onKeyDown", () => {
    });
    d8(this, "onPointerDown", () => {
      if (this.status === "creating") {
        this.stopEditingShape();
        return;
      }
      if (this.status === "idle") {
        let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}} = this.app;
        this.app.createTextShapeAtPoint(n10 ? p.snap(e14, t13) : e14, void 0, true), this.setStatus("creating");
        return;
      }
    });
    d8(this, "onPointerUp", () => {
    });
    d8(this, "onPointShape", (e14) => {
      if (this.app.readOnly)
        return;
      let t13 = this.app.getShape(e14.target);
      t13.type === "text" && (this.setStatus("idle"), this.app.setEditingId(t13.id));
    });
    d8(this, "onShapeBlur", () => {
      this.app.readOnly || this.stopEditingShape();
    });
  }
};
var Ho = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "draw");
    d8(this, "lastShapeId");
    d8(this, "onEnter", () => {
      this.lastShapeId = void 0;
    });
    d8(this, "onCancel", () => {
      switch (this.status) {
        case "idle": {
          this.app.selectTool("select");
          break;
        }
        default: {
          this.setStatus("idle");
          break;
        }
      }
      this.app.cancelSession();
    });
    d8(this, "onPointerDown", (e14) => {
      if (this.status !== "idle" || this.app.readOnly)
        return;
      let {currentPoint: t13, appState: {currentPageId: n10, currentStyle: o13}} = this.app, i10 = this.lastShapeId && this.app.getShape(this.lastShapeId);
      if (e14.shiftKey && i10)
        this.app.startSession("draw", i10.id), this.setStatus("extending");
      else {
        let a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = gi.create({id: l10, parentId: n10, childIndex: a10, point: t13, style: f8({}, o13)});
        this.lastShapeId = l10, this.app.patchCreate([r12]), this.app.startSession("draw", l10), this.setStatus("creating");
      }
    });
    d8(this, "onPointerMove", () => {
      if (!this.app.readOnly)
        switch (this.status) {
          case "extending":
          case "creating":
            this.app.updateSession();
        }
    });
    d8(this, "onPointerUp", () => {
      this.app.completeSession(), this.setStatus("idle");
    });
  }
};
var zo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "ellipse");
    d8(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = mi.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, style: f8({}, i10)});
      this.app.patchCreate([r12]), this.app.startSession("transformSingle", r12.id, TLBoundsCorner.BottomRight, true), this.setStatus("creating");
    });
  }
};
var Oo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "rectangle");
    d8(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = ui.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, style: f8({}, i10)});
      this.app.patchCreate([r12]), this.app.startSession("transformSingle", r12.id, TLBoundsCorner.BottomRight, true), this.setStatus("creating");
    });
  }
};
var Fo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "triangle");
    d8(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = hi.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, style: f8({}, i10)});
      this.app.patchCreate([r12]), this.app.startSession("transformSingle", r12.id, TLBoundsCorner.BottomRight, true), this.setStatus("creating");
    });
  }
};
var jo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "line");
    d8(this, "onPointerDown", () => {
      if (this.app.readOnly || this.status !== "idle")
        return;
      let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = ko.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, decorations: {start: void 0, end: void 0}, style: f8({}, i10)});
      this.app.patchCreate([r12]), this.app.startSession("arrow", r12.id, "end", true), this.setStatus("creating");
    });
  }
};
var Uo = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "arrow");
    d8(this, "onPointerDown", () => {
      if (this.status !== "idle")
        return;
      let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId(), r12 = ko.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, style: f8({}, i10)});
      this.app.patchCreate([r12]), this.app.startSession("arrow", r12.id, "end", true), this.setStatus("creating");
    });
  }
};
var Go = class extends Ue {
  constructor() {
    super(...arguments);
    d8(this, "type", "sticky");
    d8(this, "shapeId");
    d8(this, "onPointerDown", () => {
      if (!this.app.readOnly) {
        if (this.status === "creating") {
          this.setStatus("idle"), this.app.appState.isToolLocked || this.app.selectTool("select");
          return;
        }
        if (this.status === "idle") {
          let {currentPoint: e14, currentGrid: t13, settings: {showGrid: n10}, appState: {currentPageId: o13, currentStyle: i10}} = this.app, a10 = this.getNextChildIndex(), l10 = Utils.uniqueId();
          this.shapeId = l10;
          let r12 = ms.create({id: l10, parentId: o13, childIndex: a10, point: n10 ? p.snap(e14, t13) : e14, style: f8({}, i10)}), c10 = ms.getBounds(r12);
          r12.point = p.sub(r12.point, [c10.width / 2, c10.height / 2]), this.app.patchCreate([r12]), this.app.startSession("translate"), this.setStatus("creating");
        }
      }
    });
    d8(this, "onPointerUp", () => {
      this.app.readOnly || this.status === "creating" && (this.setStatus("idle"), this.app.completeSession(), this.app.selectTool("select"), this.app.setEditingId(this.shapeId));
    });
  }
};
var Oi = class {
  constructor(e14, t13, n10, o13) {
    d8(this, "_idbId");
    d8(this, "initialState");
    d8(this, "store");
    d8(this, "pointer", -1);
    d8(this, "_state");
    d8(this, "_status", "loading");
    d8(this, "stack", []);
    d8(this, "_snapshot");
    d8(this, "useStore");
    d8(this, "ready");
    d8(this, "isPaused", false);
    d8(this, "persist", (e15, t14) => {
      if (this._status === "ready" && (this.onPersist && this.onPersist(this._state, e15, t14), this._idbId))
        return set4(this._idbId, this._state).catch((n11) => console.error(n11));
    });
    d8(this, "applyPatch", (e15, t14) => {
      let n11 = this._state, o14 = Utils.deepMerge(this._state, e15), i10 = this.cleanup(o14, n11, e15, t14);
      return this.onStateWillChange && this.onStateWillChange(i10, t14), this._state = i10, this.store.setState(this._state, true), this.onStateDidChange && this.onStateDidChange(this._state, t14), this;
    });
    d8(this, "migrate", (e15) => e15);
    d8(this, "cleanup", (e15, t14, n11, o14) => e15);
    d8(this, "onStateWillChange");
    d8(this, "onStateDidChange");
    d8(this, "patchState", (e15, t14) => (this.applyPatch(e15, t14), this.onPatch && this.onPatch(this._state, e15, t14), this));
    d8(this, "replaceState", (e15, t14) => {
      let n11 = this.cleanup(e15, this._state, e15, t14);
      return this.onStateWillChange && this.onStateWillChange(n11, "replace"), this._state = n11, this.store.setState(this._state, true), this.onStateDidChange && this.onStateDidChange(this._state, "replace"), this;
    });
    d8(this, "setState", (e15, t14 = e15.id) => (this.pointer < this.stack.length - 1 && (this.stack = this.stack.slice(0, this.pointer + 1)), this.stack.push(C5(f8({}, e15), {id: t14})), this.pointer = this.stack.length - 1, this.applyPatch(e15.after, t14), this.onCommand && this.onCommand(this._state, e15, t14), this.persist(e15.after, t14), this));
    d8(this, "onReady");
    d8(this, "onPatch");
    d8(this, "onCommand");
    d8(this, "onPersist");
    d8(this, "onReplace");
    d8(this, "onReset");
    d8(this, "onResetHistory");
    d8(this, "onUndo");
    d8(this, "onRedo");
    d8(this, "reset", () => (this.onStateWillChange && this.onStateWillChange(this.initialState, "reset"), this._state = this.initialState, this.store.setState(this._state, true), this.resetHistory(), this.persist({}, "reset"), this.onStateDidChange && this.onStateDidChange(this._state, "reset"), this.onReset && this.onReset(this._state), this));
    d8(this, "replaceHistory", (e15, t14 = e15.length - 1) => (this.stack = e15, this.pointer = t14, this.onReplace && this.onReplace(this._state), this));
    d8(this, "resetHistory", () => (this.stack = [], this.pointer = -1, this.onResetHistory && this.onResetHistory(this._state), this));
    d8(this, "undo", () => {
      if (!this.isPaused) {
        if (!this.canUndo)
          return this;
        let e15 = this.stack[this.pointer];
        this.pointer--, this.applyPatch(e15.before, "undo"), this.persist(e15.before, "undo");
      }
      return this.onUndo && this.onUndo(this._state), this;
    });
    d8(this, "redo", () => {
      if (!this.isPaused) {
        if (!this.canRedo)
          return this;
        this.pointer++;
        let e15 = this.stack[this.pointer];
        this.applyPatch(e15.after, "redo"), this.persist(e15.after, "undo");
      }
      return this.onRedo && this.onRedo(this._state), this;
    });
    d8(this, "setSnapshot", () => (this._snapshot = f8({}, this._state), this));
    d8(this, "forceUpdate", () => {
      this.store.setState(this._state, true);
    });
    this._idbId = t13, this._state = dt(e14), this._snapshot = dt(e14), this.initialState = dt(e14), this.store = createStore2(() => this._state), this.useStore = create2(this.store), this.ready = new Promise((i10) => {
      let a10 = "none";
      this._idbId ? (a10 = "restored", get3(this._idbId).then((l10) => ee(this, null, function* () {
        if (l10) {
          let r12 = l10;
          if (n10) {
            let p10 = yield get3(t13 + "_version");
            p10 && p10 < n10 && (r12 = o13 ? o13(l10, e14, p10) : e14, a10 = "migrated");
          }
          yield set4(t13 + "_version", n10 || -1);
          let c10 = this._state.appState.isEmptyCanvas;
          r12 = this.migrate(r12), this._state = dt(r12), this._snapshot = dt(r12), this._state.appState.isEmptyCanvas = c10, this.store.setState(this._state, true);
        } else
          yield set4(t13 + "_version", n10 || -1);
        this._status = "ready", i10(a10);
      })).catch((l10) => console.error(l10))) : (this._status = "ready", i10(a10));
    }).then((i10) => (this.onReady && this.onReady(i10), i10));
  }
  pause() {
    this.isPaused = true;
  }
  resume() {
    this.isPaused = false;
  }
  get canUndo() {
    return this.pointer > -1;
  }
  get canRedo() {
    return this.pointer < this.stack.length - 1;
  }
  get state() {
    return this._state;
  }
  get status() {
    return this._status;
  }
  get snapshot() {
    return this._snapshot;
  }
};
var Md = "tldraw_clipboard";
function Ed() {
  return ee(this, null, function* () {
    return get3(Md);
  });
}
function Rd(s10) {
  return ee(this, null, function* () {
    return set4(Md, s10);
  });
}
var Fi = Utils.uniqueId();
var Ne = class extends Oi {
  constructor(e14, t13 = {}) {
    super(Ne.defaultState, e14, Ne.version, (n10, o13, i10) => sn(C5(f8({}, o13), {document: C5(f8(f8({}, o13.document), n10.document), {version: i10})}), Ne.version));
    d8(this, "callbacks", {});
    d8(this, "tools", {select: new Ro(this), erase: new Lo(this), ["text"]: new Ao(this), ["draw"]: new Ho(this), ["ellipse"]: new zo(this), ["rectangle"]: new Oo(this), ["triangle"]: new Fo(this), ["line"]: new jo(this), ["arrow"]: new Uo(this), ["sticky"]: new Go(this)});
    d8(this, "currentTool", this.tools.select);
    d8(this, "session");
    d8(this, "readOnly", false);
    d8(this, "isDirty", false);
    d8(this, "isCreating", false);
    d8(this, "originPoint", [0, 0]);
    d8(this, "currentPoint", [0, 0]);
    d8(this, "previousPoint", [0, 0]);
    d8(this, "shiftKey", false);
    d8(this, "altKey", false);
    d8(this, "metaKey", false);
    d8(this, "ctrlKey", false);
    d8(this, "spaceKey", false);
    d8(this, "isPointing", false);
    d8(this, "isForcePanning", false);
    d8(this, "editingStartTime", -1);
    d8(this, "fileSystemHandle", null);
    d8(this, "viewport", Utils.getBoundsFromPoints([[0, 0], [100, 100]]));
    d8(this, "rendererBounds", Utils.getBoundsFromPoints([[0, 0], [100, 100]]));
    d8(this, "selectHistory", {stack: [[]], pointer: 0});
    d8(this, "clipboard");
    d8(this, "rotationInfo", {selectedIds: [], center: [0, 0]});
    d8(this, "migrate", (e15) => sn(e15, Ne.version));
    d8(this, "onReady", () => {
      var e15, t14;
      this.loadDocument(this.document), Ur().then((n10) => {
        this.fileSystemHandle = n10;
      });
      try {
        this.patchState(C5(f8({}, sn(this.state, Ne.version)), {appState: {status: "idle"}}));
      } catch (n10) {
        console.error("The data appears to be corrupted. Resetting!", n10), localStorage.setItem(this.document.id + "_corrupted", JSON.stringify(this.document)), this.patchState(C5(f8({}, Ne.defaultState), {appState: C5(f8({}, Ne.defaultState.appState), {status: "idle"})}));
      }
      (t14 = (e15 = this.callbacks).onMount) == null || t14.call(e15, this);
    });
    d8(this, "cleanup", (e15, t14) => {
      var a10;
      let n10 = f8({}, e15);
      n10.document !== t14.document && Object.entries(n10.document.pages).forEach(([l10, r12]) => {
        if (r12 === void 0) {
          delete n10.document.pages[l10], delete n10.document.pageStates[l10];
          return;
        }
        let c10 = t14.document.pages[l10], p10 = {};
        if (!c10 || r12.shapes !== c10.shapes || r12.bindings !== c10.bindings) {
          r12.shapes = f8({}, r12.shapes), r12.bindings = f8({}, r12.bindings);
          let h10 = new Set();
          Object.entries(r12.shapes).forEach(([T10, y10]) => {
            var S10;
            let b10;
            y10 ? b10 = y10.parentId : (b10 = (S10 = c10 == null ? void 0 : c10.shapes[T10]) == null ? void 0 : S10.parentId, delete r12.shapes[T10]), r12.id === n10.appState.currentPageId && (c10 == null ? void 0 : c10.shapes[T10]) !== y10 && (p10[T10] = y10), b10 && b10 !== l10 && r12.shapes[b10] !== void 0 && h10.add(r12.shapes[b10]);
          }), Object.keys(r12.bindings).forEach((T10) => {
            r12.bindings[T10] || delete r12.bindings[T10];
          }), n10.document.pages[l10] = r12;
          let g10 = x7.getRelatedBindings(n10, Object.keys(p10), l10), m10 = new Set();
          g10.forEach((T10) => {
            if (!r12.bindings[T10.id])
              return;
            let y10 = r12.shapes[T10.toId], b10 = r12.shapes[T10.fromId];
            if (!(y10 && b10)) {
              delete n10.document.pages[l10].bindings[T10.id];
              return;
            }
            if (m10.has(b10))
              return;
            let S10 = x7.updateArrowBindings(r12, b10);
            if (m10.add(b10), S10) {
              let w10 = f8(f8({}, b10), S10);
              r12.shapes[b10.id] = w10;
            }
          }), h10.forEach((T10) => {
            if (!T10)
              throw Error("no group!");
            let y10 = T10.children.filter((S10) => r12.shapes[S10] !== void 0), b10 = Utils.getCommonBounds(y10.map((S10) => r12.shapes[S10]).filter(Boolean).map((S10) => x7.getRotatedBounds(S10)));
            r12.shapes[T10.id] = C5(f8({}, T10), {point: [b10.minX, b10.minY], size: [b10.width, b10.height], children: y10});
          });
        }
        let u10 = f8({}, n10.document.pageStates[l10]);
        u10.brush || delete u10.brush, u10.hoveredId && !r12.shapes[u10.hoveredId] && delete u10.hoveredId, u10.bindingId && !r12.bindings[u10.bindingId] && (x7.warn(`Could not find the binding of ${l10}`), delete u10.bindingId), u10.editingId && !r12.shapes[u10.editingId] && (x7.warn("Could not find the editing shape!"), delete u10.editingId), n10.document.pageStates[l10] = u10;
      }), Object.keys((a10 = n10.document.assets) != null ? a10 : {}).forEach((l10) => {
        var r12, c10;
        ((r12 = n10.document.assets) == null ? void 0 : r12[l10]) || (c10 = n10.document.assets) == null || delete c10[l10];
      });
      let o13 = n10.appState.currentPageId, i10 = n10.document.pageStates[o13];
      if (n10.room && n10.room !== t14.room) {
        let l10 = C5(f8({}, n10.room), {users: f8({}, n10.room.users)});
        t14.room && Object.values(t14.room.users).filter(Boolean).forEach((r12) => {
          l10.users[r12.id] === void 0 && delete l10.users[r12.id];
        }), n10.room = l10;
      }
      return n10.room && (n10.room.users[n10.room.userId] = C5(f8({}, n10.room.users[n10.room.userId]), {point: this.currentPoint, selectedIds: i10.selectedIds})), this.readOnly && (n10.document.pages = t14.document.pages), n10;
    });
    d8(this, "broadcastPatch", (e15, t14) => {
      var c10, p10, u10, h10, g10, m10, T10, y10, b10;
      let n10 = {}, o13 = {}, i10 = {}, a10 = (u10 = (p10 = (c10 = e15 == null ? void 0 : e15.document) == null ? void 0 : c10.pages) == null ? void 0 : p10[this.currentPageId]) == null ? void 0 : u10.shapes, l10 = (m10 = (g10 = (h10 = e15 == null ? void 0 : e15.document) == null ? void 0 : h10.pages) == null ? void 0 : g10[this.currentPageId]) == null ? void 0 : m10.bindings, r12 = (T10 = e15 == null ? void 0 : e15.document) == null ? void 0 : T10.assets;
      a10 && Object.keys(a10).forEach((S10) => {
        n10[S10] = this.getShape(S10, this.currentPageId);
      }), l10 && Object.keys(l10).forEach((S10) => {
        o13[S10] = this.getBinding(S10, this.currentPageId);
      }), r12 && Object.keys(r12).forEach((S10) => {
        i10[S10] = this.document.assets[S10];
      }), (b10 = (y10 = this.callbacks).onChangePage) == null || b10.call(y10, this, n10, o13, i10, t14);
    });
    d8(this, "onPatch", (e15, t14, n10) => {
      var o13, i10, a10, l10, r12, c10;
      (this.callbacks.onChangePage && ((i10 = (o13 = t14 == null ? void 0 : t14.document) == null ? void 0 : o13.pages) == null ? void 0 : i10[this.currentPageId]) || ((a10 = t14 == null ? void 0 : t14.document) == null ? void 0 : a10.assets)) && (((l10 = t14 == null ? void 0 : t14.document) == null ? void 0 : l10.assets) || this.session && this.session.type !== "brush" && this.session.type !== "erase" && this.session.type !== "draw") && this.broadcastPatch(t14, false), (c10 = (r12 = this.callbacks).onPatch) == null || c10.call(r12, this, t14, n10);
    });
    d8(this, "onCommand", (e15, t14, n10) => {
      var o13, i10;
      this.clearSelectHistory(), this.isDirty = true, (i10 = (o13 = this.callbacks).onCommand) == null || i10.call(o13, this, t14, n10);
    });
    d8(this, "onReplace", () => {
      this.clearSelectHistory(), this.isDirty = false;
    });
    d8(this, "onUndo", () => {
      var e15, t14;
      this.rotationInfo.selectedIds = [...this.selectedIds], (t14 = (e15 = this.callbacks).onUndo) == null || t14.call(e15, this);
    });
    d8(this, "onRedo", () => {
      var e15, t14;
      this.rotationInfo.selectedIds = [...this.selectedIds], (t14 = (e15 = this.callbacks).onRedo) == null || t14.call(e15, this);
    });
    d8(this, "onPersist", (e15, t14) => {
      var n10, o13;
      (o13 = (n10 = this.callbacks).onPersist) == null || o13.call(n10, this), this.broadcastPatch(t14, true);
    });
    d8(this, "prevSelectedIds", this.selectedIds);
    d8(this, "onStateDidChange", (e15, t14) => {
      var n10, o13, i10, a10;
      (o13 = (n10 = this.callbacks).onChange) == null || o13.call(n10, this, t14), this.room && this.selectedIds !== this.prevSelectedIds && ((a10 = (i10 = this.callbacks).onChangePresence) == null || a10.call(i10, this, C5(f8({}, this.room.users[this.room.userId]), {selectedIds: this.selectedIds, session: !!this.session})), this.prevSelectedIds = this.selectedIds);
    });
    d8(this, "justSent", false);
    d8(this, "prevShapes", this.page.shapes);
    d8(this, "prevBindings", this.page.bindings);
    d8(this, "prevAssets", this.document.assets);
    d8(this, "getReservedContent", (e15, t14 = this.currentPageId) => {
      let {bindings: n10} = this.document.pages[t14], o13 = {}, i10 = {}, a10 = Object.values(n10), l10 = new Map(a10.map((g10) => [g10.toId, g10])), r12 = new Map(a10.map((g10) => [g10.fromId, g10])), c10 = [l10, r12], p10 = [];
      this.session && e15.forEach((g10) => p10.push(g10)), this.pageState.editingId && p10.push(this.pageState.editingId);
      let u10 = new Set(p10), h10 = new Set();
      for (; p10.length > 0; ) {
        let g10 = p10.pop();
        if (!g10)
          break;
        if (h10.has(g10))
          continue;
        h10.add(g10);
        let m10 = this.getShape(g10);
        o13[g10] = m10, m10.parentId !== t14 && p10.push(m10.parentId), m10.children && p10.push(...m10.children), c10.map((T10) => T10.get(m10.id)).filter(Boolean).forEach((T10) => {
          i10[T10.id] = T10, p10.push(T10.toId, T10.fromId);
        });
      }
      return {reservedShapes: o13, reservedBindings: i10, strongReservedShapeIds: u10};
    });
    d8(this, "replacePageContent", (e15, t14, n10, o13 = this.currentPageId) => {
      if (this.justSent)
        return this.justSent = false, this;
      let i10 = this.document.pages[this.currentPageId];
      return Object.values(e15).forEach((a10) => {
        a10.parentId !== o13 && !(i10.shapes[a10.parentId] || e15[a10.parentId]) && (console.warn("Added a shape without a parent on the page"), a10.parentId = o13);
      }), this.useStore.setState((a10) => {
        let {hoveredId: l10, editingId: r12, bindingId: c10, selectedIds: p10} = a10.document.pageStates[o13], u10 = [...p10], h10 = r12 && a10.document.pages[this.currentPageId].shapes[r12];
        h10 && u10.push(h10.id);
        let {reservedShapes: g10, reservedBindings: m10, strongReservedShapeIds: T10} = this.getReservedContent(u10, this.currentPageId);
        Object.values(g10).filter((P10) => !("text" in P10)).forEach((P10) => {
          let v10 = e15[P10.id];
          if (!!v10) {
            if (!(P10.type === "arrow" || T10.has(P10.id))) {
              e15[P10.id] = v10;
              return;
            }
            "decorations" in v10 && "decorations" in P10 && (e15[P10.id] = C5(f8({}, P10), {decorations: v10.decorations})), P10.style = v10.style;
          }
        }), this.prevShapes = e15, this.prevBindings = t14, this.prevAssets = n10;
        let y10 = f8(f8({}, e15), g10);
        h10 && (y10[h10.id] = h10);
        let b10 = f8(f8({}, t14), m10), S10 = f8({}, n10), w10 = C5(f8({}, a10), {document: C5(f8({}, a10.document), {pages: {[o13]: C5(f8({}, a10.document.pages[o13]), {shapes: y10, bindings: b10})}, assets: S10, pageStates: C5(f8({}, a10.document.pageStates), {[o13]: C5(f8({}, a10.document.pageStates[o13]), {selectedIds: p10.filter((P10) => y10[P10] !== void 0), hoveredId: l10 ? y10[l10] === void 0 ? void 0 : l10 : void 0, editingId: r12, bindingId: c10 ? b10[c10] === void 0 ? void 0 : c10 : void 0})})})}), D10 = w10.document.pages[o13], B10 = x7.getRelatedBindings(w10, Object.keys(y10), o13), I10 = new Set();
        return B10.forEach((P10) => {
          if (!D10.bindings[P10.id])
            return;
          let v10 = D10.shapes[P10.fromId];
          if (I10.has(v10))
            return;
          let Q = x7.updateArrowBindings(D10, v10);
          if (I10.add(v10), Q) {
            let oe2 = f8(f8({}, v10), Q);
            D10.shapes[v10.id] = oe2;
          }
        }), Object.values(y10).forEach((P10) => {
          if (P10.type !== "group")
            return;
          let v10 = P10.children.filter((oe2) => D10.shapes[oe2] !== void 0), Q = Utils.getCommonBounds(v10.map((oe2) => D10.shapes[oe2]).filter(Boolean).map((oe2) => x7.getRotatedBounds(oe2)));
          D10.shapes[P10.id] = C5(f8({}, P10), {point: [Q.minX, Q.minY], size: [Q.width, Q.height], children: v10});
        }), this.state.document = w10.document, w10;
      }, true), this;
    });
    d8(this, "updateBounds", (e15) => {
      this.rendererBounds = e15;
      let {point: t14, zoom: n10} = this.camera;
      this.updateViewport(t14, n10), !this.readOnly && this.session && this.session.update();
    });
    d8(this, "updateViewport", (e15, t14) => {
      let {width: n10, height: o13} = this.rendererBounds, [i10, a10] = e.sub(e.div([0, 0], t14), e15), [l10, r12] = e.sub(e.div([n10, o13], t14), e15);
      this.viewport = {minX: i10, minY: a10, maxX: l10, maxY: r12, height: l10 - i10, width: r12 - a10};
    });
    d8(this, "setEditingId", (e15, t14 = false) => {
      if (!this.readOnly) {
        if (e15)
          this.startSession("edit", e15, t14);
        else {
          if (!this.pageState.editingId)
            return;
          this.completeSession();
        }
        this.editingStartTime = performance.now(), this.patchState({document: {pageStates: {[this.currentPageId]: {editingId: e15}}}}, "set_editing_id");
      }
    });
    d8(this, "setHoveredId", (e15) => {
      this.patchState({document: {pageStates: {[this.currentPageId]: {hoveredId: e15}}}}, "set_hovered_id");
    });
    d8(this, "setSetting", (e15, t14) => {
      if (this.session)
        return this;
      let n10 = {settings: {[e15]: typeof t14 == "function" ? t14(this.settings[e15]) : t14}};
      return this.patchState(n10, `settings:${e15}`), this.persist(n10), this;
    });
    d8(this, "toggleFocusMode", () => {
      if (this.session)
        return this;
      let e15 = {settings: {isFocusMode: !this.settings.isFocusMode}};
      return this.patchState(e15, "settings:toggled_focus_mode"), this.persist(e15), this;
    });
    d8(this, "togglePenMode", () => {
      if (this.session)
        return this;
      let e15 = {settings: {isPenMode: !this.settings.isPenMode}};
      return this.patchState(e15, "settings:toggled_pen_mode"), this.persist(e15), this;
    });
    d8(this, "toggleDarkMode", () => {
      if (this.session)
        return this;
      let e15 = {settings: {isDarkMode: !this.settings.isDarkMode}};
      return this.patchState(e15, "settings:toggled_dark_mode"), this.persist(e15), this;
    });
    d8(this, "toggleZoomSnap", () => {
      if (this.session)
        return this;
      let e15 = {settings: {isZoomSnap: !this.settings.isZoomSnap}};
      return this.patchState(e15, "settings:toggled_zoom_snap"), this.persist(e15), this;
    });
    d8(this, "toggleDebugMode", () => {
      if (this.session)
        return this;
      let e15 = {settings: {isDebugMode: !this.settings.isDebugMode}};
      return this.patchState(e15, "settings:toggled_debug"), this.persist(e15), this;
    });
    d8(this, "setMenuOpen", (e15) => {
      let t14 = {appState: {isMenuOpen: e15}};
      return this.patchState(t14, "ui:toggled_menu_opened"), this.persist(t14), this;
    });
    d8(this, "setIsLoading", (e15) => {
      let t14 = {appState: {isLoading: e15}};
      return this.patchState(t14, "ui:toggled_is_loading"), this.persist(t14), this;
    });
    d8(this, "setDisableAssets", (e15) => (this.patchState({appState: {disableAssets: e15}}, "ui:toggled_disable_images"), this));
    d8(this, "toggleGrid", () => {
      if (this.session)
        return this;
      let e15 = {settings: {showGrid: !this.settings.showGrid}};
      return this.patchState(e15, "settings:toggled_grid"), this.persist(e15), this;
    });
    d8(this, "selectTool", (e15) => {
      if (this.readOnly || this.session)
        return this;
      this.isPointing = false;
      let t14 = this.tools[e15];
      return t14 === this.currentTool ? (this.patchState({appState: {isToolLocked: false}}), this) : (this.currentTool.onExit(), t14.previous = this.currentTool.type, this.currentTool = t14, this.currentTool.onEnter(), this.patchState({appState: {activeTool: e15, isToolLocked: false}}, `selected_tool:${e15}`));
    });
    d8(this, "toggleToolLock", () => this.session ? this : this.patchState({appState: {isToolLocked: !this.appState.isToolLocked}}, "toggled_tool_lock"));
    d8(this, "resetDocument", () => {
      if (this.session)
        return this;
      this.session = void 0, this.currentTool = this.tools.select;
      let e15 = Ne.defaultDocument;
      return e15.pages.page.name = "Page 1", this.resetHistory().clearSelectHistory().loadDocument(Ne.defaultDocument).persist({}), this;
    });
    d8(this, "updateUsers", (e15, t14 = false) => {
      this.patchState({room: {users: Object.fromEntries(e15.map((n10) => [n10.id, n10]))}}, t14 ? "room:self:update" : "room:user:update");
    });
    d8(this, "removeUser", (e15) => {
      this.patchState({room: {users: {[e15]: void 0}}});
    });
    d8(this, "mergeDocument", (e15) => {
      if (this.document.id !== e15.id)
        return this.replaceState(C5(f8({}, sn(C5(f8({}, this.state), {document: e15}), Ne.version)), {appState: C5(f8({}, this.appState), {currentPageId: Object.keys(e15.pages)[0]})})), this;
      let t14 = f8({}, this.document.pageStates), n10 = C5(f8({}, this.appState), {currentPageId: e15.pages[this.currentPageId] ? this.currentPageId : Object.keys(e15.pages)[0], pages: Object.values(e15.pages).map((i10, a10) => ({id: i10.id, name: i10.name, childIndex: i10.childIndex || a10}))});
      this.resetHistory(), Object.keys(this.document.pages).forEach((i10) => {
        e15.pages[i10] || (i10 === this.appState.currentPageId && (this.cancelSession(), this.selectNone()), t14[i10] = void 0);
      }), this.session && this.selectedIds.filter((i10) => !e15.pages[this.currentPageId].shapes[i10]).forEach((i10) => e15.pages[this.currentPageId].shapes[i10] = this.page.shapes[i10]), Object.entries(t14).forEach(([i10, a10]) => {
        a10.selectedIds = a10.selectedIds.filter((l10) => !!e15.pages[i10].shapes[l10]);
      });
      let {editingId: o13} = this.pageState;
      return o13 && (e15.pages[this.currentPageId].shapes[o13] = this.page.shapes[o13], t14[this.currentPageId].selectedIds = [o13]), this.replaceState(C5(f8({}, sn(C5(f8({}, this.state), {document: C5(f8({}, e15), {pageStates: t14})}), Ne.version)), {appState: n10}), "merge");
    });
    d8(this, "updateDocument", (e15, t14 = "updated_document") => {
      let n10 = this.state, o13 = C5(f8({}, n10), {document: f8({}, n10.document)});
      e15.pages[this.currentPageId] || (o13.appState = C5(f8({}, n10.appState), {currentPageId: Object.keys(e15.pages)[0]}));
      let i10 = 1;
      for (let a10 of Object.values(e15.pages))
        a10 !== n10.document.pages[a10.id] && (o13.document.pages[a10.id] = a10, a10.name || (o13.document.pages[a10.id].name = `Page ${i10 + 1}`, i10++));
      for (let a10 of Object.values(e15.pageStates))
        if (a10 !== n10.document.pageStates[a10.id]) {
          o13.document.pageStates[a10.id] = a10;
          let l10 = e15.pages[a10.id], r12 = ["bindingId", "editingId", "hoveredId", "pointedId"];
          for (let c10 of r12)
            l10.shapes[c10] || (a10[c10] = void 0);
          a10.selectedIds = a10.selectedIds.filter((c10) => !!e15.pages[l10.id].shapes[c10]);
        }
      return this.replaceState(sn(o13, o13.document.version || 0), `${t14}:${e15.id}`);
    });
    d8(this, "loadRoom", (e15) => (this.patchState({room: {id: e15, userId: Fi, users: {[Fi]: {id: Fi, color: Us[Math.floor(Math.random() * Us.length)], point: [100, 100], selectedIds: [], activeShapes: []}}}}), this));
    d8(this, "loadDocument", (e15) => {
      this.selectNone(), this.resetHistory(), this.clearSelectHistory(), this.session = void 0;
      let t14 = C5(f8({}, Ne.defaultState), {settings: f8({}, this.state.settings), document: e15, appState: C5(f8(f8({}, Ne.defaultState.appState), this.state.appState), {currentPageId: Object.keys(e15.pages)[0], disableAssets: this.disableAssets})});
      this.replaceState(sn(t14, Ne.version), "loaded_document");
      let {point: n10, zoom: o13} = this.camera;
      return this.updateViewport(n10, o13), this;
    });
    d8(this, "newProject", () => {
      !this.isLocal || (this.fileSystemHandle = null, this.resetDocument());
    });
    d8(this, "saveProject", () => ee(this, null, function* () {
      if (!this.readOnly) {
        try {
          let e15 = yield Gs(sn(this.state, Ne.version).document, this.fileSystemHandle);
          this.fileSystemHandle = e15, this.persist({}), this.isDirty = false;
        } catch (e15) {
          console.error(e15.message);
        }
        return this;
      }
    }));
    d8(this, "saveProjectAs", () => ee(this, null, function* () {
      try {
        let e15 = yield Gs(this.document, null);
        this.fileSystemHandle = e15, this.persist({}), this.isDirty = false;
      } catch (e15) {
        console.error(e15.message);
      }
      return this;
    }));
    d8(this, "openProject", () => ee(this, null, function* () {
      if (!!this.isLocal)
        try {
          let e15 = yield Vr();
          if (!e15)
            throw Error();
          let {fileHandle: t14, document: n10} = e15;
          this.loadDocument(n10), this.fileSystemHandle = t14, this.zoomToFit(), this.persist({});
        } catch (e15) {
          console.error(e15);
        } finally {
          this.persist({});
        }
    }));
    d8(this, "openAsset", () => ee(this, null, function* () {
      if (!this.disableAssets)
        try {
          let e15 = yield $r();
          if (Array.isArray(e15))
            this.addMediaFromFiles(e15, this.centerPoint);
          else {
            if (!e15)
              return;
            this.addMediaFromFiles([e15]);
          }
        } catch (e15) {
          console.error(e15);
        } finally {
          this.persist({});
        }
    }));
    d8(this, "signOut", () => {
    });
    d8(this, "getAppState", () => this.appState);
    d8(this, "getPage", (e15 = this.currentPageId) => x7.getPage(this.state, e15 || this.currentPageId));
    d8(this, "getShapes", (e15 = this.currentPageId) => x7.getShapes(this.state, e15 || this.currentPageId));
    d8(this, "getBindings", (e15 = this.currentPageId) => x7.getBindings(this.state, e15 || this.currentPageId));
    d8(this, "getShape", (e15, t14 = this.currentPageId) => x7.getShape(this.state, e15, t14));
    d8(this, "getShapeBounds", (e15, t14 = this.currentPageId) => x7.getBounds(this.getShape(e15, t14)));
    d8(this, "getBinding", (e15, t14 = this.currentPageId) => x7.getBinding(this.state, e15, t14));
    d8(this, "getPageState", (e15 = this.currentPageId) => x7.getPageState(this.state, e15 || this.currentPageId));
    d8(this, "getPagePoint", (e15, t14 = this.currentPageId) => {
      let {camera: n10} = this.getPageState(t14);
      return e.sub(e.div(e15, n10.zoom), n10.point);
    });
    d8(this, "createPage", (e15, t14) => {
      if (this.readOnly)
        return this;
      let {width: n10, height: o13} = this.rendererBounds;
      return this.setState(Qa(this, [-n10 / 2, -o13 / 2], e15, t14));
    });
    d8(this, "changePage", (e15) => this.setState(qa(this, e15)));
    d8(this, "movePage", (e15, t14) => this.readOnly ? this : this.setState(cd(this, e15, t14)));
    d8(this, "renamePage", (e15, t14) => this.readOnly ? this : this.setState(pd(this, e15, t14)));
    d8(this, "duplicatePage", (e15) => this.readOnly ? this : this.setState(sd(this, e15)));
    d8(this, "deletePage", (e15) => this.readOnly ? this : Object.values(this.document.pages).length <= 1 ? this : this.setState(ed(this, e15 || this.currentPageId)));
    d8(this, "cut", (e15 = this.selectedIds, t14) => (t14 == null || t14.preventDefault(), this.copy(e15, t14), this.readOnly || this.delete(e15), this));
    d8(this, "copy", (e15 = this.selectedIds, t14) => {
      var i10;
      t14 == null || t14.preventDefault(), this.clipboard = this.getContent(e15);
      let o13 = `<tldraw>${JSON.stringify(f8({type: "tldr/clipboard"}, this.clipboard))}</tldraw>`;
      return Rd(o13), t14 && ((i10 = t14.clipboardData) == null || i10.setData("text/html", o13)), navigator.clipboard && window.ClipboardItem && navigator.clipboard.write([new ClipboardItem({"text/html": new Blob([o13], {type: "text/html"})})]), this;
    });
    d8(this, "paste", (e15, t14) => ee(this, null, function* () {
      var c10, p10;
      if (this.readOnly)
        return;
      let n10 = [], o13 = [], i10, a10 = (u10) => ee(this, null, function* () {
        let h10 = document.createElement("div");
        h10.innerHTML = u10;
        let g10 = h10.firstChild;
        g10.style.setProperty("background-color", "transparent"), console.log(u10);
        let m10 = yield x7.getImageForSvg(g10, "svg", {scale: 1, quality: 1});
        if (m10) {
          let T10 = new File([m10], "image.svg");
          o13.push(T10);
        } else
          l10(u10);
      }), l10 = (u10) => {
        let h10 = this.getPagePoint(e15 != null ? e15 : this.centerPoint, this.currentPageId), g10 = u10.includes(`
`);
        n10.push(x7.getShapeUtil("text").getShape({id: Utils.uniqueId(), type: "text", parentId: this.appState.currentPageId, text: x7.normalizeText(u10.trim()), point: h10, style: C5(f8({}, this.appState.currentStyle), {textAlign: g10 ? "start" : this.appState.currentStyle.textAlign})}));
      }, r12 = (u10) => {
        var h10;
        try {
          let g10 = (h10 = u10.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : h10[1];
          if (!g10)
            return;
          let m10 = JSON.parse(g10);
          if (m10.type === "tldr/clipboard") {
            i10 = m10;
            return;
          } else
            throw Error("Not tldraw data!");
        } catch (g10) {
          l10(u10);
        }
      };
      if (t14 !== void 0) {
        let u10 = Array.from((p10 = (c10 = t14.clipboardData) == null ? void 0 : c10.items) != null ? p10 : []);
        yield Promise.all(u10.map((h10) => ee(this, null, function* () {
          var T10;
          let {type: g10, kind: m10} = h10;
          switch (m10) {
            case "string": {
              let y10 = yield new Promise((b10) => h10.getAsString(b10));
              switch (g10) {
                case "text/html": {
                  if ((T10 = y10.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : T10[1]) {
                    r12(y10);
                    return;
                  }
                  break;
                }
                case "text/plain": {
                  console.log(y10), y10.startsWith("<svg") ? a10(y10) : l10(y10);
                  break;
                }
              }
              break;
            }
            case "file": {
              let y10 = h10.getAsFile();
              y10 && o13.push(y10);
              break;
            }
          }
        })));
      }
      if (i10)
        return this.insertContent(i10, {point: e15, select: true}), this;
      if (o13.length)
        return this.addMediaFromFiles(o13, e15), this;
      if (n10.length) {
        let u10 = this.getPagePoint(e15 != null ? e15 : this.centerPoint, this.currentPageId), h10 = e.add(u10, [0, 0]);
        return n10.forEach((g10, m10) => {
          let T10 = x7.getBounds(g10);
          m10 === 0 && (h10[0] -= T10.width / 2, h10[1] -= T10.height / 2), g10.point = [...h10], h10[0] += T10.width;
        }), this.createShapes(...n10), this;
      }
      return this.clipboard ? this.insertContent(this.clipboard) : Ed().then((u10) => {
        u10 && r12(u10);
      }), this;
    }));
    d8(this, "getSvg", (...n10) => ee(this, [...n10], function* (e15 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes), t14 = {}) {
      if (e15.length === 0)
        return;
      let o13 = document.createElementNS("http://www.w3.org/2000/svg", "svg"), i10 = document.createElementNS("http://www.w3.org/2000/svg", "defs"), a10 = document.createElementNS("http://www.w3.org/2000/svg", "style");
      if (typeof window != "undefined" && window.focus(), t14.includeFonts)
        try {
          let {fonts: p10} = yield fetch(Ne.assetSrc, {mode: "no-cors"}).then((u10) => u10.json());
          a10.textContent = `
          @font-face {
            font-family: 'Caveat Brush';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${p10.caveat}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Code Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${p10.source_code_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Sans Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${p10.source_sans_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Crimson Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${p10.crimson_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          `;
        } catch (p10) {
          x7.warn("Could not find tldraw-assets.json file.");
        }
      else
        a10.textContent = "@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');";
      i10.append(a10), o13.append(i10);
      let l10 = e15.map((p10) => this.getShape(p10, this.currentPageId)).sort((p10, u10) => p10.childIndex - u10.childIndex), r12 = Utils.getCommonBounds(l10.map(x7.getRotatedBounds)), c10 = (p10) => {
        let u10 = x7.getShapeUtil(p10), h10 = u10.getBounds(p10), g10 = u10.getSvgElement(p10, this.settings.isDarkMode);
        if (!!g10)
          return p10.type === "image" ? g10.setAttribute("xlink:href", this.document.assets[p10.assetId].src) : p10.type === "video" && g10.setAttribute("xlink:href", this.serializeVideo(p10.id)), g10.setAttribute("transform", `translate(${(16 + p10.point[0] - r12.minX).toFixed(2)}, ${(16 + p10.point[1] - r12.minY).toFixed(2)}) rotate(${((p10.rotation || 0) * 180 / Math.PI).toFixed(2)}, ${(h10.width / 2).toFixed(2)}, ${(h10.height / 2).toFixed(2)})`), g10;
      };
      return l10.forEach((p10) => {
        var h10;
        if ((h10 = p10.children) == null ? void 0 : h10.length) {
          let g10 = document.createElementNS("http://www.w3.org/2000/svg", "g");
          p10.children.forEach((m10) => {
            let T10 = this.getShape(m10, this.currentPageId), y10 = c10(T10);
            y10 && g10.append(y10);
          }), o13.append(g10);
          return;
        }
        let u10 = c10(p10);
        u10 && o13.append(u10);
      }), o13.setAttribute("viewBox", [0, 0, r12.width + 16 * 2, r12.height + 16 * 2].join(" ")), o13.setAttribute("width", r12.width.toString()), o13.setAttribute("height", r12.height.toString()), t14.transparentBackground ? o13.style.setProperty("background-color", "transparent") : o13.style.setProperty("background-color", this.settings.isDarkMode ? "#212529" : "rgb(248, 249, 250)"), o13.querySelectorAll(".tl-fill-hitarea, .tl-stroke-hitarea, .tl-binding-indicator").forEach((p10) => p10.remove()), o13;
    }));
    d8(this, "copySvg", (...t14) => ee(this, [...t14], function* (e15 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes)) {
      if (e15.length === 0)
        return;
      let n10 = yield this.getSvg(e15);
      if (!n10)
        return;
      let o13 = x7.getSvgString(n10, 1);
      this.clipboard = this.getContent(e15);
      let i10 = JSON.stringify(f8({type: "tldr/clipboard"}, this.clipboard));
      return navigator.clipboard && window.ClipboardItem && navigator.clipboard.write([new ClipboardItem({"text/html": new Blob([i10], {type: "text/html"}), "text/plain": new Blob([o13], {type: "text/plain"})})]), o13;
    }));
    d8(this, "getContent", (e15) => {
      let t14 = this.getPage(this.currentPageId);
      if (e15 && e15.length === 0 || (e15 || (e15 = this.selectedIds), e15.length === 0 && (e15 = Object.keys(t14.shapes)), e15.length === 0))
        return;
      let n10 = e15.map((l10) => t14.shapes[l10]).flatMap((l10) => {
        var r12;
        return [l10, ...((r12 = l10.children) != null ? r12 : []).map((c10) => t14.shapes[c10])];
      }).map(dt), o13 = new Set(n10.map((l10) => l10.id));
      n10.forEach((l10) => {
        l10.parentId === this.currentPageId && (l10.parentId = "currentPageId");
      });
      let i10 = Object.values(t14.bindings).filter((l10) => {
        if (o13.has(l10.fromId) || o13.has(l10.toId))
          return true;
        if (o13.has(l10.fromId)) {
          let c10 = n10.find((p10) => p10.id === l10.fromId).handles;
          c10 && Object.values(c10).forEach((p10) => {
            p10.bindingId === l10.id && (p10.bindingId = void 0);
          });
        }
        if (o13.has(l10.toId)) {
          let c10 = n10.find((p10) => p10.id === l10.toId).handles;
          c10 && Object.values(c10).forEach((p10) => {
            p10.bindingId === l10.id && (p10.bindingId = void 0);
          });
        }
        return false;
      }).map(dt), a10 = [...new Set(n10.map((l10) => {
        if (!!l10.assetId)
          return this.document.assets[l10.assetId];
      }).filter(Boolean).map(dt))];
      return {shapes: n10, bindings: i10, assets: a10};
    });
    d8(this, "copyJson", (e15 = this.selectedIds) => {
      let t14 = this.getContent(e15);
      return t14 && x7.copyStringToClipboard(JSON.stringify(t14)), this;
    });
    d8(this, "exportJson", (e15 = this.selectedIds) => {
      let t14 = this.getContent(e15);
      if (t14) {
        let n10 = new Blob([JSON.stringify(t14)], {type: "application/json"}), o13 = URL.createObjectURL(n10), i10 = document.createElement("a");
        i10.href = o13, i10.download = "export.json", i10.click();
      }
      return this;
    });
    d8(this, "insertContent", (e15, t14 = {}) => this.setState(xd(this, e15, t14), "insert_content"));
    d8(this, "getImage", (...n10) => ee(this, [...n10], function* (e15 = "png", t14 = {}) {
      let {ids: o13 = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes)} = t14, i10 = yield this.getSvg(o13, {includeFonts: e15 !== "svg", transparentBackground: e15 === "png"});
      if (!i10)
        return;
      if (e15 === "svg") {
        let l10 = x7.getSvgString(i10, 1);
        return new Blob([l10], {type: "image/svg+xml"});
      }
      let a10 = yield x7.getImageForSvg(i10, e15, t14);
      if (!!a10)
        return a10;
    }));
    d8(this, "copyImage", (...n10) => ee(this, [...n10], function* (e15 = "png", t14 = {}) {
      if (e15 === "svg") {
        this.copySvg(t14.ids);
        return;
      }
      if (!(navigator.clipboard && window.ClipboardItem)) {
        console.warn("Sorry, your browser does not support copying images.");
        return;
      }
      let o13 = yield this.getImage(e15, t14);
      !o13 || navigator.clipboard.write([new ClipboardItem({[o13.type]: o13})]);
    }));
    d8(this, "exportImage", (...n10) => ee(this, [...n10], function* (e15 = "png", t14 = {}) {
      var l10;
      let {pageId: o13 = this.currentPageId} = t14, i10 = yield this.getImage(e15, t14);
      if (!i10)
        return;
      let a10 = (l10 = this.document.pages[o13].name) != null ? l10 : "export";
      if (this.callbacks.onExport)
        this.callbacks.onExport(this, {name: a10, type: e15, blob: i10});
      else {
        let r12 = URL.createObjectURL(i10), c10 = document.createElement("a");
        c10.href = r12, c10.download = `${a10}.${e15}`, c10.click();
      }
    }));
    d8(this, "setCamera", (e15, t14, n10) => (this.updateViewport(e15, t14), this.patchState({document: {pageStates: {[this.currentPageId]: {camera: {point: e15, zoom: t14}}}}}, n10), this));
    d8(this, "resetCamera", () => this.setCamera(this.centerPoint, 1, "reset_camera"));
    d8(this, "pan", (e15) => {
      let {camera: t14} = this.pageState;
      return this.setCamera(e.toFixed(e.sub(t14.point, e15)), t14.zoom, "panned");
    });
    d8(this, "pinchZoom", (e15, t14, n10) => {
      let {camera: o13} = this.pageState, i10 = e.sub(o13.point, e.div(t14, o13.zoom)), a10 = n10, l10 = e.sub(e.div(e15, o13.zoom), i10), r12 = e.sub(e.div(e15, a10), i10);
      return this.setCamera(e.toFixed(e.add(i10, e.sub(r12, l10))), a10, "pinch_zoomed");
    });
    d8(this, "zoomTo", (e15, t14 = this.centerPoint) => {
      let {zoom: n10, point: o13} = this.camera, i10 = e.sub(e.div(t14, n10), o13), a10 = e.sub(e.div(t14, e15), o13);
      return this.setCamera(e.toFixed(e.add(o13, e.sub(a10, i10))), e15, "zoomed_camera");
    });
    d8(this, "zoomIn", () => {
      let e15 = Math.round(this.camera.zoom * 100 / 25), t14 = x7.getCameraZoom((e15 + 1) * 0.25);
      return this.zoomTo(t14);
    });
    d8(this, "zoomOut", () => {
      let e15 = Math.round(this.camera.zoom * 100 / 25), t14 = x7.getCameraZoom((e15 - 1) * 0.25);
      return this.zoomTo(t14);
    });
    d8(this, "zoomToFit", () => {
      let {shapes: e15, pageState: {camera: t14}} = this;
      if (e15.length === 0)
        return this;
      let {rendererBounds: n10} = this, o13 = Utils.getCommonBounds(e15.map(x7.getBounds)), i10 = x7.getCameraZoom(Math.min((n10.width - 128) / o13.width, (n10.height - 128) / o13.height));
      i10 = t14.zoom === i10 || t14.zoom < 1 ? Math.min(1, i10) : i10;
      let a10 = (n10.width - o13.width * i10) / 2 / i10, l10 = (n10.height - o13.height * i10) / 2 / i10;
      return this.setCamera(e.toFixed(e.sub([a10, l10], [o13.minX, o13.minY])), i10, "zoomed_to_fit");
    });
    d8(this, "zoomToSelection", () => {
      if (this.selectedIds.length === 0)
        return this;
      let {rendererBounds: e15} = this, t14 = x7.getSelectedBounds(this.state), n10 = x7.getCameraZoom(Math.min((e15.width - 128) / t14.width, (e15.height - 128) / t14.height));
      n10 = this.camera.zoom === n10 || this.camera.zoom < 1 ? Math.min(1, n10) : n10;
      let o13 = (e15.width - t14.width * n10) / 2 / n10, i10 = (e15.height - t14.height * n10) / 2 / n10;
      return this.setCamera(e.toFixed(e.sub([o13, i10], [t14.minX, t14.minY])), n10, "zoomed_to_selection");
    });
    d8(this, "zoomToContent", () => {
      let e15 = this.shapes, t14 = this.pageState;
      if (e15.length === 0)
        return this;
      let {rendererBounds: n10} = this, {zoom: o13} = t14.camera, i10 = Utils.getCommonBounds(e15.map(x7.getBounds)), a10 = (n10.width - i10.width * o13) / 2 / o13, l10 = (n10.height - i10.height * o13) / 2 / o13;
      return this.setCamera(e.toFixed(e.sub([a10, l10], [i10.minX, i10.minY])), this.camera.zoom, "zoomed_to_content");
    });
    d8(this, "resetZoom", () => this.zoomTo(1));
    d8(this, "zoomBy", Utils.throttle((e15, t14) => {
      let {zoom: n10} = this.camera, o13 = x7.getCameraZoom(n10 - e15 * n10);
      return this.zoomTo(o13, t14);
    }, 16));
    d8(this, "clearSelectHistory", () => (this.selectHistory.pointer = 0, this.selectHistory.stack = [this.selectedIds], this));
    d8(this, "addToSelectHistory", (e15) => (this.selectHistory.pointer < this.selectHistory.stack.length && (this.selectHistory.stack = this.selectHistory.stack.slice(0, this.selectHistory.pointer + 1)), this.selectHistory.pointer++, this.selectHistory.stack.push(e15), this));
    d8(this, "setSelectedIds", (e15, t14 = false) => {
      let n10 = t14 ? [...this.pageState.selectedIds, ...e15] : [...e15];
      return this.patchState({appState: {activeTool: "select"}, document: {pageStates: {[this.currentPageId]: {selectedIds: n10}}}}, "selected");
    });
    d8(this, "undoSelect", () => (this.selectHistory.pointer > 0 && (this.selectHistory.pointer--, this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])), this));
    d8(this, "redoSelect", () => (this.selectHistory.pointer < this.selectHistory.stack.length - 1 && (this.selectHistory.pointer++, this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])), this));
    d8(this, "select", (...e15) => (e15.forEach((t14) => {
      if (!this.page.shapes[t14])
        throw Error(`That shape does not exist on page ${this.currentPageId}`);
    }), this.setSelectedIds(e15), this.addToSelectHistory(e15), this));
    d8(this, "selectAll", (e15 = this.currentPageId) => this.session ? this : (this.setSelectedIds(Object.values(this.document.pages[e15].shapes).filter((t14) => t14.parentId === e15).map((t14) => t14.id)), this.addToSelectHistory(this.selectedIds), this.selectTool("select"), this));
    d8(this, "selectNone", () => (this.setSelectedIds([]), this.addToSelectHistory(this.selectedIds), this));
    d8(this, "startSession", (e15, ...t14) => {
      var i10, a10;
      if (this.readOnly && e15 !== "brush")
        return this;
      this.session && (x7.warn(`Already in a session! (${this.session.constructor.name})`), this.cancelSession());
      let n10 = Pd(e15);
      this.session = new n10(this, ...t14);
      let o13 = this.session.start();
      return o13 && this.patchState(o13, `session:start_${this.session.constructor.name}`), (a10 = (i10 = this.callbacks).onSessionStart) == null || a10.call(i10, this, this.session.constructor.name), this;
    });
    d8(this, "updateSession", () => {
      let {session: e15} = this;
      if (!e15)
        return this;
      let t14 = e15.update();
      return t14 ? this.patchState(t14, `session:${e15 == null ? void 0 : e15.constructor.name}`) : this;
    });
    d8(this, "cancelSession", () => {
      var n10, o13;
      let {session: e15} = this;
      if (!e15)
        return this;
      this.session = void 0;
      let t14 = e15.cancel();
      return t14 && this.patchState(t14, `session:cancel:${e15.constructor.name}`), this.setEditingId(), (o13 = (n10 = this.callbacks).onSessionEnd) == null || o13.call(n10, this, e15.constructor.name), this;
    });
    d8(this, "completeSession", () => {
      var n10, o13, i10, a10, l10, r12, c10, p10, u10;
      let {session: e15} = this;
      if (!e15)
        return this;
      this.session = void 0;
      let t14 = e15.complete();
      if (t14 === void 0)
        this.isCreating = false, this.patchState({appState: {status: "idle"}, document: {pageStates: {[this.currentPageId]: {editingId: void 0, bindingId: void 0, hoveredId: void 0}}}}, `session:complete:${e15.constructor.name}`);
      else if ("after" in t14) {
        if (this.isCreating) {
          if (t14.before = {appState: C5(f8({}, t14.before.appState), {status: "idle"}), document: {pages: {[this.currentPageId]: {shapes: Object.fromEntries(this.selectedIds.map((h10) => [h10, void 0]))}}, pageStates: {[this.currentPageId]: {selectedIds: [], editingId: null, bindingId: null, hoveredId: null}}}}, this.appState.isToolLocked) {
            let h10 = ((i10 = (o13 = (n10 = t14.after) == null ? void 0 : n10.document) == null ? void 0 : o13.pageStates) == null ? void 0 : i10[this.currentPageId]) || {};
            h10.selectedIds = [];
          }
          this.isCreating = false;
        }
        t14.after.appState = C5(f8({}, t14.after.appState), {status: "idle"}), t14.after.document = C5(f8({}, t14.after.document), {pageStates: C5(f8({}, (a10 = t14.after.document) == null ? void 0 : a10.pageStates), {[this.currentPageId]: C5(f8({}, (((l10 = t14.after.document) == null ? void 0 : l10.pageStates) || {})[this.currentPageId]), {editingId: null})})}), this.setState(t14, `session:complete:${e15.constructor.name}`);
      } else
        this.patchState(C5(f8({}, t14), {appState: C5(f8({}, t14.appState), {status: "idle"}), document: C5(f8({}, t14.document), {pageStates: {[this.currentPageId]: C5(f8({}, (c10 = (r12 = t14.document) == null ? void 0 : r12.pageStates) == null ? void 0 : c10[this.currentPageId]), {editingId: null})}})}), `session:complete:${e15.constructor.name}`);
      return (u10 = (p10 = this.callbacks).onSessionEnd) == null || u10.call(p10, this, e15.constructor.name), this;
    });
    d8(this, "createShapes", (...e15) => e15.length === 0 ? this : this.create(e15.map((t14) => x7.getShapeUtil(t14.type).create(f8({parentId: this.currentPageId}, t14)))));
    d8(this, "updateShapes", (...e15) => {
      let t14 = this.document.pages[this.currentPageId].shapes, n10 = e15.filter((o13) => t14[o13.id]);
      return n10.length === 0 ? this : this.setState(Ci(this, n10, this.currentPageId), "updated_shapes");
    });
    d8(this, "create", (e15 = [], t14 = []) => e15.length === 0 ? this : this.setState(Si(this, e15, t14)));
    d8(this, "patchCreate", (e15 = [], t14 = []) => e15.length === 0 ? this : this.patchState(Si(this, e15, t14).after));
    d8(this, "delete", (e15 = this.selectedIds) => {
      var n10, o13;
      if (e15.length === 0)
        return this;
      let t14 = Ti(this, e15);
      if (this.callbacks.onAssetDelete && ((n10 = t14.before.document) == null ? void 0 : n10.assets) && ((o13 = t14.after.document) == null ? void 0 : o13.assets)) {
        let i10 = Object.keys(t14.before.document.assets).filter((r12) => !!t14.before.document.assets[r12]), a10 = Object.keys(t14.after.document.assets).filter((r12) => !!t14.after.document.assets[r12]);
        i10.filter((r12) => !a10.includes(r12)).forEach((r12) => this.callbacks.onAssetDelete(this, r12));
      }
      return this.setState(t14);
    });
    d8(this, "deleteAll", () => (this.selectAll(), this.delete(), this));
    d8(this, "style", (e15, t14 = this.selectedIds) => this.setState(fd(this, t14, e15)));
    d8(this, "align", (e15, t14 = this.selectedIds) => t14.length < 2 ? this : this.setState(Xa(this, t14, e15)));
    d8(this, "distribute", (e15, t14 = this.selectedIds) => t14.length < 3 ? this : this.setState(od(this, t14, e15)));
    d8(this, "stretch", (e15, t14 = this.selectedIds) => t14.length < 2 ? this : this.setState(gd(this, t14, e15)));
    d8(this, "flipHorizontal", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(wi(this, e15, "horizontal")));
    d8(this, "flipVertical", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(wi(this, e15, "vertical")));
    d8(this, "moveToPage", (e15, t14 = this.currentPageId, n10 = this.selectedIds) => {
      if (n10.length === 0)
        return this;
      let {rendererBounds: o13} = this;
      return this.setState(ld(this, n10, o13, t14, e15)), this;
    });
    d8(this, "moveToBack", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(Do(this, e15, "toBack")));
    d8(this, "moveBackward", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(Do(this, e15, "backward")));
    d8(this, "moveForward", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(Do(this, e15, "forward")));
    d8(this, "moveToFront", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(Do(this, e15, "toFront")));
    d8(this, "nudge", (e15, t14 = false, n10 = this.selectedIds) => {
      if (n10.length === 0)
        return this;
      let o13 = t14 ? this.settings.showGrid ? this.currentGrid * 4 : 10 : this.settings.showGrid ? this.currentGrid : 1;
      return this.setState(bd(this, n10, e.mul(e15, o13)));
    });
    d8(this, "duplicate", (e15 = this.selectedIds, t14) => this.readOnly ? this : e15.length === 0 ? this : this.setState(id(this, e15, t14)));
    d8(this, "resetBounds", (e15 = this.selectedIds) => {
      let t14 = xi(this, e15, this.currentPageId);
      return this.setState(xi(this, e15, this.currentPageId), t14.id);
    });
    d8(this, "toggleHidden", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(gs(this, e15, "isHidden")));
    d8(this, "toggleLocked", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(gs(this, e15, "isLocked")));
    d8(this, "toggleAspectRatioLocked", (e15 = this.selectedIds) => e15.length === 0 ? this : this.setState(gs(this, e15, "isAspectRatioLocked")));
    d8(this, "toggleDecoration", (e15, t14 = this.selectedIds) => t14.length === 0 || !(e15 === "start" || e15 === "end") ? this : this.setState(Sd(this, t14, e15)));
    d8(this, "setShapeProps", (e15, t14 = this.selectedIds) => this.setState(wd(this, t14, e15)));
    d8(this, "rotate", (e15 = Math.PI * -0.5, t14 = this.selectedIds) => {
      if (t14.length === 0)
        return this;
      let n10 = hd(this, t14, e15);
      return n10 ? this.setState(n10) : this;
    });
    d8(this, "group", (e15 = this.selectedIds, t14 = Utils.uniqueId(), n10 = this.currentPageId) => {
      if (this.readOnly)
        return this;
      if (e15.length === 1 && this.getShape(e15[0], n10).type === "group")
        return this.ungroup(e15, n10);
      if (e15.length < 2)
        return this;
      let o13 = ad(this, e15, t14, n10);
      return o13 ? this.setState(o13) : this;
    });
    d8(this, "ungroup", (e15 = this.selectedIds, t14 = this.currentPageId) => {
      if (this.readOnly)
        return this;
      let n10 = e15.map((i10) => this.getShape(i10, t14)).filter((i10) => i10.type === "group");
      if (n10.length === 0)
        return this;
      let o13 = yd(this, e15, n10, t14);
      return o13 ? this.setState(o13) : this;
    });
    d8(this, "cancel", () => {
      var e15, t14;
      return (t14 = (e15 = this.currentTool).onCancel) == null || t14.call(e15), this;
    });
    d8(this, "addMediaFromFiles", (n10, ...o13) => ee(this, [n10, ...o13], function* (e15, t14 = this.centerPoint) {
      this.setIsLoading(true);
      let i10 = [], a10 = this.getPagePoint(t14);
      for (let l10 of e15) {
        let r12 = Utils.uniqueId(), c10 = l10.name.match(/\.[0-9a-z]+$/i);
        if (!c10)
          throw Error("No extension");
        let p10 = es.includes(c10[0].toLowerCase()), u10 = ts.includes(c10[0].toLowerCase());
        if (!(p10 || u10))
          throw Error("Wrong extension");
        let h10 = p10 ? "image" : "video", g10 = p10 ? "image" : "video", m10;
        try {
          if (this.callbacks.onAssetCreate) {
            let T10 = yield this.callbacks.onAssetCreate(this, l10, r12);
            if (!T10)
              throw Error("Asset creation callback returned false");
            m10 = T10;
          } else
            m10 = yield Nr(l10);
          if (typeof m10 == "string") {
            let T10 = [0, 0];
            if (p10) {
              if (c10[0] == ".svg") {
                let S10, w10 = yield Kr(l10), D10 = this.getViewboxFromSVG(w10);
                D10 && (S10 = D10.split(" "), T10[0] = parseFloat(S10[2]), T10[1] = parseFloat(S10[3]));
              }
              e.isEqual(T10, [0, 0]) && (T10 = yield Wr(m10));
            } else
              T10 = yield _r(m10);
            let y10 = Object.values(this.document.assets).find((S10) => S10.type === g10 && S10.src === m10), b10;
            if (y10)
              b10 = y10.id;
            else {
              b10 = Utils.uniqueId();
              let S10 = {id: b10, type: g10, name: l10.name, src: m10, size: T10};
              this.patchState({document: {assets: {[b10]: S10}}});
            }
            i10.push(this.getImageOrVideoShapeAtPoint(r12, h10, t14, T10, b10));
          }
        } catch (T10) {
          console.warn(T10);
        }
      }
      if (i10.length) {
        let l10 = e.add(a10, [0, 0]);
        i10.forEach((c10, p10) => {
          let u10 = x7.getBounds(c10);
          p10 === 0 && (l10[0] -= u10.width / 2, l10[1] -= u10.height / 2), c10.point = [...l10], l10[0] += u10.width;
        });
        let r12 = Utils.getCommonBounds(i10.map(x7.getBounds));
        this.createShapes(...i10), Utils.boundsContain(this.viewport, r12) || (this.zoomToSelection(), this.zoom > 1 && this.resetZoom());
      }
      return this.setIsLoading(false), this;
    }));
    d8(this, "getViewboxFromSVG", (e15) => {
      let t14 = /.*?viewBox=["'](-?[\d.]+[, ]+-?[\d.]+[, ][\d.]+[, ][\d.]+)["']/;
      if (typeof e15 == "string") {
        let n10 = e15.match(t14);
        return n10 && n10.length >= 2 ? n10[1] : null;
      }
      return console.warn("could not get viewbox from svg string"), this.setIsLoading(false), null;
    });
    d8(this, "onKeyDown", (e15, t14, n10) => {
      var o13, i10;
      switch (n10.key) {
        case "/": {
          if (this.status === "idle" && !this.pageState.editingId) {
            let {shiftKey: a10, metaKey: l10, altKey: r12, ctrlKey: c10, spaceKey: p10} = this;
            this.onPointerDown({target: "canvas", pointerId: 0, origin: t14.point, point: t14.point, delta: [0, 0], pressure: 0.5, shiftKey: a10, ctrlKey: c10, metaKey: l10, altKey: r12, spaceKey: p10}, {shiftKey: a10, altKey: r12, ctrlKey: c10, pointerId: 0, clientX: t14.point[0], clientY: t14.point[1]});
          }
          break;
        }
        case "Escape": {
          this.cancel();
          break;
        }
        case "Meta": {
          this.metaKey = true;
          break;
        }
        case "Alt": {
          this.altKey = true;
          break;
        }
        case "Control": {
          this.ctrlKey = true;
          break;
        }
        case " ": {
          this.isForcePanning = true, this.spaceKey = true;
          break;
        }
      }
      return (i10 = (o13 = this.currentTool).onKeyDown) == null || i10.call(o13, e15, t14, n10), this;
    });
    d8(this, "onKeyUp", (e15, t14, n10) => {
      var o13, i10;
      if (!!t14) {
        switch (n10.key) {
          case "/": {
            let {currentPoint: a10, shiftKey: l10, metaKey: r12, altKey: c10, ctrlKey: p10, spaceKey: u10} = this;
            this.onPointerUp({target: "canvas", pointerId: 0, origin: a10, point: a10, delta: [0, 0], pressure: 0.5, shiftKey: l10, ctrlKey: p10, metaKey: r12, altKey: c10, spaceKey: u10}, {shiftKey: l10, altKey: c10, ctrlKey: p10, pointerId: 0, clientX: a10[0], clientY: a10[1]});
            break;
          }
          case "Meta": {
            this.metaKey = false;
            break;
          }
          case "Alt": {
            this.altKey = false;
            break;
          }
          case "Control": {
            this.ctrlKey = false;
            break;
          }
          case " ": {
            this.isForcePanning = false, this.spaceKey = false;
            break;
          }
        }
        (i10 = (o13 = this.currentTool).onKeyUp) == null || i10.call(o13, e15, t14, n10);
      }
    });
    d8(this, "refreshBoundingBoxes", () => {
      let e15 = this.shapes.map((n10) => [n10.id, f8({point: [...n10.point]}, "label" in n10 && {label: ""})]), t14 = this.shapes.map((n10) => [n10.id, f8({point: [...n10.point]}, "label" in n10 && {label: n10.label})]);
      qr(), this.patchState({document: {pages: {[this.currentPageId]: {shapes: Object.fromEntries(e15)}}}}), this.patchState({document: {pages: {[this.currentPageId]: {shapes: Object.fromEntries(t14)}}}});
    });
    d8(this, "onDragOver", (e15) => {
      e15.preventDefault();
    });
    d8(this, "onDrop", (e15) => ee(this, null, function* () {
      var t14;
      return e15.preventDefault(), this.disableAssets ? this : (((t14 = e15.dataTransfer.files) == null ? void 0 : t14.length) && this.addMediaFromFiles(Object.values(e15.dataTransfer.files), [e15.clientX, e15.clientY]), this);
    }));
    d8(this, "onPinchStart", (e15, t14) => {
      var n10, o13;
      (o13 = (n10 = this.currentTool).onPinchStart) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPinchEnd", (e15, t14) => {
      var n10, o13;
      return (o13 = (n10 = this.currentTool).onPinchEnd) == null ? void 0 : o13.call(n10, e15, t14);
    });
    d8(this, "onPinch", (e15, t14) => {
      var n10, o13;
      return (o13 = (n10 = this.currentTool).onPinch) == null ? void 0 : o13.call(n10, e15, t14);
    });
    d8(this, "onPan", (e15, t14) => {
      if (this.appState.status === "pinching")
        return;
      let n10 = e.div(e15.delta, this.camera.zoom), o13 = this.camera.point, i10 = e.sub(o13, n10);
      e.isEqual(i10, o13) || (this.pan(n10), this.isForcePanning || this.onPointerMove(e15, t14));
    });
    d8(this, "onZoom", (e15, t14) => {
      if (this.state.appState.status !== "idle")
        return;
      let n10 = e15.delta[2] / 50;
      this.zoomBy(n10, e15.point), this.onPointerMove(e15, t14);
    });
    d8(this, "updateInputs", (e15) => {
      this.currentPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.shiftKey = e15.shiftKey, this.altKey = e15.altKey, this.ctrlKey = e15.ctrlKey, this.metaKey = e15.metaKey;
    });
    d8(this, "onPointerMove", (e15, t14) => {
      var n10, o13, i10, a10, l10;
      if (this.previousPoint = this.currentPoint, this.updateInputs(e15, t14), this.isForcePanning && this.isPointing) {
        (n10 = this.onPan) == null || n10.call(this, C5(f8({}, e15), {delta: e.neg(e15.delta)}), t14);
        return;
      }
      if ((i10 = (o13 = this.currentTool).onPointerMove) == null || i10.call(o13, e15, t14), this.state.room) {
        let {users: r12, userId: c10} = this.state.room;
        (l10 = (a10 = this.callbacks).onChangePresence) == null || l10.call(a10, this, C5(f8({}, r12[c10]), {point: this.getPagePoint(e15.point), session: !!this.session}));
      }
    });
    d8(this, "onPointerDown", (e15, t14) => {
      var n10, o13;
      if (t14.buttons === 4)
        this.isForcePanning = true;
      else if (this.isPointing)
        return;
      this.isPointing = true, this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), !this.isForcePanning && ((o13 = (n10 = this.currentTool).onPointerDown) == null || o13.call(n10, e15, t14));
    });
    d8(this, "onPointerUp", (e15, t14) => {
      var n10, o13;
      this.isPointing = false, this.shiftKey || (this.isForcePanning = false), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointerUp) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPointCanvas", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointCanvas) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDoubleClickCanvas", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDoubleClickCanvas) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onRightPointCanvas", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onRightPointCanvas) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDragCanvas", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDragCanvas) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onReleaseCanvas", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onReleaseCanvas) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPointShape", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onReleaseShape", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onReleaseShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDoubleClickShape", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDoubleClickShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onRightPointShape", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onRightPointShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDragShape", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDragShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onHoverShape", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onHoverShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onUnhoverShape", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onUnhoverShape) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPointBounds", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDoubleClickBounds", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDoubleClickBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onRightPointBounds", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onRightPointBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDragBounds", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDragBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onHoverBounds", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onHoverBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onUnhoverBounds", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onUnhoverBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onReleaseBounds", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onReleaseBounds) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPointBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDoubleClickBoundsHandle", (e15, t14) => {
      var o13, i10;
      if (this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (i10 = (o13 = this.currentTool).onDoubleClickBoundsHandle) == null || i10.call(o13, e15, t14), this.selectedIds.length !== 1)
        return;
      let n10 = this.getShape(this.selectedIds[0]);
      if (n10.type === "image" || n10.type === "video") {
        let a10 = this.document.assets[n10.assetId], l10 = x7.getShapeUtil(n10), r12 = l10.getCenter(n10), c10 = l10.getCenter(C5(f8({}, n10), {size: a10.size})), p10 = e.sub(c10, r12);
        this.updateShapes({id: n10.id, point: e.sub(n10.point, p10), size: a10.size});
      }
    });
    d8(this, "onRightPointBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onRightPointBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDragBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDragBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onHoverBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onHoverBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onUnhoverBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onUnhoverBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onReleaseBoundsHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onReleaseBoundsHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onPointHandle", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onPointHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDoubleClickHandle", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDoubleClickHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onRightPointHandle", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onRightPointHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onDragHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onDragHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onHoverHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onHoverHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onUnhoverHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onUnhoverHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onReleaseHandle", (e15, t14) => {
      var n10, o13;
      this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onReleaseHandle) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onShapeChange", (e15) => {
      let t14 = this.document.pages[this.currentPageId].shapes, n10 = f8(f8({}, t14[e15.id]), e15), o13 = Ci(this, [n10], this.currentPageId).after;
      return this.patchState(o13, "patched_shapes");
    });
    d8(this, "onShapeBlur", () => {
      var n10, o13;
      if (performance.now() - this.editingStartTime < 50)
        return;
      let {editingId: e15} = this.pageState, {isToolLocked: t14} = this.getAppState();
      if (e15) {
        let i10 = this.getShape(e15);
        this.setEditingId(), i10.type === "text" && (i10.text.trim().length <= 0 ? this.patchState(Ti(this, [e15]).after, "delete_empty_text") : t14 || this.select(e15));
      }
      (o13 = (n10 = this.currentTool).onShapeBlur) == null || o13.call(n10);
    });
    d8(this, "onShapeClone", (e15, t14) => {
      var n10, o13;
      this.originPoint = this.getPagePoint(e15.point).concat(e15.pressure), this.updateInputs(e15, t14), (o13 = (n10 = this.currentTool).onShapeClone) == null || o13.call(n10, e15, t14);
    });
    d8(this, "onRenderCountChange", (e15) => {
      let t14 = this.getAppState();
      t14.isEmptyCanvas && e15.length > 0 ? this.patchState({appState: {isEmptyCanvas: false}}, "empty_canvas:false") : !t14.isEmptyCanvas && e15.length <= 0 && this.patchState({appState: {isEmptyCanvas: true}}, "empty_canvas:true");
    });
    d8(this, "onError", () => {
    });
    d8(this, "getShapeUtil", x7.getShapeUtil);
    this.callbacks = t13;
  }
  setStatus(e14) {
    return this.patchState({appState: {status: e14}}, `set_status:${e14}`);
  }
  get isMenuOpen() {
    return this.appState.isMenuOpen;
  }
  get isLoading() {
    return this.appState.isLoading;
  }
  get disableAssets() {
    return this.appState.disableAssets;
  }
  get history() {
    return this.stack.slice(0, this.pointer + 1);
  }
  set history(e14) {
    this.replaceHistory(e14);
  }
  get document() {
    return this.state.document;
  }
  get settings() {
    return this.state.settings;
  }
  get appState() {
    return this.state.appState;
  }
  get currentPageId() {
    return this.state.appState.currentPageId;
  }
  get page() {
    return this.state.document.pages[this.currentPageId];
  }
  get shapes() {
    return Object.values(this.page.shapes);
  }
  get bindings() {
    return Object.values(this.page.bindings);
  }
  get assets() {
    return Object.values(this.document.assets);
  }
  get pageState() {
    return this.state.document.pageStates[this.currentPageId];
  }
  get camera() {
    return this.pageState.camera;
  }
  get zoom() {
    return this.pageState.camera.zoom;
  }
  get selectedIds() {
    return this.pageState.selectedIds;
  }
  createTextShapeAtPoint(e14, t13, n10) {
    let {shapes: o13, appState: {currentPageId: i10, currentStyle: a10}} = this, l10 = o13.length === 0 ? 1 : o13.filter((u10) => u10.parentId === i10).sort((u10, h10) => h10.childIndex - u10.childIndex)[0].childIndex + 1, r12 = mn["text"], c10 = r12.create({id: t13 || Utils.uniqueId(), parentId: i10, childIndex: l10, point: e14, style: f8({}, a10)}), p10 = r12.getBounds(c10);
    return c10.point = e.sub(c10.point, [p10.width / 2, p10.height / 2]), n10 ? this.patchCreate([x7.getShapeUtil(c10.type).create(c10)]) : this.createShapes(c10), this.setEditingId(c10.id, true), this;
  }
  getImageOrVideoShapeAtPoint(e14, t13, n10, o13, i10) {
    let {shapes: a10, appState: {currentPageId: l10, currentStyle: r12}} = this, c10 = a10.length === 0 ? 1 : a10.filter((h10) => h10.parentId === l10).sort((h10, g10) => g10.childIndex - h10.childIndex)[0].childIndex + 1, p10 = mn[t13];
    if (o13[0] > this.viewport.width) {
      let h10 = o13[1] / o13[0];
      o13[0] = this.viewport.width - 128 / this.camera.zoom * 2, o13[1] = o13[0] * h10, (o13[1] < 32 || o13[1] < 32) && (o13[1] = 32, o13[0] = o13[1] / h10);
    } else if (o13[1] > this.viewport.height) {
      let h10 = o13[0] / o13[1];
      o13[1] = this.viewport.height - 128 / this.camera.zoom * 2, o13[0] = o13[1] * h10, (o13[1] < 32 || o13[1] < 32) && (o13[0] = 32, o13[1] = o13[0] / h10);
    }
    return p10.create({id: e14, parentId: l10, childIndex: c10, point: n10, size: o13, style: f8({}, r12), assetId: i10});
  }
  isSelected(e14) {
    return this.selectedIds.includes(e14);
  }
  serializeVideo(e14) {
    let t13 = document.getElementById(e14 + "_video");
    if (t13) {
      let n10 = document.createElement("canvas");
      return n10.width = t13.videoWidth, n10.height = t13.videoHeight, n10.getContext("2d").drawImage(t13, 0, 0), n10.toDataURL("image/png");
    } else
      throw new Error("Video with id " + e14 + " not found");
  }
  serializeImage(e14) {
    let t13 = document.getElementById(e14 + "_image");
    if (t13) {
      let n10 = document.createElement("canvas");
      return n10.width = t13.width, n10.height = t13.height, n10.getContext("2d").drawImage(t13, 0, 0), n10.toDataURL("image/png");
    } else
      throw new Error("Image with id " + e14 + " not found");
  }
  patchAssets(e14) {
    this.document.assets = f8(f8({}, this.document.assets), e14);
  }
  get room() {
    return this.state.room;
  }
  get isLocal() {
    return this.state.room === void 0 || this.state.room.id === "local";
  }
  get status() {
    return this.appState.status;
  }
  get currentUser() {
    if (!!this.state.room)
      return this.state.room.users[this.state.room.userId];
  }
  get centerPoint() {
    let {width: e14, height: t13} = this.rendererBounds;
    return e.toFixed([e14 / 2, t13 / 2]);
  }
  get currentGrid() {
    let {zoom: e14} = this.camera;
    return e14 < 0.15 ? 8 * 16 : e14 < 1 ? 8 * 4 : 8 * 1;
  }
};
var Sn = Ne;
d8(Sn, "version", 15.4), d8(Sn, "defaultDocument", {id: "doc", name: "New Document", version: Ne.version, pages: {page: {id: "page", name: "Page 1", childIndex: 1, shapes: {}, bindings: {}}}, pageStates: {page: {id: "page", selectedIds: [], camera: {point: [0, 0], zoom: 1}}}, assets: {}}), d8(Sn, "defaultState", {settings: {isCadSelectMode: false, isPenMode: false, isDarkMode: false, isZoomSnap: false, isFocusMode: false, isSnapping: false, isDebugMode: false, isReadonlyMode: false, keepStyleMenuOpen: false, nudgeDistanceLarge: 16, nudgeDistanceSmall: 1, showRotateHandles: true, showBindingHandles: true, showCloneHandles: false, showGrid: false, language: "en", dockPosition: "bottom"}, appState: {status: "idle", activeTool: "select", hoveredId: void 0, currentPageId: "page", currentStyle: Ye, isToolLocked: false, isMenuOpen: false, isEmptyCanvas: false, eraseLine: [], snapLines: [], isLoading: false, disableAssets: false}, document: Ne.defaultDocument}), d8(Sn, "assetSrc", "tldraw-assets.json");
var Bte = {select: Ro, erase: Lo, ["text"]: Ao, ["draw"]: Ho, ["ellipse"]: zo, ["rectangle"]: Oo, ["triangle"]: Fo, ["line"]: jo, ["arrow"]: Uo, ["sticky"]: Go};
function Ld(s10) {
  let e14 = ae(), t13 = Ts.useCallback((r12 = false) => {
    let c10 = s10.current;
    return r12 && (e14.isMenuOpen || e14.settings.keepStyleMenuOpen) ? true : c10 && (document.activeElement === c10 || c10.contains(document.activeElement));
  }, [s10]);
  Ts.useEffect(() => {
    if (!e14)
      return;
    let r12 = (u10) => {
      if (!!t13(true)) {
        if (e14.readOnly) {
          e14.copy(void 0, u10);
          return;
        }
        e14.cut(void 0, u10);
      }
    }, c10 = (u10) => {
      !t13(true) || e14.copy(void 0, u10);
    }, p10 = (u10) => {
      !t13(true) || e14.readOnly || e14.paste(void 0, u10);
    };
    return document.addEventListener("cut", r12), document.addEventListener("copy", c10), document.addEventListener("paste", p10), () => {
      document.removeEventListener("cut", r12), document.removeEventListener("copy", c10), document.removeEventListener("paste", p10);
    };
  }, [e14]), useHotkeys("v,1", () => {
    !t13(true) || e14.selectTool("select");
  }, [e14, s10.current]), useHotkeys("d,p,2", () => {
    !t13(true) || e14.selectTool("draw");
  }, void 0, [e14]), useHotkeys("e,3", () => {
    !t13(true) || e14.selectTool("erase");
  }, void 0, [e14]), useHotkeys("r,4", () => {
    !t13(true) || e14.selectTool("rectangle");
  }, void 0, [e14]), useHotkeys("o,5", () => {
    !t13(true) || e14.selectTool("ellipse");
  }, void 0, [e14]), useHotkeys("g,6", () => {
    !t13() || e14.selectTool("triangle");
  }, void 0, [e14]), useHotkeys("l,7", () => {
    !t13(true) || e14.selectTool("line");
  }, void 0, [e14]), useHotkeys("a,8", () => {
    !t13(true) || e14.selectTool("arrow");
  }, void 0, [e14]), useHotkeys("t,9", () => {
    !t13(true) || e14.selectTool("text");
  }, void 0, [e14]), useHotkeys("s,0", () => {
    !t13(true) || e14.selectTool("sticky");
  }, void 0, [e14]), useHotkeys("ctrl+shift+d,\u2318+shift+d", (r12) => {
    !t13(true) || (e14.toggleDarkMode(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("ctrl+.,\u2318+.", () => {
    !t13(true) || e14.toggleFocusMode();
  }, void 0, [e14]), useHotkeys("ctrl+shift+g,\u2318+shift+g", () => {
    !t13(true) || e14.toggleGrid();
  }, void 0, [e14]);
  let {onNewProject: n10, onOpenProject: o13, onSaveProject: i10, onSaveProjectAs: a10, onOpenMedia: l10} = bs();
  useHotkeys("ctrl+n,\u2318+n", (r12) => {
    !t13() || n10(r12);
  }, void 0, [e14]), useHotkeys("ctrl+s,\u2318+s", (r12) => {
    !t13() || i10(r12);
  }, void 0, [e14]), useHotkeys("ctrl+shift+s,\u2318+shift+s", (r12) => {
    !t13() || a10(r12);
  }, void 0, [e14]), useHotkeys("ctrl+o,\u2318+o", (r12) => {
    !t13() || o13(r12);
  }, void 0, [e14]), useHotkeys("ctrl+u,\u2318+u", (r12) => {
    !t13() || l10(r12);
  }, void 0, [e14]), useHotkeys("\u2318+z,ctrl+z", (r12) => {
    r12.preventDefault(), !!t13(true) && (e14.session ? e14.cancelSession() : e14.undo());
  }, void 0, [e14]), useHotkeys("ctrl+shift+z,\u2318+shift+z", () => {
    !t13(true) || (e14.session ? e14.cancelSession() : e14.redo());
  }, void 0, [e14]), useHotkeys("\u2318+u,ctrl+u", () => {
    !t13() || e14.undoSelect();
  }, void 0, [e14]), useHotkeys("ctrl+shift-u,\u2318+shift+u", () => {
    !t13() || e14.redoSelect();
  }, void 0, [e14]), useHotkeys("ctrl+=,\u2318+=,ctrl+num_subtract,\u2318+num_subtract", (r12) => {
    !t13(true) || (e14.zoomIn(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("ctrl+-,\u2318+-,ctrl+num_add,\u2318+num_add", (r12) => {
    !t13(true) || (e14.zoomOut(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("shift+0,ctrl+numpad_0,\u2318+numpad_0", () => {
    !t13(true) || e14.resetZoom();
  }, void 0, [e14]), useHotkeys("shift+1", () => {
    !t13(true) || e14.zoomToFit();
  }, void 0, [e14]), useHotkeys("shift+2", () => {
    !t13(true) || e14.zoomToSelection();
  }, void 0, [e14]), useHotkeys("ctrl+d,\u2318+d", (r12) => {
    !t13() || (e14.duplicate(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("shift+h", () => {
    !t13(true) || e14.flipHorizontal();
  }, void 0, [e14]), useHotkeys("shift+v", () => {
    !t13(true) || e14.flipVertical();
  }, void 0, [e14]), useHotkeys("escape", () => {
    !t13(true) || e14.cancel();
  }, void 0, [e14]), useHotkeys("backspace,del", () => {
    !t13() || e14.delete();
  }, void 0, [e14]), useHotkeys("\u2318+a,ctrl+a", () => {
    !t13(true) || e14.selectAll();
  }, void 0, [e14]), useHotkeys("up", () => {
    !t13() || e14.nudge([0, -1], false);
  }, void 0, [e14]), useHotkeys("right", () => {
    !t13() || e14.nudge([1, 0], false);
  }, void 0, [e14]), useHotkeys("down", () => {
    !t13() || e14.nudge([0, 1], false);
  }, void 0, [e14]), useHotkeys("left", () => {
    !t13() || e14.nudge([-1, 0], false);
  }, void 0, [e14]), useHotkeys("shift+up", () => {
    !t13() || e14.nudge([0, -1], true);
  }, void 0, [e14]), useHotkeys("shift+right", () => {
    !t13() || e14.nudge([1, 0], true);
  }, void 0, [e14]), useHotkeys("shift+down", () => {
    !t13() || e14.nudge([0, 1], true);
  }, void 0, [e14]), useHotkeys("shift+left", () => {
    !t13() || e14.nudge([-1, 0], true);
  }, void 0, [e14]), useHotkeys("\u2318+shift+l,ctrl+shift+l", () => {
    !t13() || e14.toggleLocked();
  }, void 0, [e14]), useHotkeys("\u2318+shift+c,ctrl+shift+c", (r12) => {
    !t13() || (e14.copySvg(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("\u2318+g,ctrl+g", (r12) => {
    !t13() || (e14.group(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("\u2318+shift+g,ctrl+shift+g", (r12) => {
    !t13() || (e14.ungroup(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("[", () => {
    !t13(true) || e14.moveBackward();
  }, void 0, [e14]), useHotkeys("]", () => {
    !t13(true) || e14.moveForward();
  }, void 0, [e14]), useHotkeys("shift+[", () => {
    !t13(true) || e14.moveToBack();
  }, void 0, [e14]), useHotkeys("shift+]", () => {
    !t13(true) || e14.moveToFront();
  }, void 0, [e14]), useHotkeys("ctrl+shift+backspace,\u2318+shift+backspace", (r12) => {
    !t13() || (e14.settings.isDebugMode && e14.resetDocument(), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("alt+command+l,alt+ctrl+l", (r12) => {
    !t13(true) || (e14.style({textAlign: "start"}), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("alt+command+t,alt+ctrl+t", (r12) => {
    !t13(true) || (e14.style({textAlign: "middle"}), r12.preventDefault());
  }, void 0, [e14]), useHotkeys("alt+command+r,alt+ctrl+r", (r12) => {
    !t13(true) || (e14.style({textAlign: "end"}), r12.preventDefault());
  }, void 0, [e14]);
}
var ji = ys.createContext({});
function ae() {
  return ys.useContext(ji);
}
var Ui = new Map();
var ws = "tldraw-fonts";
var Eu = `
@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');

@font-face {
  font-family: 'Recursive';
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@font-face {
  font-family: 'Recursive';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@font-face {
  font-family: 'Recursive Mono';
  font-style: normal;
  font-weight: 420;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImqvTxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
`;
function Hd() {
  Ad.useLayoutEffect(() => {
    if (Ui.get(ws))
      return;
    let s10 = document.createElement("style");
    return s10.innerHTML = Eu, s10.setAttribute("id", ws), document.head.appendChild(s10), Ui.set(ws, s10), () => {
      s10 && document.head.contains(s10) && (document.head.removeChild(s10), Ui.delete(ws));
    };
  }, []);
}
function bs() {
  let s10 = ae(), e14 = po.useCallback((a10) => ee(this, null, function* () {
    var l10, r12;
    a10 && s10.callbacks.onOpenProject && a10.preventDefault(), (r12 = (l10 = s10.callbacks).onNewProject) == null || r12.call(l10, s10);
  }), [s10]), t13 = po.useCallback((a10) => {
    var l10, r12;
    a10 && s10.callbacks.onOpenProject && a10.preventDefault(), (r12 = (l10 = s10.callbacks).onSaveProject) == null || r12.call(l10, s10);
  }, [s10]), n10 = po.useCallback((a10) => {
    var l10, r12;
    a10 && s10.callbacks.onOpenProject && a10.preventDefault(), (r12 = (l10 = s10.callbacks).onSaveProjectAs) == null || r12.call(l10, s10);
  }, [s10]), o13 = po.useCallback((a10) => ee(this, null, function* () {
    var l10, r12;
    a10 && s10.callbacks.onOpenProject && a10.preventDefault(), (r12 = (l10 = s10.callbacks).onOpenProject) == null || r12.call(l10, s10);
  }), [s10]), i10 = po.useCallback((a10) => ee(this, null, function* () {
    var l10, r12;
    a10 && s10.callbacks.onOpenMedia && a10.preventDefault(), (r12 = (l10 = s10.callbacks).onOpenMedia) == null || r12.call(l10, s10);
  }), [s10]);
  return {onNewProject: e14, onSaveProject: t13, onSaveProjectAs: n10, onOpenProject: o13, onOpenMedia: i10};
}
var Lu = "\u0627\u0644\u0644\u0648\u0646";
var Au = "\u064A\u0645\u0644\u0623";
var Hu = "\u0645\u062A\u0642\u0637\u0639";
var zu = "\u062D\u062C\u0645";
var Ou = "\u062A\u0628\u0642\u0649 \u0645\u0641\u062A\u0648\u062D\u0629";
var Fu = "\u0627\u0644\u062E\u0637";
var ju = "\u0645\u062D\u0627\u0630\u0627\u0629";
var Uu = "\u0627\u0644\u0623\u0646\u0645\u0627\u0637";
var Gu = "\u062A\u0643\u0628\u064A\u0631";
var Vu = "\u062A\u0635\u063A\u064A\u0631";
var $u = "\u0625\u0644\u0649";
var Nu = "\u0644\u0644\u0627\u062E\u062A\u064A\u0627\u0631";
var Ku = "\u062A\u0646\u0627\u0633\u0628";
var Wu = "\u0645\u0644\u0641";
var _u = "\u062A\u062D\u0631\u064A\u0631";
var Yu = "\u0645\u0639\u0627\u064A\u0646\u0629";
var Zu = "\u0627\u0644\u062A\u0641\u0636\u064A\u0644\u0627\u062A";
var Xu = "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644";
var qu = "\u062E\u0631\u0648\u062C";
var Ju = "\u0628\u0631\u0639\u0627\u064A\u0629";
var Qu = "\u0643\u0646 \u0631\u0627\u0639\u064A\u0627\u064B";
var eh = "\u0627\u0644\u0639\u0648\u062F\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u062A\u0648\u0649";
var th = "\u062A\u0643\u0628\u064A\u0631 \u0644\u0644\u062A\u062D\u062F\u064A\u062F";
var nh = "\u062A\u0643\u0628\u064A\u0631 \u0644\u062A\u0646\u0627\u0633\u0628";
var oh = "\u062A\u0643\u0628\u064A\u0631 \u0625\u0644\u0649";
var sh = "\u0627\u0644\u0648\u0636\u0639 \u0627\u0644\u062F\u0627\u0643\u0646";
var ih = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0631\u0643\u064A\u0632";
var rh = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0635\u062D\u064A\u062D";
var ah = "\u0627\u0638\u0647\u0631 \u0627\u0644\u0634\u0628\u0643\u0629";
var dh = "\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062F CAD";
var lh = "\u0627\u0644\u0627\u062D\u062A\u0641\u0627\u0638 \u0628\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0637 \u0645\u0641\u062A\u0648\u062D\u0629";
var ch = "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0644\u0642\u0637\u0627\u062A \u062F\u0627\u0626\u0645\u064B\u0627";
var ph = "\u062A\u062F\u0648\u064A\u0631 \u0627\u0644\u0645\u0642\u0627\u0628\u0636";
var uh = "\u0645\u0642\u0627\u0628\u0636 \u0645\u0644\u0632\u0645\u0629";
var hh = "\u0645\u0642\u0627\u0628\u0636 \u0627\u0633\u062A\u0646\u0633\u0627\u062E";
var mh = "\u0627\u0644\u063A\u0627\u0621";
var gh = "\u0625\u0639\u0627\u062F\u0629";
var fh = "\u0642\u0637\u0639";
var Sh = "\u0646\u0633\u062D";
var Th = "\u0644\u0635\u0642";
var bh = "\u0646\u0633\u062E \u0627\u0644\u0649";
var yh = "\u0635\u062F\u0631 \u0627\u0644\u0649";
var wh = "\u0627\u062E\u062A\u0631 \u0627\u0644\u0643\u0644";
var xh = "\u0644\u0627 \u062A\u062E\u062A\u0631 \u0634\u064A\u0621";
var Ih = "\u062D\u0630\u0641";
var Ch = "\u0645\u0634\u0631\u0648\u0639 \u062C\u062F\u064A\u062F";
var vh = "\u0641\u062A\u062D";
var kh = "\u062D\u0641\u0638";
var Dh = "\u062D\u0641\u0638 \u0628\u0627\u0633\u0645";
var Ph = "\u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0648\u0633\u0627\u0626\u0637";
var Bh = "\u0625\u0646\u0634\u0627\u0621 \u0635\u0641\u062D\u0629";
var Mh = "\u0635\u0641\u062D\u0629 \u062C\u062F\u064A\u062F\u0629";
var Eh = "\u0627\u0633\u0645 \u0627\u0644\u0635\u0641\u062D\u0629";
var Rh = "\u0646\u0633\u062E";
var Lh = "\u0627\u0644\u063A\u0627\u0621";
var Ah = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u0627\u0644\u062F\u0639\u0648\u0629";
var Hh = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u062F\u0639\u0648\u0629 \u0627\u0644\u0642\u0631\u0627\u0621\u0629 \u0641\u0642\u0637";
var zh = "\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var Oh = "\u0646\u0633\u062E \u0625\u0644\u0649 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var Fh = "\u0627\u062E\u062A\u0631";
var jh = "\u0645\u0645\u062D\u0627\u0629";
var Uh = "\u0631\u0633\u0645";
var Gh = "\u0633\u0647\u0645";
var Vh = "\u0646\u0635";
var $h = "\u0644\u0627\u0635\u0642";
var Nh = "\u0645\u0631\u0628\u0639";
var Kh = "\u0628\u064A\u0636\u0627\u0648\u064A";
var Wh = "\u0645\u062B\u0644\u062B";
var _h = "\u062E\u0637";
var Yh = "\u062F\u0648\u0651\u0631";
var Zh = "\u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var Xh = "\u0641\u062A\u062D \u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var qh = "\u062C\u0645\u0651\u0639";
var Jh = "\u0641\u0643 \u0627\u0644\u062A\u062C\u0645\u0639";
var Qh = "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u062E\u0644\u0641";
var em = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u062E\u0644\u0641";
var tm = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var nm = "\u062A\u062D\u0631\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var om = "\u0625\u0639\u0627\u062F\u0629 \u0636\u0628\u0637 \u0627\u0644\u0632\u0627\u0648\u064A\u0629";
var sm = "\u0642\u0641\u0644";
var im = "\u0627\u0644\u063A\u0627\u0621 \u0627\u0644\u0642\u0641\u0644";
var rm = "\u0627\u0646\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629";
var am = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0623\u0641\u0642\u064A";
var dm = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0639\u0645\u0648\u062F\u064A";
var lm = "\u062D\u0631\u0651\u0643";
var cm = "\u0644\u0644\u0627\u0645\u0627\u0645";
var pm = "\u0644\u0644\u062E\u0644\u0641";
var um = "\u0644\u0644\u0648\u0631\u0627\u0621";
var hm = "\u062E\u0644\u0641";
var mm = "\u0644\u063A\u0629";
var gm = "\u0644\u0644\u0645\u0632\u064A\u062F";
var fm = "\u0645\u0648\u0642\u0639 \u0627\u0644\u0627\u062F\u0648\u0627\u062A";
var Sm = "\u0627\u0633\u0641\u0644";
var Tm = "\u064A\u0633\u0627\u0631";
var bm = "\u064A\u0645\u064A\u0646";
var ym = "\u0623\u0639\u0644\u0649";
var wm = "\u0635\u0641\u062D\u0629";
var xm = "\u0627\u062E\u062A\u0635\u0627\u0631\u0627\u062A \u0644\u0648\u062D\u0629 \u0627\u0644\u0645\u0641\u0627\u062A\u064A\u062D";
var Im = "\u0628\u062D\u062B";
var Cm = "{dots}\u062A\u062D\u0645\u064A\u0644 ";
var zd = {"style.menu.color": Lu, "style.menu.fill": Au, "style.menu.dash": Hu, "style.menu.size": zu, "style.menu.keep.open": Ou, "style.menu.font": Fu, "style.menu.align": ju, styles: Uu, "zoom.in": Gu, "zoom.out": Vu, to: $u, "to.selection": Nu, "to.fit": Ku, "menu.file": Wu, "menu.edit": _u, "menu.view": Yu, "menu.preferences": Zu, "menu.sign.in": Xu, "menu.sign.out": qu, sponsored: Ju, "become.a.sponsor": Qu, "zoom.to.content": eh, "zoom.to.selection": th, "zoom.to.fit": nh, "zoom.to": oh, "preferences.dark.mode": sh, "preferences.focus.mode": ih, "preferences.debug.mode": rh, "preferences.show.grid": ah, "preferences.use.cad.selection": dh, "preferences.keep.stylemenu.open": lh, "preferences.always.show.snaps": ch, "preferences.rotate.handles": ph, "preferences.binding.handles": uh, "preferences.clone.handles": hh, undo: mh, redo: gh, cut: fh, copy: Sh, paste: Th, "copy.as": bh, "export.as": yh, "select.all": wh, "select.none": xh, delete: Ih, "new.project": Ch, open: vh, save: kh, "save.as": Dh, "upload.media": Ph, "create.page": Bh, "new.page": Mh, "page.name": Eh, duplicate: Rh, cancel: Lh, "copy.invite.link": Ah, "copy.readonly.link": Hh, "create.multiplayer.project": zh, "copy.multiplayer.project": Oh, select: Fh, eraser: jh, draw: Uh, arrow: Gh, text: Vh, sticky: $h, Rectangle: Nh, Ellipse: Kh, Triangle: Wh, Line: _h, rotate: Yh, "lock.aspect.ratio": Zh, "unlock.aspect.ratio": Xh, group: qh, ungroup: Jh, "move.to.back": Qh, "move.backward": em, "move.forward": tm, "move.to.front": nm, "reset.angle": om, lock: sm, unlock: im, "move.to.page": rm, "flip.horizontal": am, "flip.vertical": dm, move: lm, "to.front": cm, forward: pm, backward: um, back: hm, language: mm, "translation.link": gm, "dock.position": fm, bottom: Sm, left: Tm, right: bm, top: ym, page: wm, "keyboard.shortcuts": xm, search: Im, loading: Cm};
var vm = "Farve";
var km = "Fyld";
var Dm = "Streg";
var Pm = "St\xF8rrelse";
var Bm = "Hold \xE5ben";
var Mm = "Skrifttype";
var Em = "Juster";
var Rm = "Format";
var Lm = "Zoom ind";
var Am = "Zoom ud";
var Hm = "til";
var zm = "Til valgte";
var Om = "Til l\xE6rred";
var Fm = "Fil";
var jm = "Rediger";
var Um = "Vis";
var Gm = "Indstillinger";
var Vm = "Log ind";
var $m = "Log ud";
var Nm = "Sponsoreret";
var Km = "Bliv sponsor";
var Wm = "Zoom til valgte";
var _m = "Zoom til l\xE6rred";
var Ym = "Zoom til";
var Zm = "M\xF8rkt udseende";
var Xm = "Fokus tilstand";
var qm = "Debug tilstand";
var Jm = "Vis net";
var Qm = "Brug CAD udv\xE6lgelse";
var eg = "Hold formatmenuen \xE5ben";
var tg = "Vis altid snaps";
var ng = "Roteringsh\xE5ndtag";
var og = "Bindingsh\xE5ndtag";
var sg = "Kloningsh\xE5ndtag";
var ig = "Fortryd";
var rg = "Gentag";
var ag = "Klip";
var dg = "Kopier";
var lg = "Inds\xE6t";
var cg = "Kopier som";
var pg = "Eksporter som";
var ug = "V\xE6lg alt";
var hg = "Frav\xE6lg alt";
var mg = "Slet";
var gg = "Nyt projekt";
var fg = "\xC5ben";
var Sg = "Gem";
var Tg = "Gem som";
var bg = "Upload medie";
var yg = "Opret side";
var wg = "Ny side";
var xg = "Sidenavn";
var Ig = "Dupliker";
var Cg = "Fortryd";
var vg = "Kopier invitationslink";
var kg = "Opret multiplayer projekt";
var Dg = "Kopier til multiplayer projekt";
var Pg = "V\xE6lg";
var Bg = "Viskel\xE6der";
var Mg = "Tegn";
var Eg = "Pil";
var Rg = "Tekst";
var Lg = "Note";
var Ag = "Rektangel";
var Hg = "Ellipse";
var zg = "Trekant";
var Og = "Linje";
var Fg = "Roter";
var jg = "L\xE5s billedformat";
var Ug = "Frig\xF8r billedformat";
var Gg = "Grupper";
var Vg = "Opdel gruppe";
var $g = "Placer bagerst";
var Ng = "Flyt tilbage";
var Kg = "Flyt frem";
var Wg = "L\xE6g forrest";
var _g = "Nulstil vinkel";
var Yg = "L\xE5s";
var Zg = "L\xE5s op";
var Xg = "Flyt til side";
var qg = "Vend vandret";
var Jg = "Vend lodret";
var Qg = "Flyt";
var ef = "Forrest";
var tf = "Frem";
var nf = "Tilbage";
var of = "Bagerst";
var sf = "Sprog";
var Od = {"style.menu.color": vm, "style.menu.fill": km, "style.menu.dash": Dm, "style.menu.size": Pm, "style.menu.keep.open": Bm, "style.menu.font": Mm, "style.menu.align": Em, styles: Rm, "zoom.in": Lm, "zoom.out": Am, to: Hm, "to.selection": zm, "to.fit": Om, "menu.file": Fm, "menu.edit": jm, "menu.view": Um, "menu.preferences": Gm, "menu.sign.in": Vm, "menu.sign.out": $m, sponsored: Nm, "become.a.sponsor": Km, "zoom.to.selection": Wm, "zoom.to.fit": _m, "zoom.to": Ym, "preferences.dark.mode": Zm, "preferences.focus.mode": Xm, "preferences.debug.mode": qm, "preferences.show.grid": Jm, "preferences.use.cad.selection": Qm, "preferences.keep.stylemenu.open": eg, "preferences.always.show.snaps": tg, "preferences.rotate.handles": ng, "preferences.binding.handles": og, "preferences.clone.handles": sg, undo: ig, redo: rg, cut: ag, copy: dg, paste: lg, "copy.as": cg, "export.as": pg, "select.all": ug, "select.none": hg, delete: mg, "new.project": gg, open: fg, save: Sg, "save.as": Tg, "upload.media": bg, "create.page": yg, "new.page": wg, "page.name": xg, duplicate: Ig, cancel: Cg, "copy.invite.link": vg, "create.multiplayer.project": kg, "copy.multiplayer.project": Dg, select: Pg, eraser: Bg, draw: Mg, arrow: Eg, text: Rg, sticky: Lg, Rectangle: Ag, Ellipse: Hg, Triangle: zg, Line: Og, rotate: Fg, "lock.aspect.ratio": jg, "unlock.aspect.ratio": Ug, group: Gg, ungroup: Vg, "move.to.back": $g, "move.backward": Ng, "move.forward": Kg, "move.to.front": Wg, "reset.angle": _g, lock: Yg, unlock: Zg, "move.to.page": Xg, "flip.horizontal": qg, "flip.vertical": Jg, move: Qg, "to.front": ef, forward: tf, backward: nf, back: of, language: sf};
var rf = "Farbe";
var af = "F\xFCllen";
var df = "Strich";
var lf = "Gr\xF6\xDFe";
var cf = "Offen halten";
var pf = "Schriftart";
var uf = "Ausrichten";
var hf = "Stile";
var mf = "Heranzoomen";
var gf = "Herauszoomen";
var ff = "zu";
var Sf = "Zur Auswahl";
var Tf = "Anpassen";
var bf = "Datei";
var yf = "Bearbeiten";
var wf = "Ansicht";
var xf = "Pr\xE4ferenzen";
var If = "Einloggen";
var Cf = "Ausloggen";
var vf = "Gesponsert";
var kf = "Sponsor werden";
var Df = "Zur Auswahl zoomen";
var Pf = "Zoom anpassen";
var Bf = "Zoomen nach";
var Mf = "Dunkler Modus";
var Ef = "Fokus Modus";
var Rf = "Debug Modus";
var Lf = "Gitter anzeigen";
var Af = "CAD Auswahl verwenden";
var Hf = "Stilmen\xFC offen halten";
var zf = "Hilfslinien immer anzeigen";
var Of = "Rotiergriffe";
var Ff = "Bindegriffe";
var jf = "Klongriffe";
var Uf = "R\xFCckg\xE4ngig machen";
var Gf = "Wiederherstellen";
var Vf = "Ausschneiden";
var $f = "Kopieren";
var Nf = "Einf\xFCgen";
var Kf = "Kopieren als";
var Wf = "Exportieren als";
var _f = "Alles ausw\xE4hlen";
var Yf = "Nichts ausw\xE4hlen";
var Zf = "L\xF6schen";
var Xf = "Neues Projekt";
var qf = "\xD6ffnen";
var Jf = "Speichern";
var Qf = "Speichern als";
var eS = "Medien hochladen";
var tS = "Seite erstellen";
var nS = "Neue Seite";
var oS = "Seitenname";
var sS = "Duplizieren";
var iS = "Abbrechen";
var rS = "Einladungslink kopieren";
var aS = "Mehrspielerprojekt kreieren";
var dS = "In Mehrspielerprojekt kopieren";
var lS = "Ausw\xE4hlen";
var cS = "Radierer";
var pS = "Malen";
var uS = "Pfeil";
var hS = "Text";
var mS = "Notiz";
var gS = "Rechteck";
var fS = "Ellipse";
var SS = "Dreieck";
var TS = "Linie";
var bS = "Drehen";
var yS = "Seitenverh\xE4ltnis sperren";
var wS = "Seitenverh\xE4ltnis entsperren";
var xS = "Gruppieren";
var IS = "Gruppierung aufheben";
var CS = "Nach Hinten verschieben";
var vS = "R\xFCckw\xE4rts schieben";
var kS = "Vorw\xE4rts schieben";
var DS = "Nach Vorne verschieben";
var PS = "Winkel zur\xFCcksetzen";
var BS = "Sperren";
var MS = "Entsperren";
var ES = "Zu Seite verschieben";
var RS = "Horizontal spiegeln";
var LS = "Vertikal spiegeln";
var AS = "Verschieben";
var HS = "Nach Vorne";
var zS = "Vorw\xE4rts";
var OS = "R\xFCckw\xE4rts";
var FS = "Hinten";
var jS = "Sprache";
var Fd = {"style.menu.color": rf, "style.menu.fill": af, "style.menu.dash": df, "style.menu.size": lf, "style.menu.keep.open": cf, "style.menu.font": pf, "style.menu.align": uf, styles: hf, "zoom.in": mf, "zoom.out": gf, to: ff, "to.selection": Sf, "to.fit": Tf, "menu.file": bf, "menu.edit": yf, "menu.view": wf, "menu.preferences": xf, "menu.sign.in": If, "menu.sign.out": Cf, sponsored: vf, "become.a.sponsor": kf, "zoom.to.selection": Df, "zoom.to.fit": Pf, "zoom.to": Bf, "preferences.dark.mode": Mf, "preferences.focus.mode": Ef, "preferences.debug.mode": Rf, "preferences.show.grid": Lf, "preferences.use.cad.selection": Af, "preferences.keep.stylemenu.open": Hf, "preferences.always.show.snaps": zf, "preferences.rotate.handles": Of, "preferences.binding.handles": Ff, "preferences.clone.handles": jf, undo: Uf, redo: Gf, cut: Vf, copy: $f, paste: Nf, "copy.as": Kf, "export.as": Wf, "select.all": _f, "select.none": Yf, delete: Zf, "new.project": Xf, open: qf, save: Jf, "save.as": Qf, "upload.media": eS, "create.page": tS, "new.page": nS, "page.name": oS, duplicate: sS, cancel: iS, "copy.invite.link": rS, "create.multiplayer.project": aS, "copy.multiplayer.project": dS, select: lS, eraser: cS, draw: pS, arrow: uS, text: hS, sticky: mS, Rectangle: gS, Ellipse: fS, Triangle: SS, Line: TS, rotate: bS, "lock.aspect.ratio": yS, "unlock.aspect.ratio": wS, group: xS, ungroup: IS, "move.to.back": CS, "move.backward": vS, "move.forward": kS, "move.to.front": DS, "reset.angle": PS, lock: BS, unlock: MS, "move.to.page": ES, "flip.horizontal": RS, "flip.vertical": LS, move: AS, "to.front": HS, forward: zS, backward: OS, back: FS, language: jS};
var jd = {};
var GS = "Color";
var VS = "Relleno";
var $S = "L\xEDnea";
var NS = "Tama\xF1o";
var KS = "Mantener abierto";
var WS = "Fuente";
var _S = "Alineaci\xF3n";
var YS = "Estilos";
var ZS = "Acercar";
var XS = "Alejar";
var qS = "A";
var JS = "A la selecci\xF3n";
var QS = "Ajustar";
var eT = "Archivo";
var tT = "Editar";
var nT = "Ver";
var oT = "Preferencias";
var sT = "Iniciar sesi\xF3n";
var iT = "Cerrar sesi\xF3n";
var rT = "Patrocinado";
var aT = "Convi\xE9rtete en patrocinador";
var dT = "Acercar a la selecci\xF3n";
var lT = "Ajustar a la ventana";
var cT = "Acercar a";
var pT = "Modo oscuro";
var uT = "Modo concentraci\xF3n";
var hT = "Modo depuraci\xF3n";
var mT = "Mostrar cuadr\xEDcula";
var gT = "Usar selecci\xF3n CAD";
var fT = "Mantener men\xFA de estilos abierto";
var ST = "Mostrar puntos de ajuste";
var TT = "Control de rotaci\xF3n";
var bT = "Control de vinculaci\xF3n";
var yT = "Control de clonaci\xF3n";
var wT = "Deshacer";
var xT = "Rehacer";
var IT = "Cortar";
var CT = "Copiar";
var vT = "Pegar";
var kT = "Copiar como";
var DT = "Exportar como";
var PT = "Selecionar todo";
var BT = "Selecionar nada";
var MT = "Borrar";
var ET = "Nuevo Proyecto";
var RT = "Abrir";
var LT = "Guardar";
var AT = "Guardar como";
var HT = "Subir medios";
var zT = "Crear p\xE1gina";
var OT = "Nueva p\xE1gina";
var FT = "Nombre de p\xE1gina";
var jT = "P\xE1gina";
var UT = "Duplicar";
var GT = "Cancelar";
var VT = "Copiar invitaci\xF3n";
var $T = "Crear proyecto multijugador";
var NT = "Copiar proyecto multijugador";
var KT = "Seleccionar";
var WT = "Borrador";
var _T = "Dibujar";
var YT = "Flecha";
var ZT = "Texto";
var XT = "Pegatina";
var qT = "Rect\xE1ngulo";
var JT = "Elipse";
var QT = "Tri\xE1ngulo";
var eb = "L\xEDnea";
var tb = "Rotar";
var nb = "Bloquear relaci\xF3n de aspecto";
var ob = "Desbloquear relaci\xF3n de aspecto";
var sb = "Agrupar";
var ib = "Desagrupar";
var rb = "Mover al fondo";
var ab = "Mover atr\xE1s";
var db = "Mover adelante";
var lb = "Mover al frente";
var cb = "Restablecer \xE1ngulo";
var pb = "Bloquear";
var ub = "Desbloquear";
var hb = "Mover a p\xE1gina";
var mb = "Voltear horizontalmente";
var gb = "Voltear verticalmente";
var fb = "Mover";
var Sb = "Al frente";
var Tb = "Adelante";
var bb = "Atr\xE1s";
var yb = "Fondo";
var wb = "Idioma";
var Ud = {"style.menu.color": GS, "style.menu.fill": VS, "style.menu.dash": $S, "style.menu.size": NS, "style.menu.keep.open": KS, "style.menu.font": WS, "style.menu.align": _S, styles: YS, "zoom.in": ZS, "zoom.out": XS, to: qS, "to.selection": JS, "to.fit": QS, "menu.file": eT, "menu.edit": tT, "menu.view": nT, "menu.preferences": oT, "menu.sign.in": sT, "menu.sign.out": iT, sponsored: rT, "become.a.sponsor": aT, "zoom.to.selection": dT, "zoom.to.fit": lT, "zoom.to": cT, "preferences.dark.mode": pT, "preferences.focus.mode": uT, "preferences.debug.mode": hT, "preferences.show.grid": mT, "preferences.use.cad.selection": gT, "preferences.keep.stylemenu.open": fT, "preferences.always.show.snaps": ST, "preferences.rotate.handles": TT, "preferences.binding.handles": bT, "preferences.clone.handles": yT, undo: wT, redo: xT, cut: IT, copy: CT, paste: vT, "copy.as": kT, "export.as": DT, "select.all": PT, "select.none": BT, delete: MT, "new.project": ET, open: RT, save: LT, "save.as": AT, "upload.media": HT, "create.page": zT, "new.page": OT, "page.name": FT, page: jT, duplicate: UT, cancel: GT, "copy.invite.link": VT, "create.multiplayer.project": $T, "copy.multiplayer.project": NT, select: KT, eraser: WT, draw: _T, arrow: YT, text: ZT, sticky: XT, Rectangle: qT, Ellipse: JT, Triangle: QT, Line: eb, rotate: tb, "lock.aspect.ratio": nb, "unlock.aspect.ratio": ob, group: sb, ungroup: ib, "move.to.back": rb, "move.backward": ab, "move.forward": db, "move.to.front": lb, "reset.angle": cb, lock: pb, unlock: ub, "move.to.page": hb, "flip.horizontal": mb, "flip.vertical": gb, move: fb, "to.front": Sb, forward: Tb, backward: bb, back: yb, language: wb};
var xb = "\u0631\u0646\u06AF";
var Ib = "\u062A\u0648\u067E\u064F\u0631";
var Cb = "\u062E\u0637\u200C \u0686\u06CC\u0646";
var vb = "\u0627\u0646\u062F\u0627\u0632\u0647";
var kb = "\u0628\u0627\u0632 \u0628\u0627\u0634";
var Db = "\u0641\u0648\u0646\u062A";
var Pb = "\u062A\u0631\u0627\u0632";
var Bb = "\u0627\u0633\u062A\u0627\u06CC\u0644\u200C\u0647\u0627";
var Mb = "\u0632\u0648\u0645 \u062C\u0644\u0648";
var Eb = "\u0632\u0648\u0645 \u0639\u0642\u0628";
var Rb = "\u0628\u0647";
var Lb = "\u0628\u0647 \u0627\u0646\u062A\u062E\u0627\u0628\u200C\u0634\u062F\u0647\u200C\u0647\u0627";
var Ab = "\u0628\u0647 \u06A9\u0644 \u0635\u0641\u062D\u0647";
var Hb = "\u0641\u0627\u06CC\u0644";
var zb = "\u0648\u06CC\u0631\u0627\u06CC\u0634";
var Ob = "\u0646\u0645\u0627\u06CC\u0634";
var Fb = "\u062A\u0646\u0638\u06CC\u0645\u200C\u0647\u0627";
var jb = "\u0648\u0631\u0648\u062F";
var Ub = "\u062E\u0631\u0648\u062C";
var Gb = "\u062D\u0627\u0645\u06CC\u0627\u0646";
var Vb = " \u062D\u0627\u0645\u06CC \u0634\u0648";
var $b = "\u0646\u0645\u0627\u06CC\u0634 \u0627\u0646\u062A\u062E\u0627\u0628\u200C\u0634\u062F\u0647\u200C\u0647\u0627";
var Nb = "\u0646\u0645\u0627\u06CC\u0634 \u06A9\u0644 \u0635\u0641\u062D\u0647";
var Kb = "\u0632\u0648\u0645 \u0628\u0647 ";
var Wb = "\u062D\u0627\u0644\u062A \u0634\u0628";
var _b = "\u062D\u0627\u0644\u062A \u062A\u0645\u0631\u06A9\u0632";
var Yb = "\u062D\u0627\u0644\u062A \u0639\u06CC\u0628\u200C\u06CC\u0627\u06CC\u06CC";
var Zb = "\u0646\u0645\u0627\u06CC\u0634 \u062E\u0637\u0648\u0637 \u0631\u0627\u0647\u0646\u0645\u0627";
var Xb = "\u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u0627\u0632 \u062D\u0627\u0644\u062A \u0627\u0646\u062A\u062E\u0627\u0628\u06CC CAD";
var qb = "\u0645\u0646\u0648\u06CC \u0627\u0633\u062A\u0627\u06CC\u0644 \u0628\u0627\u0632 \u0628\u0627\u0634\u0647";
var Jb = "\u0631\u0627\u0647\u0646\u0645\u0627\u06CC \u0644\u0628\u0647\u200C\u0647\u0627 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var Qb = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u0686\u0631\u062E\u0634 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var ey = "\u062F\u0633\u062A\u0647\u0654 \u0644\u0628\u0647\u200C\u0647\u0627 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var ty = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u06A9\u067E\u06CC \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var ny = "\u06CC\u0647 \u0642\u062F\u0645 \u0639\u0642\u0628";
var oy = "\u06CC\u0647 \u0642\u062F\u0645 \u062C\u0644\u0648";
var sy = "\u0628\u0631\u06CC\u062F\u0646";
var iy = "\u06A9\u067E\u06CC";
var ry = "\u062C\u0627\u06CC\u200C\u06AF\u0630\u0627\u0631\u06CC";
var ay = "\u06A9\u067E\u06CC \u0628\u0647\u200C\u200C\u0639\u0646\u0648\u0627\u0646";
var dy = "\u062E\u0631\u0648\u062C\u06CC \u0628\u0627 \u0641\u0631\u0645\u062A";
var ly = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u0645\u0647";
var cy = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u06CC\u0686";
var py = " \u067E\u0627\u06A9\u200C\u06A9\u0631\u062F\u0646";
var uy = "\u067E\u0631\u0648\u0698\u0647\u0654 \u062A\u0627\u0632\u0647";
var hy = "\u0628\u0627\u0632 \u06A9\u0646";
var my = "\u0630\u062E\u06CC\u0631\u0647";
var gy = "\u0630\u062E\u06CC\u0631\u0647 \u0628\u0627 \u0627\u0633\u0645";
var fy = "\u0622\u067E\u0644\u0648\u062F \u0639\u06A9\u0633";
var Sy = "\u0633\u0627\u062E\u062A \u0635\u0641\u062D\u0647";
var Ty = "\u0635\u0641\u062D\u0647\u0654 \u062A\u0627\u0632\u0647";
var by = "\u0627\u0633\u0645 \u0635\u0641\u062D\u0647";
var yy = "\u06A9\u067E\u06CC \u062F\u0631\u062C\u0627";
var wy = "\u0628\u06CC\u200C\u062E\u06CC\u0627\u0644";
var xy = "\u06A9\u067E\u06CC \u0644\u06CC\u0646\u06A9 \u062F\u0639\u0648\u062A";
var Iy = "\u0633\u0627\u062E\u062A \u067E\u0631\u0648\u0698\u0647\u0654 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var Cy = "\u06A9\u067E\u06CC \u062F\u0631 \u067E\u0631\u0648\u0698\u0647\u0654 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var vy = "\u0627\u0646\u062A\u062E\u0627\u0628";
var ky = "\u067E\u0627\u06A9\u200C\u06A9\u0646";
var Dy = "\u0631\u0633\u0645";
var Py = "\u0641\u0644\u0650\u0634";
var By = "\u0645\u062A\u0646";
var My = "\u06CC\u0627\u062F\u062F\u0627\u0634\u062A";
var Ey = "\u0686\u0627\u0631\u06AF\u0648\u0634";
var Ry = "\u06AF\u0631\u062F\u06CC";
var Ly = "\u0633\u0647\u200C\u06AF\u0648\u0634";
var Ay = "\u062E\u0637";
var Hy = "\u0686\u0631\u062E\u0634";
var zy = "\u062A\u062B\u0628\u06CC\u062A \u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F";
var Oy = "\u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F \u0645\u062A\u063A\u06CC\u0631";
var Fy = "\u062C\u0645\u0639 \u06A9\u0646";
var jy = "\u062C\u062F\u0627 \u06A9\u0646";
var Uy = "\u0628\u0628\u0631 \u0622\u062E\u0631";
var Gy = "\u0628\u0628\u0631 \u0639\u0642\u0628";
var Vy = "\u0628\u0628\u0631 \u0627\u0648\u0644";
var $y = "\u0628\u0628\u0631 \u062C\u0644\u0648";
var Ny = "\u062D\u0630\u0641 \u0686\u0631\u062E\u0634";
var Ky = "\u0642\u0641\u0644\u200C \u06A9\u0646";
var Wy = "\u0628\u0627\u0632 \u06A9\u0646";
var _y = "\u0628\u0628\u0631 \u0628\u0647 \u0635\u0641\u062D\u0647";
var Yy = "\u0628\u0631\u06AF\u0631\u062F\u0648\u0646 \u0627\u0641\u0642\u06CC";
var Zy = "\u0628\u0631\u06AF\u0631\u062F\u0648\u0646 \u0639\u0645\u0648\u062F\u06CC";
var Xy = "\u062C\u0627\u0628\u0647\u200C\u062C\u0627\u0634 \u06A9\u0646";
var qy = "\u0628\u0647 \u0627\u0648\u0644";
var Jy = "\u0628\u0647 \u062C\u0644\u0648";
var Qy = "\u0628\u0647 \u0639\u0642\u0628";
var e1 = "\u0628\u0647 \u0622\u062E\u0631";
var t1 = "\u0632\u0628\u0627\u0646";
var Gd = {"style.menu.color": xb, "style.menu.fill": Ib, "style.menu.dash": Cb, "style.menu.size": vb, "style.menu.keep.open": kb, "style.menu.font": Db, "style.menu.align": Pb, styles: Bb, "zoom.in": Mb, "zoom.out": Eb, to: Rb, "to.selection": Lb, "to.fit": Ab, "menu.file": Hb, "menu.edit": zb, "menu.view": Ob, "menu.preferences": Fb, "menu.sign.in": jb, "menu.sign.out": Ub, sponsored: Gb, "become.a.sponsor": Vb, "zoom.to.selection": $b, "zoom.to.fit": Nb, "zoom.to": Kb, "preferences.dark.mode": Wb, "preferences.focus.mode": _b, "preferences.debug.mode": Yb, "preferences.show.grid": Zb, "preferences.use.cad.selection": Xb, "preferences.keep.stylemenu.open": qb, "preferences.always.show.snaps": Jb, "preferences.rotate.handles": Qb, "preferences.binding.handles": ey, "preferences.clone.handles": ty, undo: ny, redo: oy, cut: sy, copy: iy, paste: ry, "copy.as": ay, "export.as": dy, "select.all": ly, "select.none": cy, delete: py, "new.project": uy, open: hy, save: my, "save.as": gy, "upload.media": fy, "create.page": Sy, "new.page": Ty, "page.name": by, duplicate: yy, cancel: wy, "copy.invite.link": xy, "create.multiplayer.project": Iy, "copy.multiplayer.project": Cy, select: vy, eraser: ky, draw: Dy, arrow: Py, text: By, sticky: My, Rectangle: Ey, Ellipse: Ry, Triangle: Ly, Line: Ay, rotate: Hy, "lock.aspect.ratio": zy, "unlock.aspect.ratio": Oy, group: Fy, ungroup: jy, "move.to.back": Uy, "move.backward": Gy, "move.forward": Vy, "move.to.front": $y, "reset.angle": Ny, lock: Ky, unlock: Wy, "move.to.page": _y, "flip.horizontal": Yy, "flip.vertical": Zy, move: Xy, "to.front": qy, forward: Jy, backward: Qy, back: e1, language: t1};
var n1 = "Couleur";
var o1 = "Remplir";
var s1 = "Bordure";
var i1 = "Taille";
var r1 = "Toujours afficher le menu";
var a1 = "Police";
var d1 = "Alignement";
var l1 = "Styles";
var c1 = "Zoom avant";
var p1 = "Zoom arri\xE8re";
var u1 = "\xC0";
var h1 = "S\xE9lection";
var m1 = "Contenu";
var g1 = "Fichier";
var f1 = "\xC9dition";
var S1 = "Afficher";
var T1 = "Pr\xE9f\xE9rences";
var b1 = "S'authentifier";
var y1 = "Se d\xE9connecter";
var w1 = "Sponsoris\xE9";
var x1 = "Devenir un sponsor";
var I1 = "Retour au contenu";
var C1 = "Ajuster le zoom \xE0 la s\xE9lection";
var v1 = "Adapter le zoom au contenu";
var k1 = "R\xE9tablir le zoom \xE0";
var D1 = "Mode sombre";
var P1 = "Mode focus";
var B1 = "Afficher la barre d\xE9veloppeur";
var M1 = "Afficher la grille";
var E1 = "Utiliser la s\xE9lection CAD";
var R1 = "Toujours afficher le menu styles";
var L1 = "Afficher les rep\xE8res dynamiques";
var A1 = "Manier la rotation";
var H1 = "Manier les liaisons";
var z1 = "Manier le clonage";
var O1 = "Annuler";
var F1 = "R\xE9tablir";
var j1 = "Couper";
var U1 = "Copier";
var G1 = "Coller";
var V1 = "Copier au format";
var $1 = "Exporter au format";
var N1 = "Tout s\xE9lectionner";
var K1 = "Tout d\xE9s\xE9lectionner";
var W1 = "Supprimer";
var _1 = "Nouveau project";
var Y1 = "Ouvrir";
var Z1 = "Enregistrer";
var X1 = "Enregistrer sous";
var q1 = "Importer un m\xE9dia";
var J1 = "Cr\xE9er une page";
var Q1 = "Nouvelle Page";
var e0 = "Nom de la page";
var t0 = "Dupliquer";
var n0 = "Annuler";
var o0 = "Copier le lien d'invitation";
var s0 = "Copier le lien en lecture seule d'invitation";
var i0 = "Cr\xE9er un project multi-joueurs";
var r0 = "Copier dans un projet multi-joueurs";
var a0 = "S\xE9lection";
var d0 = "Gomme";
var l0 = "Crayon";
var c0 = "Fl\xE8che";
var p0 = "Texte";
var u0 = "Note";
var h0 = "Rectangle";
var m0 = "Cercle";
var g0 = "Triangle";
var f0 = "Ligne";
var S0 = "Rotation";
var T0 = "Verrouiller les proportions";
var b0 = "D\xE9verrouiller les proportions";
var y0 = "Grouper";
var w0 = "D\xE9grouper";
var x0 = "D\xE9placer \xE0 l'arri\xE8re-plan";
var I0 = "Reculer d'un plan";
var C0 = "Avancer d'un plan";
var v0 = "Placer au premier plan";
var k0 = "R\xE9initialiser la rotation";
var D0 = "Verrouiller";
var P0 = "D\xE9verrouiller";
var B0 = "D\xE9placer vers la page";
var M0 = "Retourner horizontalement";
var E0 = "Retourner verticalement";
var R0 = "Disposition";
var L0 = "Placer au premier plan";
var A0 = "Avancer d'un plan";
var H0 = "Reculer d'un plan";
var z0 = "D\xE9placer \xE0 l'arri\xE8re-plan";
var O0 = "Langage";
var F0 = "Position du dock";
var j0 = "En bas";
var U0 = "Raccourci clavier";
var G0 = "Chargement{dots}";
var V0 = "\xC0 gauche";
var $0 = "\xC0 droite";
var N0 = "En haut";
var K0 = "Page";
var Vd = {"style.menu.color": n1, "style.menu.fill": o1, "style.menu.dash": s1, "style.menu.size": i1, "style.menu.keep.open": r1, "style.menu.font": a1, "style.menu.align": d1, styles: l1, "zoom.in": c1, "zoom.out": p1, to: u1, "to.selection": h1, "to.fit": m1, "menu.file": g1, "menu.edit": f1, "menu.view": S1, "menu.preferences": T1, "menu.sign.in": b1, "menu.sign.out": y1, sponsored: w1, "become.a.sponsor": x1, "zoom.to.content": I1, "zoom.to.selection": C1, "zoom.to.fit": v1, "zoom.to": k1, "preferences.dark.mode": D1, "preferences.focus.mode": P1, "preferences.debug.mode": B1, "preferences.show.grid": M1, "preferences.use.cad.selection": E1, "preferences.keep.stylemenu.open": R1, "preferences.always.show.snaps": L1, "preferences.rotate.handles": A1, "preferences.binding.handles": H1, "preferences.clone.handles": z1, undo: O1, redo: F1, cut: j1, copy: U1, paste: G1, "copy.as": V1, "export.as": $1, "select.all": N1, "select.none": K1, delete: W1, "new.project": _1, open: Y1, save: Z1, "save.as": X1, "upload.media": q1, "create.page": J1, "new.page": Q1, "page.name": e0, duplicate: t0, cancel: n0, "copy.invite.link": o0, "copy.readonly.link": s0, "create.multiplayer.project": i0, "copy.multiplayer.project": r0, select: a0, eraser: d0, draw: l0, arrow: c0, text: p0, sticky: u0, Rectangle: h0, Ellipse: m0, Triangle: g0, Line: f0, rotate: S0, "lock.aspect.ratio": T0, "unlock.aspect.ratio": b0, group: y0, ungroup: w0, "move.to.back": x0, "move.backward": I0, "move.forward": C0, "move.to.front": v0, "reset.angle": k0, lock: D0, unlock: P0, "move.to.page": B0, "flip.horizontal": M0, "flip.vertical": E0, move: R0, "to.front": L0, forward: A0, backward: H0, back: z0, language: O0, "dock.position": F0, bottom: j0, "keyboard.shortcuts": U0, loading: G0, left: V0, right: $0, top: N0, page: K0};
var W0 = "\u05E6\u05D1\u05E2";
var _0 = "\u05DE\u05DC\u05D0";
var Y0 = "\u05D2\u05D1\u05D5\u05DC";
var Z0 = "\u05D2\u05D5\u05D3\u05DC";
var X0 = "\u05D4\u05E9\u05D0\u05E8 \u05E4\u05EA\u05D5\u05D7";
var q0 = "\u05D2\u05D5\u05E4\u05DF";
var J0 = "\u05D9\u05D9\u05E9\u05D5\u05E8";
var Q0 = "\u05E2\u05D9\u05E6\u05D5\u05D1";
var ew = "\u05D4\u05D2\u05D3\u05DC \u05EA\u05E6\u05D5\u05D2\u05D4";
var tw = "\u05D4\u05E7\u05D8\u05DF \u05EA\u05E6\u05D5\u05D2\u05D4";
var nw = "\u05DC";
var ow = "\u05DC\u05E1\u05D9\u05DE\u05D5\u05DF";
var sw = "\u05DC\u05D4\u05EA\u05D0\u05DE\u05D4";
var iw = "\u05E7\u05D5\u05D1\u05E5";
var rw = "\u05E2\u05E8\u05D9\u05DB\u05D4";
var aw = "\u05EA\u05E6\u05D5\u05D2\u05D4";
var dw = "\u05DE\u05D0\u05E4\u05D9\u05D9\u05E0\u05D9\u05DD";
var lw = "\u05D4\u05D9\u05E8\u05E9\u05DD";
var cw = "\u05D4\u05EA\u05E0\u05EA\u05E7";
var pw = "\u05D7\u05E1\u05D5\u05EA";
var uw = "\u05DE\u05EA\u05DF \u05D7\u05E1\u05D5\u05EA";
var hw = "\u05D6\u05D5\u05DD \u05DC\u05D1\u05D7\u05D9\u05E8\u05D4";
var mw = "\u05D6\u05D5\u05DD \u05DC\u05D4\u05EA\u05D0\u05DE\u05D4";
var gw = "\u05D6\u05D5\u05DD \u05DC";
var fw = "\u05DE\u05E6\u05D1 \u05D7\u05E9\u05D5\u05DA";
var Sw = "\u05DE\u05E6\u05D1 \u05E4\u05D5\u05E7\u05D5\u05E1";
var Tw = "\u05DE\u05E6\u05D1 \u05D3\u05D9\u05D1\u05D0\u05D2";
var bw = "(\u05D2\u05E8\u05D9\u05D3)\u05D4\u05E8\u05D0\u05D4 \u05E8\u05E9\u05EA \u05E2\u05D9\u05DE\u05D5\u05D3";
var yw = "\u05E1\u05D9\u05DE\u05D5\u05DF CAD";
var ww = "\u05D4\u05E9\u05D0\u05E8 \u05EA\u05E4\u05E8\u05D9\u05D8 \u05E2\u05D9\u05E6\u05D5\u05D1 \u05E4\u05EA\u05D5\u05D7";
var xw = "\u05D4\u05E8\u05D0\u05D4 \u05E7\u05D5\u05D5\u05D9 \u05DE\u05EA\u05D0\u05E8";
var Iw = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E1\u05D9\u05D1\u05D5\u05D1";
var Cw = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E7\u05E9\u05D9\u05E8\u05D4";
var vw = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E9\u05D9\u05DB\u05E4\u05D5\u05DC";
var kw = "\u05D1\u05D8\u05DC";
var Dw = "\u05E2\u05E9\u05D4 \u05DE\u05D7\u05D3\u05E9";
var Pw = "\u05D2\u05D6\u05D5\u05E8";
var Bw = "\u05D4\u05E2\u05EA\u05E7";
var Mw = "\u05D4\u05D3\u05D1\u05E7";
var Ew = "\u05D4\u05E2\u05EA\u05E7 \u05DB";
var Rw = "\u05D9\u05D9\u05E6\u05D0 \u05DB";
var Lw = "\u05D1\u05D7\u05E8 \u05D4\u05DB\u05DC";
var Aw = "\u05D1\u05D8\u05DC \u05D1\u05D7\u05D9\u05E8\u05D4";
var Hw = "\u05DE\u05D7\u05E7";
var zw = "\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05D7\u05D3\u05E9";
var Ow = "\u05E4\u05EA\u05D7";
var Fw = "\u05E9\u05DE\u05D5\u05E8";
var jw = "\u05E9\u05DE\u05D5\u05E8 \u05DB";
var Uw = "\u05D4\u05E2\u05DC\u05D0\u05EA \u05DE\u05D3\u05D9\u05D4";
var Gw = "\u05E6\u05D5\u05E8 \u05D3\u05E3";
var Vw = "\u05D3\u05E3 \u05D7\u05D3\u05E9";
var $w = "\u05E9\u05DD \u05D4\u05D3\u05E3";
var Nw = "\u05E9\u05DB\u05E4\u05DC";
var Kw = "\u05D1\u05D8\u05DC";
var Ww = "\u05D4\u05E2\u05EA\u05E7 \u05E7\u05D9\u05E9\u05D5\u05E8 \u05D4\u05D6\u05DE\u05E0\u05D4";
var _w = "\u05E6\u05D5\u05E8 \u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var Yw = "\u05D4\u05E2\u05EA\u05E7 \u05DC\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var Zw = "\u05E1\u05DE\u05DF";
var Xw = "\u05DE\u05D7\u05E7";
var qw = "\u05E6\u05D9\u05D9\u05E8";
var Jw = "\u05D7\u05E5";
var Qw = "\u05D8\u05E7\u05E1\u05D8";
var ex = "\u05D3\u05D1\u05D9\u05E7\u05D9";
var tx = "\u05DE\u05E8\u05D5\u05D1\u05E2";
var nx = "\u05D0\u05DC\u05D9\u05E4\u05E1\u05D4";
var ox = "\u05DE\u05E9\u05D5\u05DC\u05E9";
var sx = "\u05E7\u05D5";
var ix = "\u05E1\u05D5\u05D1\u05D1";
var rx = "\u05E0\u05E2\u05DC \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var ax = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05EA \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var dx = "\u05E7\u05D1\u05E5";
var lx = "\u05D1\u05D8\u05DC \u05E7\u05D9\u05D1\u05D5\u05E5";
var cx = "\u05D4\u05D1\u05D0 \u05DC\u05EA\u05D7\u05EA\u05D9\u05EA";
var px = "\u05D4\u05D6\u05D6 \u05D0\u05D7\u05D5\u05E8\u05D4";
var ux = "\u05D4\u05D6\u05D6 \u05E7\u05D3\u05D9\u05DE\u05D4";
var hx = "\u05D4\u05D1\u05D0 \u05DC\u05D7\u05D6\u05D9\u05EA";
var mx = "\u05D0\u05E4\u05E1 \u05D6\u05D5\u05D5\u05D9\u05EA";
var gx = "\u05E0\u05E2\u05DC";
var fx = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05D4";
var Sx = "\u05D4\u05D6\u05D6 \u05DC\u05D3\u05E3";
var Tx = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05D5\u05E4\u05E7\u05D9\u05EA";
var bx = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05E0\u05DB\u05D9\u05EA";
var yx = "\u05D4\u05D6\u05D6";
var wx = "\u05D4\u05D1\u05D0 \u05DC\u05E7\u05D3\u05D9\u05DE\u05D4";
var xx = "\u05E7\u05D3\u05D9\u05DE\u05D4";
var Ix = "\u05D0\u05D7\u05D5\u05E8\u05D4";
var Cx = "\u05D1\u05D7\u05D6\u05E8\u05D4";
var vx = "\u05E9\u05E4\u05D4";
var $d = {"style.menu.color": W0, "style.menu.fill": _0, "style.menu.dash": Y0, "style.menu.size": Z0, "style.menu.keep.open": X0, "style.menu.font": q0, "style.menu.align": J0, styles: Q0, "zoom.in": ew, "zoom.out": tw, to: nw, "to.selection": ow, "to.fit": sw, "menu.file": iw, "menu.edit": rw, "menu.view": aw, "menu.preferences": dw, "menu.sign.in": lw, "menu.sign.out": cw, sponsored: pw, "become.a.sponsor": uw, "zoom.to.selection": hw, "zoom.to.fit": mw, "zoom.to": gw, "preferences.dark.mode": fw, "preferences.focus.mode": Sw, "preferences.debug.mode": Tw, "preferences.show.grid": bw, "preferences.use.cad.selection": yw, "preferences.keep.stylemenu.open": ww, "preferences.always.show.snaps": xw, "preferences.rotate.handles": Iw, "preferences.binding.handles": Cw, "preferences.clone.handles": vw, undo: kw, redo: Dw, cut: Pw, copy: Bw, paste: Mw, "copy.as": Ew, "export.as": Rw, "select.all": Lw, "select.none": Aw, delete: Hw, "new.project": zw, open: Ow, save: Fw, "save.as": jw, "upload.media": Uw, "create.page": Gw, "new.page": Vw, "page.name": $w, duplicate: Nw, cancel: Kw, "copy.invite.link": Ww, "create.multiplayer.project": _w, "copy.multiplayer.project": Yw, select: Zw, eraser: Xw, draw: qw, arrow: Jw, text: Qw, sticky: ex, Rectangle: tx, Ellipse: nx, Triangle: ox, Line: sx, rotate: ix, "lock.aspect.ratio": rx, "unlock.aspect.ratio": ax, group: dx, ungroup: lx, "move.to.back": cx, "move.backward": px, "move.forward": ux, "move.to.front": hx, "reset.angle": mx, lock: gx, unlock: fx, "move.to.page": Sx, "flip.horizontal": Tx, "flip.vertical": bx, move: yx, "to.front": wx, forward: xx, backward: Ix, back: Cx, language: vx};
var kx = "Colore";
var Dx = "Riempi";
var Px = "Tratteggo";
var Bx = "Dimensione";
var Mx = "Mantieni aperto";
var Ex = "Font";
var Rx = "Allineamento";
var Lx = "Stile";
var Ax = "Ingrandisci";
var Hx = "Rimpicciolisci";
var zx = "Imposta";
var Ox = "Adatta alla selezione";
var Fx = "Adatta";
var jx = "File";
var Ux = "Modifica";
var Gx = "Visualizzazione";
var Vx = "Preferenze";
var $x = "Accedi";
var Nx = "Esci";
var Kx = "Sponsorizza";
var Wx = "Sponsorizza";
var _x = "Adatta alla selezione";
var Yx = "Adatta";
var Zx = "Ingrandisci";
var Xx = "Modalit\xE0 scura";
var qx = "Modalit\xE0 zen";
var Jx = "Modalit\xE0 sviluppatore";
var Qx = "Mostra griglia";
var eI = "Selezione CAD";
var tI = "Mantieni menu stile aperto";
var nI = "Mostra sempre le guide";
var oI = "Controlli d'inclinazione";
var sI = "Controlli d'associazione";
var iI = "Controlli di clonazione";
var rI = "Annulla";
var aI = "Ripristina";
var dI = "Taglia";
var lI = "Copia";
var cI = "Incolla";
var pI = "Copia come";
var uI = "Esporta come";
var hI = "Seleziona tutto";
var mI = "Deseleziona tutto";
var gI = "Elimina";
var fI = "Nuovo progetto";
var SI = "Apri";
var TI = "Salva";
var bI = "Salva come";
var yI = "Carica contenuti multimediali";
var wI = "Crea nuova pagina";
var xI = "Nuova pagina";
var II = "Nome pagina";
var CI = "Pagina";
var vI = "Duplica";
var kI = "Chiudi";
var DI = "Copia link invito";
var PI = "Crea progetto multiplayer";
var BI = "Trasforma in progetto multiplayer";
var MI = "Seleziona";
var EI = "Gomma";
var RI = "Matita";
var LI = "Freccia";
var AI = "Casella di testo";
var HI = "Post-it";
var zI = "Rettangolo";
var OI = "Ellisse";
var FI = "Triangolo";
var jI = "Linea";
var UI = "Ruota";
var GI = "Blocca rapporto lati";
var VI = "Sblocca rapporto lati";
var $I = "Raggruppa";
var NI = "Separa";
var KI = "Muovi in fondo";
var WI = "Sposta indietro";
var _I = "Sposta avanti";
var YI = "Muovi in fronte";
var ZI = "Reimposta angolo";
var XI = "Blocca";
var qI = "Sblocca";
var JI = "Trasferisci a pagina";
var QI = "Ribalta orizzontalmente";
var eC = "Ribalta verticalmente";
var tC = "Sposta";
var nC = "In primo piano";
var oC = "Sposta avanti";
var sC = "Sposta indietro";
var iC = "In fondo";
var rC = "Lingua";
var aC = "Posizione dock";
var dC = "In basso";
var lC = "Sinistra";
var cC = "Destra";
var pC = "In Alto";
var Nd = {"style.menu.color": kx, "style.menu.fill": Dx, "style.menu.dash": Px, "style.menu.size": Bx, "style.menu.keep.open": Mx, "style.menu.font": Ex, "style.menu.align": Rx, styles: Lx, "zoom.in": Ax, "zoom.out": Hx, to: zx, "to.selection": Ox, "to.fit": Fx, "menu.file": jx, "menu.edit": Ux, "menu.view": Gx, "menu.preferences": Vx, "menu.sign.in": $x, "menu.sign.out": Nx, sponsored: Kx, "become.a.sponsor": Wx, "zoom.to.selection": _x, "zoom.to.fit": Yx, "zoom.to": Zx, "preferences.dark.mode": Xx, "preferences.focus.mode": qx, "preferences.debug.mode": Jx, "preferences.show.grid": Qx, "preferences.use.cad.selection": eI, "preferences.keep.stylemenu.open": tI, "preferences.always.show.snaps": nI, "preferences.rotate.handles": oI, "preferences.binding.handles": sI, "preferences.clone.handles": iI, undo: rI, redo: aI, cut: dI, copy: lI, paste: cI, "copy.as": pI, "export.as": uI, "select.all": hI, "select.none": mI, delete: gI, "new.project": fI, open: SI, save: TI, "save.as": bI, "upload.media": yI, "create.page": wI, "new.page": xI, "page.name": II, page: CI, duplicate: vI, cancel: kI, "copy.invite.link": DI, "create.multiplayer.project": PI, "copy.multiplayer.project": BI, select: MI, eraser: EI, draw: RI, arrow: LI, text: AI, sticky: HI, Rectangle: zI, Ellipse: OI, Triangle: FI, Line: jI, rotate: UI, "lock.aspect.ratio": GI, "unlock.aspect.ratio": VI, group: $I, ungroup: NI, "move.to.back": KI, "move.backward": WI, "move.forward": _I, "move.to.front": YI, "reset.angle": ZI, lock: XI, unlock: qI, "move.to.page": JI, "flip.horizontal": QI, "flip.vertical": eC, move: tC, "to.front": nC, forward: oC, backward: sC, back: iC, language: rC, "dock.position": aC, bottom: dC, left: lC, right: cC, top: pC};
var uC = "\u8272";
var hC = "\u5857\u308A\u3064\u3076\u3057";
var mC = "\u7DDA";
var gC = "\u5927\u304D\u3055";
var fC = "\u5E38\u306B\u8868\u793A";
var SC = "\u30D5\u30A9\u30F3\u30C8";
var TC = "\u914D\u7F6E";
var bC = "\u30B9\u30BF\u30A4\u30EB";
var yC = "\u62E1\u5927";
var wC = "\u7E2E\u5C0F";
var xC = " ";
var IC = "\u9078\u629E\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306B\u5408\u308F\u305B\u308B";
var CC = "\u3059\u3079\u3066\u8868\u793A";
var vC = "\u30D5\u30A1\u30A4\u30EB";
var kC = "\u7DE8\u96C6";
var DC = "\u8868\u793A";
var PC = "\u8A2D\u5B9A";
var BC = "\u30B5\u30A4\u30F3\u30A4\u30F3";
var MC = "\u30B5\u30A4\u30F3\u30A2\u30A6\u30C8";
var EC = "\u652F\u63F4";
var RC = "\u652F\u63F4\u3059\u308B";
var LC = "\u9078\u629E\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306B\u5408\u308F\u305B\u3066\u62E1\u5927";
var AC = "\u62E1\u5927\u3057\u3066\u3059\u3079\u3066\u3092\u8868\u793A";
var HC = " ";
var zC = "\u30C0\u30FC\u30AF\u30E2\u30FC\u30C9";
var OC = "\u30D5\u30A9\u30FC\u30AB\u30B9\u30E2\u30FC\u30C9";
var FC = "\u30C7\u30D0\u30C3\u30B0\u30E2\u30FC\u30C9";
var jC = "\u30B0\u30EA\u30C3\u30C9\u3092\u8868\u793A";
var UC = "CAD\u306E\u9078\u629E\u6CD5\u3092\u4F7F\u7528";
var GC = "\u30B9\u30BF\u30A4\u30EB\u30E1\u30CB\u30E5\u30FC\u3092\u5E38\u306B\u8868\u793A";
var VC = "\u30B9\u30CA\u30C3\u30D7\u3092\u5E38\u306B\u8868\u793A";
var $C = "\u56DE\u8EE2\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var NC = "\u7D50\u5408\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var KC = "\u30AF\u30ED\u30FC\u30F3\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var WC = "\u5143\u306B\u623B\u3059";
var _C = "\u3084\u308A\u76F4\u3057";
var YC = "\u5207\u308A\u53D6\u308A";
var ZC = "\u30B3\u30D4\u30FC";
var XC = "\u8CBC\u308A\u4ED8\u3051";
var qC = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30B3\u30D4\u30FC";
var JC = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8";
var QC = "\u3059\u3079\u3066\u9078\u629E";
var ev = "\u9078\u629E\u3092\u89E3\u9664";
var tv = "\u524A\u9664";
var nv = "\u65B0\u3057\u3044\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8";
var ov = "\u958B\u304F";
var sv = "\u4FDD\u5B58";
var iv = "\u540D\u524D\u3092\u3064\u3051\u3066\u4FDD\u5B58";
var rv = "\u30E1\u30C7\u30A3\u30A2\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9";
var av = "\u30DA\u30FC\u30B8\u3092\u4F5C\u6210";
var dv = "\u65B0\u898F\u30DA\u30FC\u30B8";
var lv = "\u30DA\u30FC\u30B8\u540D";
var cv = "\u8907\u88FD";
var pv = "\u30AD\u30E3\u30F3\u30BB\u30EB";
var uv = "\u5171\u6709\u30EA\u30F3\u30AF\u3092\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC";
var hv = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u3092\u4F5C\u6210";
var mv = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u306B\u30B3\u30D4\u30FC";
var gv = "\u9078\u629E";
var fv = "\u6D88\u3057\u30B4\u30E0";
var Sv = "\u63CF\u753B";
var Tv = "\u77E2\u5370";
var bv = "\u30C6\u30AD\u30B9\u30C8";
var yv = "\u3075\u305B\u3093";
var wv = "\u9577\u65B9\u5F62";
var xv = "\u6955\u5186\u5F62";
var Iv = "\u4E09\u89D2\u5F62";
var Cv = "\u7DDA";
var vv = "\u56DE\u8EE2";
var kv = "\u7E26\u6A2A\u6BD4\u3092\u56FA\u5B9A";
var Dv = "\u7E26\u6A2A\u6BD4\u306E\u56FA\u5B9A\u3092\u89E3\u9664";
var Pv = "\u30B0\u30EB\u30FC\u30D4\u30F3\u30B0";
var Bv = "\u30B0\u30EB\u30FC\u30D7\u89E3\u9664";
var Mv = "\u6700\u5F8C\u9762\u306B\u79FB\u52D5";
var Ev = "\u3072\u3068\u3064\u5F8C\u308D\u306B\u79FB\u52D5";
var Rv = "\u3072\u3068\u3064\u524D\u306B\u79FB\u52D5";
var Lv = "\u6700\u80CC\u9762\u306B\u79FB\u52D5";
var Av = "\u89D2\u5EA6\u3092\u521D\u671F\u5316";
var Hv = "\u30ED\u30C3\u30AF";
var zv = "\u30A2\u30F3\u30ED\u30C3\u30AF";
var Ov = "\u30DA\u30FC\u30B8\u3078\u79FB\u52D5";
var Fv = "\u6C34\u5E73\u65B9\u5411\u306B\u53CD\u8EE2";
var jv = "\u5782\u76F4\u65B9\u5411\u306B\u53CD\u8EE2";
var Uv = "\u79FB\u52D5";
var Gv = "\u6700\u524D\u9762\u3078";
var Vv = "\u3072\u3068\u3064\u524D\u3078";
var $v = "\u3072\u3068\u3064\u5F8C\u308D\u3078";
var Nv = "\u6700\u80CC\u9762\u3078";
var Kv = "\u8A00\u8A9E";
var Kd = {"style.menu.color": uC, "style.menu.fill": hC, "style.menu.dash": mC, "style.menu.size": gC, "style.menu.keep.open": fC, "style.menu.font": SC, "style.menu.align": TC, styles: bC, "zoom.in": yC, "zoom.out": wC, to: xC, "to.selection": IC, "to.fit": CC, "menu.file": vC, "menu.edit": kC, "menu.view": DC, "menu.preferences": PC, "menu.sign.in": BC, "menu.sign.out": MC, sponsored: EC, "become.a.sponsor": RC, "zoom.to.selection": LC, "zoom.to.fit": AC, "zoom.to": HC, "preferences.dark.mode": zC, "preferences.focus.mode": OC, "preferences.debug.mode": FC, "preferences.show.grid": jC, "preferences.use.cad.selection": UC, "preferences.keep.stylemenu.open": GC, "preferences.always.show.snaps": VC, "preferences.rotate.handles": $C, "preferences.binding.handles": NC, "preferences.clone.handles": KC, undo: WC, redo: _C, cut: YC, copy: ZC, paste: XC, "copy.as": qC, "export.as": JC, "select.all": QC, "select.none": ev, delete: tv, "new.project": nv, open: ov, save: sv, "save.as": iv, "upload.media": rv, "create.page": av, "new.page": dv, "page.name": lv, duplicate: cv, cancel: pv, "copy.invite.link": uv, "create.multiplayer.project": hv, "copy.multiplayer.project": mv, select: gv, eraser: fv, draw: Sv, arrow: Tv, text: bv, sticky: yv, Rectangle: wv, Ellipse: xv, Triangle: Iv, Line: Cv, rotate: vv, "lock.aspect.ratio": kv, "unlock.aspect.ratio": Dv, group: Pv, ungroup: Bv, "move.to.back": Mv, "move.backward": Ev, "move.forward": Rv, "move.to.front": Lv, "reset.angle": Av, lock: Hv, unlock: zv, "move.to.page": Ov, "flip.horizontal": Fv, "flip.vertical": jv, move: Uv, "to.front": Gv, forward: Vv, backward: $v, back: Nv, language: Kv};
var Wv = "\uC0C9\uAE54";
var _v = "\uCC44\uC6B0\uAE30";
var Yv = "\uD14C\uB450\uB9AC";
var Zv = "\uD06C\uAE30";
var Xv = "\uD56D\uC0C1 \uC5F4\uAE30";
var qv = "\uAE00\uAF34";
var Jv = "\uC815\uB82C";
var Qv = "\uC2A4\uD0C0\uC77C";
var ek = "\uD655\uB300";
var tk = "\uCD95\uC18C";
var nk = "to";
var ok = "\uC120\uD0DD \uC694\uC18C \uB9DE\uCDA4";
var sk = "\uC804\uCCB4 \uB9DE\uCDA4";
var ik = "\uD30C\uC77C";
var rk = "\uD3B8\uC9D1";
var ak = "\uBCF4\uAE30";
var dk = "\uC124\uC815";
var lk = "\uB85C\uADF8\uC778";
var ck = "\uB85C\uADF8\uC544\uC6C3";
var pk = "\uD6C4\uC6D0";
var uk = "\uD6C4\uC6D0\uC790 \uB418\uAE30";
var hk = "\uC120\uD0DD \uC694\uC18C \uB9DE\uCD94\uAE30";
var mk = "\uC804\uCCB4 \uB9DE\uCD94\uAE30";
var gk = "\uB9DE\uCD94\uAE30";
var fk = "\uB2E4\uD06C \uBAA8\uB4DC";
var Sk = "\uC9D1\uC911 \uBAA8\uB4DC";
var Tk = "\uB514\uBC84\uADF8 \uBAA8\uB4DC";
var bk = "\uACA9\uC790 \uBCF4\uAE30";
var yk = "CAD \uC120\uD0DD \uC0AC\uC6A9";
var wk = "\uC2A4\uD0C0\uC77C \uBA54\uB274 \uD56D\uC0C1 \uC5F4\uAE30";
var xk = "Snap \uD56D\uC0C1 \uC5F4\uAE30";
var Ik = "\uD68C\uC804 \uBCF4\uC774\uAE30";
var Ck = "Binding Handles";
var vk = "\uBCF5\uC81C \uBCF4\uC774\uAE30";
var kk = "\uC2E4\uD589 \uCDE8\uC18C";
var Dk = "\uB2E4\uC2DC \uC2E4\uD589";
var Pk = "\uC790\uB974\uAE30";
var Bk = "\uBCF5\uC0AC";
var Mk = "\uBD99\uC5EC\uB123\uAE30";
var Ek = "\uB2E4\uB978 \uD615\uC2DD\uC73C\uB85C \uBCF5\uC0AC\uD558\uAE30";
var Rk = "\uB0B4\uBCF4\uB0B4\uAE30";
var Lk = "\uC804\uCCB4 \uC120\uD0DD";
var Ak = "\uC120\uD0DD \uC548\uD568";
var Hk = "\uC0AD\uC81C\uD558\uAE30";
var zk = "\uC0C8 \uD504\uB85C\uC81D\uD2B8";
var Ok = "\uC5F4\uAE30";
var Fk = "\uC800\uC7A5";
var jk = "\uB2E4\uB978 \uC774\uB984\uC73C\uB85C \uC800\uC7A5";
var Uk = "\uBBF8\uB514\uC5B4 \uC5C5\uB85C\uB4DC";
var Gk = "\uC0C8 \uD398\uC774\uC9C0 \uB9CC\uB4E4\uAE30";
var Vk = "\uC0C8 \uD398\uC774\uC9C0";
var $k = "\uD398\uC774\uC9C0 \uC774\uB984";
var Nk = "\uBCF5\uC81C";
var Kk = "\uCDE8\uC18C";
var Wk = "\uCD08\uB300 \uB9C1\uD06C \uBCF5\uC0AC\uD558\uAE30";
var _k = "\uACF5\uB3D9 \uD504\uB85C\uC81D\uD2B8 \uB9CC\uB4E4\uAE30";
var Yk = "\uACF5\uB3D9 \uD504\uB85C\uC81D\uD2B8\uB85C \uBCF5\uC0AC\uD558\uAE30";
var Zk = "\uC120\uD0DD";
var Xk = "\uC9C0\uC6B0\uAC1C";
var qk = "\uADF8\uB9AC\uAE30";
var Jk = "\uD654\uC0B4\uD45C";
var Qk = "\uD14D\uC2A4\uD2B8";
var eD = "\uBA54\uBAA8";
var tD = "\uC0AC\uAC01\uD615";
var nD = "\uC6D0";
var oD = "\uC0BC\uAC01\uD615";
var sD = "\uC120";
var iD = "\uD68C\uC804";
var rD = "\uBE44\uC728 \uC7A0\uAE08";
var aD = "\uBE44\uC728 \uC7A0\uAE08 \uD574\uC81C";
var dD = "\uADF8\uB8F9\uD654";
var lD = "\uADF8\uB8F9\uD654 \uD574\uC81C";
var cD = "\uB9E8 \uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var pD = "\uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var uD = "\uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var hD = "\uB9E8 \uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var mD = "\uD68C\uC804 \uCD08\uAE30\uD654";
var gD = "\uC7A0\uAD6C\uAE30";
var fD = "\uC7A0\uAE08 \uD574\uC81C\uD558\uAE30";
var SD = "\uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
var TD = "\uC218\uD3C9\uC73C\uB85C \uB4A4\uC9D1\uAE30";
var bD = "\uC218\uC9C1\uC73C\uB85C \uB4A4\uC9D1\uAE30";
var yD = "\uC21C\uC11C";
var wD = "\uB9E8 \uC55E\uC73C\uB85C";
var xD = "\uC55E\uC73C\uB85C";
var ID = "\uB4A4\uB85C";
var CD = "\uB9E8 \uB4A4\uB85C";
var vD = "\uC5B8\uC5B4";
var Wd = {"style.menu.color": Wv, "style.menu.fill": _v, "style.menu.dash": Yv, "style.menu.size": Zv, "style.menu.keep.open": Xv, "style.menu.font": qv, "style.menu.align": Jv, styles: Qv, "zoom.in": ek, "zoom.out": tk, to: nk, "to.selection": ok, "to.fit": sk, "menu.file": ik, "menu.edit": rk, "menu.view": ak, "menu.preferences": dk, "menu.sign.in": lk, "menu.sign.out": ck, sponsored: pk, "become.a.sponsor": uk, "zoom.to.selection": hk, "zoom.to.fit": mk, "zoom.to": gk, "preferences.dark.mode": fk, "preferences.focus.mode": Sk, "preferences.debug.mode": Tk, "preferences.show.grid": bk, "preferences.use.cad.selection": yk, "preferences.keep.stylemenu.open": wk, "preferences.always.show.snaps": xk, "preferences.rotate.handles": Ik, "preferences.binding.handles": Ck, "preferences.clone.handles": vk, undo: kk, redo: Dk, cut: Pk, copy: Bk, paste: Mk, "copy.as": Ek, "export.as": Rk, "select.all": Lk, "select.none": Ak, delete: Hk, "new.project": zk, open: Ok, save: Fk, "save.as": jk, "upload.media": Uk, "create.page": Gk, "new.page": Vk, "page.name": $k, duplicate: Nk, cancel: Kk, "copy.invite.link": Wk, "create.multiplayer.project": _k, "copy.multiplayer.project": Yk, select: Zk, eraser: Xk, draw: qk, arrow: Jk, text: Qk, sticky: eD, Rectangle: tD, Ellipse: nD, Triangle: oD, Line: sD, rotate: iD, "lock.aspect.ratio": rD, "unlock.aspect.ratio": aD, group: dD, ungroup: lD, "move.to.back": cD, "move.backward": pD, "move.forward": uD, "move.to.front": hD, "reset.angle": mD, lock: gD, unlock: fD, "move.to.page": SD, "flip.horizontal": TD, "flip.vertical": bD, move: yD, "to.front": wD, forward: xD, backward: ID, back: CD, language: vD};
var kD = "Color";
var DD = "Fill";
var PD = "Dash";
var BD = "Size";
var MD = "Keep Open";
var ED = "Font";
var RD = "Align";
var LD = "Styles";
var AD = "Zoom In";
var HD = "Zoom Out";
var zD = "To";
var OD = "To Selection";
var FD = "To Fit";
var jD = "File";
var UD = "Edit";
var GD = "View";
var VD = "Preferences";
var $D = "Sign In";
var ND = "Sign Out";
var KD = "Sponsored";
var WD = "Become a Sponsor";
var _D = "Back to content";
var YD = "Zoom to Selection";
var ZD = "Zoom to Fit";
var XD = "Zoom to";
var qD = "Dark Mode";
var JD = "Focus Mode";
var QD = "Debug Mode";
var eP = "Show Grid";
var tP = "Use CAD Selection";
var nP = "Keep Style Menu Open";
var oP = "Always Show Snaps";
var sP = "Rotate Handles";
var iP = "Binding Handles";
var rP = "Clone Handles";
var aP = "Undo";
var dP = "Redo";
var lP = "Cut";
var cP = "Copy";
var pP = "Paste";
var uP = "Copy As";
var hP = "Export As";
var mP = "Select All";
var gP = "Select None";
var fP = "Delete";
var SP = "New Project";
var TP = "Open";
var bP = "Save";
var yP = "Save As";
var wP = "Upload Media";
var xP = "Create Page";
var IP = "New Page";
var CP = "Page Name";
var vP = "Duplicate";
var kP = "Cancel";
var DP = "Copy Invite Link";
var PP = "Copy ReadOnly Link";
var BP = "Create a Multiplayer Project";
var MP = "Copy to Multiplayer Project";
var EP = "Select";
var RP = "Eraser";
var LP = "Draw";
var AP = "Arrow";
var HP = "Text";
var zP = "Sticky";
var OP = "Rectangle";
var FP = "Ellipse";
var jP = "Triangle";
var UP = "Line";
var GP = "Rotate";
var VP = "Lock Aspect Ratio";
var $P = "Unlock Aspect Ratio";
var NP = "Group";
var KP = "Ungroup";
var WP = "Move to Back";
var _P = "Move Backward";
var YP = "Move Forward";
var ZP = "Move to Front";
var XP = "Reset Angle";
var qP = "Lock";
var JP = "Unlock";
var QP = "Move to Page";
var e22 = "Flip Horizontal";
var t22 = "Flip Vertical";
var n22 = "Move";
var o22 = "To Front";
var s22 = "Forward";
var i22 = "Backward";
var r22 = "To Back";
var a22 = "Language";
var d22 = "Learn More";
var l22 = "Dock Position";
var c22 = "Bottom";
var p22 = "Left";
var u22 = "Right";
var h22 = "Top";
var m22 = "Page";
var g22 = "Keyboard shortcuts";
var f22 = "Search";
var S22 = "Loading{dots}";
var _d = {"style.menu.color": kD, "style.menu.fill": DD, "style.menu.dash": PD, "style.menu.size": BD, "style.menu.keep.open": MD, "style.menu.font": ED, "style.menu.align": RD, styles: LD, "zoom.in": AD, "zoom.out": HD, to: zD, "to.selection": OD, "to.fit": FD, "menu.file": jD, "menu.edit": UD, "menu.view": GD, "menu.preferences": VD, "menu.sign.in": $D, "menu.sign.out": ND, sponsored: KD, "become.a.sponsor": WD, "zoom.to.content": _D, "zoom.to.selection": YD, "zoom.to.fit": ZD, "zoom.to": XD, "preferences.dark.mode": qD, "preferences.focus.mode": JD, "preferences.debug.mode": QD, "preferences.show.grid": eP, "preferences.use.cad.selection": tP, "preferences.keep.stylemenu.open": nP, "preferences.always.show.snaps": oP, "preferences.rotate.handles": sP, "preferences.binding.handles": iP, "preferences.clone.handles": rP, undo: aP, redo: dP, cut: lP, copy: cP, paste: pP, "copy.as": uP, "export.as": hP, "select.all": mP, "select.none": gP, delete: fP, "new.project": SP, open: TP, save: bP, "save.as": yP, "upload.media": wP, "create.page": xP, "new.page": IP, "page.name": CP, duplicate: vP, cancel: kP, "copy.invite.link": DP, "copy.readonly.link": PP, "create.multiplayer.project": BP, "copy.multiplayer.project": MP, select: EP, eraser: RP, draw: LP, arrow: AP, text: HP, sticky: zP, rectangle: OP, ellipse: FP, triangle: jP, line: UP, rotate: GP, "lock.aspect.ratio": VP, "unlock.aspect.ratio": $P, group: NP, ungroup: KP, "move.to.back": WP, "move.backward": _P, "move.forward": YP, "move.to.front": ZP, "reset.angle": XP, lock: qP, unlock: JP, "move.to.page": QP, "flip.horizontal": e22, "flip.vertical": t22, move: n22, "to.front": o22, forward: s22, backward: i22, back: r22, language: a22, "translation.link": d22, "dock.position": l22, bottom: c22, left: p22, right: u22, top: h22, page: m22, "keyboard.shortcuts": g22, search: f22, loading: S22};
var T22 = "\u0930\u0902\u0917";
var b22 = "\u092D\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var y22 = "\u0927\u0930\u094D\u0915\u093E";
var w22 = "\u0906\u0915\u093E\u0930";
var x22 = "\u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var I22 = "\u092B\u0928\u094D\u091F";
var C22 = "\u092A\u0919\u094D\u0915\u094D\u0924\u093F\u092C\u0926\u094D\u0927";
var v22 = "\u0936\u0948\u0932\u0940\u0939\u0930\u0942";
var k22 = "\u091C\u0941\u092E \u0907\u0928";
var D22 = "\u091C\u0941\u092E \u0906\u0909\u091F";
var P22 = "\u091F\u0941";
var B22 = "\u091F\u0941 \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928";
var M22 = "\u091F\u0941 \u092B\u093F\u091F";
var E22 = "\u092B\u093E\u0907\u0932";
var R22 = "\u0938\u092E\u094D\u092A\u093E\u0926\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var L22 = "\u092D\u094D\u092F\u0942";
var A22 = "\u092A\u094D\u0930\u093E\u0925\u092E\u093F\u0915\u0924\u093E\u0939\u0930\u0942";
var H22 = "\u0938\u093E\u0907\u0928 \u0907\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var z22 = "\u0938\u093E\u0907\u0928 \u0906\u0909\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var O22 = "\u092A\u094D\u0930\u093E\u092F\u094B\u091C\u093F\u0924";
var F22 = "\u092A\u094D\u0930\u093E\u092F\u094B\u091C\u0915 \u092C\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var j22 = "\u091C\u0941\u092E \u091F\u0941 \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928";
var U22 = "\u091C\u0941\u092E \u091F\u0941 \u092B\u093F\u091F";
var G22 = "\u091C\u0941\u092E \u091F\u0941";
var V22 = "\u0905\u0901\u0927\u094D\u092F\u093E\u0930\u094B \u092E\u094B\u0921";
var $2 = "\u092B\u094B\u0915\u0938 \u092E\u094B\u0921";
var N2 = "\u0921\u093F\u092C\u0917 \u092E\u094B\u0921";
var K22 = "\u0917\u094D\u0930\u093F\u0921 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var W22 = "CAD \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var _22 = "\u0938\u094D\u091F\u093E\u0907\u0932 \u092E\u0947\u0928\u0941 \u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Y22 = "\u0938\u0927\u0948\u0901 \u0938\u094D\u0928\u094D\u092F\u093E\u092A\u0939\u0930\u0942 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var Z22 = "\u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942 \u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var X22 = "\u092C\u093E\u0907\u0928\u094D\u0921\u093F\u0919 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var q22 = "\u0915\u094D\u0932\u094B\u0928 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var J22 = "\u092A\u0942\u0930\u094D\u0935\u0935\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var Q2 = "\u092A\u0941\u0928\u0903 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var eB = "\u0915\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var tB = "\u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var nB = "\u092A\u0947\u0938\u094D\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var oB = "\u0915\u092A\u093F \u090F\u091C";
var sB = "\u090F\u0915\u094D\u0938\u092A\u094B\u0930\u094D\u091F \u090F\u091C";
var iB = "\u0938\u092C\u0948 \u091B\u093E\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var rB = "\u0915\u0947\u0939\u093F \u092A\u0928\u093F \u0938\u0947\u0932\u0947\u0915\u094D\u091F \u0928\u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var aB = "\u092E\u0947\u091F\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var dB = "\u0928\u092F\u093E\u0901 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E";
var lB = "\u0916\u094B\u0932\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var cB = "\u0938\u0941\u0930\u0915\u094D\u0937\u093F\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var pB = "\u0938\u0947\u092D \u090F\u091C";
var uB = "\u092E\u093F\u0921\u093F\u092F\u093E \u0905\u092A\u0932\u094B\u0921 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var hB = "\u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var mB = "\u0928\u092F\u093E\u0901 \u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var gB = "\u092A\u0943\u0937\u094D\u0920\u0915\u094B \u0928\u093E\u092E";
var fB = "\u0905\u0928\u0941\u0932\u093F\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var SB = "\u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var TB = "\u0928\u093F\u092E\u0928\u094D\u0924\u094D\u0930\u0923\u093E \u0932\u093F\u0919\u094D\u0915 \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var bB = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var yB = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u094D\u0930\u094B\u091C\u0947\u0915\u094D\u091F\u092E\u093E \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var wB = "\u0938\u0947\u0932\u0947\u0915\u094D\u091F";
var xB = "\u0907\u0930\u0947\u091C\u0930";
var IB = "\u091A\u093F\u0924\u094D\u0930 \u092C\u0928\u093E\u0909\u0928\u0941";
var CB = "\u0924\u0940\u0930";
var vB = "\u0936\u092C\u094D\u0926";
var kB = "\u091F\u093E\u0901\u0938\u093F\u0928\u0947";
var DB = "\u0906\u092F\u0924";
var PB = "\u0926\u0940\u0930\u094D\u0918\u0935\u0943\u0924\u094D\u0924";
var BB = "\u0924\u094D\u0930\u093F\u092D\u0941\u091C";
var MB = "\u0930\u0947\u0916\u093E";
var EB = "\u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var RB = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var LB = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var AB = "\u0938\u092E\u0942\u0939";
var HB = "\u0938\u092E\u0942\u0939 \u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var zB = "\u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var OB = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var FB = "\u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var jB = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var UB = "\u0915\u094B\u0923 \u0930\u093F\u0938\u0947\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var GB = "\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var VB = "\u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var $B = "\u092A\u0943\u0937\u094D\u0920\u092E\u093E \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var NB = "\u0924\u0947\u0930\u094D\u0938\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var KB = "\u0920\u093E\u0921\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var WB = "\u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var _B = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F";
var YB = "\u0905\u0917\u093E\u0921\u093F";
var ZB = "\u092A\u091B\u093E\u0921\u093F";
var XB = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F";
var qB = "\u092D\u093E\u0937\u093E";
var Yd = {"style.menu.color": T22, "style.menu.fill": b22, "style.menu.dash": y22, "style.menu.size": w22, "style.menu.keep.open": x22, "style.menu.font": I22, "style.menu.align": C22, styles: v22, "zoom.in": k22, "zoom.out": D22, to: P22, "to.selection": B22, "to.fit": M22, "menu.file": E22, "menu.edit": R22, "menu.view": L22, "menu.preferences": A22, "menu.sign.in": H22, "menu.sign.out": z22, sponsored: O22, "become.a.sponsor": F22, "zoom.to.selection": j22, "zoom.to.fit": U22, "zoom.to": G22, "preferences.dark.mode": V22, "preferences.focus.mode": $2, "preferences.debug.mode": N2, "preferences.show.grid": K22, "preferences.use.cad.selection": W22, "preferences.keep.stylemenu.open": _22, "preferences.always.show.snaps": Y22, "preferences.rotate.handles": Z22, "preferences.binding.handles": X22, "preferences.clone.handles": q22, undo: J22, redo: Q2, cut: eB, copy: tB, paste: nB, "copy.as": oB, "export.as": sB, "select.all": iB, "select.none": rB, delete: aB, "new.project": dB, open: lB, save: cB, "save.as": pB, "upload.media": uB, "create.page": hB, "new.page": mB, "page.name": gB, duplicate: fB, cancel: SB, "copy.invite.link": TB, "create.multiplayer.project": bB, "copy.multiplayer.project": yB, select: wB, eraser: xB, draw: IB, arrow: CB, text: vB, sticky: kB, Rectangle: DB, Ellipse: PB, Triangle: BB, Line: MB, rotate: EB, "lock.aspect.ratio": RB, "unlock.aspect.ratio": LB, group: AB, ungroup: HB, "move.to.back": zB, "move.backward": OB, "move.forward": FB, "move.to.front": jB, "reset.angle": UB, lock: GB, unlock: VB, "move.to.page": $B, "flip.horizontal": NB, "flip.vertical": KB, move: WB, "to.front": _B, forward: YB, backward: ZB, back: XB, language: qB};
var JB = "Farge";
var QB = "Fyll";
var e52 = "Linje";
var t52 = "St\xF8rrelse";
var n52 = "Hold \xE5pen";
var o52 = "Teksttype";
var s52 = "Juster";
var i52 = "Stiler";
var r52 = "Zoom inn";
var a52 = "Zoom ut";
var d52 = "til";
var l52 = "Til valg";
var c52 = "For \xE5 passe";
var p52 = "Fil";
var u5 = "Rediger";
var h52 = "Vis";
var m52 = "Preferanser";
var g52 = "Logg inn";
var f52 = "Logg ut";
var S5 = "Sponset";
var T5 = "Bli en sponsor";
var b52 = "Zoom til valg";
var y5 = "Zoom for \xE5 passe";
var w52 = "Zoom til";
var x52 = "M\xF8rk modus";
var I5 = "Fokus modus";
var C52 = "Debug modus";
var v52 = "Vis rutenett";
var k5 = "Bruk CAD seleksjon";
var D5 = "Hold stilmeny \xE5pen";
var P5 = "Vis alltid snaps";
var B5 = "Vis roteringsh\xE5ndtak";
var M5 = "Vis bindingsh\xE5ndtak";
var E52 = "Vis kloningsh\xE5ndtak";
var R52 = "Angre";
var L5 = "Gj\xF8r om";
var A5 = "Klipp ut";
var H5 = "Kopier";
var z5 = "Lim inn";
var O5 = "Kopier som";
var F5 = "Eksporter som";
var j5 = "Velg alle";
var U5 = "Velg ingen";
var G5 = "Slett";
var V5 = "Nytt prosjekt";
var $5 = "\xC5pne";
var N5 = "Lagre";
var K5 = "Lagre som";
var W5 = "Last opp media";
var _52 = "Opprett side";
var Y5 = "Ny side";
var Z5 = "Sidenavn";
var X5 = "Dupliser";
var q5 = "Avbryt";
var J5 = "Kopier invitasjonslink";
var Q5 = "Opprett et flerspiller prosjekt";
var eM = "Kopier til flerspiller prosjekt";
var tM = "Velg";
var nM = "Viskel\xE6r";
var oM = "Tegn";
var sM = "Pil";
var iM = "Tekst";
var rM = "Lapp";
var aM = "Rektangel";
var dM = "Ellipse";
var lM = "Trekant";
var cM = "Linje";
var pM = "Roter";
var uM = "L\xE5s st\xF8rrelsesforhold";
var hM = "L\xE5s opp st\xF8rrelsesforhold";
var mM = "Grupper";
var gM = "Avgrupper";
var fM = "Flytt bakerst";
var SM = "Flytt bakover";
var TM = "Flytt forover";
var bM = "Flytt til front";
var yM = "Tilbakestill vinkel";
var wM = "L\xE5s";
var xM = "L\xE5s opp";
var IM = "Flytt til side";
var CM = "Snu horisontalt";
var vM = "Snu vertikalt";
var kM = "Flytt";
var DM = "Foran";
var PM = "Framover";
var BM = "Bakover";
var MM = "Bakerst";
var EM = "Spr\xE5k";
var Zd = {"style.menu.color": JB, "style.menu.fill": QB, "style.menu.dash": e52, "style.menu.size": t52, "style.menu.keep.open": n52, "style.menu.font": o52, "style.menu.align": s52, styles: i52, "zoom.in": r52, "zoom.out": a52, to: d52, "to.selection": l52, "to.fit": c52, "menu.file": p52, "menu.edit": u5, "menu.view": h52, "menu.preferences": m52, "menu.sign.in": g52, "menu.sign.out": f52, sponsored: S5, "become.a.sponsor": T5, "zoom.to.selection": b52, "zoom.to.fit": y5, "zoom.to": w52, "preferences.dark.mode": x52, "preferences.focus.mode": I5, "preferences.debug.mode": C52, "preferences.show.grid": v52, "preferences.use.cad.selection": k5, "preferences.keep.stylemenu.open": D5, "preferences.always.show.snaps": P5, "preferences.rotate.handles": B5, "preferences.binding.handles": M5, "preferences.clone.handles": E52, undo: R52, redo: L5, cut: A5, copy: H5, paste: z5, "copy.as": O5, "export.as": F5, "select.all": j5, "select.none": U5, delete: G5, "new.project": V5, open: $5, save: N5, "save.as": K5, "upload.media": W5, "create.page": _52, "new.page": Y5, "page.name": Z5, duplicate: X5, cancel: q5, "copy.invite.link": J5, "create.multiplayer.project": Q5, "copy.multiplayer.project": eM, select: tM, eraser: nM, draw: oM, arrow: sM, text: iM, sticky: rM, Rectangle: aM, Ellipse: dM, Triangle: lM, Line: cM, rotate: pM, "lock.aspect.ratio": uM, "unlock.aspect.ratio": hM, group: mM, ungroup: gM, "move.to.back": fM, "move.backward": SM, "move.forward": TM, "move.to.front": bM, "reset.angle": yM, lock: wM, unlock: xM, "move.to.page": IM, "flip.horizontal": CM, "flip.vertical": vM, move: kM, "to.front": DM, forward: PM, backward: BM, back: MM, language: EM};
var RM = "Kolor";
var LM = "Wype\u0142nienie";
var AM = "Linia";
var HM = "Rozmiar";
var zM = "Zachowaj otwarte";
var OM = "Czcionka";
var FM = "Wyr\xF3wnanie";
var jM = "Style";
var UM = "Przybli\u017C";
var GM = "Oddal";
var VM = "do";
var $M = "Do zaznaczenia";
var NM = "Do wype\u0142nienia";
var KM = "Plik";
var WM = "Edycja";
var _M = "Widok";
var YM = "Preferencje";
var ZM = "Zaloguj";
var XM = "Wyloguj";
var qM = "Sponsorzy";
var JM = "Zosta\u0144 sponsorem";
var QM = "Przybli\u017C do zaznaczenia";
var eE = "Wype\u0142nij ekran";
var tE = "Przybli\u017C do";
var nE = "Tryb ciemny";
var oE = "Tryb skupienia";
var sE = "Tryb debugowania";
var iE = "Poka\u017C siatk\u0119";
var rE = "U\u017Cyj zaznaczania CAD";
var aE = "Zachowaj menu styli otwarte";
var dE = "Przyci\u0105gaj obiekty";
var lE = "Uchwyty obrotu";
var cE = "Uchwyty powi\u0105zania";
var pE = "Uchwyty klonuj\u0105ce";
var uE = "Cofnij";
var hE = "Powt\xF3rz";
var mE = "Wytnij";
var gE = "Kopiuj";
var fE = "Wklej";
var SE = "Kopiuj jako";
var TE = "Eksportuj jako";
var bE = "Zaznacz wszystko";
var yE = "Odznacz wszystko";
var wE = "Usu\u0144";
var xE = "Nowy projekt";
var IE = "Otw\xF3rz";
var CE = "Zapisz";
var vE = "Zapisz jako";
var kE = "Za\u0142aduj multimedia";
var DE = "Utw\xF3rz stron\u0119";
var PE = "Nowa strona";
var BE = "Nazwa strony";
var ME = "Powiel";
var EE = "Anuluj";
var RE2 = "Kopiuj link zaproszenia";
var LE = "Stw\xF3rz projekt wieloosobowy";
var AE = "Kopiuj do projektu wieloosobowego";
var HE = "Zaznacz";
var zE = "Gumka";
var OE = "Rysuj";
var FE = "Strza\u0142ka";
var jE = "Tekst";
var UE = "Naklejka";
var GE = "Prostok\u0105t";
var VE = "Elipsa";
var $E = "Tr\xF3jk\u0105t";
var NE = "Linia";
var KE = "Obr\xF3\u0107";
var WE = "Zablokuj proporcje";
var _E = "Odblokuj proporcje";
var YE = "Grupuj";
var ZE = "Rozgrupuj";
var XE = "Przenie\u015B na ty\u0142";
var qE = "Przesu\u0144 do ty\u0142u";
var JE = "Przesu\u0144 do przodu";
var QE = "Przenie\u015B na prz\xF3d";
var eR = "Resetuj k\u0105t";
var tR = "Zablokuj";
var nR = "Odblokuj";
var oR = "Przenie\u015B na stron\u0119";
var sR = "Odwr\xF3\u0107 w poziomie";
var iR = "Odwr\xF3\u0107 w pionie";
var rR = "Przenie\u015B";
var aR = "Na wierzch";
var dR = "Do przodu";
var lR = "Do ty\u0142u";
var cR = "Na sp\xF3d";
var pR = "J\u0119zyk";
var Xd = {"style.menu.color": RM, "style.menu.fill": LM, "style.menu.dash": AM, "style.menu.size": HM, "style.menu.keep.open": zM, "style.menu.font": OM, "style.menu.align": FM, styles: jM, "zoom.in": UM, "zoom.out": GM, to: VM, "to.selection": $M, "to.fit": NM, "menu.file": KM, "menu.edit": WM, "menu.view": _M, "menu.preferences": YM, "menu.sign.in": ZM, "menu.sign.out": XM, sponsored: qM, "become.a.sponsor": JM, "zoom.to.selection": QM, "zoom.to.fit": eE, "zoom.to": tE, "preferences.dark.mode": nE, "preferences.focus.mode": oE, "preferences.debug.mode": sE, "preferences.show.grid": iE, "preferences.use.cad.selection": rE, "preferences.keep.stylemenu.open": aE, "preferences.always.show.snaps": dE, "preferences.rotate.handles": lE, "preferences.binding.handles": cE, "preferences.clone.handles": pE, undo: uE, redo: hE, cut: mE, copy: gE, paste: fE, "copy.as": SE, "export.as": TE, "select.all": bE, "select.none": yE, delete: wE, "new.project": xE, open: IE, save: CE, "save.as": vE, "upload.media": kE, "create.page": DE, "new.page": PE, "page.name": BE, duplicate: ME, cancel: EE, "copy.invite.link": RE2, "create.multiplayer.project": LE, "copy.multiplayer.project": AE, select: HE, eraser: zE, draw: OE, arrow: FE, text: jE, sticky: UE, Rectangle: GE, Ellipse: VE, Triangle: $E, Line: NE, rotate: KE, "lock.aspect.ratio": WE, "unlock.aspect.ratio": _E, group: YE, ungroup: ZE, "move.to.back": XE, "move.backward": qE, "move.forward": JE, "move.to.front": QE, "reset.angle": eR, lock: tR, unlock: nR, "move.to.page": oR, "flip.horizontal": sR, "flip.vertical": iR, move: rR, "to.front": aR, forward: dR, backward: lR, back: cR, language: pR};
var uR = "Cor";
var hR = "Preencher";
var mR = "Tra\xE7o";
var gR = "Tamanho";
var fR = "Manter aberto";
var SR = "Fonte";
var TR = "Alinhamento";
var bR = "Estilos";
var yR = "Aumentar zoom";
var wR = "Diminuir zoom";
var xR = "para";
var IR = "Para sele\xE7\xE3o";
var CR = "Para encaixar";
var vR = "Arquivo";
var kR = "Editar";
var DR = "Visualizar";
var PR = "Prefer\xEAncias";
var BR = "Entrar";
var MR = "Sair";
var ER = "Patrocinado";
var RR = "Torne-se um patrocinador";
var LR = "Zoom para a sele\xE7\xE3o";
var AR = "Zoom para ajuste";
var HR = "Zoom para";
var zR = "Modo Escuro";
var OR = "Modo Foco";
var FR = "Modo Debug";
var jR = "Mostrar Grade";
var UR = "Usar sele\xE7\xE3o CAD";
var GR = "Manter Menu de Estilos Aberto";
var VR = "Mostrar Pontos de Ajuste";
var $R = "Controle de Rota\xE7\xE3o";
var NR = "Controle de V\xEDnculos";
var KR = "Controle de Clone";
var WR = "Desfazer";
var _R = "Refazer";
var YR = "Cortar";
var ZR = "Copiar";
var XR = "Colar";
var qR = "Copiar como";
var JR = "Exportar como";
var QR = "Selecionar todos";
var e32 = "Selecionar nenhum";
var t32 = "Deletar";
var n32 = "Novo Projeto";
var o32 = "Abrir";
var s32 = "Salvar";
var i32 = "Salvar Como";
var r32 = "Carregar M\xEDdia";
var a32 = "Criar P\xE1gina";
var d32 = "Nova P\xE1gina";
var l32 = "Nome da P\xE1gina";
var c32 = "Duplicar";
var p32 = "Cancelar";
var u32 = "Copiar Link de Convite";
var h32 = "Criar um Projeto Multijogador";
var m32 = "Copiar para Projeto Multijogador";
var g32 = "Selecionar";
var f32 = "Borracha";
var S3 = "Desenhar";
var T32 = "Seta";
var b32 = "Texto";
var y32 = "Adesivo";
var w32 = "Ret\xE2ngulo";
var x32 = "Elipse";
var I3 = "Tri\xE2ngulo";
var C32 = "Linha";
var v32 = "Rotacionar";
var k32 = "Travar Propor\xE7\xE3o da Tela";
var D32 = "Destravar Propor\xE7\xE3o da Tela";
var P3 = "Agrupar";
var B3 = "Desagrupar";
var M32 = "Recuar";
var E32 = "Enviar para Tr\xE1s";
var R32 = "Avan\xE7ar";
var L32 = "Trazer para Frente";
var A32 = "Reiniciar \xC2ngulo";
var H32 = "Travar";
var z3 = "Destravar";
var O32 = "Mover para P\xE1gina";
var F32 = "Virar Horizontalmente";
var j32 = "Virar Verticalmente";
var U3 = "Mover";
var G3 = "Para Frente";
var V32 = "Avan\xE7ar";
var $3 = "Recuar";
var N3 = "Voltar";
var K3 = "Idioma";
var qd = {"style.menu.color": uR, "style.menu.fill": hR, "style.menu.dash": mR, "style.menu.size": gR, "style.menu.keep.open": fR, "style.menu.font": SR, "style.menu.align": TR, styles: bR, "zoom.in": yR, "zoom.out": wR, to: xR, "to.selection": IR, "to.fit": CR, "menu.file": vR, "menu.edit": kR, "menu.view": DR, "menu.preferences": PR, "menu.sign.in": BR, "menu.sign.out": MR, sponsored: ER, "become.a.sponsor": RR, "zoom.to.selection": LR, "zoom.to.fit": AR, "zoom.to": HR, "preferences.dark.mode": zR, "preferences.focus.mode": OR, "preferences.debug.mode": FR, "preferences.show.grid": jR, "preferences.use.cad.selection": UR, "preferences.keep.stylemenu.open": GR, "preferences.always.show.snaps": VR, "preferences.rotate.handles": $R, "preferences.binding.handles": NR, "preferences.clone.handles": KR, undo: WR, redo: _R, cut: YR, copy: ZR, paste: XR, "copy.as": qR, "export.as": JR, "select.all": QR, "select.none": e32, delete: t32, "new.project": n32, open: o32, save: s32, "save.as": i32, "upload.media": r32, "create.page": a32, "new.page": d32, "page.name": l32, duplicate: c32, cancel: p32, "copy.invite.link": u32, "create.multiplayer.project": h32, "copy.multiplayer.project": m32, select: g32, eraser: f32, draw: S3, arrow: T32, text: b32, sticky: y32, Rectangle: w32, Ellipse: x32, Triangle: I3, Line: C32, rotate: v32, "lock.aspect.ratio": k32, "unlock.aspect.ratio": D32, group: P3, ungroup: B3, "move.to.back": M32, "move.backward": E32, "move.forward": R32, "move.to.front": L32, "reset.angle": A32, lock: H32, unlock: z3, "move.to.page": O32, "flip.horizontal": F32, "flip.vertical": j32, move: U3, "to.front": G3, forward: V32, backward: $3, back: N3, language: K3};
var W32 = "\u0426\u0432\u0435\u0442";
var _32 = "\u0417\u0430\u043F\u043E\u043B\u043D\u044F\u0442\u044C";
var Y32 = "\u0428\u0442\u0440\u0438\u0445";
var Z32 = "\u0420\u0430\u0437\u043C\u0435\u0440";
var X3 = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var q3 = "\u0428\u0440\u0438\u0444\u0442";
var J32 = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C";
var Q3 = "\u0421\u0442\u0438\u043B\u044C";
var e82 = "\u0423\u0432\u0435\u043B\u0438\u0447\u0438\u0442\u044C";
var t82 = "\u0423\u043C\u0435\u043D\u044C\u0448\u0438\u0442\u044C";
var n8 = "\u043A";
var o82 = "\u041A \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044E";
var s82 = "\u041F\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0443 \u044D\u043A\u0440\u0430\u043D\u0430";
var i8 = "\u0424\u0430\u0439\u043B";
var r82 = "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435";
var a8 = "\u0412\u0438\u0434";
var d82 = "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438";
var l8 = "\u0412\u043E\u0439\u0442\u0438";
var c8 = "\u0412\u044B\u0439\u0442\u0438";
var p8 = "\u0421\u043F\u043E\u043D\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043E";
var u8 = "\u0421\u0442\u0430\u0442\u044C \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var h8 = "\u041F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u044C \u043A \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044E";
var m8 = "\u0423\u0432\u0435\u043B\u0438\u0447\u0438\u0442\u044C \u043F\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0443 \u044D\u043A\u0440\u0430\u043D\u0430";
var g8 = "\u041F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u044C \u043A";
var f82 = "\u0422\u0451\u043C\u043D\u0430\u044F \u0442\u0435\u043C\u0430";
var S8 = "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C";
var T8 = "\u0420\u0435\u0436\u0438\u043C \u043E\u0442\u043B\u0430\u0434\u043A\u0438";
var b8 = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0441\u0435\u0442\u043A\u0443";
var y8 = "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C CAD \u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var w8 = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0435\u0439 \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var x8 = "\u0412\u0441\u0435\u0433\u0434\u0430 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var I8 = "\u0420\u0443\u0447\u043A\u0438 \u0432\u0440\u0430\u0449\u0435\u043D\u0438\u044F";
var C8 = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var v8 = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F";
var k8 = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var D8 = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C";
var P8 = "\u0412\u044B\u0440\u0435\u0437\u0430\u0442\u044C";
var B8 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var M8 = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C";
var E8 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var R8 = "\u042D\u043A\u0441\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var L8 = "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0451";
var A8 = "\u0421\u043D\u044F\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var H8 = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C";
var z8 = "\u041D\u043E\u0432\u044B\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var O8 = "\u041E\u0442\u043A\u0440\u044B\u0442\u044C";
var F8 = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C";
var j8 = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043A\u0430\u043A";
var U8 = "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0444\u043E\u0442\u043E";
var G8 = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var V8 = "\u041D\u043E\u0432\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
var $8 = "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B";
var N8 = "\u0414\u0443\u0431\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var K8 = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var W8 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043F\u0440\u0438\u0433\u043B\u0430\u0448\u0435\u043D\u0438\u0435";
var _82 = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var Y8 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432 \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var Z8 = "\u0412\u044B\u0431\u0438\u0440\u0430\u0442\u044C";
var X8 = "\u041B\u0430\u0441\u0442\u0438\u043A";
var q8 = "\u0420\u0438\u0441\u043E\u0432\u0430\u0442\u044C";
var J8 = "\u0421\u0442\u0440\u0435\u043B\u043A\u0430";
var Q8 = "\u0422\u0435\u043A\u0441\u0442";
var e42 = "\u0417\u0430\u043C\u0435\u0442\u043A\u0430";
var t42 = "\u041F\u0440\u044F\u043C\u043E\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var n42 = "\u042D\u043B\u043B\u0438\u043F\u0441";
var o42 = "\u0422\u0440\u0435\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var s42 = "\u041B\u0438\u043D\u0438\u044F";
var i42 = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u044C";
var r42 = "\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var a42 = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var d42 = "\u0421\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var l42 = "\u0420\u0430\u0437\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var c42 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430\u0437\u0430\u0434";
var p42 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var u42 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u0432\u043F\u0435\u0440\u0451\u0434";
var h42 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var m42 = "\u0421\u0431\u0440\u043E\u0441 \u0443\u0433\u043B\u0430";
var g42 = "\u0411\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430";
var f42 = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430";
var S4 = "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var T42 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var b42 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var y4 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C";
var w42 = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var x42 = "\u0412\u043F\u0435\u0440\u0435\u0434";
var I4 = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var C42 = "\u041D\u0430\u0437\u0430\u0434";
var v42 = "\u042F\u0437\u044B\u043A";
var Jd = {"style.menu.color": W32, "style.menu.fill": _32, "style.menu.dash": Y32, "style.menu.size": Z32, "style.menu.keep.open": X3, "style.menu.font": q3, "style.menu.align": J32, styles: Q3, "zoom.in": e82, "zoom.out": t82, to: n8, "to.selection": o82, "to.fit": s82, "menu.file": i8, "menu.edit": r82, "menu.view": a8, "menu.preferences": d82, "menu.sign.in": l8, "menu.sign.out": c8, sponsored: p8, "become.a.sponsor": u8, "zoom.to.selection": h8, "zoom.to.fit": m8, "zoom.to": g8, "preferences.dark.mode": f82, "preferences.focus.mode": S8, "preferences.debug.mode": T8, "preferences.show.grid": b8, "preferences.use.cad.selection": y8, "preferences.keep.stylemenu.open": w8, "preferences.always.show.snaps": x8, "preferences.rotate.handles": I8, "preferences.binding.handles": C8, "preferences.clone.handles": v8, undo: k8, redo: D8, cut: P8, copy: B8, paste: M8, "copy.as": E8, "export.as": R8, "select.all": L8, "select.none": A8, delete: H8, "new.project": z8, open: O8, save: F8, "save.as": j8, "upload.media": U8, "create.page": G8, "new.page": V8, "page.name": $8, duplicate: N8, cancel: K8, "copy.invite.link": W8, "create.multiplayer.project": _82, "copy.multiplayer.project": Y8, select: Z8, eraser: X8, draw: q8, arrow: J8, text: Q8, sticky: e42, Rectangle: t42, Ellipse: n42, Triangle: o42, Line: s42, rotate: i42, "lock.aspect.ratio": r42, "unlock.aspect.ratio": a42, group: d42, ungroup: l42, "move.to.back": c42, "move.backward": p42, "move.forward": u42, "move.to.front": h42, "reset.angle": m42, lock: g42, unlock: f42, "move.to.page": S4, "flip.horizontal": T42, "flip.vertical": b42, move: y4, "to.front": w42, forward: x42, backward: I4, back: C42, language: v42};
var k42 = "Renk";
var D42 = "Doldur";
var P4 = "\xC7izgi";
var B4 = "Boyut";
var M4 = "A\xE7\u0131k Tut";
var E42 = "Yaz\u0131 Tipi";
var R42 = "Hizala";
var L4 = "Stiller";
var A42 = "Yak\u0131nla\u015Ft\u0131r";
var H4 = "Uzakla\u015Ft\u0131r";
var z4 = "";
var O42 = "Se\xE7ime G\xF6re";
var F42 = "S\u0131\u011Fd\u0131rmaya G\xF6re";
var j4 = "Dosya";
var U4 = "D\xFCzenle";
var G4 = "G\xF6r\xFCnt\xFC";
var V42 = "Tercihler";
var $4 = "Giri\u015F Yap";
var N4 = "Oturumu Kapat";
var K4 = "Sponsorlu";
var W4 = "Sponsor Ol";
var _42 = "Se\xE7ime Yak\u0131nla\u015Ft\u0131r";
var Y4 = "S\u0131\u011Fd\u0131rmak i\xE7in Yak\u0131nla\u015Ft\u0131r";
var Z4 = "Yak\u0131nla\u015Ft\u0131r";
var X4 = "Karanl\u0131k Mod";
var q4 = "Odak Modu";
var J4 = "Debug Modu";
var Q4 = "Izgaray\u0131 G\xF6ster";
var e62 = "CAD Se\xE7imi Kullan";
var t62 = "Stil Men\xFCs\xFCn\xFC A\xE7\u0131k Tut";
var n62 = "Hiza \xC7izgilerini Hep G\xF6ster";
var o62 = "Rotasyon Kontrolc\xFCleri";
var s62 = "Ba\u011Flama Kontrolc\xFCleri";
var i62 = "Klon Kontrolc\xFCleri";
var r62 = "Geri Al";
var a62 = "Yinele";
var d62 = "Kes";
var l62 = "Kopyala";
var c62 = "Yap\u0131\u015Ft\u0131r";
var p62 = "Olarak Kopyala";
var u6 = "Olarak D\u0131\u015Far\u0131 Aktar";
var h6 = "Hepsini Se\xE7";
var m62 = "Hi\xE7birini Se\xE7me";
var g62 = "Sil";
var f62 = "Yeni Proje";
var S6 = "A\xE7";
var T6 = "Kaydet";
var b62 = "Farkl\u0131 Kaydet";
var y6 = "Medya Y\xFCkle";
var w62 = "Sayfa Olu\u015Ftur";
var x62 = "Yeni Sayfa";
var I6 = "Sayfa \u0130smi";
var C6 = "Kopya Olu\u015Ftur";
var v6 = "\u0130ptal";
var k6 = "Davet Linkini Kopyala";
var D6 = "\xC7ok Oyunculu Proje Olu\u015Ftur";
var P6 = "\xC7ok Oyunculu Projeye Kopyala";
var B6 = "Se\xE7";
var M6 = "Silgi";
var E6 = "\xC7izim";
var R62 = "Ok";
var L6 = "Yaz\u0131";
var A6 = "Yap\u0131\u015Fkan";
var H6 = "Dikd\xF6rtgen";
var z6 = "Elips";
var O6 = "\xDC\xE7gen";
var F6 = "\xC7izgi";
var j6 = "D\xF6nd\xFCr";
var U6 = "En Boy Oran\u0131n\u0131 Kilitle";
var G6 = "En Boy Oran\u0131 Kilidini A\xE7";
var V6 = "Grupla";
var $6 = "Gruplamay\u0131 Kald\u0131r";
var N6 = "Arkaya Ta\u015F\u0131";
var K6 = "En Arkaya Ta\u015F\u0131";
var W6 = "En \xD6ne Ta\u015F\u0131";
var _62 = "\xD6ne Ta\u015F\u0131";
var Y6 = "A\xE7\u0131y\u0131 S\u0131f\u0131rla";
var Z6 = "Kilitle";
var X6 = "Kilidini A\xE7";
var q6 = "Sayfaya Ta\u015F\u0131";
var J6 = "Yatay \xC7evir";
var Q6 = "Dikey \xC7evir";
var eL = "Ta\u015F\u0131";
var tL = "\xD6ne";
var nL = "En \xD6ne";
var oL = "En Arkaya";
var sL = "Arkaya";
var iL = "Dil";
var Qd = {"style.menu.color": k42, "style.menu.fill": D42, "style.menu.dash": P4, "style.menu.size": B4, "style.menu.keep.open": M4, "style.menu.font": E42, "style.menu.align": R42, styles: L4, "zoom.in": A42, "zoom.out": H4, to: z4, "to.selection": O42, "to.fit": F42, "menu.file": j4, "menu.edit": U4, "menu.view": G4, "menu.preferences": V42, "menu.sign.in": $4, "menu.sign.out": N4, sponsored: K4, "become.a.sponsor": W4, "zoom.to.selection": _42, "zoom.to.fit": Y4, "zoom.to": Z4, "preferences.dark.mode": X4, "preferences.focus.mode": q4, "preferences.debug.mode": J4, "preferences.show.grid": Q4, "preferences.use.cad.selection": e62, "preferences.keep.stylemenu.open": t62, "preferences.always.show.snaps": n62, "preferences.rotate.handles": o62, "preferences.binding.handles": s62, "preferences.clone.handles": i62, undo: r62, redo: a62, cut: d62, copy: l62, paste: c62, "copy.as": p62, "export.as": u6, "select.all": h6, "select.none": m62, delete: g62, "new.project": f62, open: S6, save: T6, "save.as": b62, "upload.media": y6, "create.page": w62, "new.page": x62, "page.name": I6, duplicate: C6, cancel: v6, "copy.invite.link": k6, "create.multiplayer.project": D6, "copy.multiplayer.project": P6, select: B6, eraser: M6, draw: E6, arrow: R62, text: L6, sticky: A6, Rectangle: H6, Ellipse: z6, Triangle: O6, Line: F6, rotate: j6, "lock.aspect.ratio": U6, "unlock.aspect.ratio": G6, group: V6, ungroup: $6, "move.to.back": N6, "move.backward": K6, "move.forward": W6, "move.to.front": _62, "reset.angle": Y6, lock: Z6, unlock: X6, "move.to.page": q6, "flip.horizontal": J6, "flip.vertical": Q6, move: eL, "to.front": tL, forward: nL, backward: oL, back: sL, language: iL};
var rL = "\u041A\u043E\u043B\u0456\u0440";
var aL = "\u0417\u0430\u043F\u043E\u0432\u043D\u044E\u0432\u0430\u0442\u0438";
var dL = "\u0428\u0442\u0440\u0438\u0445";
var lL = "\u0420\u043E\u0437\u043C\u0456\u0440";
var cL = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var pL = "\u0428\u0440\u0438\u0444\u0442";
var uL = "\u0412\u0438\u0440\u0456\u0432\u043D\u044F\u0442\u0438";
var hL = "\u0421\u0442\u0438\u043B\u044C";
var mL = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438";
var gL = "\u0417\u043C\u0435\u043D\u0448\u0438\u0442\u0438";
var fL = "\u0434\u043E";
var SL = "\u0414\u043E \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var TL = "\u0417\u0430 \u0440\u043E\u0437\u043C\u0456\u0440\u043E\u043C \u0435\u043A\u0440\u0430\u043D\u0443";
var bL = "\u0424\u0430\u0439\u043B";
var yL = "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043D\u043D\u044F";
var wL = "\u0412\u0438\u0433\u043B\u044F\u0434";
var xL = "\u041D\u0430\u043B\u0430\u0448\u0442\u0443\u0432\u0430\u043D\u043D\u044F";
var IL = "\u0423\u0432\u0456\u0439\u0442\u0438";
var CL = "\u0412\u0438\u0439\u0442\u0438";
var vL = "\u0421\u043F\u043E\u043D\u0441\u043E\u0432\u0430\u043D\u043E";
var kL = "\u0421\u0442\u0430\u0442\u0438 \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var DL = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var PL = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438 \u0437\u0430 \u0440\u043E\u0437\u043C\u0456\u0440\u043E\u043C \u0435\u043A\u0440\u0430\u043D\u0443";
var BL = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E";
var ML = "\u0422\u0435\u043C\u043D\u0430 \u0442\u0435\u043C\u0430";
var EL = "\u041C\u0456\u043D\u0456\u043C\u0430\u043B\u0456\u0441\u0442\u0438\u0447\u043D\u0438\u0439 \u0440\u0435\u0436\u0438\u043C";
var RL = "\u0420\u0435\u0436\u0438\u043C \u043D\u0430\u043B\u0430\u0433\u043E\u0434\u0436\u0435\u043D\u043D\u044F";
var LL = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0441\u0456\u0442\u043A\u0443";
var AL = "\u0412\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0432\u0430\u0442\u0438 CAD \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var HL = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0456\u0432 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var zL = "\u0417\u0430\u0432\u0436\u0434\u0438 \u043F\u043E\u043A\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var OL = "\u0420\u0443\u0447\u043A\u0438 \u043E\u0431\u0435\u0440\u0442\u0430\u043D\u043D\u044F";
var FL = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var jL = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0443\u0432\u0430\u043D\u043D\u044F";
var UL = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var GL = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0438";
var VL = "\u0412\u0438\u0440\u0456\u0437\u0430\u0442\u0438";
var $L = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438";
var NL = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438";
var KL = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u044F\u043A";
var WL = "\u0415\u043A\u0441\u043F\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u044F\u043A";
var _L = "\u041E\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0435";
var YL = "\u0417\u043D\u044F\u0442\u0438 \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var ZL = "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438";
var XL = "\u041D\u043E\u0432\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var qL = "\u0412\u0456\u0434\u043A\u0440\u0438\u0442\u0438";
var JL = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438";
var QL = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u044F\u043A";
var eA = "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438 \u043C\u0435\u0434\u0456\u0430";
var tA = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var nA = "\u041D\u043E\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0430";
var oA = "\u041D\u0430\u0437\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0438";
var sA = "\u0414\u0443\u0431\u043B\u044E\u0432\u0430\u0442\u0438";
var iA = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var rA = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u043F\u043E\u0441\u0438\u043B\u0430\u043D\u043D\u044F \u043D\u0430 \u0437\u0430\u043F\u0440\u043E\u0448\u0435\u043D\u043D\u044F";
var aA = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var dA = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u0432 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var lA = "\u0412\u0438\u0431\u0438\u0440\u0430\u0442\u0438";
var cA = "\u041B\u0430\u0441\u0442\u0438\u043A";
var pA = "\u041C\u0430\u043B\u044E\u0432\u0430\u0442\u0438";
var uA = "\u0421\u0442\u0440\u0456\u043B\u043A\u0430";
var hA = "\u0422\u0435\u043A\u0441\u0442";
var mA = "\u041D\u043E\u0442\u0430\u0442\u043A\u0430";
var gA = "\u041F\u0440\u044F\u043C\u043E\u043A\u0443\u0442\u043D\u0438\u043A";
var fA = "\u0415\u043B\u0456\u043F\u0441";
var SA = "\u0422\u0440\u0438\u043A\u0443\u0442\u043D\u0438\u043A";
var TA = " \u041B\u0456\u043D\u0456\u044F";
var bA = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u0438";
var yA = "\u0417\u0430\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var wA = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var xA = "\u0417\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var IA = " \u0420\u043E\u0437\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var CA = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430\u0437\u0430\u0434";
var vA = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var kA = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u0432\u043F\u0435\u0440\u0435\u0434";
var DA = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var PA = "\u0421\u043A\u0438\u0434\u0430\u043D\u043D\u044F \u043A\u0443\u0442\u0430";
var BA = "\u0411\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var MA = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var EA = "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var RA = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var LA = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var AA = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438";
var HA = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var zA = " \u0412\u043F\u0435\u0440\u0435\u0434";
var OA = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var FA = "\u041D\u0430\u0437\u0430\u0434";
var jA = "\u041C\u043E\u0432\u0430";
var el = {"style.menu.color": rL, "style.menu.fill": aL, "style.menu.dash": dL, "style.menu.size": lL, "style.menu.keep.open": cL, "style.menu.font": pL, "style.menu.align": uL, styles: hL, "zoom.in": mL, "zoom.out": gL, to: fL, "to.selection": SL, "to.fit": TL, "menu.file": bL, "menu.edit": yL, "menu.view": wL, "menu.preferences": xL, "menu.sign.in": IL, "menu.sign.out": CL, sponsored: vL, "become.a.sponsor": kL, "zoom.to.selection": DL, "zoom.to.fit": PL, "zoom.to": BL, "preferences.dark.mode": ML, "preferences.focus.mode": EL, "preferences.debug.mode": RL, "preferences.show.grid": LL, "preferences.use.cad.selection": AL, "preferences.keep.stylemenu.open": HL, "preferences.always.show.snaps": zL, "preferences.rotate.handles": OL, "preferences.binding.handles": FL, "preferences.clone.handles": jL, undo: UL, redo: GL, cut: VL, copy: $L, paste: NL, "copy.as": KL, "export.as": WL, "select.all": _L, "select.none": YL, delete: ZL, "new.project": XL, open: qL, save: JL, "save.as": QL, "upload.media": eA, "create.page": tA, "new.page": nA, "page.name": oA, duplicate: sA, cancel: iA, "copy.invite.link": rA, "create.multiplayer.project": aA, "copy.multiplayer.project": dA, select: lA, eraser: cA, draw: pA, arrow: uA, text: hA, sticky: mA, Rectangle: gA, Ellipse: fA, Triangle: SA, Line: TA, rotate: bA, "lock.aspect.ratio": yA, "unlock.aspect.ratio": wA, group: xA, ungroup: IA, "move.to.back": CA, "move.backward": vA, "move.forward": kA, "move.to.front": DA, "reset.angle": PA, lock: BA, unlock: MA, "move.to.page": EA, "flip.horizontal": RA, "flip.vertical": LA, move: AA, "to.front": HA, forward: zA, backward: OA, back: FA, language: jA};
var UA = "\u989C\u8272";
var GA = "\u586B\u5145";
var VA = "\u8FB9\u6846";
var $A = "\u5C3A\u5BF8";
var NA = "\u4FDD\u6301\u5E38\u5F00";
var KA = "\u5B57\u4F53";
var WA = "\u5BF9\u9F50";
var _A = "\u6837\u5F0F";
var YA = "\u653E\u5927";
var ZA = "\u7F29\u5C0F";
var XA = "\u7F29\u653E\u81F3";
var qA = "\u7F29\u653E\u9009\u4E2D";
var JA = "\u81EA\u9002\u5E94\u7F29\u653E";
var QA = "\u6587\u4EF6";
var e92 = "\u7F16\u8F91";
var t92 = "\u89C6\u56FE";
var n9 = "\u504F\u597D";
var o92 = "\u767B\u5F55";
var s9 = "\u767B\u51FA";
var i9 = "\u5DF2\u8D5E\u52A9";
var r92 = "\u6210\u4E3A\u8D5E\u52A9\u8005";
var a9 = "\u7F29\u653E\u9009\u4E2D";
var d9 = "\u81EA\u9002\u5E94\u7F29\u653E";
var l9 = "\u7F29\u653E\u81F3";
var c9 = "\u6697\u9ED1\u6A21\u5F0F";
var p9 = "\u4E13\u6CE8\u6A21\u5F0F";
var u9 = "\u8C03\u8BD5\u6A21\u5F0F";
var h9 = "\u663E\u793A\u7F51\u683C";
var m9 = "\u4F7F\u7528 CAD \u9009\u62E9";
var g9 = "\u4FDD\u6301\u6837\u5F0F\u83DC\u5355\u5E38\u5F00";
var f9 = "\u603B\u662F\u5C55\u793A\u5BF9\u9F50\u7EBF";
var S9 = "\u65CB\u8F6C\u624B\u67C4";
var T9 = "\u6346\u7ED1\u624B\u67C4";
var b9 = "\u514B\u9686\u624B\u67C4";
var y9 = "\u64A4\u9500";
var w9 = "\u91CD\u505A";
var x9 = "\u526A\u5207";
var I9 = "\u590D\u5236";
var C9 = "\u7C98\u8D34";
var v9 = "\u590D\u5236\u4E3A";
var k9 = "\u5BFC\u51FA\u4E3A";
var D9 = "\u9009\u4E2D\u5168\u90E8";
var P9 = "\u53D6\u6D88\u9009\u4E2D";
var B9 = "\u5220\u9664";
var M9 = "\u65B0\u5DE5\u7A0B";
var E9 = "\u6253\u5F00";
var R9 = "\u4FDD\u5B58";
var L9 = "\u4FDD\u5B58\u4E3A";
var A9 = "\u4E0A\u4F20\u5A92\u4F53\u6587\u4EF6";
var H9 = "\u521B\u5EFA\u9875\u9762";
var z9 = "\u65B0\u9875\u9762";
var O9 = "\u9875\u9762\u540D\u79F0";
var F9 = "\u590D\u5236";
var j9 = "\u53D6\u6D88";
var U9 = "\u590D\u5236\u9080\u8BF7\u94FE\u63A5";
var G9 = "\u521B\u5EFA\u591A\u4EBA\u5DE5\u7A0B";
var V9 = "\u590D\u5236\u5230\u591A\u4EBA\u5DE5\u7A0B";
var $9 = "\u9009\u62E9";
var N9 = "\u6A61\u76AE";
var K9 = "\u753B\u7B14";
var W9 = "\u7BAD\u5934";
var _92 = "\u6587\u672C";
var Y9 = "\u4FBF\u5229\u8D34";
var Z9 = "\u77E9\u5F62";
var X9 = "\u692D\u5706\u5F62";
var q9 = "\u4E09\u89D2\u5F62";
var J9 = "\u76F4\u7EBF";
var Q9 = "\u65CB\u8F6C";
var e72 = "\u9501\u5B9A\u5BBD\u9AD8\u6BD4";
var t72 = "\u89E3\u9501\u5BBD\u9AD8\u6BD4";
var n7 = "\u5206\u7EC4";
var o72 = "\u53D6\u6D88\u5206\u7EC4";
var s72 = "\u7F6E\u5E95";
var i7 = "\u4E0B\u79FB\u4E00\u5C42";
var r72 = "\u4E0A\u79FB\u4E00\u5C42";
var a7 = "\u7F6E\u9876";
var d72 = "\u91CD\u7F6E\u65CB\u8F6C\u89D2\u5EA6";
var l72 = "\u9501\u5B9A";
var c72 = "\u89E3\u9501";
var p72 = "\u79FB\u52A8\u5230\u9875\u9762";
var u7 = "\u6C34\u5E73\u7FFB\u8F6C";
var h7 = "\u5782\u76F4\u7FFB\u8F6C";
var m72 = "\u79FB\u52A8";
var g7 = "\u7F6E\u9876";
var f72 = "\u4E0A\u4E00\u5C42";
var S7 = "\u4E0B\u4E00\u5C42";
var T7 = "\u7F6E\u5E95";
var b7 = "\u8BED\u8A00";
var tl = {"style.menu.color": UA, "style.menu.fill": GA, "style.menu.dash": VA, "style.menu.size": $A, "style.menu.keep.open": NA, "style.menu.font": KA, "style.menu.align": WA, styles: _A, "zoom.in": YA, "zoom.out": ZA, to: XA, "to.selection": qA, "to.fit": JA, "menu.file": QA, "menu.edit": e92, "menu.view": t92, "menu.preferences": n9, "menu.sign.in": o92, "menu.sign.out": s9, sponsored: i9, "become.a.sponsor": r92, "zoom.to.selection": a9, "zoom.to.fit": d9, "zoom.to": l9, "preferences.dark.mode": c9, "preferences.focus.mode": p9, "preferences.debug.mode": u9, "preferences.show.grid": h9, "preferences.use.cad.selection": m9, "preferences.keep.stylemenu.open": g9, "preferences.always.show.snaps": f9, "preferences.rotate.handles": S9, "preferences.binding.handles": T9, "preferences.clone.handles": b9, undo: y9, redo: w9, cut: x9, copy: I9, paste: C9, "copy.as": v9, "export.as": k9, "select.all": D9, "select.none": P9, delete: B9, "new.project": M9, open: E9, save: R9, "save.as": L9, "upload.media": A9, "create.page": H9, "new.page": z9, "page.name": O9, duplicate: F9, cancel: j9, "copy.invite.link": U9, "create.multiplayer.project": G9, "copy.multiplayer.project": V9, select: $9, eraser: N9, draw: K9, arrow: W9, text: _92, sticky: Y9, Rectangle: Z9, Ellipse: X9, Triangle: q9, Line: J9, rotate: Q9, "lock.aspect.ratio": e72, "unlock.aspect.ratio": t72, group: n7, ungroup: o72, "move.to.back": s72, "move.backward": i7, "move.forward": r72, "move.to.front": a7, "reset.angle": d72, lock: l72, unlock: c72, "move.to.page": p72, "flip.horizontal": u7, "flip.vertical": h7, move: m72, "to.front": g7, forward: f72, backward: S7, back: T7, language: b7};
var y7 = "\u984F\u8272";
var w7 = "\u586B\u5145";
var x72 = "\u865B\u7DDA";
var I7 = "\u5927\u5C0F";
var C7 = "\u4FDD\u6301\u958B\u555F";
var v7 = "\u5B57\u578B";
var k7 = "\u5C0D\u9F4A";
var D7 = "\u6A23\u5F0F";
var P7 = "\u653E\u5927";
var B7 = "\u7E2E\u5C0F";
var M7 = "\u81F3";
var E7 = "\u81F3\u9078\u53D6\u7BC4\u570D";
var R7 = "\u81F3\u9069\u7576\u5927\u5C0F";
var L7 = "\u6A94\u6848";
var A7 = "\u7DE8\u8F2F";
var H7 = "\u6AA2\u8996";
var z7 = "\u9078\u9805";
var O7 = "\u767B\u5165";
var F7 = "\u767B\u51FA";
var j7 = "\u8D0A\u52A9";
var U7 = "\u6210\u70BA\u8D0A\u52A9\u8005";
var G7 = "\u7E2E\u653E\u81F3\u9078\u53D6\u7BC4\u570D";
var V7 = "\u7E2E\u653E\u81F3\u9069\u7576\u5927\u5C0F";
var $7 = "\u7E2E\u653E\u81F3";
var N7 = "\u6DF1\u8272\u6A21\u5F0F";
var K7 = "\u5C08\u6CE8\u6A21\u5F0F";
var W7 = "\u9664\u932F\u6A21\u5F0F";
var _72 = "\u986F\u793A\u7DB2\u683C";
var Y7 = "\u4F7F\u7528 CAD \u9078\u53D6";
var Z7 = "\u6A23\u5F0F\u9078\u55AE\u4FDD\u6301\u958B\u555F";
var X7 = "\u6C38\u9060\u986F\u793A\u5C0D\u9F4A\u7DDA";
var q7 = "\u65CB\u8F49\u63A7\u9EDE";
var J7 = "\u7D81\u5B9A\u63A7\u9EDE";
var Q7 = "\u8907\u88FD\u63A7\u9EDE";
var eH = "\u5FA9\u539F";
var tH = "\u53D6\u6D88\u5FA9\u539F";
var nH = "\u526A\u4E0B";
var oH = "\u8907\u88FD";
var sH = "\u8CBC\u4E0A";
var iH = "\u8907\u88FD\u6210";
var rH = "\u532F\u51FA\u6210";
var aH = "\u5168\u9078";
var dH = "\u53D6\u6D88\u9078\u53D6";
var lH = "\u522A\u9664";
var cH = "\u65B0\u5C08\u6848";
var pH = "\u958B\u555F";
var uH = "\u5132\u5B58";
var hH = "\u53E6\u5B58\u70BA";
var mH = "\u4E0A\u50B3\u5A92\u9AD4";
var gH = "\u5EFA\u7ACB\u9801\u9762";
var fH = "\u65B0\u9801\u9762";
var SH = "\u9801\u9762\u540D\u7A31";
var TH = "\u8907\u88FD";
var bH = "\u53D6\u6D88";
var yH = "\u8907\u88FD\u9080\u8ACB\u9023\u7D50";
var wH = "\u8907\u88FD\u552F\u8B80\u9023\u7D50";
var xH = "\u5EFA\u7ACB\u591A\u4EBA\u5C08\u6848";
var IH = "\u8907\u88FD\u81F3\u591A\u4EBA\u5C08\u6848";
var CH = "\u9078\u53D6";
var vH = "\u6A61\u76AE\u64E6";
var kH = "\u624B\u7E6A";
var DH = "\u7BAD\u982D";
var PH = "\u6587\u5B57";
var BH = "\u4FBF\u5229\u8CBC";
var MH = "\u9577\u65B9\u5F62";
var EH = "\u6A62\u5713\u5F62";
var RH = "\u4E09\u89D2\u5F62";
var LH = "\u76F4\u7DDA";
var AH = "\u65CB\u8F49";
var HH = "\u9396\u5B9A\u9577\u5BEC\u6BD4";
var zH = "\u89E3\u9396\u9577\u5BEC\u6BD4";
var OH = "\u7D44\u6210\u7FA4\u7D44";
var FH = "\u53D6\u6D88\u7FA4\u7D44";
var jH = "\u79FB\u5230\u6700\u4E0B\u5C64";
var UH = "\u4E0B\u79FB\u4E00\u5C64";
var GH = "\u4E0A\u79FB\u4E00\u5C64";
var VH = "\u79FB\u5230\u6700\u4E0A\u5C64";
var $H = "\u91CD\u8A2D\u89D2\u5EA6";
var NH = "\u9396\u5B9A";
var KH = "\u89E3\u9396";
var WH = "\u79FB\u81F3\u9801\u9762";
var _H = "\u6C34\u5E73\u7FFB\u8F49";
var YH = "\u5782\u76F4\u7FFB\u8F49";
var ZH = "\u79FB\u52D5";
var XH = "\u5230\u6700\u4E0A\u5C64";
var qH = "\u5230\u4E0A\u4E00\u5C64";
var JH = "\u5230\u4E0B\u4E00\u5C64";
var QH = "\u5230\u6700\u4E0B\u5C64";
var ez = "\u8A9E\u8A00";
var tz = "\u4E86\u89E3\u8A73\u60C5";
var nz = "\u5DE5\u5177\u5217\u4F4D\u7F6E";
var oz = "\u4E0B\u65B9";
var sz = "\u5DE6\u5074";
var iz = "\u53F3\u5074";
var rz = "\u4E0A\u65B9";
var az = "\u9801\u9762";
var nl = {"style.menu.color": y7, "style.menu.fill": w7, "style.menu.dash": x72, "style.menu.size": I7, "style.menu.keep.open": C7, "style.menu.font": v7, "style.menu.align": k7, styles: D7, "zoom.in": P7, "zoom.out": B7, to: M7, "to.selection": E7, "to.fit": R7, "menu.file": L7, "menu.edit": A7, "menu.view": H7, "menu.preferences": z7, "menu.sign.in": O7, "menu.sign.out": F7, sponsored: j7, "become.a.sponsor": U7, "zoom.to.selection": G7, "zoom.to.fit": V7, "zoom.to": $7, "preferences.dark.mode": N7, "preferences.focus.mode": K7, "preferences.debug.mode": W7, "preferences.show.grid": _72, "preferences.use.cad.selection": Y7, "preferences.keep.stylemenu.open": Z7, "preferences.always.show.snaps": X7, "preferences.rotate.handles": q7, "preferences.binding.handles": J7, "preferences.clone.handles": Q7, undo: eH, redo: tH, cut: nH, copy: oH, paste: sH, "copy.as": iH, "export.as": rH, "select.all": aH, "select.none": dH, delete: lH, "new.project": cH, open: pH, save: uH, "save.as": hH, "upload.media": mH, "create.page": gH, "new.page": fH, "page.name": SH, duplicate: TH, cancel: bH, "copy.invite.link": yH, "copy.readonly.link": wH, "create.multiplayer.project": xH, "copy.multiplayer.project": IH, select: CH, eraser: vH, draw: kH, arrow: DH, text: PH, sticky: BH, Rectangle: MH, Ellipse: EH, Triangle: RH, Line: LH, rotate: AH, "lock.aspect.ratio": HH, "unlock.aspect.ratio": zH, group: OH, ungroup: FH, "move.to.back": jH, "move.backward": UH, "move.forward": GH, "move.to.front": VH, "reset.angle": $H, lock: NH, unlock: KH, "move.to.page": WH, "flip.horizontal": _H, "flip.vertical": YH, move: ZH, "to.front": XH, forward: qH, backward: JH, back: QH, language: ez, "translation.link": tz, "dock.position": nz, bottom: oz, left: sz, right: iz, top: rz, page: az};
var xs = [{locale: "ar", label: "\u0639\u0631\u0628\u064A", messages: zd}, {locale: "da", label: "Danish", messages: Od}, {locale: "de", label: "Deutsch", messages: Fd}, {locale: "en", label: "English", messages: jd}, {locale: "es", label: "Espa\xF1ol", messages: Ud}, {locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC", messages: Gd}, {locale: "fr", label: "Fran\xE7ais", messages: Vd}, {locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA", messages: $d}, {locale: "it", label: "Italiano", messages: Nd}, {locale: "ja", label: "\u65E5\u672C\u8A9E", messages: Kd}, {locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4", messages: Wd}, {locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940", messages: Yd}, {locale: "no", label: "Norwegian", messages: Zd}, {locale: "pl", label: "Polski", messages: Xd}, {locale: "pt-br", label: "Portugu\xEAs - Brasil", messages: qd}, {locale: "ru", label: "Russian", messages: Jd}, {locale: "tr", label: "T\xFCrk\xE7e", messages: Qd}, {locale: "uk", label: "Ukrainian", messages: el}, {locale: "zh-ch", label: "Chinese - Simplified", messages: tl}, {locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)", messages: nl}];
xs.sort((s10, e14) => s10.locale < e14.locale ? -1 : 1);
function ol(s10) {
  var t13;
  let e14 = xs.find((n10) => n10.locale === s10);
  return {locale: s10, label: (t13 = e14 == null ? void 0 : e14.label) != null ? t13 : s10, messages: f8(f8({}, _d), e14 == null ? void 0 : e14.messages)};
}
function il(s10) {
  return sl.useMemo(() => ol(s10 != null ? s10 : navigator.language.split(/[-_]/)[0]), [s10]);
}
var Xe = {"@initial": "mobile", "@micro": "micro", "@sm": "small", "@md": "medium", "@lg": "large"};
var dz = (s10) => s10.appState.status;
var lz = (s10) => s10.appState.activeTool;
function rl() {
  let s10 = ae(), e14 = s10.useStore(dz), t13 = s10.useStore(lz);
  return Gi.createElement(cz, {bp: Xe, id: "TD-StatusBar"}, Gi.createElement(pz, null, t13, " | ", e14));
}
var cz = M3("div", {height: 40, userSelect: "none", borderTop: "1px solid $panelContrast", gridArea: "status", display: "flex", color: "$text", justifyContent: "space-between", alignItems: "center", backgroundColor: "$panel", gap: 8, fontFamily: "$ui", fontSize: "$0", padding: "0 16px", variants: {bp: {small: {fontSize: "$1"}}}});
var pz = M3("div", {whiteSpace: "nowrap", overflow: "hidden"});
var hz = () => Utils.isDarwin() ? "\u2318" : "Ctrl";
function uo({variant: s10, children: e14}) {
  return Vi.createElement(mz, {variant: s10}, e14.split("").map((t13, n10) => Vi.createElement("span", {key: n10}, t13.replace("#", hz()))));
}
var mz = M3("kbd", {marginLeft: "$3", textShadow: "$2", textAlign: "center", fontSize: "$0", fontFamily: "$ui", color: "$text", background: "none", fontWeight: 400, gap: "$1", display: "flex", alignItems: "center", "& > span": {padding: "$0", borderRadius: "$0", display: "flex", alignItems: "center", justifyContent: "center"}, variants: {variant: {tooltip: {"& > span": {color: "$tooltipContrast", background: "$overlayContrast", boxShadow: "$key", width: "20px", height: "20px"}}, menu: {}}}});
var qe = M3("div", {height: "100%", borderRadius: "4px", marginRight: "1px", width: "fit-content", display: "grid", alignItems: "center", justifyContent: "center", outline: "none", border: "none", pointerEvents: "all", cursor: "pointer", color: "currentColor", "& svg": {height: 16, width: 16, strokeWidth: 1}, "& > *": {gridRow: 1, gridColumn: 1}});
var Be = Vt.forwardRef((u10, p10) => {
  var h10 = u10, {onClick: s10, isActive: e14 = false, isWarning: t13 = false, hasIndicator: n10 = false, hasArrow: o13 = false, disabled: i10 = false, variant: a10, kbd: l10, children: r12} = h10, c10 = _e(h10, ["onClick", "isActive", "isWarning", "hasIndicator", "hasArrow", "disabled", "variant", "kbd", "children"]);
  return Vt.createElement(Tz, f8({ref: p10, bp: Xe, isWarning: t13, isActive: e14, disabled: i10, onClick: s10, variant: a10}, c10), Vt.createElement(Is, null, r12, l10 ? Vt.createElement(uo, {variant: "menu"}, l10) : void 0, n10 && Vt.createElement(ItemIndicator2, {dir: "ltr"}, Vt.createElement(qe, null, Vt.createElement(CheckIcon, null))), o13 && Vt.createElement(qe, null, Vt.createElement(ChevronRightIcon, null))));
});
var Is = M3("div", {height: "100%", width: "100%", backgroundColor: "$panel", borderRadius: "$2", display: "flex", gap: "$1", flexDirection: "row", alignItems: "center", padding: "0 $3", justifyContent: "space-between", border: "1px solid transparent", "& svg": {position: "relative", stroke: "$overlay", strokeWidth: 1, zIndex: 1}, [`& > ${qe}`]: {paddingLeft: "$3"}});
var Tz = M3("button", {position: "relative", width: "100%", background: "none", border: "none", cursor: "pointer", height: 32, minHeight: 32, outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", borderRadius: 4, userSelect: "none", margin: 0, padding: "0 0", "&[data-disabled]": {opacity: 0.3}, "&:disabled": {opacity: 0.3}, [`&:focus:not(:disabled) ${Is}`]: {backgroundColor: "$hover"}, "& a": {textDecoration: "none", color: "$text"}, variants: {bp: {mobile: {}, small: {}}, variant: {styleMenu: {margin: "$1 0 $1 0"}, wide: {gridColumn: "1 / span 4"}}, size: {icon: {padding: "4px ", width: "auto"}}, isSponsor: {true: {color: "#eb30a2"}, false: {}}, isWarning: {true: {color: "$warn"}}, isActive: {true: {backgroundColor: "$hover"}, false: {}}}, compoundVariants: [{isActive: false, isSponsor: true, bp: "small", css: {[`&:hover:not(:disabled) ${Is}`]: {backgroundColor: "$sponsorContrast", border: "1px solid $panel", '& *[data-shy="true"]': {opacity: 1}}}}, {isActive: false, isSponsor: false, bp: "small", css: {[`&:hover:not(:disabled) ${Is}`]: {backgroundColor: "$hover", border: "1px solid $panel", '& *[data-shy="true"]': {opacity: 1}}}}]});
var Bt = M3("div", {position: "relative", overflow: "hidden", userSelect: "none", display: "flex", flexDirection: "column", zIndex: 180, minWidth: 180, pointerEvents: "all", backgroundColor: "$panel", boxShadow: "$panel", padding: "$2 $2", borderRadius: "$3", font: "$ui", maxHeight: "100vh", overflowY: "auto", overflowX: "hidden", "&::webkit-scrollbar": {display: "none"}, "-ms-overflow-style": "none", scrollbarWidth: "none", variants: {size: {small: {minWidth: 72}}, overflow: {true: {maxHeight: "60vh"}}}});
var yz = (s10) => s10.appState.isEmptyCanvas && Object.keys(s10.document.pages[s10.appState.currentPageId].shapes).length > 0;
var wz = (s10) => s10.settings.isDebugMode;
var xz = (s10) => s10.settings.dockPosition;
var al = ho.memo(function() {
  let e14 = ae(), t13 = e14.useStore(yz), n10 = e14.useStore(xz), o13 = e14.useStore(wz), i10 = {bottom: n10 === "bottom" && o13 ? 120 : n10 === "bottom" ? 80 : o13 ? 60 : 20, left: "50%", transform: "translate(-50%,0)"};
  return t13 ? ho.createElement(Iz, {id: "TD-Tools-Back_to_content", style: f8({}, i10)}, ho.createElement(Be, {onClick: e14.zoomToContent}, ho.createElement(message_default, {id: "zoom.to.content"}))) : null;
});
var Iz = M3(Bt, {pointerEvents: "all", width: "fit-content", minWidth: 0, position: "fixed", bottom: 0});
function ct({children: s10, label: e14, kbd: t13, id: n10, side: o13 = "top"}) {
  return Rn.createElement("span", {id: n10}, Rn.createElement(Root7, null, Rn.createElement(Trigger2, {dir: "ltr", asChild: true}, Rn.createElement("span", null, s10)), Rn.createElement(Cz, {dir: "ltr", side: o13, sideOffset: 8}, e14, t13 ? Rn.createElement(uo, {variant: "tooltip"}, t13) : null, Rn.createElement(vz, null))));
}
var Cz = M3(Content4, {borderRadius: 3, padding: "$3 $3 $3 $3", fontSize: "$1", backgroundColor: "$tooltip", color: "$tooltipContrast", boxShadow: "$3", display: "flex", alignItems: "center", fontFamily: "$ui", userSelect: "none"});
var vz = M3(Arrow5, {fill: "$tooltip", margin: "0 8px"});
var pe2 = $t.forwardRef((g10, h10) => {
  var m10 = g10, {onSelect: s10, onClick: e14, onDoubleClick: t13, variant: n10, children: o13, isToolLocked: i10 = false, disabled: a10 = false, isActive: l10 = false, isSponsor: r12 = false, onKeyDown: c10, id: p10} = m10, u10 = _e(m10, ["onSelect", "onClick", "onDoubleClick", "variant", "children", "isToolLocked", "disabled", "isActive", "isSponsor", "onKeyDown", "id"]);
  return $t.createElement(kz, f8({ref: h10, isActive: l10, isSponsor: r12, variant: n10, onClick: e14, disabled: a10, onPointerDown: s10, onDoubleClick: t13, onKeyDown: c10, bp: Xe, id: p10}, u10), $t.createElement(Ht, null, o13), i10 && $t.createElement(Dz, null));
});
function An(o13) {
  var i10 = o13, {label: s10, kbd: e14, isLocked: t13} = i10, n10 = _e(i10, ["label", "kbd", "isLocked"]);
  let a10 = ae(), l10 = $t.useCallback(() => {
    a10.toggleToolLock();
  }, []), r12 = $t.useCallback((c10) => {
    c10.key === " " && a10.isForcePanning && c10.preventDefault();
  }, []);
  return $t.createElement(ct, {label: s10[0].toUpperCase() + s10.slice(1), kbd: e14}, $t.createElement(pe2, C5(f8({}, n10), {variant: "primary", isToolLocked: t13 && n10.isActive, onDoubleClick: l10, onKeyDown: r12})));
}
var Ht = M3("div", {position: "relative", height: "100%", width: "100%", backgroundColor: "$panel", borderRadius: "$2", margin: "0", display: "flex", alignItems: "center", justifyContent: "center", fontFamily: "$ui", color: "inherit", userSelect: "none", boxSizing: "border-box", border: "1px solid transparent"});
var kz = M3("button", {position: "relative", color: "$text", fontSize: "$0", background: "none", margin: "0", padding: "$2", display: "flex", alignItems: "center", justifyContent: "center", outline: "none", cursor: "pointer", pointerEvents: "all", border: "none", height: "40px", width: "40px", [`&:disabled ${Ht}`]: {opacity: 0.618}, variants: {variant: {primary: {marginTop: "0"}, icon: {[`& ${Ht}`]: {display: "grid", "& > *": {gridRow: 1, gridColumn: 1}}}, text: {width: "auto", [`& ${Ht}`]: {fontSize: "$1", padding: "0 $3", gap: "$3"}}, circle: {padding: 0, height: 32, width: 32, [`& ${Ht}`]: {border: "1px solid $panelContrast", borderRadius: "100%", boxShadow: "$panel"}, [`& ${Ht} > svg`]: {width: 14, height: 14}}}, isSponsor: {true: {[`${Ht}`]: {backgroundColor: "$sponsorContrast"}}}, isActive: {true: {}, false: {}}, bp: {mobile: {}, small: {}}}, compoundVariants: [{variant: "primary", bp: "mobile", css: {height: "40px", width: "40px", [`& ${Ht} > svg`]: {width: 16, height: 16}}}, {variant: "primary", bp: "small", css: {height: "44px", width: "44px", [`& ${Ht} > svg`]: {width: 20, height: 20}}}, {isActive: true, css: {[`${Ht}`]: {backgroundColor: "$selected", color: "$selectedContrast"}}}, {isActive: false, bp: "small", css: {[`&:hover:not(:disabled) ${Ht}`]: {backgroundColor: "$hover", border: "1px solid $panel"}, [`&:focus:not(:disabled) ${Ht}`]: {backgroundColor: "$hover"}}}]});
var Dz = M3("div", {position: "absolute", width: 10, height: 10, backgroundColor: "$selected", borderRadius: "100%", bottom: -2, border: "2px solid $panel", zIndex: 100});
var Zn = M3("div", {backgroundColor: "$panel", display: "flex", flexDirection: "row", boxShadow: "$panel", padding: "$2", border: "1px solid $panelContrast", gap: 0, variants: {side: {center: {borderRadius: "$4"}, left: {padding: 0, borderTop: 0, borderLeft: 0, borderTopRightRadius: "$1", borderBottomRightRadius: "$3", borderBottomLeftRadius: "$1"}, right: {padding: 0, borderTop: 0, borderRight: 0, borderTopLeftRadius: "$1", borderBottomLeftRadius: "$3", borderBottomRightRadius: "$1"}}}});
function Ni(s10) {
  let n10 = s10, {size: e14 = 16} = n10, t13 = _e(n10, ["size"]);
  return $i.createElement("svg", f8({width: 24, height: 24}, t13), $i.createElement("circle", {cx: 12, cy: 12, r: e14 / 2}));
}
function dl() {
  return Ki.createElement("svg", {width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, Ki.createElement("circle", {cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2.5, strokeLinecap: "round", strokeDasharray: 50.26548 * 0.1}));
}
var Bz = `${50.26548 * 0.025} ${50.26548 * 0.1}`;
function ll() {
  return Wi.createElement("svg", {width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, Wi.createElement("circle", {cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2.5, strokeLinecap: "round", strokeDasharray: Bz}));
}
function cl() {
  return _i.createElement("svg", {width: "24", height: "24", viewBox: "1 1.5 21 22", fill: "currentColor", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, _i.createElement("path", {d: "M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z", strokeWidth: "2"}));
}
function pl() {
  return Yi.createElement("svg", {width: "24", height: "24", stroke: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, Yi.createElement("circle", {cx: 12, cy: 12, r: 8, fill: "none", strokeWidth: 2, strokeLinecap: "round"}));
}
function ul(s10) {
  return Zi.createElement("svg", f8({width: 32, height: 32, viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), Zi.createElement("path", {d: "M4.32978 8.5081C4.32978 10.1923 5.70009 11.5625 7.38418 11.5625H8.46539C8.64456 11.5625 8.78975 11.4173 8.78975 11.2382V11.13C8.78975 10.9508 8.64457 10.8057 8.46539 10.8057H7.38418C6.11736 10.8057 5.08662 9.77492 5.08662 8.5081C5.08662 7.24128 6.11736 6.21054 7.38418 6.21054H9.37894L8.00515 7.58433C7.8576 7.73183 7.8576 7.97195 8.00515 8.11944C8.14833 8.26251 8.39751 8.2623 8.54036 8.11944L10.56 6.09971C10.6315 6.02824 10.6709 5.93321 10.6709 5.8321C10.6709 5.73106 10.6315 5.63598 10.56 5.56454L8.54025 3.54472C8.3974 3.40176 8.14801 3.40176 8.00513 3.54472C7.85758 3.69218 7.85758 3.93234 8.00513 4.07979L9.37892 5.45368H7.38418C5.70009 5.45368 4.32978 6.82393 4.32978 8.5081Z"}));
}
function hl(s10) {
  return $o.createElement("svg", f8({width: 18, height: 18, viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), $o.createElement("path", {fillRule: "evenodd", clipRule: "evenodd", d: "M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z"}), $o.createElement("path", {fillRule: "evenodd", clipRule: "evenodd", d: "M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z"}), $o.createElement("path", {fillRule: "evenodd", clipRule: "evenodd", d: "M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z"}));
}
function ml(s10) {
  return Xi.createElement("svg", f8({width: 32, height: 32, viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), Xi.createElement("path", {d: "M10.6707 8.5081C10.6707 10.1923 9.3004 11.5625 7.61631 11.5625H6.5351C6.35593 11.5625 6.21074 11.4173 6.21074 11.2382V11.13C6.21074 10.9508 6.35591 10.8057 6.5351 10.8057H7.61631C8.88313 10.8057 9.91387 9.77492 9.91387 8.5081C9.91387 7.24128 8.88313 6.21054 7.61631 6.21054H5.62155L6.99534 7.58433C7.14289 7.73183 7.14289 7.97195 6.99534 8.11944C6.85216 8.26251 6.60298 8.2623 6.46013 8.11944L4.44045 6.09971C4.36898 6.02824 4.32959 5.93321 4.32959 5.8321C4.32959 5.73106 4.36898 5.63598 4.44045 5.56454L6.46024 3.54472C6.60309 3.40176 6.85248 3.40176 6.99535 3.54472C7.14291 3.69218 7.14291 3.93234 6.99535 4.07979L5.62156 5.45368H7.61631C9.3004 5.45368 10.6707 6.82393 10.6707 8.5081Z"}));
}
function gl(s10) {
  return qi.createElement("svg", f8({width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), qi.createElement("path", {d: "M12.4239 4.62C13.3572 4.62 14.1572 4.73333 14.8239 4.96C15.4906 5.17333 15.9772 5.43333 16.2839 5.74C16.3639 5.82 16.4039 5.94 16.4039 6.1V8.86H14.0639C13.9172 8.86 13.8439 8.78666 13.8439 8.64V7.26C13.4306 7.12666 12.9572 7.06 12.4239 7.06C11.6506 7.06 11.0639 7.18 10.6639 7.42C10.2639 7.66 10.0639 8.04666 10.0639 8.58V9C10.0639 9.38666 10.1639 9.69333 10.3639 9.92C10.5772 10.1333 11.0306 10.3467 11.7239 10.56L13.6439 11.14C14.4706 11.38 15.1172 11.66 15.5839 11.98C16.0506 12.3 16.3772 12.68 16.5639 13.12C16.7639 13.5467 16.8639 14.0733 16.8639 14.7V15.62C16.8639 16.7933 16.4039 17.7133 15.4839 18.38C14.5639 19.0467 13.2839 19.38 11.6439 19.38C10.6706 19.38 9.79723 19.2867 9.0239 19.1C8.2639 18.9133 7.71056 18.6533 7.3639 18.32C7.3239 18.28 7.29056 18.24 7.2639 18.2C7.25056 18.1467 7.2439 18.06 7.2439 17.94V15.74H7.6239C8.2239 16.1533 8.85056 16.4533 9.5039 16.64C10.1572 16.8267 10.9306 16.92 11.8239 16.92C12.6506 16.92 13.2506 16.7867 13.6239 16.52C14.0106 16.2533 14.2039 15.9333 14.2039 15.56V14.88C14.2039 14.6667 14.1639 14.48 14.0839 14.32C14.0172 14.16 13.8706 14.0133 13.6439 13.88C13.4172 13.7467 13.0572 13.6067 12.5639 13.46L10.6639 12.88C9.7839 12.6133 9.11056 12.3 8.6439 11.94C8.17723 11.58 7.85056 11.18 7.6639 10.74C7.49056 10.3 7.4039 9.83333 7.4039 9.34V8.38C7.4039 7.64666 7.61056 7 8.0239 6.44C8.43723 5.88 9.01723 5.44 9.7639 5.12C10.5239 4.78666 11.4106 4.62 12.4239 4.62Z"}));
}
function fl(s10) {
  return Ji.createElement("svg", f8({width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), Ji.createElement("path", {d: "M8.16191 19H5.68191C5.53525 19 5.46191 18.9267 5.46191 18.78V5H8.76191C8.88191 5 8.97525 5.03333 9.04191 5.1C9.10858 5.15333 9.17525 5.27333 9.24191 5.46C9.72191 6.59333 10.1686 7.7 10.5819 8.78C11.0086 9.84667 11.4352 10.98 11.8619 12.18H12.1619C12.6019 10.9667 13.0352 9.79333 13.4619 8.66C13.8886 7.52667 14.3552 6.30667 14.8619 5H18.3219C18.4686 5 18.5419 5.07333 18.5419 5.22V19H16.0619C15.9152 19 15.8419 18.9267 15.8419 18.78V16.26C15.8419 15.5267 15.8486 14.8133 15.8619 14.12C15.8886 13.4267 15.9286 12.6867 15.9819 11.9C16.0486 11.1 16.1419 10.1933 16.2619 9.18H15.9019C15.4352 10.3533 14.9486 11.5667 14.4419 12.82C13.9486 14.06 13.4819 15.2333 13.0419 16.34H11.1019C11.0619 16.34 11.0152 16.3333 10.9619 16.32C10.9219 16.2933 10.8886 16.2467 10.8619 16.18C10.4619 15.18 10.0086 14.06 9.50191 12.82C9.00858 11.58 8.53525 10.3667 8.08191 9.18H7.70191C7.83525 10.18 7.93525 11.0733 8.00191 11.86C8.06858 12.6467 8.10858 13.3933 8.12191 14.1C8.14858 14.8067 8.16191 15.5267 8.16191 16.26V19Z"}));
}
function Sl(s10) {
  return Qi.createElement("svg", f8({width: 24, height: 24, viewBox: "-2 -2 28 28", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, s10), Qi.createElement("path", {d: "M7.68191 19C7.53525 19 7.46191 18.9267 7.46191 18.78V5H10.1219C10.2686 5 10.3419 5.07333 10.3419 5.22V16.56H13.4419V15.02H15.7619C15.9086 15.02 15.9819 15.0933 15.9819 15.24V19H7.68191Z"}));
}
function Tl() {
  return No.createElement("svg", {width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg"}, No.createElement("path", {d: "M1.72838 9.33987L8.84935 2.34732C9.23874 1.96494 9.86279 1.96539 10.2516 2.34831L13.5636 5.60975C13.9655 6.00555 13.9607 6.65526 13.553 7.04507L8.13212 12.2278C7.94604 12.4057 7.69851 12.505 7.44107 12.505L6.06722 12.505L3.83772 12.505C3.5673 12.505 3.30842 12.3954 3.12009 12.2014L1.7114 10.7498C1.32837 10.3551 1.33596 9.72521 1.72838 9.33987Z", stroke: "currentColor"}), No.createElement("line", {x1: "6.01807", y1: "12.5", x2: "10.7959", y2: "12.5", stroke: "currentColor", strokeLinecap: "round"}), No.createElement("line", {x1: "5.50834", y1: "5.74606", x2: "10.1984", y2: "10.4361", stroke: "currentColor"}));
}
function bl() {
  return er.createElement("svg", {width: "15", height: "15", viewBox: "0 0 15 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg"}, er.createElement("path", {d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L11.1464 3.14645C11.3417 2.95118 11.6583 2.95118 11.8536 3.14645C12.0488 3.34171 12.0488 3.65829 11.8536 3.85355L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z"}));
}
function yl() {
  return tr.createElement("svg", {xmlns: "http://www.w3.org/2000/svg", width: 24, height: 24, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "2"}, tr.createElement("path", {strokeLinecap: "round", strokeLinejoin: "round", d: "M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"}));
}
var nr = ["rectangle", "ellipse", "triangle", "line"];
var wl = {["rectangle"]: ze.createElement(SquareIcon, null), ["ellipse"]: ze.createElement(CircleIcon, null), ["triangle"]: ze.createElement(VercelLogoIcon, null), ["line"]: ze.createElement(bl, null)};
var Fz = (s10) => s10.settings.dockPosition;
var xl = ze.memo(function({activeTool: e14, isToolLocked: t13}) {
  let n10 = ae(), o13 = useIntl(), i10 = n10.useStore(Fz), [a10, l10] = ze.useState("rectangle");
  ze.useEffect(() => {
    nr.includes(e14) && a10 !== e14 && l10(e14);
  }, [e14]);
  let r12 = ze.useCallback(() => {
    n10.selectTool(a10);
  }, [e14, n10]), c10 = ze.useCallback(() => {
    n10.toggleToolLock();
  }, [n10]), p10 = ze.useCallback((m10) => {
    m10.key === " " && n10.shiftKey && m10.preventDefault();
  }, []), u10 = nr.includes(e14), h10 = i10 === "bottom" || i10 === "top" ? "top" : i10, g10 = i10 === "bottom" || i10 === "top" ? "row" : "column";
  return ze.createElement(Root5, {dir: "ltr", onOpenChange: r12}, ze.createElement(Trigger, {dir: "ltr", asChild: true, id: "TD-PrimaryTools-Shapes"}, ze.createElement(pe2, {disabled: u10 && n10.shiftKey, variant: "primary", onDoubleClick: c10, isToolLocked: u10 && t13, isActive: u10, onKeyDown: p10}, wl[a10])), ze.createElement(Content3, {asChild: true, dir: "ltr", side: h10, sideOffset: 12}, ze.createElement(Zn, {side: "center", style: {flexDirection: g10}}, nr.map((m10, T10) => ze.createElement(ct, {key: m10, label: o13.formatMessage({id: m10}), kbd: (4 + T10).toString(), id: `TD-PrimaryTools-Shapes-${m10}`}, ze.createElement(Item3, {asChild: true}, ze.createElement(pe2, {variant: "primary", onClick: () => {
    n10.selectTool(m10), l10(m10);
  }}, wl[m10])))))));
});
var Kz = (s10) => s10.appState.activeTool;
var Wz = (s10) => s10.appState.isToolLocked;
var _z = (s10) => s10.settings.dockPosition;
var Il = Ce.memo(function() {
  let e14 = ae(), t13 = useIntl(), n10 = e14.useStore(Kz), o13 = e14.useStore(Wz), i10 = e14.useStore(_z), a10 = Ce.useCallback(() => {
    e14.selectTool("select");
  }, [e14]), l10 = Ce.useCallback(() => {
    e14.selectTool("erase");
  }, [e14]), r12 = Ce.useCallback(() => {
    e14.selectTool("draw");
  }, [e14]), c10 = Ce.useCallback(() => {
    e14.selectTool("arrow");
  }, [e14]), p10 = Ce.useCallback(() => {
    e14.selectTool("text");
  }, [e14]), u10 = Ce.useCallback(() => {
    e14.selectTool("sticky");
  }, [e14]), h10 = Ce.useCallback(() => ee(this, null, function* () {
    e14.openAsset();
  }), [e14]);
  return Ce.createElement(Zn, {side: "center", id: "TD-PrimaryTools", style: {flexDirection: i10 === "bottom" || i10 === "top" ? "row" : "column"}}, Ce.createElement(An, {kbd: "1", label: t13.formatMessage({id: "select"}), onClick: a10, isActive: n10 === "select", id: "TD-PrimaryTools-CursorArrow"}, Ce.createElement(CursorArrowIcon, null)), Ce.createElement(An, {kbd: "2", label: t13.formatMessage({id: "draw"}), onClick: r12, isActive: n10 === "draw", id: "TD-PrimaryTools-Pencil"}, Ce.createElement(Pencil1Icon, null)), Ce.createElement(An, {kbd: "3", label: t13.formatMessage({id: "eraser"}), onClick: l10, isActive: n10 === "erase", id: "TD-PrimaryTools-Eraser"}, Ce.createElement(Tl, null)), Ce.createElement(xl, {activeTool: n10, isToolLocked: o13}), Ce.createElement(An, {kbd: "8", label: t13.formatMessage({id: "arrow"}), onClick: c10, isLocked: o13, isActive: n10 === "arrow", id: "TD-PrimaryTools-ArrowTopRight"}, Ce.createElement(ArrowTopRightIcon, null)), Ce.createElement(An, {kbd: "9", label: t13.formatMessage({id: "text"}), onClick: p10, isLocked: o13, isActive: n10 === "text", id: "TD-PrimaryTools-Text"}, Ce.createElement(TextIcon, null)), Ce.createElement(An, {kbd: "0", label: t13.formatMessage({id: "sticky"}), onClick: u10, isActive: n10 === "sticky", id: "TD-PrimaryTools-Pencil2"}, Ce.createElement(Pencil2Icon, null)), Ce.createElement(An, {label: "Image", onClick: h10, id: "TD-PrimaryTools-Image"}, Ce.createElement(yl, null)));
});
function ue2(n10) {
  var o13 = n10, {onSelect: s10, id: e14} = o13, t13 = _e(o13, ["onSelect", "id"]);
  return or.createElement(Item3, {dir: "ltr", asChild: true, onSelect: s10, id: e14}, or.createElement(Be, f8({}, t13)));
}
var ve = (s10) => s10.preventDefault();
function pt({checked: s10, disabled: e14 = false, variant: t13, onCheckedChange: n10, kbd: o13, id: i10, children: a10}) {
  return sr.createElement(CheckboxItem2, {dir: "ltr", onSelect: ve, onCheckedChange: n10, checked: s10, disabled: e14, asChild: true, id: i10}, sr.createElement(Be, {kbd: o13, variant: t13, hasIndicator: true}, a10));
}
function xt({sideOffset: s10 = 8, children: e14, align: t13, variant: n10, id: o13, overflow: i10 = false, side: a10 = "bottom"}) {
  return ir.createElement(Content3, {dir: "ltr", align: t13, sideOffset: s10, onEscapeKeyDown: rt, asChild: true, id: o13, side: a10}, ir.createElement(Xz, {variant: n10, overflow: i10}, e14));
}
var Xz = M3(Bt, {width: "fit-content", height: "fit-content", minWidth: 0, maxHeight: "100vh", overflowY: "auto", overflowX: "hidden", "&::webkit-scrollbar": {display: "none"}, "-ms-overflow-style": "none", scrollbarWidth: "none", variants: {variant: {horizontal: {flexDirection: "row"}, menu: {minWidth: 128}}, overflow: {true: {maxHeight: "60vh"}}}});
var Je = M3(Separator2, {backgroundColor: "$hover", height: 1, marginTop: "$2", marginRight: "-$2", marginBottom: "$2", marginLeft: "-$2"});
var Ko = M3(RadioItem2, {height: "32px", width: "32px", backgroundColor: "$panel", borderRadius: "4px", padding: "0", margin: "0", display: "flex", alignItems: "center", justifyContent: "center", outline: "none", border: "none", pointerEvents: "all", cursor: "pointer", variants: {isActive: {true: {backgroundColor: "$selected", color: "$panel"}, false: {}}, bp: {mobile: {}, small: {}}}, compoundVariants: [{isActive: false, bp: "small", css: {"&:focus": {backgroundColor: "$hover"}, "&:hover:not(:disabled)": {backgroundColor: "$hover"}}}]});
function Tn({children: s10, size: e14, overflow: t13 = false, disabled: n10 = false, label: o13, id: i10}) {
  return zn.createElement("span", {id: i10}, zn.createElement(Root5, {dir: "ltr"}, zn.createElement(TriggerItem, {dir: "ltr", asChild: true}, zn.createElement(Be, {disabled: n10, hasArrow: true}, o13)), zn.createElement(Content3, {dir: "ltr", asChild: true, sideOffset: 2, alignOffset: -2, align: "start"}, zn.createElement(Bt, {size: e14, overflow: t13}, s10, zn.createElement(Arrow4, {offset: 13})))));
}
function Cs(n10) {
  var o13 = n10, {id: s10, children: e14} = o13, t13 = _e(o13, ["id", "children"]);
  return rr.createElement(Trigger, {asChild: true, id: s10}, rr.createElement(pe2, f8({}, t13), e14));
}
var ut = M3("hr", {height: 1, marginTop: "$1", marginRight: "-$0", marginBottom: "$1", marginLeft: "-$0", border: "none", borderBottom: "1px solid $hover"});
var PO = (s10) => s10.settings.dockPosition;
var BO = (s10) => s10.document.pageStates[s10.appState.currentPageId].selectedIds.length;
var MO = (s10) => {
  let e14 = s10.document.pages[s10.appState.currentPageId], {selectedIds: t13} = s10.document.pageStates[s10.appState.currentPageId];
  return t13.every((n10) => e14.shapes[n10].isLocked);
};
var EO = (s10) => {
  let e14 = s10.document.pages[s10.appState.currentPageId], {selectedIds: t13} = s10.document.pageStates[s10.appState.currentPageId];
  return t13.every((n10) => e14.shapes[n10].isAspectRatioLocked);
};
var RO = (s10) => {
  let e14 = s10.document.pages[s10.appState.currentPageId], t13 = s10.document.pageStates[s10.appState.currentPageId].selectedIds.map((n10) => e14.shapes[n10]);
  return t13.every((n10) => n10.children !== void 0 || n10.parentId === t13[0].parentId && t13[0].parentId !== s10.appState.currentPageId);
};
var LO = (s10) => {
  let {selectedIds: e14} = s10.document.pageStates[s10.appState.currentPageId];
  return e14.length > 0;
};
var AO = (s10) => {
  let {selectedIds: e14} = s10.document.pageStates[s10.appState.currentPageId];
  return e14.length > 1;
};
function vl() {
  let s10 = ae(), e14 = useIntl(), t13 = s10.useStore(MO), n10 = s10.useStore(EO), o13 = s10.useStore(RO), i10 = s10.useStore(LO), a10 = s10.useStore(AO), l10 = s10.useStore(BO), r12 = s10.useStore(PO), c10 = l10 > 1, p10 = l10 > 2, u10 = J3.useCallback(() => {
    s10.rotate();
  }, [s10]), h10 = J3.useCallback(() => {
    s10.duplicate();
  }, [s10]), g10 = J3.useCallback(() => {
    s10.toggleLocked();
  }, [s10]), m10 = J3.useCallback(() => {
    s10.toggleAspectRatioLocked();
  }, [s10]), T10 = J3.useCallback(() => {
    s10.group();
  }, [s10]), y10 = J3.useCallback(() => {
    s10.moveToBack();
  }, [s10]), b10 = J3.useCallback(() => {
    s10.moveBackward();
  }, [s10]), S10 = J3.useCallback(() => {
    s10.moveForward();
  }, [s10]), w10 = J3.useCallback(() => {
    s10.moveToFront();
  }, [s10]), D10 = J3.useCallback(() => {
    s10.setShapeProps({rotation: 0});
  }, [s10]), B10 = J3.useCallback(() => {
    s10.align("top");
  }, [s10]), I10 = J3.useCallback(() => {
    s10.align("centerVertical");
  }, [s10]), P10 = J3.useCallback(() => {
    s10.align("bottom");
  }, [s10]), v10 = J3.useCallback(() => {
    s10.stretch("vertical");
  }, [s10]), Q = J3.useCallback(() => {
    s10.distribute("vertical");
  }, [s10]), oe2 = J3.useCallback(() => {
    s10.align("left");
  }, [s10]), te = J3.useCallback(() => {
    s10.align("centerHorizontal");
  }, [s10]), ke = J3.useCallback(() => {
    s10.align("right");
  }, [s10]), be2 = J3.useCallback(() => {
    s10.stretch("horizontal");
  }, [s10]), xe = J3.useCallback(() => {
    s10.distribute("horizontal");
  }, [s10]), Me = J3.useCallback((We) => {
    s10.setMenuOpen(We);
  }, [s10]);
  return J3.createElement(Root5, {dir: "ltr", onOpenChange: Me}, J3.createElement(Trigger, {dir: "ltr", asChild: true, id: "TD-Tools-Dots"}, J3.createElement(pe2, {variant: "circle"}, J3.createElement(DotsHorizontalIcon, null))), J3.createElement(xt, {sideOffset: 16, side: r12 === "bottom" || r12 === "top" ? "top" : r12}, J3.createElement(J3.Fragment, null, J3.createElement(vs, null, J3.createElement(pe2, {variant: "icon", disabled: !i10, onClick: h10}, J3.createElement(ct, {label: e14.formatMessage({id: "duplicate"}), kbd: "#D", id: "TD-Tools-Copy"}, J3.createElement(CopyIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: u10}, J3.createElement(ct, {label: e14.formatMessage({id: "rotate"}), id: "TD-Tools-Rotate"}, J3.createElement(RotateCounterClockwiseIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: g10}, J3.createElement(ct, {label: e14.formatMessage({id: t13 ? "unlock" : "lock"}), kbd: "#L", id: "TD-Tools-Lock"}, t13 ? J3.createElement(LockClosedIcon, null) : J3.createElement(LockOpen1Icon, null))), J3.createElement(pe2, {disabled: !i10, onClick: m10}, J3.createElement(ct, {label: e14.formatMessage({id: n10 ? "unlock.aspect.ratio" : "lock.aspect.ratio"}), id: "TD-Tools-AspectRatio"}, n10 ? J3.createElement(AspectRatioIcon, null) : J3.createElement(BoxIcon, null))), J3.createElement(pe2, {disabled: !i10 || !o13 && !a10, onClick: T10}, J3.createElement(ct, {label: e14.formatMessage({id: "group"}), kbd: "#G", id: "TD-Tools-Group"}, J3.createElement(GroupIcon, null)))), J3.createElement(vs, null, J3.createElement(pe2, {disabled: !i10, onClick: y10}, J3.createElement(ct, {label: e14.formatMessage({id: "move.to.back"}), kbd: "#\u21E7[", id: "TD-Tools-PinBottom"}, J3.createElement(PinBottomIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: b10}, J3.createElement(ct, {label: e14.formatMessage({id: "move.backward"}), kbd: "#[", id: "TD-Tools-ArrowDown"}, J3.createElement(ArrowDownIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: S10}, J3.createElement(ct, {label: e14.formatMessage({id: "move.forward"}), kbd: "#]", id: "TD-Tools-ArrowUp"}, J3.createElement(ArrowUpIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: w10}, J3.createElement(ct, {label: e14.formatMessage({id: "move.to.front"}), kbd: "#\u21E7]", id: "TD-Tools-PinTop"}, J3.createElement(PinTopIcon, null))), J3.createElement(pe2, {disabled: !i10, onClick: D10}, J3.createElement(ct, {label: e14.formatMessage({id: "reset.angle"}), id: "TD-Tools-ResetAngle"}, J3.createElement(AngleIcon, null)))), J3.createElement(ut, null), J3.createElement(vs, null, J3.createElement(pe2, {disabled: !c10, onClick: oe2, id: "TD-Tools-AlignLeft"}, J3.createElement(AlignLeftIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: te, id: "TD-Tools-AlignCenterHorizontal"}, J3.createElement(AlignCenterHorizontallyIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: ke, id: "TD-Tools-AlignRight"}, J3.createElement(AlignRightIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: be2, id: "TD-Tools-StretchHorizontal"}, J3.createElement(StretchHorizontallyIcon, null)), J3.createElement(pe2, {disabled: !p10, onClick: xe, id: "TD-Tools-SpaceEvenlyHorizontal"}, J3.createElement(SpaceEvenlyHorizontallyIcon, null))), J3.createElement(vs, null, J3.createElement(pe2, {disabled: !c10, onClick: B10, id: "TD-Tools-AlignTop"}, J3.createElement(AlignTopIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: I10, id: "TD-Tools-AlignCenterVertical"}, J3.createElement(AlignCenterVerticallyIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: P10, id: "TD-Tools-AlignBottom"}, J3.createElement(AlignBottomIcon, null)), J3.createElement(pe2, {disabled: !c10, onClick: v10, id: "TD-Tools-tretchVertical"}, J3.createElement(StretchVerticallyIcon, null)), J3.createElement(pe2, {disabled: !p10, onClick: Q, id: "TD-Tools-SpaceEvenlyVertical"}, J3.createElement(SpaceEvenlyVerticallyIcon, null))))));
}
var vs = M3("div", {position: "relative", display: "flex", width: "100%", background: "none", border: "none", cursor: "pointer", outline: "none", alignItems: "center", justifyContent: "flex-start", padding: 0});
function kl() {
  let s10 = ae(), e14 = useIntl(), t13 = mo.useCallback(() => {
    s10.delete();
  }, [s10]), n10 = s10.useStore((o13) => o13.appState.status === "idle" && o13.document.pageStates[o13.appState.currentPageId].selectedIds.length > 0);
  return mo.createElement(ct, {label: e14.formatMessage({id: "delete"}), kbd: "\u232B", id: "TD-Delete"}, mo.createElement(pe2, {variant: "circle", disabled: !n10, onSelect: t13}, mo.createElement(hl, null)));
}
var FO = (s10) => s10.settings.language;
function Dl() {
  let s10 = ae(), e14 = s10.useStore(FO), t13 = Nt.useCallback((n10) => {
    s10.setSetting("language", n10);
  }, [s10]);
  return Nt.createElement(xt, {variant: "menu", overflow: true, id: "language-menu", side: "left", sideOffset: 8}, xs.map(({locale: n10, label: o13}) => Nt.createElement(pt, {key: n10, checked: e14 === n10, onCheckedChange: () => t13(n10), id: `TD-MenuItem-Language-${n10}`}, o13)), Nt.createElement(Je, null), Nt.createElement("a", {href: "https://github.com/tldraw/tldraw/blob/main/guides/translation.md", target: "_blank", rel: "nofollow"}, Nt.createElement(ue2, {id: "TD-MenuItem-Translation-Link"}, Nt.createElement(message_default, {id: "translation.link"}), Nt.createElement(qe, null, Nt.createElement(ExternalLinkIcon, null)))));
}
var go = M3("button", {position: "relative", height: "32px", width: "32px", backgroundColor: "$panel", borderRadius: "4px", padding: "0", margin: "0", outline: "none", border: "none", pointerEvents: "all", fontSize: "$0", color: "$text", cursor: "pointer", display: "grid", alignItems: "center", justifyContent: "center", "& > *": {gridRow: 1, gridColumn: 1}, "&:disabled": {opacity: "0.5"}, "& > span": {width: "100%", height: "100%", display: "flex", alignItems: "center"}, variants: {bp: {mobile: {backgroundColor: "transparent"}, small: {"&:hover:not(:disabled)": {backgroundColor: "$hover"}}}, size: {small: {height: 32, width: 32, "& svg:nth-of-type(1)": {height: "16px", width: "16px"}}, medium: {height: 44, width: 44, "& svg:nth-of-type(1)": {height: "18px", width: "18px"}}, large: {height: 44, width: 44, "& svg:nth-of-type(1)": {height: "20px", width: "20px"}}}, isActive: {true: {color: "$selected"}}}});
function Bl({onOpenChange: s10}) {
  let e14 = useIntl(), t13 = {Tools: [{label: e14.formatMessage({id: "select"}), kbd: "1"}, {label: e14.formatMessage({id: "draw"}), kbd: "2"}, {label: e14.formatMessage({id: "eraser"}), kbd: "3"}, {label: e14.formatMessage({id: "rectangle"}), kbd: "4"}, {label: e14.formatMessage({id: "ellipse"}), kbd: "5"}, {label: e14.formatMessage({id: "triangle"}), kbd: "6"}, {label: e14.formatMessage({id: "line"}), kbd: "7"}, {label: e14.formatMessage({id: "arrow"}), kbd: "8"}, {label: e14.formatMessage({id: "text"}), kbd: "9"}, {label: e14.formatMessage({id: "sticky"}), kbd: "0"}], View: [{label: e14.formatMessage({id: "zoom.in"}), kbd: "#+"}, {label: e14.formatMessage({id: "zoom.out"}), kbd: "#-"}, {label: `${e14.formatMessage({id: "zoom.to"})} 100%`, kbd: "\u21E7+0"}, {label: e14.formatMessage({id: "zoom.to.fit"}), kbd: "\u21E7+1"}, {label: e14.formatMessage({id: "zoom.to.selection"}), kbd: "\u21E7+2"}, {label: e14.formatMessage({id: "preferences.dark.mode"}), kbd: "#\u21E7D"}, {label: e14.formatMessage({id: "preferences.focus.mode"}), kbd: "#."}, {label: e14.formatMessage({id: "preferences.show.grid"}), kbd: "#\u21E7G"}], Transform: [{label: e14.formatMessage({id: "flip.horizontal"}), kbd: "\u21E7H"}, {label: e14.formatMessage({id: "flip.vertical"}), kbd: "\u21E7V"}, {label: `${e14.formatMessage({id: "lock"})} / ${e14.formatMessage({id: "unlock"})}`, kbd: "#\u21E7L"}, {label: `${e14.formatMessage({id: "move"})} ${e14.formatMessage({id: "to.front"})}`, kbd: "\u21E7]"}, {label: `${e14.formatMessage({id: "move"})} ${e14.formatMessage({id: "forward"})}`, kbd: "]"}, {label: `${e14.formatMessage({id: "move"})} ${e14.formatMessage({id: "backward"})}`, kbd: "["}, {label: `${e14.formatMessage({id: "move"})} ${e14.formatMessage({id: "back"})}`, kbd: "\u21E7["}], File: [{label: e14.formatMessage({id: "new.project"}), kbd: "#N"}, {label: e14.formatMessage({id: "open"}), kbd: "#O"}, {label: e14.formatMessage({id: "save"}), kbd: "#S"}, {label: e14.formatMessage({id: "save.as"}), kbd: "#\u21E7S"}, {label: e14.formatMessage({id: "upload.media"}), kbd: "#U"}], Edit: [{label: e14.formatMessage({id: "undo"}), kbd: "#Z"}, {label: e14.formatMessage({id: "redo"}), kbd: "#\u21E7Z"}, {label: e14.formatMessage({id: "cut"}), kbd: "#X"}, {label: e14.formatMessage({id: "copy"}), kbd: "#C"}, {label: e14.formatMessage({id: "paste"}), kbd: "#V"}, {label: e14.formatMessage({id: "select.all"}), kbd: "#A"}, {label: e14.formatMessage({id: "delete"}), kbd: "\u232B"}, {label: e14.formatMessage({id: "duplicate"}), kbd: "#D"}]};
  return Qe.createElement(Root9, {onOpenChange: s10}, Qe.createElement(Trigger4, {asChild: true}, Qe.createElement(Be, {id: "TD-HelpItem-Keyboard", variant: "wide"}, Qe.createElement(message_default, {id: "keyboard.shortcuts"}))), Qe.createElement(Portal2, null, Qe.createElement(WO, null), Qe.createElement(NO, null, Qe.createElement(YO, null, Qe.createElement(message_default, {id: "keyboard.shortcuts"}), Qe.createElement(Close, {asChild: true}, Qe.createElement(_O, null, Qe.createElement(Cross2Icon, null)))), Qe.createElement(KO, {bp: Xe}, Object.entries(t13).map(([n10, o13]) => Qe.createElement(ar, {key: n10}, Qe.createElement(GO, null, n10), Qe.createElement(VO, null, o13.map((i10) => Qe.createElement($O, {key: i10.label}, i10.label, Qe.createElement(uo, {variant: "menu"}, i10.kbd))))))))));
}
var GO = M3("h3", {fontSize: "$2", color: "$text", fontFamily: "$ui", margin: 0, paddingBottom: "$5"});
var ar = M3("div", {breakInside: "avoid", paddingBottom: 24});
var VO = M3("ul", {listStyleType: "none", width: "100%", padding: 0, margin: 0});
var $O = M3("li", {display: "flex", alignItems: "center", justifyContent: "space-between", height: 32, minHeight: 32, width: "100%", outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", borderRadius: 4, userSelect: "none", margin: 0, padding: "0 0"});
var NO = M3(Content6, {backgroundColor: "white", borderRadius: 6, boxShadow: "hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px", position: "fixed", top: "50%", left: "50%", transform: "translate(-50%, -50%)", width: "fit-content", maxWidth: "90vw", maxHeight: "74vh", overflowY: "auto", padding: 25, "&:focus": {outline: "none"}});
var KO = M3("div", {maxWidth: "100%", width: "fit-content", height: "fit-content", overflowY: "auto", columnGap: 64, variants: {bp: {mobile: {columns: 1, [`& ${ar}`]: {minWidth: "0px"}}, small: {columns: 2, [`& ${ar}`]: {minWidth: "200px"}}, medium: {columns: 3}, large: {columns: 3}}}});
var WO = M3(Overlay3, {backgroundColor: "$overlay", position: "fixed", inset: 0});
var _O = M3(go, {fontFamily: "inherit", borderRadius: "100%", height: 25, width: 25, display: "inline-flex", alignItems: "center", justifyContent: "center", color: "$text", cursor: "pointer", "&:hover": {backgroundColor: "$hover"}});
var YO = M3(Title, {fontFamily: "$body", fontSize: "$3", color: "$text", paddingBottom: 32, display: "flex", alignItems: "center", justifyContent: "space-between", margin: 0});
var qO = (s10) => s10.settings.isDebugMode;
var JO = (s10) => s10.settings.dockPosition;
function Ml() {
  let s10 = ae(), e14 = s10.useStore(qO), t13 = s10.useStore(JO), [n10, o13] = et.useState(false);
  return et.createElement(Root8, null, et.createElement(nF, {dir: "ltr"}, et.createElement(Trigger3, {asChild: true, dir: "ltr"}, et.createElement(eF, {side: t13, debug: e14, bp: Xe}, et.createElement(QuestionMarkIcon, null)))), et.createElement(Content5, {dir: "ltr"}, et.createElement(tF, {style: {visibility: n10 ? "hidden" : "visible"}}, et.createElement(QO, null), et.createElement(Bl, {onOpenChange: o13}), et.createElement(Je, null))));
}
var QO = () => et.createElement(Root5, {dir: "ltr"}, et.createElement(Trigger, {asChild: true}, et.createElement(Be, {variant: "wide", hasArrow: true}, et.createElement(message_default, {id: "language"}))), et.createElement(Dl, null));
var eF = M3("button", {width: 28, height: 28, borderRadius: "100%", position: "fixed", right: 10, display: "grid", placeItems: "center", border: "none", backgroundColor: "white", cursor: "pointer", boxShadow: "$panel", bottom: 10, variants: {debug: {true: {}, false: {}}, bp: {mobile: {}, small: {}, medium: {}, large: {}}, side: {top: {}, left: {}, right: {}, bottom: {}}}, compoundVariants: [{bp: "mobile", side: "bottom", debug: false, css: {bottom: 70}}, {bp: "mobile", debug: true, css: {bottom: 50}}, {bp: "mobile", side: "bottom", debug: true, css: {bottom: 110}}, {bp: "small", side: "bottom", debug: true, css: {bottom: 50}}, {bp: "small", debug: false, css: {bottom: 10}}]});
var tF = M3(Bt, {width: "fit-content", height: "fit-content", minWidth: 200, maxHeight: 380, overflowY: "auto", "& *": {boxSizing: "border-box"}, variants: {variant: {horizontal: {flexDirection: "row"}, menu: {minWidth: 128}}}});
var nF = M3(Anchor3, {position: "absolute", right: 10, zIndex: 999, bottom: 50});
var oF = (s10) => s10.settings.isDebugMode;
var sF = (s10) => s10.settings.dockPosition;
var El = St.memo(function({onBlur: e14}) {
  let t13 = ae(), n10 = t13.useStore(sF), o13 = t13.useStore(oF);
  return St.createElement(St.Fragment, null, St.createElement(iF, {side: n10, onBlur: e14, bp: Xe, debug: o13}, St.createElement(rF, {id: "TD-Tools"}, St.createElement(al, null), St.createElement(dF, {orientation: n10 === "bottom" || n10 === "top" ? "horizontal" : "vertical"}, St.createElement(vl, null), St.createElement(Il, null), St.createElement(kl, null)))), St.createElement(Ml, null), o13 && St.createElement(aF, null, St.createElement(rl, null)));
});
var iF = M3("div", {position: "absolute", width: "100%", minWidth: 0, maxWidth: "100%", height: "64px", gap: "$4", display: "flex", justifyContent: "center", alignItems: "center", zIndex: 200, overflow: "hidden", pointerEvents: "none", "& > div > *": {pointerEvents: "all"}, variants: {debug: {true: {}, false: {}}, bp: {mobile: {}, small: {}, medium: {}, large: {}}, side: {top: {width: "100%", height: 64, left: 0, right: 0, top: 45}, right: {width: 64, height: "100%", top: 0, right: 0}, bottom: {width: "100%", left: 0, right: 0, bottom: 4}, left: {width: 64, height: "100%", left: 0}}}, compoundVariants: [{side: "top", bp: "large", css: {top: "10px"}}, {side: "bottom", debug: true, css: {bottom: 44}}]});
var rF = M3("div", {display: "flex", width: "fit-content", height: "fit-content", alignItems: "center", justifyContent: "center", flexDirection: "column", gap: "$4"});
var aF = M3("div", {position: "absolute", bottom: "0px", left: "0px", right: "0px", height: "40px", width: "100%", maxWidth: "100%"});
var dF = M3("div", {position: "relative", display: "flex", alignItems: "center", height: "fit-content", gap: "$3", variants: {orientation: {horizontal: {flexDirection: "row"}, vertical: {flexDirection: "column"}}}});
var cF = (s10) => s10.settings;
var pF = ["bottom", "left", "right", "top"];
function Rl() {
  let s10 = ae(), e14 = useIntl(), t13 = s10.useStore(cF), n10 = fe2.useCallback(() => {
    s10.setSetting("isDebugMode", (m10) => !m10);
  }, [s10]), o13 = fe2.useCallback(() => {
    s10.setSetting("isDarkMode", (m10) => !m10);
  }, [s10]), i10 = fe2.useCallback(() => {
    s10.setSetting("isFocusMode", (m10) => !m10);
  }, [s10]), a10 = fe2.useCallback(() => {
    s10.setSetting("showRotateHandles", (m10) => !m10);
  }, [s10]), l10 = fe2.useCallback(() => {
    s10.setSetting("showGrid", (m10) => !m10);
  }, [s10]), r12 = fe2.useCallback(() => {
    s10.setSetting("showBindingHandles", (m10) => !m10);
  }, [s10]), c10 = fe2.useCallback(() => {
    s10.setSetting("isSnapping", (m10) => !m10);
  }, [s10]), p10 = fe2.useCallback(() => {
    s10.setSetting("keepStyleMenuOpen", (m10) => !m10);
  }, [s10]), u10 = fe2.useCallback(() => {
    s10.setSetting("showCloneHandles", (m10) => !m10);
  }, [s10]), h10 = fe2.useCallback(() => {
    s10.setSetting("isCadSelectMode", (m10) => !m10);
  }, [s10]), g10 = fe2.useCallback((m10) => {
    s10.setSetting("dockPosition", m10);
  }, [s10]);
  return fe2.createElement(Tn, {label: e14.formatMessage({id: "menu.preferences"}), id: "TD-MenuItem-Preferences"}, fe2.createElement(pt, {checked: t13.isDarkMode, onCheckedChange: o13, kbd: "#\u21E7D", id: "TD-MenuItem-Preferences-Dark_Mode"}, fe2.createElement(message_default, {id: "preferences.dark.mode"})), fe2.createElement(pt, {checked: t13.isFocusMode, onCheckedChange: i10, kbd: "#.", id: "TD-MenuItem-Preferences-Focus_Mode"}, fe2.createElement(message_default, {id: "preferences.focus.mode"})), fe2.createElement(pt, {checked: t13.isDebugMode, onCheckedChange: n10, id: "TD-MenuItem-Preferences-Debug_Mode"}, fe2.createElement(message_default, {id: "preferences.debug.mode"})), fe2.createElement(Je, null), fe2.createElement(pt, {checked: t13.showGrid, onCheckedChange: l10, kbd: "#\u21E7G", id: "TD-MenuItem-Preferences-Grid"}, fe2.createElement(message_default, {id: "preferences.show.grid"})), fe2.createElement(pt, {checked: t13.isCadSelectMode, onCheckedChange: h10, id: "TD-MenuItem-Preferences-Cad_Selection"}, fe2.createElement(message_default, {id: "preferences.use.cad.selection"})), fe2.createElement(pt, {checked: t13.keepStyleMenuOpen, onCheckedChange: p10, id: "TD-MenuItem-Preferences-Style_menu"}, fe2.createElement(message_default, {id: "preferences.keep.stylemenu.open"})), fe2.createElement(pt, {checked: t13.isSnapping, onCheckedChange: c10, id: "TD-MenuItem-Preferences-Always_Show_Snaps"}, fe2.createElement(message_default, {id: "preferences.always.show.snaps"})), fe2.createElement(pt, {checked: t13.showRotateHandles, onCheckedChange: a10, id: "TD-MenuItem-Preferences-Rotate_Handles"}, fe2.createElement(message_default, {id: "preferences.rotate.handles"})), fe2.createElement(pt, {checked: t13.showBindingHandles, onCheckedChange: r12, id: "TD-MenuItem-Preferences-Binding_Handles"}, fe2.createElement(message_default, {id: "preferences.binding.handles"})), fe2.createElement(pt, {checked: t13.showCloneHandles, onCheckedChange: u10, id: "TD-MenuItem-Preferences-Clone_Handles"}, fe2.createElement(message_default, {id: "preferences.clone.handles"})), fe2.createElement(Tn, {label: e14.formatMessage({id: "dock.position"}), overflow: false}, pF.map((m10) => fe2.createElement(pt, {key: m10, checked: t13.dockPosition === m10, onCheckedChange: () => g10(m10), id: `TD-MenuItem-DockPosition-${m10}`}, fe2.createElement(uF, null, fe2.createElement(message_default, {id: m10}))))));
}
var uF = M3("span", {textTransform: "capitalize"});
var fF = (s10) => s10.document.pageStates[s10.appState.currentPageId].selectedIds.length;
var SF = (s10) => s10.appState.disableAssets;
var Al = A4.memo(function({sponsor: e14, readOnly: t13}) {
  let n10 = ae(), o13 = useIntl(), i10 = n10.useStore(fF), a10 = n10.useStore(SF), [l10, r12] = A4.useState(0);
  A4.useEffect(() => r12(1), []);
  let {onNewProject: c10, onOpenProject: p10, onSaveProject: u10, onSaveProjectAs: h10} = bs(), g10 = A4.useCallback(() => {
    n10.delete();
  }, [n10]), m10 = A4.useCallback(() => {
    n10.copyImage("svg", {scale: 1, quality: 1, transparentBackground: false});
  }, [n10]), T10 = A4.useCallback(() => {
    n10.copyImage("png", {scale: 2, quality: 1, transparentBackground: true});
  }, [n10]), y10 = A4.useCallback(() => ee(this, null, function* () {
    n10.exportImage("png", {scale: 2, quality: 1, transparentBackground: true});
  }), [n10]), b10 = A4.useCallback(() => ee(this, null, function* () {
    n10.exportImage("jpeg", {scale: 2, quality: 1, transparentBackground: false});
  }), [n10]), S10 = A4.useCallback(() => ee(this, null, function* () {
    n10.exportImage("webp", {scale: 2, quality: 1, transparentBackground: false});
  }), [n10]), w10 = A4.useCallback(() => ee(this, null, function* () {
    n10.exportImage("svg", {scale: 2, quality: 1, transparentBackground: false});
  }), [n10]), D10 = A4.useCallback(() => ee(this, null, function* () {
    n10.copyJson();
  }), [n10]), B10 = A4.useCallback(() => ee(this, null, function* () {
    n10.exportJson();
  }), [n10]), I10 = A4.useCallback(() => {
    var ot, Tt;
    (Tt = (ot = n10.callbacks).onSignIn) == null || Tt.call(ot, n10);
  }, [n10]), P10 = A4.useCallback(() => {
    var ot, Tt;
    (Tt = (ot = n10.callbacks).onSignOut) == null || Tt.call(ot, n10);
  }, [n10]), v10 = A4.useCallback(() => {
    n10.cut();
  }, [n10]), Q = A4.useCallback(() => {
    n10.copy();
  }, [n10]), oe2 = A4.useCallback(() => {
    n10.paste();
  }, [n10]), te = A4.useCallback(() => {
    n10.selectAll();
  }, [n10]), ke = A4.useCallback(() => {
    n10.selectNone();
  }, [n10]), be2 = A4.useCallback(() => {
    n10.openAsset();
  }, [n10]), xe = A4.useCallback(() => {
    n10.zoomTo(1);
  }, [n10]), Me = n10.callbacks.onNewProject || n10.callbacks.onOpenProject || n10.callbacks.onSaveProject || n10.callbacks.onSaveProjectAs || n10.callbacks.onExport, Fe = n10.callbacks.onSignIn || n10.callbacks.onSignOut, We = i10 > 0;
  return A4.createElement(Root5, {dir: "ltr"}, A4.createElement(Cs, {id: "TD-MenuIcon"}, A4.createElement(HamburgerMenuIcon, null)), A4.createElement(xt, {variant: "menu", id: "TD-Menu"}, Me && A4.createElement(Tn, {label: `${o13.formatMessage({id: "menu.file"})}...`, id: "TD-MenuItem-File"}, n10.callbacks.onNewProject && A4.createElement(ue2, {onClick: c10, kbd: "#N", id: "TD-MenuItem-File-New_Project"}, A4.createElement(message_default, {id: "new.project"})), n10.callbacks.onOpenProject && A4.createElement(ue2, {onClick: p10, kbd: "#O", id: "TD-MenuItem-File-Open"}, A4.createElement(message_default, {id: "open"}), "..."), n10.callbacks.onSaveProject && A4.createElement(ue2, {onClick: u10, kbd: "#S", id: "TD-MenuItem-File-Save"}, A4.createElement(message_default, {id: "save"})), n10.callbacks.onSaveProjectAs && A4.createElement(ue2, {onClick: h10, kbd: "#\u21E7S", id: "TD-MenuItem-File-Save_As"}, A4.createElement(message_default, {id: "save.as"}), "..."), !a10 && A4.createElement(A4.Fragment, null, A4.createElement(ut, null), A4.createElement(ue2, {onClick: be2, kbd: "#U", id: "TD-MenuItem-File-Upload_Media"}, A4.createElement(message_default, {id: "upload.media"})))), A4.createElement(Tn, {label: `${o13.formatMessage({id: "menu.edit"})}...`, id: "TD-MenuItem-Edit"}, A4.createElement(ue2, {onSelect: ve, onClick: n10.undo, disabled: t13, kbd: "#Z", id: "TD-MenuItem-Edit-Undo"}, A4.createElement(message_default, {id: "undo"})), A4.createElement(ue2, {onSelect: ve, onClick: n10.redo, disabled: t13, kbd: "#\u21E7Z", id: "TD-MenuItem-Edit-Redo"}, A4.createElement(message_default, {id: "redo"})), A4.createElement(Je, {dir: "ltr"}), A4.createElement(ue2, {onSelect: ve, disabled: !We || t13, onClick: v10, kbd: "#X", id: "TD-MenuItem-Edit-Cut"}, A4.createElement(message_default, {id: "cut"})), A4.createElement(ue2, {onSelect: ve, disabled: !We, onClick: Q, kbd: "#C", id: "TD-MenuItem-Edit-Copy"}, A4.createElement(message_default, {id: "copy"})), A4.createElement(ue2, {onSelect: ve, onClick: oe2, kbd: "#V", id: "TD-MenuItem-Edit-Paste"}, A4.createElement(message_default, {id: "paste"})), A4.createElement(Je, {dir: "ltr"}), A4.createElement(Tn, {label: `${o13.formatMessage({id: "copy.as"})}...`, size: "small", id: "TD-MenuItem-Copy-As"}, A4.createElement(ue2, {onClick: m10, id: "TD-MenuItem-Copy-as-SVG"}, "SVG"), A4.createElement(ue2, {onClick: T10, id: "TD-MenuItem-Copy-As-PNG"}, "PNG"), A4.createElement(ue2, {onClick: D10, id: "TD-MenuItem-Copy_as_JSON"}, "JSON")), A4.createElement(Tn, {label: `${o13.formatMessage({id: "export.as"})}...`, size: "small", id: "TD-MenuItem-Export"}, A4.createElement(ue2, {onClick: w10, id: "TD-MenuItem-Export-SVG"}, "SVG"), A4.createElement(ue2, {onClick: y10, id: "TD-MenuItem-Export-PNG"}, "PNG"), A4.createElement(ue2, {onClick: b10, id: "TD-MenuItem-Export-JPG"}, "JPG"), A4.createElement(ue2, {onClick: S10, id: "TD-MenuItem-Export-WEBP"}, "WEBP"), A4.createElement(ue2, {onClick: B10, id: "TD-MenuItem-Export-JSON"}, "JSON")), A4.createElement(Je, {dir: "ltr"}), A4.createElement(ue2, {onSelect: ve, onClick: te, kbd: "#A", id: "TD-MenuItem-Select_All"}, A4.createElement(message_default, {id: "select.all"})), A4.createElement(ue2, {onSelect: ve, disabled: !We, onClick: ke, id: "TD-MenuItem-Select_None"}, A4.createElement(message_default, {id: "select.none"})), A4.createElement(Je, {dir: "ltr"}), A4.createElement(ue2, {onSelect: g10, disabled: !We, kbd: "\u232B", id: "TD-MenuItem-Delete"}, A4.createElement(message_default, {id: "delete"}))), A4.createElement(Tn, {label: o13.formatMessage({id: "menu.view"}), id: "TD-MenuItem-Edit"}, A4.createElement(ue2, {onSelect: ve, onClick: n10.zoomIn, kbd: "#+", id: "TD-MenuItem-View-ZoomIn"}, A4.createElement(message_default, {id: "zoom.in"})), A4.createElement(ue2, {onSelect: ve, onClick: n10.zoomOut, kbd: "#-", id: "TD-MenuItem-View-ZoomOut"}, A4.createElement(message_default, {id: "zoom.out"})), A4.createElement(ue2, {onSelect: ve, onClick: xe, kbd: "\u21E7+0", id: "TD-MenuItem-View-ZoomTo100"}, A4.createElement(message_default, {id: "zoom.to"}), " 100%"), A4.createElement(ue2, {onSelect: ve, onClick: n10.zoomToFit, kbd: "\u21E7+1", id: "TD-MenuItem-View-ZoomToFit"}, A4.createElement(message_default, {id: "zoom.to.fit"})), A4.createElement(ue2, {onSelect: ve, onClick: n10.zoomToSelection, kbd: "\u21E7+2", id: "TD-MenuItem-View-ZoomToSelection"}, A4.createElement(message_default, {id: "zoom.to.selection"}))), A4.createElement(Je, {dir: "ltr"}), A4.createElement(Rl, null), Fe && A4.createElement(A4.Fragment, null, A4.createElement(Je, {dir: "ltr"}), " ", n10.callbacks.onSignIn && A4.createElement(ue2, {onSelect: I10, id: "TD-MenuItem-Sign_in"}, A4.createElement(message_default, {id: "menu.sign.in"})), n10.callbacks.onSignOut && A4.createElement(ue2, {onSelect: P10, id: "TD-MenuItem-Sign_out"}, A4.createElement(message_default, {id: "menu.sign.out"}), A4.createElement(qe, null, A4.createElement(ExitIcon, null))))));
});
var Hl = fo.forwardRef((n10, t13) => {
  var o13 = n10, {icon: s10} = o13, e14 = _e(o13, ["icon"]);
  return fo.createElement(TF, null, fo.createElement(bF, C5(f8({}, e14), {ref: t13})), s10 ? fo.createElement(yF, null, s10) : null);
});
var TF = M3("div", {position: "relative", width: "100%", height: "min-content"});
var bF = M3("input", {color: "$text", border: "none", textAlign: "left", width: "100%", paddingLeft: "$3", paddingRight: "$6", backgroundColor: "$background", height: "32px", outline: "none", fontFamily: "$ui", fontSize: "$1", "&:focus": {backgroundColor: "$hover"}, borderRadius: "$2"});
var yF = M3(qe, {top: 0, right: 0, position: "absolute", paddingLeft: "$3", paddingRight: "$3", pointerEvents: "none", color: "$text"});
var CF = (s10) => Object.keys(s10.document.pages).length > 1;
function Ol({page: s10, onOpen: e14, onClose: t13}) {
  let n10 = ae(), o13 = useIntl(), [i10, a10] = Se.useState(false), [l10, r12] = Se.useState(s10.name || "Page"), c10 = n10.useStore(CF), p10 = Se.useRef(null), u10 = Se.useCallback(() => {
    a10(false);
  }, []), h10 = Se.useCallback(() => {
    n10.duplicatePage(s10.id);
  }, [n10]), g10 = Se.useCallback(() => {
    window.confirm("Are you sure you want to delete this page?") && n10.deletePage(s10.id);
  }, [n10]), m10 = Se.useCallback((B10) => {
    if (a10(B10), B10) {
      e14 == null || e14();
      return;
    }
  }, [n10]);
  function T10(B10) {
    B10.stopPropagation();
  }
  let y10 = Se.useRef(s10.name || "Page"), b10 = Se.useRef(y10.current), S10 = Se.useCallback((B10) => {
    let I10 = B10.target.value.trimStart();
    b10.current = I10, r12(I10);
  }, []), w10 = Se.useCallback((B10) => {
    switch (B10.key) {
      case "Enter": {
        b10.current === y10.current ? a10(false) : (y10.current = b10.current, n10.renamePage(s10.id, b10.current.trim()));
        break;
      }
      case "Escape": {
        if (b10.current === y10.current) {
          a10(false);
          return;
        }
        b10.current = y10.current, r12(y10.current), requestAnimationFrame(() => {
          let I10 = p10.current;
          I10 && (I10.focus(), I10.setSelectionRange(0, I10.value.length));
        });
        break;
      }
    }
  }, []), D10 = Se.useRef(false);
  return Se.useEffect(() => (i10 ? (D10.current = true, y10.current = s10.name || "Page", b10.current = y10.current, requestAnimationFrame(() => {
    let B10 = p10.current;
    B10 && (B10.focus(), B10.setSelectionRange(0, B10.value.length));
  })) : D10.current && (t13 == null || t13()), () => {
    b10.current !== y10.current && (y10.current = b10.current, n10.renamePage(s10.id, b10.current));
  }), [i10]), Se.createElement(Root10, {open: i10, onOpenChange: m10}, Se.createElement(Trigger5, {asChild: true, "data-shy": "true"}, Se.createElement(go, {bp: Xe}, Se.createElement(qe, null, Se.createElement(MixerVerticalIcon, null)))), Se.createElement(Portal3, null, Se.createElement(kF, {onPointerDown: u10}), Se.createElement(vF, {dir: "ltr", onKeyDown: T10, onKeyUp: T10}, Se.createElement(Hl, {ref: p10, placeholder: o13.formatMessage({id: "page.name"}), value: l10, onChange: S10, onKeyDown: w10, icon: Se.createElement(Pencil1Icon, null)}), Se.createElement(ut, null), Se.createElement(zl, {onSelect: h10}, Se.createElement(message_default, {id: "duplicate"})), Se.createElement(zl, {disabled: !c10, onSelect: g10}, Se.createElement(message_default, {id: "delete"})), Se.createElement(ut, null), Se.createElement(Cancel, {asChild: true}, Se.createElement(Be, null, Se.createElement(message_default, {id: "cancel"}))))));
}
var vF = M3(Content7, {position: "fixed", top: "50%", left: "50%", transform: "translate(-50%, -50%)", minWidth: 240, maxWidth: "fit-content", maxHeight: "85vh", marginTop: "-5vh", pointerEvents: "all", backgroundColor: "$panel", padding: "$1", borderRadius: "$2", font: "$ui", "&:focus": {outline: "none"}});
var kF = M3(Overlay4, {backgroundColor: "rgba(0, 0, 0, .15)", position: "fixed", pointerEvents: "all", inset: 0});
function zl(t13) {
  var n10 = t13, {onSelect: s10} = n10, e14 = _e(n10, ["onSelect"]);
  return Se.createElement(Action, {asChild: true, onClick: s10, onSelect: s10}, Se.createElement(Be, f8({}, e14)));
}
var EF = (s10) => Object.values(s10.document.pages).sort((e14, t13) => (e14.childIndex || 0) - (t13.childIndex || 0));
var RF = (s10) => s10.document.pages[s10.appState.currentPageId].name;
var LF = (s10) => s10.document.pages[s10.appState.currentPageId].id;
function Fl() {
  let s10 = ae(), e14 = me2.useRef(false), [t13, n10] = me2.useState(false);
  me2.useEffect(() => {
    e14.current !== t13 && (e14.current = t13);
  }, [t13]);
  let o13 = me2.useCallback(() => {
    n10(false);
  }, [n10]), i10 = me2.useCallback((l10) => {
    e14.current !== l10 && n10(l10);
  }, [n10]), a10 = s10.useStore(RF);
  return me2.createElement(Root5, {dir: "ltr", open: t13, onOpenChange: i10}, me2.createElement(Trigger, {dir: "ltr", asChild: true, id: "TD-Page"}, me2.createElement(pe2, {variant: "text"}, a10 || "Page")), me2.createElement(xt, {variant: "menu", align: "start"}, t13 && me2.createElement(AF, {onClose: o13})));
}
function AF({onClose: s10}) {
  let e14 = ae(), t13 = useIntl(), n10 = e14.useStore(EF), o13 = e14.useStore(LF), i10 = me2.useCallback(() => {
    let m10 = t13.formatMessage({id: "page"}) + " " + (Object.keys(e14.document.pages).length + 1);
    e14.createPage(void 0, m10);
  }, [e14]), a10 = me2.useCallback((m10) => {
    s10(), e14.changePage(m10);
  }, [e14]), [l10, r12] = me2.useState(null), [c10, p10] = me2.useState(null), u10 = me2.useCallback((m10) => {
    r12(m10.currentTarget.id), p10(n10.findIndex((T10) => T10.id === m10.currentTarget.id)), m10.dataTransfer.effectAllowed = "move";
  }, []), h10 = me2.useCallback((m10) => {
    m10.preventDefault();
    let T10 = n10.findIndex((S10) => S10.id === m10.currentTarget.id), y10 = m10.currentTarget.getBoundingClientRect();
    T10 = (m10.clientY - y10.top) / y10.height < 0.5 ? T10 : T10 + 1, p10(T10);
  }, [l10, n10]), g10 = me2.useCallback(() => {
    l10 !== null && c10 !== null && e14.movePage(l10, c10), r12(null), p10(null);
  }, [l10, c10]);
  return me2.createElement(me2.Fragment, null, me2.createElement(RadioGroup2, {dir: "ltr", value: o13, onValueChange: a10}, n10.map((m10, T10) => me2.createElement(HF, {key: m10.id, isDropAbove: T10 === c10 && T10 === 0, isDropBelow: c10 !== null && T10 === c10 - 1}, me2.createElement(RadioItem2, {title: m10.name || "Page", value: m10.id, key: m10.id, id: m10.id, asChild: true, onDragOver: h10, onDragStart: u10, onDrop: g10, draggable: true}, me2.createElement(zF, null, me2.createElement("span", {id: m10.id}, m10.name || "Page"), me2.createElement(ItemIndicator2, null, me2.createElement(qe, null, me2.createElement(CheckIcon, null))))), me2.createElement(Ol, {page: m10, onClose: s10})))), me2.createElement(Je, null), me2.createElement(Item3, {onSelect: i10, asChild: true}, me2.createElement(Be, null, me2.createElement("span", null, me2.createElement(message_default, {id: "create.page"})), me2.createElement(qe, null, me2.createElement(PlusIcon, null)))));
}
var HF = M3("div", {position: "relative", display: "grid", gridTemplateColumns: "1fr auto", gridAutoFlow: "column", margin: 0, '& > *[data-shy="true"]': {opacity: 0}, '&:hover > *[data-shy="true"]': {opacity: 1}, variants: {isDropAbove: {true: {"&::after": {content: "", display: "block", position: "absolute", top: 0, width: "100%", height: "1px", backgroundColor: "$selected", zIndex: 999, pointerEvents: "none"}}}, isDropBelow: {true: {"&::after": {content: "", display: "block", position: "absolute", width: "100%", height: "1px", top: "100%", backgroundColor: "$selected", zIndex: 999, pointerEvents: "none"}}}}});
var zF = M3(Be, {minWidth: 128});
var OF = (s10) => s10.document.pageStates[s10.appState.currentPageId].camera.zoom;
var jl = ht.memo(function() {
  let e14 = ae(), t13 = e14.useStore(OF);
  return ht.createElement(Root5, {dir: "ltr"}, ht.createElement(Trigger, {dir: "ltr", asChild: true, id: "TD-Zoom"}, ht.createElement(FF, {onDoubleClick: e14.resetZoom, variant: "text"}, Math.round(t13 * 100), "%")), ht.createElement(xt, {align: "end"}, ht.createElement(ue2, {onSelect: ve, onClick: e14.zoomIn, kbd: "#+", id: "TD-Zoom-Zoom_In"}, ht.createElement(message_default, {id: "zoom.in"})), ht.createElement(ue2, {onSelect: ve, onClick: e14.zoomOut, kbd: "#\u2212", id: "TD-Zoom-Zoom_Out"}, ht.createElement(message_default, {id: "zoom.out"})), ht.createElement(ue2, {onSelect: ve, onClick: e14.resetZoom, kbd: "\u21E70", id: "TD-Zoom-Zoom_To_100%"}, ht.createElement(message_default, {id: "to"}), " 100%"), ht.createElement(ue2, {onSelect: ve, onClick: e14.zoomToFit, kbd: "\u21E71", id: "TD-Zoom-To_Fit"}, ht.createElement(message_default, {id: "to.fit"})), ht.createElement(ue2, {onSelect: ve, onClick: e14.zoomToSelection, kbd: "\u21E72", id: "TD-Zoom-To_Selection"}, ht.createElement(message_default, {id: "to.selection"}))));
});
var FF = M3(pe2, {minWidth: 56});
var $F = (s10) => s10.appState.currentStyle;
var NF = (s10) => s10.document.pageStates[s10.appState.currentPageId].selectedIds;
var KF = Object.keys(to);
var Ul = {["draw"]: ne2.createElement(cl, null), ["solid"]: ne2.createElement(pl, null), ["dashed"]: ne2.createElement(dl, null), ["dotted"]: ne2.createElement(ll, null)};
var WF = {["small"]: ne2.createElement(gl, null), ["medium"]: ne2.createElement(fl, null), ["large"]: ne2.createElement(Sl, null)};
var _F = {["start"]: ne2.createElement(TextAlignLeftIcon, null), ["middle"]: ne2.createElement(TextAlignCenterIcon, null), ["end"]: ne2.createElement(TextAlignRightIcon, null), ["justify"]: ne2.createElement(TextAlignJustifyIcon, null)};
var YF = (s10) => s10.settings.isDarkMode ? "dark" : "light";
var ZF = (s10) => s10.settings.keepStyleMenuOpen;
var XF = (s10) => {
  let {activeTool: e14, currentPageId: t13} = s10.appState;
  switch (e14) {
    case "select": {
      let n10 = s10.document.pages[t13], o13 = false, i10 = false;
      for (let a10 of s10.document.pageStates[t13].selectedIds)
        "text" in n10.shapes[a10] && (o13 = true), "label" in n10.shapes[a10] && (i10 = true);
      return o13 ? "text" : i10 ? "label" : "";
    }
    case "text":
      return "text";
    case "rectangle":
      return "label";
    case "ellipse":
      return "label";
    case "triangle":
      return "label";
    case "arrow":
      return "label";
    case "line":
      return "label";
  }
  return false;
};
var Gl = ne2.memo(function() {
  let e14 = ae(), t13 = e14.useStore(YF), n10 = e14.useStore(ZF), o13 = e14.useStore(XF), i10 = e14.useStore($F), a10 = e14.useStore(NF), [l10, r12] = ne2.useState(i10), c10 = ne2.useRef(i10);
  ne2.useEffect(() => {
    let {appState: {currentStyle: b10}, page: S10, selectedIds: w10} = e14, D10 = {};
    if (w10.length <= 0)
      D10 = b10;
    else {
      let B10 = new Set([]);
      e14.selectedIds.map((I10) => S10.shapes[I10]).forEach((I10) => {
        KF.forEach((P10) => {
          if (!B10.has(P10))
            if (D10[P10] === void 0)
              D10[P10] = I10.style[P10];
            else {
              if (D10[P10] === I10.style[P10])
                return;
              D10[P10] = I10.style[P10], B10.add(P10);
            }
        });
      });
    }
    JSON.stringify(D10) !== JSON.stringify(c10.current) && (c10.current = D10, r12(D10));
  }, [i10, a10]);
  let p10 = ne2.useCallback((b10) => {
    e14.setSetting("keepStyleMenuOpen", b10);
  }, []), u10 = ne2.useCallback((b10) => {
    e14.style({isFilled: b10});
  }, []), h10 = ne2.useCallback((b10) => {
    e14.style({dash: b10});
  }, []), g10 = ne2.useCallback((b10) => {
    e14.style({size: b10});
  }, []), m10 = ne2.useCallback((b10) => {
    e14.style({font: b10});
  }, []), T10 = ne2.useCallback((b10) => {
    e14.style({textAlign: b10});
  }, []), y10 = ne2.useCallback((b10) => {
    e14.setMenuOpen(b10);
  }, [e14]);
  return ne2.createElement(Root5, {dir: "ltr", onOpenChange: y10, open: n10 ? true : void 0, modal: false}, ne2.createElement(Trigger, {asChild: true, id: "TD-Styles"}, ne2.createElement(pe2, {variant: "text"}, ne2.createElement(message_default, {id: "styles"}), ne2.createElement(JF, {style: {color: eo[t13][l10.color]}}, l10.isFilled && ne2.createElement(Ni, {size: 16, stroke: "none", fill: os[t13][l10.color]}), Ul[l10.dash]))), ne2.createElement(xt, null, ne2.createElement(_o, {variant: "tall", id: "TD-Styles-Color-Container"}, ne2.createElement("span", null, ne2.createElement(message_default, {id: "style.menu.color"})), ne2.createElement(qF, null, Object.keys(eo.light).map((b10) => ne2.createElement(Item3, {key: b10, onSelect: ve, asChild: true, id: `TD-Styles-Color-Swatch-${b10}`}, ne2.createElement(pe2, {variant: "icon", isActive: l10.color === b10, onClick: () => e14.style({color: b10})}, ne2.createElement(Ni, {size: 18, strokeWidth: 2.5, fill: l10.isFilled ? os.light[b10] : "transparent", stroke: eo.light[b10]})))))), ne2.createElement(pt, {variant: "styleMenu", checked: !!l10.isFilled, onCheckedChange: u10, id: "TD-Styles-Fill"}, ne2.createElement(message_default, {id: "style.menu.fill"})), ne2.createElement(_o, {id: "TD-Styles-Dash-Container"}, ne2.createElement(message_default, {id: "style.menu.dash"}), ne2.createElement(Bs, {dir: "ltr", value: l10.dash, onValueChange: h10}, Object.values(on).map((b10) => ne2.createElement(Ko, {key: b10, isActive: b10 === l10.dash, value: b10, onSelect: ve, bp: Xe, id: `TD-Styles-Dash-${b10}`}, Ul[b10])))), ne2.createElement(_o, {id: "TD-Styles-Size-Container"}, ne2.createElement(message_default, {id: "style.menu.size"}), ne2.createElement(Bs, {dir: "ltr", value: l10.size, onValueChange: g10}, Object.values(Qo).map((b10) => ne2.createElement(Ko, {key: b10, isActive: b10 === l10.size, value: b10, onSelect: ve, bp: Xe, id: `TD-Styles-Dash-${b10}`}, WF[b10])))), (o13 === "text" || o13 === "label") && ne2.createElement(ne2.Fragment, null, ne2.createElement(ut, null), ne2.createElement(_o, {id: "TD-Styles-Font-Container"}, ne2.createElement(message_default, {id: "style.menu.font"}), ne2.createElement(Bs, {dir: "ltr", value: l10.font, onValueChange: m10}, Object.values(To).map((b10) => ne2.createElement(Ko, {key: b10, isActive: b10 === l10.font, value: b10, onSelect: ve, bp: Xe, id: `TD-Styles-Font-${b10}`}, ne2.createElement(QF, {fontStyle: b10}, "Aa"))))), o13 === "text" && ne2.createElement(_o, {id: "TD-Styles-Align-Container"}, ne2.createElement(message_default, {id: "style.menu.align"}), ne2.createElement(Bs, {dir: "ltr", value: l10.textAlign, onValueChange: T10}, Object.values(Wt).map((b10) => ne2.createElement(Ko, {key: b10, isActive: b10 === l10.textAlign, value: b10, onSelect: ve, bp: Xe, id: `TD-Styles-Align-${b10}`}, _F[b10]))))), ne2.createElement(Je, null), ne2.createElement(pt, {variant: "styleMenu", checked: n10, onCheckedChange: p10, id: "TD-Styles-Keep-Open"}, ne2.createElement(message_default, {id: "style.menu.keep.open"}))));
});
var qF = M3("div", {display: "grid", gridTemplateColumns: "repeat(4, auto)", gap: 0});
var _o = M3("div", {position: "relative", width: "100%", background: "none", border: "none", cursor: "pointer", minHeight: "32px", outline: "none", color: "$text", fontFamily: "$ui", fontWeight: 400, fontSize: "$1", padding: "$2 0 $2 $3", borderRadius: 4, userSelect: "none", margin: 0, display: "flex", gap: "$3", flexDirection: "row", alignItems: "center", justifyContent: "space-between", variants: {variant: {tall: {alignItems: "flex-start", padding: "0 0 0 $3", "& > span": {paddingTop: "$4"}}}}});
var Bs = M3(DropdownMenuRadioGroup, {display: "flex", flexDirection: "row", gap: "$1"});
var JF = M3("div", {display: "grid", "& > *": {gridColumn: 1, gridRow: 1}});
var QF = M3("div", {width: 32, height: 32, display: "flex", alignItems: "center", justifyContent: "center", fontSize: "$3", variants: {fontStyle: {["script"]: {fontFamily: "Caveat Brush"}, ["sans"]: {fontFamily: "Recursive"}, ["erif"]: {fontFamily: "Georgia"}, ["mono"]: {fontFamily: "Recursive Mono"}}}});
function Vl() {
  return lr.createElement("svg", {width: "15", height: "15", viewBox: "0 0 15 15", xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd"}, lr.createElement("path", {d: "M1.36482 4.71089C1.36482 3.21371 2.57853 2 4.07572 2C5.5729 2 6.78661 3.21371 6.78661 4.71089C6.78661 5.76842 6.18106 6.68452 5.29779 7.13136C5.80465 7.24611 6.26407 7.44186 6.66028 7.73182C7.18674 8.11711 7.57215 8.64722 7.81073 9.30983C7.81452 9.30606 7.81832 9.3023 7.82212 9.29855C8.30448 8.82317 8.91325 8.52463 9.60905 8.37275C8.68812 7.922 8.05394 6.97569 8.05394 5.88126C8.05394 4.35017 9.29513 3.10898 10.8262 3.10898C12.3573 3.10898 13.5985 4.35017 13.5985 5.88126C13.5985 6.97561 12.9644 7.92186 12.0436 8.37265C12.7396 8.52449 13.3486 8.82306 13.831 9.29854C14.5795 10.0361 14.9481 11.1249 14.9481 12.5176C14.9481 12.7799 14.7354 12.9926 14.473 12.9926C14.2107 12.9926 13.9981 12.7799 13.9981 12.5175C13.9981 11.2848 13.6738 10.4774 13.1642 9.97518C12.6532 9.4716 11.8802 9.20024 10.8266 9.20024C9.77294 9.20024 8.99993 9.4716 8.48896 9.97518C7.97939 10.4774 7.65513 11.2848 7.65513 12.5176C7.65513 12.7799 7.44247 12.9926 7.18013 12.9926C6.9178 12.9926 6.70513 12.7799 6.70513 12.5176C6.70513 11.6734 6.84053 10.941 7.11384 10.3307C7.0922 10.2895 7.0763 10.2444 7.06737 10.1962C6.91739 9.38749 6.57392 8.84586 6.09923 8.49845C5.61626 8.14499 4.94481 7.95427 4.07574 7.95427C3.05232 7.95427 2.30368 8.21784 1.80952 8.70485C1.31675 9.19047 1.00176 9.97257 1.00176 11.1702C1.00176 11.4326 0.789093 11.6452 0.526758 11.6452C0.264423 11.6452 0.0517578 11.4326 0.0517578 11.1702C0.0517578 9.81263 0.411052 8.74925 1.14268 8.02821C1.60624 7.57137 2.18892 7.28191 2.85378 7.13142C1.97043 6.68461 1.36482 5.76848 1.36482 4.71089ZM4.07572 2.95C3.1032 2.95 2.31482 3.73838 2.31482 4.71089C2.31482 5.68341 3.1032 6.47178 4.07572 6.47178C5.04823 6.47178 5.83661 5.68341 5.83661 4.71089C5.83661 3.73838 5.04823 2.95 4.07572 2.95ZM10.8262 4.05898C9.8198 4.05898 9.00394 4.87484 9.00394 5.88126C9.00394 6.88768 9.8198 7.70355 10.8262 7.70355C11.8326 7.70355 12.6485 6.88768 12.6485 5.88126C12.6485 4.87484 11.8326 4.05898 10.8262 4.05898Z"}));
}
var ej = (s10) => s10.room;
var Wl = ye.memo(function() {
  let e14 = ae(), t13 = e14.useStore(ej), [n10, o13] = ye.useState(false), i10 = ye.useRef(0), a10 = ye.useCallback(() => {
    o13(true), x7.copyStringToClipboard(window.location.href), clearTimeout(i10.current), i10.current = setTimeout(() => o13(false), 1200);
  }, []), l10 = ye.useCallback(() => {
    o13(true);
    let p10 = window.location.href.split("/");
    p10[p10.length - 2] = "v", p10[p10.length - 1] = Utils.lns(p10[p10.length - 1]), x7.copyStringToClipboard(p10.join("/")), clearTimeout(i10.current), i10.current = setTimeout(() => o13(false), 1200);
  }, []), r12 = ye.useCallback(() => ee(this, null, function* () {
    e14.isDirty ? e14.fileSystemHandle ? window.confirm("Do you want to save changes to your current project?") && (yield e14.saveProject()) : window.confirm("Do you want to save your current project?") && (yield e14.saveProject()) : e14.fileSystemHandle || window.confirm("Do you want to save your current project?") && (yield e14.saveProject());
  }), []), c10 = ye.useCallback(() => ee(this, null, function* () {
    var u10;
    let p10 = Utils.deepClone(e14.document);
    e14.setIsLoading(true);
    try {
      if (e14.callbacks.onAssetUpload)
        for (let g10 in p10.assets) {
          let m10 = p10.assets[g10];
          if (m10.src.includes("base64")) {
            let T10 = tj(m10.src, ((u10 = m10.fileName) != null ? u10 : m10.type === "video") ? "image.png" : "image.mp4"), y10 = yield e14.callbacks.onAssetUpload(e14, T10, g10);
            y10 ? m10.src = y10 : m10.src = "";
          }
        }
      let h10 = yield fetch("/api/create", {method: "POST", mode: "no-cors", headers: {"Access-Control-Allow-Origin": "*", "Content-Type": "application/json"}, body: JSON.stringify({roomId: Utils.uniqueId(), pageId: e14.currentPageId, document: p10})}).then((g10) => g10.json());
      (h10 == null ? void 0 : h10.url) ? window.location.href = h10.url : x7.warn(h10 == null ? void 0 : h10.message);
    } catch (h10) {
      x7.warn(h10.message);
    }
    e14.setIsLoading(false);
  }), []);
  return ye.createElement(Root5, {dir: "ltr"}, ye.createElement(Cs, {id: "TD-MultiplayerMenuIcon", isActive: !!t13}, ye.createElement(Vl, null)), ye.createElement(xt, {variant: "menu", align: "start", id: "TD-MultiplayerMenu"}, ye.createElement(ue2, {id: "TD-Multiplayer-CopyInviteLink", onClick: a10, disabled: !t13}, ye.createElement(message_default, {id: "copy.invite.link"}), ye.createElement(qe, null, n10 ? ye.createElement(CheckIcon, null) : ye.createElement(ClipboardIcon, null))), ye.createElement(ue2, {id: "TD-Multiplayer-CopyReadOnlyLink", onClick: l10, disabled: !t13}, ye.createElement(message_default, {id: "copy.readonly.link"}), ye.createElement(qe, null, n10 ? ye.createElement(CheckIcon, null) : ye.createElement(ClipboardIcon, null))), ye.createElement(Je, {id: "TD-Multiplayer-CopyInviteLinkDivider"}), ye.createElement(ue2, {id: "TD-Multiplayer-CreateMultiplayerProject", onClick: r12}, ye.createElement("a", {href: "https://tldraw.com/r"}, ye.createElement(message_default, {id: "create.multiplayer.project"}))), ye.createElement(ue2, {id: "TD-Multiplayer-CopyToMultiplayerProject", onClick: c10}, ye.createElement(message_default, {id: "copy.multiplayer.project"}))));
});
function tj(s10, e14) {
  var l10, r12;
  let t13 = s10.split(","), n10 = (r12 = (l10 = t13[0]) == null ? void 0 : l10.match(/:(.*?);/)) == null ? void 0 : r12[1], o13 = window.atob(t13[1]), i10 = o13.length, a10 = new Uint8Array(i10);
  for (; i10--; )
    a10[i10] = o13.charCodeAt(i10);
  return new File([a10], e14, {type: n10});
}
function _l({readOnly: s10, showPages: e14, showMenu: t13, showStyles: n10, showZoom: o13, sponsor: i10, showMultiplayerMenu: a10}) {
  let l10 = ae();
  return it.createElement(nj, null, (t13 || e14) && it.createElement(Zn, {side: "left", id: "TD-MenuPanel"}, t13 && it.createElement(Al, {sponsor: i10, readOnly: s10}), a10 && it.createElement(Wl, null), e14 && it.createElement(Fl, null)), it.createElement(oj, null), (n10 || o13) && it.createElement(Zn, {side: "right"}, l10.readOnly ? it.createElement(sj, null, "Read Only") : it.createElement(it.Fragment, null, " ", it.createElement(pe2, null, it.createElement(ml, {onClick: l10.undo})), it.createElement(pe2, null, it.createElement(ul, {onClick: l10.redo}))), o13 && it.createElement(jl, null), n10 && !s10 && it.createElement(Gl, null)));
}
var nj = M3("div", {width: "100%", position: "absolute", top: 0, left: 0, right: 0, display: "flex", flexDirection: "row", pointerEvents: "none", "& > *": {pointerEvents: "all"}});
var oj = M3("div", {flexGrow: 2, pointerEvents: "none"});
var sj = M3("div", {width: "100%", display: "flex", alignItems: "center", justifyContent: "center", fontFamily: "$ui", fontSize: "$1", paddingLeft: "$4", paddingRight: "$1", userSelect: "none"});
var fj = (s10) => s10.document.pageStates[s10.appState.currentPageId].selectedIds.length;
var Sj = (s10) => s10.settings.isDebugMode;
var Tj = (s10) => s10.document.pageStates[s10.appState.currentPageId].selectedIds.some((e14) => s10.document.pages[s10.appState.currentPageId].shapes[e14].children !== void 0);
var bj = (s10) => s10.stopPropagation();
var Yl = ({onBlur: s10, children: e14}) => k4.createElement(Root11, {dir: "ltr"}, k4.createElement(Trigger6, {dir: "ltr"}, e14), k4.createElement(yj, {onBlur: s10}));
var yj = k4.memo(function({onBlur: e14}) {
  let t13 = ae(), n10 = useIntl(), o13 = t13.useStore(fj), i10 = t13.useStore(Sj), a10 = t13.useStore(Tj), l10 = k4.useRef(null), r12 = k4.useCallback(() => {
    t13.flipHorizontal();
  }, [t13]), c10 = k4.useCallback(() => {
    t13.flipVertical();
  }, [t13]), p10 = k4.useCallback(() => {
    t13.duplicate();
  }, [t13]), u10 = k4.useCallback(() => {
    t13.toggleLocked();
  }, [t13]), h10 = k4.useCallback(() => {
    t13.group();
  }, [t13]), g10 = k4.useCallback(() => {
    t13.moveToBack();
  }, [t13]), m10 = k4.useCallback(() => {
    t13.moveBackward();
  }, [t13]), T10 = k4.useCallback(() => {
    t13.moveForward();
  }, [t13]), y10 = k4.useCallback(() => {
    t13.moveToFront();
  }, [t13]), b10 = k4.useCallback(() => {
    t13.delete();
  }, [t13]), S10 = k4.useCallback(() => {
    t13.cut();
  }, [t13]), w10 = k4.useCallback(() => {
    t13.copy();
  }, [t13]), D10 = k4.useCallback(() => {
    t13.paste();
  }, [t13]), B10 = k4.useCallback(() => {
    t13.copyImage("svg", {scale: 1, quality: 1, transparentBackground: false});
  }, [t13]), I10 = k4.useCallback(() => {
    t13.copyImage("png", {scale: 2, quality: 1, transparentBackground: true});
  }, [t13]), P10 = k4.useCallback(() => {
    t13.undo();
  }, [t13]), v10 = k4.useCallback(() => {
    t13.redo();
  }, [t13]), Q = k4.useCallback(() => ee(this, null, function* () {
    t13.exportImage("png", {scale: 2, quality: 1, transparentBackground: true});
  }), [t13]), oe2 = k4.useCallback(() => ee(this, null, function* () {
    t13.exportImage("jpeg", {scale: 2, quality: 1, transparentBackground: false});
  }), [t13]), te = k4.useCallback(() => ee(this, null, function* () {
    t13.exportImage("webp", {scale: 2, quality: 1, transparentBackground: false});
  }), [t13]), ke = k4.useCallback(() => ee(this, null, function* () {
    t13.exportImage("svg", {scale: 1, quality: 1, transparentBackground: false});
  }), [t13]), be2 = k4.useCallback(() => ee(this, null, function* () {
    t13.copyJson();
  }), [t13]), xe = k4.useCallback(() => ee(this, null, function* () {
    t13.exportJson();
  }), [t13]), Me = o13 > 0, Fe = o13 > 1, We = o13 > 2;
  return k4.createElement(Content8, {dir: "ltr", ref: l10, onEscapeKeyDown: bj, asChild: true, tabIndex: -1, onBlur: e14}, k4.createElement(Bt, {id: "TD-ContextMenu"}, Me ? k4.createElement(k4.Fragment, null, k4.createElement(De, {onClick: p10, kbd: "#D", id: "TD-ContextMenu-Duplicate"}, k4.createElement(message_default, {id: "duplicate"})), k4.createElement(De, {onClick: r12, kbd: "\u21E7H", id: "TD-ContextMenu-Flip_Horizontal"}, k4.createElement(message_default, {id: "flip.horizontal"})), k4.createElement(De, {onClick: c10, kbd: "\u21E7V", id: "TD-ContextMenu-Flip_Vertical"}, k4.createElement(message_default, {id: "flip.vertical"})), k4.createElement(De, {onClick: u10, kbd: "#\u21E7L", id: "TD-ContextMenu- Lock_Unlock"}, k4.createElement(message_default, {id: "lock"}), " / ", k4.createElement(message_default, {id: "unlock"})), (Fe || a10) && k4.createElement(ut, null), Fe && k4.createElement(De, {onClick: h10, kbd: "#G", id: "TD-ContextMenu-Group"}, k4.createElement(message_default, {id: "group"})), a10 && k4.createElement(De, {onClick: h10, kbd: "#G", id: "TD-ContextMenu-Ungroup"}, k4.createElement(message_default, {id: "ungroup"})), k4.createElement(ut, null), k4.createElement(pr, {label: n10.formatMessage({id: "move"}), id: "TD-ContextMenu-Move"}, k4.createElement(De, {onClick: y10, kbd: "\u21E7]", id: "TD-ContextMenu-Move-To_Front"}, k4.createElement(message_default, {id: "to.front"})), k4.createElement(De, {onClick: T10, kbd: "]", id: "TD-ContextMenu-Move-Forward"}, k4.createElement(message_default, {id: "forward"})), k4.createElement(De, {onClick: m10, kbd: "[", id: "TD-ContextMenu-Move-Backward"}, k4.createElement(message_default, {id: "backward"})), k4.createElement(De, {onClick: g10, kbd: "\u21E7[", id: "TD-ContextMenu-Move-To_Back"}, k4.createElement(message_default, {id: "back"}))), k4.createElement(vj, null), Fe && k4.createElement(wj, {hasTwoOrMore: Fe, hasThreeOrMore: We}), k4.createElement(ut, null), k4.createElement(De, {onClick: S10, kbd: "#X", id: "TD-ContextMenu-Cut"}, k4.createElement(message_default, {id: "cut"})), k4.createElement(De, {onClick: w10, kbd: "#C", id: "TD-ContextMenu-Copy"}, k4.createElement(message_default, {id: "copy"})), k4.createElement(De, {onClick: D10, kbd: "#V", id: "TD-ContextMenu-Paste"}, k4.createElement(message_default, {id: "paste"})), k4.createElement(ut, null), k4.createElement(pr, {label: `${n10.formatMessage({id: "copy.as"})}...`, size: "small", id: "TD-ContextMenu-Copy-As"}, k4.createElement(De, {onClick: B10, id: "TD-ContextMenu-Copy-as-SVG"}, "SVG"), k4.createElement(De, {onClick: I10, id: "TD-ContextMenu-Copy-As-PNG"}, "PNG"), i10 && k4.createElement(De, {onClick: be2, id: "TD-ContextMenu-Copy_as_JSON"}, "JSON")), k4.createElement(pr, {label: `${n10.formatMessage({id: "export.as"})}...`, size: "small", id: "TD-ContextMenu-Export"}, k4.createElement(De, {onClick: ke, id: "TD-ContextMenu-Export-SVG"}, "SVG"), k4.createElement(De, {onClick: Q, id: "TD-ContextMenu-Export-PNG"}, "PNG"), k4.createElement(De, {onClick: oe2, id: "TD-ContextMenu-Export-JPG"}, "JPG"), k4.createElement(De, {onClick: te, id: "TD-ContextMenu-Export-WEBP"}, "WEBP"), i10 && k4.createElement(De, {onClick: xe, id: "TD-ContextMenu-Export-JSON"}, "JSON")), k4.createElement(ut, null), k4.createElement(De, {onClick: b10, kbd: "\u232B", id: "TD-ContextMenu-Delete"}, k4.createElement(message_default, {id: "delete"}))) : k4.createElement(k4.Fragment, null, k4.createElement(De, {onClick: D10, kbd: "#V", id: "TD-ContextMenu-Paste"}, k4.createElement(message_default, {id: "paste"})), k4.createElement(De, {onClick: P10, kbd: "#Z", id: "TD-ContextMenu-Undo"}, k4.createElement(message_default, {id: "undo"})), k4.createElement(De, {onClick: v10, kbd: "#\u21E7Z", id: "TD-ContextMenu-Redo"}, k4.createElement(message_default, {id: "redo"})))));
});
function wj({hasThreeOrMore: s10}) {
  let e14 = ae(), t13 = k4.useCallback(() => {
    e14.align("top");
  }, [e14]), n10 = k4.useCallback(() => {
    e14.align("centerVertical");
  }, [e14]), o13 = k4.useCallback(() => {
    e14.align("bottom");
  }, [e14]), i10 = k4.useCallback(() => {
    e14.stretch("vertical");
  }, [e14]), a10 = k4.useCallback(() => {
    e14.distribute("vertical");
  }, [e14]), l10 = k4.useCallback(() => {
    e14.align("left");
  }, [e14]), r12 = k4.useCallback(() => {
    e14.align("centerHorizontal");
  }, [e14]), c10 = k4.useCallback(() => {
    e14.align("right");
  }, [e14]), p10 = k4.useCallback(() => {
    e14.stretch("horizontal");
  }, [e14]), u10 = k4.useCallback(() => {
    e14.distribute("horizontal");
  }, [e14]);
  return k4.createElement("span", {id: "TD-ContextMenu-Align_Duplicate"}, k4.createElement(Root11, {dir: "ltr"}, k4.createElement(hr, {isSubmenu: true}, "Align / Distribute"), k4.createElement(Content8, {asChild: true, sideOffset: 2, alignOffset: -2}, k4.createElement(xj, {numberOfSelected: s10 ? "threeOrMore" : "twoOrMore"}, k4.createElement(tn, {onClick: l10, id: "TD-ContextMenu-Align_Duplicate-AlignLeft"}, k4.createElement(AlignLeftIcon, null)), k4.createElement(tn, {onClick: r12, id: "TD-ContextMenu-Align_Duplicate-AlignCenterHorizontal"}, k4.createElement(AlignCenterHorizontallyIcon, null)), k4.createElement(tn, {onClick: c10, id: "TD-ContextMenu-Align_Duplicate-AlignRight"}, k4.createElement(AlignRightIcon, null)), k4.createElement(tn, {onClick: p10, id: "TD-ContextMenu-Align_Duplicate-StretchHorizontal"}, k4.createElement(StretchHorizontallyIcon, null)), s10 && k4.createElement(tn, {onClick: u10, id: "TD-ContextMenu-Align_Duplicate-SpaceEvenlyHorizontal"}, k4.createElement(SpaceEvenlyHorizontallyIcon, null)), k4.createElement(tn, {onClick: t13, id: "TD-ContextMenu-Align_Duplicate-AlignTop"}, k4.createElement(AlignTopIcon, null)), k4.createElement(tn, {onClick: n10, id: "TD-ContextMenu-Align_Duplicate-AlignCenterVertical"}, k4.createElement(AlignCenterVerticallyIcon, null)), k4.createElement(tn, {onClick: o13, id: "TD-ContextMenu-Align_Duplicate-AlignBottom"}, k4.createElement(AlignBottomIcon, null)), k4.createElement(tn, {onClick: i10, id: "TD-ContextMenu-Align_Duplicate-StretchVertical"}, k4.createElement(StretchVerticallyIcon, null)), s10 && k4.createElement(tn, {onClick: a10, id: "TD-ContextMenu-Align_Duplicate-SpaceEvenlyVertical"}, k4.createElement(SpaceEvenlyVerticallyIcon, null)), k4.createElement(ur, {offset: 13})))));
}
var xj = M3(Bt, {display: "grid", variants: {numberOfSelected: {threeOrMore: {gridTemplateColumns: "repeat(5, auto)"}, twoOrMore: {gridTemplateColumns: "repeat(4, auto)"}}}});
var Ij = (s10) => s10.appState.currentPageId;
var Cj = (s10) => s10.document.pages;
function vj() {
  let s10 = ae(), e14 = s10.useStore(Ij), t13 = s10.useStore(Cj), n10 = Object.values(t13).sort((o13, i10) => (o13.childIndex || 0) - (i10.childIndex || 0)).filter((o13) => o13.id !== e14);
  return n10.length === 0 ? null : k4.createElement(Root11, {dir: "ltr"}, k4.createElement(hr, {isSubmenu: true}, k4.createElement(message_default, {id: "move.to.page"})), k4.createElement(Content8, {dir: "ltr", sideOffset: 2, alignOffset: -2, asChild: true}, k4.createElement(Bt, null, n10.map(({id: o13, name: i10}, a10) => k4.createElement(De, {key: o13, disabled: o13 === e14, onClick: () => s10.moveToPage(o13)}, i10 || `Page ${a10}`)), k4.createElement(ur, {offset: 13}))));
}
function pr({children: s10, label: e14, size: t13, id: n10}) {
  return k4.createElement("span", {id: n10}, k4.createElement(Root11, {dir: "ltr"}, k4.createElement(hr, {isSubmenu: true}, e14), k4.createElement(Content8, {dir: "ltr", sideOffset: 2, alignOffset: -2, asChild: true}, k4.createElement(Bt, {size: t13}, s10, k4.createElement(ur, {offset: 13})))));
}
var ur = M3(ContextMenuArrow, {fill: "$panel"});
function tn(t13) {
  var n10 = t13, {onSelect: s10} = n10, e14 = _e(n10, ["onSelect"]);
  return k4.createElement(ContextMenuItem, {dir: "ltr", onSelect: s10, asChild: true}, k4.createElement(pe2, f8({}, e14)));
}
var De = (t13) => {
  var n10 = t13, {id: s10} = n10, e14 = _e(n10, ["id"]);
  return k4.createElement(ContextMenuItem, {asChild: true, id: s10}, k4.createElement(Be, f8({}, e14)));
};
var hr = (t13) => {
  var n10 = t13, {isSubmenu: s10} = n10, e14 = _e(n10, ["isSubmenu"]);
  return k4.createElement(ContextMenuTriggerItem, {asChild: true}, k4.createElement(Be, f8({hasArrow: s10}, e14)));
};
function Zl({onSelect: s10}) {
  return Es.createElement(Dj, null, Es.createElement(go, {onClick: s10}, Es.createElement(DotFilledIcon, null)));
}
var Dj = M3("div", {opacity: 1, zIndex: 100, backgroundColor: "transparent", "& svg": {color: "$text"}, "&:hover svg": {color: "$text"}});
var Bj = (s10) => s10.appState.isLoading;
function gr() {
  let e14 = ae().useStore(Bj);
  return mr.createElement(Mj, {hidden: !e14}, mr.createElement(message_default, {id: "loading", values: {dots: "..."}}));
}
var Mj = M3("div", {position: "absolute", top: 0, left: "50%", transform: "translate(-50%, 0)", borderBottomLeftRadius: "12px", borderBottomRightRadius: "12px", padding: "8px 16px", fontFamily: "var(--fonts-ui)", fontSize: "var(--fontSizes-1)", boxShadow: "var(--shadows-panel)", backgroundColor: "white", zIndex: 200, pointerEvents: "none", "& > div > *": {pointerEvents: "all"}, variants: {transform: {hidden: {transform: "translate(-50%, 100%)"}, visible: {transform: "translate(-50%, 0%)"}}}});
function Xl({error: s10, resetErrorBoundary: e14}) {
  let t13 = ae(), n10 = () => {
    window.location.reload(), e14();
  }, o13 = () => {
    let l10 = document.createElement("textarea");
    l10.value = s10.message, document.body.appendChild(l10), l10.select(), document.execCommand("copy"), l10.remove();
  }, i10 = () => {
    t13.saveProjectAs();
  }, a10 = () => {
    t13.resetDocument(), e14();
  };
  return Mt.createElement(Ej, null, Mt.createElement(Rj, null, Mt.createElement("div", null, "We've encountered an error!"), Mt.createElement("pre", null, Mt.createElement("code", null, s10.message)), Mt.createElement(Lj, null, Mt.createElement(Be, {onClick: o13}, "Copy Error"), Mt.createElement(Be, {onClick: n10}, "Refresh Page")), Mt.createElement(ut, null), Mt.createElement("p", null, "Keep getting this error?", " ", Mt.createElement("a", {onClick: i10, title: "Download your project"}, "Download your project"), " ", "as a backup and then", " ", Mt.createElement("a", {onClick: a10, title: "Reset the document"}, "reset the document"), ".")));
}
var Ej = M3("div", {position: "absolute", top: 0, left: 0, width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center", backgroundColor: "$canvas"});
var Rj = M3("div", {backgroundColor: "$panel", border: "1px solid $panelContrast", padding: "$5", borderRadius: 8, boxShadow: "$panel", maxWidth: 320, color: "$text", fontFamily: "$ui", fontSize: "$2", textAlign: "center", display: "flex", flexDirection: "column", gap: "$3", "& > pre": {marginTop: "$3", marginBottom: "$3", textAlign: "left", whiteSpace: "pre-wrap", backgroundColor: "$hover", padding: "$4", borderRadius: "$2", fontFamily: '"Menlo", "Monaco", monospace', fontWeight: 500}, "& p": {fontFamily: "$body", lineHeight: 1.7, padding: "$5", margin: 0}, "& a": {color: "$text", cursor: "pointer", textDecoration: "underline"}, "& hr": {marginLeft: "-$5", marginRight: "-$5"}});
var Lj = M3("div", {display: "flex", "& > button > div": {justifyContent: "center", textAlign: "center"}});
var Oj = import_react_error_boundary.ErrorBoundary;
function Kle({id: s10, document: e14, currentPageId: t13, autofocus: n10 = true, showMenu: o13 = true, showMultiplayerMenu: i10 = true, showPages: a10 = true, showTools: l10 = true, showZoom: r12 = true, showStyles: c10 = true, showUI: p10 = true, readOnly: u10 = false, disableAssets: h10 = false, darkMode: g10 = false, showSponsorLink: m10, onMount: T10, onChange: y10, onChangePresence: b10, onNewProject: S10, onSaveProject: w10, onSaveProjectAs: D10, onOpenProject: B10, onOpenMedia: I10, onSignOut: P10, onSignIn: v10, onUndo: Q, onRedo: oe2, onPersist: te, onPatch: ke, onCommand: be2, onChangePage: xe, onAssetCreate: Me, onAssetDelete: Fe, onAssetUpload: We, onSessionStart: ot, onSessionEnd: Tt, onExport: Xn}) {
  let [Un, Rs] = ge2.useState(s10), [Ie, So] = ge2.useState(() => new Sn(s10, {onMount: T10, onChange: y10, onChangePresence: b10, onNewProject: S10, onSaveProject: w10, onSaveProjectAs: D10, onOpenProject: B10, onOpenMedia: I10, onSignOut: P10, onSignIn: v10, onUndo: Q, onRedo: oe2, onPersist: te, onPatch: ke, onCommand: be2, onChangePage: xe, onAssetDelete: Fe, onAssetCreate: Me, onAssetUpload: We, onSessionStart: ot, onSessionEnd: Tt}));
  return ge2.useLayoutEffect(() => {
    if (s10 === Un)
      return;
    let nn2 = new Sn(s10, {onMount: T10, onChange: y10, onChangePresence: b10, onNewProject: S10, onSaveProject: w10, onSaveProjectAs: D10, onOpenProject: B10, onOpenMedia: I10, onSignOut: P10, onSignIn: v10, onUndo: Q, onRedo: oe2, onPersist: te, onPatch: ke, onCommand: be2, onChangePage: xe, onAssetDelete: Fe, onAssetCreate: Me, onAssetUpload: We, onExport: Xn, onSessionStart: ot, onSessionEnd: Tt});
    Rs(s10), So(nn2);
  }, [Un, s10]), ge2.useEffect(() => {
    !e14 || (e14.id === Ie.document.id ? Ie.updateDocument(e14) : Ie.loadDocument(e14));
  }, [e14, Ie]), ge2.useEffect(() => {
    Ie.setDisableAssets(h10);
  }, [Ie, h10]), ge2.useEffect(() => {
    !t13 || Ie.changePage(t13);
  }, [t13, Ie]), ge2.useEffect(() => {
    Ie.readOnly = u10, u10 || (Ie.selectNone(), Ie.cancelSession(), Ie.setEditingId());
  }, [Ie, u10]), ge2.useEffect(() => {
    g10 !== Ie.settings.isDarkMode && Ie.toggleDarkMode();
  }, [Ie, g10]), ge2.useEffect(() => {
    Ie.callbacks = {onMount: T10, onChange: y10, onChangePresence: b10, onNewProject: S10, onSaveProject: w10, onSaveProjectAs: D10, onOpenProject: B10, onOpenMedia: I10, onSignOut: P10, onSignIn: v10, onUndo: Q, onRedo: oe2, onPersist: te, onPatch: ke, onCommand: be2, onChangePage: xe, onAssetDelete: Fe, onAssetCreate: Me, onAssetUpload: We, onExport: Xn, onSessionStart: ot, onSessionEnd: Tt};
  }, [T10, y10, b10, S10, w10, D10, B10, I10, P10, v10, Q, oe2, te, ke, be2, xe, Fe, Me, We, Xn, ot, Tt]), ge2.useLayoutEffect(() => {
    var fr;
    if (typeof window == "undefined" || !((fr = window.document) == null ? void 0 : fr.fonts))
      return;
    function nn2() {
      Ie.refreshBoundingBoxes();
    }
    return window.document.fonts.addEventListener("loadingdone", nn2), () => {
      window.document.fonts.removeEventListener("loadingdone", nn2);
    };
  }, [Ie]), ge2.createElement(ji.Provider, {value: Ie}, ge2.createElement(Fj, {key: Un || "Tldraw", id: Un, autofocus: n10, showPages: a10, showMenu: o13, showMultiplayerMenu: i10, showStyles: c10, showZoom: r12, showTools: l10, showUI: p10, showSponsorLink: m10, readOnly: u10}));
}
var Fj = ge2.memo(function({id: e14, autofocus: t13, showPages: n10, showMenu: o13, showMultiplayerMenu: i10, showZoom: a10, showStyles: l10, showTools: r12, showSponsorLink: c10, readOnly: p10, showUI: u10}) {
  var Tt, Xn;
  let h10 = ae(), g10 = ge2.useRef(null), m10 = h10.useStore(), {document: T10, settings: y10, appState: b10, room: S10} = m10, w10 = m10.appState.activeTool === "select", D10 = T10.pages[b10.currentPageId], B10 = T10.pageStates[D10.id], I10 = T10.assets, {selectedIds: P10} = B10, v10 = P10.length === 1 && D10.shapes[P10[0]] && x7.getShapeUtil(D10.shapes[P10[0]].type).hideBounds, Q = P10.length === 1 && D10.shapes[P10[0]] && x7.getShapeUtil(D10.shapes[P10[0]].type).hideResizeHandles, oe2 = ge2.useMemo(() => ({isDarkMode: y10.isDarkMode}), [y10.isDarkMode]), te = y10.isCadSelectMode ? !b10.selectByContain : b10.selectByContain, ke = ge2.useMemo(() => {
    let {selectByContain: Un} = b10, {isDarkMode: Rs, isCadSelectMode: Ie} = y10;
    if (Rs) {
      let nn2 = Ie ? Un ? "69, 155, 255" : "105, 209, 73" : "180, 180, 180";
      return {brushFill: `rgba(${nn2}, ${Ie ? 0.08 : 0.05})`, brushStroke: `rgba(${nn2}, ${Ie ? 0.5 : 0.25})`, brushDashStroke: `rgba(${nn2}, .6)`, selected: "rgba(38, 150, 255, 1.000)", selectFill: "rgba(38, 150, 255, 0.05)", background: "#212529", foreground: "#49555f"};
    }
    let So = Ie ? Un ? "0, 89, 242" : "51, 163, 23" : "0,0,0";
    return {brushFill: `rgba(${So}, ${Ie ? 0.08 : 0.05})`, brushStroke: `rgba(${So}, ${Ie ? 0.4 : 0.25})`, brushDashStroke: `rgba(${So}, .6)`};
  }, [y10.isDarkMode, y10.isCadSelectMode, b10.selectByContain]), be2 = h10.session !== void 0, xe = be2 && ((Tt = h10.session) == null ? void 0 : Tt.constructor.name) !== "BrushSession" || !w10 || v10 || !!B10.editingId, Me = be2 || !w10, Fe = be2 && m10.appState.status !== "brushing" || !w10, We = be2 || !w10 || !y10.showCloneHandles || B10.camera.zoom < 0.2, ot = il(y10.language);
  return ge2.useLayoutEffect(() => {
    y10.isDarkMode ? window.document.body.classList.add(As) : window.document.body.classList.remove(As);
  }, [y10.isDarkMode]), ge2.createElement(provider_default, {locale: ot.locale, messages: ot.messages}, ge2.createElement(Uj, {ref: g10, tabIndex: -0}, ge2.createElement(gr, null), ge2.createElement(jj, {focusableRef: g10, autofocus: t13}), ge2.createElement(Yl, null, ge2.createElement(Oj, {FallbackComponent: Xl}, ge2.createElement(Renderer, {id: e14, containerRef: g10, shapeUtils: mn, page: D10, pageState: B10, assets: I10, snapLines: b10.snapLines, eraseLine: b10.eraseLine, grid: 8, users: S10 == null ? void 0 : S10.users, userId: S10 == null ? void 0 : S10.userId, theme: ke, meta: oe2, hideBounds: xe, hideHandles: Me, hideResizeHandles: Q, hideIndicators: Fe, hideBindingHandles: !y10.showBindingHandles, hideCloneHandles: We, hideRotateHandles: !y10.showRotateHandles, hideGrid: !y10.showGrid, showDashedBrush: te, performanceMode: (Xn = h10.session) == null ? void 0 : Xn.performanceMode, onPinchStart: h10.onPinchStart, onPinchEnd: h10.onPinchEnd, onPinch: h10.onPinch, onPan: h10.onPan, onZoom: h10.onZoom, onPointerDown: h10.onPointerDown, onPointerMove: h10.onPointerMove, onPointerUp: h10.onPointerUp, onPointCanvas: h10.onPointCanvas, onDoubleClickCanvas: h10.onDoubleClickCanvas, onRightPointCanvas: h10.onRightPointCanvas, onDragCanvas: h10.onDragCanvas, onReleaseCanvas: h10.onReleaseCanvas, onPointShape: h10.onPointShape, onDoubleClickShape: h10.onDoubleClickShape, onRightPointShape: h10.onRightPointShape, onDragShape: h10.onDragShape, onHoverShape: h10.onHoverShape, onUnhoverShape: h10.onUnhoverShape, onReleaseShape: h10.onReleaseShape, onPointBounds: h10.onPointBounds, onDoubleClickBounds: h10.onDoubleClickBounds, onRightPointBounds: h10.onRightPointBounds, onDragBounds: h10.onDragBounds, onHoverBounds: h10.onHoverBounds, onUnhoverBounds: h10.onUnhoverBounds, onReleaseBounds: h10.onReleaseBounds, onPointBoundsHandle: h10.onPointBoundsHandle, onDoubleClickBoundsHandle: h10.onDoubleClickBoundsHandle, onRightPointBoundsHandle: h10.onRightPointBoundsHandle, onDragBoundsHandle: h10.onDragBoundsHandle, onHoverBoundsHandle: h10.onHoverBoundsHandle, onUnhoverBoundsHandle: h10.onUnhoverBoundsHandle, onReleaseBoundsHandle: h10.onReleaseBoundsHandle, onPointHandle: h10.onPointHandle, onDoubleClickHandle: h10.onDoubleClickHandle, onRightPointHandle: h10.onRightPointHandle, onDragHandle: h10.onDragHandle, onHoverHandle: h10.onHoverHandle, onUnhoverHandle: h10.onUnhoverHandle, onReleaseHandle: h10.onReleaseHandle, onError: h10.onError, onRenderCountChange: h10.onRenderCountChange, onShapeChange: h10.onShapeChange, onShapeBlur: h10.onShapeBlur, onShapeClone: h10.onShapeClone, onBoundsChange: h10.updateBounds, onKeyDown: h10.onKeyDown, onKeyUp: h10.onKeyUp, onDragOver: h10.onDragOver, onDrop: h10.onDrop}))), u10 && ge2.createElement(Gj, null, y10.isFocusMode ? ge2.createElement(Zl, {onSelect: h10.toggleFocusMode}) : ge2.createElement(ge2.Fragment, null, ge2.createElement(_l, {readOnly: p10, showPages: n10, showMenu: o13, showMultiplayerMenu: i10, showStyles: l10, showZoom: a10, sponsor: c10}), ge2.createElement(Vj, null), r12 && !p10 && ge2.createElement(El, null)))));
});
var jj = ge2.memo(function({focusableRef: e14, autofocus: t13}) {
  return Ld(e14), Hd(), ge2.useEffect(() => {
    var n10;
    t13 && ((n10 = e14.current) == null || n10.focus());
  }, [t13]), null;
});
var Uj = M3("div", {position: "absolute", height: "100%", width: "100%", minHeight: 0, minWidth: 0, maxHeight: "100%", maxWidth: "100%", overflow: "hidden", boxSizing: "border-box", outline: "none", "& .tl-container": {position: "absolute", top: 0, left: 0, height: "100%", width: "100%", zIndex: 1}, "& input, textarea, button, select, label, button": {webkitTouchCallout: "none", webkitUserSelect: "none", "-webkit-tap-highlight-color": "transparent", "tap-highlight-color": "transparent"}});
var Gj = M3("div", {position: "absolute", top: 0, left: 0, height: "100%", width: "100%", padding: "8px 8px 0 8px", display: "flex", alignItems: "flex-start", justifyContent: "flex-start", pointerEvents: "none", zIndex: 2, "& > *": {pointerEvents: "all"}});
var Vj = M3("div", {flexGrow: 2});
// @license © 2020 Google LLC. Licensed under the Apache License, Version 2.0.

// ../../node_modules/@liveblocks/client/shared.mjs
var _emittedDeprecationWarnings = new Set();
function throwUsageError(message) {
  if (true) {
    const usageError = new Error(message);
    throw usageError.name = "Usage error", usageError;
  }
}
function errorIf(condition, message) {
  condition && throwUsageError(message);
}
function __rest5(s10, e14) {
  var t13 = {};
  for (var p10 in s10)
    Object.prototype.hasOwnProperty.call(s10, p10) && e14.indexOf(p10) < 0 && (t13[p10] = s10[p10]);
  if (s10 != null && typeof Object.getOwnPropertySymbols == "function") {
    var i10 = 0;
    for (p10 = Object.getOwnPropertySymbols(s10); i10 < p10.length; i10++)
      e14.indexOf(p10[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s10, p10[i10]) && (t13[p10[i10]] = s10[p10[i10]]);
  }
  return t13;
}
function assertNever(_value, errmsg) {
  throw new Error(errmsg);
}
function nn(value, errmsg = "Expected value to be non-nullable") {
  return function(condition, errmsg2) {
    if (!condition) {
      const err = new Error(errmsg2);
      throw err.name = "Assertion failure", err;
    }
  }(value != null, errmsg), value;
}
var ClientMsgCode;
var OpCode;
var CrdtType;
var ServerMsgCode;
var WebsocketCloseCodes;
var OpSource;
function isRootCrdt(crdt) {
  return crdt.type === CrdtType.OBJECT && !isChildCrdt(crdt);
}
function isChildCrdt(crdt) {
  return crdt.parentId !== void 0 && crdt.parentKey !== void 0;
}
function isRoomEventName(value) {
  return value === "my-presence" || value === "others" || value === "event" || value === "error" || value === "connection";
}
function HasParent(node, key) {
  return Object.freeze({type: "HasParent", node, key});
}
!function(ClientMsgCode2) {
  ClientMsgCode2[ClientMsgCode2.UPDATE_PRESENCE = 100] = "UPDATE_PRESENCE", ClientMsgCode2[ClientMsgCode2.BROADCAST_EVENT = 103] = "BROADCAST_EVENT", ClientMsgCode2[ClientMsgCode2.FETCH_STORAGE = 200] = "FETCH_STORAGE", ClientMsgCode2[ClientMsgCode2.UPDATE_STORAGE = 201] = "UPDATE_STORAGE";
}(ClientMsgCode || (ClientMsgCode = {})), function(OpCode2) {
  OpCode2[OpCode2.INIT = 0] = "INIT", OpCode2[OpCode2.SET_PARENT_KEY = 1] = "SET_PARENT_KEY", OpCode2[OpCode2.CREATE_LIST = 2] = "CREATE_LIST", OpCode2[OpCode2.UPDATE_OBJECT = 3] = "UPDATE_OBJECT", OpCode2[OpCode2.CREATE_OBJECT = 4] = "CREATE_OBJECT", OpCode2[OpCode2.DELETE_CRDT = 5] = "DELETE_CRDT", OpCode2[OpCode2.DELETE_OBJECT_KEY = 6] = "DELETE_OBJECT_KEY", OpCode2[OpCode2.CREATE_MAP = 7] = "CREATE_MAP", OpCode2[OpCode2.CREATE_REGISTER = 8] = "CREATE_REGISTER";
}(OpCode || (OpCode = {})), function(CrdtType2) {
  CrdtType2[CrdtType2.OBJECT = 0] = "OBJECT", CrdtType2[CrdtType2.LIST = 1] = "LIST", CrdtType2[CrdtType2.MAP = 2] = "MAP", CrdtType2[CrdtType2.REGISTER = 3] = "REGISTER";
}(CrdtType || (CrdtType = {})), function(ServerMsgCode2) {
  ServerMsgCode2[ServerMsgCode2.UPDATE_PRESENCE = 100] = "UPDATE_PRESENCE", ServerMsgCode2[ServerMsgCode2.USER_JOINED = 101] = "USER_JOINED", ServerMsgCode2[ServerMsgCode2.USER_LEFT = 102] = "USER_LEFT", ServerMsgCode2[ServerMsgCode2.BROADCASTED_EVENT = 103] = "BROADCASTED_EVENT", ServerMsgCode2[ServerMsgCode2.ROOM_STATE = 104] = "ROOM_STATE", ServerMsgCode2[ServerMsgCode2.INITIAL_STORAGE_STATE = 200] = "INITIAL_STORAGE_STATE", ServerMsgCode2[ServerMsgCode2.UPDATE_STORAGE = 201] = "UPDATE_STORAGE";
}(ServerMsgCode || (ServerMsgCode = {})), function(WebsocketCloseCodes2) {
  WebsocketCloseCodes2[WebsocketCloseCodes2.CLOSE_ABNORMAL = 1006] = "CLOSE_ABNORMAL", WebsocketCloseCodes2[WebsocketCloseCodes2.INVALID_MESSAGE_FORMAT = 4e3] = "INVALID_MESSAGE_FORMAT", WebsocketCloseCodes2[WebsocketCloseCodes2.NOT_ALLOWED = 4001] = "NOT_ALLOWED", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_MESSAGES_PER_SECONDS = 4002] = "MAX_NUMBER_OF_MESSAGES_PER_SECONDS", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS = 4003] = "MAX_NUMBER_OF_CONCURRENT_CONNECTIONS", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP = 4004] = "MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM = 4005] = "MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM", WebsocketCloseCodes2[WebsocketCloseCodes2.CLOSE_WITHOUT_RETRY = 4999] = "CLOSE_WITHOUT_RETRY";
}(WebsocketCloseCodes || (WebsocketCloseCodes = {})), function(OpSource2) {
  OpSource2[OpSource2.UNDOREDO_RECONNECT = 0] = "UNDOREDO_RECONNECT", OpSource2[OpSource2.REMOTE = 1] = "REMOTE", OpSource2[OpSource2.ACK = 2] = "ACK";
}(OpSource || (OpSource = {}));
var NoParent = Object.freeze({type: "NoParent"});
function Orphaned(oldKey) {
  return Object.freeze({type: "Orphaned", oldKey});
}
var AbstractCrdt = class {
  constructor() {
    this._parent = NoParent;
  }
  _getParentKeyOrThrow() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.key;
      case "NoParent":
        throw new Error("Parent key is missing");
      case "Orphaned":
        return this.parent.oldKey;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  get _doc() {
    return this.__doc;
  }
  get roomId() {
    return this.__doc ? this.__doc.roomId : null;
  }
  get _id() {
    return this.__id;
  }
  get parent() {
    return this._parent;
  }
  get _parentNode() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.node;
      case "NoParent":
      case "Orphaned":
        return null;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  get _parentKey() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.key;
      case "NoParent":
        return null;
      case "Orphaned":
        return this.parent.oldKey;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  _apply(op, _isLocal) {
    return op.type === OpCode.DELETE_CRDT && this.parent.type === "HasParent" ? this.parent.node._detachChild(this) : {modified: false};
  }
  _setParentLink(newParentNode, newParentKey) {
    switch (this.parent.type) {
      case "HasParent":
        if (this.parent.node !== newParentNode)
          throw new Error("Cannot attach parent if it already exist");
        return void (this._parent = HasParent(newParentNode, newParentKey));
      case "Orphaned":
      case "NoParent":
        return void (this._parent = HasParent(newParentNode, newParentKey));
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  _attach(id2, doc) {
    if (this.__id || this.__doc)
      throw new Error("Cannot attach if CRDT is already attached");
    doc.addItem(id2, this), this.__id = id2, this.__doc = doc;
  }
  _detach() {
    switch (this.__doc && this.__id && this.__doc.deleteItem(this.__id), this.parent.type) {
      case "HasParent":
        this._parent = Orphaned(this.parent.key);
        break;
      case "NoParent":
        this._parent = NoParent;
        break;
      case "Orphaned":
        this._parent = Orphaned(this.parent.oldKey);
        break;
      default:
        assertNever(this.parent, "Unknown state");
    }
    this.__doc = void 0;
  }
};
var LiveRegister = class extends AbstractCrdt {
  constructor(data) {
    super(), this._data = data;
  }
  get data() {
    return this._data;
  }
  static _deserialize([id2, item], _parentToChildren, doc) {
    const register = new LiveRegister(item.data);
    return register._attach(id2, doc), register;
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null || parentId == null || parentKey == null)
      throw new Error("Cannot serialize register if parentId or parentKey is undefined");
    return [
      {
        type: OpCode.CREATE_REGISTER,
        opId: doc == null ? void 0 : doc.generateOpId(),
        id: this._id,
        parentId,
        parentKey,
        data: this.data
      }
    ];
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveRegister if parent is missing");
    return {
      type: CrdtType.REGISTER,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key,
      data: this.data
    };
  }
  _attachChild(_op) {
    throw new Error("Method not implemented.");
  }
  _detachChild(_crdt) {
    throw new Error("Method not implemented.");
  }
  _apply(op, isLocal) {
    return super._apply(op, isLocal);
  }
};
function makePosition(before, after) {
  return before != null && after != null ? pos(makePositionFromCodes(posCodes(before), posCodes(after))) : before != null ? function(before2) {
    const result = [], beforeCodes = posCodes(before2);
    for (let i10 = 0; i10 < beforeCodes.length; i10++) {
      const code3 = beforeCodes[i10];
      if (code3 !== 126) {
        result.push(code3 + 1);
        break;
      }
      if (result.push(code3), beforeCodes.length - 1 === i10) {
        result.push(33);
        break;
      }
    }
    return pos(result);
  }(before) : after != null ? function(after2) {
    const result = [], afterCodes = posCodes(after2);
    for (let i10 = 0; i10 < afterCodes.length; i10++) {
      const code3 = afterCodes[i10];
      if (!(code3 <= 33)) {
        result.push(code3 - 1);
        break;
      }
      if (result.push(32), afterCodes.length - 1 === i10) {
        result.push(126);
        break;
      }
    }
    return pos(result);
  }(after) : pos([33]);
}
function makePositionFromCodes(before, after) {
  let index2 = 0;
  const result = [];
  for (; ; ) {
    const beforeDigit = before[index2] || 32, afterDigit = after[index2] || 126;
    if (beforeDigit > afterDigit)
      throw new Error(`Impossible to generate position between ${before} and ${after}`);
    if (beforeDigit === afterDigit) {
      result.push(beforeDigit), index2++;
      continue;
    }
    if (afterDigit - beforeDigit == 1) {
      result.push(beforeDigit), result.push(...makePositionFromCodes(before.slice(index2 + 1), []));
      break;
    }
    const mid = afterDigit + beforeDigit >> 1;
    result.push(mid);
    break;
  }
  return result;
}
function posCodes(str) {
  const codes = [];
  for (let i10 = 0; i10 < str.length; i10++)
    codes.push(str.charCodeAt(i10));
  return codes;
}
function pos(codes) {
  return String.fromCharCode(...codes);
}
function comparePosition(posA, posB) {
  const aCodes = posCodes(posA), bCodes = posCodes(posB), maxLength = Math.max(aCodes.length, bCodes.length);
  for (let i10 = 0; i10 < maxLength; i10++) {
    const a10 = aCodes[i10] == null ? 32 : aCodes[i10], b10 = bCodes[i10] == null ? 32 : bCodes[i10];
    if (a10 !== b10)
      return a10 - b10;
  }
  throw new Error(`Impossible to compare similar position "${posA}" and "${posB}"`);
}
var LiveList = class extends AbstractCrdt {
  constructor(items = []) {
    let position;
    super(), this._items = [], this._implicitlyDeletedItems = new Set(), this._unacknowledgedSets = new Map();
    for (let i10 = 0; i10 < items.length; i10++) {
      const newPosition = makePosition(position), item = lsonToLiveNode(items[i10]);
      item._setParentLink(this, newPosition), this._items.push(item), position = newPosition;
    }
  }
  static _deserialize([id2], parentToChildren, doc) {
    const list = new LiveList();
    list._attach(id2, doc);
    const children = parentToChildren.get(id2);
    if (children == null)
      return list;
    for (const [id3, crdt] of children) {
      const child = deserialize([id3, crdt], parentToChildren, doc);
      child._setParentLink(list, crdt.parentKey), list._items.push(child), sortListItem(list._items);
    }
    return list;
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const ops = [], op = {
      id: this._id,
      opId: doc == null ? void 0 : doc.generateOpId(),
      type: OpCode.CREATE_LIST,
      parentId,
      parentKey
    };
    ops.push(op);
    for (const item of this._items)
      ops.push(...item._serialize(this._id, item._getParentKeyOrThrow(), doc));
    return ops;
  }
  _indexOfPosition(position) {
    return this._items.findIndex((item) => item._getParentKeyOrThrow() === position);
  }
  _attach(id2, doc) {
    super._attach(id2, doc);
    for (const item of this._items)
      item._attach(doc.generateId(), doc);
  }
  _detach() {
    super._detach();
    for (const item of this._items)
      item._detach();
  }
  _applySetRemote(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const {id: id2, parentKey: key} = op, child = creationOpToLiveNode(op);
    child._attach(id2, this._doc), child._setParentLink(this, key);
    const deletedId = op.deletedId, indexOfItemWithSamePosition = this._indexOfPosition(key);
    if (indexOfItemWithSamePosition !== -1) {
      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];
      if (itemWithSamePosition._id === deletedId)
        return itemWithSamePosition._detach(), this._items[indexOfItemWithSamePosition] = child, {
          modified: makeUpdate(this, [
            setDelta(indexOfItemWithSamePosition, child)
          ]),
          reverse: []
        };
      {
        this._implicitlyDeletedItems.add(itemWithSamePosition), this._items[indexOfItemWithSamePosition] = child;
        const delta = [setDelta(indexOfItemWithSamePosition, child)], deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);
        return deleteDelta2 && delta.push(deleteDelta2), {modified: makeUpdate(this, delta), reverse: []};
      }
    }
    {
      const updates = [], deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);
      return deleteDelta2 && updates.push(deleteDelta2), this._items.push(child), sortListItem(this._items), updates.push(insertDelta(this._indexOfPosition(key), child)), {reverse: [], modified: makeUpdate(this, updates)};
    }
  }
  _applySetAck(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const delta = [], deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);
    deletedDelta && delta.push(deletedDelta);
    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);
    if (unacknowledgedOpId != null) {
      if (unacknowledgedOpId !== op.opId)
        return delta.length === 0 ? {modified: false} : {modified: makeUpdate(this, delta), reverse: []};
      this._unacknowledgedSets.delete(op.parentKey);
    }
    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey), existingItem = this._items.find((item) => item._id === op.id);
    if (existingItem != null) {
      if (existingItem._parentKey === op.parentKey)
        return {
          modified: delta.length > 0 && makeUpdate(this, delta),
          reverse: []
        };
      indexOfItemWithSamePosition !== -1 && (this._implicitlyDeletedItems.add(this._items[indexOfItemWithSamePosition]), this._items.splice(indexOfItemWithSamePosition, 1), delta.push(deleteDelta(indexOfItemWithSamePosition)));
      const previousIndex = this._items.indexOf(existingItem);
      existingItem._setParentLink(this, op.parentKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(existingItem);
      return newIndex !== previousIndex && delta.push(moveDelta(previousIndex, newIndex, existingItem)), {modified: delta.length > 0 && makeUpdate(this, delta), reverse: []};
    }
    {
      const orphan = this._doc.getItem(op.id);
      if (orphan && this._implicitlyDeletedItems.has(orphan)) {
        orphan._setParentLink(this, op.parentKey), this._implicitlyDeletedItems.delete(orphan), this._items.push(orphan), sortListItem(this._items);
        const recreatedItemIndex = this._items.indexOf(orphan);
        return {
          modified: makeUpdate(this, [
            indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),
            ...delta
          ]),
          reverse: []
        };
      }
      {
        indexOfItemWithSamePosition !== -1 && this._items.splice(indexOfItemWithSamePosition, 1);
        const {newItem, newIndex} = this._createAttachItemAndSort(op, op.parentKey);
        return {
          modified: makeUpdate(this, [
            indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),
            ...delta
          ]),
          reverse: []
        };
      }
    }
  }
  _detachItemAssociatedToSetOperation(deletedId) {
    if (deletedId == null || this._doc == null)
      return null;
    const deletedItem = this._doc.getItem(deletedId);
    if (deletedItem == null)
      return null;
    const result = this._detachChild(deletedItem);
    return result.modified === false ? null : result.modified.updates[0];
  }
  _applyRemoteInsert(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const key = op.parentKey, existingItemIndex = this._indexOfPosition(key);
    existingItemIndex !== -1 && this._shiftItemPosition(existingItemIndex, key);
    const {newItem, newIndex} = this._createAttachItemAndSort(op, key);
    return {
      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),
      reverse: []
    };
  }
  _applyInsertAck(op) {
    const existingItem = this._items.find((item) => item._id === op.id), key = op.parentKey, itemIndexAtPosition = this._indexOfPosition(key);
    if (existingItem) {
      if (existingItem._parentKey === key)
        return {modified: false};
      {
        const oldPositionIndex = this._items.indexOf(existingItem);
        itemIndexAtPosition !== -1 && this._shiftItemPosition(itemIndexAtPosition, key), existingItem._setParentLink(this, key), sortListItem(this._items);
        const newIndex = this._indexOfPosition(key);
        return newIndex === oldPositionIndex ? {modified: false} : {
          modified: makeUpdate(this, [
            moveDelta(oldPositionIndex, newIndex, existingItem)
          ]),
          reverse: []
        };
      }
    }
    {
      const orphan = nn(this._doc).getItem(op.id);
      if (orphan && this._implicitlyDeletedItems.has(orphan)) {
        orphan._setParentLink(this, key), this._implicitlyDeletedItems.delete(orphan), this._items.push(orphan), sortListItem(this._items);
        return {
          modified: makeUpdate(this, [
            insertDelta(this._indexOfPosition(key), orphan)
          ]),
          reverse: []
        };
      }
      {
        itemIndexAtPosition !== -1 && this._shiftItemPosition(itemIndexAtPosition, key);
        const {newItem, newIndex} = this._createAttachItemAndSort(op, key);
        return {
          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),
          reverse: []
        };
      }
    }
  }
  _applyInsertUndoRedo(op) {
    var _a4;
    const {id: id2, parentKey: key} = op, child = creationOpToLiveNode(op);
    if (((_a4 = this._doc) === null || _a4 === void 0 ? void 0 : _a4.getItem(id2)) !== void 0)
      return {modified: false};
    child._attach(id2, nn(this._doc)), child._setParentLink(this, key);
    const existingItemIndex = this._indexOfPosition(key);
    let newKey = key;
    if (existingItemIndex !== -1) {
      newKey = makePosition(this._items[existingItemIndex] ? this._items[existingItemIndex]._getParentKeyOrThrow() : void 0, this._items[existingItemIndex + 1] ? this._items[existingItemIndex + 1]._getParentKeyOrThrow() : void 0), child._setParentLink(this, newKey);
    }
    this._items.push(child), sortListItem(this._items);
    return {
      modified: makeUpdate(this, [
        insertDelta(this._indexOfPosition(newKey), child)
      ]),
      reverse: [{type: OpCode.DELETE_CRDT, id: id2}]
    };
  }
  _applySetUndoRedo(op) {
    var _a4;
    const {id: id2, parentKey: key} = op, child = creationOpToLiveNode(op);
    if (((_a4 = this._doc) === null || _a4 === void 0 ? void 0 : _a4.getItem(id2)) !== void 0)
      return {modified: false};
    this._unacknowledgedSets.set(key, nn(op.opId));
    const indexOfItemWithSameKey = this._indexOfPosition(key);
    child._attach(id2, nn(this._doc)), child._setParentLink(this, key);
    const newKey = key;
    if (indexOfItemWithSameKey !== -1) {
      const existingItem = this._items[indexOfItemWithSameKey];
      existingItem._detach(), this._items[indexOfItemWithSameKey] = child;
      const reverse2 = existingItem._serialize(nn(this._id), key, this._doc);
      addIntentAndDeletedIdToOperation(reverse2, op.id);
      const delta = [setDelta(indexOfItemWithSameKey, child)], deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);
      return deletedDelta && delta.push(deletedDelta), {modified: makeUpdate(this, delta), reverse: reverse2};
    }
    {
      this._items.push(child), sortListItem(this._items), this._detachItemAssociatedToSetOperation(op.deletedId);
      const newIndex = this._indexOfPosition(newKey);
      return {
        reverse: [{type: OpCode.DELETE_CRDT, id: id2}],
        modified: makeUpdate(this, [insertDelta(newIndex, child)])
      };
    }
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    if (op.intent === "set") {
      if (source === OpSource.REMOTE)
        return this._applySetRemote(op);
      if (source === OpSource.UNDOREDO_RECONNECT)
        return this._applySetUndoRedo(op);
      if (source === OpSource.ACK)
        return this._applySetAck(op);
    }
    return source === OpSource.REMOTE ? this._applyRemoteInsert(op) : source === OpSource.ACK ? this._applyInsertAck(op) : this._applyInsertUndoRedo(op);
  }
  _detachChild(child) {
    if (child) {
      const parentKey = nn(child._parentKey), reverse2 = child._serialize(nn(this._id), parentKey, this._doc), indexToDelete = this._items.indexOf(child);
      return this._items.splice(indexToDelete, 1), child._detach(), {
        modified: makeUpdate(this, [deleteDelta(indexToDelete)]),
        reverse: reverse2
      };
    }
    return {modified: false};
  }
  _applySetChildKeyRemote(newKey, child) {
    var _a4;
    if (this._implicitlyDeletedItems.has(child)) {
      this._implicitlyDeletedItems.delete(child), child._setParentLink(this, newKey), this._items.push(child), sortListItem(this._items);
      return {
        modified: makeUpdate(this, [
          insertDelta(this._items.indexOf(child), child)
        ]),
        reverse: []
      };
    }
    if (newKey === child._parentKey)
      return {modified: false};
    const existingItemIndex = this._indexOfPosition(newKey);
    if (existingItemIndex === -1) {
      const previousIndex = this._items.indexOf(child);
      child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return newIndex === previousIndex ? {modified: false} : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
    {
      this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a4 = this._items[existingItemIndex + 1]) === null || _a4 === void 0 ? void 0 : _a4._getParentKeyOrThrow()));
      const previousIndex = this._items.indexOf(child);
      child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return newIndex === previousIndex ? {modified: false} : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
  }
  _applySetChildKeyAck(newKey, child) {
    var _a4, _b2;
    const previousKey = nn(child._parentKey);
    if (this._implicitlyDeletedItems.has(child)) {
      const existingItemIndex = this._indexOfPosition(newKey);
      return this._implicitlyDeletedItems.delete(child), existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a4 = this._items[existingItemIndex + 1]) === null || _a4 === void 0 ? void 0 : _a4._getParentKeyOrThrow())), child._setParentLink(this, newKey), this._items.push(child), sortListItem(this._items), {modified: false};
    }
    {
      if (newKey === previousKey)
        return {modified: false};
      const previousIndex = this._items.indexOf(child), existingItemIndex = this._indexOfPosition(newKey);
      existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_b2 = this._items[existingItemIndex + 1]) === null || _b2 === void 0 ? void 0 : _b2._getParentKeyOrThrow())), child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return previousIndex === newIndex ? {modified: false} : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
  }
  _applySetChildKeyUndoRedo(newKey, child) {
    var _a4;
    const previousKey = nn(child._parentKey), previousIndex = this._items.indexOf(child), existingItemIndex = this._indexOfPosition(newKey);
    existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a4 = this._items[existingItemIndex + 1]) === null || _a4 === void 0 ? void 0 : _a4._getParentKeyOrThrow())), child._setParentLink(this, newKey), sortListItem(this._items);
    const newIndex = this._items.indexOf(child);
    return previousIndex === newIndex ? {modified: false} : {
      modified: makeUpdate(this, [
        moveDelta(previousIndex, newIndex, child)
      ]),
      reverse: [
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(child._id),
          parentKey: previousKey
        }
      ]
    };
  }
  _setChildKey(newKey, child, source) {
    return source === OpSource.REMOTE ? this._applySetChildKeyRemote(newKey, child) : source === OpSource.ACK ? this._applySetChildKeyAck(newKey, child) : this._applySetChildKeyUndoRedo(newKey, child);
  }
  _apply(op, isLocal) {
    return super._apply(op, isLocal);
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveList if parent is missing");
    return {
      type: CrdtType.LIST,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key
    };
  }
  get length() {
    return this._items.length;
  }
  push(element) {
    return this.insert(element, this.length);
  }
  insert(element, index2) {
    if (index2 < 0 || index2 > this._items.length)
      throw new Error(`Cannot insert list item at index "${index2}". index should be between 0 and ${this._items.length}`);
    const position = makePosition(this._items[index2 - 1] ? this._items[index2 - 1]._getParentKeyOrThrow() : void 0, this._items[index2] ? this._items[index2]._getParentKeyOrThrow() : void 0), value = lsonToLiveNode(element);
    if (value._setParentLink(this, position), this._items.push(value), sortListItem(this._items), this._doc && this._id) {
      const id2 = this._doc.generateId();
      value._attach(id2, this._doc), this._doc.dispatch(value._serialize(this._id, position, this._doc), [{type: OpCode.DELETE_CRDT, id: id2}], new Map([[this._id, makeUpdate(this, [insertDelta(index2, value)])]]));
    }
  }
  move(index2, targetIndex) {
    if (targetIndex < 0)
      throw new Error("targetIndex cannot be less than 0");
    if (targetIndex >= this._items.length)
      throw new Error("targetIndex cannot be greater or equal than the list length");
    if (index2 < 0)
      throw new Error("index cannot be less than 0");
    if (index2 >= this._items.length)
      throw new Error("index cannot be greater or equal than the list length");
    let beforePosition = null, afterPosition = null;
    index2 < targetIndex ? (afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._getParentKeyOrThrow(), beforePosition = this._items[targetIndex]._getParentKeyOrThrow()) : (afterPosition = this._items[targetIndex]._getParentKeyOrThrow(), beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._getParentKeyOrThrow());
    const position = makePosition(beforePosition, afterPosition), item = this._items[index2], previousPosition = item._getParentKeyOrThrow();
    if (item._setParentLink(this, position), sortListItem(this._items), this._doc && this._id) {
      const storageUpdates = new Map([
        [this._id, makeUpdate(this, [moveDelta(index2, targetIndex, item)])]
      ]);
      this._doc.dispatch([
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(item._id),
          opId: this._doc.generateOpId(),
          parentKey: position
        }
      ], [
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(item._id),
          parentKey: previousPosition
        }
      ], storageUpdates);
    }
  }
  delete(index2) {
    if (index2 < 0 || index2 >= this._items.length)
      throw new Error(`Cannot delete list item at index "${index2}". index should be between 0 and ${this._items.length - 1}`);
    const item = this._items[index2];
    if (item._detach(), this._items.splice(index2, 1), this._doc) {
      const childRecordId = item._id;
      if (childRecordId) {
        const storageUpdates = new Map();
        storageUpdates.set(nn(this._id), makeUpdate(this, [deleteDelta(index2)])), this._doc.dispatch([
          {
            id: childRecordId,
            opId: this._doc.generateOpId(),
            type: OpCode.DELETE_CRDT
          }
        ], item._serialize(nn(this._id), item._getParentKeyOrThrow()), storageUpdates);
      }
    }
  }
  clear() {
    if (this._doc) {
      const ops = [], reverseOps = [], updateDelta = [];
      for (const item of this._items) {
        item._detach();
        const childId = item._id;
        childId && (ops.push({
          type: OpCode.DELETE_CRDT,
          id: childId,
          opId: this._doc.generateOpId()
        }), reverseOps.push(...item._serialize(nn(this._id), item._getParentKeyOrThrow())), updateDelta.push(deleteDelta(0)));
      }
      this._items = [];
      const storageUpdates = new Map();
      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta)), this._doc.dispatch(ops, reverseOps, storageUpdates);
    } else {
      for (const item of this._items)
        item._detach();
      this._items = [];
    }
  }
  set(index2, item) {
    if (index2 < 0 || index2 >= this._items.length)
      throw new Error(`Cannot set list item at index "${index2}". index should be between 0 and ${this._items.length - 1}`);
    const existingItem = this._items[index2], position = existingItem._getParentKeyOrThrow(), existingId = existingItem._id;
    existingItem._detach();
    const value = lsonToLiveNode(item);
    if (value._setParentLink(this, position), this._items[index2] = value, this._doc && this._id) {
      const id2 = this._doc.generateId();
      value._attach(id2, this._doc);
      const storageUpdates = new Map();
      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index2, value)]));
      const ops = value._serialize(this._id, position, this._doc);
      addIntentAndDeletedIdToOperation(ops, existingId), this._unacknowledgedSets.set(position, nn(ops[0].opId));
      const reverseOps = existingItem._serialize(this._id, position, void 0);
      addIntentAndDeletedIdToOperation(reverseOps, id2), this._doc.dispatch(ops, reverseOps, storageUpdates);
    }
  }
  toArray() {
    return this._items.map((entry) => liveNodeToLson(entry));
  }
  every(predicate) {
    return this.toArray().every(predicate);
  }
  filter(predicate) {
    return this.toArray().filter(predicate);
  }
  find(predicate) {
    return this.toArray().find(predicate);
  }
  findIndex(predicate) {
    return this.toArray().findIndex(predicate);
  }
  forEach(callbackfn) {
    return this.toArray().forEach(callbackfn);
  }
  get(index2) {
    if (!(index2 < 0 || index2 >= this._items.length))
      return liveNodeToLson(this._items[index2]);
  }
  indexOf(searchElement, fromIndex) {
    return this.toArray().indexOf(searchElement, fromIndex);
  }
  lastIndexOf(searchElement, fromIndex) {
    return this.toArray().lastIndexOf(searchElement, fromIndex);
  }
  map(callback) {
    return this._items.map((entry, i10) => callback(liveNodeToLson(entry), i10));
  }
  some(predicate) {
    return this.toArray().some(predicate);
  }
  [Symbol.iterator]() {
    return new LiveListIterator(this._items);
  }
  _createAttachItemAndSort(op, key) {
    const newItem = creationOpToLiveNode(op);
    newItem._attach(op.id, nn(this._doc)), newItem._setParentLink(this, key), this._items.push(newItem), sortListItem(this._items);
    return {newItem, newIndex: this._indexOfPosition(key)};
  }
  _shiftItemPosition(index2, key) {
    var _a4;
    const shiftedPosition = makePosition(key, this._items.length > index2 + 1 ? (_a4 = this._items[index2 + 1]) === null || _a4 === void 0 ? void 0 : _a4._getParentKeyOrThrow() : void 0);
    this._items[index2]._setParentLink(this, shiftedPosition);
  }
};
var LiveListIterator = class {
  constructor(items) {
    this._innerIterator = items[Symbol.iterator]();
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const result = this._innerIterator.next();
    if (result.done)
      return {done: true, value: void 0};
    return {value: liveNodeToLson(result.value)};
  }
};
function makeUpdate(liveList, deltaUpdates) {
  return {node: liveList, type: "LiveList", updates: deltaUpdates};
}
function setDelta(index2, item) {
  return {
    index: index2,
    type: "set",
    item: item instanceof LiveRegister ? item.data : item
  };
}
function deleteDelta(index2) {
  return {index: index2, type: "delete"};
}
function insertDelta(index2, item) {
  return {
    index: index2,
    type: "insert",
    item: item instanceof LiveRegister ? item.data : item
  };
}
function moveDelta(previousIndex, index2, item) {
  return {
    index: index2,
    type: "move",
    previousIndex,
    item: item instanceof LiveRegister ? item.data : item
  };
}
function sortListItem(items) {
  items.sort((itemA, itemB) => comparePosition(itemA._getParentKeyOrThrow(), itemB._getParentKeyOrThrow()));
}
function addIntentAndDeletedIdToOperation(ops, deletedId) {
  if (ops.length === 0)
    throw new Error("Internal error. Serialized LiveStructure should have at least 1 operation");
  const firstOp = ops[0];
  firstOp.intent = "set", firstOp.deletedId = deletedId;
}
var LiveMap = class extends AbstractCrdt {
  constructor(entries2) {
    if (super(), errorIf(entries2 === null, "Support for calling `new LiveMap(null)` will be removed in @liveblocks/client 0.18. Please call as `new LiveMap()`, or `new LiveMap([])`."), this.unacknowledgedSet = new Map(), entries2) {
      const mappedEntries = [];
      for (const entry of entries2) {
        const value = lsonToLiveNode(entry[1]);
        value._setParentLink(this, entry[0]), mappedEntries.push([entry[0], value]);
      }
      this._map = new Map(mappedEntries);
    } else
      this._map = new Map();
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const ops = [], op = {
      id: this._id,
      opId: doc == null ? void 0 : doc.generateOpId(),
      type: OpCode.CREATE_MAP,
      parentId,
      parentKey
    };
    ops.push(op);
    for (const [key, value] of this._map)
      ops.push(...value._serialize(this._id, key, doc));
    return ops;
  }
  static _deserialize([id2, _item], parentToChildren, doc) {
    const map2 = new LiveMap();
    map2._attach(id2, doc);
    const children = parentToChildren.get(id2);
    if (children == null)
      return map2;
    for (const [id3, crdt] of children) {
      const child = deserialize([id3, crdt], parentToChildren, doc);
      child._setParentLink(map2, crdt.parentKey), map2._map.set(crdt.parentKey, child);
    }
    return map2;
  }
  _attach(id2, doc) {
    super._attach(id2, doc);
    for (const [_key, value] of this._map)
      isLiveNode(value) && value._attach(doc.generateId(), doc);
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const {id: id2, parentKey, opId} = op, key = parentKey, child = creationOpToLiveNode(op);
    if (this._doc.getItem(id2) !== void 0)
      return {modified: false};
    if (source === OpSource.ACK) {
      const lastUpdateOpId = this.unacknowledgedSet.get(key);
      if (lastUpdateOpId === opId)
        return this.unacknowledgedSet.delete(key), {modified: false};
      if (lastUpdateOpId != null)
        return {modified: false};
    } else
      source === OpSource.REMOTE && this.unacknowledgedSet.delete(key);
    const previousValue = this._map.get(key);
    let reverse2;
    if (previousValue) {
      const thisId = nn(this._id);
      reverse2 = previousValue._serialize(thisId, key), previousValue._detach();
    } else
      reverse2 = [{type: OpCode.DELETE_CRDT, id: id2}];
    return child._setParentLink(this, key), child._attach(id2, this._doc), this._map.set(key, child), {
      modified: {
        node: this,
        type: "LiveMap",
        updates: {[key]: {type: "update"}}
      },
      reverse: reverse2
    };
  }
  _detach() {
    super._detach();
    for (const item of this._map.values())
      item._detach();
  }
  _detachChild(child) {
    const id2 = nn(this._id), parentKey = nn(child._parentKey), reverse2 = child._serialize(id2, parentKey, this._doc);
    for (const [key, value] of this._map)
      value === child && this._map.delete(key);
    child._detach();
    return {
      modified: {
        node: this,
        type: "LiveMap",
        updates: {[parentKey]: {type: "delete"}}
      },
      reverse: reverse2
    };
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveMap if parent is missing");
    return {
      type: CrdtType.MAP,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key
    };
  }
  get(key) {
    const value = this._map.get(key);
    if (value != null)
      return liveNodeToLson(value);
  }
  set(key, value) {
    const oldValue = this._map.get(key);
    oldValue && oldValue._detach();
    const item = lsonToLiveNode(value);
    if (item._setParentLink(this, key), this._map.set(key, item), this._doc && this._id) {
      const id2 = this._doc.generateId();
      item._attach(id2, this._doc);
      const storageUpdates = new Map();
      storageUpdates.set(this._id, {
        node: this,
        type: "LiveMap",
        updates: {[key]: {type: "update"}}
      });
      const ops = item._serialize(this._id, key, this._doc);
      this.unacknowledgedSet.set(key, nn(ops[0].opId)), this._doc.dispatch(item._serialize(this._id, key, this._doc), oldValue ? oldValue._serialize(this._id, key) : [{type: OpCode.DELETE_CRDT, id: id2}], storageUpdates);
    }
  }
  get size() {
    return this._map.size;
  }
  has(key) {
    return this._map.has(key);
  }
  delete(key) {
    const item = this._map.get(key);
    if (item == null)
      return false;
    if (item._detach(), this._map.delete(key), this._doc && item._id) {
      const thisId = nn(this._id), storageUpdates = new Map();
      storageUpdates.set(thisId, {
        node: this,
        type: "LiveMap",
        updates: {[key]: {type: "delete"}}
      }), this._doc.dispatch([
        {
          type: OpCode.DELETE_CRDT,
          id: item._id,
          opId: this._doc.generateOpId()
        }
      ], item._serialize(thisId, key), storageUpdates);
    }
    return true;
  }
  entries() {
    const innerIterator = this._map.entries();
    return {
      [Symbol.iterator]() {
        return this;
      },
      next() {
        const iteratorValue = innerIterator.next();
        if (iteratorValue.done)
          return {done: true, value: void 0};
        return {
          value: [
            iteratorValue.value[0],
            liveNodeToLson(iteratorValue.value[1])
          ]
        };
      }
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  keys() {
    return this._map.keys();
  }
  values() {
    const innerIterator = this._map.values();
    return {
      [Symbol.iterator]() {
        return this;
      },
      next() {
        const iteratorValue = innerIterator.next();
        if (iteratorValue.done)
          return {done: true, value: void 0};
        return {value: liveNodeToLson(iteratorValue.value)};
      }
    };
  }
  forEach(callback) {
    for (const entry of this)
      callback(entry[1], entry[0], this);
  }
};
var LiveObject = class extends AbstractCrdt {
  constructor(obj = {}) {
    super(), this._propToLastUpdate = new Map();
    for (const key in obj) {
      const value = obj[key];
      value !== void 0 && isLiveNode(value) && value._setParentLink(this, key);
    }
    this._map = new Map(Object.entries(obj));
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const opId = doc == null ? void 0 : doc.generateOpId(), ops = [], op = parentId !== void 0 && parentKey !== void 0 ? {
      type: OpCode.CREATE_OBJECT,
      id: this._id,
      opId,
      parentId,
      parentKey,
      data: {}
    } : {type: OpCode.CREATE_OBJECT, id: this._id, opId, data: {}};
    ops.push(op);
    for (const [key, value] of this._map)
      isLiveNode(value) ? ops.push(...value._serialize(this._id, key, doc)) : op.data[key] = value;
    return ops;
  }
  static _deserialize([id2, item], parentToChildren, doc) {
    const liveObj = new LiveObject(item.data);
    return liveObj._attach(id2, doc), this._deserializeChildren(liveObj, parentToChildren, doc);
  }
  static _deserializeChildren(liveObj, parentToChildren, doc) {
    const children = parentToChildren.get(nn(liveObj._id));
    if (children == null)
      return liveObj;
    for (const [id2, crdt] of children) {
      const child = deserializeToLson([id2, crdt], parentToChildren, doc);
      isLiveStructure(child) && child._setParentLink(liveObj, crdt.parentKey), liveObj._map.set(crdt.parentKey, child);
    }
    return liveObj;
  }
  _attach(id2, doc) {
    super._attach(id2, doc);
    for (const [_key, value] of this._map)
      isLiveNode(value) && value._attach(doc.generateId(), doc);
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const {id: id2, opId, parentKey: key} = op, child = creationOpToLson(op);
    if (this._doc.getItem(id2) !== void 0)
      return this._propToLastUpdate.get(key) === opId && this._propToLastUpdate.delete(key), {modified: false};
    if (source === OpSource.UNDOREDO_RECONNECT)
      this._propToLastUpdate.set(key, nn(opId));
    else if (this._propToLastUpdate.get(key) !== void 0)
      return this._propToLastUpdate.get(key) === opId ? (this._propToLastUpdate.delete(key), {modified: false}) : {modified: false};
    const thisId = nn(this._id), previousValue = this._map.get(key);
    let reverse2;
    return isLiveNode(previousValue) ? (reverse2 = previousValue._serialize(thisId, key), previousValue._detach()) : reverse2 = previousValue === void 0 ? [{type: OpCode.DELETE_OBJECT_KEY, id: thisId, key}] : [
      {
        type: OpCode.UPDATE_OBJECT,
        id: thisId,
        data: {[key]: previousValue}
      }
    ], this._map.set(key, child), isLiveStructure(child) && (child._setParentLink(this, key), child._attach(id2, this._doc)), {
      reverse: reverse2,
      modified: {
        node: this,
        type: "LiveObject",
        updates: {[key]: {type: "update"}}
      }
    };
  }
  _detachChild(child) {
    if (child) {
      const id2 = nn(this._id), parentKey = nn(child._parentKey), reverse2 = child._serialize(id2, parentKey, this._doc);
      for (const [key, value] of this._map)
        value === child && this._map.delete(key);
      child._detach();
      return {
        modified: {
          node: this,
          type: "LiveObject",
          updates: {[parentKey]: {type: "delete"}}
        },
        reverse: reverse2
      };
    }
    return {modified: false};
  }
  _detach() {
    super._detach();
    for (const value of this._map.values())
      isLiveNode(value) && value._detach();
  }
  _apply(op, isLocal) {
    return op.type === OpCode.UPDATE_OBJECT ? this._applyUpdate(op, isLocal) : op.type === OpCode.DELETE_OBJECT_KEY ? this._applyDeleteObjectKey(op) : super._apply(op, isLocal);
  }
  _toSerializedCrdt() {
    const data = {};
    for (const [key, value] of this._map)
      isLiveNode(value) || (data[key] = value);
    return this.parent.type === "HasParent" && this.parent.node._id ? {
      type: CrdtType.OBJECT,
      parentId: this.parent.node._id,
      parentKey: this.parent.key,
      data
    } : {type: CrdtType.OBJECT, data};
  }
  _applyUpdate(op, isLocal) {
    let isModified = false;
    const id2 = nn(this._id), reverse2 = [], reverseUpdate = {type: OpCode.UPDATE_OBJECT, id: id2, data: {}};
    reverse2.push(reverseUpdate);
    for (const key in op.data) {
      const oldValue = this._map.get(key);
      isLiveNode(oldValue) ? (reverse2.push(...oldValue._serialize(id2, key)), oldValue._detach()) : oldValue !== void 0 ? reverseUpdate.data[key] = oldValue : oldValue === void 0 && reverse2.push({type: OpCode.DELETE_OBJECT_KEY, id: id2, key});
    }
    const updateDelta = {};
    for (const key in op.data) {
      const value = op.data[key];
      if (value === void 0)
        continue;
      if (isLocal)
        this._propToLastUpdate.set(key, nn(op.opId));
      else {
        if (this._propToLastUpdate.get(key) != null) {
          if (this._propToLastUpdate.get(key) === op.opId) {
            this._propToLastUpdate.delete(key);
            continue;
          }
          continue;
        }
        isModified = true;
      }
      const oldValue = this._map.get(key);
      isLiveNode(oldValue) && oldValue._detach(), isModified = true, updateDelta[key] = {type: "update"}, this._map.set(key, value);
    }
    return Object.keys(reverseUpdate.data).length !== 0 && reverse2.unshift(reverseUpdate), isModified ? {
      modified: {node: this, type: "LiveObject", updates: updateDelta},
      reverse: reverse2
    } : {modified: false};
  }
  _applyDeleteObjectKey(op) {
    const key = op.key;
    if (this._map.has(key) === false)
      return {modified: false};
    if (this._propToLastUpdate.get(key) !== void 0)
      return {modified: false};
    const oldValue = this._map.get(key), id2 = nn(this._id);
    let reverse2 = [];
    return isLiveNode(oldValue) ? (reverse2 = oldValue._serialize(id2, op.key), oldValue._detach()) : oldValue !== void 0 && (reverse2 = [
      {type: OpCode.UPDATE_OBJECT, id: id2, data: {[key]: oldValue}}
    ]), this._map.delete(key), {
      modified: {
        node: this,
        type: "LiveObject",
        updates: {[op.key]: {type: "delete"}}
      },
      reverse: reverse2
    };
  }
  toObject() {
    return function(iterable) {
      const obj = {};
      for (const [key, val] of iterable)
        obj[key] = val;
      return obj;
    }(this._map);
  }
  set(key, value) {
    this.update({[key]: value});
  }
  get(key) {
    return this._map.get(key);
  }
  delete(key) {
    const keyAsString = key, oldValue = this._map.get(keyAsString);
    if (oldValue === void 0)
      return;
    if (this._doc == null || this._id == null)
      return isLiveNode(oldValue) && oldValue._detach(), void this._map.delete(keyAsString);
    let reverse2;
    isLiveNode(oldValue) ? (oldValue._detach(), reverse2 = oldValue._serialize(this._id, keyAsString)) : reverse2 = [
      {
        type: OpCode.UPDATE_OBJECT,
        data: {[keyAsString]: oldValue},
        id: this._id
      }
    ], this._map.delete(keyAsString);
    const storageUpdates = new Map();
    storageUpdates.set(this._id, {
      node: this,
      type: "LiveObject",
      updates: {[key]: {type: "delete"}}
    }), this._doc.dispatch([
      {
        type: OpCode.DELETE_OBJECT_KEY,
        key: keyAsString,
        id: this._id,
        opId: this._doc.generateOpId()
      }
    ], reverse2, storageUpdates);
  }
  update(overrides) {
    if (this._doc == null || this._id == null) {
      for (const key in overrides) {
        const newValue = overrides[key];
        if (newValue === void 0)
          continue;
        const oldValue = this._map.get(key);
        isLiveNode(oldValue) && oldValue._detach(), isLiveNode(newValue) && newValue._setParentLink(this, key), this._map.set(key, newValue);
      }
      return;
    }
    const ops = [], reverseOps = [], opId = this._doc.generateOpId(), updatedProps = {}, reverseUpdateOp = {id: this._id, type: OpCode.UPDATE_OBJECT, data: {}}, updateDelta = {};
    for (const key in overrides) {
      const newValue = overrides[key];
      if (newValue === void 0)
        continue;
      const oldValue = this._map.get(key);
      if (isLiveNode(oldValue) ? (reverseOps.push(...oldValue._serialize(this._id, key)), oldValue._detach()) : oldValue === void 0 ? reverseOps.push({
        type: OpCode.DELETE_OBJECT_KEY,
        id: this._id,
        key
      }) : reverseUpdateOp.data[key] = oldValue, isLiveNode(newValue)) {
        newValue._setParentLink(this, key), newValue._attach(this._doc.generateId(), this._doc);
        const newAttachChildOps = newValue._serialize(this._id, key, this._doc), createCrdtOp = newAttachChildOps.find((op) => op.parentId === this._id);
        createCrdtOp && this._propToLastUpdate.set(key, nn(createCrdtOp.opId)), ops.push(...newAttachChildOps);
      } else
        updatedProps[key] = newValue, this._propToLastUpdate.set(key, opId);
      this._map.set(key, newValue), updateDelta[key] = {type: "update"};
    }
    Object.keys(reverseUpdateOp.data).length !== 0 && reverseOps.unshift(reverseUpdateOp), Object.keys(updatedProps).length !== 0 && ops.unshift({
      opId,
      id: this._id,
      type: OpCode.UPDATE_OBJECT,
      data: updatedProps
    });
    const storageUpdates = new Map();
    storageUpdates.set(this._id, {
      node: this,
      type: "LiveObject",
      updates: updateDelta
    }), this._doc.dispatch(ops, reverseOps, storageUpdates);
  }
};
function remove2(array2, item) {
  for (let i10 = 0; i10 < array2.length; i10++)
    if (array2[i10] === item) {
      array2.splice(i10, 1);
      break;
    }
}
function compact(items) {
  return items.filter((item) => item != null);
}
function creationOpToLiveNode(op) {
  return lsonToLiveNode(creationOpToLson(op));
}
function creationOpToLson(op) {
  switch (op.type) {
    case OpCode.CREATE_REGISTER:
      return op.data;
    case OpCode.CREATE_OBJECT:
      return new LiveObject(op.data);
    case OpCode.CREATE_MAP:
      return new LiveMap();
    case OpCode.CREATE_LIST:
      return new LiveList();
    default:
      return assertNever(0, "Unknown creation Op");
  }
}
function isSameNodeOrChildOf(node, parent) {
  return node === parent || node.parent.type === "HasParent" && isSameNodeOrChildOf(node.parent.node, parent);
}
function deserialize([id2, crdt], parentToChildren, doc) {
  switch (crdt.type) {
    case CrdtType.OBJECT:
      return LiveObject._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.LIST:
      return LiveList._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.MAP:
      return LiveMap._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.REGISTER:
      return LiveRegister._deserialize([id2, crdt], parentToChildren, doc);
    default:
      throw new Error("Unexpected CRDT type");
  }
}
function deserializeToLson([id2, crdt], parentToChildren, doc) {
  switch (crdt.type) {
    case CrdtType.OBJECT:
      return LiveObject._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.LIST:
      return LiveList._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.MAP:
      return LiveMap._deserialize([id2, crdt], parentToChildren, doc);
    case CrdtType.REGISTER:
      return crdt.data;
    default:
      throw new Error("Unexpected CRDT type");
  }
}
function isLiveStructure(value) {
  return isLiveList(value) || function(value2) {
    return value2 instanceof LiveMap;
  }(value) || isLiveObject(value);
}
function isLiveNode(value) {
  return isLiveStructure(value) || function(value2) {
    return value2 instanceof LiveRegister;
  }(value);
}
function isLiveList(value) {
  return value instanceof LiveList;
}
function isLiveObject(value) {
  return value instanceof LiveObject;
}
function liveNodeToLson(obj) {
  return obj instanceof LiveRegister ? obj.data : obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject ? obj : assertNever(0, "Unknown AbstractCrdt");
}
function lsonToLiveNode(value) {
  return value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList ? value : new LiveRegister(value);
}
function getTreesDiffOperations(currentItems, newItems) {
  const ops = [];
  return currentItems.forEach((_17, id2) => {
    newItems.get(id2) || ops.push({type: OpCode.DELETE_CRDT, id: id2});
  }), newItems.forEach((crdt, id2) => {
    const currentCrdt = currentItems.get(id2);
    if (currentCrdt)
      crdt.type === CrdtType.OBJECT && (currentCrdt.type === CrdtType.OBJECT && JSON.stringify(crdt.data) === JSON.stringify(currentCrdt.data) || ops.push({type: OpCode.UPDATE_OBJECT, id: id2, data: crdt.data})), crdt.parentKey !== currentCrdt.parentKey && ops.push({
        type: OpCode.SET_PARENT_KEY,
        id: id2,
        parentKey: nn(crdt.parentKey, "Parent key must not be missing")
      });
    else
      switch (crdt.type) {
        case CrdtType.REGISTER:
          ops.push({
            type: OpCode.CREATE_REGISTER,
            id: id2,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey,
            data: crdt.data
          });
          break;
        case CrdtType.LIST:
          ops.push({
            type: OpCode.CREATE_LIST,
            id: id2,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey
          });
          break;
        case CrdtType.OBJECT:
          ops.push(crdt.parentId ? {
            type: OpCode.CREATE_OBJECT,
            id: id2,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey,
            data: crdt.data
          } : {type: OpCode.CREATE_OBJECT, id: id2, data: crdt.data});
          break;
        case CrdtType.MAP:
          ops.push({
            type: OpCode.CREATE_MAP,
            id: id2,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey
          });
      }
  }), ops;
}
function mergeStorageUpdates(first, second) {
  return first ? first.type === "LiveObject" && second.type === "LiveObject" ? function(first2, second2) {
    const updates = first2.updates;
    for (const [key, value] of entries(second2.updates))
      updates[key] = value;
    return Object.assign(Object.assign({}, second2), {updates});
  }(first, second) : first.type === "LiveMap" && second.type === "LiveMap" ? function(first2, second2) {
    const updates = first2.updates;
    for (const [key, value] of entries(second2.updates))
      updates[key] = value;
    return Object.assign(Object.assign({}, second2), {updates});
  }(first, second) : first.type === "LiveList" && second.type === "LiveList" ? function(first2, second2) {
    const updates = first2.updates;
    return Object.assign(Object.assign({}, second2), {
      updates: updates.concat(second2.updates)
    });
  }(first, second) : second : second;
}
function isPlainObject2(blob2) {
  return blob2 !== null && typeof blob2 == "object" && Object.prototype.toString.call(blob2) === "[object Object]";
}
function entries(obj) {
  return Object.entries(obj);
}
function tryParseJson(rawMessage) {
  try {
    return JSON.parse(rawMessage);
  } catch (e14) {
    return;
  }
}
function b64decode(b64value) {
  try {
    const formattedValue = b64value.replace(/-/g, "+").replace(/_/g, "/");
    return decodeURIComponent(atob(formattedValue).split("").map(function(c10) {
      return "%" + ("00" + c10.charCodeAt(0).toString(16)).slice(-2);
    }).join(""));
  } catch (err) {
    return atob(b64value);
  }
}
function isTokenExpired(token) {
  const now2 = Date.now() / 1e3;
  return now2 > token.exp - 300 || now2 < token.iat + 300;
}
function isStringList(value) {
  return Array.isArray(value) && value.every((i10) => typeof i10 == "string");
}
function isRoomAuthToken(data) {
  return typeof data.appId == "string" && typeof data.roomId == "string" && typeof data.actor == "number" && (data.id === void 0 || typeof data.id == "string") && isStringList(data.scopes) && (data.maxConnectionsPerRoom === void 0 || typeof data.maxConnectionsPerRoom == "number");
}
function parseJwtToken(token) {
  const tokenParts = token.split(".");
  if (tokenParts.length !== 3)
    throw new Error("Authentication error: invalid JWT token");
  const data = tryParseJson(b64decode(tokenParts[1]));
  if (data && function(data2) {
    if (!isPlainObject2(data2))
      return false;
    const {iat, exp} = data2;
    return typeof iat == "number" && typeof exp == "number";
  }(data))
    return data;
  throw new Error("Authentication error: missing JWT metadata");
}
function parseRoomAuthToken(tokenString) {
  const data = parseJwtToken(tokenString);
  if (data && isRoomAuthToken(data)) {
    return __rest5(data, ["maxConnections"]);
  }
  throw new Error("Authentication error: we expected a room token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback");
}
function isJsonScalar(data) {
  return data === null || typeof data == "string" || typeof data == "number" || typeof data == "boolean";
}
function isJsonArray(data) {
  return Array.isArray(data);
}
function isJsonObject(data) {
  return !isJsonScalar(data) && !isJsonArray(data);
}

// ../../node_modules/@liveblocks/client/index.mjs
var BACKOFF_RETRY_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4];
var BACKOFF_RETRY_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];
function makeOthers(userMap) {
  const users = Object.values(userMap).map((user) => __rest5(user, ["_hasReceivedInitialPresence"]));
  return {
    get count() {
      return users.length;
    },
    [Symbol.iterator]: () => users[Symbol.iterator](),
    map: (callback) => users.map(callback),
    toArray: () => users
  };
}
function makeStateMachine(state, context, mockedEffects) {
  const effects = mockedEffects || {
    authenticate(auth, createWebSocket) {
      const rawToken = state.token, parsedToken = rawToken !== null && parseRoomAuthToken(rawToken);
      if (!parsedToken || isTokenExpired(parsedToken))
        return auth(context.roomId).then(({token}) => {
          if (state.connection.state !== "authenticating")
            return;
          authenticationSuccess(parseRoomAuthToken(token), createWebSocket(token)), state.token = token;
        }).catch((er2) => function(error) {
          console.error("Call to authentication endpoint failed", error);
          state.token = null, updateConnection({state: "unavailable"}), state.numberOfRetry++, state.timeoutHandles.reconnect = effects.scheduleReconnect(getRetryDelay());
        }(er2 instanceof Error ? er2 : new Error(String(er2))));
      authenticationSuccess(parsedToken, createWebSocket(rawToken));
    },
    send(messageOrMessages) {
      if (state.socket == null)
        throw new Error("Can't send message if socket is null");
      state.socket.send(JSON.stringify(messageOrMessages));
    },
    delayFlush: (delay) => setTimeout(tryFlushing, delay),
    startHeartbeatInterval: () => setInterval(heartbeat, 3e4),
    schedulePongTimeout: () => setTimeout(pongTimeout, 2e3),
    scheduleReconnect: (delay) => setTimeout(connect, delay)
  };
  function genericSubscribe(callback) {
    return state.listeners.storage.push(callback), () => remove2(state.listeners.storage, callback);
  }
  function createOrUpdateRootFromMessage(message) {
    if (message.items.length === 0)
      throw new Error("Internal error: cannot load storage without items");
    state.root ? function(items) {
      if (!state.root)
        return;
      const currentItems = new Map();
      state.items.forEach((liveCrdt, id2) => {
        currentItems.set(id2, liveCrdt._toSerializedCrdt());
      });
      const ops = getTreesDiffOperations(currentItems, new Map(items));
      notify(apply(ops, false).updates);
    }(message.items) : state.root = function(items) {
      const [root2, parentToChildren] = function(items2) {
        const parentToChildren2 = new Map();
        let root3 = null;
        for (const [id2, crdt] of items2)
          if (isRootCrdt(crdt))
            root3 = [id2, crdt];
          else {
            const tuple = [id2, crdt], children = parentToChildren2.get(crdt.parentId);
            children != null ? children.push(tuple) : parentToChildren2.set(crdt.parentId, [tuple]);
          }
        if (root3 == null)
          throw new Error("Root can't be null");
        return [root3, parentToChildren2];
      }(items);
      return LiveObject._deserialize(root2, parentToChildren, {
        getItem,
        addItem,
        deleteItem,
        generateId,
        generateOpId,
        dispatch: storageDispatch,
        roomId: context.roomId
      });
    }(message.items);
    for (const key in state.defaultStorageRoot)
      state.root.get(key) == null && state.root.set(key, state.defaultStorageRoot[key]);
  }
  function addItem(id2, liveItem) {
    state.items.set(id2, liveItem);
  }
  function deleteItem(id2) {
    state.items.delete(id2);
  }
  function getItem(id2) {
    return state.items.get(id2);
  }
  function addToUndoStack(historyItem) {
    state.undoStack.length >= 50 && state.undoStack.shift(), state.isHistoryPaused ? state.pausedHistory.unshift(...historyItem) : state.undoStack.push(historyItem);
  }
  function storageDispatch(ops, reverse2, storageUpdates) {
    state.isBatching ? (state.batch.ops.push(...ops), storageUpdates.forEach((value, key) => {
      state.batch.updates.storageUpdates.set(key, mergeStorageUpdates(state.batch.updates.storageUpdates.get(key), value));
    }), state.batch.reverseOps.push(...reverse2)) : (addToUndoStack(reverse2), state.redoStack = [], dispatch2(ops), notify({storageUpdates}));
  }
  function notify({
    storageUpdates = new Map(),
    presence = false,
    others: otherEvents = []
  }) {
    if (otherEvents.length > 0) {
      state.others = makeOthers(state.users);
      for (const event of otherEvents)
        for (const listener of state.listeners.others)
          listener(state.others, event);
    }
    if (presence)
      for (const listener of state.listeners["my-presence"])
        listener(state.me);
    if (storageUpdates.size > 0)
      for (const subscriber of state.listeners.storage)
        subscriber(Array.from(storageUpdates.values()));
  }
  function getConnectionId() {
    if (state.connection.state === "open" || state.connection.state === "connecting")
      return state.connection.id;
    if (state.lastConnectionId !== null)
      return state.lastConnectionId;
    throw new Error("Internal. Tried to get connection id but connection was never open");
  }
  function generateId() {
    return `${getConnectionId()}:${state.clock++}`;
  }
  function generateOpId() {
    return `${getConnectionId()}:${state.opClock++}`;
  }
  function apply(item, isLocal) {
    const result = {
      reverse: [],
      updates: {storageUpdates: new Map(), presence: false}
    }, createdNodeIds = new Set();
    for (const op of item)
      if (op.type === "presence") {
        const reverse2 = {type: "presence", data: {}};
        for (const key in op.data)
          reverse2.data[key] = state.me[key];
        if (state.me = Object.assign(Object.assign({}, state.me), op.data), state.buffer.presence == null)
          state.buffer.presence = op.data;
        else
          for (const key in op.data)
            state.buffer.presence[key] = op.data[key];
        result.reverse.unshift(reverse2), result.updates.presence = true;
      } else {
        let source;
        if (op.opId || (op.opId = generateOpId()), isLocal)
          source = OpSource.UNDOREDO_RECONNECT;
        else {
          source = state.offlineOperations.delete(nn(op.opId)) ? OpSource.ACK : OpSource.REMOTE;
        }
        const applyOpResult = applyOp(op, source);
        if (applyOpResult.modified) {
          const parentId = applyOpResult.modified.node.parent.type === "HasParent" ? nn(applyOpResult.modified.node.parent.node._id, "Expected parent node to have an ID") : void 0;
          parentId && createdNodeIds.has(parentId) || (result.updates.storageUpdates.set(nn(applyOpResult.modified.node._id), mergeStorageUpdates(result.updates.storageUpdates.get(nn(applyOpResult.modified.node._id)), applyOpResult.modified)), result.reverse.unshift(...applyOpResult.reverse)), op.type !== OpCode.CREATE_LIST && op.type !== OpCode.CREATE_MAP && op.type !== OpCode.CREATE_OBJECT || createdNodeIds.add(nn(applyOpResult.modified.node._id));
        }
      }
    return result;
  }
  function applyOp(op, source) {
    switch (op.type) {
      case OpCode.DELETE_OBJECT_KEY:
      case OpCode.UPDATE_OBJECT:
      case OpCode.DELETE_CRDT: {
        const item = state.items.get(op.id);
        return item == null ? {modified: false} : item._apply(op, source === OpSource.UNDOREDO_RECONNECT);
      }
      case OpCode.SET_PARENT_KEY: {
        const item = state.items.get(op.id);
        return item == null ? {modified: false} : item.parent.type === "HasParent" && isLiveList(item.parent.node) ? item.parent.node._setChildKey(op.parentKey, item, source) : {modified: false};
      }
      case OpCode.CREATE_OBJECT:
      case OpCode.CREATE_LIST:
      case OpCode.CREATE_MAP:
      case OpCode.CREATE_REGISTER: {
        if (op.parentId === void 0)
          return {modified: false};
        const parent = state.items.get(op.parentId);
        return parent == null ? {modified: false} : parent._attachChild(op, source);
      }
    }
  }
  function connect() {
    var _a4, _b2, _c, _d2;
    if (state.connection.state !== "closed" && state.connection.state !== "unavailable")
      return null;
    const auth = function(authentication, fetchPolyfill) {
      if (authentication.type === "public") {
        if (typeof window == "undefined" && fetchPolyfill == null)
          throw new Error("To use Liveblocks client in a non-dom environment with a publicApiKey, you need to provide a fetch polyfill.");
        return (room) => fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {
          room,
          publicApiKey: authentication.publicApiKey
        });
      }
      if (authentication.type === "private") {
        if (typeof window == "undefined" && fetchPolyfill == null)
          throw new Error("To use Liveblocks client in a non-dom environment with a url as auth endpoint, you need to provide a fetch polyfill.");
        return (room) => fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {
          room
        });
      }
      if (authentication.type === "custom") {
        return (room) => authentication.callback(room).then((response) => {
          if (!response || !response.token)
            throw new Error('Authentication error. We expect the authentication callback to return a token, but it does not. Hint: the return value should look like: { token: "..." }');
          return response;
        });
      }
      throw new Error("Internal error. Unexpected authentication type");
    }(context.authentication, (_b2 = (_a4 = context.polyfills) === null || _a4 === void 0 ? void 0 : _a4.fetch) !== null && _b2 !== void 0 ? _b2 : context.fetchPolyfill), createWebSocket = function(liveblocksServer, WebSocketPolyfill) {
      if (typeof window == "undefined" && WebSocketPolyfill == null)
        throw new Error("To use Liveblocks client in a non-dom environment, you need to provide a WebSocket polyfill.");
      const ws2 = WebSocketPolyfill || WebSocket;
      return (token) => new ws2(`${liveblocksServer}/?token=${token}`);
    }(context.liveblocksServer, (_d2 = (_c = context.polyfills) === null || _c === void 0 ? void 0 : _c.WebSocket) !== null && _d2 !== void 0 ? _d2 : context.WebSocketPolyfill);
    updateConnection({state: "authenticating"}), effects.authenticate(auth, createWebSocket);
  }
  function authenticationSuccess(token, socket) {
    socket.addEventListener("message", onMessage), socket.addEventListener("open", onOpen), socket.addEventListener("close", onClose), socket.addEventListener("error", onError), updateConnection({
      state: "connecting",
      id: token.actor,
      userInfo: token.info,
      userId: token.id
    }), state.idFactory = function(connectionId) {
      let count = 0;
      return () => `${connectionId}:${count++}`;
    }(token.actor), state.socket = socket;
  }
  function onUpdatePresenceMessage(message) {
    const user = state.users[message.actor];
    if (message.targetActor !== void 0 || user == null || user._hasReceivedInitialPresence)
      return state.users[message.actor] = user == null ? {
        connectionId: message.actor,
        presence: message.data,
        id: void 0,
        info: void 0,
        _hasReceivedInitialPresence: true
      } : {
        id: user.id,
        info: user.info,
        connectionId: message.actor,
        presence: Object.assign(Object.assign({}, user.presence), message.data),
        _hasReceivedInitialPresence: true
      }, {
        type: "update",
        updates: message.data,
        user: state.users[message.actor]
      };
  }
  function onUserLeftMessage(message) {
    const userLeftMessage = message, user = state.users[userLeftMessage.actor];
    return user ? (delete state.users[userLeftMessage.actor], {type: "leave", user}) : null;
  }
  function onRoomStateMessage(message) {
    const newUsers = {};
    for (const key in message.users) {
      const connectionId = Number.parseInt(key), user = message.users[key];
      newUsers[connectionId] = {
        connectionId,
        info: user.info,
        id: user.id
      };
    }
    return state.users = newUsers, {type: "reset"};
  }
  function onEvent(message) {
    for (const listener of state.listeners.event)
      listener({connectionId: message.actor, event: message.event});
  }
  function onUserJoinedMessage(message) {
    return state.users[message.actor] = {
      connectionId: message.actor,
      info: message.info,
      id: message.id,
      _hasReceivedInitialPresence: true
    }, state.me && (state.buffer.messages.push({
      type: ClientMsgCode.UPDATE_PRESENCE,
      data: state.me,
      targetActor: message.actor
    }), tryFlushing()), {type: "enter", user: state.users[message.actor]};
  }
  function parseServerMessage(data) {
    return isJsonObject(data) ? data : null;
  }
  function onMessage(event) {
    if (event.data === "pong")
      return void clearTimeout(state.timeoutHandles.pongTimeout);
    const messages = function(text) {
      const data = tryParseJson(text);
      return data === void 0 ? null : isJsonArray(data) ? compact(data.map((item) => parseServerMessage(item))) : compact([parseServerMessage(data)]);
    }(event.data);
    if (messages === null || messages.length === 0)
      return;
    const updates = {storageUpdates: new Map(), others: []};
    for (const message of messages)
      switch (message.type) {
        case ServerMsgCode.USER_JOINED:
          updates.others.push(onUserJoinedMessage(message));
          break;
        case ServerMsgCode.UPDATE_PRESENCE: {
          const othersPresenceUpdate = onUpdatePresenceMessage(message);
          othersPresenceUpdate && updates.others.push(othersPresenceUpdate);
          break;
        }
        case ServerMsgCode.BROADCASTED_EVENT:
          onEvent(message);
          break;
        case ServerMsgCode.USER_LEFT: {
          const event2 = onUserLeftMessage(message);
          event2 && updates.others.push(event2);
          break;
        }
        case ServerMsgCode.ROOM_STATE:
          updates.others.push(onRoomStateMessage(message));
          break;
        case ServerMsgCode.INITIAL_STORAGE_STATE: {
          const offlineOps = new Map(state.offlineOperations);
          createOrUpdateRootFromMessage(message), applyAndSendOfflineOps(offlineOps), _getInitialStateResolver == null || _getInitialStateResolver();
          break;
        }
        case ServerMsgCode.UPDATE_STORAGE:
          apply(message.ops, false).updates.storageUpdates.forEach((value, key) => {
            updates.storageUpdates.set(key, mergeStorageUpdates(updates.storageUpdates.get(key), value));
          });
          break;
      }
    notify(updates);
  }
  function onClose(event) {
    if (state.socket = null, clearTimeout(state.timeoutHandles.pongTimeout), clearInterval(state.intervalHandles.heartbeat), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), state.users = {}, notify({others: [{type: "reset"}]}), event.code >= 4e3 && event.code <= 4100) {
      updateConnection({state: "failed"});
      const error = new LiveblocksError(event.reason, event.code);
      for (const listener of state.listeners.error)
        listener(error);
      const delay = getRetryDelay(true);
      state.numberOfRetry++, console.error(`Connection to Liveblocks websocket server closed. Reason: ${error.message} (code: ${error.code}). Retrying in ${delay}ms.`), updateConnection({state: "unavailable"}), state.timeoutHandles.reconnect = effects.scheduleReconnect(delay);
    } else if (event.code === WebsocketCloseCodes.CLOSE_WITHOUT_RETRY)
      updateConnection({state: "closed"});
    else {
      const delay = getRetryDelay();
      state.numberOfRetry++, console.warn(`Connection to Liveblocks websocket server closed (code: ${event.code}). Retrying in ${delay}ms.`), updateConnection({state: "unavailable"}), state.timeoutHandles.reconnect = effects.scheduleReconnect(delay);
    }
  }
  function updateConnection(connection) {
    state.connection = connection;
    for (const listener of state.listeners.connection)
      listener(connection.state);
  }
  function getRetryDelay(slow = false) {
    return slow ? BACKOFF_RETRY_DELAYS_SLOW[state.numberOfRetry < BACKOFF_RETRY_DELAYS_SLOW.length ? state.numberOfRetry : BACKOFF_RETRY_DELAYS_SLOW.length - 1] : BACKOFF_RETRY_DELAYS[state.numberOfRetry < BACKOFF_RETRY_DELAYS.length ? state.numberOfRetry : BACKOFF_RETRY_DELAYS.length - 1];
  }
  function onError() {
  }
  function onOpen() {
    clearInterval(state.intervalHandles.heartbeat), state.intervalHandles.heartbeat = effects.startHeartbeatInterval(), state.connection.state === "connecting" && (updateConnection(Object.assign(Object.assign({}, state.connection), {state: "open"})), state.numberOfRetry = 0, state.lastConnectionId !== void 0 && (state.buffer.presence = state.me, tryFlushing()), state.lastConnectionId = state.connection.id, state.root && state.buffer.messages.push({type: ClientMsgCode.FETCH_STORAGE}), tryFlushing());
  }
  function heartbeat() {
    state.socket != null && (clearTimeout(state.timeoutHandles.pongTimeout), state.timeoutHandles.pongTimeout = effects.schedulePongTimeout(), state.socket.readyState === state.socket.OPEN && state.socket.send("ping"));
  }
  function pongTimeout() {
    reconnect();
  }
  function reconnect() {
    state.socket && (state.socket.removeEventListener("open", onOpen), state.socket.removeEventListener("message", onMessage), state.socket.removeEventListener("close", onClose), state.socket.removeEventListener("error", onError), state.socket.close(), state.socket = null), updateConnection({state: "unavailable"}), clearTimeout(state.timeoutHandles.pongTimeout), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), clearInterval(state.intervalHandles.heartbeat), connect();
  }
  function applyAndSendOfflineOps(offlineOps) {
    if (offlineOps.size === 0)
      return;
    const messages = [], ops = Array.from(offlineOps.values()), result = apply(ops, true);
    messages.push({type: ClientMsgCode.UPDATE_STORAGE, ops}), notify(result.updates), effects.send(messages);
  }
  function tryFlushing() {
    const storageOps = state.buffer.storageOperations;
    if (storageOps.length > 0 && storageOps.forEach((op) => {
      state.offlineOperations.set(nn(op.opId), op);
    }), state.socket == null || state.socket.readyState !== state.socket.OPEN)
      return void (state.buffer.storageOperations = []);
    const now2 = Date.now();
    if (now2 - state.lastFlushTime > context.throttleDelay) {
      const messages = function(state2) {
        const messages2 = [];
        state2.buffer.presence && messages2.push({
          type: ClientMsgCode.UPDATE_PRESENCE,
          data: state2.buffer.presence
        });
        for (const event of state2.buffer.messages)
          messages2.push(event);
        state2.buffer.storageOperations.length > 0 && messages2.push({
          type: ClientMsgCode.UPDATE_STORAGE,
          ops: state2.buffer.storageOperations
        });
        return messages2;
      }(state);
      if (messages.length === 0)
        return;
      effects.send(messages), state.buffer = {
        messages: [],
        storageOperations: [],
        presence: null
      }, state.lastFlushTime = now2;
    } else
      state.timeoutHandles.flush != null && clearTimeout(state.timeoutHandles.flush), state.timeoutHandles.flush = effects.delayFlush(context.throttleDelay - (now2 - state.lastFlushTime));
  }
  function getPresence() {
    return state.me;
  }
  function dispatch2(ops) {
    state.buffer.storageOperations.push(...ops), tryFlushing();
  }
  let _getInitialStatePromise = null, _getInitialStateResolver = null;
  return {
    onClose,
    onMessage,
    authenticationSuccess,
    heartbeat,
    onNavigatorOnline: function() {
      state.connection.state === "unavailable" && reconnect();
    },
    simulateSocketClose: function() {
      state.socket && (state.socket = null);
    },
    simulateSendCloseEvent: function(event) {
      onClose(event);
    },
    onVisibilityChange: function(visibilityState) {
      visibilityState === "visible" && state.connection.state === "open" && heartbeat();
    },
    getUndoStack: () => state.undoStack,
    getItemsCount: () => state.items.size,
    connect,
    disconnect: function() {
      state.socket && (state.socket.removeEventListener("open", onOpen), state.socket.removeEventListener("message", onMessage), state.socket.removeEventListener("close", onClose), state.socket.removeEventListener("error", onError), state.socket.close(), state.socket = null), updateConnection({state: "closed"}), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), clearTimeout(state.timeoutHandles.pongTimeout), clearInterval(state.intervalHandles.heartbeat), state.users = {}, notify({others: [{type: "reset"}]}), function() {
        for (const key in state.listeners)
          state.listeners[key] = [];
      }();
    },
    subscribe: function(first, second, options) {
      if (second === void 0 || typeof first == "function") {
        if (typeof first == "function") {
          return genericSubscribe(first);
        }
        throw new Error("Please specify a listener callback");
      }
      if (isLiveNode(first)) {
        const node = first;
        if (options == null ? void 0 : options.isDeep) {
          return function(node2, callback) {
            return genericSubscribe((updates) => {
              const relatedUpdates = updates.filter((update) => isSameNodeOrChildOf(update.node, node2));
              relatedUpdates.length > 0 && callback(relatedUpdates);
            });
          }(node, second);
        }
        return function(node2, callback) {
          return genericSubscribe((updates) => {
            for (const update of updates)
              update.node._id === node2._id && callback(update.node);
          });
        }(node, second);
      }
      if (!isRoomEventName(first))
        throw new Error(`"${first}" is not a valid event name`);
      const eventName = first, eventListener = second;
      return state.listeners[eventName].push(eventListener), () => {
        const callbacks = state.listeners[eventName];
        remove2(callbacks, eventListener);
      };
    },
    updatePresence: function(overrides, options) {
      const oldValues = {};
      state.buffer.presence == null && (state.buffer.presence = {});
      for (const key in overrides) {
        const overrideValue = overrides[key];
        overrideValue !== void 0 && (state.buffer.presence[key] = overrideValue, oldValues[key] = state.me[key]);
      }
      state.me = Object.assign(Object.assign({}, state.me), overrides), state.isBatching ? ((options == null ? void 0 : options.addToHistory) && state.batch.reverseOps.push({
        type: "presence",
        data: oldValues
      }), state.batch.updates.presence = true) : (tryFlushing(), (options == null ? void 0 : options.addToHistory) && addToUndoStack([{type: "presence", data: oldValues}]), notify({presence: true}));
    },
    broadcastEvent: function(event, options = {shouldQueueEventIfNotReady: false}) {
      state.socket == null && options.shouldQueueEventIfNotReady == 0 || (state.buffer.messages.push({
        type: ClientMsgCode.BROADCAST_EVENT,
        event
      }), tryFlushing());
    },
    batch: function(callback) {
      if (state.isBatching)
        throw new Error("batch should not be called during a batch");
      state.isBatching = true;
      try {
        callback();
      } finally {
        state.isBatching = false, state.batch.reverseOps.length > 0 && addToUndoStack(state.batch.reverseOps), state.batch.ops.length > 0 && (state.redoStack = []), state.batch.ops.length > 0 && dispatch2(state.batch.ops), notify(state.batch.updates), state.batch = {
          ops: [],
          reverseOps: [],
          updates: {others: [], storageUpdates: new Map(), presence: false}
        }, tryFlushing();
      }
    },
    undo: function() {
      if (state.isBatching)
        throw new Error("undo is not allowed during a batch");
      const historyItem = state.undoStack.pop();
      if (historyItem == null)
        return;
      state.isHistoryPaused = false;
      const result = apply(historyItem, true);
      notify(result.updates), state.redoStack.push(result.reverse);
      for (const op of historyItem)
        op.type !== "presence" && state.buffer.storageOperations.push(op);
      tryFlushing();
    },
    redo: function() {
      if (state.isBatching)
        throw new Error("redo is not allowed during a batch");
      const historyItem = state.redoStack.pop();
      if (historyItem == null)
        return;
      state.isHistoryPaused = false;
      const result = apply(historyItem, true);
      notify(result.updates), state.undoStack.push(result.reverse);
      for (const op of historyItem)
        op.type !== "presence" && state.buffer.storageOperations.push(op);
      tryFlushing();
    },
    pauseHistory: function() {
      state.pausedHistory = [], state.isHistoryPaused = true;
    },
    resumeHistory: function() {
      state.isHistoryPaused = false, state.pausedHistory.length > 0 && addToUndoStack(state.pausedHistory), state.pausedHistory = [];
    },
    getStorage: function() {
      return state.root ? new Promise((resolve) => resolve({root: state.root})) : (_getInitialStatePromise == null && (state.buffer.messages.push({type: ClientMsgCode.FETCH_STORAGE}), tryFlushing(), _getInitialStatePromise = new Promise((resolve) => _getInitialStateResolver = resolve)), _getInitialStatePromise.then(() => ({root: nn(state.root)})));
    },
    selectors: {
      getConnectionState: function() {
        return state.connection.state;
      },
      getSelf: function() {
        return state.connection.state === "open" || state.connection.state === "connecting" ? {
          connectionId: state.connection.id,
          id: state.connection.userId,
          info: state.connection.userInfo,
          presence: getPresence()
        } : null;
      },
      getPresence,
      getOthers: function() {
        return state.others;
      }
    }
  };
}
function createRoom(options, context) {
  var _a4, _b2;
  const initialPresence = (_a4 = options.initialPresence) !== null && _a4 !== void 0 ? _a4 : options.defaultPresence, initialStorage = (_b2 = options.initialStorage) !== null && _b2 !== void 0 ? _b2 : options.defaultStorageRoot, machine = makeStateMachine(function(initialPresence2, initialStorage2) {
    return {
      connection: {state: "closed"},
      token: null,
      lastConnectionId: null,
      socket: null,
      listeners: {
        event: [],
        others: [],
        "my-presence": [],
        error: [],
        connection: [],
        storage: []
      },
      numberOfRetry: 0,
      lastFlushTime: 0,
      timeoutHandles: {flush: null, reconnect: 0, pongTimeout: 0},
      buffer: {
        presence: initialPresence2 == null ? {} : initialPresence2,
        messages: [],
        storageOperations: []
      },
      intervalHandles: {heartbeat: 0},
      me: initialPresence2 == null ? {} : initialPresence2,
      users: {},
      others: makeOthers({}),
      defaultStorageRoot: initialStorage2,
      idFactory: null,
      clock: 0,
      opClock: 0,
      items: new Map(),
      root: void 0,
      undoStack: [],
      redoStack: [],
      isHistoryPaused: false,
      pausedHistory: [],
      isBatching: false,
      batch: {
        ops: [],
        updates: {storageUpdates: new Map(), presence: false, others: []},
        reverseOps: []
      },
      offlineOperations: new Map()
    };
  }(typeof initialPresence == "function" ? initialPresence(context.roomId) : initialPresence, typeof initialStorage == "function" ? initialStorage(context.roomId) : initialStorage), context), room = {
    id: context.roomId,
    getConnectionState: machine.selectors.getConnectionState,
    getSelf: machine.selectors.getSelf,
    subscribe: machine.subscribe,
    getPresence: machine.selectors.getPresence,
    updatePresence: machine.updatePresence,
    getOthers: machine.selectors.getOthers,
    broadcastEvent: machine.broadcastEvent,
    getStorage: machine.getStorage,
    batch: machine.batch,
    history: {
      undo: machine.undo,
      redo: machine.redo,
      pause: machine.pauseHistory,
      resume: machine.resumeHistory
    },
    __INTERNAL_DO_NOT_USE: {
      simulateCloseWebsocket: machine.simulateSocketClose,
      simulateSendCloseEvent: machine.simulateSendCloseEvent
    }
  };
  return {
    connect: machine.connect,
    disconnect: machine.disconnect,
    onNavigatorOnline: machine.onNavigatorOnline,
    onVisibilityChange: machine.onVisibilityChange,
    room
  };
}
var LiveblocksError = class extends Error {
  constructor(message, code3) {
    super(message), this.code = code3;
  }
};
function fetchAuthEndpoint(fetch2, endpoint, body) {
  return fetch2(endpoint, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify(body)
  }).then((res) => {
    if (!res.ok)
      throw new AuthenticationError(`Expected a status 200 but got ${res.status} when doing a POST request on "${endpoint}"`);
    return res.json().catch((er2) => {
      throw new AuthenticationError(`Expected a JSON response when doing a POST request on "${endpoint}". ${er2}`);
    });
  }).then((data) => {
    if (!isPlainObject2(data) || typeof data.token != "string")
      throw new AuthenticationError(`Expected a JSON response of the form \`{ token: "..." }\` when doing a POST request on "${endpoint}", but got ${JSON.stringify(data)}`);
    const {token} = data;
    return {token};
  });
}
var AuthenticationError = class extends Error {
  constructor(message) {
    super(message);
  }
};
function createClient(options) {
  const clientOptions = options, throttleDelay = function(options2) {
    if (options2.throttle === void 0)
      return 100;
    if (typeof options2.throttle != "number" || options2.throttle < 80 || options2.throttle > 1e3)
      throw new Error("throttle should be a number between 80 and 1000.");
    return options2.throttle;
  }(options), rooms = new Map();
  return typeof window != "undefined" && window.addEventListener !== void 0 && window.addEventListener("online", () => {
    for (const [, room] of rooms)
      room.onNavigatorOnline();
  }), typeof document != "undefined" && document.addEventListener("visibilitychange", () => {
    for (const [, room] of rooms)
      room.onVisibilityChange(document.visibilityState);
  }), {
    getRoom: function(roomId2) {
      const internalRoom = rooms.get(roomId2);
      return internalRoom ? internalRoom.room : null;
    },
    enter: function(roomId2, options2 = {}) {
      var _a4;
      let internalRoom = rooms.get(roomId2);
      if (internalRoom)
        return internalRoom.room;
      if (errorIf(options2.defaultPresence, "Argument `defaultPresence` will be removed in @liveblocks/client 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"), errorIf(options2.defaultStorageRoot, "Argument `defaultStorageRoot` will be removed in @liveblocks/client 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP"), internalRoom = createRoom({
        initialPresence: options2.initialPresence,
        initialStorage: options2.initialStorage,
        defaultPresence: options2.defaultPresence,
        defaultStorageRoot: options2.defaultStorageRoot
      }, {
        roomId: roomId2,
        throttleDelay,
        polyfills: clientOptions.polyfills,
        WebSocketPolyfill: clientOptions.WebSocketPolyfill,
        fetchPolyfill: clientOptions.fetchPolyfill,
        liveblocksServer: (clientOptions == null ? void 0 : clientOptions.liveblocksServer) || "wss://liveblocks.net/v6",
        authentication: prepareAuthentication(clientOptions)
      }), rooms.set(roomId2, internalRoom), !options2.DO_NOT_USE_withoutConnecting) {
        if (typeof atob == "undefined") {
          if (((_a4 = clientOptions.polyfills) === null || _a4 === void 0 ? void 0 : _a4.atob) == null)
            throw new Error("You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill");
          global.atob = clientOptions.polyfills.atob;
        }
        internalRoom.connect();
      }
      return internalRoom.room;
    },
    leave: function(roomId2) {
      const room = rooms.get(roomId2);
      room && (room.disconnect(), rooms.delete(roomId2));
    }
  };
}
function prepareAuthentication(clientOptions) {
  const {publicApiKey, authEndpoint} = clientOptions;
  if (authEndpoint !== void 0 && publicApiKey !== void 0)
    throw new Error("You cannot use both publicApiKey and authEndpoint. Please use either publicApiKey or authEndpoint, but not both. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient");
  if (typeof publicApiKey == "string") {
    if (publicApiKey.startsWith("sk_"))
      throw new Error("Invalid publicApiKey. You are using the secret key which is not supported. Please use the public key instead. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey");
    if (!publicApiKey.startsWith("pk_"))
      throw new Error("Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey");
    return {
      type: "public",
      publicApiKey,
      url: clientOptions.publicAuthorizeEndpoint || "https://liveblocks.io/api/public/authorize"
    };
  }
  if (typeof authEndpoint == "string")
    return {type: "private", url: authEndpoint};
  if (typeof authEndpoint == "function")
    return {type: "custom", callback: authEndpoint};
  if (authEndpoint !== void 0)
    throw new Error("authEndpoint must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint");
  throw new Error("Invalid Liveblocks client options. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient");
}

// ../../node_modules/@liveblocks/react/index.mjs
var React59 = __toModule(require_react());
var import_react19 = __toModule(require_react());
var ClientContext = React59.createContext(null);
function useClient() {
  const client2 = React59.useContext(ClientContext);
  if (client2 == null)
    throw new Error("LiveblocksProvider is missing from the react tree");
  return client2;
}
function __awaiter4(thisArg, _arguments, P10, generator) {
  return new (P10 || (P10 = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e14) {
        reject2(e14);
      }
    }
    function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e14) {
        reject2(e14);
      }
    }
    function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P10 ? value : new P10(function(resolve2) {
        resolve2(value);
      })).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function useRerender() {
  const [, update] = (0, import_react19.useReducer)((x10) => x10 + 1, 0);
  return update;
}
function createRoomContext(client2) {
  let useClient$1;
  useClient$1 = client2 !== "__legacy" ? () => client2 : useClient;
  const RoomContext = React59.createContext(null);
  function useRoom2() {
    const room = React59.useContext(RoomContext);
    if (room == null)
      throw new Error("RoomProvider is missing from the react tree");
    return room;
  }
  function useStorage() {
    const room = useRoom2(), [root2, setState] = React59.useState(null);
    return React59.useEffect(() => {
      let didCancel = false;
      return function() {
        __awaiter4(this, void 0, void 0, function* () {
          const storage = yield room.getStorage();
          didCancel || setState(storage.root);
        });
      }(), () => {
        didCancel = true;
      };
    }, [room]), [root2];
  }
  function deprecated_useMap(key, entries2) {
    errorIf(entries2, `Support for initializing entries in useMap() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveMap(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveMap(entries2 != null ? entries2 : void 0));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useMap() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveMap } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveMap(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function deprecated_useList(key, items) {
    errorIf(items, `Support for initializing items in useList() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    import { LiveList } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveList(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveList(items));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useList() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveList } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveList(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function deprecated_useObject(key, initialData) {
    errorIf(initialData, `Support for initializing data in useObject() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    import { LiveObject } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveObject(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveObject(initialData));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useObject() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveObject } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveObject(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function useHistory2() {
    return useRoom2().history;
  }
  function useStorageValue(key, initialValue) {
    const room = useRoom2(), [root2] = useStorage(), rerender = useRerender();
    if (React59.useEffect(() => {
      if (root2 == null)
        return;
      let liveValue = root2.get(key);
      liveValue == null && (liveValue = initialValue, root2.set(key, liveValue));
      let unsubscribeCrdt = room.subscribe(liveValue, rerender);
      const unsubscribeRoot = room.subscribe(root2, function() {
        const newCrdt = root2.get(key);
        newCrdt !== liveValue && (unsubscribeCrdt(), liveValue = newCrdt, unsubscribeCrdt = room.subscribe(liveValue, rerender), rerender());
      });
      return rerender(), () => {
        unsubscribeRoot(), unsubscribeCrdt();
      };
    }, [root2, room]), root2 == null)
      return {status: "loading"};
    {
      const value = root2.get(key);
      return value == null ? {status: "notfound"} : {status: "ok", value};
    }
  }
  return {
    RoomProvider: function(props) {
      const {
        id: roomId2,
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot
      } = props;
      if (true) {
        if (roomId2 == null)
          throw new Error("RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required");
        if (typeof roomId2 != "string")
          throw new Error("RoomProvider id property should be a string.");
      }
      errorIf(defaultPresence, "RoomProvider's `defaultPresence` prop will be removed in @liveblocks/react 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"), errorIf(defaultStorageRoot, "RoomProvider's `defaultStorageRoot` prop will be removed in @liveblocks/react 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP");
      const _client = useClient$1(), [room, setRoom] = React59.useState(() => _client.enter(roomId2, {
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot,
        DO_NOT_USE_withoutConnecting: typeof window == "undefined"
      }));
      return React59.useEffect(() => (setRoom(_client.enter(roomId2, {
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot,
        DO_NOT_USE_withoutConnecting: typeof window == "undefined"
      })), () => {
        _client.leave(roomId2);
      }), [_client, roomId2]), React59.createElement(RoomContext.Provider, {value: room}, props.children);
    },
    useBatch: function() {
      return useRoom2().batch;
    },
    useBroadcastEvent: function() {
      const room = useRoom2();
      return React59.useCallback((event, options = {shouldQueueEventIfNotReady: false}) => {
        room.broadcastEvent(event, options);
      }, [room]);
    },
    useErrorListener: function(callback) {
      const room = useRoom2(), savedCallback = React59.useRef(callback);
      React59.useEffect(() => {
        savedCallback.current = callback;
      }), React59.useEffect(() => {
        const unsubscribe = room.subscribe("error", (e14) => savedCallback.current(e14));
        return () => {
          unsubscribe();
        };
      }, [room]);
    },
    useEventListener: function(callback) {
      const room = useRoom2(), savedCallback = React59.useRef(callback);
      React59.useEffect(() => {
        savedCallback.current = callback;
      }), React59.useEffect(() => {
        const unsubscribe = room.subscribe("event", (eventData) => {
          savedCallback.current(eventData);
        });
        return () => {
          unsubscribe();
        };
      }, [room]);
    },
    useHistory: useHistory2,
    useList: function(key) {
      return deprecated_useList(key);
    },
    useMap: function(key) {
      return deprecated_useMap(key);
    },
    useMyPresence: function() {
      const room = useRoom2(), presence = room.getPresence(), rerender = useRerender();
      return React59.useEffect(() => {
        const unsubscribe = room.subscribe("my-presence", rerender);
        return () => {
          unsubscribe();
        };
      }, [room]), [
        presence,
        React59.useCallback((overrides, options) => room.updatePresence(overrides, options), [room])
      ];
    },
    useObject: function(key) {
      return deprecated_useObject(key);
    },
    useOthers: function() {
      const room = useRoom2(), rerender = useRerender();
      return React59.useEffect(() => {
        const unsubscribe = room.subscribe("others", rerender);
        return () => {
          unsubscribe();
        };
      }, [room]), room.getOthers();
    },
    useRedo: function() {
      return useHistory2().redo;
    },
    useRoom: useRoom2,
    useSelf: function() {
      const room = useRoom2(), rerender = useRerender();
      return React59.useEffect(() => {
        const unsubscribePresence = room.subscribe("my-presence", rerender), unsubscribeConnection = room.subscribe("connection", rerender);
        return () => {
          unsubscribePresence(), unsubscribeConnection();
        };
      }, [room]), room.getSelf();
    },
    useStorage,
    useUndo: function() {
      return useHistory2().undo;
    },
    useUpdateMyPresence: function() {
      const room = useRoom2();
      return React59.useCallback((overrides, options) => {
        room.updatePresence(overrides, options);
      }, [room]);
    },
    deprecated_useList,
    deprecated_useMap,
    deprecated_useObject
  };
}
var _hooks = createRoomContext("__legacy");

// src/multiplayer/liveblocks.config.ts
var client = createClient({
  publicApiKey: "pk_live_MQyewokvyPeZAt4CaE5u7o5u",
  throttle: 80
});
var {RoomProvider, useHistory, useRedo, useUndo, useRoom, useUpdateMyPresence} = createRoomContext(client);

// src/multiplayer/useMultiplayerState.ts
var import_react21 = __toModule(require_react());
function useMultiplayerState(roomId2) {
  const [app, setApp] = (0, import_react21.useState)();
  const [error, setError] = (0, import_react21.useState)();
  const [loading, setLoading] = (0, import_react21.useState)(true);
  const room = useRoom();
  const onUndo = useUndo();
  const onRedo = useRedo();
  const updateMyPresence = useUpdateMyPresence();
  const rIsPaused = (0, import_react21.useRef)(false);
  const rLiveShapes = (0, import_react21.useRef)();
  const rLiveBindings = (0, import_react21.useRef)();
  const rLiveAssets = (0, import_react21.useRef)();
  const onMount = (0, import_react21.useCallback)((app2) => {
    app2.loadRoom(roomId2);
    app2.pause();
    window.app = app2;
    setApp(app2);
  }, [roomId2]);
  const onChangePage = (0, import_react21.useCallback)((app2, shapes, bindings, assets) => {
    room.batch(() => {
      const lShapes = rLiveShapes.current;
      const lBindings = rLiveBindings.current;
      const lAssets = rLiveAssets.current;
      if (!(lShapes && lBindings && lAssets))
        return;
      Object.entries(shapes).forEach(([id2, shape]) => {
        if (!shape) {
          lShapes.delete(id2);
        } else {
          lShapes.set(shape.id, shape);
        }
      });
      Object.entries(bindings).forEach(([id2, binding]) => {
        if (!binding) {
          lBindings.delete(id2);
        } else {
          lBindings.set(binding.id, binding);
        }
      });
      Object.entries(assets).forEach(([id2, asset]) => {
        if (!asset) {
          lAssets.delete(id2);
        } else {
          lAssets.set(asset.id, asset);
        }
      });
    });
  }, [room]);
  const onChangePresence = (0, import_react21.useCallback)((app2, user) => {
    var _a4;
    updateMyPresence({id: (_a4 = app2.room) == null ? void 0 : _a4.userId, user});
  }, [updateMyPresence]);
  import_react21.default.useEffect(() => {
    const unsubs = [];
    if (!(app && room))
      return;
    unsubs.push(room.subscribe("error", (error2) => setError(error2)));
    unsubs.push(room.subscribe("others", (others, event) => {
      if (event.type === "leave") {
        const {presence} = event.user;
        if (presence) {
          app == null ? void 0 : app.removeUser(presence.id);
        }
      } else {
        app.updateUsers(others.toArray().filter((other) => other.presence).map((other) => other.presence.user).filter(Boolean));
      }
    }));
    let stillAlive = true;
    function setupDocument() {
      return __async(this, null, function* () {
        const storage = yield room.getStorage();
        const version = storage.root.get("version");
        let lShapes = storage.root.get("shapes");
        if (!lShapes || !("_serialize" in lShapes)) {
          storage.root.set("shapes", new LiveMap());
          lShapes = storage.root.get("shapes");
        }
        rLiveShapes.current = lShapes;
        let lBindings = storage.root.get("bindings");
        if (!lBindings || !("_serialize" in lBindings)) {
          storage.root.set("bindings", new LiveMap());
          lBindings = storage.root.get("bindings");
        }
        rLiveBindings.current = lBindings;
        let lAssets = storage.root.get("assets");
        if (!lAssets || !("_serialize" in lAssets)) {
          storage.root.set("assets", new LiveMap());
          lAssets = storage.root.get("assets");
        }
        rLiveAssets.current = lAssets;
        if (!version) {
          const doc = storage.root.get("doc");
          if (doc) {
            const {
              document: {
                pages: {
                  page: {shapes, bindings}
                },
                assets
              }
            } = doc.toObject();
            Object.values(shapes).forEach((shape) => lShapes.set(shape.id, shape));
            Object.values(bindings).forEach((binding) => lBindings.set(binding.id, binding));
            Object.values(assets).forEach((asset) => lAssets.set(asset.id, asset));
          }
        }
        storage.root.set("version", 2.1);
        const handleChanges = () => {
          app == null ? void 0 : app.replacePageContent(Object.fromEntries(lShapes.entries()), Object.fromEntries(lBindings.entries()), Object.fromEntries(lAssets.entries()));
        };
        if (stillAlive) {
          unsubs.push(room.subscribe(lShapes, handleChanges));
          handleChanges();
          if (app) {
            app.zoomToFit();
            if (app.zoom > 1) {
              app.resetZoom();
            }
          }
          setLoading(false);
        }
      });
    }
    setupDocument();
    return () => {
      stillAlive = false;
      unsubs.forEach((unsub) => unsub());
    };
  }, [room, app]);
  const onSessionStart = import_react21.default.useCallback(() => {
    if (!room)
      return;
    room.history.pause();
    rIsPaused.current = true;
  }, [room]);
  const onSessionEnd = import_react21.default.useCallback(() => {
    if (!room)
      return;
    room.history.resume();
    rIsPaused.current = false;
  }, [room]);
  useHotkeys("ctrl+shift+l;,\u2318+shift+l", () => {
    if (window.confirm("Reset the document?")) {
      room.batch(() => {
        const lShapes = rLiveShapes.current;
        const lBindings = rLiveBindings.current;
        const lAssets = rLiveAssets.current;
        if (!(lShapes && lBindings && lAssets))
          return;
        lShapes.forEach((shape) => {
          lShapes.delete(shape.id);
        });
        lBindings.forEach((shape) => {
          lBindings.delete(shape.id);
        });
        lAssets.forEach((shape) => {
          lAssets.delete(shape.id);
        });
      });
    }
  }, []);
  return {
    onUndo,
    onRedo,
    onMount,
    onSessionStart,
    onSessionEnd,
    onChangePage,
    onChangePresence,
    error,
    loading
  };
}

// src/multiplayer/multiplayer.tsx
var roomId = "mp-test-8";
function Multiplayer() {
  return /* @__PURE__ */ React61.createElement(RoomProvider, {
    id: roomId
  }, /* @__PURE__ */ React61.createElement(Editor, {
    roomId
  }));
}
function Editor({roomId: roomId2}) {
  const _a4 = useMultiplayerState(roomId2), {error} = _a4, events = __rest(_a4, ["error"]);
  if (error)
    return /* @__PURE__ */ React61.createElement("div", null, "Error: ", error.message);
  return /* @__PURE__ */ React61.createElement("div", {
    className: "tldraw"
  }, /* @__PURE__ */ React61.createElement(Kle, __assign(__assign({
    showPages: true
  }, events), {
    disableAssets: false,
    showMultiplayerMenu: false
  })));
}

// src/index.tsx
var container = document.getElementById("root");
var root = (0, import_client4.createRoot)(container);
root.render(/* @__PURE__ */ import_react22.default.createElement(import_react22.default.StrictMode, null, /* @__PURE__ */ import_react22.default.createElement(Multiplayer, null)));
//# sourceMappingURL=index.js.map
