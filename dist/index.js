var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a6, b7) => {
  for (var prop in b7 || (b7 = {}))
    if (__hasOwnProp.call(b7, prop))
      __defNormalProp(a6, prop, b7[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b7)) {
      if (__propIsEnum.call(b7, prop))
        __defNormalProp(a6, prop, b7[prop]);
    }
  return a6;
};
var __spreadProps = (a6, b7) => __defProps(a6, __getOwnPropDescs(b7));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject2) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e13) {
        reject2(e13);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e13) {
        reject2(e13);
      }
    };
    var step = (x7) => x7.done ? resolve(x7.value) : Promise.resolve(x7.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../../node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "../../node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l8 = Symbol.for("react.element");
    var n6 = Symbol.for("react.portal");
    var p7 = Symbol.for("react.fragment");
    var q3 = Symbol.for("react.strict_mode");
    var r12 = Symbol.for("react.profiler");
    var t12 = Symbol.for("react.provider");
    var u5 = Symbol.for("react.context");
    var v6 = Symbol.for("react.forward_ref");
    var w7 = Symbol.for("react.suspense");
    var x7 = Symbol.for("react.memo");
    var y4 = Symbol.for("react.lazy");
    var z3 = Symbol.iterator;
    function A4(a6) {
      if (a6 === null || typeof a6 !== "object")
        return null;
      a6 = z3 && a6[z3] || a6["@@iterator"];
      return typeof a6 === "function" ? a6 : null;
    }
    var B4 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var C6 = Object.assign;
    var D5 = {};
    function E7(a6, b7, e13) {
      this.props = a6;
      this.context = b7;
      this.refs = D5;
      this.updater = e13 || B4;
    }
    E7.prototype.isReactComponent = {};
    E7.prototype.setState = function(a6, b7) {
      if (typeof a6 !== "object" && typeof a6 !== "function" && a6 != null)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a6, b7, "setState");
    };
    E7.prototype.forceUpdate = function(a6) {
      this.updater.enqueueForceUpdate(this, a6, "forceUpdate");
    };
    function F6() {
    }
    F6.prototype = E7.prototype;
    function G3(a6, b7, e13) {
      this.props = a6;
      this.context = b7;
      this.refs = D5;
      this.updater = e13 || B4;
    }
    var H5 = G3.prototype = new F6();
    H5.constructor = G3;
    C6(H5, E7.prototype);
    H5.isPureReactComponent = true;
    var I4 = Array.isArray;
    var J4 = Object.prototype.hasOwnProperty;
    var K3 = { current: null };
    var L4 = { key: true, ref: true, __self: true, __source: true };
    function M3(a6, b7, e13) {
      var d8, c8 = {}, k4 = null, h6 = null;
      if (b7 != null)
        for (d8 in b7.ref !== void 0 && (h6 = b7.ref), b7.key !== void 0 && (k4 = "" + b7.key), b7)
          J4.call(b7, d8) && !L4.hasOwnProperty(d8) && (c8[d8] = b7[d8]);
      var g7 = arguments.length - 2;
      if (g7 === 1)
        c8.children = e13;
      else if (1 < g7) {
        for (var f8 = Array(g7), m8 = 0; m8 < g7; m8++)
          f8[m8] = arguments[m8 + 2];
        c8.children = f8;
      }
      if (a6 && a6.defaultProps)
        for (d8 in g7 = a6.defaultProps, g7)
          c8[d8] === void 0 && (c8[d8] = g7[d8]);
      return { $$typeof: l8, type: a6, key: k4, ref: h6, props: c8, _owner: K3.current };
    }
    function N2(a6, b7) {
      return { $$typeof: l8, type: a6.type, key: b7, ref: a6.ref, props: a6.props, _owner: a6._owner };
    }
    function O5(a6) {
      return typeof a6 === "object" && a6 !== null && a6.$$typeof === l8;
    }
    function escape(a6) {
      var b7 = { "=": "=0", ":": "=2" };
      return "$" + a6.replace(/[=:]/g, function(a7) {
        return b7[a7];
      });
    }
    var P3 = /\/+/g;
    function Q(a6, b7) {
      return typeof a6 === "object" && a6 !== null && a6.key != null ? escape("" + a6.key) : b7.toString(36);
    }
    function R7(a6, b7, e13, d8, c8) {
      var k4 = typeof a6;
      if (k4 === "undefined" || k4 === "boolean")
        a6 = null;
      var h6 = false;
      if (a6 === null)
        h6 = true;
      else
        switch (k4) {
          case "string":
          case "number":
            h6 = true;
            break;
          case "object":
            switch (a6.$$typeof) {
              case l8:
              case n6:
                h6 = true;
            }
        }
      if (h6)
        return h6 = a6, c8 = c8(h6), a6 = d8 === "" ? "." + Q(h6, 0) : d8, I4(c8) ? (e13 = "", a6 != null && (e13 = a6.replace(P3, "$&/") + "/"), R7(c8, b7, e13, "", function(a7) {
          return a7;
        })) : c8 != null && (O5(c8) && (c8 = N2(c8, e13 + (!c8.key || h6 && h6.key === c8.key ? "" : ("" + c8.key).replace(P3, "$&/") + "/") + a6)), b7.push(c8)), 1;
      h6 = 0;
      d8 = d8 === "" ? "." : d8 + ":";
      if (I4(a6))
        for (var g7 = 0; g7 < a6.length; g7++) {
          k4 = a6[g7];
          var f8 = d8 + Q(k4, g7);
          h6 += R7(k4, b7, e13, f8, c8);
        }
      else if (f8 = A4(a6), typeof f8 === "function")
        for (a6 = f8.call(a6), g7 = 0; !(k4 = a6.next()).done; )
          k4 = k4.value, f8 = d8 + Q(k4, g7++), h6 += R7(k4, b7, e13, f8, c8);
      else if (k4 === "object")
        throw b7 = String(a6), Error("Objects are not valid as a React child (found: " + (b7 === "[object Object]" ? "object with keys {" + Object.keys(a6).join(", ") + "}" : b7) + "). If you meant to render a collection of children, use an array instead.");
      return h6;
    }
    function S3(a6, b7, e13) {
      if (a6 == null)
        return a6;
      var d8 = [], c8 = 0;
      R7(a6, d8, "", "", function(a7) {
        return b7.call(e13, a7, c8++);
      });
      return d8;
    }
    function T5(a6) {
      if (a6._status === -1) {
        var b7 = a6._result;
        b7 = b7();
        b7.then(function(b8) {
          if (a6._status === 0 || a6._status === -1)
            a6._status = 1, a6._result = b8;
        }, function(b8) {
          if (a6._status === 0 || a6._status === -1)
            a6._status = 2, a6._result = b8;
        });
        a6._status === -1 && (a6._status = 0, a6._result = b7);
      }
      if (a6._status === 1)
        return a6._result.default;
      throw a6._result;
    }
    var U3 = { current: null };
    var V5 = { transition: null };
    var W4 = { ReactCurrentDispatcher: U3, ReactCurrentBatchConfig: V5, ReactCurrentOwner: K3 };
    exports.Children = { map: S3, forEach: function(a6, b7, e13) {
      S3(a6, function() {
        b7.apply(this, arguments);
      }, e13);
    }, count: function(a6) {
      var b7 = 0;
      S3(a6, function() {
        b7++;
      });
      return b7;
    }, toArray: function(a6) {
      return S3(a6, function(a7) {
        return a7;
      }) || [];
    }, only: function(a6) {
      if (!O5(a6))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a6;
    } };
    exports.Component = E7;
    exports.Fragment = p7;
    exports.Profiler = r12;
    exports.PureComponent = G3;
    exports.StrictMode = q3;
    exports.Suspense = w7;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W4;
    exports.cloneElement = function(a6, b7, e13) {
      if (a6 === null || a6 === void 0)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a6 + ".");
      var d8 = C6({}, a6.props), c8 = a6.key, k4 = a6.ref, h6 = a6._owner;
      if (b7 != null) {
        b7.ref !== void 0 && (k4 = b7.ref, h6 = K3.current);
        b7.key !== void 0 && (c8 = "" + b7.key);
        if (a6.type && a6.type.defaultProps)
          var g7 = a6.type.defaultProps;
        for (f8 in b7)
          J4.call(b7, f8) && !L4.hasOwnProperty(f8) && (d8[f8] = b7[f8] === void 0 && g7 !== void 0 ? g7[f8] : b7[f8]);
      }
      var f8 = arguments.length - 2;
      if (f8 === 1)
        d8.children = e13;
      else if (1 < f8) {
        g7 = Array(f8);
        for (var m8 = 0; m8 < f8; m8++)
          g7[m8] = arguments[m8 + 2];
        d8.children = g7;
      }
      return { $$typeof: l8, type: a6.type, key: c8, ref: k4, props: d8, _owner: h6 };
    };
    exports.createContext = function(a6) {
      a6 = { $$typeof: u5, _currentValue: a6, _currentValue2: a6, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a6.Provider = { $$typeof: t12, _context: a6 };
      return a6.Consumer = a6;
    };
    exports.createElement = M3;
    exports.createFactory = function(a6) {
      var b7 = M3.bind(null, a6);
      b7.type = a6;
      return b7;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a6) {
      return { $$typeof: v6, render: a6 };
    };
    exports.isValidElement = O5;
    exports.lazy = function(a6) {
      return { $$typeof: y4, _payload: { _status: -1, _result: a6 }, _init: T5 };
    };
    exports.memo = function(a6, b7) {
      return { $$typeof: x7, type: a6, compare: b7 === void 0 ? null : b7 };
    };
    exports.startTransition = function(a6) {
      var b7 = V5.transition;
      V5.transition = {};
      try {
        a6();
      } finally {
        V5.transition = b7;
      }
    };
    exports.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    exports.useCallback = function(a6, b7) {
      return U3.current.useCallback(a6, b7);
    };
    exports.useContext = function(a6) {
      return U3.current.useContext(a6);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a6) {
      return U3.current.useDeferredValue(a6);
    };
    exports.useEffect = function(a6, b7) {
      return U3.current.useEffect(a6, b7);
    };
    exports.useId = function() {
      return U3.current.useId();
    };
    exports.useImperativeHandle = function(a6, b7, e13) {
      return U3.current.useImperativeHandle(a6, b7, e13);
    };
    exports.useInsertionEffect = function(a6, b7) {
      return U3.current.useInsertionEffect(a6, b7);
    };
    exports.useLayoutEffect = function(a6, b7) {
      return U3.current.useLayoutEffect(a6, b7);
    };
    exports.useMemo = function(a6, b7) {
      return U3.current.useMemo(a6, b7);
    };
    exports.useReducer = function(a6, b7, e13) {
      return U3.current.useReducer(a6, b7, e13);
    };
    exports.useRef = function(a6) {
      return U3.current.useRef(a6);
    };
    exports.useState = function(a6) {
      return U3.current.useState(a6);
    };
    exports.useSyncExternalStore = function(a6, b7, e13) {
      return U3.current.useSyncExternalStore(a6, b7, e13);
    };
    exports.useTransition = function() {
      return U3.current.useTransition();
    };
    exports.version = "18.1.0";
  }
});

// ../../node_modules/react/index.js
var require_react = __commonJS({
  "../../node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (true) {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = null;
    }
  }
});

// ../../node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "../../node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    function f8(a6, b7) {
      var c8 = a6.length;
      a6.push(b7);
      a:
        for (; 0 < c8; ) {
          var d8 = c8 - 1 >>> 1, e13 = a6[d8];
          if (0 < g7(e13, b7))
            a6[d8] = b7, a6[c8] = e13, c8 = d8;
          else
            break a;
        }
    }
    function h6(a6) {
      return a6.length === 0 ? null : a6[0];
    }
    function k4(a6) {
      if (a6.length === 0)
        return null;
      var b7 = a6[0], c8 = a6.pop();
      if (c8 !== b7) {
        a6[0] = c8;
        a:
          for (var d8 = 0, e13 = a6.length, w7 = e13 >>> 1; d8 < w7; ) {
            var m8 = 2 * (d8 + 1) - 1, C6 = a6[m8], n6 = m8 + 1, x7 = a6[n6];
            if (0 > g7(C6, c8))
              n6 < e13 && 0 > g7(x7, C6) ? (a6[d8] = x7, a6[n6] = c8, d8 = n6) : (a6[d8] = C6, a6[m8] = c8, d8 = m8);
            else if (n6 < e13 && 0 > g7(x7, c8))
              a6[d8] = x7, a6[n6] = c8, d8 = n6;
            else
              break a;
          }
      }
      return b7;
    }
    function g7(a6, b7) {
      var c8 = a6.sortIndex - b7.sortIndex;
      return c8 !== 0 ? c8 : a6.id - b7.id;
    }
    if (typeof performance === "object" && typeof performance.now === "function") {
      l8 = performance;
      exports.unstable_now = function() {
        return l8.now();
      };
    } else {
      p7 = Date, q3 = p7.now();
      exports.unstable_now = function() {
        return p7.now() - q3;
      };
    }
    var l8;
    var p7;
    var q3;
    var r12 = [];
    var t12 = [];
    var u5 = 1;
    var v6 = null;
    var y4 = 3;
    var z3 = false;
    var A4 = false;
    var B4 = false;
    var D5 = typeof setTimeout === "function" ? setTimeout : null;
    var E7 = typeof clearTimeout === "function" ? clearTimeout : null;
    var F6 = typeof setImmediate !== "undefined" ? setImmediate : null;
    typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G3(a6) {
      for (var b7 = h6(t12); b7 !== null; ) {
        if (b7.callback === null)
          k4(t12);
        else if (b7.startTime <= a6)
          k4(t12), b7.sortIndex = b7.expirationTime, f8(r12, b7);
        else
          break;
        b7 = h6(t12);
      }
    }
    function H5(a6) {
      B4 = false;
      G3(a6);
      if (!A4)
        if (h6(r12) !== null)
          A4 = true, I4(J4);
        else {
          var b7 = h6(t12);
          b7 !== null && K3(H5, b7.startTime - a6);
        }
    }
    function J4(a6, b7) {
      A4 = false;
      B4 && (B4 = false, E7(L4), L4 = -1);
      z3 = true;
      var c8 = y4;
      try {
        G3(b7);
        for (v6 = h6(r12); v6 !== null && (!(v6.expirationTime > b7) || a6 && !M3()); ) {
          var d8 = v6.callback;
          if (typeof d8 === "function") {
            v6.callback = null;
            y4 = v6.priorityLevel;
            var e13 = d8(v6.expirationTime <= b7);
            b7 = exports.unstable_now();
            typeof e13 === "function" ? v6.callback = e13 : v6 === h6(r12) && k4(r12);
            G3(b7);
          } else
            k4(r12);
          v6 = h6(r12);
        }
        if (v6 !== null)
          var w7 = true;
        else {
          var m8 = h6(t12);
          m8 !== null && K3(H5, m8.startTime - b7);
          w7 = false;
        }
        return w7;
      } finally {
        v6 = null, y4 = c8, z3 = false;
      }
    }
    var N2 = false;
    var O5 = null;
    var L4 = -1;
    var P3 = 5;
    var Q = -1;
    function M3() {
      return exports.unstable_now() - Q < P3 ? false : true;
    }
    function R7() {
      if (O5 !== null) {
        var a6 = exports.unstable_now();
        Q = a6;
        var b7 = true;
        try {
          b7 = O5(true, a6);
        } finally {
          b7 ? S3() : (N2 = false, O5 = null);
        }
      } else
        N2 = false;
    }
    var S3;
    if (typeof F6 === "function")
      S3 = function() {
        F6(R7);
      };
    else if (typeof MessageChannel !== "undefined") {
      T5 = new MessageChannel(), U3 = T5.port2;
      T5.port1.onmessage = R7;
      S3 = function() {
        U3.postMessage(null);
      };
    } else
      S3 = function() {
        D5(R7, 0);
      };
    var T5;
    var U3;
    function I4(a6) {
      O5 = a6;
      N2 || (N2 = true, S3());
    }
    function K3(a6, b7) {
      L4 = D5(function() {
        a6(exports.unstable_now());
      }, b7);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a6) {
      a6.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A4 || z3 || (A4 = true, I4(J4));
    };
    exports.unstable_forceFrameRate = function(a6) {
      0 > a6 || 125 < a6 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P3 = 0 < a6 ? Math.floor(1e3 / a6) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y4;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h6(r12);
    };
    exports.unstable_next = function(a6) {
      switch (y4) {
        case 1:
        case 2:
        case 3:
          var b7 = 3;
          break;
        default:
          b7 = y4;
      }
      var c8 = y4;
      y4 = b7;
      try {
        return a6();
      } finally {
        y4 = c8;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a6, b7) {
      switch (a6) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a6 = 3;
      }
      var c8 = y4;
      y4 = a6;
      try {
        return b7();
      } finally {
        y4 = c8;
      }
    };
    exports.unstable_scheduleCallback = function(a6, b7, c8) {
      var d8 = exports.unstable_now();
      typeof c8 === "object" && c8 !== null ? (c8 = c8.delay, c8 = typeof c8 === "number" && 0 < c8 ? d8 + c8 : d8) : c8 = d8;
      switch (a6) {
        case 1:
          var e13 = -1;
          break;
        case 2:
          e13 = 250;
          break;
        case 5:
          e13 = 1073741823;
          break;
        case 4:
          e13 = 1e4;
          break;
        default:
          e13 = 5e3;
      }
      e13 = c8 + e13;
      a6 = { id: u5++, callback: b7, priorityLevel: a6, startTime: c8, expirationTime: e13, sortIndex: -1 };
      c8 > d8 ? (a6.sortIndex = c8, f8(t12, a6), h6(r12) === null && a6 === h6(t12) && (B4 ? (E7(L4), L4 = -1) : B4 = true, K3(H5, c8 - d8))) : (a6.sortIndex = e13, f8(r12, a6), A4 || z3 || (A4 = true, I4(J4)));
      return a6;
    };
    exports.unstable_shouldYield = M3;
    exports.unstable_wrapCallback = function(a6) {
      var b7 = y4;
      return function() {
        var c8 = y4;
        y4 = b7;
        try {
          return a6.apply(this, arguments);
        } finally {
          y4 = c8;
        }
      };
    };
  }
});

// ../../node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "../../node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (true) {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = null;
    }
  }
});

// ../../node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "../../node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ba = require_scheduler();
    function p7(a6) {
      for (var b7 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a6, c8 = 1; c8 < arguments.length; c8++)
        b7 += "&args[]=" + encodeURIComponent(arguments[c8]);
      return "Minified React error #" + a6 + "; visit " + b7 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set();
    var ea = {};
    function fa(a6, b7) {
      ha(a6, b7);
      ha(a6 + "Capture", b7);
    }
    function ha(a6, b7) {
      ea[a6] = b7;
      for (a6 = 0; a6 < b7.length; a6++)
        da.add(b7[a6]);
    }
    var ia = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined");
    var ja = Object.prototype.hasOwnProperty;
    var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var la = {};
    var ma = {};
    function na(a6) {
      if (ja.call(ma, a6))
        return true;
      if (ja.call(la, a6))
        return false;
      if (ka.test(a6))
        return ma[a6] = true;
      la[a6] = true;
      return false;
    }
    function oa(a6, b7, c8, d8) {
      if (c8 !== null && c8.type === 0)
        return false;
      switch (typeof b7) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d8)
            return false;
          if (c8 !== null)
            return !c8.acceptsBooleans;
          a6 = a6.toLowerCase().slice(0, 5);
          return a6 !== "data-" && a6 !== "aria-";
        default:
          return false;
      }
    }
    function pa(a6, b7, c8, d8) {
      if (b7 === null || typeof b7 === "undefined" || oa(a6, b7, c8, d8))
        return true;
      if (d8)
        return false;
      if (c8 !== null)
        switch (c8.type) {
          case 3:
            return !b7;
          case 4:
            return b7 === false;
          case 5:
            return isNaN(b7);
          case 6:
            return isNaN(b7) || 1 > b7;
        }
      return false;
    }
    function t12(a6, b7, c8, d8, e13, f8, g7) {
      this.acceptsBooleans = b7 === 2 || b7 === 3 || b7 === 4;
      this.attributeName = d8;
      this.attributeNamespace = e13;
      this.mustUseProperty = c8;
      this.propertyName = a6;
      this.type = b7;
      this.sanitizeURL = f8;
      this.removeEmptyString = g7;
    }
    var z3 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a6) {
      z3[a6] = new t12(a6, 0, false, a6, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a6) {
      var b7 = a6[0];
      z3[b7] = new t12(b7, 1, false, a6[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a6) {
      z3[a6] = new t12(a6, 2, false, a6.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a6) {
      z3[a6] = new t12(a6, 2, false, a6, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a6) {
      z3[a6] = new t12(a6, 3, false, a6.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a6) {
      z3[a6] = new t12(a6, 3, true, a6, null, false, false);
    });
    ["capture", "download"].forEach(function(a6) {
      z3[a6] = new t12(a6, 4, false, a6, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a6) {
      z3[a6] = new t12(a6, 6, false, a6, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a6) {
      z3[a6] = new t12(a6, 5, false, a6.toLowerCase(), null, false, false);
    });
    var qa = /[\-:]([a-z])/g;
    function ra(a6) {
      return a6[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a6) {
      var b7 = a6.replace(qa, ra);
      z3[b7] = new t12(b7, 1, false, a6, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a6) {
      var b7 = a6.replace(qa, ra);
      z3[b7] = new t12(b7, 1, false, a6, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a6) {
      var b7 = a6.replace(qa, ra);
      z3[b7] = new t12(b7, 1, false, a6, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a6) {
      z3[a6] = new t12(a6, 1, false, a6.toLowerCase(), null, false, false);
    });
    z3.xlinkHref = new t12("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a6) {
      z3[a6] = new t12(a6, 1, false, a6.toLowerCase(), null, true, true);
    });
    function sa(a6, b7, c8, d8) {
      var e13 = z3.hasOwnProperty(b7) ? z3[b7] : null;
      if (e13 !== null ? e13.type !== 0 : d8 || !(2 < b7.length) || b7[0] !== "o" && b7[0] !== "O" || b7[1] !== "n" && b7[1] !== "N")
        pa(b7, c8, e13, d8) && (c8 = null), d8 || e13 === null ? na(b7) && (c8 === null ? a6.removeAttribute(b7) : a6.setAttribute(b7, "" + c8)) : e13.mustUseProperty ? a6[e13.propertyName] = c8 === null ? e13.type === 3 ? false : "" : c8 : (b7 = e13.attributeName, d8 = e13.attributeNamespace, c8 === null ? a6.removeAttribute(b7) : (e13 = e13.type, c8 = e13 === 3 || e13 === 4 && c8 === true ? "" : "" + c8, d8 ? a6.setAttributeNS(d8, b7, c8) : a6.setAttribute(b7, c8)));
    }
    var ta = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var ua = Symbol.for("react.element");
    var va = Symbol.for("react.portal");
    var wa = Symbol.for("react.fragment");
    var xa = Symbol.for("react.strict_mode");
    var za = Symbol.for("react.profiler");
    var Aa = Symbol.for("react.provider");
    var Ba = Symbol.for("react.context");
    var Ca = Symbol.for("react.forward_ref");
    var Da = Symbol.for("react.suspense");
    var Ea = Symbol.for("react.suspense_list");
    var Fa = Symbol.for("react.memo");
    var Ga = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var Ha = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ia = Symbol.iterator;
    function Ja(a6) {
      if (a6 === null || typeof a6 !== "object")
        return null;
      a6 = Ia && a6[Ia] || a6["@@iterator"];
      return typeof a6 === "function" ? a6 : null;
    }
    var A4 = Object.assign;
    var Ka;
    function La(a6) {
      if (Ka === void 0)
        try {
          throw Error();
        } catch (c8) {
          var b7 = c8.stack.trim().match(/\n( *(at )?)/);
          Ka = b7 && b7[1] || "";
        }
      return "\n" + Ka + a6;
    }
    var Ma = false;
    function Na(a6, b7) {
      if (!a6 || Ma)
        return "";
      Ma = true;
      var c8 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b7)
          if (b7 = function() {
            throw Error();
          }, Object.defineProperty(b7.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(b7, []);
            } catch (l8) {
              var d8 = l8;
            }
            Reflect.construct(a6, [], b7);
          } else {
            try {
              b7.call();
            } catch (l8) {
              d8 = l8;
            }
            a6.call(b7.prototype);
          }
        else {
          try {
            throw Error();
          } catch (l8) {
            d8 = l8;
          }
          a6();
        }
      } catch (l8) {
        if (l8 && d8 && typeof l8.stack === "string") {
          for (var e13 = l8.stack.split("\n"), f8 = d8.stack.split("\n"), g7 = e13.length - 1, h6 = f8.length - 1; 1 <= g7 && 0 <= h6 && e13[g7] !== f8[h6]; )
            h6--;
          for (; 1 <= g7 && 0 <= h6; g7--, h6--)
            if (e13[g7] !== f8[h6]) {
              if (g7 !== 1 || h6 !== 1) {
                do
                  if (g7--, h6--, 0 > h6 || e13[g7] !== f8[h6]) {
                    var k4 = "\n" + e13[g7].replace(" at new ", " at ");
                    a6.displayName && k4.includes("<anonymous>") && (k4 = k4.replace("<anonymous>", a6.displayName));
                    return k4;
                  }
                while (1 <= g7 && 0 <= h6);
              }
              break;
            }
        }
      } finally {
        Ma = false, Error.prepareStackTrace = c8;
      }
      return (a6 = a6 ? a6.displayName || a6.name : "") ? La(a6) : "";
    }
    function Oa(a6) {
      switch (a6.tag) {
        case 5:
          return La(a6.type);
        case 16:
          return La("Lazy");
        case 13:
          return La("Suspense");
        case 19:
          return La("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a6 = Na(a6.type, false), a6;
        case 11:
          return a6 = Na(a6.type.render, false), a6;
        case 1:
          return a6 = Na(a6.type, true), a6;
        default:
          return "";
      }
    }
    function Pa(a6) {
      if (a6 == null)
        return null;
      if (typeof a6 === "function")
        return a6.displayName || a6.name || null;
      if (typeof a6 === "string")
        return a6;
      switch (a6) {
        case wa:
          return "Fragment";
        case va:
          return "Portal";
        case za:
          return "Profiler";
        case xa:
          return "StrictMode";
        case Da:
          return "Suspense";
        case Ea:
          return "SuspenseList";
      }
      if (typeof a6 === "object")
        switch (a6.$$typeof) {
          case Ba:
            return (a6.displayName || "Context") + ".Consumer";
          case Aa:
            return (a6._context.displayName || "Context") + ".Provider";
          case Ca:
            var b7 = a6.render;
            a6 = a6.displayName;
            a6 || (a6 = b7.displayName || b7.name || "", a6 = a6 !== "" ? "ForwardRef(" + a6 + ")" : "ForwardRef");
            return a6;
          case Fa:
            return b7 = a6.displayName || null, b7 !== null ? b7 : Pa(a6.type) || "Memo";
          case Ga:
            b7 = a6._payload;
            a6 = a6._init;
            try {
              return Pa(a6(b7));
            } catch (c8) {
            }
        }
      return null;
    }
    function Qa(a6) {
      var b7 = a6.type;
      switch (a6.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b7.displayName || "Context") + ".Consumer";
        case 10:
          return (b7._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a6 = b7.render, a6 = a6.displayName || a6.name || "", b7.displayName || (a6 !== "" ? "ForwardRef(" + a6 + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b7;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Pa(b7);
        case 8:
          return b7 === xa ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof b7 === "function")
            return b7.displayName || b7.name || null;
          if (typeof b7 === "string")
            return b7;
      }
      return null;
    }
    function Ra(a6) {
      switch (typeof a6) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a6;
        case "object":
          return a6;
        default:
          return "";
      }
    }
    function Sa(a6) {
      var b7 = a6.type;
      return (a6 = a6.nodeName) && a6.toLowerCase() === "input" && (b7 === "checkbox" || b7 === "radio");
    }
    function Ta(a6) {
      var b7 = Sa(a6) ? "checked" : "value", c8 = Object.getOwnPropertyDescriptor(a6.constructor.prototype, b7), d8 = "" + a6[b7];
      if (!a6.hasOwnProperty(b7) && typeof c8 !== "undefined" && typeof c8.get === "function" && typeof c8.set === "function") {
        var e13 = c8.get, f8 = c8.set;
        Object.defineProperty(a6, b7, { configurable: true, get: function() {
          return e13.call(this);
        }, set: function(a7) {
          d8 = "" + a7;
          f8.call(this, a7);
        } });
        Object.defineProperty(a6, b7, { enumerable: c8.enumerable });
        return { getValue: function() {
          return d8;
        }, setValue: function(a7) {
          d8 = "" + a7;
        }, stopTracking: function() {
          a6._valueTracker = null;
          delete a6[b7];
        } };
      }
    }
    function Ua(a6) {
      a6._valueTracker || (a6._valueTracker = Ta(a6));
    }
    function Va(a6) {
      if (!a6)
        return false;
      var b7 = a6._valueTracker;
      if (!b7)
        return true;
      var c8 = b7.getValue();
      var d8 = "";
      a6 && (d8 = Sa(a6) ? a6.checked ? "true" : "false" : a6.value);
      a6 = d8;
      return a6 !== c8 ? (b7.setValue(a6), true) : false;
    }
    function Wa(a6) {
      a6 = a6 || (typeof document !== "undefined" ? document : void 0);
      if (typeof a6 === "undefined")
        return null;
      try {
        return a6.activeElement || a6.body;
      } catch (b7) {
        return a6.body;
      }
    }
    function Xa(a6, b7) {
      var c8 = b7.checked;
      return A4({}, b7, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c8 != null ? c8 : a6._wrapperState.initialChecked });
    }
    function Ya(a6, b7) {
      var c8 = b7.defaultValue == null ? "" : b7.defaultValue, d8 = b7.checked != null ? b7.checked : b7.defaultChecked;
      c8 = Ra(b7.value != null ? b7.value : c8);
      a6._wrapperState = { initialChecked: d8, initialValue: c8, controlled: b7.type === "checkbox" || b7.type === "radio" ? b7.checked != null : b7.value != null };
    }
    function Za(a6, b7) {
      b7 = b7.checked;
      b7 != null && sa(a6, "checked", b7, false);
    }
    function $a(a6, b7) {
      Za(a6, b7);
      var c8 = Ra(b7.value), d8 = b7.type;
      if (c8 != null)
        if (d8 === "number") {
          if (c8 === 0 && a6.value === "" || a6.value != c8)
            a6.value = "" + c8;
        } else
          a6.value !== "" + c8 && (a6.value = "" + c8);
      else if (d8 === "submit" || d8 === "reset") {
        a6.removeAttribute("value");
        return;
      }
      b7.hasOwnProperty("value") ? bb(a6, b7.type, c8) : b7.hasOwnProperty("defaultValue") && bb(a6, b7.type, Ra(b7.defaultValue));
      b7.checked == null && b7.defaultChecked != null && (a6.defaultChecked = !!b7.defaultChecked);
    }
    function cb(a6, b7, c8) {
      if (b7.hasOwnProperty("value") || b7.hasOwnProperty("defaultValue")) {
        var d8 = b7.type;
        if (!(d8 !== "submit" && d8 !== "reset" || b7.value !== void 0 && b7.value !== null))
          return;
        b7 = "" + a6._wrapperState.initialValue;
        c8 || b7 === a6.value || (a6.value = b7);
        a6.defaultValue = b7;
      }
      c8 = a6.name;
      c8 !== "" && (a6.name = "");
      a6.defaultChecked = !!a6._wrapperState.initialChecked;
      c8 !== "" && (a6.name = c8);
    }
    function bb(a6, b7, c8) {
      if (b7 !== "number" || Wa(a6.ownerDocument) !== a6)
        c8 == null ? a6.defaultValue = "" + a6._wrapperState.initialValue : a6.defaultValue !== "" + c8 && (a6.defaultValue = "" + c8);
    }
    var db = Array.isArray;
    function eb(a6, b7, c8, d8) {
      a6 = a6.options;
      if (b7) {
        b7 = {};
        for (var e13 = 0; e13 < c8.length; e13++)
          b7["$" + c8[e13]] = true;
        for (c8 = 0; c8 < a6.length; c8++)
          e13 = b7.hasOwnProperty("$" + a6[c8].value), a6[c8].selected !== e13 && (a6[c8].selected = e13), e13 && d8 && (a6[c8].defaultSelected = true);
      } else {
        c8 = "" + Ra(c8);
        b7 = null;
        for (e13 = 0; e13 < a6.length; e13++) {
          if (a6[e13].value === c8) {
            a6[e13].selected = true;
            d8 && (a6[e13].defaultSelected = true);
            return;
          }
          b7 !== null || a6[e13].disabled || (b7 = a6[e13]);
        }
        b7 !== null && (b7.selected = true);
      }
    }
    function fb(a6, b7) {
      if (b7.dangerouslySetInnerHTML != null)
        throw Error(p7(91));
      return A4({}, b7, { value: void 0, defaultValue: void 0, children: "" + a6._wrapperState.initialValue });
    }
    function gb(a6, b7) {
      var c8 = b7.value;
      if (c8 == null) {
        c8 = b7.children;
        b7 = b7.defaultValue;
        if (c8 != null) {
          if (b7 != null)
            throw Error(p7(92));
          if (db(c8)) {
            if (1 < c8.length)
              throw Error(p7(93));
            c8 = c8[0];
          }
          b7 = c8;
        }
        b7 == null && (b7 = "");
        c8 = b7;
      }
      a6._wrapperState = { initialValue: Ra(c8) };
    }
    function hb(a6, b7) {
      var c8 = Ra(b7.value), d8 = Ra(b7.defaultValue);
      c8 != null && (c8 = "" + c8, c8 !== a6.value && (a6.value = c8), b7.defaultValue == null && a6.defaultValue !== c8 && (a6.defaultValue = c8));
      d8 != null && (a6.defaultValue = "" + d8);
    }
    function ib(a6) {
      var b7 = a6.textContent;
      b7 === a6._wrapperState.initialValue && b7 !== "" && b7 !== null && (a6.value = b7);
    }
    function jb(a6) {
      switch (a6) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function kb(a6, b7) {
      return a6 == null || a6 === "http://www.w3.org/1999/xhtml" ? jb(b7) : a6 === "http://www.w3.org/2000/svg" && b7 === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a6;
    }
    var lb;
    var mb = function(a6) {
      return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b7, c8, d8, e13) {
        MSApp.execUnsafeLocalFunction(function() {
          return a6(b7, c8, d8, e13);
        });
      } : a6;
    }(function(a6, b7) {
      if (a6.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in a6)
        a6.innerHTML = b7;
      else {
        lb = lb || document.createElement("div");
        lb.innerHTML = "<svg>" + b7.valueOf().toString() + "</svg>";
        for (b7 = lb.firstChild; a6.firstChild; )
          a6.removeChild(a6.firstChild);
        for (; b7.firstChild; )
          a6.appendChild(b7.firstChild);
      }
    });
    function nb(a6, b7) {
      if (b7) {
        var c8 = a6.firstChild;
        if (c8 && c8 === a6.lastChild && c8.nodeType === 3) {
          c8.nodeValue = b7;
          return;
        }
      }
      a6.textContent = b7;
    }
    var ob = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var pb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(ob).forEach(function(a6) {
      pb.forEach(function(b7) {
        b7 = b7 + a6.charAt(0).toUpperCase() + a6.substring(1);
        ob[b7] = ob[a6];
      });
    });
    function qb(a6, b7, c8) {
      return b7 == null || typeof b7 === "boolean" || b7 === "" ? "" : c8 || typeof b7 !== "number" || b7 === 0 || ob.hasOwnProperty(a6) && ob[a6] ? ("" + b7).trim() : b7 + "px";
    }
    function rb(a6, b7) {
      a6 = a6.style;
      for (var c8 in b7)
        if (b7.hasOwnProperty(c8)) {
          var d8 = c8.indexOf("--") === 0, e13 = qb(c8, b7[c8], d8);
          c8 === "float" && (c8 = "cssFloat");
          d8 ? a6.setProperty(c8, e13) : a6[c8] = e13;
        }
    }
    var sb = A4({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function tb(a6, b7) {
      if (b7) {
        if (sb[a6] && (b7.children != null || b7.dangerouslySetInnerHTML != null))
          throw Error(p7(137, a6));
        if (b7.dangerouslySetInnerHTML != null) {
          if (b7.children != null)
            throw Error(p7(60));
          if (typeof b7.dangerouslySetInnerHTML !== "object" || !("__html" in b7.dangerouslySetInnerHTML))
            throw Error(p7(61));
        }
        if (b7.style != null && typeof b7.style !== "object")
          throw Error(p7(62));
      }
    }
    function ub(a6, b7) {
      if (a6.indexOf("-") === -1)
        return typeof b7.is === "string";
      switch (a6) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var vb = null;
    function wb(a6) {
      a6 = a6.target || a6.srcElement || window;
      a6.correspondingUseElement && (a6 = a6.correspondingUseElement);
      return a6.nodeType === 3 ? a6.parentNode : a6;
    }
    var xb = null;
    var yb = null;
    var zb = null;
    function Ab(a6) {
      if (a6 = Bb(a6)) {
        if (typeof xb !== "function")
          throw Error(p7(280));
        var b7 = a6.stateNode;
        b7 && (b7 = Cb(b7), xb(a6.stateNode, a6.type, b7));
      }
    }
    function Db(a6) {
      yb ? zb ? zb.push(a6) : zb = [a6] : yb = a6;
    }
    function Eb() {
      if (yb) {
        var a6 = yb, b7 = zb;
        zb = yb = null;
        Ab(a6);
        if (b7)
          for (a6 = 0; a6 < b7.length; a6++)
            Ab(b7[a6]);
      }
    }
    function Fb(a6, b7) {
      return a6(b7);
    }
    function Gb() {
    }
    var Hb = false;
    function Ib(a6, b7, c8) {
      if (Hb)
        return a6(b7, c8);
      Hb = true;
      try {
        return Fb(a6, b7, c8);
      } finally {
        if (Hb = false, yb !== null || zb !== null)
          Gb(), Eb();
      }
    }
    function Jb(a6, b7) {
      var c8 = a6.stateNode;
      if (c8 === null)
        return null;
      var d8 = Cb(c8);
      if (d8 === null)
        return null;
      c8 = d8[b7];
      a:
        switch (b7) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d8 = !d8.disabled) || (a6 = a6.type, d8 = !(a6 === "button" || a6 === "input" || a6 === "select" || a6 === "textarea"));
            a6 = !d8;
            break a;
          default:
            a6 = false;
        }
      if (a6)
        return null;
      if (c8 && typeof c8 !== "function")
        throw Error(p7(231, b7, typeof c8));
      return c8;
    }
    var Kb = false;
    if (ia)
      try {
        Lb = {};
        Object.defineProperty(Lb, "passive", { get: function() {
          Kb = true;
        } });
        window.addEventListener("test", Lb, Lb);
        window.removeEventListener("test", Lb, Lb);
      } catch (a6) {
        Kb = false;
      }
    var Lb;
    function Mb(a6, b7, c8, d8, e13, f8, g7, h6, k4) {
      var l8 = Array.prototype.slice.call(arguments, 3);
      try {
        b7.apply(c8, l8);
      } catch (n6) {
        this.onError(n6);
      }
    }
    var Nb = false;
    var Ob = null;
    var Pb = false;
    var Qb = null;
    var Rb = { onError: function(a6) {
      Nb = true;
      Ob = a6;
    } };
    function Sb(a6, b7, c8, d8, e13, f8, g7, h6, k4) {
      Nb = false;
      Ob = null;
      Mb.apply(Rb, arguments);
    }
    function Tb(a6, b7, c8, d8, e13, f8, g7, h6, k4) {
      Sb.apply(this, arguments);
      if (Nb) {
        if (Nb) {
          var l8 = Ob;
          Nb = false;
          Ob = null;
        } else
          throw Error(p7(198));
        Pb || (Pb = true, Qb = l8);
      }
    }
    function Ub(a6) {
      var b7 = a6, c8 = a6;
      if (a6.alternate)
        for (; b7.return; )
          b7 = b7.return;
      else {
        a6 = b7;
        do
          b7 = a6, (b7.flags & 4098) !== 0 && (c8 = b7.return), a6 = b7.return;
        while (a6);
      }
      return b7.tag === 3 ? c8 : null;
    }
    function Vb(a6) {
      if (a6.tag === 13) {
        var b7 = a6.memoizedState;
        b7 === null && (a6 = a6.alternate, a6 !== null && (b7 = a6.memoizedState));
        if (b7 !== null)
          return b7.dehydrated;
      }
      return null;
    }
    function Wb(a6) {
      if (Ub(a6) !== a6)
        throw Error(p7(188));
    }
    function Xb(a6) {
      var b7 = a6.alternate;
      if (!b7) {
        b7 = Ub(a6);
        if (b7 === null)
          throw Error(p7(188));
        return b7 !== a6 ? null : a6;
      }
      for (var c8 = a6, d8 = b7; ; ) {
        var e13 = c8.return;
        if (e13 === null)
          break;
        var f8 = e13.alternate;
        if (f8 === null) {
          d8 = e13.return;
          if (d8 !== null) {
            c8 = d8;
            continue;
          }
          break;
        }
        if (e13.child === f8.child) {
          for (f8 = e13.child; f8; ) {
            if (f8 === c8)
              return Wb(e13), a6;
            if (f8 === d8)
              return Wb(e13), b7;
            f8 = f8.sibling;
          }
          throw Error(p7(188));
        }
        if (c8.return !== d8.return)
          c8 = e13, d8 = f8;
        else {
          for (var g7 = false, h6 = e13.child; h6; ) {
            if (h6 === c8) {
              g7 = true;
              c8 = e13;
              d8 = f8;
              break;
            }
            if (h6 === d8) {
              g7 = true;
              d8 = e13;
              c8 = f8;
              break;
            }
            h6 = h6.sibling;
          }
          if (!g7) {
            for (h6 = f8.child; h6; ) {
              if (h6 === c8) {
                g7 = true;
                c8 = f8;
                d8 = e13;
                break;
              }
              if (h6 === d8) {
                g7 = true;
                d8 = f8;
                c8 = e13;
                break;
              }
              h6 = h6.sibling;
            }
            if (!g7)
              throw Error(p7(189));
          }
        }
        if (c8.alternate !== d8)
          throw Error(p7(190));
      }
      if (c8.tag !== 3)
        throw Error(p7(188));
      return c8.stateNode.current === c8 ? a6 : b7;
    }
    function Yb(a6) {
      a6 = Xb(a6);
      return a6 !== null ? Zb(a6) : null;
    }
    function Zb(a6) {
      if (a6.tag === 5 || a6.tag === 6)
        return a6;
      for (a6 = a6.child; a6 !== null; ) {
        var b7 = Zb(a6);
        if (b7 !== null)
          return b7;
        a6 = a6.sibling;
      }
      return null;
    }
    var $b = ba.unstable_scheduleCallback;
    var ac = ba.unstable_cancelCallback;
    var bc = ba.unstable_shouldYield;
    var cc = ba.unstable_requestPaint;
    var B4 = ba.unstable_now;
    var dc = ba.unstable_getCurrentPriorityLevel;
    var ec = ba.unstable_ImmediatePriority;
    var fc = ba.unstable_UserBlockingPriority;
    var gc = ba.unstable_NormalPriority;
    var hc = ba.unstable_LowPriority;
    var ic = ba.unstable_IdlePriority;
    var jc = null;
    var kc = null;
    function lc(a6) {
      if (kc && typeof kc.onCommitFiberRoot === "function")
        try {
          kc.onCommitFiberRoot(jc, a6, void 0, (a6.current.flags & 128) === 128);
        } catch (b7) {
        }
    }
    var nc = Math.clz32 ? Math.clz32 : mc;
    var oc = Math.log;
    var pc = Math.LN2;
    function mc(a6) {
      a6 >>>= 0;
      return a6 === 0 ? 32 : 31 - (oc(a6) / pc | 0) | 0;
    }
    var qc = 64;
    var rc = 4194304;
    function sc(a6) {
      switch (a6 & -a6) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a6 & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a6 & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a6;
      }
    }
    function tc(a6, b7) {
      var c8 = a6.pendingLanes;
      if (c8 === 0)
        return 0;
      var d8 = 0, e13 = a6.suspendedLanes, f8 = a6.pingedLanes, g7 = c8 & 268435455;
      if (g7 !== 0) {
        var h6 = g7 & ~e13;
        h6 !== 0 ? d8 = sc(h6) : (f8 &= g7, f8 !== 0 && (d8 = sc(f8)));
      } else
        g7 = c8 & ~e13, g7 !== 0 ? d8 = sc(g7) : f8 !== 0 && (d8 = sc(f8));
      if (d8 === 0)
        return 0;
      if (b7 !== 0 && b7 !== d8 && (b7 & e13) === 0 && (e13 = d8 & -d8, f8 = b7 & -b7, e13 >= f8 || e13 === 16 && (f8 & 4194240) !== 0))
        return b7;
      (d8 & 4) !== 0 && (d8 |= c8 & 16);
      b7 = a6.entangledLanes;
      if (b7 !== 0)
        for (a6 = a6.entanglements, b7 &= d8; 0 < b7; )
          c8 = 31 - nc(b7), e13 = 1 << c8, d8 |= a6[c8], b7 &= ~e13;
      return d8;
    }
    function uc(a6, b7) {
      switch (a6) {
        case 1:
        case 2:
        case 4:
          return b7 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b7 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function vc(a6, b7) {
      for (var c8 = a6.suspendedLanes, d8 = a6.pingedLanes, e13 = a6.expirationTimes, f8 = a6.pendingLanes; 0 < f8; ) {
        var g7 = 31 - nc(f8), h6 = 1 << g7, k4 = e13[g7];
        if (k4 === -1) {
          if ((h6 & c8) === 0 || (h6 & d8) !== 0)
            e13[g7] = uc(h6, b7);
        } else
          k4 <= b7 && (a6.expiredLanes |= h6);
        f8 &= ~h6;
      }
    }
    function wc(a6) {
      a6 = a6.pendingLanes & -1073741825;
      return a6 !== 0 ? a6 : a6 & 1073741824 ? 1073741824 : 0;
    }
    function xc() {
      var a6 = qc;
      qc <<= 1;
      (qc & 4194240) === 0 && (qc = 64);
      return a6;
    }
    function yc(a6) {
      for (var b7 = [], c8 = 0; 31 > c8; c8++)
        b7.push(a6);
      return b7;
    }
    function zc(a6, b7, c8) {
      a6.pendingLanes |= b7;
      b7 !== 536870912 && (a6.suspendedLanes = 0, a6.pingedLanes = 0);
      a6 = a6.eventTimes;
      b7 = 31 - nc(b7);
      a6[b7] = c8;
    }
    function Ac(a6, b7) {
      var c8 = a6.pendingLanes & ~b7;
      a6.pendingLanes = b7;
      a6.suspendedLanes = 0;
      a6.pingedLanes = 0;
      a6.expiredLanes &= b7;
      a6.mutableReadLanes &= b7;
      a6.entangledLanes &= b7;
      b7 = a6.entanglements;
      var d8 = a6.eventTimes;
      for (a6 = a6.expirationTimes; 0 < c8; ) {
        var e13 = 31 - nc(c8), f8 = 1 << e13;
        b7[e13] = 0;
        d8[e13] = -1;
        a6[e13] = -1;
        c8 &= ~f8;
      }
    }
    function Bc(a6, b7) {
      var c8 = a6.entangledLanes |= b7;
      for (a6 = a6.entanglements; c8; ) {
        var d8 = 31 - nc(c8), e13 = 1 << d8;
        e13 & b7 | a6[d8] & b7 && (a6[d8] |= b7);
        c8 &= ~e13;
      }
    }
    var C6 = 0;
    function Cc(a6) {
      a6 &= -a6;
      return 1 < a6 ? 4 < a6 ? (a6 & 268435455) !== 0 ? 16 : 536870912 : 4 : 1;
    }
    var Dc;
    var Ec;
    var Fc;
    var Gc;
    var Hc;
    var Ic = false;
    var Jc = [];
    var Kc = null;
    var Lc = null;
    var Mc = null;
    var Nc = /* @__PURE__ */ new Map();
    var Oc = /* @__PURE__ */ new Map();
    var Pc = [];
    var Qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Rc(a6, b7) {
      switch (a6) {
        case "focusin":
        case "focusout":
          Kc = null;
          break;
        case "dragenter":
        case "dragleave":
          Lc = null;
          break;
        case "mouseover":
        case "mouseout":
          Mc = null;
          break;
        case "pointerover":
        case "pointerout":
          Nc.delete(b7.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Oc.delete(b7.pointerId);
      }
    }
    function Sc(a6, b7, c8, d8, e13, f8) {
      if (a6 === null || a6.nativeEvent !== f8)
        return a6 = { blockedOn: b7, domEventName: c8, eventSystemFlags: d8, nativeEvent: f8, targetContainers: [e13] }, b7 !== null && (b7 = Bb(b7), b7 !== null && Ec(b7)), a6;
      a6.eventSystemFlags |= d8;
      b7 = a6.targetContainers;
      e13 !== null && b7.indexOf(e13) === -1 && b7.push(e13);
      return a6;
    }
    function Tc(a6, b7, c8, d8, e13) {
      switch (b7) {
        case "focusin":
          return Kc = Sc(Kc, a6, b7, c8, d8, e13), true;
        case "dragenter":
          return Lc = Sc(Lc, a6, b7, c8, d8, e13), true;
        case "mouseover":
          return Mc = Sc(Mc, a6, b7, c8, d8, e13), true;
        case "pointerover":
          var f8 = e13.pointerId;
          Nc.set(f8, Sc(Nc.get(f8) || null, a6, b7, c8, d8, e13));
          return true;
        case "gotpointercapture":
          return f8 = e13.pointerId, Oc.set(f8, Sc(Oc.get(f8) || null, a6, b7, c8, d8, e13)), true;
      }
      return false;
    }
    function Uc(a6) {
      var b7 = Vc(a6.target);
      if (b7 !== null) {
        var c8 = Ub(b7);
        if (c8 !== null) {
          if (b7 = c8.tag, b7 === 13) {
            if (b7 = Vb(c8), b7 !== null) {
              a6.blockedOn = b7;
              Hc(a6.priority, function() {
                Fc(c8);
              });
              return;
            }
          } else if (b7 === 3 && c8.stateNode.current.memoizedState.isDehydrated) {
            a6.blockedOn = c8.tag === 3 ? c8.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a6.blockedOn = null;
    }
    function Wc(a6) {
      if (a6.blockedOn !== null)
        return false;
      for (var b7 = a6.targetContainers; 0 < b7.length; ) {
        var c8 = Xc(a6.domEventName, a6.eventSystemFlags, b7[0], a6.nativeEvent);
        if (c8 === null) {
          c8 = a6.nativeEvent;
          var d8 = new c8.constructor(c8.type, c8);
          vb = d8;
          c8.target.dispatchEvent(d8);
          vb = null;
        } else
          return b7 = Bb(c8), b7 !== null && Ec(b7), a6.blockedOn = c8, false;
        b7.shift();
      }
      return true;
    }
    function Yc(a6, b7, c8) {
      Wc(a6) && c8.delete(b7);
    }
    function Zc() {
      Ic = false;
      Kc !== null && Wc(Kc) && (Kc = null);
      Lc !== null && Wc(Lc) && (Lc = null);
      Mc !== null && Wc(Mc) && (Mc = null);
      Nc.forEach(Yc);
      Oc.forEach(Yc);
    }
    function $c(a6, b7) {
      a6.blockedOn === b7 && (a6.blockedOn = null, Ic || (Ic = true, ba.unstable_scheduleCallback(ba.unstable_NormalPriority, Zc)));
    }
    function ad(a6) {
      function b7(b8) {
        return $c(b8, a6);
      }
      if (0 < Jc.length) {
        $c(Jc[0], a6);
        for (var c8 = 1; c8 < Jc.length; c8++) {
          var d8 = Jc[c8];
          d8.blockedOn === a6 && (d8.blockedOn = null);
        }
      }
      Kc !== null && $c(Kc, a6);
      Lc !== null && $c(Lc, a6);
      Mc !== null && $c(Mc, a6);
      Nc.forEach(b7);
      Oc.forEach(b7);
      for (c8 = 0; c8 < Pc.length; c8++)
        d8 = Pc[c8], d8.blockedOn === a6 && (d8.blockedOn = null);
      for (; 0 < Pc.length && (c8 = Pc[0], c8.blockedOn === null); )
        Uc(c8), c8.blockedOn === null && Pc.shift();
    }
    var bd = ta.ReactCurrentBatchConfig;
    var cd = true;
    function dd(a6, b7, c8, d8) {
      var e13 = C6, f8 = bd.transition;
      bd.transition = null;
      try {
        C6 = 1, ed(a6, b7, c8, d8);
      } finally {
        C6 = e13, bd.transition = f8;
      }
    }
    function fd(a6, b7, c8, d8) {
      var e13 = C6, f8 = bd.transition;
      bd.transition = null;
      try {
        C6 = 4, ed(a6, b7, c8, d8);
      } finally {
        C6 = e13, bd.transition = f8;
      }
    }
    function ed(a6, b7, c8, d8) {
      if (cd) {
        var e13 = Xc(a6, b7, c8, d8);
        if (e13 === null)
          gd(a6, b7, d8, hd, c8), Rc(a6, d8);
        else if (Tc(e13, a6, b7, c8, d8))
          d8.stopPropagation();
        else if (Rc(a6, d8), b7 & 4 && -1 < Qc.indexOf(a6)) {
          for (; e13 !== null; ) {
            var f8 = Bb(e13);
            f8 !== null && Dc(f8);
            f8 = Xc(a6, b7, c8, d8);
            f8 === null && gd(a6, b7, d8, hd, c8);
            if (f8 === e13)
              break;
            e13 = f8;
          }
          e13 !== null && d8.stopPropagation();
        } else
          gd(a6, b7, d8, null, c8);
      }
    }
    var hd = null;
    function Xc(a6, b7, c8, d8) {
      hd = null;
      a6 = wb(d8);
      a6 = Vc(a6);
      if (a6 !== null)
        if (b7 = Ub(a6), b7 === null)
          a6 = null;
        else if (c8 = b7.tag, c8 === 13) {
          a6 = Vb(b7);
          if (a6 !== null)
            return a6;
          a6 = null;
        } else if (c8 === 3) {
          if (b7.stateNode.current.memoizedState.isDehydrated)
            return b7.tag === 3 ? b7.stateNode.containerInfo : null;
          a6 = null;
        } else
          b7 !== a6 && (a6 = null);
      hd = a6;
      return null;
    }
    function id(a6) {
      switch (a6) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (dc()) {
            case ec:
              return 1;
            case fc:
              return 4;
            case gc:
            case hc:
              return 16;
            case ic:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var jd = null;
    var kd = null;
    var ld = null;
    function md() {
      if (ld)
        return ld;
      var a6, b7 = kd, c8 = b7.length, d8, e13 = "value" in jd ? jd.value : jd.textContent, f8 = e13.length;
      for (a6 = 0; a6 < c8 && b7[a6] === e13[a6]; a6++)
        ;
      var g7 = c8 - a6;
      for (d8 = 1; d8 <= g7 && b7[c8 - d8] === e13[f8 - d8]; d8++)
        ;
      return ld = e13.slice(a6, 1 < d8 ? 1 - d8 : void 0);
    }
    function nd(a6) {
      var b7 = a6.keyCode;
      "charCode" in a6 ? (a6 = a6.charCode, a6 === 0 && b7 === 13 && (a6 = 13)) : a6 = b7;
      a6 === 10 && (a6 = 13);
      return 32 <= a6 || a6 === 13 ? a6 : 0;
    }
    function od() {
      return true;
    }
    function pd() {
      return false;
    }
    function qd(a6) {
      function b7(b8, d8, e13, f8, g7) {
        this._reactName = b8;
        this._targetInst = e13;
        this.type = d8;
        this.nativeEvent = f8;
        this.target = g7;
        this.currentTarget = null;
        for (var c8 in a6)
          a6.hasOwnProperty(c8) && (b8 = a6[c8], this[c8] = b8 ? b8(f8) : f8[c8]);
        this.isDefaultPrevented = (f8.defaultPrevented != null ? f8.defaultPrevented : f8.returnValue === false) ? od : pd;
        this.isPropagationStopped = pd;
        return this;
      }
      A4(b7.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a7 = this.nativeEvent;
        a7 && (a7.preventDefault ? a7.preventDefault() : typeof a7.returnValue !== "unknown" && (a7.returnValue = false), this.isDefaultPrevented = od);
      }, stopPropagation: function() {
        var a7 = this.nativeEvent;
        a7 && (a7.stopPropagation ? a7.stopPropagation() : typeof a7.cancelBubble !== "unknown" && (a7.cancelBubble = true), this.isPropagationStopped = od);
      }, persist: function() {
      }, isPersistent: od });
      return b7;
    }
    var rd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a6) {
      return a6.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var sd = qd(rd);
    var td = A4({}, rd, { view: 0, detail: 0 });
    var ud = qd(td);
    var vd;
    var wd;
    var xd;
    var zd = A4({}, td, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: yd, button: 0, buttons: 0, relatedTarget: function(a6) {
      return a6.relatedTarget === void 0 ? a6.fromElement === a6.srcElement ? a6.toElement : a6.fromElement : a6.relatedTarget;
    }, movementX: function(a6) {
      if ("movementX" in a6)
        return a6.movementX;
      a6 !== xd && (xd && a6.type === "mousemove" ? (vd = a6.screenX - xd.screenX, wd = a6.screenY - xd.screenY) : wd = vd = 0, xd = a6);
      return vd;
    }, movementY: function(a6) {
      return "movementY" in a6 ? a6.movementY : wd;
    } });
    var Ad = qd(zd);
    var Bd = A4({}, zd, { dataTransfer: 0 });
    var Cd = qd(Bd);
    var Dd = A4({}, td, { relatedTarget: 0 });
    var Ed = qd(Dd);
    var Fd = A4({}, rd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Gd = qd(Fd);
    var Hd = A4({}, rd, { clipboardData: function(a6) {
      return "clipboardData" in a6 ? a6.clipboardData : window.clipboardData;
    } });
    var Id = qd(Hd);
    var Jd = A4({}, rd, { data: 0 });
    var Kd = qd(Jd);
    var Ld = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Md = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Nd = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Od(a6) {
      var b7 = this.nativeEvent;
      return b7.getModifierState ? b7.getModifierState(a6) : (a6 = Nd[a6]) ? !!b7[a6] : false;
    }
    function yd() {
      return Od;
    }
    var Pd = A4({}, td, { key: function(a6) {
      if (a6.key) {
        var b7 = Ld[a6.key] || a6.key;
        if (b7 !== "Unidentified")
          return b7;
      }
      return a6.type === "keypress" ? (a6 = nd(a6), a6 === 13 ? "Enter" : String.fromCharCode(a6)) : a6.type === "keydown" || a6.type === "keyup" ? Md[a6.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: yd, charCode: function(a6) {
      return a6.type === "keypress" ? nd(a6) : 0;
    }, keyCode: function(a6) {
      return a6.type === "keydown" || a6.type === "keyup" ? a6.keyCode : 0;
    }, which: function(a6) {
      return a6.type === "keypress" ? nd(a6) : a6.type === "keydown" || a6.type === "keyup" ? a6.keyCode : 0;
    } });
    var Qd = qd(Pd);
    var Rd = A4({}, zd, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    var Sd = qd(Rd);
    var Td = A4({}, td, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: yd });
    var Ud = qd(Td);
    var Vd = A4({}, rd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Wd = qd(Vd);
    var Xd = A4({}, zd, {
      deltaX: function(a6) {
        return "deltaX" in a6 ? a6.deltaX : "wheelDeltaX" in a6 ? -a6.wheelDeltaX : 0;
      },
      deltaY: function(a6) {
        return "deltaY" in a6 ? a6.deltaY : "wheelDeltaY" in a6 ? -a6.wheelDeltaY : "wheelDelta" in a6 ? -a6.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Yd = qd(Xd);
    var Zd = [9, 13, 27, 32];
    var $d = ia && "CompositionEvent" in window;
    var ae = null;
    ia && "documentMode" in document && (ae = document.documentMode);
    var be2 = ia && "TextEvent" in window && !ae;
    var ce = ia && (!$d || ae && 8 < ae && 11 >= ae);
    var de = String.fromCharCode(32);
    var ee = false;
    function fe2(a6, b7) {
      switch (a6) {
        case "keyup":
          return Zd.indexOf(b7.keyCode) !== -1;
        case "keydown":
          return b7.keyCode !== 229;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function ge2(a6) {
      a6 = a6.detail;
      return typeof a6 === "object" && "data" in a6 ? a6.data : null;
    }
    var he = false;
    function ie2(a6, b7) {
      switch (a6) {
        case "compositionend":
          return ge2(b7);
        case "keypress":
          if (b7.which !== 32)
            return null;
          ee = true;
          return de;
        case "textInput":
          return a6 = b7.data, a6 === de && ee ? null : a6;
        default:
          return null;
      }
    }
    function je(a6, b7) {
      if (he)
        return a6 === "compositionend" || !$d && fe2(a6, b7) ? (a6 = md(), ld = kd = jd = null, he = false, a6) : null;
      switch (a6) {
        case "paste":
          return null;
        case "keypress":
          if (!(b7.ctrlKey || b7.altKey || b7.metaKey) || b7.ctrlKey && b7.altKey) {
            if (b7.char && 1 < b7.char.length)
              return b7.char;
            if (b7.which)
              return String.fromCharCode(b7.which);
          }
          return null;
        case "compositionend":
          return ce && b7.locale !== "ko" ? null : b7.data;
        default:
          return null;
      }
    }
    var ke = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function le2(a6) {
      var b7 = a6 && a6.nodeName && a6.nodeName.toLowerCase();
      return b7 === "input" ? !!ke[a6.type] : b7 === "textarea" ? true : false;
    }
    function me2(a6, b7, c8, d8) {
      Db(d8);
      b7 = ne2(b7, "onChange");
      0 < b7.length && (c8 = new sd("onChange", "change", null, c8, d8), a6.push({ event: c8, listeners: b7 }));
    }
    var oe2 = null;
    var pe2 = null;
    function qe(a6) {
      re3(a6, 0);
    }
    function se2(a6) {
      var b7 = te(a6);
      if (Va(b7))
        return a6;
    }
    function ue2(a6, b7) {
      if (a6 === "change")
        return b7;
    }
    var ve = false;
    if (ia) {
      if (ia) {
        xe = "oninput" in document;
        if (!xe) {
          ye = document.createElement("div");
          ye.setAttribute("oninput", "return;");
          xe = typeof ye.oninput === "function";
        }
        we = xe;
      } else
        we = false;
      ve = we && (!document.documentMode || 9 < document.documentMode);
    }
    var we;
    var xe;
    var ye;
    function ze() {
      oe2 && (oe2.detachEvent("onpropertychange", Ae), pe2 = oe2 = null);
    }
    function Ae(a6) {
      if (a6.propertyName === "value" && se2(pe2)) {
        var b7 = [];
        me2(b7, pe2, a6, wb(a6));
        Ib(qe, b7);
      }
    }
    function Be(a6, b7, c8) {
      a6 === "focusin" ? (ze(), oe2 = b7, pe2 = c8, oe2.attachEvent("onpropertychange", Ae)) : a6 === "focusout" && ze();
    }
    function Ce(a6) {
      if (a6 === "selectionchange" || a6 === "keyup" || a6 === "keydown")
        return se2(pe2);
    }
    function De(a6, b7) {
      if (a6 === "click")
        return se2(b7);
    }
    function Ee(a6, b7) {
      if (a6 === "input" || a6 === "change")
        return se2(b7);
    }
    function Fe(a6, b7) {
      return a6 === b7 && (a6 !== 0 || 1 / a6 === 1 / b7) || a6 !== a6 && b7 !== b7;
    }
    var Ge = typeof Object.is === "function" ? Object.is : Fe;
    function He(a6, b7) {
      if (Ge(a6, b7))
        return true;
      if (typeof a6 !== "object" || a6 === null || typeof b7 !== "object" || b7 === null)
        return false;
      var c8 = Object.keys(a6), d8 = Object.keys(b7);
      if (c8.length !== d8.length)
        return false;
      for (d8 = 0; d8 < c8.length; d8++) {
        var e13 = c8[d8];
        if (!ja.call(b7, e13) || !Ge(a6[e13], b7[e13]))
          return false;
      }
      return true;
    }
    function Ie(a6) {
      for (; a6 && a6.firstChild; )
        a6 = a6.firstChild;
      return a6;
    }
    function Je(a6, b7) {
      var c8 = Ie(a6);
      a6 = 0;
      for (var d8; c8; ) {
        if (c8.nodeType === 3) {
          d8 = a6 + c8.textContent.length;
          if (a6 <= b7 && d8 >= b7)
            return { node: c8, offset: b7 - a6 };
          a6 = d8;
        }
        a: {
          for (; c8; ) {
            if (c8.nextSibling) {
              c8 = c8.nextSibling;
              break a;
            }
            c8 = c8.parentNode;
          }
          c8 = void 0;
        }
        c8 = Ie(c8);
      }
    }
    function Ke(a6, b7) {
      return a6 && b7 ? a6 === b7 ? true : a6 && a6.nodeType === 3 ? false : b7 && b7.nodeType === 3 ? Ke(a6, b7.parentNode) : "contains" in a6 ? a6.contains(b7) : a6.compareDocumentPosition ? !!(a6.compareDocumentPosition(b7) & 16) : false : false;
    }
    function Le() {
      for (var a6 = window, b7 = Wa(); b7 instanceof a6.HTMLIFrameElement; ) {
        try {
          var c8 = typeof b7.contentWindow.location.href === "string";
        } catch (d8) {
          c8 = false;
        }
        if (c8)
          a6 = b7.contentWindow;
        else
          break;
        b7 = Wa(a6.document);
      }
      return b7;
    }
    function Me(a6) {
      var b7 = a6 && a6.nodeName && a6.nodeName.toLowerCase();
      return b7 && (b7 === "input" && (a6.type === "text" || a6.type === "search" || a6.type === "tel" || a6.type === "url" || a6.type === "password") || b7 === "textarea" || a6.contentEditable === "true");
    }
    function Ne(a6) {
      var b7 = Le(), c8 = a6.focusedElem, d8 = a6.selectionRange;
      if (b7 !== c8 && c8 && c8.ownerDocument && Ke(c8.ownerDocument.documentElement, c8)) {
        if (d8 !== null && Me(c8)) {
          if (b7 = d8.start, a6 = d8.end, a6 === void 0 && (a6 = b7), "selectionStart" in c8)
            c8.selectionStart = b7, c8.selectionEnd = Math.min(a6, c8.value.length);
          else if (a6 = (b7 = c8.ownerDocument || document) && b7.defaultView || window, a6.getSelection) {
            a6 = a6.getSelection();
            var e13 = c8.textContent.length, f8 = Math.min(d8.start, e13);
            d8 = d8.end === void 0 ? f8 : Math.min(d8.end, e13);
            !a6.extend && f8 > d8 && (e13 = d8, d8 = f8, f8 = e13);
            e13 = Je(c8, f8);
            var g7 = Je(c8, d8);
            e13 && g7 && (a6.rangeCount !== 1 || a6.anchorNode !== e13.node || a6.anchorOffset !== e13.offset || a6.focusNode !== g7.node || a6.focusOffset !== g7.offset) && (b7 = b7.createRange(), b7.setStart(e13.node, e13.offset), a6.removeAllRanges(), f8 > d8 ? (a6.addRange(b7), a6.extend(g7.node, g7.offset)) : (b7.setEnd(g7.node, g7.offset), a6.addRange(b7)));
          }
        }
        b7 = [];
        for (a6 = c8; a6 = a6.parentNode; )
          a6.nodeType === 1 && b7.push({ element: a6, left: a6.scrollLeft, top: a6.scrollTop });
        typeof c8.focus === "function" && c8.focus();
        for (c8 = 0; c8 < b7.length; c8++)
          a6 = b7[c8], a6.element.scrollLeft = a6.left, a6.element.scrollTop = a6.top;
      }
    }
    var Oe = ia && "documentMode" in document && 11 >= document.documentMode;
    var Pe = null;
    var Qe = null;
    var Re = null;
    var Se = false;
    function Te2(a6, b7, c8) {
      var d8 = c8.window === c8 ? c8.document : c8.nodeType === 9 ? c8 : c8.ownerDocument;
      Se || Pe == null || Pe !== Wa(d8) || (d8 = Pe, "selectionStart" in d8 && Me(d8) ? d8 = { start: d8.selectionStart, end: d8.selectionEnd } : (d8 = (d8.ownerDocument && d8.ownerDocument.defaultView || window).getSelection(), d8 = { anchorNode: d8.anchorNode, anchorOffset: d8.anchorOffset, focusNode: d8.focusNode, focusOffset: d8.focusOffset }), Re && He(Re, d8) || (Re = d8, d8 = ne2(Qe, "onSelect"), 0 < d8.length && (b7 = new sd("onSelect", "select", null, b7, c8), a6.push({ event: b7, listeners: d8 }), b7.target = Pe)));
    }
    function Ue(a6, b7) {
      var c8 = {};
      c8[a6.toLowerCase()] = b7.toLowerCase();
      c8["Webkit" + a6] = "webkit" + b7;
      c8["Moz" + a6] = "moz" + b7;
      return c8;
    }
    var Ve = { animationend: Ue("Animation", "AnimationEnd"), animationiteration: Ue("Animation", "AnimationIteration"), animationstart: Ue("Animation", "AnimationStart"), transitionend: Ue("Transition", "TransitionEnd") };
    var We = {};
    var Xe = {};
    ia && (Xe = document.createElement("div").style, "AnimationEvent" in window || (delete Ve.animationend.animation, delete Ve.animationiteration.animation, delete Ve.animationstart.animation), "TransitionEvent" in window || delete Ve.transitionend.transition);
    function Ye(a6) {
      if (We[a6])
        return We[a6];
      if (!Ve[a6])
        return a6;
      var b7 = Ve[a6], c8;
      for (c8 in b7)
        if (b7.hasOwnProperty(c8) && c8 in Xe)
          return We[a6] = b7[c8];
      return a6;
    }
    var Ze = Ye("animationend");
    var $e = Ye("animationiteration");
    var af = Ye("animationstart");
    var bf = Ye("transitionend");
    var cf = /* @__PURE__ */ new Map();
    var df = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ef(a6, b7) {
      cf.set(a6, b7);
      fa(b7, [a6]);
    }
    for (ff = 0; ff < df.length; ff++) {
      gf = df[ff], hf = gf.toLowerCase(), jf = gf[0].toUpperCase() + gf.slice(1);
      ef(hf, "on" + jf);
    }
    var gf;
    var hf;
    var jf;
    var ff;
    ef(Ze, "onAnimationEnd");
    ef($e, "onAnimationIteration");
    ef(af, "onAnimationStart");
    ef("dblclick", "onDoubleClick");
    ef("focusin", "onFocus");
    ef("focusout", "onBlur");
    ef(bf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var kf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var lf = new Set("cancel close invalid load scroll toggle".split(" ").concat(kf));
    function mf(a6, b7, c8) {
      var d8 = a6.type || "unknown-event";
      a6.currentTarget = c8;
      Tb(d8, b7, void 0, a6);
      a6.currentTarget = null;
    }
    function re3(a6, b7) {
      b7 = (b7 & 4) !== 0;
      for (var c8 = 0; c8 < a6.length; c8++) {
        var d8 = a6[c8], e13 = d8.event;
        d8 = d8.listeners;
        a: {
          var f8 = void 0;
          if (b7)
            for (var g7 = d8.length - 1; 0 <= g7; g7--) {
              var h6 = d8[g7], k4 = h6.instance, l8 = h6.currentTarget;
              h6 = h6.listener;
              if (k4 !== f8 && e13.isPropagationStopped())
                break a;
              mf(e13, h6, l8);
              f8 = k4;
            }
          else
            for (g7 = 0; g7 < d8.length; g7++) {
              h6 = d8[g7];
              k4 = h6.instance;
              l8 = h6.currentTarget;
              h6 = h6.listener;
              if (k4 !== f8 && e13.isPropagationStopped())
                break a;
              mf(e13, h6, l8);
              f8 = k4;
            }
        }
      }
      if (Pb)
        throw a6 = Qb, Pb = false, Qb = null, a6;
    }
    function D5(a6, b7) {
      var c8 = b7[nf];
      c8 === void 0 && (c8 = b7[nf] = /* @__PURE__ */ new Set());
      var d8 = a6 + "__bubble";
      c8.has(d8) || (of(b7, a6, 2, false), c8.add(d8));
    }
    function pf(a6, b7, c8) {
      var d8 = 0;
      b7 && (d8 |= 4);
      of(c8, a6, d8, b7);
    }
    var qf = "_reactListening" + Math.random().toString(36).slice(2);
    function rf(a6) {
      if (!a6[qf]) {
        a6[qf] = true;
        da.forEach(function(b8) {
          b8 !== "selectionchange" && (lf.has(b8) || pf(b8, false, a6), pf(b8, true, a6));
        });
        var b7 = a6.nodeType === 9 ? a6 : a6.ownerDocument;
        b7 === null || b7[qf] || (b7[qf] = true, pf("selectionchange", false, b7));
      }
    }
    function of(a6, b7, c8, d8) {
      switch (id(b7)) {
        case 1:
          var e13 = dd;
          break;
        case 4:
          e13 = fd;
          break;
        default:
          e13 = ed;
      }
      c8 = e13.bind(null, b7, c8, a6);
      e13 = void 0;
      !Kb || b7 !== "touchstart" && b7 !== "touchmove" && b7 !== "wheel" || (e13 = true);
      d8 ? e13 !== void 0 ? a6.addEventListener(b7, c8, { capture: true, passive: e13 }) : a6.addEventListener(b7, c8, true) : e13 !== void 0 ? a6.addEventListener(b7, c8, { passive: e13 }) : a6.addEventListener(b7, c8, false);
    }
    function gd(a6, b7, c8, d8, e13) {
      var f8 = d8;
      if ((b7 & 1) === 0 && (b7 & 2) === 0 && d8 !== null)
        a:
          for (; ; ) {
            if (d8 === null)
              return;
            var g7 = d8.tag;
            if (g7 === 3 || g7 === 4) {
              var h6 = d8.stateNode.containerInfo;
              if (h6 === e13 || h6.nodeType === 8 && h6.parentNode === e13)
                break;
              if (g7 === 4)
                for (g7 = d8.return; g7 !== null; ) {
                  var k4 = g7.tag;
                  if (k4 === 3 || k4 === 4) {
                    if (k4 = g7.stateNode.containerInfo, k4 === e13 || k4.nodeType === 8 && k4.parentNode === e13)
                      return;
                  }
                  g7 = g7.return;
                }
              for (; h6 !== null; ) {
                g7 = Vc(h6);
                if (g7 === null)
                  return;
                k4 = g7.tag;
                if (k4 === 5 || k4 === 6) {
                  d8 = f8 = g7;
                  continue a;
                }
                h6 = h6.parentNode;
              }
            }
            d8 = d8.return;
          }
      Ib(function() {
        var d9 = f8, e14 = wb(c8), g8 = [];
        a: {
          var h7 = cf.get(a6);
          if (h7 !== void 0) {
            var k5 = sd, m8 = a6;
            switch (a6) {
              case "keypress":
                if (nd(c8) === 0)
                  break a;
              case "keydown":
              case "keyup":
                k5 = Qd;
                break;
              case "focusin":
                m8 = "focus";
                k5 = Ed;
                break;
              case "focusout":
                m8 = "blur";
                k5 = Ed;
                break;
              case "beforeblur":
              case "afterblur":
                k5 = Ed;
                break;
              case "click":
                if (c8.button === 2)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k5 = Ad;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k5 = Cd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k5 = Ud;
                break;
              case Ze:
              case $e:
              case af:
                k5 = Gd;
                break;
              case bf:
                k5 = Wd;
                break;
              case "scroll":
                k5 = ud;
                break;
              case "wheel":
                k5 = Yd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k5 = Id;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k5 = Sd;
            }
            var w7 = (b7 & 4) !== 0, J4 = !w7 && a6 === "scroll", v6 = w7 ? h7 !== null ? h7 + "Capture" : null : h7;
            w7 = [];
            for (var x7 = d9, r12; x7 !== null; ) {
              r12 = x7;
              var F6 = r12.stateNode;
              r12.tag === 5 && F6 !== null && (r12 = F6, v6 !== null && (F6 = Jb(x7, v6), F6 != null && w7.push(sf(x7, F6, r12))));
              if (J4)
                break;
              x7 = x7.return;
            }
            0 < w7.length && (h7 = new k5(h7, m8, null, c8, e14), g8.push({ event: h7, listeners: w7 }));
          }
        }
        if ((b7 & 7) === 0) {
          a: {
            h7 = a6 === "mouseover" || a6 === "pointerover";
            k5 = a6 === "mouseout" || a6 === "pointerout";
            if (h7 && c8 !== vb && (m8 = c8.relatedTarget || c8.fromElement) && (Vc(m8) || m8[tf]))
              break a;
            if (k5 || h7) {
              h7 = e14.window === e14 ? e14 : (h7 = e14.ownerDocument) ? h7.defaultView || h7.parentWindow : window;
              if (k5) {
                if (m8 = c8.relatedTarget || c8.toElement, k5 = d9, m8 = m8 ? Vc(m8) : null, m8 !== null && (J4 = Ub(m8), m8 !== J4 || m8.tag !== 5 && m8.tag !== 6))
                  m8 = null;
              } else
                k5 = null, m8 = d9;
              if (k5 !== m8) {
                w7 = Ad;
                F6 = "onMouseLeave";
                v6 = "onMouseEnter";
                x7 = "mouse";
                if (a6 === "pointerout" || a6 === "pointerover")
                  w7 = Sd, F6 = "onPointerLeave", v6 = "onPointerEnter", x7 = "pointer";
                J4 = k5 == null ? h7 : te(k5);
                r12 = m8 == null ? h7 : te(m8);
                h7 = new w7(F6, x7 + "leave", k5, c8, e14);
                h7.target = J4;
                h7.relatedTarget = r12;
                F6 = null;
                Vc(e14) === d9 && (w7 = new w7(v6, x7 + "enter", m8, c8, e14), w7.target = r12, w7.relatedTarget = J4, F6 = w7);
                J4 = F6;
                if (k5 && m8)
                  b: {
                    w7 = k5;
                    v6 = m8;
                    x7 = 0;
                    for (r12 = w7; r12; r12 = uf(r12))
                      x7++;
                    r12 = 0;
                    for (F6 = v6; F6; F6 = uf(F6))
                      r12++;
                    for (; 0 < x7 - r12; )
                      w7 = uf(w7), x7--;
                    for (; 0 < r12 - x7; )
                      v6 = uf(v6), r12--;
                    for (; x7--; ) {
                      if (w7 === v6 || v6 !== null && w7 === v6.alternate)
                        break b;
                      w7 = uf(w7);
                      v6 = uf(v6);
                    }
                    w7 = null;
                  }
                else
                  w7 = null;
                k5 !== null && vf(g8, h7, k5, w7, false);
                m8 !== null && J4 !== null && vf(g8, J4, m8, w7, true);
              }
            }
          }
          a: {
            h7 = d9 ? te(d9) : window;
            k5 = h7.nodeName && h7.nodeName.toLowerCase();
            if (k5 === "select" || k5 === "input" && h7.type === "file")
              var Z4 = ue2;
            else if (le2(h7))
              if (ve)
                Z4 = Ee;
              else {
                Z4 = Ce;
                var ya = Be;
              }
            else
              (k5 = h7.nodeName) && k5.toLowerCase() === "input" && (h7.type === "checkbox" || h7.type === "radio") && (Z4 = De);
            if (Z4 && (Z4 = Z4(a6, d9))) {
              me2(g8, Z4, c8, e14);
              break a;
            }
            ya && ya(a6, h7, d9);
            a6 === "focusout" && (ya = h7._wrapperState) && ya.controlled && h7.type === "number" && bb(h7, "number", h7.value);
          }
          ya = d9 ? te(d9) : window;
          switch (a6) {
            case "focusin":
              if (le2(ya) || ya.contentEditable === "true")
                Pe = ya, Qe = d9, Re = null;
              break;
            case "focusout":
              Re = Qe = Pe = null;
              break;
            case "mousedown":
              Se = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Se = false;
              Te2(g8, c8, e14);
              break;
            case "selectionchange":
              if (Oe)
                break;
            case "keydown":
            case "keyup":
              Te2(g8, c8, e14);
          }
          var ab;
          if ($d)
            b: {
              switch (a6) {
                case "compositionstart":
                  var ca = "onCompositionStart";
                  break b;
                case "compositionend":
                  ca = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ca = "onCompositionUpdate";
                  break b;
              }
              ca = void 0;
            }
          else
            he ? fe2(a6, c8) && (ca = "onCompositionEnd") : a6 === "keydown" && c8.keyCode === 229 && (ca = "onCompositionStart");
          ca && (ce && c8.locale !== "ko" && (he || ca !== "onCompositionStart" ? ca === "onCompositionEnd" && he && (ab = md()) : (jd = e14, kd = "value" in jd ? jd.value : jd.textContent, he = true)), ya = ne2(d9, ca), 0 < ya.length && (ca = new Kd(ca, a6, null, c8, e14), g8.push({ event: ca, listeners: ya }), ab ? ca.data = ab : (ab = ge2(c8), ab !== null && (ca.data = ab))));
          if (ab = be2 ? ie2(a6, c8) : je(a6, c8))
            d9 = ne2(d9, "onBeforeInput"), 0 < d9.length && (e14 = new Kd("onBeforeInput", "beforeinput", null, c8, e14), g8.push({ event: e14, listeners: d9 }), e14.data = ab);
        }
        re3(g8, b7);
      });
    }
    function sf(a6, b7, c8) {
      return { instance: a6, listener: b7, currentTarget: c8 };
    }
    function ne2(a6, b7) {
      for (var c8 = b7 + "Capture", d8 = []; a6 !== null; ) {
        var e13 = a6, f8 = e13.stateNode;
        e13.tag === 5 && f8 !== null && (e13 = f8, f8 = Jb(a6, c8), f8 != null && d8.unshift(sf(a6, f8, e13)), f8 = Jb(a6, b7), f8 != null && d8.push(sf(a6, f8, e13)));
        a6 = a6.return;
      }
      return d8;
    }
    function uf(a6) {
      if (a6 === null)
        return null;
      do
        a6 = a6.return;
      while (a6 && a6.tag !== 5);
      return a6 ? a6 : null;
    }
    function vf(a6, b7, c8, d8, e13) {
      for (var f8 = b7._reactName, g7 = []; c8 !== null && c8 !== d8; ) {
        var h6 = c8, k4 = h6.alternate, l8 = h6.stateNode;
        if (k4 !== null && k4 === d8)
          break;
        h6.tag === 5 && l8 !== null && (h6 = l8, e13 ? (k4 = Jb(c8, f8), k4 != null && g7.unshift(sf(c8, k4, h6))) : e13 || (k4 = Jb(c8, f8), k4 != null && g7.push(sf(c8, k4, h6))));
        c8 = c8.return;
      }
      g7.length !== 0 && a6.push({ event: b7, listeners: g7 });
    }
    var wf = /\r\n?/g;
    var xf = /\u0000|\uFFFD/g;
    function yf(a6) {
      return (typeof a6 === "string" ? a6 : "" + a6).replace(wf, "\n").replace(xf, "");
    }
    function zf(a6, b7, c8) {
      b7 = yf(b7);
      if (yf(a6) !== b7 && c8)
        throw Error(p7(425));
    }
    function Af() {
    }
    var Bf = null;
    var Cf = null;
    function Df(a6, b7) {
      return a6 === "textarea" || a6 === "noscript" || typeof b7.children === "string" || typeof b7.children === "number" || typeof b7.dangerouslySetInnerHTML === "object" && b7.dangerouslySetInnerHTML !== null && b7.dangerouslySetInnerHTML.__html != null;
    }
    var Ef = typeof setTimeout === "function" ? setTimeout : void 0;
    var Ff = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var Gf = typeof Promise === "function" ? Promise : void 0;
    var If = typeof queueMicrotask === "function" ? queueMicrotask : typeof Gf !== "undefined" ? function(a6) {
      return Gf.resolve(null).then(a6).catch(Hf);
    } : Ef;
    function Hf(a6) {
      setTimeout(function() {
        throw a6;
      });
    }
    function Jf(a6, b7) {
      var c8 = b7, d8 = 0;
      do {
        var e13 = c8.nextSibling;
        a6.removeChild(c8);
        if (e13 && e13.nodeType === 8)
          if (c8 = e13.data, c8 === "/$") {
            if (d8 === 0) {
              a6.removeChild(e13);
              ad(b7);
              return;
            }
            d8--;
          } else
            c8 !== "$" && c8 !== "$?" && c8 !== "$!" || d8++;
        c8 = e13;
      } while (c8);
      ad(b7);
    }
    function Kf(a6) {
      for (; a6 != null; a6 = a6.nextSibling) {
        var b7 = a6.nodeType;
        if (b7 === 1 || b7 === 3)
          break;
        if (b7 === 8) {
          b7 = a6.data;
          if (b7 === "$" || b7 === "$!" || b7 === "$?")
            break;
          if (b7 === "/$")
            return null;
        }
      }
      return a6;
    }
    function Lf(a6) {
      a6 = a6.previousSibling;
      for (var b7 = 0; a6; ) {
        if (a6.nodeType === 8) {
          var c8 = a6.data;
          if (c8 === "$" || c8 === "$!" || c8 === "$?") {
            if (b7 === 0)
              return a6;
            b7--;
          } else
            c8 === "/$" && b7++;
        }
        a6 = a6.previousSibling;
      }
      return null;
    }
    var Mf = Math.random().toString(36).slice(2);
    var Nf = "__reactFiber$" + Mf;
    var Of = "__reactProps$" + Mf;
    var tf = "__reactContainer$" + Mf;
    var nf = "__reactEvents$" + Mf;
    var Pf = "__reactListeners$" + Mf;
    var Qf = "__reactHandles$" + Mf;
    function Vc(a6) {
      var b7 = a6[Nf];
      if (b7)
        return b7;
      for (var c8 = a6.parentNode; c8; ) {
        if (b7 = c8[tf] || c8[Nf]) {
          c8 = b7.alternate;
          if (b7.child !== null || c8 !== null && c8.child !== null)
            for (a6 = Lf(a6); a6 !== null; ) {
              if (c8 = a6[Nf])
                return c8;
              a6 = Lf(a6);
            }
          return b7;
        }
        a6 = c8;
        c8 = a6.parentNode;
      }
      return null;
    }
    function Bb(a6) {
      a6 = a6[Nf] || a6[tf];
      return !a6 || a6.tag !== 5 && a6.tag !== 6 && a6.tag !== 13 && a6.tag !== 3 ? null : a6;
    }
    function te(a6) {
      if (a6.tag === 5 || a6.tag === 6)
        return a6.stateNode;
      throw Error(p7(33));
    }
    function Cb(a6) {
      return a6[Of] || null;
    }
    var Rf = [];
    var Sf = -1;
    function Tf(a6) {
      return { current: a6 };
    }
    function E7(a6) {
      0 > Sf || (a6.current = Rf[Sf], Rf[Sf] = null, Sf--);
    }
    function G3(a6, b7) {
      Sf++;
      Rf[Sf] = a6.current;
      a6.current = b7;
    }
    var Uf = {};
    var H5 = Tf(Uf);
    var Vf = Tf(false);
    var Wf = Uf;
    function Xf(a6, b7) {
      var c8 = a6.type.contextTypes;
      if (!c8)
        return Uf;
      var d8 = a6.stateNode;
      if (d8 && d8.__reactInternalMemoizedUnmaskedChildContext === b7)
        return d8.__reactInternalMemoizedMaskedChildContext;
      var e13 = {}, f8;
      for (f8 in c8)
        e13[f8] = b7[f8];
      d8 && (a6 = a6.stateNode, a6.__reactInternalMemoizedUnmaskedChildContext = b7, a6.__reactInternalMemoizedMaskedChildContext = e13);
      return e13;
    }
    function Yf(a6) {
      a6 = a6.childContextTypes;
      return a6 !== null && a6 !== void 0;
    }
    function Zf() {
      E7(Vf);
      E7(H5);
    }
    function $f(a6, b7, c8) {
      if (H5.current !== Uf)
        throw Error(p7(168));
      G3(H5, b7);
      G3(Vf, c8);
    }
    function ag(a6, b7, c8) {
      var d8 = a6.stateNode;
      b7 = b7.childContextTypes;
      if (typeof d8.getChildContext !== "function")
        return c8;
      d8 = d8.getChildContext();
      for (var e13 in d8)
        if (!(e13 in b7))
          throw Error(p7(108, Qa(a6) || "Unknown", e13));
      return A4({}, c8, d8);
    }
    function bg(a6) {
      a6 = (a6 = a6.stateNode) && a6.__reactInternalMemoizedMergedChildContext || Uf;
      Wf = H5.current;
      G3(H5, a6);
      G3(Vf, Vf.current);
      return true;
    }
    function cg(a6, b7, c8) {
      var d8 = a6.stateNode;
      if (!d8)
        throw Error(p7(169));
      c8 ? (a6 = ag(a6, b7, Wf), d8.__reactInternalMemoizedMergedChildContext = a6, E7(Vf), E7(H5), G3(H5, a6)) : E7(Vf);
      G3(Vf, c8);
    }
    var dg = null;
    var eg = false;
    var fg = false;
    function gg(a6) {
      dg === null ? dg = [a6] : dg.push(a6);
    }
    function hg(a6) {
      eg = true;
      gg(a6);
    }
    function ig() {
      if (!fg && dg !== null) {
        fg = true;
        var a6 = 0, b7 = C6;
        try {
          var c8 = dg;
          for (C6 = 1; a6 < c8.length; a6++) {
            var d8 = c8[a6];
            do
              d8 = d8(true);
            while (d8 !== null);
          }
          dg = null;
          eg = false;
        } catch (e13) {
          throw dg !== null && (dg = dg.slice(a6 + 1)), $b(ec, ig), e13;
        } finally {
          C6 = b7, fg = false;
        }
      }
      return null;
    }
    var jg = ta.ReactCurrentBatchConfig;
    function kg(a6, b7) {
      if (a6 && a6.defaultProps) {
        b7 = A4({}, b7);
        a6 = a6.defaultProps;
        for (var c8 in a6)
          b7[c8] === void 0 && (b7[c8] = a6[c8]);
        return b7;
      }
      return b7;
    }
    var lg = Tf(null);
    var mg = null;
    var ng = null;
    var og = null;
    function pg() {
      og = ng = mg = null;
    }
    function qg(a6) {
      var b7 = lg.current;
      E7(lg);
      a6._currentValue = b7;
    }
    function rg(a6, b7, c8) {
      for (; a6 !== null; ) {
        var d8 = a6.alternate;
        (a6.childLanes & b7) !== b7 ? (a6.childLanes |= b7, d8 !== null && (d8.childLanes |= b7)) : d8 !== null && (d8.childLanes & b7) !== b7 && (d8.childLanes |= b7);
        if (a6 === c8)
          break;
        a6 = a6.return;
      }
    }
    function sg(a6, b7) {
      mg = a6;
      og = ng = null;
      a6 = a6.dependencies;
      a6 !== null && a6.firstContext !== null && ((a6.lanes & b7) !== 0 && (tg = true), a6.firstContext = null);
    }
    function ug(a6) {
      var b7 = a6._currentValue;
      if (og !== a6)
        if (a6 = { context: a6, memoizedValue: b7, next: null }, ng === null) {
          if (mg === null)
            throw Error(p7(308));
          ng = a6;
          mg.dependencies = { lanes: 0, firstContext: a6 };
        } else
          ng = ng.next = a6;
      return b7;
    }
    var vg = null;
    var wg = false;
    function xg(a6) {
      a6.updateQueue = { baseState: a6.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function yg(a6, b7) {
      a6 = a6.updateQueue;
      b7.updateQueue === a6 && (b7.updateQueue = { baseState: a6.baseState, firstBaseUpdate: a6.firstBaseUpdate, lastBaseUpdate: a6.lastBaseUpdate, shared: a6.shared, effects: a6.effects });
    }
    function zg(a6, b7) {
      return { eventTime: a6, lane: b7, tag: 0, payload: null, callback: null, next: null };
    }
    function Ag(a6, b7) {
      var c8 = a6.updateQueue;
      c8 !== null && (c8 = c8.shared, Bg(a6) ? (a6 = c8.interleaved, a6 === null ? (b7.next = b7, vg === null ? vg = [c8] : vg.push(c8)) : (b7.next = a6.next, a6.next = b7), c8.interleaved = b7) : (a6 = c8.pending, a6 === null ? b7.next = b7 : (b7.next = a6.next, a6.next = b7), c8.pending = b7));
    }
    function Cg(a6, b7, c8) {
      b7 = b7.updateQueue;
      if (b7 !== null && (b7 = b7.shared, (c8 & 4194240) !== 0)) {
        var d8 = b7.lanes;
        d8 &= a6.pendingLanes;
        c8 |= d8;
        b7.lanes = c8;
        Bc(a6, c8);
      }
    }
    function Dg(a6, b7) {
      var c8 = a6.updateQueue, d8 = a6.alternate;
      if (d8 !== null && (d8 = d8.updateQueue, c8 === d8)) {
        var e13 = null, f8 = null;
        c8 = c8.firstBaseUpdate;
        if (c8 !== null) {
          do {
            var g7 = { eventTime: c8.eventTime, lane: c8.lane, tag: c8.tag, payload: c8.payload, callback: c8.callback, next: null };
            f8 === null ? e13 = f8 = g7 : f8 = f8.next = g7;
            c8 = c8.next;
          } while (c8 !== null);
          f8 === null ? e13 = f8 = b7 : f8 = f8.next = b7;
        } else
          e13 = f8 = b7;
        c8 = { baseState: d8.baseState, firstBaseUpdate: e13, lastBaseUpdate: f8, shared: d8.shared, effects: d8.effects };
        a6.updateQueue = c8;
        return;
      }
      a6 = c8.lastBaseUpdate;
      a6 === null ? c8.firstBaseUpdate = b7 : a6.next = b7;
      c8.lastBaseUpdate = b7;
    }
    function Eg(a6, b7, c8, d8) {
      var e13 = a6.updateQueue;
      wg = false;
      var f8 = e13.firstBaseUpdate, g7 = e13.lastBaseUpdate, h6 = e13.shared.pending;
      if (h6 !== null) {
        e13.shared.pending = null;
        var k4 = h6, l8 = k4.next;
        k4.next = null;
        g7 === null ? f8 = l8 : g7.next = l8;
        g7 = k4;
        var n6 = a6.alternate;
        n6 !== null && (n6 = n6.updateQueue, h6 = n6.lastBaseUpdate, h6 !== g7 && (h6 === null ? n6.firstBaseUpdate = l8 : h6.next = l8, n6.lastBaseUpdate = k4));
      }
      if (f8 !== null) {
        var u5 = e13.baseState;
        g7 = 0;
        n6 = l8 = k4 = null;
        h6 = f8;
        do {
          var q3 = h6.lane, y4 = h6.eventTime;
          if ((d8 & q3) === q3) {
            n6 !== null && (n6 = n6.next = {
              eventTime: y4,
              lane: 0,
              tag: h6.tag,
              payload: h6.payload,
              callback: h6.callback,
              next: null
            });
            a: {
              var m8 = a6, w7 = h6;
              q3 = b7;
              y4 = c8;
              switch (w7.tag) {
                case 1:
                  m8 = w7.payload;
                  if (typeof m8 === "function") {
                    u5 = m8.call(y4, u5, q3);
                    break a;
                  }
                  u5 = m8;
                  break a;
                case 3:
                  m8.flags = m8.flags & -65537 | 128;
                case 0:
                  m8 = w7.payload;
                  q3 = typeof m8 === "function" ? m8.call(y4, u5, q3) : m8;
                  if (q3 === null || q3 === void 0)
                    break a;
                  u5 = A4({}, u5, q3);
                  break a;
                case 2:
                  wg = true;
              }
            }
            h6.callback !== null && h6.lane !== 0 && (a6.flags |= 64, q3 = e13.effects, q3 === null ? e13.effects = [h6] : q3.push(h6));
          } else
            y4 = { eventTime: y4, lane: q3, tag: h6.tag, payload: h6.payload, callback: h6.callback, next: null }, n6 === null ? (l8 = n6 = y4, k4 = u5) : n6 = n6.next = y4, g7 |= q3;
          h6 = h6.next;
          if (h6 === null)
            if (h6 = e13.shared.pending, h6 === null)
              break;
            else
              q3 = h6, h6 = q3.next, q3.next = null, e13.lastBaseUpdate = q3, e13.shared.pending = null;
        } while (1);
        n6 === null && (k4 = u5);
        e13.baseState = k4;
        e13.firstBaseUpdate = l8;
        e13.lastBaseUpdate = n6;
        b7 = e13.shared.interleaved;
        if (b7 !== null) {
          e13 = b7;
          do
            g7 |= e13.lane, e13 = e13.next;
          while (e13 !== b7);
        } else
          f8 === null && (e13.shared.lanes = 0);
        Fg |= g7;
        a6.lanes = g7;
        a6.memoizedState = u5;
      }
    }
    function Gg(a6, b7, c8) {
      a6 = b7.effects;
      b7.effects = null;
      if (a6 !== null)
        for (b7 = 0; b7 < a6.length; b7++) {
          var d8 = a6[b7], e13 = d8.callback;
          if (e13 !== null) {
            d8.callback = null;
            d8 = c8;
            if (typeof e13 !== "function")
              throw Error(p7(191, e13));
            e13.call(d8);
          }
        }
    }
    var Hg = new aa.Component().refs;
    function Ig(a6, b7, c8, d8) {
      b7 = a6.memoizedState;
      c8 = c8(d8, b7);
      c8 = c8 === null || c8 === void 0 ? b7 : A4({}, b7, c8);
      a6.memoizedState = c8;
      a6.lanes === 0 && (a6.updateQueue.baseState = c8);
    }
    var Mg = { isMounted: function(a6) {
      return (a6 = a6._reactInternals) ? Ub(a6) === a6 : false;
    }, enqueueSetState: function(a6, b7, c8) {
      a6 = a6._reactInternals;
      var d8 = Jg(), e13 = Kg(a6), f8 = zg(d8, e13);
      f8.payload = b7;
      c8 !== void 0 && c8 !== null && (f8.callback = c8);
      Ag(a6, f8);
      b7 = Lg(a6, e13, d8);
      b7 !== null && Cg(b7, a6, e13);
    }, enqueueReplaceState: function(a6, b7, c8) {
      a6 = a6._reactInternals;
      var d8 = Jg(), e13 = Kg(a6), f8 = zg(d8, e13);
      f8.tag = 1;
      f8.payload = b7;
      c8 !== void 0 && c8 !== null && (f8.callback = c8);
      Ag(a6, f8);
      b7 = Lg(a6, e13, d8);
      b7 !== null && Cg(b7, a6, e13);
    }, enqueueForceUpdate: function(a6, b7) {
      a6 = a6._reactInternals;
      var c8 = Jg(), d8 = Kg(a6), e13 = zg(c8, d8);
      e13.tag = 2;
      b7 !== void 0 && b7 !== null && (e13.callback = b7);
      Ag(a6, e13);
      b7 = Lg(a6, d8, c8);
      b7 !== null && Cg(b7, a6, d8);
    } };
    function Ng(a6, b7, c8, d8, e13, f8, g7) {
      a6 = a6.stateNode;
      return typeof a6.shouldComponentUpdate === "function" ? a6.shouldComponentUpdate(d8, f8, g7) : b7.prototype && b7.prototype.isPureReactComponent ? !He(c8, d8) || !He(e13, f8) : true;
    }
    function Og(a6, b7, c8) {
      var d8 = false, e13 = Uf;
      var f8 = b7.contextType;
      typeof f8 === "object" && f8 !== null ? f8 = ug(f8) : (e13 = Yf(b7) ? Wf : H5.current, d8 = b7.contextTypes, f8 = (d8 = d8 !== null && d8 !== void 0) ? Xf(a6, e13) : Uf);
      b7 = new b7(c8, f8);
      a6.memoizedState = b7.state !== null && b7.state !== void 0 ? b7.state : null;
      b7.updater = Mg;
      a6.stateNode = b7;
      b7._reactInternals = a6;
      d8 && (a6 = a6.stateNode, a6.__reactInternalMemoizedUnmaskedChildContext = e13, a6.__reactInternalMemoizedMaskedChildContext = f8);
      return b7;
    }
    function Pg(a6, b7, c8, d8) {
      a6 = b7.state;
      typeof b7.componentWillReceiveProps === "function" && b7.componentWillReceiveProps(c8, d8);
      typeof b7.UNSAFE_componentWillReceiveProps === "function" && b7.UNSAFE_componentWillReceiveProps(c8, d8);
      b7.state !== a6 && Mg.enqueueReplaceState(b7, b7.state, null);
    }
    function Qg(a6, b7, c8, d8) {
      var e13 = a6.stateNode;
      e13.props = c8;
      e13.state = a6.memoizedState;
      e13.refs = Hg;
      xg(a6);
      var f8 = b7.contextType;
      typeof f8 === "object" && f8 !== null ? e13.context = ug(f8) : (f8 = Yf(b7) ? Wf : H5.current, e13.context = Xf(a6, f8));
      e13.state = a6.memoizedState;
      f8 = b7.getDerivedStateFromProps;
      typeof f8 === "function" && (Ig(a6, b7, f8, c8), e13.state = a6.memoizedState);
      typeof b7.getDerivedStateFromProps === "function" || typeof e13.getSnapshotBeforeUpdate === "function" || typeof e13.UNSAFE_componentWillMount !== "function" && typeof e13.componentWillMount !== "function" || (b7 = e13.state, typeof e13.componentWillMount === "function" && e13.componentWillMount(), typeof e13.UNSAFE_componentWillMount === "function" && e13.UNSAFE_componentWillMount(), b7 !== e13.state && Mg.enqueueReplaceState(e13, e13.state, null), Eg(a6, c8, e13, d8), e13.state = a6.memoizedState);
      typeof e13.componentDidMount === "function" && (a6.flags |= 4194308);
    }
    var Rg = [];
    var Sg = 0;
    var Tg = null;
    var Ug = 0;
    var Vg = [];
    var Wg = 0;
    var Xg = null;
    var Yg = 1;
    var Zg = "";
    function $g(a6, b7) {
      Rg[Sg++] = Ug;
      Rg[Sg++] = Tg;
      Tg = a6;
      Ug = b7;
    }
    function ah(a6, b7, c8) {
      Vg[Wg++] = Yg;
      Vg[Wg++] = Zg;
      Vg[Wg++] = Xg;
      Xg = a6;
      var d8 = Yg;
      a6 = Zg;
      var e13 = 32 - nc(d8) - 1;
      d8 &= ~(1 << e13);
      c8 += 1;
      var f8 = 32 - nc(b7) + e13;
      if (30 < f8) {
        var g7 = e13 - e13 % 5;
        f8 = (d8 & (1 << g7) - 1).toString(32);
        d8 >>= g7;
        e13 -= g7;
        Yg = 1 << 32 - nc(b7) + e13 | c8 << e13 | d8;
        Zg = f8 + a6;
      } else
        Yg = 1 << f8 | c8 << e13 | d8, Zg = a6;
    }
    function bh(a6) {
      a6.return !== null && ($g(a6, 1), ah(a6, 1, 0));
    }
    function ch(a6) {
      for (; a6 === Tg; )
        Tg = Rg[--Sg], Rg[Sg] = null, Ug = Rg[--Sg], Rg[Sg] = null;
      for (; a6 === Xg; )
        Xg = Vg[--Wg], Vg[Wg] = null, Zg = Vg[--Wg], Vg[Wg] = null, Yg = Vg[--Wg], Vg[Wg] = null;
    }
    var dh = null;
    var eh = null;
    var I4 = false;
    var fh = null;
    function gh(a6, b7) {
      var c8 = hh(5, null, null, 0);
      c8.elementType = "DELETED";
      c8.stateNode = b7;
      c8.return = a6;
      b7 = a6.deletions;
      b7 === null ? (a6.deletions = [c8], a6.flags |= 16) : b7.push(c8);
    }
    function ih(a6, b7) {
      switch (a6.tag) {
        case 5:
          var c8 = a6.type;
          b7 = b7.nodeType !== 1 || c8.toLowerCase() !== b7.nodeName.toLowerCase() ? null : b7;
          return b7 !== null ? (a6.stateNode = b7, dh = a6, eh = Kf(b7.firstChild), true) : false;
        case 6:
          return b7 = a6.pendingProps === "" || b7.nodeType !== 3 ? null : b7, b7 !== null ? (a6.stateNode = b7, dh = a6, eh = null, true) : false;
        case 13:
          return b7 = b7.nodeType !== 8 ? null : b7, b7 !== null ? (c8 = Xg !== null ? { id: Yg, overflow: Zg } : null, a6.memoizedState = { dehydrated: b7, treeContext: c8, retryLane: 1073741824 }, c8 = hh(18, null, null, 0), c8.stateNode = b7, c8.return = a6, a6.child = c8, dh = a6, eh = null, true) : false;
        default:
          return false;
      }
    }
    function jh(a6) {
      return (a6.mode & 1) !== 0 && (a6.flags & 128) === 0;
    }
    function kh(a6) {
      if (I4) {
        var b7 = eh;
        if (b7) {
          var c8 = b7;
          if (!ih(a6, b7)) {
            if (jh(a6))
              throw Error(p7(418));
            b7 = Kf(c8.nextSibling);
            var d8 = dh;
            b7 && ih(a6, b7) ? gh(d8, c8) : (a6.flags = a6.flags & -4097 | 2, I4 = false, dh = a6);
          }
        } else {
          if (jh(a6))
            throw Error(p7(418));
          a6.flags = a6.flags & -4097 | 2;
          I4 = false;
          dh = a6;
        }
      }
    }
    function lh(a6) {
      for (a6 = a6.return; a6 !== null && a6.tag !== 5 && a6.tag !== 3 && a6.tag !== 13; )
        a6 = a6.return;
      dh = a6;
    }
    function mh(a6) {
      if (a6 !== dh)
        return false;
      if (!I4)
        return lh(a6), I4 = true, false;
      var b7;
      (b7 = a6.tag !== 3) && !(b7 = a6.tag !== 5) && (b7 = a6.type, b7 = b7 !== "head" && b7 !== "body" && !Df(a6.type, a6.memoizedProps));
      if (b7 && (b7 = eh)) {
        if (jh(a6)) {
          for (a6 = eh; a6; )
            a6 = Kf(a6.nextSibling);
          throw Error(p7(418));
        }
        for (; b7; )
          gh(a6, b7), b7 = Kf(b7.nextSibling);
      }
      lh(a6);
      if (a6.tag === 13) {
        a6 = a6.memoizedState;
        a6 = a6 !== null ? a6.dehydrated : null;
        if (!a6)
          throw Error(p7(317));
        a: {
          a6 = a6.nextSibling;
          for (b7 = 0; a6; ) {
            if (a6.nodeType === 8) {
              var c8 = a6.data;
              if (c8 === "/$") {
                if (b7 === 0) {
                  eh = Kf(a6.nextSibling);
                  break a;
                }
                b7--;
              } else
                c8 !== "$" && c8 !== "$!" && c8 !== "$?" || b7++;
            }
            a6 = a6.nextSibling;
          }
          eh = null;
        }
      } else
        eh = dh ? Kf(a6.stateNode.nextSibling) : null;
      return true;
    }
    function nh() {
      eh = dh = null;
      I4 = false;
    }
    function oh(a6) {
      fh === null ? fh = [a6] : fh.push(a6);
    }
    function ph(a6, b7, c8) {
      a6 = c8.ref;
      if (a6 !== null && typeof a6 !== "function" && typeof a6 !== "object") {
        if (c8._owner) {
          c8 = c8._owner;
          if (c8) {
            if (c8.tag !== 1)
              throw Error(p7(309));
            var d8 = c8.stateNode;
          }
          if (!d8)
            throw Error(p7(147, a6));
          var e13 = d8, f8 = "" + a6;
          if (b7 !== null && b7.ref !== null && typeof b7.ref === "function" && b7.ref._stringRef === f8)
            return b7.ref;
          b7 = function(a7) {
            var b8 = e13.refs;
            b8 === Hg && (b8 = e13.refs = {});
            a7 === null ? delete b8[f8] : b8[f8] = a7;
          };
          b7._stringRef = f8;
          return b7;
        }
        if (typeof a6 !== "string")
          throw Error(p7(284));
        if (!c8._owner)
          throw Error(p7(290, a6));
      }
      return a6;
    }
    function qh(a6, b7) {
      a6 = Object.prototype.toString.call(b7);
      throw Error(p7(31, a6 === "[object Object]" ? "object with keys {" + Object.keys(b7).join(", ") + "}" : a6));
    }
    function rh(a6) {
      var b7 = a6._init;
      return b7(a6._payload);
    }
    function sh(a6) {
      function b7(b8, c9) {
        if (a6) {
          var d9 = b8.deletions;
          d9 === null ? (b8.deletions = [c9], b8.flags |= 16) : d9.push(c9);
        }
      }
      function c8(c9, d9) {
        if (!a6)
          return null;
        for (; d9 !== null; )
          b7(c9, d9), d9 = d9.sibling;
        return null;
      }
      function d8(a7, b8) {
        for (a7 = /* @__PURE__ */ new Map(); b8 !== null; )
          b8.key !== null ? a7.set(b8.key, b8) : a7.set(b8.index, b8), b8 = b8.sibling;
        return a7;
      }
      function e13(a7, b8) {
        a7 = th(a7, b8);
        a7.index = 0;
        a7.sibling = null;
        return a7;
      }
      function f8(b8, c9, d9) {
        b8.index = d9;
        if (!a6)
          return b8.flags |= 1048576, c9;
        d9 = b8.alternate;
        if (d9 !== null)
          return d9 = d9.index, d9 < c9 ? (b8.flags |= 2, c9) : d9;
        b8.flags |= 2;
        return c9;
      }
      function g7(b8) {
        a6 && b8.alternate === null && (b8.flags |= 2);
        return b8;
      }
      function h6(a7, b8, c9, d9) {
        if (b8 === null || b8.tag !== 6)
          return b8 = uh(c9, a7.mode, d9), b8.return = a7, b8;
        b8 = e13(b8, c9);
        b8.return = a7;
        return b8;
      }
      function k4(a7, b8, c9, d9) {
        var f9 = c9.type;
        if (f9 === wa)
          return n6(a7, b8, c9.props.children, d9, c9.key);
        if (b8 !== null && (b8.elementType === f9 || typeof f9 === "object" && f9 !== null && f9.$$typeof === Ga && rh(f9) === b8.type))
          return d9 = e13(b8, c9.props), d9.ref = ph(a7, b8, c9), d9.return = a7, d9;
        d9 = vh(c9.type, c9.key, c9.props, null, a7.mode, d9);
        d9.ref = ph(a7, b8, c9);
        d9.return = a7;
        return d9;
      }
      function l8(a7, b8, c9, d9) {
        if (b8 === null || b8.tag !== 4 || b8.stateNode.containerInfo !== c9.containerInfo || b8.stateNode.implementation !== c9.implementation)
          return b8 = wh(c9, a7.mode, d9), b8.return = a7, b8;
        b8 = e13(b8, c9.children || []);
        b8.return = a7;
        return b8;
      }
      function n6(a7, b8, c9, d9, f9) {
        if (b8 === null || b8.tag !== 7)
          return b8 = xh(c9, a7.mode, d9, f9), b8.return = a7, b8;
        b8 = e13(b8, c9);
        b8.return = a7;
        return b8;
      }
      function u5(a7, b8, c9) {
        if (typeof b8 === "string" && b8 !== "" || typeof b8 === "number")
          return b8 = uh("" + b8, a7.mode, c9), b8.return = a7, b8;
        if (typeof b8 === "object" && b8 !== null) {
          switch (b8.$$typeof) {
            case ua:
              return c9 = vh(b8.type, b8.key, b8.props, null, a7.mode, c9), c9.ref = ph(a7, null, b8), c9.return = a7, c9;
            case va:
              return b8 = wh(b8, a7.mode, c9), b8.return = a7, b8;
            case Ga:
              var d9 = b8._init;
              return u5(a7, d9(b8._payload), c9);
          }
          if (db(b8) || Ja(b8))
            return b8 = xh(b8, a7.mode, c9, null), b8.return = a7, b8;
          qh(a7, b8);
        }
        return null;
      }
      function q3(a7, b8, c9, d9) {
        var e14 = b8 !== null ? b8.key : null;
        if (typeof c9 === "string" && c9 !== "" || typeof c9 === "number")
          return e14 !== null ? null : h6(a7, b8, "" + c9, d9);
        if (typeof c9 === "object" && c9 !== null) {
          switch (c9.$$typeof) {
            case ua:
              return c9.key === e14 ? k4(a7, b8, c9, d9) : null;
            case va:
              return c9.key === e14 ? l8(a7, b8, c9, d9) : null;
            case Ga:
              return e14 = c9._init, q3(a7, b8, e14(c9._payload), d9);
          }
          if (db(c9) || Ja(c9))
            return e14 !== null ? null : n6(a7, b8, c9, d9, null);
          qh(a7, c9);
        }
        return null;
      }
      function y4(a7, b8, c9, d9, e14) {
        if (typeof d9 === "string" && d9 !== "" || typeof d9 === "number")
          return a7 = a7.get(c9) || null, h6(b8, a7, "" + d9, e14);
        if (typeof d9 === "object" && d9 !== null) {
          switch (d9.$$typeof) {
            case ua:
              return a7 = a7.get(d9.key === null ? c9 : d9.key) || null, k4(b8, a7, d9, e14);
            case va:
              return a7 = a7.get(d9.key === null ? c9 : d9.key) || null, l8(b8, a7, d9, e14);
            case Ga:
              var f9 = d9._init;
              return y4(a7, b8, c9, f9(d9._payload), e14);
          }
          if (db(d9) || Ja(d9))
            return a7 = a7.get(c9) || null, n6(b8, a7, d9, e14, null);
          qh(b8, d9);
        }
        return null;
      }
      function m8(e14, g8, h7, k5) {
        for (var l9 = null, n7 = null, r12 = g8, m9 = g8 = 0, x7 = null; r12 !== null && m9 < h7.length; m9++) {
          r12.index > m9 ? (x7 = r12, r12 = null) : x7 = r12.sibling;
          var v6 = q3(e14, r12, h7[m9], k5);
          if (v6 === null) {
            r12 === null && (r12 = x7);
            break;
          }
          a6 && r12 && v6.alternate === null && b7(e14, r12);
          g8 = f8(v6, g8, m9);
          n7 === null ? l9 = v6 : n7.sibling = v6;
          n7 = v6;
          r12 = x7;
        }
        if (m9 === h7.length)
          return c8(e14, r12), I4 && $g(e14, m9), l9;
        if (r12 === null) {
          for (; m9 < h7.length; m9++)
            r12 = u5(e14, h7[m9], k5), r12 !== null && (g8 = f8(r12, g8, m9), n7 === null ? l9 = r12 : n7.sibling = r12, n7 = r12);
          I4 && $g(e14, m9);
          return l9;
        }
        for (r12 = d8(e14, r12); m9 < h7.length; m9++)
          x7 = y4(r12, e14, m9, h7[m9], k5), x7 !== null && (a6 && x7.alternate !== null && r12.delete(x7.key === null ? m9 : x7.key), g8 = f8(x7, g8, m9), n7 === null ? l9 = x7 : n7.sibling = x7, n7 = x7);
        a6 && r12.forEach(function(a7) {
          return b7(e14, a7);
        });
        I4 && $g(e14, m9);
        return l9;
      }
      function w7(e14, g8, h7, k5) {
        var l9 = Ja(h7);
        if (typeof l9 !== "function")
          throw Error(p7(150));
        h7 = l9.call(h7);
        if (h7 == null)
          throw Error(p7(151));
        for (var n7 = l9 = null, m9 = g8, r12 = g8 = 0, x7 = null, v6 = h7.next(); m9 !== null && !v6.done; r12++, v6 = h7.next()) {
          m9.index > r12 ? (x7 = m9, m9 = null) : x7 = m9.sibling;
          var w8 = q3(e14, m9, v6.value, k5);
          if (w8 === null) {
            m9 === null && (m9 = x7);
            break;
          }
          a6 && m9 && w8.alternate === null && b7(e14, m9);
          g8 = f8(w8, g8, r12);
          n7 === null ? l9 = w8 : n7.sibling = w8;
          n7 = w8;
          m9 = x7;
        }
        if (v6.done)
          return c8(e14, m9), I4 && $g(e14, r12), l9;
        if (m9 === null) {
          for (; !v6.done; r12++, v6 = h7.next())
            v6 = u5(e14, v6.value, k5), v6 !== null && (g8 = f8(v6, g8, r12), n7 === null ? l9 = v6 : n7.sibling = v6, n7 = v6);
          I4 && $g(e14, r12);
          return l9;
        }
        for (m9 = d8(e14, m9); !v6.done; r12++, v6 = h7.next())
          v6 = y4(m9, e14, r12, v6.value, k5), v6 !== null && (a6 && v6.alternate !== null && m9.delete(v6.key === null ? r12 : v6.key), g8 = f8(v6, g8, r12), n7 === null ? l9 = v6 : n7.sibling = v6, n7 = v6);
        a6 && m9.forEach(function(a7) {
          return b7(e14, a7);
        });
        I4 && $g(e14, r12);
        return l9;
      }
      function J4(a7, d9, f9, h7) {
        typeof f9 === "object" && f9 !== null && f9.type === wa && f9.key === null && (f9 = f9.props.children);
        if (typeof f9 === "object" && f9 !== null) {
          switch (f9.$$typeof) {
            case ua:
              a: {
                for (var k5 = f9.key, l9 = d9; l9 !== null; ) {
                  if (l9.key === k5) {
                    k5 = f9.type;
                    if (k5 === wa) {
                      if (l9.tag === 7) {
                        c8(a7, l9.sibling);
                        d9 = e13(l9, f9.props.children);
                        d9.return = a7;
                        a7 = d9;
                        break a;
                      }
                    } else if (l9.elementType === k5 || typeof k5 === "object" && k5 !== null && k5.$$typeof === Ga && rh(k5) === l9.type) {
                      c8(a7, l9.sibling);
                      d9 = e13(l9, f9.props);
                      d9.ref = ph(a7, l9, f9);
                      d9.return = a7;
                      a7 = d9;
                      break a;
                    }
                    c8(a7, l9);
                    break;
                  } else
                    b7(a7, l9);
                  l9 = l9.sibling;
                }
                f9.type === wa ? (d9 = xh(f9.props.children, a7.mode, h7, f9.key), d9.return = a7, a7 = d9) : (h7 = vh(f9.type, f9.key, f9.props, null, a7.mode, h7), h7.ref = ph(a7, d9, f9), h7.return = a7, a7 = h7);
              }
              return g7(a7);
            case va:
              a: {
                for (l9 = f9.key; d9 !== null; ) {
                  if (d9.key === l9)
                    if (d9.tag === 4 && d9.stateNode.containerInfo === f9.containerInfo && d9.stateNode.implementation === f9.implementation) {
                      c8(a7, d9.sibling);
                      d9 = e13(d9, f9.children || []);
                      d9.return = a7;
                      a7 = d9;
                      break a;
                    } else {
                      c8(a7, d9);
                      break;
                    }
                  else
                    b7(a7, d9);
                  d9 = d9.sibling;
                }
                d9 = wh(f9, a7.mode, h7);
                d9.return = a7;
                a7 = d9;
              }
              return g7(a7);
            case Ga:
              return l9 = f9._init, J4(a7, d9, l9(f9._payload), h7);
          }
          if (db(f9))
            return m8(a7, d9, f9, h7);
          if (Ja(f9))
            return w7(a7, d9, f9, h7);
          qh(a7, f9);
        }
        return typeof f9 === "string" && f9 !== "" || typeof f9 === "number" ? (f9 = "" + f9, d9 !== null && d9.tag === 6 ? (c8(a7, d9.sibling), d9 = e13(d9, f9), d9.return = a7, a7 = d9) : (c8(a7, d9), d9 = uh(f9, a7.mode, h7), d9.return = a7, a7 = d9), g7(a7)) : c8(a7, d9);
      }
      return J4;
    }
    var yh = sh(true);
    var zh = sh(false);
    var Ah = {};
    var Bh = Tf(Ah);
    var Ch = Tf(Ah);
    var Dh = Tf(Ah);
    function Eh(a6) {
      if (a6 === Ah)
        throw Error(p7(174));
      return a6;
    }
    function Fh(a6, b7) {
      G3(Dh, b7);
      G3(Ch, a6);
      G3(Bh, Ah);
      a6 = b7.nodeType;
      switch (a6) {
        case 9:
        case 11:
          b7 = (b7 = b7.documentElement) ? b7.namespaceURI : kb(null, "");
          break;
        default:
          a6 = a6 === 8 ? b7.parentNode : b7, b7 = a6.namespaceURI || null, a6 = a6.tagName, b7 = kb(b7, a6);
      }
      E7(Bh);
      G3(Bh, b7);
    }
    function Gh() {
      E7(Bh);
      E7(Ch);
      E7(Dh);
    }
    function Hh(a6) {
      Eh(Dh.current);
      var b7 = Eh(Bh.current);
      var c8 = kb(b7, a6.type);
      b7 !== c8 && (G3(Ch, a6), G3(Bh, c8));
    }
    function Ih(a6) {
      Ch.current === a6 && (E7(Bh), E7(Ch));
    }
    var K3 = Tf(0);
    function Jh(a6) {
      for (var b7 = a6; b7 !== null; ) {
        if (b7.tag === 13) {
          var c8 = b7.memoizedState;
          if (c8 !== null && (c8 = c8.dehydrated, c8 === null || c8.data === "$?" || c8.data === "$!"))
            return b7;
        } else if (b7.tag === 19 && b7.memoizedProps.revealOrder !== void 0) {
          if ((b7.flags & 128) !== 0)
            return b7;
        } else if (b7.child !== null) {
          b7.child.return = b7;
          b7 = b7.child;
          continue;
        }
        if (b7 === a6)
          break;
        for (; b7.sibling === null; ) {
          if (b7.return === null || b7.return === a6)
            return null;
          b7 = b7.return;
        }
        b7.sibling.return = b7.return;
        b7 = b7.sibling;
      }
      return null;
    }
    var Kh = [];
    function Lh() {
      for (var a6 = 0; a6 < Kh.length; a6++)
        Kh[a6]._workInProgressVersionPrimary = null;
      Kh.length = 0;
    }
    var Mh = ta.ReactCurrentDispatcher;
    var Nh = ta.ReactCurrentBatchConfig;
    var Oh = 0;
    var L4 = null;
    var M3 = null;
    var N2 = null;
    var Ph = false;
    var Qh = false;
    var Rh = 0;
    var Sh = 0;
    function O5() {
      throw Error(p7(321));
    }
    function Th(a6, b7) {
      if (b7 === null)
        return false;
      for (var c8 = 0; c8 < b7.length && c8 < a6.length; c8++)
        if (!Ge(a6[c8], b7[c8]))
          return false;
      return true;
    }
    function Uh(a6, b7, c8, d8, e13, f8) {
      Oh = f8;
      L4 = b7;
      b7.memoizedState = null;
      b7.updateQueue = null;
      b7.lanes = 0;
      Mh.current = a6 === null || a6.memoizedState === null ? Vh : Wh;
      a6 = c8(d8, e13);
      if (Qh) {
        f8 = 0;
        do {
          Qh = false;
          Rh = 0;
          if (25 <= f8)
            throw Error(p7(301));
          f8 += 1;
          N2 = M3 = null;
          b7.updateQueue = null;
          Mh.current = Xh;
          a6 = c8(d8, e13);
        } while (Qh);
      }
      Mh.current = Yh;
      b7 = M3 !== null && M3.next !== null;
      Oh = 0;
      N2 = M3 = L4 = null;
      Ph = false;
      if (b7)
        throw Error(p7(300));
      return a6;
    }
    function Zh() {
      var a6 = Rh !== 0;
      Rh = 0;
      return a6;
    }
    function $h() {
      var a6 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      N2 === null ? L4.memoizedState = N2 = a6 : N2 = N2.next = a6;
      return N2;
    }
    function ai() {
      if (M3 === null) {
        var a6 = L4.alternate;
        a6 = a6 !== null ? a6.memoizedState : null;
      } else
        a6 = M3.next;
      var b7 = N2 === null ? L4.memoizedState : N2.next;
      if (b7 !== null)
        N2 = b7, M3 = a6;
      else {
        if (a6 === null)
          throw Error(p7(310));
        M3 = a6;
        a6 = { memoizedState: M3.memoizedState, baseState: M3.baseState, baseQueue: M3.baseQueue, queue: M3.queue, next: null };
        N2 === null ? L4.memoizedState = N2 = a6 : N2 = N2.next = a6;
      }
      return N2;
    }
    function bi(a6, b7) {
      return typeof b7 === "function" ? b7(a6) : b7;
    }
    function ci(a6) {
      var b7 = ai(), c8 = b7.queue;
      if (c8 === null)
        throw Error(p7(311));
      c8.lastRenderedReducer = a6;
      var d8 = M3, e13 = d8.baseQueue, f8 = c8.pending;
      if (f8 !== null) {
        if (e13 !== null) {
          var g7 = e13.next;
          e13.next = f8.next;
          f8.next = g7;
        }
        d8.baseQueue = e13 = f8;
        c8.pending = null;
      }
      if (e13 !== null) {
        f8 = e13.next;
        d8 = d8.baseState;
        var h6 = g7 = null, k4 = null, l8 = f8;
        do {
          var n6 = l8.lane;
          if ((Oh & n6) === n6)
            k4 !== null && (k4 = k4.next = { lane: 0, action: l8.action, hasEagerState: l8.hasEagerState, eagerState: l8.eagerState, next: null }), d8 = l8.hasEagerState ? l8.eagerState : a6(d8, l8.action);
          else {
            var u5 = {
              lane: n6,
              action: l8.action,
              hasEagerState: l8.hasEagerState,
              eagerState: l8.eagerState,
              next: null
            };
            k4 === null ? (h6 = k4 = u5, g7 = d8) : k4 = k4.next = u5;
            L4.lanes |= n6;
            Fg |= n6;
          }
          l8 = l8.next;
        } while (l8 !== null && l8 !== f8);
        k4 === null ? g7 = d8 : k4.next = h6;
        Ge(d8, b7.memoizedState) || (tg = true);
        b7.memoizedState = d8;
        b7.baseState = g7;
        b7.baseQueue = k4;
        c8.lastRenderedState = d8;
      }
      a6 = c8.interleaved;
      if (a6 !== null) {
        e13 = a6;
        do
          f8 = e13.lane, L4.lanes |= f8, Fg |= f8, e13 = e13.next;
        while (e13 !== a6);
      } else
        e13 === null && (c8.lanes = 0);
      return [b7.memoizedState, c8.dispatch];
    }
    function di(a6) {
      var b7 = ai(), c8 = b7.queue;
      if (c8 === null)
        throw Error(p7(311));
      c8.lastRenderedReducer = a6;
      var d8 = c8.dispatch, e13 = c8.pending, f8 = b7.memoizedState;
      if (e13 !== null) {
        c8.pending = null;
        var g7 = e13 = e13.next;
        do
          f8 = a6(f8, g7.action), g7 = g7.next;
        while (g7 !== e13);
        Ge(f8, b7.memoizedState) || (tg = true);
        b7.memoizedState = f8;
        b7.baseQueue === null && (b7.baseState = f8);
        c8.lastRenderedState = f8;
      }
      return [f8, d8];
    }
    function ei() {
    }
    function fi(a6, b7) {
      var c8 = L4, d8 = ai(), e13 = b7(), f8 = !Ge(d8.memoizedState, e13);
      f8 && (d8.memoizedState = e13, tg = true);
      d8 = d8.queue;
      gi(hi.bind(null, c8, d8, a6), [a6]);
      if (d8.getSnapshot !== b7 || f8 || N2 !== null && N2.memoizedState.tag & 1) {
        c8.flags |= 2048;
        ii(9, ji.bind(null, c8, d8, e13, b7), void 0, null);
        if (P3 === null)
          throw Error(p7(349));
        (Oh & 30) !== 0 || ki(c8, b7, e13);
      }
      return e13;
    }
    function ki(a6, b7, c8) {
      a6.flags |= 16384;
      a6 = { getSnapshot: b7, value: c8 };
      b7 = L4.updateQueue;
      b7 === null ? (b7 = { lastEffect: null, stores: null }, L4.updateQueue = b7, b7.stores = [a6]) : (c8 = b7.stores, c8 === null ? b7.stores = [a6] : c8.push(a6));
    }
    function ji(a6, b7, c8, d8) {
      b7.value = c8;
      b7.getSnapshot = d8;
      li(b7) && Lg(a6, 1, -1);
    }
    function hi(a6, b7, c8) {
      return c8(function() {
        li(b7) && Lg(a6, 1, -1);
      });
    }
    function li(a6) {
      var b7 = a6.getSnapshot;
      a6 = a6.value;
      try {
        var c8 = b7();
        return !Ge(a6, c8);
      } catch (d8) {
        return true;
      }
    }
    function mi(a6) {
      var b7 = $h();
      typeof a6 === "function" && (a6 = a6());
      b7.memoizedState = b7.baseState = a6;
      a6 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: bi, lastRenderedState: a6 };
      b7.queue = a6;
      a6 = a6.dispatch = ni.bind(null, L4, a6);
      return [b7.memoizedState, a6];
    }
    function ii(a6, b7, c8, d8) {
      a6 = { tag: a6, create: b7, destroy: c8, deps: d8, next: null };
      b7 = L4.updateQueue;
      b7 === null ? (b7 = { lastEffect: null, stores: null }, L4.updateQueue = b7, b7.lastEffect = a6.next = a6) : (c8 = b7.lastEffect, c8 === null ? b7.lastEffect = a6.next = a6 : (d8 = c8.next, c8.next = a6, a6.next = d8, b7.lastEffect = a6));
      return a6;
    }
    function oi() {
      return ai().memoizedState;
    }
    function pi(a6, b7, c8, d8) {
      var e13 = $h();
      L4.flags |= a6;
      e13.memoizedState = ii(1 | b7, c8, void 0, d8 === void 0 ? null : d8);
    }
    function qi(a6, b7, c8, d8) {
      var e13 = ai();
      d8 = d8 === void 0 ? null : d8;
      var f8 = void 0;
      if (M3 !== null) {
        var g7 = M3.memoizedState;
        f8 = g7.destroy;
        if (d8 !== null && Th(d8, g7.deps)) {
          e13.memoizedState = ii(b7, c8, f8, d8);
          return;
        }
      }
      L4.flags |= a6;
      e13.memoizedState = ii(1 | b7, c8, f8, d8);
    }
    function ri(a6, b7) {
      return pi(8390656, 8, a6, b7);
    }
    function gi(a6, b7) {
      return qi(2048, 8, a6, b7);
    }
    function si(a6, b7) {
      return qi(4, 2, a6, b7);
    }
    function ti(a6, b7) {
      return qi(4, 4, a6, b7);
    }
    function ui(a6, b7) {
      if (typeof b7 === "function")
        return a6 = a6(), b7(a6), function() {
          b7(null);
        };
      if (b7 !== null && b7 !== void 0)
        return a6 = a6(), b7.current = a6, function() {
          b7.current = null;
        };
    }
    function vi(a6, b7, c8) {
      c8 = c8 !== null && c8 !== void 0 ? c8.concat([a6]) : null;
      return qi(4, 4, ui.bind(null, b7, a6), c8);
    }
    function wi() {
    }
    function xi(a6, b7) {
      var c8 = ai();
      b7 = b7 === void 0 ? null : b7;
      var d8 = c8.memoizedState;
      if (d8 !== null && b7 !== null && Th(b7, d8[1]))
        return d8[0];
      c8.memoizedState = [a6, b7];
      return a6;
    }
    function yi(a6, b7) {
      var c8 = ai();
      b7 = b7 === void 0 ? null : b7;
      var d8 = c8.memoizedState;
      if (d8 !== null && b7 !== null && Th(b7, d8[1]))
        return d8[0];
      a6 = a6();
      c8.memoizedState = [a6, b7];
      return a6;
    }
    function zi(a6, b7, c8) {
      if ((Oh & 21) === 0)
        return a6.baseState && (a6.baseState = false, tg = true), a6.memoizedState = c8;
      Ge(c8, b7) || (c8 = xc(), L4.lanes |= c8, Fg |= c8, a6.baseState = true);
      return b7;
    }
    function Ai(a6, b7) {
      var c8 = C6;
      C6 = c8 !== 0 && 4 > c8 ? c8 : 4;
      a6(true);
      var d8 = Nh.transition;
      Nh.transition = {};
      try {
        a6(false), b7();
      } finally {
        C6 = c8, Nh.transition = d8;
      }
    }
    function Bi() {
      return ai().memoizedState;
    }
    function Ci(a6, b7, c8) {
      var d8 = Kg(a6);
      c8 = { lane: d8, action: c8, hasEagerState: false, eagerState: null, next: null };
      Di(a6) ? Ei(b7, c8) : (Fi(a6, b7, c8), c8 = Jg(), a6 = Lg(a6, d8, c8), a6 !== null && Gi(a6, b7, d8));
    }
    function ni(a6, b7, c8) {
      var d8 = Kg(a6), e13 = { lane: d8, action: c8, hasEagerState: false, eagerState: null, next: null };
      if (Di(a6))
        Ei(b7, e13);
      else {
        Fi(a6, b7, e13);
        var f8 = a6.alternate;
        if (a6.lanes === 0 && (f8 === null || f8.lanes === 0) && (f8 = b7.lastRenderedReducer, f8 !== null))
          try {
            var g7 = b7.lastRenderedState, h6 = f8(g7, c8);
            e13.hasEagerState = true;
            e13.eagerState = h6;
            if (Ge(h6, g7))
              return;
          } catch (k4) {
          } finally {
          }
        c8 = Jg();
        a6 = Lg(a6, d8, c8);
        a6 !== null && Gi(a6, b7, d8);
      }
    }
    function Di(a6) {
      var b7 = a6.alternate;
      return a6 === L4 || b7 !== null && b7 === L4;
    }
    function Ei(a6, b7) {
      Qh = Ph = true;
      var c8 = a6.pending;
      c8 === null ? b7.next = b7 : (b7.next = c8.next, c8.next = b7);
      a6.pending = b7;
    }
    function Fi(a6, b7, c8) {
      Bg(a6) ? (a6 = b7.interleaved, a6 === null ? (c8.next = c8, vg === null ? vg = [b7] : vg.push(b7)) : (c8.next = a6.next, a6.next = c8), b7.interleaved = c8) : (a6 = b7.pending, a6 === null ? c8.next = c8 : (c8.next = a6.next, a6.next = c8), b7.pending = c8);
    }
    function Gi(a6, b7, c8) {
      if ((c8 & 4194240) !== 0) {
        var d8 = b7.lanes;
        d8 &= a6.pendingLanes;
        c8 |= d8;
        b7.lanes = c8;
        Bc(a6, c8);
      }
    }
    var Yh = { readContext: ug, useCallback: O5, useContext: O5, useEffect: O5, useImperativeHandle: O5, useInsertionEffect: O5, useLayoutEffect: O5, useMemo: O5, useReducer: O5, useRef: O5, useState: O5, useDebugValue: O5, useDeferredValue: O5, useTransition: O5, useMutableSource: O5, useSyncExternalStore: O5, useId: O5, unstable_isNewReconciler: false };
    var Vh = { readContext: ug, useCallback: function(a6, b7) {
      $h().memoizedState = [a6, b7 === void 0 ? null : b7];
      return a6;
    }, useContext: ug, useEffect: ri, useImperativeHandle: function(a6, b7, c8) {
      c8 = c8 !== null && c8 !== void 0 ? c8.concat([a6]) : null;
      return pi(4194308, 4, ui.bind(null, b7, a6), c8);
    }, useLayoutEffect: function(a6, b7) {
      return pi(4194308, 4, a6, b7);
    }, useInsertionEffect: function(a6, b7) {
      return pi(4, 2, a6, b7);
    }, useMemo: function(a6, b7) {
      var c8 = $h();
      b7 = b7 === void 0 ? null : b7;
      a6 = a6();
      c8.memoizedState = [a6, b7];
      return a6;
    }, useReducer: function(a6, b7, c8) {
      var d8 = $h();
      b7 = c8 !== void 0 ? c8(b7) : b7;
      d8.memoizedState = d8.baseState = b7;
      a6 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a6, lastRenderedState: b7 };
      d8.queue = a6;
      a6 = a6.dispatch = Ci.bind(null, L4, a6);
      return [d8.memoizedState, a6];
    }, useRef: function(a6) {
      var b7 = $h();
      a6 = { current: a6 };
      return b7.memoizedState = a6;
    }, useState: mi, useDebugValue: wi, useDeferredValue: function(a6) {
      return $h().memoizedState = a6;
    }, useTransition: function() {
      var a6 = mi(false), b7 = a6[0];
      a6 = Ai.bind(null, a6[1]);
      $h().memoizedState = a6;
      return [b7, a6];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a6, b7, c8) {
      var d8 = L4, e13 = $h();
      if (I4) {
        if (c8 === void 0)
          throw Error(p7(407));
        c8 = c8();
      } else {
        c8 = b7();
        if (P3 === null)
          throw Error(p7(349));
        (Oh & 30) !== 0 || ki(d8, b7, c8);
      }
      e13.memoizedState = c8;
      var f8 = { value: c8, getSnapshot: b7 };
      e13.queue = f8;
      ri(hi.bind(null, d8, f8, a6), [a6]);
      d8.flags |= 2048;
      ii(9, ji.bind(null, d8, f8, c8, b7), void 0, null);
      return c8;
    }, useId: function() {
      var a6 = $h(), b7 = P3.identifierPrefix;
      if (I4) {
        var c8 = Zg;
        var d8 = Yg;
        c8 = (d8 & ~(1 << 32 - nc(d8) - 1)).toString(32) + c8;
        b7 = ":" + b7 + "R" + c8;
        c8 = Rh++;
        0 < c8 && (b7 += "H" + c8.toString(32));
        b7 += ":";
      } else
        c8 = Sh++, b7 = ":" + b7 + "r" + c8.toString(32) + ":";
      return a6.memoizedState = b7;
    }, unstable_isNewReconciler: false };
    var Wh = {
      readContext: ug,
      useCallback: xi,
      useContext: ug,
      useEffect: gi,
      useImperativeHandle: vi,
      useInsertionEffect: si,
      useLayoutEffect: ti,
      useMemo: yi,
      useReducer: ci,
      useRef: oi,
      useState: function() {
        return ci(bi);
      },
      useDebugValue: wi,
      useDeferredValue: function(a6) {
        var b7 = ai();
        return zi(b7, M3.memoizedState, a6);
      },
      useTransition: function() {
        var a6 = ci(bi)[0], b7 = ai().memoizedState;
        return [a6, b7];
      },
      useMutableSource: ei,
      useSyncExternalStore: fi,
      useId: Bi,
      unstable_isNewReconciler: false
    };
    var Xh = { readContext: ug, useCallback: xi, useContext: ug, useEffect: gi, useImperativeHandle: vi, useInsertionEffect: si, useLayoutEffect: ti, useMemo: yi, useReducer: di, useRef: oi, useState: function() {
      return di(bi);
    }, useDebugValue: wi, useDeferredValue: function(a6) {
      var b7 = ai();
      return M3 === null ? b7.memoizedState = a6 : zi(b7, M3.memoizedState, a6);
    }, useTransition: function() {
      var a6 = di(bi)[0], b7 = ai().memoizedState;
      return [a6, b7];
    }, useMutableSource: ei, useSyncExternalStore: fi, useId: Bi, unstable_isNewReconciler: false };
    function Hi(a6, b7) {
      try {
        var c8 = "", d8 = b7;
        do
          c8 += Oa(d8), d8 = d8.return;
        while (d8);
        var e13 = c8;
      } catch (f8) {
        e13 = "\nError generating stack: " + f8.message + "\n" + f8.stack;
      }
      return { value: a6, source: b7, stack: e13 };
    }
    function Ii(a6, b7) {
      try {
        console.error(b7.value);
      } catch (c8) {
        setTimeout(function() {
          throw c8;
        });
      }
    }
    var Ji = typeof WeakMap === "function" ? WeakMap : Map;
    function Ki(a6, b7, c8) {
      c8 = zg(-1, c8);
      c8.tag = 3;
      c8.payload = { element: null };
      var d8 = b7.value;
      c8.callback = function() {
        Li || (Li = true, Mi = d8);
        Ii(a6, b7);
      };
      return c8;
    }
    function Ni(a6, b7, c8) {
      c8 = zg(-1, c8);
      c8.tag = 3;
      var d8 = a6.type.getDerivedStateFromError;
      if (typeof d8 === "function") {
        var e13 = b7.value;
        c8.payload = function() {
          return d8(e13);
        };
        c8.callback = function() {
          Ii(a6, b7);
        };
      }
      var f8 = a6.stateNode;
      f8 !== null && typeof f8.componentDidCatch === "function" && (c8.callback = function() {
        Ii(a6, b7);
        typeof d8 !== "function" && (Oi === null ? Oi = /* @__PURE__ */ new Set([this]) : Oi.add(this));
        var c9 = b7.stack;
        this.componentDidCatch(b7.value, { componentStack: c9 !== null ? c9 : "" });
      });
      return c8;
    }
    function Pi(a6, b7, c8) {
      var d8 = a6.pingCache;
      if (d8 === null) {
        d8 = a6.pingCache = new Ji();
        var e13 = /* @__PURE__ */ new Set();
        d8.set(b7, e13);
      } else
        e13 = d8.get(b7), e13 === void 0 && (e13 = /* @__PURE__ */ new Set(), d8.set(b7, e13));
      e13.has(c8) || (e13.add(c8), a6 = Qi.bind(null, a6, b7, c8), b7.then(a6, a6));
    }
    function Ri(a6) {
      do {
        var b7;
        if (b7 = a6.tag === 13)
          b7 = a6.memoizedState, b7 = b7 !== null ? b7.dehydrated !== null ? true : false : true;
        if (b7)
          return a6;
        a6 = a6.return;
      } while (a6 !== null);
      return null;
    }
    function Si(a6, b7, c8, d8, e13) {
      if ((a6.mode & 1) === 0)
        return a6 === b7 ? a6.flags |= 65536 : (a6.flags |= 128, c8.flags |= 131072, c8.flags &= -52805, c8.tag === 1 && (c8.alternate === null ? c8.tag = 17 : (b7 = zg(-1, 1), b7.tag = 2, Ag(c8, b7))), c8.lanes |= 1), a6;
      a6.flags |= 65536;
      a6.lanes = e13;
      return a6;
    }
    var Ti;
    var Ui;
    var Vi;
    var Wi;
    Ti = function(a6, b7) {
      for (var c8 = b7.child; c8 !== null; ) {
        if (c8.tag === 5 || c8.tag === 6)
          a6.appendChild(c8.stateNode);
        else if (c8.tag !== 4 && c8.child !== null) {
          c8.child.return = c8;
          c8 = c8.child;
          continue;
        }
        if (c8 === b7)
          break;
        for (; c8.sibling === null; ) {
          if (c8.return === null || c8.return === b7)
            return;
          c8 = c8.return;
        }
        c8.sibling.return = c8.return;
        c8 = c8.sibling;
      }
    };
    Ui = function() {
    };
    Vi = function(a6, b7, c8, d8) {
      var e13 = a6.memoizedProps;
      if (e13 !== d8) {
        a6 = b7.stateNode;
        Eh(Bh.current);
        var f8 = null;
        switch (c8) {
          case "input":
            e13 = Xa(a6, e13);
            d8 = Xa(a6, d8);
            f8 = [];
            break;
          case "select":
            e13 = A4({}, e13, { value: void 0 });
            d8 = A4({}, d8, { value: void 0 });
            f8 = [];
            break;
          case "textarea":
            e13 = fb(a6, e13);
            d8 = fb(a6, d8);
            f8 = [];
            break;
          default:
            typeof e13.onClick !== "function" && typeof d8.onClick === "function" && (a6.onclick = Af);
        }
        tb(c8, d8);
        var g7;
        c8 = null;
        for (l8 in e13)
          if (!d8.hasOwnProperty(l8) && e13.hasOwnProperty(l8) && e13[l8] != null)
            if (l8 === "style") {
              var h6 = e13[l8];
              for (g7 in h6)
                h6.hasOwnProperty(g7) && (c8 || (c8 = {}), c8[g7] = "");
            } else
              l8 !== "dangerouslySetInnerHTML" && l8 !== "children" && l8 !== "suppressContentEditableWarning" && l8 !== "suppressHydrationWarning" && l8 !== "autoFocus" && (ea.hasOwnProperty(l8) ? f8 || (f8 = []) : (f8 = f8 || []).push(l8, null));
        for (l8 in d8) {
          var k4 = d8[l8];
          h6 = e13 != null ? e13[l8] : void 0;
          if (d8.hasOwnProperty(l8) && k4 !== h6 && (k4 != null || h6 != null))
            if (l8 === "style")
              if (h6) {
                for (g7 in h6)
                  !h6.hasOwnProperty(g7) || k4 && k4.hasOwnProperty(g7) || (c8 || (c8 = {}), c8[g7] = "");
                for (g7 in k4)
                  k4.hasOwnProperty(g7) && h6[g7] !== k4[g7] && (c8 || (c8 = {}), c8[g7] = k4[g7]);
              } else
                c8 || (f8 || (f8 = []), f8.push(l8, c8)), c8 = k4;
            else
              l8 === "dangerouslySetInnerHTML" ? (k4 = k4 ? k4.__html : void 0, h6 = h6 ? h6.__html : void 0, k4 != null && h6 !== k4 && (f8 = f8 || []).push(l8, k4)) : l8 === "children" ? typeof k4 !== "string" && typeof k4 !== "number" || (f8 = f8 || []).push(l8, "" + k4) : l8 !== "suppressContentEditableWarning" && l8 !== "suppressHydrationWarning" && (ea.hasOwnProperty(l8) ? (k4 != null && l8 === "onScroll" && D5("scroll", a6), f8 || h6 === k4 || (f8 = [])) : (f8 = f8 || []).push(l8, k4));
        }
        c8 && (f8 = f8 || []).push("style", c8);
        var l8 = f8;
        if (b7.updateQueue = l8)
          b7.flags |= 4;
      }
    };
    Wi = function(a6, b7, c8, d8) {
      c8 !== d8 && (b7.flags |= 4);
    };
    function Xi(a6, b7) {
      if (!I4)
        switch (a6.tailMode) {
          case "hidden":
            b7 = a6.tail;
            for (var c8 = null; b7 !== null; )
              b7.alternate !== null && (c8 = b7), b7 = b7.sibling;
            c8 === null ? a6.tail = null : c8.sibling = null;
            break;
          case "collapsed":
            c8 = a6.tail;
            for (var d8 = null; c8 !== null; )
              c8.alternate !== null && (d8 = c8), c8 = c8.sibling;
            d8 === null ? b7 || a6.tail === null ? a6.tail = null : a6.tail.sibling = null : d8.sibling = null;
        }
    }
    function Q(a6) {
      var b7 = a6.alternate !== null && a6.alternate.child === a6.child, c8 = 0, d8 = 0;
      if (b7)
        for (var e13 = a6.child; e13 !== null; )
          c8 |= e13.lanes | e13.childLanes, d8 |= e13.subtreeFlags & 14680064, d8 |= e13.flags & 14680064, e13.return = a6, e13 = e13.sibling;
      else
        for (e13 = a6.child; e13 !== null; )
          c8 |= e13.lanes | e13.childLanes, d8 |= e13.subtreeFlags, d8 |= e13.flags, e13.return = a6, e13 = e13.sibling;
      a6.subtreeFlags |= d8;
      a6.childLanes = c8;
      return b7;
    }
    function Yi(a6, b7, c8) {
      var d8 = b7.pendingProps;
      ch(b7);
      switch (b7.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return Q(b7), null;
        case 1:
          return Yf(b7.type) && Zf(), Q(b7), null;
        case 3:
          d8 = b7.stateNode;
          Gh();
          E7(Vf);
          E7(H5);
          Lh();
          d8.pendingContext && (d8.context = d8.pendingContext, d8.pendingContext = null);
          if (a6 === null || a6.child === null)
            mh(b7) ? b7.flags |= 4 : a6 === null || a6.memoizedState.isDehydrated && (b7.flags & 256) === 0 || (b7.flags |= 1024, fh !== null && (Zi(fh), fh = null));
          Ui(a6, b7);
          Q(b7);
          return null;
        case 5:
          Ih(b7);
          var e13 = Eh(Dh.current);
          c8 = b7.type;
          if (a6 !== null && b7.stateNode != null)
            Vi(a6, b7, c8, d8, e13), a6.ref !== b7.ref && (b7.flags |= 512, b7.flags |= 2097152);
          else {
            if (!d8) {
              if (b7.stateNode === null)
                throw Error(p7(166));
              Q(b7);
              return null;
            }
            a6 = Eh(Bh.current);
            if (mh(b7)) {
              d8 = b7.stateNode;
              c8 = b7.type;
              var f8 = b7.memoizedProps;
              d8[Nf] = b7;
              d8[Of] = f8;
              a6 = (b7.mode & 1) !== 0;
              switch (c8) {
                case "dialog":
                  D5("cancel", d8);
                  D5("close", d8);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D5("load", d8);
                  break;
                case "video":
                case "audio":
                  for (e13 = 0; e13 < kf.length; e13++)
                    D5(kf[e13], d8);
                  break;
                case "source":
                  D5("error", d8);
                  break;
                case "img":
                case "image":
                case "link":
                  D5("error", d8);
                  D5("load", d8);
                  break;
                case "details":
                  D5("toggle", d8);
                  break;
                case "input":
                  Ya(d8, f8);
                  D5("invalid", d8);
                  break;
                case "select":
                  d8._wrapperState = { wasMultiple: !!f8.multiple };
                  D5("invalid", d8);
                  break;
                case "textarea":
                  gb(d8, f8), D5("invalid", d8);
              }
              tb(c8, f8);
              e13 = null;
              for (var g7 in f8)
                if (f8.hasOwnProperty(g7)) {
                  var h6 = f8[g7];
                  g7 === "children" ? typeof h6 === "string" ? d8.textContent !== h6 && (f8.suppressHydrationWarning !== true && zf(d8.textContent, h6, a6), e13 = ["children", h6]) : typeof h6 === "number" && d8.textContent !== "" + h6 && (f8.suppressHydrationWarning !== true && zf(d8.textContent, h6, a6), e13 = ["children", "" + h6]) : ea.hasOwnProperty(g7) && h6 != null && g7 === "onScroll" && D5("scroll", d8);
                }
              switch (c8) {
                case "input":
                  Ua(d8);
                  cb(d8, f8, true);
                  break;
                case "textarea":
                  Ua(d8);
                  ib(d8);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  typeof f8.onClick === "function" && (d8.onclick = Af);
              }
              d8 = e13;
              b7.updateQueue = d8;
              d8 !== null && (b7.flags |= 4);
            } else {
              g7 = e13.nodeType === 9 ? e13 : e13.ownerDocument;
              a6 === "http://www.w3.org/1999/xhtml" && (a6 = jb(c8));
              a6 === "http://www.w3.org/1999/xhtml" ? c8 === "script" ? (a6 = g7.createElement("div"), a6.innerHTML = "<script><\/script>", a6 = a6.removeChild(a6.firstChild)) : typeof d8.is === "string" ? a6 = g7.createElement(c8, { is: d8.is }) : (a6 = g7.createElement(c8), c8 === "select" && (g7 = a6, d8.multiple ? g7.multiple = true : d8.size && (g7.size = d8.size))) : a6 = g7.createElementNS(a6, c8);
              a6[Nf] = b7;
              a6[Of] = d8;
              Ti(a6, b7, false, false);
              b7.stateNode = a6;
              a: {
                g7 = ub(c8, d8);
                switch (c8) {
                  case "dialog":
                    D5("cancel", a6);
                    D5("close", a6);
                    e13 = d8;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D5("load", a6);
                    e13 = d8;
                    break;
                  case "video":
                  case "audio":
                    for (e13 = 0; e13 < kf.length; e13++)
                      D5(kf[e13], a6);
                    e13 = d8;
                    break;
                  case "source":
                    D5("error", a6);
                    e13 = d8;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D5("error", a6);
                    D5("load", a6);
                    e13 = d8;
                    break;
                  case "details":
                    D5("toggle", a6);
                    e13 = d8;
                    break;
                  case "input":
                    Ya(a6, d8);
                    e13 = Xa(a6, d8);
                    D5("invalid", a6);
                    break;
                  case "option":
                    e13 = d8;
                    break;
                  case "select":
                    a6._wrapperState = { wasMultiple: !!d8.multiple };
                    e13 = A4({}, d8, { value: void 0 });
                    D5("invalid", a6);
                    break;
                  case "textarea":
                    gb(a6, d8);
                    e13 = fb(a6, d8);
                    D5("invalid", a6);
                    break;
                  default:
                    e13 = d8;
                }
                tb(c8, e13);
                h6 = e13;
                for (f8 in h6)
                  if (h6.hasOwnProperty(f8)) {
                    var k4 = h6[f8];
                    f8 === "style" ? rb(a6, k4) : f8 === "dangerouslySetInnerHTML" ? (k4 = k4 ? k4.__html : void 0, k4 != null && mb(a6, k4)) : f8 === "children" ? typeof k4 === "string" ? (c8 !== "textarea" || k4 !== "") && nb(a6, k4) : typeof k4 === "number" && nb(a6, "" + k4) : f8 !== "suppressContentEditableWarning" && f8 !== "suppressHydrationWarning" && f8 !== "autoFocus" && (ea.hasOwnProperty(f8) ? k4 != null && f8 === "onScroll" && D5("scroll", a6) : k4 != null && sa(a6, f8, k4, g7));
                  }
                switch (c8) {
                  case "input":
                    Ua(a6);
                    cb(a6, d8, false);
                    break;
                  case "textarea":
                    Ua(a6);
                    ib(a6);
                    break;
                  case "option":
                    d8.value != null && a6.setAttribute("value", "" + Ra(d8.value));
                    break;
                  case "select":
                    a6.multiple = !!d8.multiple;
                    f8 = d8.value;
                    f8 != null ? eb(a6, !!d8.multiple, f8, false) : d8.defaultValue != null && eb(a6, !!d8.multiple, d8.defaultValue, true);
                    break;
                  default:
                    typeof e13.onClick === "function" && (a6.onclick = Af);
                }
                switch (c8) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d8 = !!d8.autoFocus;
                    break a;
                  case "img":
                    d8 = true;
                    break a;
                  default:
                    d8 = false;
                }
              }
              d8 && (b7.flags |= 4);
            }
            b7.ref !== null && (b7.flags |= 512, b7.flags |= 2097152);
          }
          Q(b7);
          return null;
        case 6:
          if (a6 && b7.stateNode != null)
            Wi(a6, b7, a6.memoizedProps, d8);
          else {
            if (typeof d8 !== "string" && b7.stateNode === null)
              throw Error(p7(166));
            c8 = Eh(Dh.current);
            Eh(Bh.current);
            if (mh(b7)) {
              d8 = b7.stateNode;
              c8 = b7.memoizedProps;
              d8[Nf] = b7;
              if (f8 = d8.nodeValue !== c8) {
                if (a6 = dh, a6 !== null)
                  switch (a6.tag) {
                    case 3:
                      zf(d8.nodeValue, c8, (a6.mode & 1) !== 0);
                      break;
                    case 5:
                      a6.memoizedProps.suppressHydrationWarning !== true && zf(d8.nodeValue, c8, (a6.mode & 1) !== 0);
                  }
              }
              f8 && (b7.flags |= 4);
            } else
              d8 = (c8.nodeType === 9 ? c8 : c8.ownerDocument).createTextNode(d8), d8[Nf] = b7, b7.stateNode = d8;
          }
          Q(b7);
          return null;
        case 13:
          E7(K3);
          d8 = b7.memoizedState;
          if (I4 && eh !== null && (b7.mode & 1) !== 0 && (b7.flags & 128) === 0) {
            for (d8 = eh; d8; )
              d8 = Kf(d8.nextSibling);
            nh();
            b7.flags |= 98560;
            return b7;
          }
          if (d8 !== null && d8.dehydrated !== null) {
            d8 = mh(b7);
            if (a6 === null) {
              if (!d8)
                throw Error(p7(318));
              d8 = b7.memoizedState;
              d8 = d8 !== null ? d8.dehydrated : null;
              if (!d8)
                throw Error(p7(317));
              d8[Nf] = b7;
            } else
              nh(), (b7.flags & 128) === 0 && (b7.memoizedState = null), b7.flags |= 4;
            Q(b7);
            return null;
          }
          fh !== null && (Zi(fh), fh = null);
          if ((b7.flags & 128) !== 0)
            return b7.lanes = c8, b7;
          d8 = d8 !== null;
          c8 = false;
          a6 === null ? mh(b7) : c8 = a6.memoizedState !== null;
          d8 !== c8 && d8 && (b7.child.flags |= 8192, (b7.mode & 1) !== 0 && (a6 === null || (K3.current & 1) !== 0 ? R7 === 0 && (R7 = 3) : $i()));
          b7.updateQueue !== null && (b7.flags |= 4);
          Q(b7);
          return null;
        case 4:
          return Gh(), Ui(a6, b7), a6 === null && rf(b7.stateNode.containerInfo), Q(b7), null;
        case 10:
          return qg(b7.type._context), Q(b7), null;
        case 17:
          return Yf(b7.type) && Zf(), Q(b7), null;
        case 19:
          E7(K3);
          f8 = b7.memoizedState;
          if (f8 === null)
            return Q(b7), null;
          d8 = (b7.flags & 128) !== 0;
          g7 = f8.rendering;
          if (g7 === null)
            if (d8)
              Xi(f8, false);
            else {
              if (R7 !== 0 || a6 !== null && (a6.flags & 128) !== 0)
                for (a6 = b7.child; a6 !== null; ) {
                  g7 = Jh(a6);
                  if (g7 !== null) {
                    b7.flags |= 128;
                    Xi(f8, false);
                    d8 = g7.updateQueue;
                    d8 !== null && (b7.updateQueue = d8, b7.flags |= 4);
                    b7.subtreeFlags = 0;
                    d8 = c8;
                    for (c8 = b7.child; c8 !== null; )
                      f8 = c8, a6 = d8, f8.flags &= 14680066, g7 = f8.alternate, g7 === null ? (f8.childLanes = 0, f8.lanes = a6, f8.child = null, f8.subtreeFlags = 0, f8.memoizedProps = null, f8.memoizedState = null, f8.updateQueue = null, f8.dependencies = null, f8.stateNode = null) : (f8.childLanes = g7.childLanes, f8.lanes = g7.lanes, f8.child = g7.child, f8.subtreeFlags = 0, f8.deletions = null, f8.memoizedProps = g7.memoizedProps, f8.memoizedState = g7.memoizedState, f8.updateQueue = g7.updateQueue, f8.type = g7.type, a6 = g7.dependencies, f8.dependencies = a6 === null ? null : { lanes: a6.lanes, firstContext: a6.firstContext }), c8 = c8.sibling;
                    G3(K3, K3.current & 1 | 2);
                    return b7.child;
                  }
                  a6 = a6.sibling;
                }
              f8.tail !== null && B4() > aj && (b7.flags |= 128, d8 = true, Xi(f8, false), b7.lanes = 4194304);
            }
          else {
            if (!d8)
              if (a6 = Jh(g7), a6 !== null) {
                if (b7.flags |= 128, d8 = true, c8 = a6.updateQueue, c8 !== null && (b7.updateQueue = c8, b7.flags |= 4), Xi(f8, true), f8.tail === null && f8.tailMode === "hidden" && !g7.alternate && !I4)
                  return Q(b7), null;
              } else
                2 * B4() - f8.renderingStartTime > aj && c8 !== 1073741824 && (b7.flags |= 128, d8 = true, Xi(f8, false), b7.lanes = 4194304);
            f8.isBackwards ? (g7.sibling = b7.child, b7.child = g7) : (c8 = f8.last, c8 !== null ? c8.sibling = g7 : b7.child = g7, f8.last = g7);
          }
          if (f8.tail !== null)
            return b7 = f8.tail, f8.rendering = b7, f8.tail = b7.sibling, f8.renderingStartTime = B4(), b7.sibling = null, c8 = K3.current, G3(K3, d8 ? c8 & 1 | 2 : c8 & 1), b7;
          Q(b7);
          return null;
        case 22:
        case 23:
          return bj(), d8 = b7.memoizedState !== null, a6 !== null && a6.memoizedState !== null !== d8 && (b7.flags |= 8192), d8 && (b7.mode & 1) !== 0 ? (cj & 1073741824) !== 0 && (Q(b7), b7.subtreeFlags & 6 && (b7.flags |= 8192)) : Q(b7), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p7(156, b7.tag));
    }
    var dj = ta.ReactCurrentOwner;
    var tg = false;
    function ej(a6, b7, c8, d8) {
      b7.child = a6 === null ? zh(b7, null, c8, d8) : yh(b7, a6.child, c8, d8);
    }
    function fj(a6, b7, c8, d8, e13) {
      c8 = c8.render;
      var f8 = b7.ref;
      sg(b7, e13);
      d8 = Uh(a6, b7, c8, d8, f8, e13);
      c8 = Zh();
      if (a6 !== null && !tg)
        return b7.updateQueue = a6.updateQueue, b7.flags &= -2053, a6.lanes &= ~e13, gj(a6, b7, e13);
      I4 && c8 && bh(b7);
      b7.flags |= 1;
      ej(a6, b7, d8, e13);
      return b7.child;
    }
    function hj(a6, b7, c8, d8, e13) {
      if (a6 === null) {
        var f8 = c8.type;
        if (typeof f8 === "function" && !ij(f8) && f8.defaultProps === void 0 && c8.compare === null && c8.defaultProps === void 0)
          return b7.tag = 15, b7.type = f8, jj(a6, b7, f8, d8, e13);
        a6 = vh(c8.type, null, d8, b7, b7.mode, e13);
        a6.ref = b7.ref;
        a6.return = b7;
        return b7.child = a6;
      }
      f8 = a6.child;
      if ((a6.lanes & e13) === 0) {
        var g7 = f8.memoizedProps;
        c8 = c8.compare;
        c8 = c8 !== null ? c8 : He;
        if (c8(g7, d8) && a6.ref === b7.ref)
          return gj(a6, b7, e13);
      }
      b7.flags |= 1;
      a6 = th(f8, d8);
      a6.ref = b7.ref;
      a6.return = b7;
      return b7.child = a6;
    }
    function jj(a6, b7, c8, d8, e13) {
      if (a6 !== null) {
        var f8 = a6.memoizedProps;
        if (He(f8, d8) && a6.ref === b7.ref)
          if (tg = false, b7.pendingProps = d8 = f8, (a6.lanes & e13) !== 0)
            (a6.flags & 131072) !== 0 && (tg = true);
          else
            return b7.lanes = a6.lanes, gj(a6, b7, e13);
      }
      return kj(a6, b7, c8, d8, e13);
    }
    function lj(a6, b7, c8) {
      var d8 = b7.pendingProps, e13 = d8.children, f8 = a6 !== null ? a6.memoizedState : null;
      if (d8.mode === "hidden")
        if ((b7.mode & 1) === 0)
          b7.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G3(mj, cj), cj |= c8;
        else if ((c8 & 1073741824) !== 0)
          b7.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, d8 = f8 !== null ? f8.baseLanes : c8, G3(mj, cj), cj |= d8;
        else
          return a6 = f8 !== null ? f8.baseLanes | c8 : c8, b7.lanes = b7.childLanes = 1073741824, b7.memoizedState = { baseLanes: a6, cachePool: null, transitions: null }, b7.updateQueue = null, G3(mj, cj), cj |= a6, null;
      else
        f8 !== null ? (d8 = f8.baseLanes | c8, b7.memoizedState = null) : d8 = c8, G3(mj, cj), cj |= d8;
      ej(a6, b7, e13, c8);
      return b7.child;
    }
    function nj(a6, b7) {
      var c8 = b7.ref;
      if (a6 === null && c8 !== null || a6 !== null && a6.ref !== c8)
        b7.flags |= 512, b7.flags |= 2097152;
    }
    function kj(a6, b7, c8, d8, e13) {
      var f8 = Yf(c8) ? Wf : H5.current;
      f8 = Xf(b7, f8);
      sg(b7, e13);
      c8 = Uh(a6, b7, c8, d8, f8, e13);
      d8 = Zh();
      if (a6 !== null && !tg)
        return b7.updateQueue = a6.updateQueue, b7.flags &= -2053, a6.lanes &= ~e13, gj(a6, b7, e13);
      I4 && d8 && bh(b7);
      b7.flags |= 1;
      ej(a6, b7, c8, e13);
      return b7.child;
    }
    function oj(a6, b7, c8, d8, e13) {
      if (Yf(c8)) {
        var f8 = true;
        bg(b7);
      } else
        f8 = false;
      sg(b7, e13);
      if (b7.stateNode === null)
        a6 !== null && (a6.alternate = null, b7.alternate = null, b7.flags |= 2), Og(b7, c8, d8), Qg(b7, c8, d8, e13), d8 = true;
      else if (a6 === null) {
        var g7 = b7.stateNode, h6 = b7.memoizedProps;
        g7.props = h6;
        var k4 = g7.context, l8 = c8.contextType;
        typeof l8 === "object" && l8 !== null ? l8 = ug(l8) : (l8 = Yf(c8) ? Wf : H5.current, l8 = Xf(b7, l8));
        var n6 = c8.getDerivedStateFromProps, u5 = typeof n6 === "function" || typeof g7.getSnapshotBeforeUpdate === "function";
        u5 || typeof g7.UNSAFE_componentWillReceiveProps !== "function" && typeof g7.componentWillReceiveProps !== "function" || (h6 !== d8 || k4 !== l8) && Pg(b7, g7, d8, l8);
        wg = false;
        var q3 = b7.memoizedState;
        g7.state = q3;
        Eg(b7, d8, g7, e13);
        k4 = b7.memoizedState;
        h6 !== d8 || q3 !== k4 || Vf.current || wg ? (typeof n6 === "function" && (Ig(b7, c8, n6, d8), k4 = b7.memoizedState), (h6 = wg || Ng(b7, c8, h6, d8, q3, k4, l8)) ? (u5 || typeof g7.UNSAFE_componentWillMount !== "function" && typeof g7.componentWillMount !== "function" || (typeof g7.componentWillMount === "function" && g7.componentWillMount(), typeof g7.UNSAFE_componentWillMount === "function" && g7.UNSAFE_componentWillMount()), typeof g7.componentDidMount === "function" && (b7.flags |= 4194308)) : (typeof g7.componentDidMount === "function" && (b7.flags |= 4194308), b7.memoizedProps = d8, b7.memoizedState = k4), g7.props = d8, g7.state = k4, g7.context = l8, d8 = h6) : (typeof g7.componentDidMount === "function" && (b7.flags |= 4194308), d8 = false);
      } else {
        g7 = b7.stateNode;
        yg(a6, b7);
        h6 = b7.memoizedProps;
        l8 = b7.type === b7.elementType ? h6 : kg(b7.type, h6);
        g7.props = l8;
        u5 = b7.pendingProps;
        q3 = g7.context;
        k4 = c8.contextType;
        typeof k4 === "object" && k4 !== null ? k4 = ug(k4) : (k4 = Yf(c8) ? Wf : H5.current, k4 = Xf(b7, k4));
        var y4 = c8.getDerivedStateFromProps;
        (n6 = typeof y4 === "function" || typeof g7.getSnapshotBeforeUpdate === "function") || typeof g7.UNSAFE_componentWillReceiveProps !== "function" && typeof g7.componentWillReceiveProps !== "function" || (h6 !== u5 || q3 !== k4) && Pg(b7, g7, d8, k4);
        wg = false;
        q3 = b7.memoizedState;
        g7.state = q3;
        Eg(b7, d8, g7, e13);
        var m8 = b7.memoizedState;
        h6 !== u5 || q3 !== m8 || Vf.current || wg ? (typeof y4 === "function" && (Ig(b7, c8, y4, d8), m8 = b7.memoizedState), (l8 = wg || Ng(b7, c8, l8, d8, q3, m8, k4) || false) ? (n6 || typeof g7.UNSAFE_componentWillUpdate !== "function" && typeof g7.componentWillUpdate !== "function" || (typeof g7.componentWillUpdate === "function" && g7.componentWillUpdate(d8, m8, k4), typeof g7.UNSAFE_componentWillUpdate === "function" && g7.UNSAFE_componentWillUpdate(d8, m8, k4)), typeof g7.componentDidUpdate === "function" && (b7.flags |= 4), typeof g7.getSnapshotBeforeUpdate === "function" && (b7.flags |= 1024)) : (typeof g7.componentDidUpdate !== "function" || h6 === a6.memoizedProps && q3 === a6.memoizedState || (b7.flags |= 4), typeof g7.getSnapshotBeforeUpdate !== "function" || h6 === a6.memoizedProps && q3 === a6.memoizedState || (b7.flags |= 1024), b7.memoizedProps = d8, b7.memoizedState = m8), g7.props = d8, g7.state = m8, g7.context = k4, d8 = l8) : (typeof g7.componentDidUpdate !== "function" || h6 === a6.memoizedProps && q3 === a6.memoizedState || (b7.flags |= 4), typeof g7.getSnapshotBeforeUpdate !== "function" || h6 === a6.memoizedProps && q3 === a6.memoizedState || (b7.flags |= 1024), d8 = false);
      }
      return pj(a6, b7, c8, d8, f8, e13);
    }
    function pj(a6, b7, c8, d8, e13, f8) {
      nj(a6, b7);
      var g7 = (b7.flags & 128) !== 0;
      if (!d8 && !g7)
        return e13 && cg(b7, c8, false), gj(a6, b7, f8);
      d8 = b7.stateNode;
      dj.current = b7;
      var h6 = g7 && typeof c8.getDerivedStateFromError !== "function" ? null : d8.render();
      b7.flags |= 1;
      a6 !== null && g7 ? (b7.child = yh(b7, a6.child, null, f8), b7.child = yh(b7, null, h6, f8)) : ej(a6, b7, h6, f8);
      b7.memoizedState = d8.state;
      e13 && cg(b7, c8, true);
      return b7.child;
    }
    function qj(a6) {
      var b7 = a6.stateNode;
      b7.pendingContext ? $f(a6, b7.pendingContext, b7.pendingContext !== b7.context) : b7.context && $f(a6, b7.context, false);
      Fh(a6, b7.containerInfo);
    }
    function rj(a6, b7, c8, d8, e13) {
      nh();
      oh(e13);
      b7.flags |= 256;
      ej(a6, b7, c8, d8);
      return b7.child;
    }
    var sj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function tj(a6) {
      return { baseLanes: a6, cachePool: null, transitions: null };
    }
    function uj(a6, b7) {
      return { baseLanes: a6.baseLanes | b7, cachePool: null, transitions: a6.transitions };
    }
    function vj(a6, b7, c8) {
      var d8 = b7.pendingProps, e13 = K3.current, f8 = false, g7 = (b7.flags & 128) !== 0, h6;
      (h6 = g7) || (h6 = a6 !== null && a6.memoizedState === null ? false : (e13 & 2) !== 0);
      if (h6)
        f8 = true, b7.flags &= -129;
      else if (a6 === null || a6.memoizedState !== null)
        e13 |= 1;
      G3(K3, e13 & 1);
      if (a6 === null) {
        kh(b7);
        a6 = b7.memoizedState;
        if (a6 !== null && (a6 = a6.dehydrated, a6 !== null))
          return (b7.mode & 1) === 0 ? b7.lanes = 1 : a6.data === "$!" ? b7.lanes = 8 : b7.lanes = 1073741824, null;
        e13 = d8.children;
        a6 = d8.fallback;
        return f8 ? (d8 = b7.mode, f8 = b7.child, e13 = { mode: "hidden", children: e13 }, (d8 & 1) === 0 && f8 !== null ? (f8.childLanes = 0, f8.pendingProps = e13) : f8 = wj(e13, d8, 0, null), a6 = xh(a6, d8, c8, null), f8.return = b7, a6.return = b7, f8.sibling = a6, b7.child = f8, b7.child.memoizedState = tj(c8), b7.memoizedState = sj, a6) : xj(b7, e13);
      }
      e13 = a6.memoizedState;
      if (e13 !== null) {
        h6 = e13.dehydrated;
        if (h6 !== null) {
          if (g7) {
            if (b7.flags & 256)
              return b7.flags &= -257, yj(a6, b7, c8, Error(p7(422)));
            if (b7.memoizedState !== null)
              return b7.child = a6.child, b7.flags |= 128, null;
            f8 = d8.fallback;
            e13 = b7.mode;
            d8 = wj({ mode: "visible", children: d8.children }, e13, 0, null);
            f8 = xh(f8, e13, c8, null);
            f8.flags |= 2;
            d8.return = b7;
            f8.return = b7;
            d8.sibling = f8;
            b7.child = d8;
            (b7.mode & 1) !== 0 && yh(b7, a6.child, null, c8);
            b7.child.memoizedState = tj(c8);
            b7.memoizedState = sj;
            return f8;
          }
          if ((b7.mode & 1) === 0)
            b7 = yj(a6, b7, c8, null);
          else if (h6.data === "$!")
            b7 = yj(a6, b7, c8, Error(p7(419)));
          else if (d8 = (c8 & a6.childLanes) !== 0, tg || d8) {
            d8 = P3;
            if (d8 !== null) {
              switch (c8 & -c8) {
                case 4:
                  f8 = 2;
                  break;
                case 16:
                  f8 = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  f8 = 32;
                  break;
                case 536870912:
                  f8 = 268435456;
                  break;
                default:
                  f8 = 0;
              }
              d8 = (f8 & (d8.suspendedLanes | c8)) !== 0 ? 0 : f8;
              d8 !== 0 && d8 !== e13.retryLane && (e13.retryLane = d8, Lg(a6, d8, -1));
            }
            $i();
            b7 = yj(a6, b7, c8, Error(p7(421)));
          } else
            h6.data === "$?" ? (b7.flags |= 128, b7.child = a6.child, b7 = zj.bind(null, a6), h6._reactRetry = b7, b7 = null) : (c8 = e13.treeContext, eh = Kf(h6.nextSibling), dh = b7, I4 = true, fh = null, c8 !== null && (Vg[Wg++] = Yg, Vg[Wg++] = Zg, Vg[Wg++] = Xg, Yg = c8.id, Zg = c8.overflow, Xg = b7), b7 = xj(b7, b7.pendingProps.children), b7.flags |= 4096);
          return b7;
        }
        if (f8)
          return d8 = Aj(a6, b7, d8.children, d8.fallback, c8), f8 = b7.child, e13 = a6.child.memoizedState, f8.memoizedState = e13 === null ? tj(c8) : uj(e13, c8), f8.childLanes = a6.childLanes & ~c8, b7.memoizedState = sj, d8;
        c8 = Bj(a6, b7, d8.children, c8);
        b7.memoizedState = null;
        return c8;
      }
      if (f8)
        return d8 = Aj(a6, b7, d8.children, d8.fallback, c8), f8 = b7.child, e13 = a6.child.memoizedState, f8.memoizedState = e13 === null ? tj(c8) : uj(e13, c8), f8.childLanes = a6.childLanes & ~c8, b7.memoizedState = sj, d8;
      c8 = Bj(a6, b7, d8.children, c8);
      b7.memoizedState = null;
      return c8;
    }
    function xj(a6, b7) {
      b7 = wj({ mode: "visible", children: b7 }, a6.mode, 0, null);
      b7.return = a6;
      return a6.child = b7;
    }
    function Bj(a6, b7, c8, d8) {
      var e13 = a6.child;
      a6 = e13.sibling;
      c8 = th(e13, { mode: "visible", children: c8 });
      (b7.mode & 1) === 0 && (c8.lanes = d8);
      c8.return = b7;
      c8.sibling = null;
      a6 !== null && (d8 = b7.deletions, d8 === null ? (b7.deletions = [a6], b7.flags |= 16) : d8.push(a6));
      return b7.child = c8;
    }
    function Aj(a6, b7, c8, d8, e13) {
      var f8 = b7.mode;
      a6 = a6.child;
      var g7 = a6.sibling, h6 = { mode: "hidden", children: c8 };
      (f8 & 1) === 0 && b7.child !== a6 ? (c8 = b7.child, c8.childLanes = 0, c8.pendingProps = h6, b7.deletions = null) : (c8 = th(a6, h6), c8.subtreeFlags = a6.subtreeFlags & 14680064);
      g7 !== null ? d8 = th(g7, d8) : (d8 = xh(d8, f8, e13, null), d8.flags |= 2);
      d8.return = b7;
      c8.return = b7;
      c8.sibling = d8;
      b7.child = c8;
      return d8;
    }
    function yj(a6, b7, c8, d8) {
      d8 !== null && oh(d8);
      yh(b7, a6.child, null, c8);
      a6 = xj(b7, b7.pendingProps.children);
      a6.flags |= 2;
      b7.memoizedState = null;
      return a6;
    }
    function Cj(a6, b7, c8) {
      a6.lanes |= b7;
      var d8 = a6.alternate;
      d8 !== null && (d8.lanes |= b7);
      rg(a6.return, b7, c8);
    }
    function Dj(a6, b7, c8, d8, e13) {
      var f8 = a6.memoizedState;
      f8 === null ? a6.memoizedState = { isBackwards: b7, rendering: null, renderingStartTime: 0, last: d8, tail: c8, tailMode: e13 } : (f8.isBackwards = b7, f8.rendering = null, f8.renderingStartTime = 0, f8.last = d8, f8.tail = c8, f8.tailMode = e13);
    }
    function Ej(a6, b7, c8) {
      var d8 = b7.pendingProps, e13 = d8.revealOrder, f8 = d8.tail;
      ej(a6, b7, d8.children, c8);
      d8 = K3.current;
      if ((d8 & 2) !== 0)
        d8 = d8 & 1 | 2, b7.flags |= 128;
      else {
        if (a6 !== null && (a6.flags & 128) !== 0)
          a:
            for (a6 = b7.child; a6 !== null; ) {
              if (a6.tag === 13)
                a6.memoizedState !== null && Cj(a6, c8, b7);
              else if (a6.tag === 19)
                Cj(a6, c8, b7);
              else if (a6.child !== null) {
                a6.child.return = a6;
                a6 = a6.child;
                continue;
              }
              if (a6 === b7)
                break a;
              for (; a6.sibling === null; ) {
                if (a6.return === null || a6.return === b7)
                  break a;
                a6 = a6.return;
              }
              a6.sibling.return = a6.return;
              a6 = a6.sibling;
            }
        d8 &= 1;
      }
      G3(K3, d8);
      if ((b7.mode & 1) === 0)
        b7.memoizedState = null;
      else
        switch (e13) {
          case "forwards":
            c8 = b7.child;
            for (e13 = null; c8 !== null; )
              a6 = c8.alternate, a6 !== null && Jh(a6) === null && (e13 = c8), c8 = c8.sibling;
            c8 = e13;
            c8 === null ? (e13 = b7.child, b7.child = null) : (e13 = c8.sibling, c8.sibling = null);
            Dj(b7, false, e13, c8, f8);
            break;
          case "backwards":
            c8 = null;
            e13 = b7.child;
            for (b7.child = null; e13 !== null; ) {
              a6 = e13.alternate;
              if (a6 !== null && Jh(a6) === null) {
                b7.child = e13;
                break;
              }
              a6 = e13.sibling;
              e13.sibling = c8;
              c8 = e13;
              e13 = a6;
            }
            Dj(b7, true, c8, null, f8);
            break;
          case "together":
            Dj(b7, false, null, null, void 0);
            break;
          default:
            b7.memoizedState = null;
        }
      return b7.child;
    }
    function gj(a6, b7, c8) {
      a6 !== null && (b7.dependencies = a6.dependencies);
      Fg |= b7.lanes;
      if ((c8 & b7.childLanes) === 0)
        return null;
      if (a6 !== null && b7.child !== a6.child)
        throw Error(p7(153));
      if (b7.child !== null) {
        a6 = b7.child;
        c8 = th(a6, a6.pendingProps);
        b7.child = c8;
        for (c8.return = b7; a6.sibling !== null; )
          a6 = a6.sibling, c8 = c8.sibling = th(a6, a6.pendingProps), c8.return = b7;
        c8.sibling = null;
      }
      return b7.child;
    }
    function Fj(a6, b7, c8) {
      switch (b7.tag) {
        case 3:
          qj(b7);
          nh();
          break;
        case 5:
          Hh(b7);
          break;
        case 1:
          Yf(b7.type) && bg(b7);
          break;
        case 4:
          Fh(b7, b7.stateNode.containerInfo);
          break;
        case 10:
          var d8 = b7.type._context, e13 = b7.memoizedProps.value;
          G3(lg, d8._currentValue);
          d8._currentValue = e13;
          break;
        case 13:
          d8 = b7.memoizedState;
          if (d8 !== null) {
            if (d8.dehydrated !== null)
              return G3(K3, K3.current & 1), b7.flags |= 128, null;
            if ((c8 & b7.child.childLanes) !== 0)
              return vj(a6, b7, c8);
            G3(K3, K3.current & 1);
            a6 = gj(a6, b7, c8);
            return a6 !== null ? a6.sibling : null;
          }
          G3(K3, K3.current & 1);
          break;
        case 19:
          d8 = (c8 & b7.childLanes) !== 0;
          if ((a6.flags & 128) !== 0) {
            if (d8)
              return Ej(a6, b7, c8);
            b7.flags |= 128;
          }
          e13 = b7.memoizedState;
          e13 !== null && (e13.rendering = null, e13.tail = null, e13.lastEffect = null);
          G3(K3, K3.current);
          if (d8)
            break;
          else
            return null;
        case 22:
        case 23:
          return b7.lanes = 0, lj(a6, b7, c8);
      }
      return gj(a6, b7, c8);
    }
    function Gj(a6, b7) {
      ch(b7);
      switch (b7.tag) {
        case 1:
          return Yf(b7.type) && Zf(), a6 = b7.flags, a6 & 65536 ? (b7.flags = a6 & -65537 | 128, b7) : null;
        case 3:
          return Gh(), E7(Vf), E7(H5), Lh(), a6 = b7.flags, (a6 & 65536) !== 0 && (a6 & 128) === 0 ? (b7.flags = a6 & -65537 | 128, b7) : null;
        case 5:
          return Ih(b7), null;
        case 13:
          E7(K3);
          a6 = b7.memoizedState;
          if (a6 !== null && a6.dehydrated !== null) {
            if (b7.alternate === null)
              throw Error(p7(340));
            nh();
          }
          a6 = b7.flags;
          return a6 & 65536 ? (b7.flags = a6 & -65537 | 128, b7) : null;
        case 19:
          return E7(K3), null;
        case 4:
          return Gh(), null;
        case 10:
          return qg(b7.type._context), null;
        case 22:
        case 23:
          return bj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Hj = false;
    var S3 = false;
    var Ij = typeof WeakSet === "function" ? WeakSet : Set;
    var T5 = null;
    function Jj(a6, b7) {
      var c8 = a6.ref;
      if (c8 !== null)
        if (typeof c8 === "function")
          try {
            c8(null);
          } catch (d8) {
            U3(a6, b7, d8);
          }
        else
          c8.current = null;
    }
    function Kj(a6, b7, c8) {
      try {
        c8();
      } catch (d8) {
        U3(a6, b7, d8);
      }
    }
    var Lj = false;
    function Mj(a6, b7) {
      Bf = cd;
      a6 = Le();
      if (Me(a6)) {
        if ("selectionStart" in a6)
          var c8 = { start: a6.selectionStart, end: a6.selectionEnd };
        else
          a: {
            c8 = (c8 = a6.ownerDocument) && c8.defaultView || window;
            var d8 = c8.getSelection && c8.getSelection();
            if (d8 && d8.rangeCount !== 0) {
              c8 = d8.anchorNode;
              var e13 = d8.anchorOffset, f8 = d8.focusNode;
              d8 = d8.focusOffset;
              try {
                c8.nodeType, f8.nodeType;
              } catch (Z4) {
                c8 = null;
                break a;
              }
              var g7 = 0, h6 = -1, k4 = -1, l8 = 0, n6 = 0, u5 = a6, q3 = null;
              b:
                for (; ; ) {
                  for (var y4; ; ) {
                    u5 !== c8 || e13 !== 0 && u5.nodeType !== 3 || (h6 = g7 + e13);
                    u5 !== f8 || d8 !== 0 && u5.nodeType !== 3 || (k4 = g7 + d8);
                    u5.nodeType === 3 && (g7 += u5.nodeValue.length);
                    if ((y4 = u5.firstChild) === null)
                      break;
                    q3 = u5;
                    u5 = y4;
                  }
                  for (; ; ) {
                    if (u5 === a6)
                      break b;
                    q3 === c8 && ++l8 === e13 && (h6 = g7);
                    q3 === f8 && ++n6 === d8 && (k4 = g7);
                    if ((y4 = u5.nextSibling) !== null)
                      break;
                    u5 = q3;
                    q3 = u5.parentNode;
                  }
                  u5 = y4;
                }
              c8 = h6 === -1 || k4 === -1 ? null : { start: h6, end: k4 };
            } else
              c8 = null;
          }
        c8 = c8 || { start: 0, end: 0 };
      } else
        c8 = null;
      Cf = { focusedElem: a6, selectionRange: c8 };
      cd = false;
      for (T5 = b7; T5 !== null; )
        if (b7 = T5, a6 = b7.child, (b7.subtreeFlags & 1028) !== 0 && a6 !== null)
          a6.return = b7, T5 = a6;
        else
          for (; T5 !== null; ) {
            b7 = T5;
            try {
              var m8 = b7.alternate;
              if ((b7.flags & 1024) !== 0)
                switch (b7.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (m8 !== null) {
                      var w7 = m8.memoizedProps, J4 = m8.memoizedState, v6 = b7.stateNode, x7 = v6.getSnapshotBeforeUpdate(b7.elementType === b7.type ? w7 : kg(b7.type, w7), J4);
                      v6.__reactInternalSnapshotBeforeUpdate = x7;
                    }
                    break;
                  case 3:
                    var r12 = b7.stateNode.containerInfo;
                    if (r12.nodeType === 1)
                      r12.textContent = "";
                    else if (r12.nodeType === 9) {
                      var F6 = r12.body;
                      F6 != null && (F6.textContent = "");
                    }
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(p7(163));
                }
            } catch (Z4) {
              U3(b7, b7.return, Z4);
            }
            a6 = b7.sibling;
            if (a6 !== null) {
              a6.return = b7.return;
              T5 = a6;
              break;
            }
            T5 = b7.return;
          }
      m8 = Lj;
      Lj = false;
      return m8;
    }
    function Nj(a6, b7, c8) {
      var d8 = b7.updateQueue;
      d8 = d8 !== null ? d8.lastEffect : null;
      if (d8 !== null) {
        var e13 = d8 = d8.next;
        do {
          if ((e13.tag & a6) === a6) {
            var f8 = e13.destroy;
            e13.destroy = void 0;
            f8 !== void 0 && Kj(b7, c8, f8);
          }
          e13 = e13.next;
        } while (e13 !== d8);
      }
    }
    function Oj(a6, b7) {
      b7 = b7.updateQueue;
      b7 = b7 !== null ? b7.lastEffect : null;
      if (b7 !== null) {
        var c8 = b7 = b7.next;
        do {
          if ((c8.tag & a6) === a6) {
            var d8 = c8.create;
            c8.destroy = d8();
          }
          c8 = c8.next;
        } while (c8 !== b7);
      }
    }
    function Pj(a6) {
      var b7 = a6.ref;
      if (b7 !== null) {
        var c8 = a6.stateNode;
        switch (a6.tag) {
          case 5:
            a6 = c8;
            break;
          default:
            a6 = c8;
        }
        typeof b7 === "function" ? b7(a6) : b7.current = a6;
      }
    }
    function Qj(a6) {
      var b7 = a6.alternate;
      b7 !== null && (a6.alternate = null, Qj(b7));
      a6.child = null;
      a6.deletions = null;
      a6.sibling = null;
      a6.tag === 5 && (b7 = a6.stateNode, b7 !== null && (delete b7[Nf], delete b7[Of], delete b7[nf], delete b7[Pf], delete b7[Qf]));
      a6.stateNode = null;
      a6.return = null;
      a6.dependencies = null;
      a6.memoizedProps = null;
      a6.memoizedState = null;
      a6.pendingProps = null;
      a6.stateNode = null;
      a6.updateQueue = null;
    }
    function Rj(a6) {
      return a6.tag === 5 || a6.tag === 3 || a6.tag === 4;
    }
    function Sj(a6) {
      a:
        for (; ; ) {
          for (; a6.sibling === null; ) {
            if (a6.return === null || Rj(a6.return))
              return null;
            a6 = a6.return;
          }
          a6.sibling.return = a6.return;
          for (a6 = a6.sibling; a6.tag !== 5 && a6.tag !== 6 && a6.tag !== 18; ) {
            if (a6.flags & 2)
              continue a;
            if (a6.child === null || a6.tag === 4)
              continue a;
            else
              a6.child.return = a6, a6 = a6.child;
          }
          if (!(a6.flags & 2))
            return a6.stateNode;
        }
    }
    function Tj(a6, b7, c8) {
      var d8 = a6.tag;
      if (d8 === 5 || d8 === 6)
        a6 = a6.stateNode, b7 ? c8.nodeType === 8 ? c8.parentNode.insertBefore(a6, b7) : c8.insertBefore(a6, b7) : (c8.nodeType === 8 ? (b7 = c8.parentNode, b7.insertBefore(a6, c8)) : (b7 = c8, b7.appendChild(a6)), c8 = c8._reactRootContainer, c8 !== null && c8 !== void 0 || b7.onclick !== null || (b7.onclick = Af));
      else if (d8 !== 4 && (a6 = a6.child, a6 !== null))
        for (Tj(a6, b7, c8), a6 = a6.sibling; a6 !== null; )
          Tj(a6, b7, c8), a6 = a6.sibling;
    }
    function Uj(a6, b7, c8) {
      var d8 = a6.tag;
      if (d8 === 5 || d8 === 6)
        a6 = a6.stateNode, b7 ? c8.insertBefore(a6, b7) : c8.appendChild(a6);
      else if (d8 !== 4 && (a6 = a6.child, a6 !== null))
        for (Uj(a6, b7, c8), a6 = a6.sibling; a6 !== null; )
          Uj(a6, b7, c8), a6 = a6.sibling;
    }
    var V5 = null;
    var Vj = false;
    function Wj(a6, b7, c8) {
      for (c8 = c8.child; c8 !== null; )
        Xj(a6, b7, c8), c8 = c8.sibling;
    }
    function Xj(a6, b7, c8) {
      if (kc && typeof kc.onCommitFiberUnmount === "function")
        try {
          kc.onCommitFiberUnmount(jc, c8);
        } catch (h6) {
        }
      switch (c8.tag) {
        case 5:
          S3 || Jj(c8, b7);
        case 6:
          var d8 = V5, e13 = Vj;
          V5 = null;
          Wj(a6, b7, c8);
          V5 = d8;
          Vj = e13;
          V5 !== null && (Vj ? (a6 = V5, c8 = c8.stateNode, a6.nodeType === 8 ? a6.parentNode.removeChild(c8) : a6.removeChild(c8)) : V5.removeChild(c8.stateNode));
          break;
        case 18:
          V5 !== null && (Vj ? (a6 = V5, c8 = c8.stateNode, a6.nodeType === 8 ? Jf(a6.parentNode, c8) : a6.nodeType === 1 && Jf(a6, c8), ad(a6)) : Jf(V5, c8.stateNode));
          break;
        case 4:
          d8 = V5;
          e13 = Vj;
          V5 = c8.stateNode.containerInfo;
          Vj = true;
          Wj(a6, b7, c8);
          V5 = d8;
          Vj = e13;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!S3 && (d8 = c8.updateQueue, d8 !== null && (d8 = d8.lastEffect, d8 !== null))) {
            e13 = d8 = d8.next;
            do {
              var f8 = e13, g7 = f8.destroy;
              f8 = f8.tag;
              g7 !== void 0 && ((f8 & 2) !== 0 ? Kj(c8, b7, g7) : (f8 & 4) !== 0 && Kj(c8, b7, g7));
              e13 = e13.next;
            } while (e13 !== d8);
          }
          Wj(a6, b7, c8);
          break;
        case 1:
          if (!S3 && (Jj(c8, b7), d8 = c8.stateNode, typeof d8.componentWillUnmount === "function"))
            try {
              d8.props = c8.memoizedProps, d8.state = c8.memoizedState, d8.componentWillUnmount();
            } catch (h6) {
              U3(c8, b7, h6);
            }
          Wj(a6, b7, c8);
          break;
        case 21:
          Wj(a6, b7, c8);
          break;
        case 22:
          c8.mode & 1 ? (S3 = (d8 = S3) || c8.memoizedState !== null, Wj(a6, b7, c8), S3 = d8) : Wj(a6, b7, c8);
          break;
        default:
          Wj(a6, b7, c8);
      }
    }
    function Yj(a6) {
      var b7 = a6.updateQueue;
      if (b7 !== null) {
        a6.updateQueue = null;
        var c8 = a6.stateNode;
        c8 === null && (c8 = a6.stateNode = new Ij());
        b7.forEach(function(b8) {
          var d8 = Zj.bind(null, a6, b8);
          c8.has(b8) || (c8.add(b8), b8.then(d8, d8));
        });
      }
    }
    function ak(a6, b7) {
      var c8 = b7.deletions;
      if (c8 !== null)
        for (var d8 = 0; d8 < c8.length; d8++) {
          var e13 = c8[d8];
          try {
            var f8 = a6, g7 = b7, h6 = g7;
            a:
              for (; h6 !== null; ) {
                switch (h6.tag) {
                  case 5:
                    V5 = h6.stateNode;
                    Vj = false;
                    break a;
                  case 3:
                    V5 = h6.stateNode.containerInfo;
                    Vj = true;
                    break a;
                  case 4:
                    V5 = h6.stateNode.containerInfo;
                    Vj = true;
                    break a;
                }
                h6 = h6.return;
              }
            if (V5 === null)
              throw Error(p7(160));
            Xj(f8, g7, e13);
            V5 = null;
            Vj = false;
            var k4 = e13.alternate;
            k4 !== null && (k4.return = null);
            e13.return = null;
          } catch (l8) {
            U3(e13, b7, l8);
          }
        }
      if (b7.subtreeFlags & 12854)
        for (b7 = b7.child; b7 !== null; )
          bk(b7, a6), b7 = b7.sibling;
    }
    function bk(a6, b7) {
      var c8 = a6.alternate, d8 = a6.flags;
      switch (a6.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ak(b7, a6);
          ck(a6);
          if (d8 & 4) {
            try {
              Nj(3, a6, a6.return), Oj(3, a6);
            } catch (m8) {
              U3(a6, a6.return, m8);
            }
            try {
              Nj(5, a6, a6.return);
            } catch (m8) {
              U3(a6, a6.return, m8);
            }
          }
          break;
        case 1:
          ak(b7, a6);
          ck(a6);
          d8 & 512 && c8 !== null && Jj(c8, c8.return);
          break;
        case 5:
          ak(b7, a6);
          ck(a6);
          d8 & 512 && c8 !== null && Jj(c8, c8.return);
          if (a6.flags & 32) {
            var e13 = a6.stateNode;
            try {
              nb(e13, "");
            } catch (m8) {
              U3(a6, a6.return, m8);
            }
          }
          if (d8 & 4 && (e13 = a6.stateNode, e13 != null)) {
            var f8 = a6.memoizedProps, g7 = c8 !== null ? c8.memoizedProps : f8, h6 = a6.type, k4 = a6.updateQueue;
            a6.updateQueue = null;
            if (k4 !== null)
              try {
                h6 === "input" && f8.type === "radio" && f8.name != null && Za(e13, f8);
                ub(h6, g7);
                var l8 = ub(h6, f8);
                for (g7 = 0; g7 < k4.length; g7 += 2) {
                  var n6 = k4[g7], u5 = k4[g7 + 1];
                  n6 === "style" ? rb(e13, u5) : n6 === "dangerouslySetInnerHTML" ? mb(e13, u5) : n6 === "children" ? nb(e13, u5) : sa(e13, n6, u5, l8);
                }
                switch (h6) {
                  case "input":
                    $a(e13, f8);
                    break;
                  case "textarea":
                    hb(e13, f8);
                    break;
                  case "select":
                    var q3 = e13._wrapperState.wasMultiple;
                    e13._wrapperState.wasMultiple = !!f8.multiple;
                    var y4 = f8.value;
                    y4 != null ? eb(e13, !!f8.multiple, y4, false) : q3 !== !!f8.multiple && (f8.defaultValue != null ? eb(e13, !!f8.multiple, f8.defaultValue, true) : eb(e13, !!f8.multiple, f8.multiple ? [] : "", false));
                }
                e13[Of] = f8;
              } catch (m8) {
                U3(a6, a6.return, m8);
              }
          }
          break;
        case 6:
          ak(b7, a6);
          ck(a6);
          if (d8 & 4) {
            if (a6.stateNode === null)
              throw Error(p7(162));
            l8 = a6.stateNode;
            n6 = a6.memoizedProps;
            try {
              l8.nodeValue = n6;
            } catch (m8) {
              U3(a6, a6.return, m8);
            }
          }
          break;
        case 3:
          ak(b7, a6);
          ck(a6);
          if (d8 & 4 && c8 !== null && c8.memoizedState.isDehydrated)
            try {
              ad(b7.containerInfo);
            } catch (m8) {
              U3(a6, a6.return, m8);
            }
          break;
        case 4:
          ak(b7, a6);
          ck(a6);
          break;
        case 13:
          ak(b7, a6);
          ck(a6);
          l8 = a6.child;
          l8.flags & 8192 && l8.memoizedState !== null && (l8.alternate === null || l8.alternate.memoizedState === null) && (dk = B4());
          d8 & 4 && Yj(a6);
          break;
        case 22:
          l8 = c8 !== null && c8.memoizedState !== null;
          a6.mode & 1 ? (S3 = (n6 = S3) || l8, ak(b7, a6), S3 = n6) : ak(b7, a6);
          ck(a6);
          if (d8 & 8192) {
            n6 = a6.memoizedState !== null;
            a:
              for (u5 = null, q3 = a6; ; ) {
                if (q3.tag === 5) {
                  if (u5 === null) {
                    u5 = q3;
                    try {
                      e13 = q3.stateNode, n6 ? (f8 = e13.style, typeof f8.setProperty === "function" ? f8.setProperty("display", "none", "important") : f8.display = "none") : (h6 = q3.stateNode, k4 = q3.memoizedProps.style, g7 = k4 !== void 0 && k4 !== null && k4.hasOwnProperty("display") ? k4.display : null, h6.style.display = qb("display", g7));
                    } catch (m8) {
                      U3(a6, a6.return, m8);
                    }
                  }
                } else if (q3.tag === 6) {
                  if (u5 === null)
                    try {
                      q3.stateNode.nodeValue = n6 ? "" : q3.memoizedProps;
                    } catch (m8) {
                      U3(a6, a6.return, m8);
                    }
                } else if ((q3.tag !== 22 && q3.tag !== 23 || q3.memoizedState === null || q3 === a6) && q3.child !== null) {
                  q3.child.return = q3;
                  q3 = q3.child;
                  continue;
                }
                if (q3 === a6)
                  break a;
                for (; q3.sibling === null; ) {
                  if (q3.return === null || q3.return === a6)
                    break a;
                  u5 === q3 && (u5 = null);
                  q3 = q3.return;
                }
                u5 === q3 && (u5 = null);
                q3.sibling.return = q3.return;
                q3 = q3.sibling;
              }
            if (n6 && !l8 && (a6.mode & 1) !== 0)
              for (T5 = a6, a6 = a6.child; a6 !== null; ) {
                for (l8 = T5 = a6; T5 !== null; ) {
                  n6 = T5;
                  u5 = n6.child;
                  switch (n6.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Nj(4, n6, n6.return);
                      break;
                    case 1:
                      Jj(n6, n6.return);
                      f8 = n6.stateNode;
                      if (typeof f8.componentWillUnmount === "function") {
                        q3 = n6;
                        y4 = n6.return;
                        try {
                          e13 = q3, f8.props = e13.memoizedProps, f8.state = e13.memoizedState, f8.componentWillUnmount();
                        } catch (m8) {
                          U3(q3, y4, m8);
                        }
                      }
                      break;
                    case 5:
                      Jj(n6, n6.return);
                      break;
                    case 22:
                      if (n6.memoizedState !== null) {
                        ek(l8);
                        continue;
                      }
                  }
                  u5 !== null ? (u5.return = n6, T5 = u5) : ek(l8);
                }
                a6 = a6.sibling;
              }
          }
          break;
        case 19:
          ak(b7, a6);
          ck(a6);
          d8 & 4 && Yj(a6);
          break;
        case 21:
          break;
        default:
          ak(b7, a6), ck(a6);
      }
    }
    function ck(a6) {
      var b7 = a6.flags;
      if (b7 & 2) {
        try {
          a: {
            for (var c8 = a6.return; c8 !== null; ) {
              if (Rj(c8)) {
                var d8 = c8;
                break a;
              }
              c8 = c8.return;
            }
            throw Error(p7(160));
          }
          switch (d8.tag) {
            case 5:
              var e13 = d8.stateNode;
              d8.flags & 32 && (nb(e13, ""), d8.flags &= -33);
              var f8 = Sj(a6);
              Uj(a6, f8, e13);
              break;
            case 3:
            case 4:
              var g7 = d8.stateNode.containerInfo, h6 = Sj(a6);
              Tj(a6, h6, g7);
              break;
            default:
              throw Error(p7(161));
          }
        } catch (k4) {
          U3(a6, a6.return, k4);
        }
        a6.flags &= -3;
      }
      b7 & 4096 && (a6.flags &= -4097);
    }
    function fk(a6, b7, c8) {
      T5 = a6;
      gk(a6, b7, c8);
    }
    function gk(a6, b7, c8) {
      for (var d8 = (a6.mode & 1) !== 0; T5 !== null; ) {
        var e13 = T5, f8 = e13.child;
        if (e13.tag === 22 && d8) {
          var g7 = e13.memoizedState !== null || Hj;
          if (!g7) {
            var h6 = e13.alternate, k4 = h6 !== null && h6.memoizedState !== null || S3;
            h6 = Hj;
            var l8 = S3;
            Hj = g7;
            if ((S3 = k4) && !l8)
              for (T5 = e13; T5 !== null; )
                g7 = T5, k4 = g7.child, g7.tag === 22 && g7.memoizedState !== null ? hk(e13) : k4 !== null ? (k4.return = g7, T5 = k4) : hk(e13);
            for (; f8 !== null; )
              T5 = f8, gk(f8, b7, c8), f8 = f8.sibling;
            T5 = e13;
            Hj = h6;
            S3 = l8;
          }
          ik(a6, b7, c8);
        } else
          (e13.subtreeFlags & 8772) !== 0 && f8 !== null ? (f8.return = e13, T5 = f8) : ik(a6, b7, c8);
      }
    }
    function ik(a6) {
      for (; T5 !== null; ) {
        var b7 = T5;
        if ((b7.flags & 8772) !== 0) {
          var c8 = b7.alternate;
          try {
            if ((b7.flags & 8772) !== 0)
              switch (b7.tag) {
                case 0:
                case 11:
                case 15:
                  S3 || Oj(5, b7);
                  break;
                case 1:
                  var d8 = b7.stateNode;
                  if (b7.flags & 4 && !S3)
                    if (c8 === null)
                      d8.componentDidMount();
                    else {
                      var e13 = b7.elementType === b7.type ? c8.memoizedProps : kg(b7.type, c8.memoizedProps);
                      d8.componentDidUpdate(e13, c8.memoizedState, d8.__reactInternalSnapshotBeforeUpdate);
                    }
                  var f8 = b7.updateQueue;
                  f8 !== null && Gg(b7, f8, d8);
                  break;
                case 3:
                  var g7 = b7.updateQueue;
                  if (g7 !== null) {
                    c8 = null;
                    if (b7.child !== null)
                      switch (b7.child.tag) {
                        case 5:
                          c8 = b7.child.stateNode;
                          break;
                        case 1:
                          c8 = b7.child.stateNode;
                      }
                    Gg(b7, g7, c8);
                  }
                  break;
                case 5:
                  var h6 = b7.stateNode;
                  if (c8 === null && b7.flags & 4) {
                    c8 = h6;
                    var k4 = b7.memoizedProps;
                    switch (b7.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k4.autoFocus && c8.focus();
                        break;
                      case "img":
                        k4.src && (c8.src = k4.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (b7.memoizedState === null) {
                    var l8 = b7.alternate;
                    if (l8 !== null) {
                      var n6 = l8.memoizedState;
                      if (n6 !== null) {
                        var u5 = n6.dehydrated;
                        u5 !== null && ad(u5);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                  break;
                default:
                  throw Error(p7(163));
              }
            S3 || b7.flags & 512 && Pj(b7);
          } catch (q3) {
            U3(b7, b7.return, q3);
          }
        }
        if (b7 === a6) {
          T5 = null;
          break;
        }
        c8 = b7.sibling;
        if (c8 !== null) {
          c8.return = b7.return;
          T5 = c8;
          break;
        }
        T5 = b7.return;
      }
    }
    function ek(a6) {
      for (; T5 !== null; ) {
        var b7 = T5;
        if (b7 === a6) {
          T5 = null;
          break;
        }
        var c8 = b7.sibling;
        if (c8 !== null) {
          c8.return = b7.return;
          T5 = c8;
          break;
        }
        T5 = b7.return;
      }
    }
    function hk(a6) {
      for (; T5 !== null; ) {
        var b7 = T5;
        try {
          switch (b7.tag) {
            case 0:
            case 11:
            case 15:
              var c8 = b7.return;
              try {
                Oj(4, b7);
              } catch (k4) {
                U3(b7, c8, k4);
              }
              break;
            case 1:
              var d8 = b7.stateNode;
              if (typeof d8.componentDidMount === "function") {
                var e13 = b7.return;
                try {
                  d8.componentDidMount();
                } catch (k4) {
                  U3(b7, e13, k4);
                }
              }
              var f8 = b7.return;
              try {
                Pj(b7);
              } catch (k4) {
                U3(b7, f8, k4);
              }
              break;
            case 5:
              var g7 = b7.return;
              try {
                Pj(b7);
              } catch (k4) {
                U3(b7, g7, k4);
              }
          }
        } catch (k4) {
          U3(b7, b7.return, k4);
        }
        if (b7 === a6) {
          T5 = null;
          break;
        }
        var h6 = b7.sibling;
        if (h6 !== null) {
          h6.return = b7.return;
          T5 = h6;
          break;
        }
        T5 = b7.return;
      }
    }
    var jk = Math.ceil;
    var kk = ta.ReactCurrentDispatcher;
    var lk = ta.ReactCurrentOwner;
    var mk = ta.ReactCurrentBatchConfig;
    var W4 = 0;
    var P3 = null;
    var X3 = null;
    var Y4 = 0;
    var cj = 0;
    var mj = Tf(0);
    var R7 = 0;
    var nk = null;
    var Fg = 0;
    var ok = 0;
    var pk = 0;
    var qk = null;
    var rk = null;
    var dk = 0;
    var aj = Infinity;
    var sk = null;
    var Li = false;
    var Mi = null;
    var Oi = null;
    var tk = false;
    var uk = null;
    var vk = 0;
    var wk = 0;
    var xk = null;
    var yk = -1;
    var zk = 0;
    function Jg() {
      return (W4 & 6) !== 0 ? B4() : yk !== -1 ? yk : yk = B4();
    }
    function Kg(a6) {
      if ((a6.mode & 1) === 0)
        return 1;
      if ((W4 & 2) !== 0 && Y4 !== 0)
        return Y4 & -Y4;
      if (jg.transition !== null)
        return zk === 0 && (zk = xc()), zk;
      a6 = C6;
      if (a6 !== 0)
        return a6;
      a6 = window.event;
      a6 = a6 === void 0 ? 16 : id(a6.type);
      return a6;
    }
    function Lg(a6, b7, c8) {
      if (50 < wk)
        throw wk = 0, xk = null, Error(p7(185));
      var d8 = Ak(a6, b7);
      if (d8 === null)
        return null;
      zc(d8, b7, c8);
      if ((W4 & 2) === 0 || d8 !== P3)
        d8 === P3 && ((W4 & 2) === 0 && (ok |= b7), R7 === 4 && Bk(d8, Y4)), Ck(d8, c8), b7 === 1 && W4 === 0 && (a6.mode & 1) === 0 && (aj = B4() + 500, eg && ig());
      return d8;
    }
    function Ak(a6, b7) {
      a6.lanes |= b7;
      var c8 = a6.alternate;
      c8 !== null && (c8.lanes |= b7);
      c8 = a6;
      for (a6 = a6.return; a6 !== null; )
        a6.childLanes |= b7, c8 = a6.alternate, c8 !== null && (c8.childLanes |= b7), c8 = a6, a6 = a6.return;
      return c8.tag === 3 ? c8.stateNode : null;
    }
    function Bg(a6) {
      return (P3 !== null || vg !== null) && (a6.mode & 1) !== 0 && (W4 & 2) === 0;
    }
    function Ck(a6, b7) {
      var c8 = a6.callbackNode;
      vc(a6, b7);
      var d8 = tc(a6, a6 === P3 ? Y4 : 0);
      if (d8 === 0)
        c8 !== null && ac(c8), a6.callbackNode = null, a6.callbackPriority = 0;
      else if (b7 = d8 & -d8, a6.callbackPriority !== b7) {
        c8 != null && ac(c8);
        if (b7 === 1)
          a6.tag === 0 ? hg(Dk.bind(null, a6)) : gg(Dk.bind(null, a6)), If(function() {
            W4 === 0 && ig();
          }), c8 = null;
        else {
          switch (Cc(d8)) {
            case 1:
              c8 = ec;
              break;
            case 4:
              c8 = fc;
              break;
            case 16:
              c8 = gc;
              break;
            case 536870912:
              c8 = ic;
              break;
            default:
              c8 = gc;
          }
          c8 = Ek(c8, Fk.bind(null, a6));
        }
        a6.callbackPriority = b7;
        a6.callbackNode = c8;
      }
    }
    function Fk(a6, b7) {
      yk = -1;
      zk = 0;
      if ((W4 & 6) !== 0)
        throw Error(p7(327));
      var c8 = a6.callbackNode;
      if (Gk() && a6.callbackNode !== c8)
        return null;
      var d8 = tc(a6, a6 === P3 ? Y4 : 0);
      if (d8 === 0)
        return null;
      if ((d8 & 30) !== 0 || (d8 & a6.expiredLanes) !== 0 || b7)
        b7 = Hk(a6, d8);
      else {
        b7 = d8;
        var e13 = W4;
        W4 |= 2;
        var f8 = Ik();
        if (P3 !== a6 || Y4 !== b7)
          sk = null, aj = B4() + 500, Jk(a6, b7);
        do
          try {
            Kk();
            break;
          } catch (h6) {
            Lk(a6, h6);
          }
        while (1);
        pg();
        kk.current = f8;
        W4 = e13;
        X3 !== null ? b7 = 0 : (P3 = null, Y4 = 0, b7 = R7);
      }
      if (b7 !== 0) {
        b7 === 2 && (e13 = wc(a6), e13 !== 0 && (d8 = e13, b7 = Mk(a6, e13)));
        if (b7 === 1)
          throw c8 = nk, Jk(a6, 0), Bk(a6, d8), Ck(a6, B4()), c8;
        if (b7 === 6)
          Bk(a6, d8);
        else {
          e13 = a6.current.alternate;
          if ((d8 & 30) === 0 && !Nk(e13) && (b7 = Hk(a6, d8), b7 === 2 && (f8 = wc(a6), f8 !== 0 && (d8 = f8, b7 = Mk(a6, f8))), b7 === 1))
            throw c8 = nk, Jk(a6, 0), Bk(a6, d8), Ck(a6, B4()), c8;
          a6.finishedWork = e13;
          a6.finishedLanes = d8;
          switch (b7) {
            case 0:
            case 1:
              throw Error(p7(345));
            case 2:
              Ok(a6, rk, sk);
              break;
            case 3:
              Bk(a6, d8);
              if ((d8 & 130023424) === d8 && (b7 = dk + 500 - B4(), 10 < b7)) {
                if (tc(a6, 0) !== 0)
                  break;
                e13 = a6.suspendedLanes;
                if ((e13 & d8) !== d8) {
                  Jg();
                  a6.pingedLanes |= a6.suspendedLanes & e13;
                  break;
                }
                a6.timeoutHandle = Ef(Ok.bind(null, a6, rk, sk), b7);
                break;
              }
              Ok(a6, rk, sk);
              break;
            case 4:
              Bk(a6, d8);
              if ((d8 & 4194240) === d8)
                break;
              b7 = a6.eventTimes;
              for (e13 = -1; 0 < d8; ) {
                var g7 = 31 - nc(d8);
                f8 = 1 << g7;
                g7 = b7[g7];
                g7 > e13 && (e13 = g7);
                d8 &= ~f8;
              }
              d8 = e13;
              d8 = B4() - d8;
              d8 = (120 > d8 ? 120 : 480 > d8 ? 480 : 1080 > d8 ? 1080 : 1920 > d8 ? 1920 : 3e3 > d8 ? 3e3 : 4320 > d8 ? 4320 : 1960 * jk(d8 / 1960)) - d8;
              if (10 < d8) {
                a6.timeoutHandle = Ef(Ok.bind(null, a6, rk, sk), d8);
                break;
              }
              Ok(a6, rk, sk);
              break;
            case 5:
              Ok(a6, rk, sk);
              break;
            default:
              throw Error(p7(329));
          }
        }
      }
      Ck(a6, B4());
      return a6.callbackNode === c8 ? Fk.bind(null, a6) : null;
    }
    function Mk(a6, b7) {
      var c8 = qk;
      a6.current.memoizedState.isDehydrated && (Jk(a6, b7).flags |= 256);
      a6 = Hk(a6, b7);
      a6 !== 2 && (b7 = rk, rk = c8, b7 !== null && Zi(b7));
      return a6;
    }
    function Zi(a6) {
      rk === null ? rk = a6 : rk.push.apply(rk, a6);
    }
    function Nk(a6) {
      for (var b7 = a6; ; ) {
        if (b7.flags & 16384) {
          var c8 = b7.updateQueue;
          if (c8 !== null && (c8 = c8.stores, c8 !== null))
            for (var d8 = 0; d8 < c8.length; d8++) {
              var e13 = c8[d8], f8 = e13.getSnapshot;
              e13 = e13.value;
              try {
                if (!Ge(f8(), e13))
                  return false;
              } catch (g7) {
                return false;
              }
            }
        }
        c8 = b7.child;
        if (b7.subtreeFlags & 16384 && c8 !== null)
          c8.return = b7, b7 = c8;
        else {
          if (b7 === a6)
            break;
          for (; b7.sibling === null; ) {
            if (b7.return === null || b7.return === a6)
              return true;
            b7 = b7.return;
          }
          b7.sibling.return = b7.return;
          b7 = b7.sibling;
        }
      }
      return true;
    }
    function Bk(a6, b7) {
      b7 &= ~pk;
      b7 &= ~ok;
      a6.suspendedLanes |= b7;
      a6.pingedLanes &= ~b7;
      for (a6 = a6.expirationTimes; 0 < b7; ) {
        var c8 = 31 - nc(b7), d8 = 1 << c8;
        a6[c8] = -1;
        b7 &= ~d8;
      }
    }
    function Dk(a6) {
      if ((W4 & 6) !== 0)
        throw Error(p7(327));
      Gk();
      var b7 = tc(a6, 0);
      if ((b7 & 1) === 0)
        return Ck(a6, B4()), null;
      var c8 = Hk(a6, b7);
      if (a6.tag !== 0 && c8 === 2) {
        var d8 = wc(a6);
        d8 !== 0 && (b7 = d8, c8 = Mk(a6, d8));
      }
      if (c8 === 1)
        throw c8 = nk, Jk(a6, 0), Bk(a6, b7), Ck(a6, B4()), c8;
      if (c8 === 6)
        throw Error(p7(345));
      a6.finishedWork = a6.current.alternate;
      a6.finishedLanes = b7;
      Ok(a6, rk, sk);
      Ck(a6, B4());
      return null;
    }
    function Pk(a6, b7) {
      var c8 = W4;
      W4 |= 1;
      try {
        return a6(b7);
      } finally {
        W4 = c8, W4 === 0 && (aj = B4() + 500, eg && ig());
      }
    }
    function Qk(a6) {
      uk !== null && uk.tag === 0 && (W4 & 6) === 0 && Gk();
      var b7 = W4;
      W4 |= 1;
      var c8 = mk.transition, d8 = C6;
      try {
        if (mk.transition = null, C6 = 1, a6)
          return a6();
      } finally {
        C6 = d8, mk.transition = c8, W4 = b7, (W4 & 6) === 0 && ig();
      }
    }
    function bj() {
      cj = mj.current;
      E7(mj);
    }
    function Jk(a6, b7) {
      a6.finishedWork = null;
      a6.finishedLanes = 0;
      var c8 = a6.timeoutHandle;
      c8 !== -1 && (a6.timeoutHandle = -1, Ff(c8));
      if (X3 !== null)
        for (c8 = X3.return; c8 !== null; ) {
          var d8 = c8;
          ch(d8);
          switch (d8.tag) {
            case 1:
              d8 = d8.type.childContextTypes;
              d8 !== null && d8 !== void 0 && Zf();
              break;
            case 3:
              Gh();
              E7(Vf);
              E7(H5);
              Lh();
              break;
            case 5:
              Ih(d8);
              break;
            case 4:
              Gh();
              break;
            case 13:
              E7(K3);
              break;
            case 19:
              E7(K3);
              break;
            case 10:
              qg(d8.type._context);
              break;
            case 22:
            case 23:
              bj();
          }
          c8 = c8.return;
        }
      P3 = a6;
      X3 = a6 = th(a6.current, null);
      Y4 = cj = b7;
      R7 = 0;
      nk = null;
      pk = ok = Fg = 0;
      rk = qk = null;
      if (vg !== null) {
        for (b7 = 0; b7 < vg.length; b7++)
          if (c8 = vg[b7], d8 = c8.interleaved, d8 !== null) {
            c8.interleaved = null;
            var e13 = d8.next, f8 = c8.pending;
            if (f8 !== null) {
              var g7 = f8.next;
              f8.next = e13;
              d8.next = g7;
            }
            c8.pending = d8;
          }
        vg = null;
      }
      return a6;
    }
    function Lk(a6, b7) {
      do {
        var c8 = X3;
        try {
          pg();
          Mh.current = Yh;
          if (Ph) {
            for (var d8 = L4.memoizedState; d8 !== null; ) {
              var e13 = d8.queue;
              e13 !== null && (e13.pending = null);
              d8 = d8.next;
            }
            Ph = false;
          }
          Oh = 0;
          N2 = M3 = L4 = null;
          Qh = false;
          Rh = 0;
          lk.current = null;
          if (c8 === null || c8.return === null) {
            R7 = 1;
            nk = b7;
            X3 = null;
            break;
          }
          a: {
            var f8 = a6, g7 = c8.return, h6 = c8, k4 = b7;
            b7 = Y4;
            h6.flags |= 32768;
            if (k4 !== null && typeof k4 === "object" && typeof k4.then === "function") {
              var l8 = k4, n6 = h6, u5 = n6.tag;
              if ((n6.mode & 1) === 0 && (u5 === 0 || u5 === 11 || u5 === 15)) {
                var q3 = n6.alternate;
                q3 ? (n6.updateQueue = q3.updateQueue, n6.memoizedState = q3.memoizedState, n6.lanes = q3.lanes) : (n6.updateQueue = null, n6.memoizedState = null);
              }
              var y4 = Ri(g7);
              if (y4 !== null) {
                y4.flags &= -257;
                Si(y4, g7, h6, f8, b7);
                y4.mode & 1 && Pi(f8, l8, b7);
                b7 = y4;
                k4 = l8;
                var m8 = b7.updateQueue;
                if (m8 === null) {
                  var w7 = /* @__PURE__ */ new Set();
                  w7.add(k4);
                  b7.updateQueue = w7;
                } else
                  m8.add(k4);
                break a;
              } else {
                if ((b7 & 1) === 0) {
                  Pi(f8, l8, b7);
                  $i();
                  break a;
                }
                k4 = Error(p7(426));
              }
            } else if (I4 && h6.mode & 1) {
              var J4 = Ri(g7);
              if (J4 !== null) {
                (J4.flags & 65536) === 0 && (J4.flags |= 256);
                Si(J4, g7, h6, f8, b7);
                oh(k4);
                break a;
              }
            }
            f8 = k4;
            R7 !== 4 && (R7 = 2);
            qk === null ? qk = [f8] : qk.push(f8);
            k4 = Hi(k4, h6);
            h6 = g7;
            do {
              switch (h6.tag) {
                case 3:
                  h6.flags |= 65536;
                  b7 &= -b7;
                  h6.lanes |= b7;
                  var v6 = Ki(h6, k4, b7);
                  Dg(h6, v6);
                  break a;
                case 1:
                  f8 = k4;
                  var x7 = h6.type, r12 = h6.stateNode;
                  if ((h6.flags & 128) === 0 && (typeof x7.getDerivedStateFromError === "function" || r12 !== null && typeof r12.componentDidCatch === "function" && (Oi === null || !Oi.has(r12)))) {
                    h6.flags |= 65536;
                    b7 &= -b7;
                    h6.lanes |= b7;
                    var F6 = Ni(h6, f8, b7);
                    Dg(h6, F6);
                    break a;
                  }
              }
              h6 = h6.return;
            } while (h6 !== null);
          }
          Rk(c8);
        } catch (Z4) {
          b7 = Z4;
          X3 === c8 && c8 !== null && (X3 = c8 = c8.return);
          continue;
        }
        break;
      } while (1);
    }
    function Ik() {
      var a6 = kk.current;
      kk.current = Yh;
      return a6 === null ? Yh : a6;
    }
    function $i() {
      if (R7 === 0 || R7 === 3 || R7 === 2)
        R7 = 4;
      P3 === null || (Fg & 268435455) === 0 && (ok & 268435455) === 0 || Bk(P3, Y4);
    }
    function Hk(a6, b7) {
      var c8 = W4;
      W4 |= 2;
      var d8 = Ik();
      if (P3 !== a6 || Y4 !== b7)
        sk = null, Jk(a6, b7);
      do
        try {
          Sk();
          break;
        } catch (e13) {
          Lk(a6, e13);
        }
      while (1);
      pg();
      W4 = c8;
      kk.current = d8;
      if (X3 !== null)
        throw Error(p7(261));
      P3 = null;
      Y4 = 0;
      return R7;
    }
    function Sk() {
      for (; X3 !== null; )
        Tk(X3);
    }
    function Kk() {
      for (; X3 !== null && !bc(); )
        Tk(X3);
    }
    function Tk(a6) {
      var b7 = Uk(a6.alternate, a6, cj);
      a6.memoizedProps = a6.pendingProps;
      b7 === null ? Rk(a6) : X3 = b7;
      lk.current = null;
    }
    function Rk(a6) {
      var b7 = a6;
      do {
        var c8 = b7.alternate;
        a6 = b7.return;
        if ((b7.flags & 32768) === 0) {
          if (c8 = Yi(c8, b7, cj), c8 !== null) {
            X3 = c8;
            return;
          }
        } else {
          c8 = Gj(c8, b7);
          if (c8 !== null) {
            c8.flags &= 32767;
            X3 = c8;
            return;
          }
          if (a6 !== null)
            a6.flags |= 32768, a6.subtreeFlags = 0, a6.deletions = null;
          else {
            R7 = 6;
            X3 = null;
            return;
          }
        }
        b7 = b7.sibling;
        if (b7 !== null) {
          X3 = b7;
          return;
        }
        X3 = b7 = a6;
      } while (b7 !== null);
      R7 === 0 && (R7 = 5);
    }
    function Ok(a6, b7, c8) {
      var d8 = C6, e13 = mk.transition;
      try {
        mk.transition = null, C6 = 1, Vk(a6, b7, c8, d8);
      } finally {
        mk.transition = e13, C6 = d8;
      }
      return null;
    }
    function Vk(a6, b7, c8, d8) {
      do
        Gk();
      while (uk !== null);
      if ((W4 & 6) !== 0)
        throw Error(p7(327));
      c8 = a6.finishedWork;
      var e13 = a6.finishedLanes;
      if (c8 === null)
        return null;
      a6.finishedWork = null;
      a6.finishedLanes = 0;
      if (c8 === a6.current)
        throw Error(p7(177));
      a6.callbackNode = null;
      a6.callbackPriority = 0;
      var f8 = c8.lanes | c8.childLanes;
      Ac(a6, f8);
      a6 === P3 && (X3 = P3 = null, Y4 = 0);
      (c8.subtreeFlags & 2064) === 0 && (c8.flags & 2064) === 0 || tk || (tk = true, Ek(gc, function() {
        Gk();
        return null;
      }));
      f8 = (c8.flags & 15990) !== 0;
      if ((c8.subtreeFlags & 15990) !== 0 || f8) {
        f8 = mk.transition;
        mk.transition = null;
        var g7 = C6;
        C6 = 1;
        var h6 = W4;
        W4 |= 4;
        lk.current = null;
        Mj(a6, c8);
        bk(c8, a6);
        Ne(Cf);
        cd = !!Bf;
        Cf = Bf = null;
        a6.current = c8;
        fk(c8, a6, e13);
        cc();
        W4 = h6;
        C6 = g7;
        mk.transition = f8;
      } else
        a6.current = c8;
      tk && (tk = false, uk = a6, vk = e13);
      f8 = a6.pendingLanes;
      f8 === 0 && (Oi = null);
      lc(c8.stateNode, d8);
      Ck(a6, B4());
      if (b7 !== null)
        for (d8 = a6.onRecoverableError, c8 = 0; c8 < b7.length; c8++)
          d8(b7[c8]);
      if (Li)
        throw Li = false, a6 = Mi, Mi = null, a6;
      (vk & 1) !== 0 && a6.tag !== 0 && Gk();
      f8 = a6.pendingLanes;
      (f8 & 1) !== 0 ? a6 === xk ? wk++ : (wk = 0, xk = a6) : wk = 0;
      ig();
      return null;
    }
    function Gk() {
      if (uk !== null) {
        var a6 = Cc(vk), b7 = mk.transition, c8 = C6;
        try {
          mk.transition = null;
          C6 = 16 > a6 ? 16 : a6;
          if (uk === null)
            var d8 = false;
          else {
            a6 = uk;
            uk = null;
            vk = 0;
            if ((W4 & 6) !== 0)
              throw Error(p7(331));
            var e13 = W4;
            W4 |= 4;
            for (T5 = a6.current; T5 !== null; ) {
              var f8 = T5, g7 = f8.child;
              if ((T5.flags & 16) !== 0) {
                var h6 = f8.deletions;
                if (h6 !== null) {
                  for (var k4 = 0; k4 < h6.length; k4++) {
                    var l8 = h6[k4];
                    for (T5 = l8; T5 !== null; ) {
                      var n6 = T5;
                      switch (n6.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Nj(8, n6, f8);
                      }
                      var u5 = n6.child;
                      if (u5 !== null)
                        u5.return = n6, T5 = u5;
                      else
                        for (; T5 !== null; ) {
                          n6 = T5;
                          var q3 = n6.sibling, y4 = n6.return;
                          Qj(n6);
                          if (n6 === l8) {
                            T5 = null;
                            break;
                          }
                          if (q3 !== null) {
                            q3.return = y4;
                            T5 = q3;
                            break;
                          }
                          T5 = y4;
                        }
                    }
                  }
                  var m8 = f8.alternate;
                  if (m8 !== null) {
                    var w7 = m8.child;
                    if (w7 !== null) {
                      m8.child = null;
                      do {
                        var J4 = w7.sibling;
                        w7.sibling = null;
                        w7 = J4;
                      } while (w7 !== null);
                    }
                  }
                  T5 = f8;
                }
              }
              if ((f8.subtreeFlags & 2064) !== 0 && g7 !== null)
                g7.return = f8, T5 = g7;
              else
                b:
                  for (; T5 !== null; ) {
                    f8 = T5;
                    if ((f8.flags & 2048) !== 0)
                      switch (f8.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Nj(9, f8, f8.return);
                      }
                    var v6 = f8.sibling;
                    if (v6 !== null) {
                      v6.return = f8.return;
                      T5 = v6;
                      break b;
                    }
                    T5 = f8.return;
                  }
            }
            var x7 = a6.current;
            for (T5 = x7; T5 !== null; ) {
              g7 = T5;
              var r12 = g7.child;
              if ((g7.subtreeFlags & 2064) !== 0 && r12 !== null)
                r12.return = g7, T5 = r12;
              else
                b:
                  for (g7 = x7; T5 !== null; ) {
                    h6 = T5;
                    if ((h6.flags & 2048) !== 0)
                      try {
                        switch (h6.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Oj(9, h6);
                        }
                      } catch (Z4) {
                        U3(h6, h6.return, Z4);
                      }
                    if (h6 === g7) {
                      T5 = null;
                      break b;
                    }
                    var F6 = h6.sibling;
                    if (F6 !== null) {
                      F6.return = h6.return;
                      T5 = F6;
                      break b;
                    }
                    T5 = h6.return;
                  }
            }
            W4 = e13;
            ig();
            if (kc && typeof kc.onPostCommitFiberRoot === "function")
              try {
                kc.onPostCommitFiberRoot(jc, a6);
              } catch (Z4) {
              }
            d8 = true;
          }
          return d8;
        } finally {
          C6 = c8, mk.transition = b7;
        }
      }
      return false;
    }
    function Wk(a6, b7, c8) {
      b7 = Hi(c8, b7);
      b7 = Ki(a6, b7, 1);
      Ag(a6, b7);
      b7 = Jg();
      a6 = Ak(a6, 1);
      a6 !== null && (zc(a6, 1, b7), Ck(a6, b7));
    }
    function U3(a6, b7, c8) {
      if (a6.tag === 3)
        Wk(a6, a6, c8);
      else
        for (; b7 !== null; ) {
          if (b7.tag === 3) {
            Wk(b7, a6, c8);
            break;
          } else if (b7.tag === 1) {
            var d8 = b7.stateNode;
            if (typeof b7.type.getDerivedStateFromError === "function" || typeof d8.componentDidCatch === "function" && (Oi === null || !Oi.has(d8))) {
              a6 = Hi(c8, a6);
              a6 = Ni(b7, a6, 1);
              Ag(b7, a6);
              a6 = Jg();
              b7 = Ak(b7, 1);
              b7 !== null && (zc(b7, 1, a6), Ck(b7, a6));
              break;
            }
          }
          b7 = b7.return;
        }
    }
    function Qi(a6, b7, c8) {
      var d8 = a6.pingCache;
      d8 !== null && d8.delete(b7);
      b7 = Jg();
      a6.pingedLanes |= a6.suspendedLanes & c8;
      P3 === a6 && (Y4 & c8) === c8 && (R7 === 4 || R7 === 3 && (Y4 & 130023424) === Y4 && 500 > B4() - dk ? Jk(a6, 0) : pk |= c8);
      Ck(a6, b7);
    }
    function Xk(a6, b7) {
      b7 === 0 && ((a6.mode & 1) === 0 ? b7 = 1 : (b7 = rc, rc <<= 1, (rc & 130023424) === 0 && (rc = 4194304)));
      var c8 = Jg();
      a6 = Ak(a6, b7);
      a6 !== null && (zc(a6, b7, c8), Ck(a6, c8));
    }
    function zj(a6) {
      var b7 = a6.memoizedState, c8 = 0;
      b7 !== null && (c8 = b7.retryLane);
      Xk(a6, c8);
    }
    function Zj(a6, b7) {
      var c8 = 0;
      switch (a6.tag) {
        case 13:
          var d8 = a6.stateNode;
          var e13 = a6.memoizedState;
          e13 !== null && (c8 = e13.retryLane);
          break;
        case 19:
          d8 = a6.stateNode;
          break;
        default:
          throw Error(p7(314));
      }
      d8 !== null && d8.delete(b7);
      Xk(a6, c8);
    }
    var Uk;
    Uk = function(a6, b7, c8) {
      if (a6 !== null)
        if (a6.memoizedProps !== b7.pendingProps || Vf.current)
          tg = true;
        else {
          if ((a6.lanes & c8) === 0 && (b7.flags & 128) === 0)
            return tg = false, Fj(a6, b7, c8);
          tg = (a6.flags & 131072) !== 0 ? true : false;
        }
      else
        tg = false, I4 && (b7.flags & 1048576) !== 0 && ah(b7, Ug, b7.index);
      b7.lanes = 0;
      switch (b7.tag) {
        case 2:
          var d8 = b7.type;
          a6 !== null && (a6.alternate = null, b7.alternate = null, b7.flags |= 2);
          a6 = b7.pendingProps;
          var e13 = Xf(b7, H5.current);
          sg(b7, c8);
          e13 = Uh(null, b7, d8, a6, e13, c8);
          var f8 = Zh();
          b7.flags |= 1;
          typeof e13 === "object" && e13 !== null && typeof e13.render === "function" && e13.$$typeof === void 0 ? (b7.tag = 1, b7.memoizedState = null, b7.updateQueue = null, Yf(d8) ? (f8 = true, bg(b7)) : f8 = false, b7.memoizedState = e13.state !== null && e13.state !== void 0 ? e13.state : null, xg(b7), e13.updater = Mg, b7.stateNode = e13, e13._reactInternals = b7, Qg(b7, d8, a6, c8), b7 = pj(null, b7, d8, true, f8, c8)) : (b7.tag = 0, I4 && f8 && bh(b7), ej(null, b7, e13, c8), b7 = b7.child);
          return b7;
        case 16:
          d8 = b7.elementType;
          a: {
            a6 !== null && (a6.alternate = null, b7.alternate = null, b7.flags |= 2);
            a6 = b7.pendingProps;
            e13 = d8._init;
            d8 = e13(d8._payload);
            b7.type = d8;
            e13 = b7.tag = Yk(d8);
            a6 = kg(d8, a6);
            switch (e13) {
              case 0:
                b7 = kj(null, b7, d8, a6, c8);
                break a;
              case 1:
                b7 = oj(null, b7, d8, a6, c8);
                break a;
              case 11:
                b7 = fj(null, b7, d8, a6, c8);
                break a;
              case 14:
                b7 = hj(null, b7, d8, kg(d8.type, a6), c8);
                break a;
            }
            throw Error(p7(306, d8, ""));
          }
          return b7;
        case 0:
          return d8 = b7.type, e13 = b7.pendingProps, e13 = b7.elementType === d8 ? e13 : kg(d8, e13), kj(a6, b7, d8, e13, c8);
        case 1:
          return d8 = b7.type, e13 = b7.pendingProps, e13 = b7.elementType === d8 ? e13 : kg(d8, e13), oj(a6, b7, d8, e13, c8);
        case 3:
          a: {
            qj(b7);
            if (a6 === null)
              throw Error(p7(387));
            d8 = b7.pendingProps;
            f8 = b7.memoizedState;
            e13 = f8.element;
            yg(a6, b7);
            Eg(b7, d8, null, c8);
            var g7 = b7.memoizedState;
            d8 = g7.element;
            if (f8.isDehydrated)
              if (f8 = {
                element: d8,
                isDehydrated: false,
                cache: g7.cache,
                pendingSuspenseBoundaries: g7.pendingSuspenseBoundaries,
                transitions: g7.transitions
              }, b7.updateQueue.baseState = f8, b7.memoizedState = f8, b7.flags & 256) {
                e13 = Error(p7(423));
                b7 = rj(a6, b7, d8, c8, e13);
                break a;
              } else if (d8 !== e13) {
                e13 = Error(p7(424));
                b7 = rj(a6, b7, d8, c8, e13);
                break a;
              } else
                for (eh = Kf(b7.stateNode.containerInfo.firstChild), dh = b7, I4 = true, fh = null, c8 = zh(b7, null, d8, c8), b7.child = c8; c8; )
                  c8.flags = c8.flags & -3 | 4096, c8 = c8.sibling;
            else {
              nh();
              if (d8 === e13) {
                b7 = gj(a6, b7, c8);
                break a;
              }
              ej(a6, b7, d8, c8);
            }
            b7 = b7.child;
          }
          return b7;
        case 5:
          return Hh(b7), a6 === null && kh(b7), d8 = b7.type, e13 = b7.pendingProps, f8 = a6 !== null ? a6.memoizedProps : null, g7 = e13.children, Df(d8, e13) ? g7 = null : f8 !== null && Df(d8, f8) && (b7.flags |= 32), nj(a6, b7), ej(a6, b7, g7, c8), b7.child;
        case 6:
          return a6 === null && kh(b7), null;
        case 13:
          return vj(a6, b7, c8);
        case 4:
          return Fh(b7, b7.stateNode.containerInfo), d8 = b7.pendingProps, a6 === null ? b7.child = yh(b7, null, d8, c8) : ej(a6, b7, d8, c8), b7.child;
        case 11:
          return d8 = b7.type, e13 = b7.pendingProps, e13 = b7.elementType === d8 ? e13 : kg(d8, e13), fj(a6, b7, d8, e13, c8);
        case 7:
          return ej(a6, b7, b7.pendingProps, c8), b7.child;
        case 8:
          return ej(a6, b7, b7.pendingProps.children, c8), b7.child;
        case 12:
          return ej(a6, b7, b7.pendingProps.children, c8), b7.child;
        case 10:
          a: {
            d8 = b7.type._context;
            e13 = b7.pendingProps;
            f8 = b7.memoizedProps;
            g7 = e13.value;
            G3(lg, d8._currentValue);
            d8._currentValue = g7;
            if (f8 !== null)
              if (Ge(f8.value, g7)) {
                if (f8.children === e13.children && !Vf.current) {
                  b7 = gj(a6, b7, c8);
                  break a;
                }
              } else
                for (f8 = b7.child, f8 !== null && (f8.return = b7); f8 !== null; ) {
                  var h6 = f8.dependencies;
                  if (h6 !== null) {
                    g7 = f8.child;
                    for (var k4 = h6.firstContext; k4 !== null; ) {
                      if (k4.context === d8) {
                        if (f8.tag === 1) {
                          k4 = zg(-1, c8 & -c8);
                          k4.tag = 2;
                          var l8 = f8.updateQueue;
                          if (l8 !== null) {
                            l8 = l8.shared;
                            var n6 = l8.pending;
                            n6 === null ? k4.next = k4 : (k4.next = n6.next, n6.next = k4);
                            l8.pending = k4;
                          }
                        }
                        f8.lanes |= c8;
                        k4 = f8.alternate;
                        k4 !== null && (k4.lanes |= c8);
                        rg(f8.return, c8, b7);
                        h6.lanes |= c8;
                        break;
                      }
                      k4 = k4.next;
                    }
                  } else if (f8.tag === 10)
                    g7 = f8.type === b7.type ? null : f8.child;
                  else if (f8.tag === 18) {
                    g7 = f8.return;
                    if (g7 === null)
                      throw Error(p7(341));
                    g7.lanes |= c8;
                    h6 = g7.alternate;
                    h6 !== null && (h6.lanes |= c8);
                    rg(g7, c8, b7);
                    g7 = f8.sibling;
                  } else
                    g7 = f8.child;
                  if (g7 !== null)
                    g7.return = f8;
                  else
                    for (g7 = f8; g7 !== null; ) {
                      if (g7 === b7) {
                        g7 = null;
                        break;
                      }
                      f8 = g7.sibling;
                      if (f8 !== null) {
                        f8.return = g7.return;
                        g7 = f8;
                        break;
                      }
                      g7 = g7.return;
                    }
                  f8 = g7;
                }
            ej(a6, b7, e13.children, c8);
            b7 = b7.child;
          }
          return b7;
        case 9:
          return e13 = b7.type, d8 = b7.pendingProps.children, sg(b7, c8), e13 = ug(e13), d8 = d8(e13), b7.flags |= 1, ej(a6, b7, d8, c8), b7.child;
        case 14:
          return d8 = b7.type, e13 = kg(d8, b7.pendingProps), e13 = kg(d8.type, e13), hj(a6, b7, d8, e13, c8);
        case 15:
          return jj(a6, b7, b7.type, b7.pendingProps, c8);
        case 17:
          return d8 = b7.type, e13 = b7.pendingProps, e13 = b7.elementType === d8 ? e13 : kg(d8, e13), a6 !== null && (a6.alternate = null, b7.alternate = null, b7.flags |= 2), b7.tag = 1, Yf(d8) ? (a6 = true, bg(b7)) : a6 = false, sg(b7, c8), Og(b7, d8, e13), Qg(b7, d8, e13, c8), pj(null, b7, d8, true, a6, c8);
        case 19:
          return Ej(a6, b7, c8);
        case 22:
          return lj(a6, b7, c8);
      }
      throw Error(p7(156, b7.tag));
    };
    function Ek(a6, b7) {
      return $b(a6, b7);
    }
    function Zk(a6, b7, c8, d8) {
      this.tag = a6;
      this.key = c8;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b7;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d8;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function hh(a6, b7, c8, d8) {
      return new Zk(a6, b7, c8, d8);
    }
    function ij(a6) {
      a6 = a6.prototype;
      return !(!a6 || !a6.isReactComponent);
    }
    function Yk(a6) {
      if (typeof a6 === "function")
        return ij(a6) ? 1 : 0;
      if (a6 !== void 0 && a6 !== null) {
        a6 = a6.$$typeof;
        if (a6 === Ca)
          return 11;
        if (a6 === Fa)
          return 14;
      }
      return 2;
    }
    function th(a6, b7) {
      var c8 = a6.alternate;
      c8 === null ? (c8 = hh(a6.tag, b7, a6.key, a6.mode), c8.elementType = a6.elementType, c8.type = a6.type, c8.stateNode = a6.stateNode, c8.alternate = a6, a6.alternate = c8) : (c8.pendingProps = b7, c8.type = a6.type, c8.flags = 0, c8.subtreeFlags = 0, c8.deletions = null);
      c8.flags = a6.flags & 14680064;
      c8.childLanes = a6.childLanes;
      c8.lanes = a6.lanes;
      c8.child = a6.child;
      c8.memoizedProps = a6.memoizedProps;
      c8.memoizedState = a6.memoizedState;
      c8.updateQueue = a6.updateQueue;
      b7 = a6.dependencies;
      c8.dependencies = b7 === null ? null : { lanes: b7.lanes, firstContext: b7.firstContext };
      c8.sibling = a6.sibling;
      c8.index = a6.index;
      c8.ref = a6.ref;
      return c8;
    }
    function vh(a6, b7, c8, d8, e13, f8) {
      var g7 = 2;
      d8 = a6;
      if (typeof a6 === "function")
        ij(a6) && (g7 = 1);
      else if (typeof a6 === "string")
        g7 = 5;
      else
        a:
          switch (a6) {
            case wa:
              return xh(c8.children, e13, f8, b7);
            case xa:
              g7 = 8;
              e13 |= 8;
              break;
            case za:
              return a6 = hh(12, c8, b7, e13 | 2), a6.elementType = za, a6.lanes = f8, a6;
            case Da:
              return a6 = hh(13, c8, b7, e13), a6.elementType = Da, a6.lanes = f8, a6;
            case Ea:
              return a6 = hh(19, c8, b7, e13), a6.elementType = Ea, a6.lanes = f8, a6;
            case Ha:
              return wj(c8, e13, f8, b7);
            default:
              if (typeof a6 === "object" && a6 !== null)
                switch (a6.$$typeof) {
                  case Aa:
                    g7 = 10;
                    break a;
                  case Ba:
                    g7 = 9;
                    break a;
                  case Ca:
                    g7 = 11;
                    break a;
                  case Fa:
                    g7 = 14;
                    break a;
                  case Ga:
                    g7 = 16;
                    d8 = null;
                    break a;
                }
              throw Error(p7(130, a6 == null ? a6 : typeof a6, ""));
          }
      b7 = hh(g7, c8, b7, e13);
      b7.elementType = a6;
      b7.type = d8;
      b7.lanes = f8;
      return b7;
    }
    function xh(a6, b7, c8, d8) {
      a6 = hh(7, a6, d8, b7);
      a6.lanes = c8;
      return a6;
    }
    function wj(a6, b7, c8, d8) {
      a6 = hh(22, a6, d8, b7);
      a6.elementType = Ha;
      a6.lanes = c8;
      a6.stateNode = {};
      return a6;
    }
    function uh(a6, b7, c8) {
      a6 = hh(6, a6, null, b7);
      a6.lanes = c8;
      return a6;
    }
    function wh(a6, b7, c8) {
      b7 = hh(4, a6.children !== null ? a6.children : [], a6.key, b7);
      b7.lanes = c8;
      b7.stateNode = { containerInfo: a6.containerInfo, pendingChildren: null, implementation: a6.implementation };
      return b7;
    }
    function $k(a6, b7, c8, d8, e13) {
      this.tag = b7;
      this.containerInfo = a6;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = yc(0);
      this.expirationTimes = yc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = yc(0);
      this.identifierPrefix = d8;
      this.onRecoverableError = e13;
      this.mutableSourceEagerHydrationData = null;
    }
    function al(a6, b7, c8, d8, e13, f8, g7, h6, k4) {
      a6 = new $k(a6, b7, c8, h6, k4);
      b7 === 1 ? (b7 = 1, f8 === true && (b7 |= 8)) : b7 = 0;
      f8 = hh(3, null, null, b7);
      a6.current = f8;
      f8.stateNode = a6;
      f8.memoizedState = { element: d8, isDehydrated: c8, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      xg(f8);
      return a6;
    }
    function bl(a6, b7, c8) {
      var d8 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: va, key: d8 == null ? null : "" + d8, children: a6, containerInfo: b7, implementation: c8 };
    }
    function cl(a6) {
      if (!a6)
        return Uf;
      a6 = a6._reactInternals;
      a: {
        if (Ub(a6) !== a6 || a6.tag !== 1)
          throw Error(p7(170));
        var b7 = a6;
        do {
          switch (b7.tag) {
            case 3:
              b7 = b7.stateNode.context;
              break a;
            case 1:
              if (Yf(b7.type)) {
                b7 = b7.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b7 = b7.return;
        } while (b7 !== null);
        throw Error(p7(171));
      }
      if (a6.tag === 1) {
        var c8 = a6.type;
        if (Yf(c8))
          return ag(a6, c8, b7);
      }
      return b7;
    }
    function dl(a6, b7, c8, d8, e13, f8, g7, h6, k4) {
      a6 = al(c8, d8, true, a6, e13, f8, g7, h6, k4);
      a6.context = cl(null);
      c8 = a6.current;
      d8 = Jg();
      e13 = Kg(c8);
      f8 = zg(d8, e13);
      f8.callback = b7 !== void 0 && b7 !== null ? b7 : null;
      Ag(c8, f8);
      a6.current.lanes = e13;
      zc(a6, e13, d8);
      Ck(a6, d8);
      return a6;
    }
    function el(a6, b7, c8, d8) {
      var e13 = b7.current, f8 = Jg(), g7 = Kg(e13);
      c8 = cl(c8);
      b7.context === null ? b7.context = c8 : b7.pendingContext = c8;
      b7 = zg(f8, g7);
      b7.payload = { element: a6 };
      d8 = d8 === void 0 ? null : d8;
      d8 !== null && (b7.callback = d8);
      Ag(e13, b7);
      a6 = Lg(e13, g7, f8);
      a6 !== null && Cg(a6, e13, g7);
      return g7;
    }
    function fl(a6) {
      a6 = a6.current;
      if (!a6.child)
        return null;
      switch (a6.child.tag) {
        case 5:
          return a6.child.stateNode;
        default:
          return a6.child.stateNode;
      }
    }
    function gl(a6, b7) {
      a6 = a6.memoizedState;
      if (a6 !== null && a6.dehydrated !== null) {
        var c8 = a6.retryLane;
        a6.retryLane = c8 !== 0 && c8 < b7 ? c8 : b7;
      }
    }
    function hl(a6, b7) {
      gl(a6, b7);
      (a6 = a6.alternate) && gl(a6, b7);
    }
    function il() {
      return null;
    }
    var jl = typeof reportError === "function" ? reportError : function(a6) {
      console.error(a6);
    };
    function kl(a6) {
      this._internalRoot = a6;
    }
    ll.prototype.render = kl.prototype.render = function(a6) {
      var b7 = this._internalRoot;
      if (b7 === null)
        throw Error(p7(409));
      el(a6, b7, null, null);
    };
    ll.prototype.unmount = kl.prototype.unmount = function() {
      var a6 = this._internalRoot;
      if (a6 !== null) {
        this._internalRoot = null;
        var b7 = a6.containerInfo;
        Qk(function() {
          el(null, a6, null, null);
        });
        b7[tf] = null;
      }
    };
    function ll(a6) {
      this._internalRoot = a6;
    }
    ll.prototype.unstable_scheduleHydration = function(a6) {
      if (a6) {
        var b7 = Gc();
        a6 = { blockedOn: null, target: a6, priority: b7 };
        for (var c8 = 0; c8 < Pc.length && b7 !== 0 && b7 < Pc[c8].priority; c8++)
          ;
        Pc.splice(c8, 0, a6);
        c8 === 0 && Uc(a6);
      }
    };
    function ml(a6) {
      return !(!a6 || a6.nodeType !== 1 && a6.nodeType !== 9 && a6.nodeType !== 11);
    }
    function nl(a6) {
      return !(!a6 || a6.nodeType !== 1 && a6.nodeType !== 9 && a6.nodeType !== 11 && (a6.nodeType !== 8 || a6.nodeValue !== " react-mount-point-unstable "));
    }
    function ol() {
    }
    function pl(a6, b7, c8, d8, e13) {
      if (e13) {
        if (typeof d8 === "function") {
          var f8 = d8;
          d8 = function() {
            var a7 = fl(g7);
            f8.call(a7);
          };
        }
        var g7 = dl(b7, d8, a6, 0, null, false, false, "", ol);
        a6._reactRootContainer = g7;
        a6[tf] = g7.current;
        rf(a6.nodeType === 8 ? a6.parentNode : a6);
        Qk();
        return g7;
      }
      for (; e13 = a6.lastChild; )
        a6.removeChild(e13);
      if (typeof d8 === "function") {
        var h6 = d8;
        d8 = function() {
          var a7 = fl(k4);
          h6.call(a7);
        };
      }
      var k4 = al(a6, 0, false, null, null, false, false, "", ol);
      a6._reactRootContainer = k4;
      a6[tf] = k4.current;
      rf(a6.nodeType === 8 ? a6.parentNode : a6);
      Qk(function() {
        el(b7, k4, c8, d8);
      });
      return k4;
    }
    function ql(a6, b7, c8, d8, e13) {
      var f8 = c8._reactRootContainer;
      if (f8) {
        var g7 = f8;
        if (typeof e13 === "function") {
          var h6 = e13;
          e13 = function() {
            var a7 = fl(g7);
            h6.call(a7);
          };
        }
        el(b7, g7, a6, e13);
      } else
        g7 = pl(c8, b7, a6, e13, d8);
      return fl(g7);
    }
    Dc = function(a6) {
      switch (a6.tag) {
        case 3:
          var b7 = a6.stateNode;
          if (b7.current.memoizedState.isDehydrated) {
            var c8 = sc(b7.pendingLanes);
            c8 !== 0 && (Bc(b7, c8 | 1), Ck(b7, B4()), (W4 & 6) === 0 && (aj = B4() + 500, ig()));
          }
          break;
        case 13:
          var d8 = Jg();
          Qk(function() {
            return Lg(a6, 1, d8);
          });
          hl(a6, 1);
      }
    };
    Ec = function(a6) {
      if (a6.tag === 13) {
        var b7 = Jg();
        Lg(a6, 134217728, b7);
        hl(a6, 134217728);
      }
    };
    Fc = function(a6) {
      if (a6.tag === 13) {
        var b7 = Jg(), c8 = Kg(a6);
        Lg(a6, c8, b7);
        hl(a6, c8);
      }
    };
    Gc = function() {
      return C6;
    };
    Hc = function(a6, b7) {
      var c8 = C6;
      try {
        return C6 = a6, b7();
      } finally {
        C6 = c8;
      }
    };
    xb = function(a6, b7, c8) {
      switch (b7) {
        case "input":
          $a(a6, c8);
          b7 = c8.name;
          if (c8.type === "radio" && b7 != null) {
            for (c8 = a6; c8.parentNode; )
              c8 = c8.parentNode;
            c8 = c8.querySelectorAll("input[name=" + JSON.stringify("" + b7) + '][type="radio"]');
            for (b7 = 0; b7 < c8.length; b7++) {
              var d8 = c8[b7];
              if (d8 !== a6 && d8.form === a6.form) {
                var e13 = Cb(d8);
                if (!e13)
                  throw Error(p7(90));
                Va(d8);
                $a(d8, e13);
              }
            }
          }
          break;
        case "textarea":
          hb(a6, c8);
          break;
        case "select":
          b7 = c8.value, b7 != null && eb(a6, !!c8.multiple, b7, false);
      }
    };
    Fb = Pk;
    Gb = Qk;
    var rl = { usingClientEntryPoint: false, Events: [Bb, te, Cb, Db, Eb, Pk] };
    var sl = { findFiberByHostInstance: Vc, bundleType: 0, version: "18.1.0", rendererPackageName: "react-dom" };
    var tl = { bundleType: sl.bundleType, version: sl.version, rendererPackageName: sl.rendererPackageName, rendererConfig: sl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ta.ReactCurrentDispatcher, findHostInstanceByFiber: function(a6) {
      a6 = Yb(a6);
      return a6 === null ? null : a6.stateNode;
    }, findFiberByHostInstance: sl.findFiberByHostInstance || il, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.1.0-next-22edb9f77-20220426" };
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
      ul = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!ul.isDisabled && ul.supportsFiber)
        try {
          jc = ul.inject(tl), kc = ul;
        } catch (a6) {
        }
    }
    var ul;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = rl;
    exports.createPortal = function(a6, b7) {
      var c8 = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
      if (!ml(b7))
        throw Error(p7(200));
      return bl(a6, b7, null, c8);
    };
    exports.createRoot = function(a6, b7) {
      if (!ml(a6))
        throw Error(p7(299));
      var c8 = false, d8 = "", e13 = jl;
      b7 !== null && b7 !== void 0 && (b7.unstable_strictMode === true && (c8 = true), b7.identifierPrefix !== void 0 && (d8 = b7.identifierPrefix), b7.onRecoverableError !== void 0 && (e13 = b7.onRecoverableError));
      b7 = al(a6, 1, false, null, null, c8, false, d8, e13);
      a6[tf] = b7.current;
      rf(a6.nodeType === 8 ? a6.parentNode : a6);
      return new kl(b7);
    };
    exports.findDOMNode = function(a6) {
      if (a6 == null)
        return null;
      if (a6.nodeType === 1)
        return a6;
      var b7 = a6._reactInternals;
      if (b7 === void 0) {
        if (typeof a6.render === "function")
          throw Error(p7(188));
        a6 = Object.keys(a6).join(",");
        throw Error(p7(268, a6));
      }
      a6 = Yb(b7);
      a6 = a6 === null ? null : a6.stateNode;
      return a6;
    };
    exports.flushSync = function(a6) {
      return Qk(a6);
    };
    exports.hydrate = function(a6, b7, c8) {
      if (!nl(b7))
        throw Error(p7(200));
      return ql(null, a6, b7, true, c8);
    };
    exports.hydrateRoot = function(a6, b7, c8) {
      if (!ml(a6))
        throw Error(p7(405));
      var d8 = c8 != null && c8.hydratedSources || null, e13 = false, f8 = "", g7 = jl;
      c8 !== null && c8 !== void 0 && (c8.unstable_strictMode === true && (e13 = true), c8.identifierPrefix !== void 0 && (f8 = c8.identifierPrefix), c8.onRecoverableError !== void 0 && (g7 = c8.onRecoverableError));
      b7 = dl(b7, null, a6, 1, c8 != null ? c8 : null, e13, false, f8, g7);
      a6[tf] = b7.current;
      rf(a6);
      if (d8)
        for (a6 = 0; a6 < d8.length; a6++)
          c8 = d8[a6], e13 = c8._getVersion, e13 = e13(c8._source), b7.mutableSourceEagerHydrationData == null ? b7.mutableSourceEagerHydrationData = [c8, e13] : b7.mutableSourceEagerHydrationData.push(c8, e13);
      return new ll(b7);
    };
    exports.render = function(a6, b7, c8) {
      if (!nl(b7))
        throw Error(p7(200));
      return ql(null, a6, b7, false, c8);
    };
    exports.unmountComponentAtNode = function(a6) {
      if (!nl(a6))
        throw Error(p7(40));
      return a6._reactRootContainer ? (Qk(function() {
        ql(null, null, a6, false, function() {
          a6._reactRootContainer = null;
          a6[tf] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = Pk;
    exports.unstable_renderSubtreeIntoContainer = function(a6, b7, c8, d8) {
      if (!nl(c8))
        throw Error(p7(200));
      if (a6 == null || a6._reactInternals === void 0)
        throw Error(p7(38));
      return ql(a6, b7, c8, false, d8);
    };
    exports.version = "18.1.0-next-22edb9f77-20220426";
  }
});

// ../../node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "../../node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (false) {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (true) {
      checkDCE();
      module2.exports = require_react_dom_production_min();
    } else {
      module2.exports = null;
    }
  }
});

// ../../node_modules/react-dom/client.js
var require_client = __commonJS({
  "../../node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m8 = require_react_dom();
    if (true) {
      exports.createRoot = m8.createRoot;
      exports.hydrateRoot = m8.hydrateRoot;
    } else {
      i7 = m8.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c8, o10) {
        i7.usingClientEntryPoint = true;
        try {
          return m8.createRoot(c8, o10);
        } finally {
          i7.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c8, h6, o10) {
        i7.usingClientEntryPoint = true;
        try {
          return m8.hydrateRoot(c8, h6, o10);
        } finally {
          i7.usingClientEntryPoint = false;
        }
      };
    }
    var i7;
  }
});

// ../../node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "../../node_modules/tslib/tslib.js"(exports, module2) {
    var __extends4;
    var __assign5;
    var __rest5;
    var __decorate4;
    var __param4;
    var __metadata4;
    var __awaiter5;
    var __generator4;
    var __exportStar4;
    var __values5;
    var __read5;
    var __spread4;
    var __spreadArrays4;
    var __spreadArray2;
    var __await4;
    var __asyncGenerator4;
    var __asyncDelegator4;
    var __asyncValues4;
    var __makeTemplateObject4;
    var __importStar4;
    var __importDefault4;
    var __classPrivateFieldGet4;
    var __classPrivateFieldSet4;
    var __classPrivateFieldIn2;
    var __createBinding4;
    (function(factory) {
      var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root2, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root2, createExporter(module2.exports)));
      } else {
        factory(createExporter(root2));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root2) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v6) {
          return exports2[id] = previous ? previous(id, v6) : v6;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d8, b7) {
        d8.__proto__ = b7;
      } || function(d8, b7) {
        for (var p7 in b7)
          if (Object.prototype.hasOwnProperty.call(b7, p7))
            d8[p7] = b7[p7];
      };
      __extends4 = function(d8, b7) {
        if (typeof b7 !== "function" && b7 !== null)
          throw new TypeError("Class extends value " + String(b7) + " is not a constructor or null");
        extendStatics(d8, b7);
        function __() {
          this.constructor = d8;
        }
        d8.prototype = b7 === null ? Object.create(b7) : (__.prototype = b7.prototype, new __());
      };
      __assign5 = Object.assign || function(t12) {
        for (var s9, i7 = 1, n6 = arguments.length; i7 < n6; i7++) {
          s9 = arguments[i7];
          for (var p7 in s9)
            if (Object.prototype.hasOwnProperty.call(s9, p7))
              t12[p7] = s9[p7];
        }
        return t12;
      };
      __rest5 = function(s9, e13) {
        var t12 = {};
        for (var p7 in s9)
          if (Object.prototype.hasOwnProperty.call(s9, p7) && e13.indexOf(p7) < 0)
            t12[p7] = s9[p7];
        if (s9 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i7 = 0, p7 = Object.getOwnPropertySymbols(s9); i7 < p7.length; i7++) {
            if (e13.indexOf(p7[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s9, p7[i7]))
              t12[p7[i7]] = s9[p7[i7]];
          }
        return t12;
      };
      __decorate4 = function(decorators, target, key, desc) {
        var c8 = arguments.length, r12 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d8;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r12 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i7 = decorators.length - 1; i7 >= 0; i7--)
            if (d8 = decorators[i7])
              r12 = (c8 < 3 ? d8(r12) : c8 > 3 ? d8(target, key, r12) : d8(target, key)) || r12;
        return c8 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
      };
      __param4 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata4 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter5 = function(thisArg, _arguments, P3, generator) {
        function adopt(value) {
          return value instanceof P3 ? value : new P3(function(resolve) {
            resolve(value);
          });
        }
        return new (P3 || (P3 = Promise))(function(resolve, reject2) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator4 = function(thisArg, body) {
        var _4 = { label: 0, sent: function() {
          if (t12[0] & 1)
            throw t12[1];
          return t12[1];
        }, trys: [], ops: [] }, f8, y4, t12, g7;
        return g7 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g7[Symbol.iterator] = function() {
          return this;
        }), g7;
        function verb(n6) {
          return function(v6) {
            return step([n6, v6]);
          };
        }
        function step(op) {
          if (f8)
            throw new TypeError("Generator is already executing.");
          while (_4)
            try {
              if (f8 = 1, y4 && (t12 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t12 = y4["return"]) && t12.call(y4), 0) : y4.next) && !(t12 = t12.call(y4, op[1])).done)
                return t12;
              if (y4 = 0, t12)
                op = [op[0] & 2, t12.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t12 = op;
                  break;
                case 4:
                  _4.label++;
                  return { value: op[1], done: false };
                case 5:
                  _4.label++;
                  y4 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _4.ops.pop();
                  _4.trys.pop();
                  continue;
                default:
                  if (!(t12 = _4.trys, t12 = t12.length > 0 && t12[t12.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _4 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t12 || op[1] > t12[0] && op[1] < t12[3])) {
                    _4.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _4.label < t12[1]) {
                    _4.label = t12[1];
                    t12 = op;
                    break;
                  }
                  if (t12 && _4.label < t12[2]) {
                    _4.label = t12[2];
                    _4.ops.push(op);
                    break;
                  }
                  if (t12[2])
                    _4.ops.pop();
                  _4.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _4);
            } catch (e13) {
              op = [6, e13];
              y4 = 0;
            } finally {
              f8 = t12 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar4 = function(m8, o10) {
        for (var p7 in m8)
          if (p7 !== "default" && !Object.prototype.hasOwnProperty.call(o10, p7))
            __createBinding4(o10, m8, p7);
      };
      __createBinding4 = Object.create ? function(o10, m8, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        var desc = Object.getOwnPropertyDescriptor(m8, k4);
        if (!desc || ("get" in desc ? !m8.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m8[k4];
          } };
        }
        Object.defineProperty(o10, k22, desc);
      } : function(o10, m8, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        o10[k22] = m8[k4];
      };
      __values5 = function(o10) {
        var s9 = typeof Symbol === "function" && Symbol.iterator, m8 = s9 && o10[s9], i7 = 0;
        if (m8)
          return m8.call(o10);
        if (o10 && typeof o10.length === "number")
          return {
            next: function() {
              if (o10 && i7 >= o10.length)
                o10 = void 0;
              return { value: o10 && o10[i7++], done: !o10 };
            }
          };
        throw new TypeError(s9 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read5 = function(o10, n6) {
        var m8 = typeof Symbol === "function" && o10[Symbol.iterator];
        if (!m8)
          return o10;
        var i7 = m8.call(o10), r12, ar = [], e13;
        try {
          while ((n6 === void 0 || n6-- > 0) && !(r12 = i7.next()).done)
            ar.push(r12.value);
        } catch (error) {
          e13 = { error };
        } finally {
          try {
            if (r12 && !r12.done && (m8 = i7["return"]))
              m8.call(i7);
          } finally {
            if (e13)
              throw e13.error;
          }
        }
        return ar;
      };
      __spread4 = function() {
        for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
          ar = ar.concat(__read5(arguments[i7]));
        return ar;
      };
      __spreadArrays4 = function() {
        for (var s9 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
          s9 += arguments[i7].length;
        for (var r12 = Array(s9), k4 = 0, i7 = 0; i7 < il; i7++)
          for (var a6 = arguments[i7], j4 = 0, jl = a6.length; j4 < jl; j4++, k4++)
            r12[k4] = a6[j4];
        return r12;
      };
      __spreadArray2 = function(to21, from, pack) {
        if (pack || arguments.length === 2)
          for (var i7 = 0, l8 = from.length, ar; i7 < l8; i7++) {
            if (ar || !(i7 in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i7);
              ar[i7] = from[i7];
            }
          }
        return to21.concat(ar || Array.prototype.slice.call(from));
      };
      __await4 = function(v6) {
        return this instanceof __await4 ? (this.v = v6, this) : new __await4(v6);
      };
      __asyncGenerator4 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g7 = generator.apply(thisArg, _arguments || []), i7, q3 = [];
        return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7;
        function verb(n6) {
          if (g7[n6])
            i7[n6] = function(v6) {
              return new Promise(function(a6, b7) {
                q3.push([n6, v6, a6, b7]) > 1 || resume(n6, v6);
              });
            };
        }
        function resume(n6, v6) {
          try {
            step(g7[n6](v6));
          } catch (e13) {
            settle(q3[0][3], e13);
          }
        }
        function step(r12) {
          r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q3[0][2], r12);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject2(value) {
          resume("throw", value);
        }
        function settle(f8, v6) {
          if (f8(v6), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator4 = function(o10) {
        var i7, p7;
        return i7 = {}, verb("next"), verb("throw", function(e13) {
          throw e13;
        }), verb("return"), i7[Symbol.iterator] = function() {
          return this;
        }, i7;
        function verb(n6, f8) {
          i7[n6] = o10[n6] ? function(v6) {
            return (p7 = !p7) ? { value: __await4(o10[n6](v6)), done: n6 === "return" } : f8 ? f8(v6) : v6;
          } : f8;
        }
      };
      __asyncValues4 = function(o10) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m8 = o10[Symbol.asyncIterator], i7;
        return m8 ? m8.call(o10) : (o10 = typeof __values5 === "function" ? __values5(o10) : o10[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7);
        function verb(n6) {
          i7[n6] = o10[n6] && function(v6) {
            return new Promise(function(resolve, reject2) {
              v6 = o10[n6](v6), settle(resolve, reject2, v6.done, v6.value);
            });
          };
        }
        function settle(resolve, reject2, d8, v6) {
          Promise.resolve(v6).then(function(v7) {
            resolve({ value: v7, done: d8 });
          }, reject2);
        }
      };
      __makeTemplateObject4 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o10, v6) {
        Object.defineProperty(o10, "default", { enumerable: true, value: v6 });
      } : function(o10, v6) {
        o10["default"] = v6;
      };
      __importStar4 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k4 in mod)
            if (k4 !== "default" && Object.prototype.hasOwnProperty.call(mod, k4))
              __createBinding4(result, mod, k4);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault4 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet4 = function(receiver, state, kind, f8) {
        if (kind === "a" && !f8)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f8 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f8 : kind === "a" ? f8.call(receiver) : f8 ? f8.value : state.get(receiver);
      };
      __classPrivateFieldSet4 = function(receiver, state, value, kind, f8) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f8)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f8 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f8.call(receiver, value) : f8 ? f8.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends4);
      exporter("__assign", __assign5);
      exporter("__rest", __rest5);
      exporter("__decorate", __decorate4);
      exporter("__param", __param4);
      exporter("__metadata", __metadata4);
      exporter("__awaiter", __awaiter5);
      exporter("__generator", __generator4);
      exporter("__exportStar", __exportStar4);
      exporter("__createBinding", __createBinding4);
      exporter("__values", __values5);
      exporter("__read", __read5);
      exporter("__spread", __spread4);
      exporter("__spreadArrays", __spreadArrays4);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await4);
      exporter("__asyncGenerator", __asyncGenerator4);
      exporter("__asyncDelegator", __asyncDelegator4);
      exporter("__asyncValues", __asyncValues4);
      exporter("__makeTemplateObject", __makeTemplateObject4);
      exporter("__importStar", __importStar4);
      exporter("__importDefault", __importDefault4);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// ../../node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "../../node_modules/react-is/cjs/react-is.production.min.js"(exports) {
    "use strict";
    var b7 = typeof Symbol === "function" && Symbol.for;
    var c8 = b7 ? Symbol.for("react.element") : 60103;
    var d8 = b7 ? Symbol.for("react.portal") : 60106;
    var e13 = b7 ? Symbol.for("react.fragment") : 60107;
    var f8 = b7 ? Symbol.for("react.strict_mode") : 60108;
    var g7 = b7 ? Symbol.for("react.profiler") : 60114;
    var h6 = b7 ? Symbol.for("react.provider") : 60109;
    var k4 = b7 ? Symbol.for("react.context") : 60110;
    var l8 = b7 ? Symbol.for("react.async_mode") : 60111;
    var m8 = b7 ? Symbol.for("react.concurrent_mode") : 60111;
    var n6 = b7 ? Symbol.for("react.forward_ref") : 60112;
    var p7 = b7 ? Symbol.for("react.suspense") : 60113;
    var q3 = b7 ? Symbol.for("react.suspense_list") : 60120;
    var r12 = b7 ? Symbol.for("react.memo") : 60115;
    var t12 = b7 ? Symbol.for("react.lazy") : 60116;
    var v6 = b7 ? Symbol.for("react.block") : 60121;
    var w7 = b7 ? Symbol.for("react.fundamental") : 60117;
    var x7 = b7 ? Symbol.for("react.responder") : 60118;
    var y4 = b7 ? Symbol.for("react.scope") : 60119;
    function z3(a6) {
      if (typeof a6 === "object" && a6 !== null) {
        var u5 = a6.$$typeof;
        switch (u5) {
          case c8:
            switch (a6 = a6.type, a6) {
              case l8:
              case m8:
              case e13:
              case g7:
              case f8:
              case p7:
                return a6;
              default:
                switch (a6 = a6 && a6.$$typeof, a6) {
                  case k4:
                  case n6:
                  case t12:
                  case r12:
                  case h6:
                    return a6;
                  default:
                    return u5;
                }
            }
          case d8:
            return u5;
        }
      }
    }
    function A4(a6) {
      return z3(a6) === m8;
    }
    exports.AsyncMode = l8;
    exports.ConcurrentMode = m8;
    exports.ContextConsumer = k4;
    exports.ContextProvider = h6;
    exports.Element = c8;
    exports.ForwardRef = n6;
    exports.Fragment = e13;
    exports.Lazy = t12;
    exports.Memo = r12;
    exports.Portal = d8;
    exports.Profiler = g7;
    exports.StrictMode = f8;
    exports.Suspense = p7;
    exports.isAsyncMode = function(a6) {
      return A4(a6) || z3(a6) === l8;
    };
    exports.isConcurrentMode = A4;
    exports.isContextConsumer = function(a6) {
      return z3(a6) === k4;
    };
    exports.isContextProvider = function(a6) {
      return z3(a6) === h6;
    };
    exports.isElement = function(a6) {
      return typeof a6 === "object" && a6 !== null && a6.$$typeof === c8;
    };
    exports.isForwardRef = function(a6) {
      return z3(a6) === n6;
    };
    exports.isFragment = function(a6) {
      return z3(a6) === e13;
    };
    exports.isLazy = function(a6) {
      return z3(a6) === t12;
    };
    exports.isMemo = function(a6) {
      return z3(a6) === r12;
    };
    exports.isPortal = function(a6) {
      return z3(a6) === d8;
    };
    exports.isProfiler = function(a6) {
      return z3(a6) === g7;
    };
    exports.isStrictMode = function(a6) {
      return z3(a6) === f8;
    };
    exports.isSuspense = function(a6) {
      return z3(a6) === p7;
    };
    exports.isValidElementType = function(a6) {
      return typeof a6 === "string" || typeof a6 === "function" || a6 === e13 || a6 === m8 || a6 === g7 || a6 === f8 || a6 === p7 || a6 === q3 || typeof a6 === "object" && a6 !== null && (a6.$$typeof === t12 || a6.$$typeof === r12 || a6.$$typeof === h6 || a6.$$typeof === k4 || a6.$$typeof === n6 || a6.$$typeof === w7 || a6.$$typeof === x7 || a6.$$typeof === y4 || a6.$$typeof === v6);
    };
    exports.typeOf = z3;
  }
});

// ../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (true) {
      module2.exports = require_react_is_production_min();
    } else {
      module2.exports = null;
    }
  }
});

// ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module2) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty3 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype2 = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype2) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype2) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i7 = 0; i7 < keys.length; ++i7) {
          var key = keys[i7];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty3(targetComponent, key, descriptor);
            } catch (e13) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics2;
  }
});

// ../../node_modules/react-remove-scroll/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "../../node_modules/react-remove-scroll/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends4;
    var __assign5;
    var __rest5;
    var __decorate4;
    var __param4;
    var __metadata4;
    var __awaiter5;
    var __generator4;
    var __exportStar4;
    var __values5;
    var __read5;
    var __spread4;
    var __spreadArrays4;
    var __await4;
    var __asyncGenerator4;
    var __asyncDelegator4;
    var __asyncValues4;
    var __makeTemplateObject4;
    var __importStar4;
    var __importDefault4;
    var __classPrivateFieldGet4;
    var __classPrivateFieldSet4;
    var __createBinding4;
    (function(factory) {
      var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root2, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root2, createExporter(module2.exports)));
      } else {
        factory(createExporter(root2));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root2) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v6) {
          return exports2[id] = previous ? previous(id, v6) : v6;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d8, b7) {
        d8.__proto__ = b7;
      } || function(d8, b7) {
        for (var p7 in b7)
          if (b7.hasOwnProperty(p7))
            d8[p7] = b7[p7];
      };
      __extends4 = function(d8, b7) {
        extendStatics(d8, b7);
        function __() {
          this.constructor = d8;
        }
        d8.prototype = b7 === null ? Object.create(b7) : (__.prototype = b7.prototype, new __());
      };
      __assign5 = Object.assign || function(t12) {
        for (var s9, i7 = 1, n6 = arguments.length; i7 < n6; i7++) {
          s9 = arguments[i7];
          for (var p7 in s9)
            if (Object.prototype.hasOwnProperty.call(s9, p7))
              t12[p7] = s9[p7];
        }
        return t12;
      };
      __rest5 = function(s9, e13) {
        var t12 = {};
        for (var p7 in s9)
          if (Object.prototype.hasOwnProperty.call(s9, p7) && e13.indexOf(p7) < 0)
            t12[p7] = s9[p7];
        if (s9 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i7 = 0, p7 = Object.getOwnPropertySymbols(s9); i7 < p7.length; i7++) {
            if (e13.indexOf(p7[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s9, p7[i7]))
              t12[p7[i7]] = s9[p7[i7]];
          }
        return t12;
      };
      __decorate4 = function(decorators, target, key, desc) {
        var c8 = arguments.length, r12 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d8;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r12 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i7 = decorators.length - 1; i7 >= 0; i7--)
            if (d8 = decorators[i7])
              r12 = (c8 < 3 ? d8(r12) : c8 > 3 ? d8(target, key, r12) : d8(target, key)) || r12;
        return c8 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
      };
      __param4 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata4 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter5 = function(thisArg, _arguments, P3, generator) {
        function adopt(value) {
          return value instanceof P3 ? value : new P3(function(resolve) {
            resolve(value);
          });
        }
        return new (P3 || (P3 = Promise))(function(resolve, reject2) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator4 = function(thisArg, body) {
        var _4 = { label: 0, sent: function() {
          if (t12[0] & 1)
            throw t12[1];
          return t12[1];
        }, trys: [], ops: [] }, f8, y4, t12, g7;
        return g7 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g7[Symbol.iterator] = function() {
          return this;
        }), g7;
        function verb(n6) {
          return function(v6) {
            return step([n6, v6]);
          };
        }
        function step(op) {
          if (f8)
            throw new TypeError("Generator is already executing.");
          while (_4)
            try {
              if (f8 = 1, y4 && (t12 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t12 = y4["return"]) && t12.call(y4), 0) : y4.next) && !(t12 = t12.call(y4, op[1])).done)
                return t12;
              if (y4 = 0, t12)
                op = [op[0] & 2, t12.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t12 = op;
                  break;
                case 4:
                  _4.label++;
                  return { value: op[1], done: false };
                case 5:
                  _4.label++;
                  y4 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _4.ops.pop();
                  _4.trys.pop();
                  continue;
                default:
                  if (!(t12 = _4.trys, t12 = t12.length > 0 && t12[t12.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _4 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t12 || op[1] > t12[0] && op[1] < t12[3])) {
                    _4.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _4.label < t12[1]) {
                    _4.label = t12[1];
                    t12 = op;
                    break;
                  }
                  if (t12 && _4.label < t12[2]) {
                    _4.label = t12[2];
                    _4.ops.push(op);
                    break;
                  }
                  if (t12[2])
                    _4.ops.pop();
                  _4.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _4);
            } catch (e13) {
              op = [6, e13];
              y4 = 0;
            } finally {
              f8 = t12 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding4 = function(o10, m8, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        o10[k22] = m8[k4];
      };
      __exportStar4 = function(m8, exports2) {
        for (var p7 in m8)
          if (p7 !== "default" && !exports2.hasOwnProperty(p7))
            exports2[p7] = m8[p7];
      };
      __values5 = function(o10) {
        var s9 = typeof Symbol === "function" && Symbol.iterator, m8 = s9 && o10[s9], i7 = 0;
        if (m8)
          return m8.call(o10);
        if (o10 && typeof o10.length === "number")
          return {
            next: function() {
              if (o10 && i7 >= o10.length)
                o10 = void 0;
              return { value: o10 && o10[i7++], done: !o10 };
            }
          };
        throw new TypeError(s9 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read5 = function(o10, n6) {
        var m8 = typeof Symbol === "function" && o10[Symbol.iterator];
        if (!m8)
          return o10;
        var i7 = m8.call(o10), r12, ar = [], e13;
        try {
          while ((n6 === void 0 || n6-- > 0) && !(r12 = i7.next()).done)
            ar.push(r12.value);
        } catch (error) {
          e13 = { error };
        } finally {
          try {
            if (r12 && !r12.done && (m8 = i7["return"]))
              m8.call(i7);
          } finally {
            if (e13)
              throw e13.error;
          }
        }
        return ar;
      };
      __spread4 = function() {
        for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
          ar = ar.concat(__read5(arguments[i7]));
        return ar;
      };
      __spreadArrays4 = function() {
        for (var s9 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
          s9 += arguments[i7].length;
        for (var r12 = Array(s9), k4 = 0, i7 = 0; i7 < il; i7++)
          for (var a6 = arguments[i7], j4 = 0, jl = a6.length; j4 < jl; j4++, k4++)
            r12[k4] = a6[j4];
        return r12;
      };
      __await4 = function(v6) {
        return this instanceof __await4 ? (this.v = v6, this) : new __await4(v6);
      };
      __asyncGenerator4 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g7 = generator.apply(thisArg, _arguments || []), i7, q3 = [];
        return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7;
        function verb(n6) {
          if (g7[n6])
            i7[n6] = function(v6) {
              return new Promise(function(a6, b7) {
                q3.push([n6, v6, a6, b7]) > 1 || resume(n6, v6);
              });
            };
        }
        function resume(n6, v6) {
          try {
            step(g7[n6](v6));
          } catch (e13) {
            settle(q3[0][3], e13);
          }
        }
        function step(r12) {
          r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q3[0][2], r12);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject2(value) {
          resume("throw", value);
        }
        function settle(f8, v6) {
          if (f8(v6), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator4 = function(o10) {
        var i7, p7;
        return i7 = {}, verb("next"), verb("throw", function(e13) {
          throw e13;
        }), verb("return"), i7[Symbol.iterator] = function() {
          return this;
        }, i7;
        function verb(n6, f8) {
          i7[n6] = o10[n6] ? function(v6) {
            return (p7 = !p7) ? { value: __await4(o10[n6](v6)), done: n6 === "return" } : f8 ? f8(v6) : v6;
          } : f8;
        }
      };
      __asyncValues4 = function(o10) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m8 = o10[Symbol.asyncIterator], i7;
        return m8 ? m8.call(o10) : (o10 = typeof __values5 === "function" ? __values5(o10) : o10[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7);
        function verb(n6) {
          i7[n6] = o10[n6] && function(v6) {
            return new Promise(function(resolve, reject2) {
              v6 = o10[n6](v6), settle(resolve, reject2, v6.done, v6.value);
            });
          };
        }
        function settle(resolve, reject2, d8, v6) {
          Promise.resolve(v6).then(function(v7) {
            resolve({ value: v7, done: d8 });
          }, reject2);
        }
      };
      __makeTemplateObject4 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar4 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k4 in mod)
            if (Object.hasOwnProperty.call(mod, k4))
              result[k4] = mod[k4];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault4 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet4 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet4 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends4);
      exporter("__assign", __assign5);
      exporter("__rest", __rest5);
      exporter("__decorate", __decorate4);
      exporter("__param", __param4);
      exporter("__metadata", __metadata4);
      exporter("__awaiter", __awaiter5);
      exporter("__generator", __generator4);
      exporter("__exportStar", __exportStar4);
      exporter("__createBinding", __createBinding4);
      exporter("__values", __values5);
      exporter("__read", __read5);
      exporter("__spread", __spread4);
      exporter("__spreadArrays", __spreadArrays4);
      exporter("__await", __await4);
      exporter("__asyncGenerator", __asyncGenerator4);
      exporter("__asyncDelegator", __asyncDelegator4);
      exporter("__asyncValues", __asyncValues4);
      exporter("__makeTemplateObject", __makeTemplateObject4);
      exporter("__importStar", __importStar4);
      exporter("__importDefault", __importDefault4);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
    });
  }
});

// ../../node_modules/use-sidecar/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "../../node_modules/use-sidecar/node_modules/tslib/tslib.js"(exports, module2) {
    var __extends4;
    var __assign5;
    var __rest5;
    var __decorate4;
    var __param4;
    var __metadata4;
    var __awaiter5;
    var __generator4;
    var __exportStar4;
    var __values5;
    var __read5;
    var __spread4;
    var __spreadArrays4;
    var __await4;
    var __asyncGenerator4;
    var __asyncDelegator4;
    var __asyncValues4;
    var __makeTemplateObject4;
    var __importStar4;
    var __importDefault4;
    var __classPrivateFieldGet4;
    var __classPrivateFieldSet4;
    var __createBinding4;
    (function(factory) {
      var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root2, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root2, createExporter(module2.exports)));
      } else {
        factory(createExporter(root2));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root2) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v6) {
          return exports2[id] = previous ? previous(id, v6) : v6;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d8, b7) {
        d8.__proto__ = b7;
      } || function(d8, b7) {
        for (var p7 in b7)
          if (b7.hasOwnProperty(p7))
            d8[p7] = b7[p7];
      };
      __extends4 = function(d8, b7) {
        extendStatics(d8, b7);
        function __() {
          this.constructor = d8;
        }
        d8.prototype = b7 === null ? Object.create(b7) : (__.prototype = b7.prototype, new __());
      };
      __assign5 = Object.assign || function(t12) {
        for (var s9, i7 = 1, n6 = arguments.length; i7 < n6; i7++) {
          s9 = arguments[i7];
          for (var p7 in s9)
            if (Object.prototype.hasOwnProperty.call(s9, p7))
              t12[p7] = s9[p7];
        }
        return t12;
      };
      __rest5 = function(s9, e13) {
        var t12 = {};
        for (var p7 in s9)
          if (Object.prototype.hasOwnProperty.call(s9, p7) && e13.indexOf(p7) < 0)
            t12[p7] = s9[p7];
        if (s9 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i7 = 0, p7 = Object.getOwnPropertySymbols(s9); i7 < p7.length; i7++) {
            if (e13.indexOf(p7[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s9, p7[i7]))
              t12[p7[i7]] = s9[p7[i7]];
          }
        return t12;
      };
      __decorate4 = function(decorators, target, key, desc) {
        var c8 = arguments.length, r12 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d8;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r12 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i7 = decorators.length - 1; i7 >= 0; i7--)
            if (d8 = decorators[i7])
              r12 = (c8 < 3 ? d8(r12) : c8 > 3 ? d8(target, key, r12) : d8(target, key)) || r12;
        return c8 > 3 && r12 && Object.defineProperty(target, key, r12), r12;
      };
      __param4 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata4 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter5 = function(thisArg, _arguments, P3, generator) {
        function adopt(value) {
          return value instanceof P3 ? value : new P3(function(resolve) {
            resolve(value);
          });
        }
        return new (P3 || (P3 = Promise))(function(resolve, reject2) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e13) {
              reject2(e13);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator4 = function(thisArg, body) {
        var _4 = { label: 0, sent: function() {
          if (t12[0] & 1)
            throw t12[1];
          return t12[1];
        }, trys: [], ops: [] }, f8, y4, t12, g7;
        return g7 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g7[Symbol.iterator] = function() {
          return this;
        }), g7;
        function verb(n6) {
          return function(v6) {
            return step([n6, v6]);
          };
        }
        function step(op) {
          if (f8)
            throw new TypeError("Generator is already executing.");
          while (_4)
            try {
              if (f8 = 1, y4 && (t12 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t12 = y4["return"]) && t12.call(y4), 0) : y4.next) && !(t12 = t12.call(y4, op[1])).done)
                return t12;
              if (y4 = 0, t12)
                op = [op[0] & 2, t12.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t12 = op;
                  break;
                case 4:
                  _4.label++;
                  return { value: op[1], done: false };
                case 5:
                  _4.label++;
                  y4 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _4.ops.pop();
                  _4.trys.pop();
                  continue;
                default:
                  if (!(t12 = _4.trys, t12 = t12.length > 0 && t12[t12.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _4 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t12 || op[1] > t12[0] && op[1] < t12[3])) {
                    _4.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _4.label < t12[1]) {
                    _4.label = t12[1];
                    t12 = op;
                    break;
                  }
                  if (t12 && _4.label < t12[2]) {
                    _4.label = t12[2];
                    _4.ops.push(op);
                    break;
                  }
                  if (t12[2])
                    _4.ops.pop();
                  _4.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _4);
            } catch (e13) {
              op = [6, e13];
              y4 = 0;
            } finally {
              f8 = t12 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding4 = function(o10, m8, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        o10[k22] = m8[k4];
      };
      __exportStar4 = function(m8, exports2) {
        for (var p7 in m8)
          if (p7 !== "default" && !exports2.hasOwnProperty(p7))
            exports2[p7] = m8[p7];
      };
      __values5 = function(o10) {
        var s9 = typeof Symbol === "function" && Symbol.iterator, m8 = s9 && o10[s9], i7 = 0;
        if (m8)
          return m8.call(o10);
        if (o10 && typeof o10.length === "number")
          return {
            next: function() {
              if (o10 && i7 >= o10.length)
                o10 = void 0;
              return { value: o10 && o10[i7++], done: !o10 };
            }
          };
        throw new TypeError(s9 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read5 = function(o10, n6) {
        var m8 = typeof Symbol === "function" && o10[Symbol.iterator];
        if (!m8)
          return o10;
        var i7 = m8.call(o10), r12, ar = [], e13;
        try {
          while ((n6 === void 0 || n6-- > 0) && !(r12 = i7.next()).done)
            ar.push(r12.value);
        } catch (error) {
          e13 = { error };
        } finally {
          try {
            if (r12 && !r12.done && (m8 = i7["return"]))
              m8.call(i7);
          } finally {
            if (e13)
              throw e13.error;
          }
        }
        return ar;
      };
      __spread4 = function() {
        for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
          ar = ar.concat(__read5(arguments[i7]));
        return ar;
      };
      __spreadArrays4 = function() {
        for (var s9 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
          s9 += arguments[i7].length;
        for (var r12 = Array(s9), k4 = 0, i7 = 0; i7 < il; i7++)
          for (var a6 = arguments[i7], j4 = 0, jl = a6.length; j4 < jl; j4++, k4++)
            r12[k4] = a6[j4];
        return r12;
      };
      __await4 = function(v6) {
        return this instanceof __await4 ? (this.v = v6, this) : new __await4(v6);
      };
      __asyncGenerator4 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g7 = generator.apply(thisArg, _arguments || []), i7, q3 = [];
        return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7;
        function verb(n6) {
          if (g7[n6])
            i7[n6] = function(v6) {
              return new Promise(function(a6, b7) {
                q3.push([n6, v6, a6, b7]) > 1 || resume(n6, v6);
              });
            };
        }
        function resume(n6, v6) {
          try {
            step(g7[n6](v6));
          } catch (e13) {
            settle(q3[0][3], e13);
          }
        }
        function step(r12) {
          r12.value instanceof __await4 ? Promise.resolve(r12.value.v).then(fulfill, reject2) : settle(q3[0][2], r12);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject2(value) {
          resume("throw", value);
        }
        function settle(f8, v6) {
          if (f8(v6), q3.shift(), q3.length)
            resume(q3[0][0], q3[0][1]);
        }
      };
      __asyncDelegator4 = function(o10) {
        var i7, p7;
        return i7 = {}, verb("next"), verb("throw", function(e13) {
          throw e13;
        }), verb("return"), i7[Symbol.iterator] = function() {
          return this;
        }, i7;
        function verb(n6, f8) {
          i7[n6] = o10[n6] ? function(v6) {
            return (p7 = !p7) ? { value: __await4(o10[n6](v6)), done: n6 === "return" } : f8 ? f8(v6) : v6;
          } : f8;
        }
      };
      __asyncValues4 = function(o10) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m8 = o10[Symbol.asyncIterator], i7;
        return m8 ? m8.call(o10) : (o10 = typeof __values5 === "function" ? __values5(o10) : o10[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
          return this;
        }, i7);
        function verb(n6) {
          i7[n6] = o10[n6] && function(v6) {
            return new Promise(function(resolve, reject2) {
              v6 = o10[n6](v6), settle(resolve, reject2, v6.done, v6.value);
            });
          };
        }
        function settle(resolve, reject2, d8, v6) {
          Promise.resolve(v6).then(function(v7) {
            resolve({ value: v7, done: d8 });
          }, reject2);
        }
      };
      __makeTemplateObject4 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar4 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k4 in mod)
            if (Object.hasOwnProperty.call(mod, k4))
              result[k4] = mod[k4];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault4 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet4 = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet4 = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends4);
      exporter("__assign", __assign5);
      exporter("__rest", __rest5);
      exporter("__decorate", __decorate4);
      exporter("__param", __param4);
      exporter("__metadata", __metadata4);
      exporter("__awaiter", __awaiter5);
      exporter("__generator", __generator4);
      exporter("__exportStar", __exportStar4);
      exporter("__createBinding", __createBinding4);
      exporter("__values", __values5);
      exporter("__read", __read5);
      exporter("__spread", __spread4);
      exporter("__spreadArrays", __spreadArrays4);
      exporter("__await", __await4);
      exporter("__asyncGenerator", __asyncGenerator4);
      exporter("__asyncDelegator", __asyncDelegator4);
      exporter("__asyncValues", __asyncValues4);
      exporter("__makeTemplateObject", __makeTemplateObject4);
      exporter("__importStar", __importStar4);
      exporter("__importDefault", __importDefault4);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet4);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet4);
    });
  }
});

// ../../node_modules/react-error-boundary/dist/react-error-boundary.umd.js
var require_react_error_boundary_umd = __commonJS({
  "../../node_modules/react-error-boundary/dist/react-error-boundary.umd.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports, require_react()) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactErrorBoundary = {}, global2.React));
    })(exports, function(exports2, React88) {
      "use strict";
      function _interopNamespace(e13) {
        if (e13 && e13.__esModule)
          return e13;
        var n6 = /* @__PURE__ */ Object.create(null);
        if (e13) {
          Object.keys(e13).forEach(function(k4) {
            if (k4 !== "default") {
              var d8 = Object.getOwnPropertyDescriptor(e13, k4);
              Object.defineProperty(n6, k4, d8.get ? d8 : {
                enumerable: true,
                get: function() {
                  return e13[k4];
                }
              });
            }
          });
        }
        n6["default"] = e13;
        return Object.freeze(n6);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React88);
      function _setPrototypeOf2(o10, p7) {
        _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o11, p8) {
          o11.__proto__ = p8;
          return o11;
        };
        return _setPrototypeOf2(o10, p7);
      }
      function _inheritsLoose2(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf2(subClass, superClass);
      }
      var changedArray = function changedArray2(a6, b7) {
        if (a6 === void 0) {
          a6 = [];
        }
        if (b7 === void 0) {
          b7 = [];
        }
        return a6.length !== b7.length || a6.some(function(item, index2) {
          return !Object.is(item, b7[index2]);
        });
      };
      var initialState = {
        error: null
      };
      var ErrorBoundary2 = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose2(ErrorBoundary3, _React$Component);
        function ErrorBoundary3() {
          var _this;
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
          _this.state = initialState;
          _this.resetErrorBoundary = function() {
            var _this$props;
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);
            _this.reset();
          };
          return _this;
        }
        ErrorBoundary3.getDerivedStateFromError = function getDerivedStateFromError(error) {
          return {
            error
          };
        };
        var _proto = ErrorBoundary3.prototype;
        _proto.reset = function reset() {
          this.setState(initialState);
        };
        _proto.componentDidCatch = function componentDidCatch(error, info) {
          var _this$props$onError, _this$props2;
          (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
          var error = this.state.error;
          var resetKeys = this.props.resetKeys;
          if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
            var _this$props$onResetKe, _this$props3;
            (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
            this.reset();
          }
        };
        _proto.render = function render() {
          var error = this.state.error;
          var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
          if (error !== null) {
            var _props = {
              error,
              resetErrorBoundary: this.resetErrorBoundary
            };
            if (/* @__PURE__ */ React__namespace.isValidElement(fallback)) {
              return fallback;
            } else if (typeof fallbackRender === "function") {
              return fallbackRender(_props);
            } else if (FallbackComponent) {
              return /* @__PURE__ */ React__namespace.createElement(FallbackComponent, _props);
            } else {
              throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
            }
          }
          return this.props.children;
        };
        return ErrorBoundary3;
      }(React__namespace.Component);
      function withErrorBoundary(Component, errorBoundaryProps) {
        var Wrapped = function Wrapped2(props) {
          return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary2, errorBoundaryProps, /* @__PURE__ */ React__namespace.createElement(Component, props));
        };
        var name = Component.displayName || Component.name || "Unknown";
        Wrapped.displayName = "withErrorBoundary(" + name + ")";
        return Wrapped;
      }
      function useErrorHandler(givenError) {
        var _React$useState = React__namespace.useState(null), error = _React$useState[0], setError = _React$useState[1];
        if (givenError != null)
          throw givenError;
        if (error != null)
          throw error;
        return setError;
      }
      exports2.ErrorBoundary = ErrorBoundary2;
      exports2.useErrorHandler = useErrorHandler;
      exports2.withErrorBoundary = withErrorBoundary;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// src/index.tsx
var import_react24 = __toESM(require_react());
var import_client4 = __toESM(require_client());

// ../../node_modules/react-router-dom/index.js
var import_react2 = __toESM(require_react());

// ../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// ../../node_modules/history/index.js
var r;
var B = r || (r = {});
B.Pop = "POP";
B.Push = "PUSH";
B.Replace = "REPLACE";
var C = false ? function(b7) {
  return Object.freeze(b7);
} : function(b7) {
  return b7;
};
function E(b7) {
  b7.preventDefault();
  b7.returnValue = "";
}
function F() {
  var b7 = [];
  return { get length() {
    return b7.length;
  }, push: function(h6) {
    b7.push(h6);
    return function() {
      b7 = b7.filter(function(e13) {
        return e13 !== h6;
      });
    };
  }, call: function(h6) {
    b7.forEach(function(e13) {
      return e13 && e13(h6);
    });
  } };
}
function H() {
  return Math.random().toString(36).substr(2, 8);
}
function I(b7) {
  var h6 = b7.pathname;
  h6 = h6 === void 0 ? "/" : h6;
  var e13 = b7.search;
  e13 = e13 === void 0 ? "" : e13;
  b7 = b7.hash;
  b7 = b7 === void 0 ? "" : b7;
  e13 && e13 !== "?" && (h6 += e13.charAt(0) === "?" ? e13 : "?" + e13);
  b7 && b7 !== "#" && (h6 += b7.charAt(0) === "#" ? b7 : "#" + b7);
  return h6;
}
function J(b7) {
  var h6 = {};
  if (b7) {
    var e13 = b7.indexOf("#");
    0 <= e13 && (h6.hash = b7.substr(e13), b7 = b7.substr(0, e13));
    e13 = b7.indexOf("?");
    0 <= e13 && (h6.search = b7.substr(e13), b7 = b7.substr(0, e13));
    b7 && (h6.pathname = b7);
  }
  return h6;
}
function createHashHistory(b7) {
  function h6() {
    var a6 = J(m8.location.hash.substr(1)), f8 = a6.pathname, l8 = a6.search;
    a6 = a6.hash;
    var k4 = u5.state || {};
    return [k4.idx, C({ pathname: f8 === void 0 ? "/" : f8, search: l8 === void 0 ? "" : l8, hash: a6 === void 0 ? "" : a6, state: k4.usr || null, key: k4.key || "default" })];
  }
  function e13() {
    if (t12)
      c8.call(t12), t12 = null;
    else {
      var a6 = r.Pop, f8 = h6(), l8 = f8[0];
      f8 = f8[1];
      if (c8.length)
        if (l8 != null) {
          var k4 = q3 - l8;
          k4 && (t12 = { action: a6, location: f8, retry: function() {
            p7(-1 * k4);
          } }, p7(k4));
        } else
          false ? D(false, "You are trying to block a POP navigation to a location that was not created by the history library. The block will fail silently in production, but in general you should do all navigation with the history library (instead of using window.history.pushState directly) to avoid this situation.") : void 0;
      else
        A4(a6);
    }
  }
  function x7(a6) {
    var f8 = document.querySelector("base"), l8 = "";
    f8 && f8.getAttribute("href") && (f8 = m8.location.href, l8 = f8.indexOf("#"), l8 = l8 === -1 ? f8 : f8.slice(0, l8));
    return l8 + "#" + (typeof a6 === "string" ? a6 : I(a6));
  }
  function z3(a6, f8) {
    f8 === void 0 && (f8 = null);
    return C(_extends({ pathname: d8.pathname, hash: "", search: "" }, typeof a6 === "string" ? J(a6) : a6, { state: f8, key: H() }));
  }
  function A4(a6) {
    v6 = a6;
    a6 = h6();
    q3 = a6[0];
    d8 = a6[1];
    g7.call({ action: v6, location: d8 });
  }
  function y4(a6, f8) {
    function l8() {
      y4(a6, f8);
    }
    var k4 = r.Push, n6 = z3(a6, f8);
    false ? D(n6.pathname.charAt(0) === "/", "Relative pathnames are not supported in hash history.push(" + JSON.stringify(a6) + ")") : void 0;
    if (!c8.length || (c8.call({ action: k4, location: n6, retry: l8 }), false)) {
      var G3 = [{ usr: n6.state, key: n6.key, idx: q3 + 1 }, x7(n6)];
      n6 = G3[0];
      G3 = G3[1];
      try {
        u5.pushState(n6, "", G3);
      } catch (K3) {
        m8.location.assign(G3);
      }
      A4(k4);
    }
  }
  function w7(a6, f8) {
    function l8() {
      w7(a6, f8);
    }
    var k4 = r.Replace, n6 = z3(a6, f8);
    false ? D(n6.pathname.charAt(0) === "/", "Relative pathnames are not supported in hash history.replace(" + JSON.stringify(a6) + ")") : void 0;
    c8.length && (c8.call({ action: k4, location: n6, retry: l8 }), 1) || (n6 = [{ usr: n6.state, key: n6.key, idx: q3 }, x7(n6)], u5.replaceState(n6[0], "", n6[1]), A4(k4));
  }
  function p7(a6) {
    u5.go(a6);
  }
  b7 === void 0 && (b7 = {});
  b7 = b7.window;
  var m8 = b7 === void 0 ? document.defaultView : b7, u5 = m8.history, t12 = null;
  m8.addEventListener("popstate", e13);
  m8.addEventListener("hashchange", function() {
    var a6 = h6()[1];
    I(a6) !== I(d8) && e13();
  });
  var v6 = r.Pop;
  b7 = h6();
  var q3 = b7[0], d8 = b7[1], g7 = F(), c8 = F();
  q3 == null && (q3 = 0, u5.replaceState(_extends({}, u5.state, { idx: q3 }), ""));
  return {
    get action() {
      return v6;
    },
    get location() {
      return d8;
    },
    createHref: x7,
    push: y4,
    replace: w7,
    go: p7,
    back: function() {
      p7(-1);
    },
    forward: function() {
      p7(1);
    },
    listen: function(a6) {
      return g7.push(a6);
    },
    block: function(a6) {
      var f8 = c8.push(a6);
      c8.length === 1 && m8.addEventListener("beforeunload", E);
      return function() {
        f8();
        c8.length || m8.removeEventListener("beforeunload", E);
      };
    }
  };
}

// ../../node_modules/react-router-dom/node_modules/react-router/index.js
var import_react = __toESM(require_react());
var NavigationContext = /* @__PURE__ */ (0, import_react.createContext)(null);
if (false) {
  NavigationContext.displayName = "Navigation";
}
var LocationContext = /* @__PURE__ */ (0, import_react.createContext)(null);
if (false) {
  LocationContext.displayName = "Location";
}
if (false) {
  RouteContext.displayName = "Route";
}
function invariant(cond, message) {
  if (!cond)
    throw new Error(message);
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let nextChar = pathname.charAt(basename.length);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(basename.length) || "/";
}
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
function useInRouterContext() {
  return (0, import_react.useContext)(LocationContext) != null;
}
function Router(_ref3) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = r.Pop,
    navigator: navigator2,
    static: staticProp = false
  } = _ref3;
  !!useInRouterContext() ? false ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
  let basename = normalizePathname(basenameProp);
  let navigationContext = (0, import_react.useMemo)(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = J(locationProp);
  }
  let {
    pathname = "/",
    search: search3 = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let location2 = (0, import_react.useMemo)(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      pathname: trailingPathname,
      search: search3,
      hash,
      state,
      key
    };
  }, [basename, pathname, search3, hash, state, key]);
  false ? warning(location2 != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search3 + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
  if (location2 == null) {
    return null;
  }
  return /* @__PURE__ */ (0, import_react.createElement)(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ (0, import_react.createElement)(LocationContext.Provider, {
    children,
    value: {
      location: location2,
      navigationType
    }
  }));
}

// ../../node_modules/react-router-dom/index.js
function HashRouter(_ref2) {
  let {
    basename,
    children,
    window: window2
  } = _ref2;
  let historyRef = (0, import_react2.useRef)();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2
    });
  }
  let history = historyRef.current;
  let [state, setState] = (0, import_react2.useState)({
    action: history.action,
    location: history.location
  });
  (0, import_react2.useLayoutEffect)(() => history.listen(setState), [history]);
  return /* @__PURE__ */ (0, import_react2.createElement)(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history
  });
}
if (false) {
  HistoryRouter.displayName = "unstable_HistoryRouter";
}
if (false) {
  Link.displayName = "Link";
}
if (false) {
  NavLink.displayName = "NavLink";
}

// src/multiplayer/multiplayer.tsx
var React86 = __toESM(require_react());

// ../../packages/tldraw/dist/index.mjs
var React83 = __toESM(require_react(), 1);

// ../../node_modules/mobx/dist/mobx.esm.js
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (false) {
    var e13 = typeof error === "string" ? error : errors[error];
    if (typeof e13 === "function")
      e13 = e13.apply(null, args);
    throw new Error("[MobX] " + e13);
  }
  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}
var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return mockGlobal;
}
var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /* @__PURE__ */ Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die(false ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : "Proxy not available");
  }
}
function once(func) {
  var invoked = false;
  return function() {
    if (invoked)
      return;
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop2() {
};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t12 = typeof value;
  switch (t12) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  if (!isObject(value))
    return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null)
    return true;
  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
}
function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor)
    return false;
  if (constructor.name === "GeneratorFunction" || constructor.displayName === "GeneratorFunction")
    return true;
  return false;
}
function addHiddenProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value
  });
}
function addHiddenFinalProp(object2, propName, value) {
  defineProperty(object2, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function(x7) {
    return isObject(x7) && x7[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
function getPlainObjectKeys(object2) {
  var keys = Object.keys(object2);
  if (!hasGetOwnPropertySymbols)
    return keys;
  var symbols = Object.getOwnPropertySymbols(object2);
  if (!symbols.length)
    return keys;
  return [].concat(keys, symbols.filter(function(s9) {
    return objectPrototype.propertyIsEnumerable.call(object2, s9);
  }));
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : Object.getOwnPropertyNames;
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
}
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
  var res = {};
  ownKeys(target).forEach(function(key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};
function _defineProperties(target, props) {
  for (var i7 = 0; i7 < props.length; i7++) {
    var descriptor = props[i7];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i7 = 1; i7 < arguments.length; i7++) {
      var source = arguments[i7];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o10, p7) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o11, p8) {
    o11.__proto__ = p8;
    return o11;
  };
  return _setPrototypeOf(o10, p7);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _unsupportedIterableToArray(o10, minLen) {
  if (!o10)
    return;
  if (typeof o10 === "string")
    return _arrayLikeToArray(o10, minLen);
  var n6 = Object.prototype.toString.call(o10).slice(8, -1);
  if (n6 === "Object" && o10.constructor)
    n6 = o10.constructor.name;
  if (n6 === "Map" || n6 === "Set")
    return Array.from(o10);
  if (n6 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n6))
    return _arrayLikeToArray(o10, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i7 = 0, arr2 = new Array(len); i7 < len; i7++)
    arr2[i7] = arr[i7];
  return arr2;
}
function _createForOfIteratorHelperLoose(o10, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o10[Symbol.iterator] || o10["@@iterator"];
  if (it)
    return (it = it.call(o10)).next.bind(it);
  if (Array.isArray(o10) || (it = _unsupportedIterableToArray(o10)) || allowArrayLike && o10 && typeof o10.length === "number") {
    if (it)
      o10 = it;
    var i7 = 0;
    return function() {
      if (i7 >= o10.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o10[i7++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }
  return Object.assign(decorator, annotation);
}
function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends2({}, prototype[storedAnnotationsSymbol]));
  }
  if (false) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
  }
  assertNotDecorated(prototype, annotation, key);
  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}
function assertNotDecorated(prototype, annotation, key) {
  if (false) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overriden by subclass.");
  }
}
function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if (false) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    }
    addHiddenProp(target, storedAnnotationsSymbol, _extends2({}, target[storedAnnotationsSymbol]));
  }
  return target[storedAnnotationsSymbol];
}
var $mobx = /* @__PURE__ */ Symbol("mobx administration");
var Atom = /* @__PURE__ */ function() {
  function Atom2(name_) {
    if (name_ === void 0) {
      name_ = false ? "Atom@" + getNextId() : "Atom";
    }
    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  }
  var _proto = Atom2.prototype;
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  };
  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };
  _proto.toString = function toString2() {
    return this.name_;
  };
  return Atom2;
}();
var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }
  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }
  var atom = new Atom(name);
  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }
  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }
  return atom;
}
function identityComparer(a6, b7) {
  return a6 === b7;
}
function structuralComparer(a6, b7) {
  return deepEqual(a6, b7);
}
function shallowComparer(a6, b7) {
  return deepEqual(a6, b7, 1);
}
function defaultComparer(a6, b7) {
  if (Object.is)
    return Object.is(a6, b7);
  return a6 === b7 ? a6 !== 0 || 1 / a6 === 1 / b7 : a6 !== a6 && b7 !== b7;
}
var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};
function deepEnhancer(v6, _4, name) {
  if (isObservable(v6))
    return v6;
  if (Array.isArray(v6))
    return observable.array(v6, {
      name
    });
  if (isPlainObject(v6))
    return observable.object(v6, void 0, {
      name
    });
  if (isES6Map(v6))
    return observable.map(v6, {
      name
    });
  if (isES6Set(v6))
    return observable.set(v6, {
      name
    });
  if (typeof v6 === "function" && !isAction(v6) && !isFlow(v6)) {
    if (isGenerator(v6)) {
      return flow(v6);
    } else {
      return autoAction(name, v6);
    }
  }
  return v6;
}
function shallowEnhancer(v6, _4, name) {
  if (v6 === void 0 || v6 === null)
    return v6;
  if (isObservableObject(v6) || isObservableArray(v6) || isObservableMap(v6) || isObservableSet(v6))
    return v6;
  if (Array.isArray(v6))
    return observable.array(v6, {
      name,
      deep: false
    });
  if (isPlainObject(v6))
    return observable.object(v6, void 0, {
      name,
      deep: false
    });
  if (isES6Map(v6))
    return observable.map(v6, {
      name,
      deep: false
    });
  if (isES6Set(v6))
    return observable.set(v6, {
      name,
      deep: false
    });
  if (false)
    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}
function referenceEnhancer(newValue) {
  return newValue;
}
function refStructEnhancer(v6, oldValue) {
  if (false)
    die("observable.struct should not be used with observable values");
  if (deepEqual(v6, oldValue))
    return oldValue;
  return v6;
}
var OVERRIDE = "override";
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}
function createActionAnnotation(name, options2) {
  return {
    annotationType_: name,
    options_: options2,
    make_: make_$1,
    extend_: extend_$1
  };
}
function make_$1(adm, key, descriptor, source) {
  var _this$options_;
  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if (isAction(descriptor.value)) {
    return 1;
  }
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2;
}
function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}
function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (false) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}
function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false, (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0),
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createFlowAnnotation(name, options2) {
  return {
    annotationType_: name,
    options_: options2,
    make_: make_$2,
    extend_: extend_$2
  };
}
function make_$2(adm, key, descriptor, source) {
  var _this$options_;
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
  }
  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
    if (this.extend_(adm, key, descriptor, false) === null)
      return 0;
  }
  if (isFlow(descriptor.value)) {
    return 1;
  }
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2;
}
function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;
  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}
function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;
  if (false) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}
function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }
  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;
  if (!isFlow(value)) {
    value = flow(value);
  }
  if (bound) {
    var _adm$proxy_;
    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    value.isMobXFlow = true;
  }
  return {
    value,
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    enumerable: false,
    writable: safeDescriptors ? false : true
  };
}
function createComputedAnnotation(name, options2) {
  return {
    annotationType_: name,
    options_: options2,
    make_: make_$3,
    extend_: extend_$3
  };
}
function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends2({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}
function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get4 = _ref2.get;
  if (false) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}
function createObservableAnnotation(name, options2) {
  return {
    annotationType_: name,
    options_: options2,
    make_: make_$4,
    extend_: extend_$4
  };
}
function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
}
function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;
  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}
function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;
  if (false) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}
var AUTO = "true";
var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
function createAutoAnnotation(options2) {
  return {
    annotationType_: AUTO,
    options_: options2,
    make_: make_$5,
    extend_: extend_$5
  };
}
function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  }
  if (descriptor.set) {
    var set5 = createAction(key.toString(), descriptor.set);
    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set5
      }) === null ? 0 : 2;
    }
    defineProperty(source, key, {
      configurable: true,
      set: set5
    });
    return 2;
  }
  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;
    if (isGenerator(descriptor.value)) {
      var _this$options_;
      var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
      return flowAnnotation2.make_(adm, key, descriptor, source);
    }
    var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
    return actionAnnotation2.make_(adm, key, descriptor, source);
  }
  var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
    var _adm$proxy_;
    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }
  return observableAnnotation2.make_(adm, key, descriptor, source);
}
function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  }
  if (descriptor.set) {
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  }
  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
    var _adm$proxy_2;
    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }
  var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
}
var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct";
var defaultCreateObservableOptions = {
  deep: true,
  name: void 0,
  defaultDecorator: void 0,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options2) {
  return options2.deep === true ? deepEnhancer : options2.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options2.defaultDecorator);
}
function getAnnotationFromOptions(options2) {
  var _options$defaultDecor;
  return options2 ? (_options$defaultDecor = options2.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options2) : void 0;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;
  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
function createObservable(v6, arg2, arg3) {
  if (isStringish(arg2)) {
    storeAnnotation(v6, arg2, observableAnnotation);
    return;
  }
  if (isObservable(v6))
    return v6;
  if (isPlainObject(v6))
    return observable.object(v6, arg2, arg3);
  if (Array.isArray(v6))
    return observable.array(v6, arg2);
  if (isES6Map(v6))
    return observable.map(v6, arg2);
  if (isES6Set(v6))
    return observable.set(v6, arg2);
  if (typeof v6 === "object" && v6 !== null)
    return v6;
  return observable.box(v6, arg2);
}
Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options2) {
    var o10 = asCreateObservableOptions(options2);
    return new ObservableValue(value, getEnhancerFromOptions(o10), o10.name, true, o10.equals);
  },
  array: function array(initialValues, options2) {
    var o10 = asCreateObservableOptions(options2);
    return (globalState.useProxies === false || o10.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o10), o10.name);
  },
  map: function map(initialValues, options2) {
    var o10 = asCreateObservableOptions(options2);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o10), o10.name);
  },
  set: function set(initialValues, options2) {
    var o10 = asCreateObservableOptions(options2);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o10), o10.name);
  },
  object: function object(props, decorators, options2) {
    return extendObservable(globalState.useProxies === false || (options2 == null ? void 0 : options2.proxy) === false ? asObservableObject({}, options2) : asDynamicObservableObject({}, options2), props, decorators);
  },
  ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
  shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
};
var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
var computed = function computed2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }
  if (isPlainObject(arg1)) {
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  }
  if (false) {
    if (!isFunction(arg1))
      die("First argument to `computed` should be an expression.");
    if (isFunction(arg2))
      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
  }
  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
var _getDescriptor$config;
var _getDescriptor;
var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction2, ref) {
  if (autoAction2 === void 0) {
    autoAction2 = false;
  }
  if (false) {
    if (!isFunction(fn))
      die("`action` can only be invoked on functions");
    if (typeof actionName !== "string" || !actionName)
      die("actions should have valid names, got: '" + actionName + "'");
  }
  function res() {
    return executeAction(actionName, autoAction2, fn, ref || this, arguments);
  }
  res.isMobxAction = true;
  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }
  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation, scope, args) {
  var notifySpy_ = false;
  var startTime_ = 0;
  if (false) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }
  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges;
  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }
  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_,
    prevAllowStateChanges_,
    prevAllowStateReads_,
    notifySpy_,
    startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }
  currentActionId = runInfo.parentActionId_;
  if (runInfo.error_ !== void 0) {
    globalState.suppressReactionErrors = true;
  }
  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_)
    untrackedEnd(runInfo.prevDerivation_);
  if (false) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }
  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges2, func) {
  var prev = allowStateChangesStart(allowStateChanges2);
  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges2) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges2;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}
var _Symbol$toPrimitive;
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /* @__PURE__ */ function(_Atom, _Symbol$toPrimitive2) {
  _inheritsLoose(ObservableValue2, _Atom);
  function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
    var _this;
    if (name_ === void 0) {
      name_ = false ? "ObservableValue@" + getNextId() : "ObservableValue";
    }
    if (notifySpy === void 0) {
      notifySpy = true;
    }
    if (equals === void 0) {
      equals = comparer["default"];
    }
    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, void 0, name_);
    if (false) {
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }
    return _this;
  }
  var _proto = ObservableValue2.prototype;
  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== void 0)
      return this.dehancer(value);
    return value;
  };
  _proto.set = function set5(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      if (false) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue,
          oldValue
        });
      }
      this.setNewValue_(newValue);
      if (false)
        spyReportEnd();
    }
  };
  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue
      });
      if (!change)
        return globalState.UNCHANGED;
      newValue = change.newValue;
    }
    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };
  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();
    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue,
        oldValue
      });
    }
  };
  _proto.get = function get4() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately)
      listener({
        observableKind: "value",
        debugObjectName: this.name_,
        object: this,
        type: UPDATE,
        newValue: this.value_,
        oldValue: void 0
      });
    return registerListener(this, listener);
  };
  _proto.raw = function raw() {
    return this.value_;
  };
  _proto.toJSON = function toJSON2() {
    return this.get();
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.value_ + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive2] = function() {
    return this.valueOf();
  };
  return ObservableValue2;
}(Atom, _Symbol$toPrimitive);
var _Symbol$toPrimitive$1;
_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /* @__PURE__ */ function(_Symbol$toPrimitive2) {
  function ComputedValue2(options2) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = /* @__PURE__ */ new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options2.get)
      die(31);
    this.derivation = options2.get;
    this.name_ = options2.name || (false ? "ComputedValue@" + getNextId() : "ComputedValue");
    if (options2.set) {
      this.setter_ = createAction(false ? this.name_ + "-setter" : "ComputedValue-setter", options2.set);
    }
    this.equals_ = options2.equals || (options2.compareStructural || options2.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options2.context;
    this.requiresReaction_ = options2.requiresReaction;
    this.keepAlive_ = !!options2.keepAlive;
  }
  var _proto = ComputedValue2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };
  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function(listener) {
        return listener();
      });
    }
  };
  _proto.get = function get4() {
    if (this.isComputing_)
      die(32, this.name_, this.derivation);
    if (globalState.inBatch === 0 && this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch();
        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);
      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext)
          globalState.trackingContext = this;
        if (this.trackAndCompute())
          propagateChangeConfirmed(this);
        globalState.trackingContext = prevTrackingContext;
      }
    }
    var result = this.value_;
    if (isCaughtException(result))
      throw result.cause;
    return result;
  };
  _proto.set = function set5(value) {
    if (this.setter_) {
      if (this.isRunningSetter_)
        die(33, this.name_);
      this.isRunningSetter_ = true;
      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else
      die(34, this.name_);
  };
  _proto.trackAndCompute = function trackAndCompute() {
    var oldValue = this.value_;
    var wasSuspended = this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);
    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
    if (changed) {
      this.value_ = newValue;
      if (false) {
        spyReport({
          observableKind: "computed",
          debugObjectName: this.name_,
          object: this.scope_,
          type: "update",
          oldValue,
          newValue
        });
      }
    }
    return changed;
  };
  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true;
    var prev = allowStateChangesStart(false);
    var res;
    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e13) {
          res = new CaughtException(e13);
        }
      }
    }
    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };
  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = void 0;
      if (false) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;
    var firstTime = true;
    var prevValue = void 0;
    return autorun(function() {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }
      firstTime = false;
      prevValue = newValue;
    });
  };
  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (true)
      return;
    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };
  _proto.toString = function toString2() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };
  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };
  _proto[_Symbol$toPrimitive2] = function() {
    return this.valueOf();
  };
  return ComputedValue2;
}(_Symbol$toPrimitive$1);
var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
var IDerivationState_;
(function(IDerivationState_2) {
  IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
  IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
  IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
  IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));
var TraceMode;
(function(TraceMode2) {
  TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
  TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
  TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = function CaughtException2(cause) {
  this.cause = void 0;
  this.cause = cause;
};
function isCaughtException(e13) {
  return e13 instanceof CaughtException;
}
function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;
    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;
    case IDerivationState_.POSSIBLY_STALE_: {
      var prevAllowStateReads = allowStateReadsStart(true);
      var prevUntracked = untrackedStart();
      var obs = derivation.observing_, l8 = obs.length;
      for (var i7 = 0; i7 < l8; i7++) {
        var obj = obs[i7];
        if (isComputedValue(obj)) {
          if (globalState.disableErrorBoundaries) {
            obj.get();
          } else {
            try {
              obj.get();
            } catch (e13) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
          if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return true;
          }
        }
      }
      changeDependenciesStateTo0(derivation);
      untrackedEnd(prevUntracked);
      allowStateReadsEnd(prevAllowStateReads);
      return false;
    }
  }
}
function checkIfStateModificationsAreAllowed(atom) {
  if (true) {
    return;
  }
  var hasObservers = atom.observers_.size > 0;
  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always"))
    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
}
function checkIfStateReadsAreAllowed(observable2) {
  if (false) {
    console.warn("[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
  }
}
function trackDerivedFunction(derivation, f8, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;
  if (globalState.disableErrorBoundaries === true) {
    result = f8.call(context);
  } else {
    try {
      result = f8.call(context);
    } catch (e13) {
      result = new CaughtException(e13);
    }
  }
  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
  if (true)
    return;
  if (derivation.observing_.length !== 0)
    return;
  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
function bindDependencies(derivation) {
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
  var i0 = 0, l8 = derivation.unboundDepsCount_;
  for (var i7 = 0; i7 < l8; i7++) {
    var dep = observing[i7];
    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i7)
        observing[i0] = dep;
      i0++;
    }
    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }
  observing.length = i0;
  derivation.newObserving_ = null;
  l8 = prevObserving.length;
  while (l8--) {
    var _dep = prevObserving[l8];
    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }
    _dep.diffValue_ = 0;
  }
  while (i0--) {
    var _dep2 = observing[i0];
    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  }
  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}
function clearObserving(derivation) {
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i7 = obs.length;
  while (i7--) {
    removeObserver(obs[i7], derivation);
  }
  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action2) {
  var prev = untrackedStart();
  try {
    return action2();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_)
    return;
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i7 = obs.length;
  while (i7--) {
    obs[i7].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}
var MobXGlobals = function MobXGlobals2() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /* @__PURE__ */ function() {
  var global2 = /* @__PURE__ */ getGlobal();
  if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals)
    canMergeGlobalState = false;
  if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version)
    canMergeGlobalState = false;
  if (!canMergeGlobalState) {
    setTimeout(function() {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global2.__mobxGlobals) {
    global2.__mobxInstanceCount += 1;
    if (!global2.__mobxGlobals.UNCHANGED)
      global2.__mobxGlobals.UNCHANGED = {};
    return global2.__mobxGlobals;
  } else {
    global2.__mobxInstanceCount = 1;
    return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions)
    die(36);
  isolateCalled = true;
  if (canMergeGlobalState) {
    var global2 = getGlobal();
    if (--global2.__mobxInstanceCount === 0)
      global2.__mobxGlobals = void 0;
    globalState = new MobXGlobals();
  }
}
function addObserver(observable2, node) {
  observable2.observers_.add(node);
  if (observable2.lowestObserverState_ > node.dependenciesState_)
    observable2.lowestObserverState_ = node.dependenciesState_;
}
function removeObserver(observable2, node) {
  observable2.observers_["delete"](node);
  if (observable2.observers_.size === 0) {
    queueForUnobservation(observable2);
  }
}
function queueForUnobservation(observable2) {
  if (observable2.isPendingUnobservation_ === false) {
    observable2.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable2);
  }
}
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions();
    var list = globalState.pendingUnobservations;
    for (var i7 = 0; i7 < list.length; i7++) {
      var observable2 = list[i7];
      observable2.isPendingUnobservation_ = false;
      if (observable2.observers_.size === 0) {
        if (observable2.isBeingObserved_) {
          observable2.isBeingObserved_ = false;
          observable2.onBUO();
        }
        if (observable2 instanceof ComputedValue) {
          observable2.suspend_();
        }
      }
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable2) {
  checkIfStateReadsAreAllowed(observable2);
  var derivation = globalState.trackingDerivation;
  if (derivation !== null) {
    if (derivation.runId_ !== observable2.lastAccessedBy_) {
      observable2.lastAccessedBy_ = derivation.runId_;
      derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
      if (!observable2.isBeingObserved_ && globalState.trackingContext) {
        observable2.isBeingObserved_ = true;
        observable2.onBO();
      }
    }
    return true;
  } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable2);
  }
  return false;
}
function propagateChanged(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d8) {
    if (d8.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if (false) {
        logTraceInfo(d8, observable2);
      }
      d8.onBecomeStale_();
    }
    d8.dependenciesState_ = IDerivationState_.STALE_;
  });
}
function propagateChangeConfirmed(observable2) {
  if (observable2.lowestObserverState_ === IDerivationState_.STALE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.STALE_;
  observable2.observers_.forEach(function(d8) {
    if (d8.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d8.dependenciesState_ = IDerivationState_.STALE_;
      if (false) {
        logTraceInfo(d8, observable2);
      }
    } else if (d8.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  });
}
function propagateMaybeChanged(observable2) {
  if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_)
    return;
  observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable2.observers_.forEach(function(d8) {
    if (d8.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d8.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d8.onBecomeStale_();
    }
  });
}
var Reaction = /* @__PURE__ */ function() {
  function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ = false ? "Reaction@" + getNextId() : "Reaction";
    }
    if (requiresObservable_ === void 0) {
      requiresObservable_ = false;
    }
    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }
  var _proto = Reaction2.prototype;
  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };
  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };
  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  };
  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;
      if (shouldCompute(this)) {
        this.isTrackPending_ = true;
        try {
          this.onInvalidate_();
          if (false) {
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e13) {
          this.reportExceptionInDerivation_(e13);
        }
      }
      globalState.trackingContext = prev;
      endBatch();
    }
  };
  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return;
    }
    startBatch();
    var notify = isSpyEnabled();
    var startTime;
    if (false) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }
    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext;
    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, void 0);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;
    if (this.isDisposed_) {
      clearObserving(this);
    }
    if (isCaughtException(result))
      this.reportExceptionInDerivation_(result.cause);
    if (false) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }
    endBatch();
  };
  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;
    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }
    if (globalState.disableErrorBoundaries)
      throw error;
    var message = false ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : "[mobx] uncaught error in '" + this + "'";
    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
    } else if (false)
      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
    if (false) {
      spyReport({
        type: "error",
        name: this.name_,
        message,
        error: "" + error
      });
    }
    globalState.globalReactionErrorHandlers.forEach(function(f8) {
      return f8(error, _this);
    });
  };
  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;
      if (!this.isRunning_) {
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };
  _proto.getDisposer_ = function getDisposer_() {
    var r12 = this.dispose.bind(this);
    r12[$mobx] = this;
    return r12;
  };
  _proto.toString = function toString2() {
    return "Reaction[" + this.name_ + "]";
  };
  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }
    trace(this, enterBreakPoint);
  };
  return Reaction2;
}();
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler2(f8) {
  return f8();
};
function runReactions() {
  if (globalState.inBatch > 0 || globalState.isRunningReactions)
    return;
  reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0;
  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error(false ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : "[mobx] cycle in reaction: " + allReactions[0]);
      allReactions.splice(0);
    }
    var remainingReactions = allReactions.splice(0);
    for (var i7 = 0, l8 = remainingReactions.length; i7 < l8; i7++) {
      remainingReactions[i7].runReaction_();
    }
  }
  globalState.isRunningReactions = false;
}
var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function reactionScheduler3(f8) {
    return fn(function() {
      return baseScheduler(f8);
    });
  };
}
function isSpyEnabled() {
  return false;
}
function spy(listener) {
  if (true) {
    console.warn("[mobx.spy] Is a no-op in production builds");
    return function() {
    };
  } else {
    globalState.spyListeners.push(listener);
    return once(function() {
      globalState.spyListeners = globalState.spyListeners.filter(function(l8) {
        return l8 !== listener;
      });
    });
  }
}
var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});
function createActionFactory(autoAction2) {
  var res = function action2(arg1, arg2) {
    if (isFunction(arg1))
      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
    if (isFunction(arg2))
      return createAction(arg1, arg2, autoAction2);
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
    }
    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction2
      }));
    }
    if (false)
      die("Invalid arguments for `action`");
  };
  return res;
}
var action = /* @__PURE__ */ createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /* @__PURE__ */ createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}
function autorun(view, opts) {
  var _opts$name, _opts;
  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }
  if (false) {
    if (!isFunction(view))
      die("Autorun expects a function as first argument");
    if (isAction(view))
      die("Autorun does not accept actions since actions are untrackable");
  }
  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : false ? view.name || "Autorun@" + getNextId() : "Autorun";
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;
  if (runSync) {
    reaction = new Reaction(name, function() {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts);
    var isScheduled = false;
    reaction = new Reaction(name, function() {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function() {
          isScheduled = false;
          if (!reaction.isDisposed_)
            reaction.track(reactionRunner);
        });
      }
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction);
  }
  reaction.schedule_();
  return reaction.getDisposer_();
}
var run = function run2(f8) {
  return f8();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function(f8) {
    return setTimeout(f8, opts.delay);
  } : run;
}
var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";
  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = /* @__PURE__ */ new Set([cb]);
  }
  return function() {
    var hookListeners = atom[listenersKey];
    if (hookListeners) {
      hookListeners["delete"](cb);
      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}
var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed";
function configure(options2) {
  if (options2.isolateGlobalState === true) {
    isolateGlobalState();
  }
  var useProxies = options2.useProxies, enforceActions = options2.enforceActions;
  if (useProxies !== void 0) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }
  if (useProxies === "ifavailable")
    globalState.verifyProxies = true;
  if (enforceActions !== void 0) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function(key) {
    if (key in options2)
      globalState[key] = !!options2[key];
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;
  if (false) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }
  if (options2.reactionScheduler) {
    setReactionScheduler(options2.reactionScheduler);
  }
}
function extendObservable(target, properties, annotations, options2) {
  if (false) {
    if (arguments.length > 4)
      die("'extendObservable' expected 2-4 arguments");
    if (typeof target !== "object")
      die("'extendObservable' expects an object as first argument");
    if (isObservableMap(target))
      die("'extendObservable' should not be used on maps, use map.merge instead");
    if (!isPlainObject(properties))
      die("'extendObservable' only accepts plain objects as second argument");
    if (isObservable(properties) || isObservable(annotations))
      die("Extending an object with another observable (object) is not supported");
  }
  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options2)[$mobx];
  startBatch();
  try {
    ownKeys(descriptors).forEach(function(key) {
      adm.extend_(key, descriptors[key], !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }
  return target;
}
function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0)
    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  return result;
}
function unique(list) {
  return Array.from(new Set(list));
}
var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  }
  if (false)
    die("Flow expects single argument with generator function");
  var generator = arg1;
  var name = generator.name || "<unnamed flow>";
  var res = function res2() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = void 0;
    var promise = new Promise(function(resolve, reject2) {
      var stepId = 0;
      rejector = reject2;
      function onFulfilled(res3) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
        } catch (e13) {
          return reject2(e13);
        }
        next(ret);
      }
      function onRejected(err) {
        pendingPromise = void 0;
        var ret;
        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e13) {
          return reject2(e13);
        }
        next(ret);
      }
      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          ret.then(next, reject2);
          return;
        }
        if (ret.done)
          return resolve(ret.value);
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }
      onFulfilled(void 0);
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function() {
      try {
        if (pendingPromise)
          cancelPromise(pendingPromise);
        var _res = gen["return"](void 0);
        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise);
        rejector(new FlowCancellationError());
      } catch (e13) {
        rejector(e13);
      }
    });
    return promise;
  };
  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
function cancelPromise(promise) {
  if (isFunction(promise.cancel))
    promise.cancel();
}
function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}
function _isObservable(value, property) {
  if (!value)
    return false;
  if (property !== void 0) {
    if (false)
      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }
    return false;
  }
  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}
function isObservable(value) {
  if (false)
    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  return _isObservable(value);
}
function trace() {
  if (true)
    die("trace() is not available in production builds");
  var enterBreakPoint = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[args.length - 1] === "boolean")
    enterBreakPoint = args.pop();
  var derivation = getAtomFromArgs(args);
  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }
  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }
  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;
    case 1:
      return getAtom(args[0]);
    case 2:
      return getAtom(args[0], args[1]);
  }
}
function transaction(action2, thisArg) {
  if (thisArg === void 0) {
    thisArg = void 0;
  }
  startBatch();
  try {
    return action2.apply(thisArg);
  } finally {
    endBatch();
  }
}
function getAdm(target) {
  return target[$mobx];
}
var objectProxyTraps = {
  has: function has(target, name) {
    if (false)
      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set2(target, name, value) {
    var _getAdm$set_;
    if (!isStringish(name))
      return false;
    if (false) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    }
    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;
    if (false) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }
    if (!isStringish(name))
      return false;
    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty2(target, name, descriptor) {
    var _getAdm$definePropert;
    if (false) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    }
    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys2(target) {
    if (false)
      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options2) {
  var _target$$mobx, _target$$mobx$proxy_;
  assertProxies();
  target = asObservableObject(target, options2);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}
function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function() {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1)
      interceptors.splice(idx, 1);
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    var interceptors = [].concat(interceptable.interceptors_ || []);
    for (var i7 = 0, l8 = interceptors.length; i7 < l8; i7++) {
      change = interceptors[i7](change);
      if (change && !change.type)
        die(14);
      if (!change)
        break;
    }
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}
function hasListeners(listenable) {
  return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function() {
    var idx = listeners.indexOf(handler);
    if (idx !== -1)
      listeners.splice(idx, 1);
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners)
    return;
  listeners = listeners.slice();
  for (var i7 = 0, l8 = listeners.length; i7 < l8; i7++) {
    listeners[i7](change);
  }
  untrackedEnd(prevU);
}
function makeObservable(target, annotations, options2) {
  var adm = asObservableObject(target, options2)[$mobx];
  startBatch();
  try {
    var _annotations;
    if (false) {
      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
    }
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
    ownKeys(annotations).forEach(function(key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }
  return target;
}
var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 1e4;
var arrayTraps = {
  get: function get2(target, name) {
    var adm = target[$mobx];
    if (name === $mobx)
      return adm;
    if (name === "length")
      return adm.getArrayLength_();
    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }
    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }
    return target[name];
  },
  set: function set3(target, name, value) {
    var adm = target[$mobx];
    if (name === "length") {
      adm.setArrayLength_(value);
    }
    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      adm.set_(parseInt(name), value);
    }
    return true;
  },
  preventExtensions: function preventExtensions2() {
    die(15);
  }
};
var ObservableArrayAdministration = /* @__PURE__ */ function() {
  function ObservableArrayAdministration2(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name = false ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, false ? name + "[..]" : "ObservableArray[..]");
    };
  }
  var _proto = ObservableArrayAdministration2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0)
      return this.dehancer(value);
    return value;
  };
  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== void 0 && values.length > 0)
      return values.map(this.dehancer);
    return values;
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }
    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }
    return registerListener(this, listener);
  };
  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };
  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0)
      die("Out of range: " + newLength);
    var currentLength = this.values_.length;
    if (newLength === currentLength)
      return;
    else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);
      for (var i7 = 0; i7 < newLength - currentLength; i7++) {
        newItems[i7] = void 0;
      }
      this.spliceWithArray_(currentLength, 0, newItems);
    } else
      this.spliceWithArray_(newLength, currentLength - newLength);
  };
  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_)
      die(16);
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0)
      reserveArrayBuffer(oldLength + delta + 1);
  };
  _proto.spliceWithArray_ = function spliceWithArray_(index2, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index2 === void 0)
      index2 = 0;
    else if (index2 > length)
      index2 = length;
    else if (index2 < 0)
      index2 = Math.max(0, length + index2);
    if (arguments.length === 1)
      deleteCount = length - index2;
    else if (deleteCount === void 0 || deleteCount === null)
      deleteCount = 0;
    else
      deleteCount = Math.max(0, Math.min(deleteCount, length - index2));
    if (newItems === void 0)
      newItems = EMPTY_ARRAY;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index2,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change)
        return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }
    newItems = newItems.length === 0 ? newItems : newItems.map(function(v6) {
      return _this.enhancer_(v6, void 0);
    });
    if (this.legacyMode_ || false) {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta);
    }
    var res = this.spliceItemsIntoValues_(index2, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0)
      this.notifyArraySplice_(index2, newItems, res);
    return this.dehanceValues_(res);
  };
  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index2, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;
      return (_this$values_ = this.values_).splice.apply(_this$values_, [index2, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index2, index2 + deleteCount);
      var oldItems = this.values_.slice(index2 + deleteCount);
      this.values_.length += newItems.length - deleteCount;
      for (var i7 = 0; i7 < newItems.length; i7++) {
        this.values_[index2 + i7] = newItems[i7];
      }
      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index2 + newItems.length + _i] = oldItems[_i];
      }
      return res;
    }
  };
  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index2, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index2,
      newValue,
      oldValue
    } : null;
    if (false)
      spyReportStart(change);
    this.atom_.reportChanged();
    if (notify)
      notifyListeners(this, change);
    if (false)
      spyReportEnd();
  };
  _proto.notifyArraySplice_ = function notifyArraySplice_(index2, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index2,
      removed,
      added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if (false)
      spyReportStart(change);
    this.atom_.reportChanged();
    if (notify)
      notifyListeners(this, change);
    if (false)
      spyReportEnd();
  };
  _proto.get_ = function get_(index2) {
    if (index2 < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index2]);
    }
    console.warn(false ? "[mobx] Out of bounds read: " + index2 : "[mobx.array] Attempt to read an array index (" + index2 + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
  };
  _proto.set_ = function set_(index2, newValue) {
    var values = this.values_;
    if (index2 < values.length) {
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index2];
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index2,
          newValue
        });
        if (!change)
          return;
        newValue = change.newValue;
      }
      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;
      if (changed) {
        values[index2] = newValue;
        this.notifyArrayChildUpdate_(index2, newValue, oldValue);
      }
    } else if (index2 === values.length) {
      this.spliceWithArray_(index2, 0, [newValue]);
    } else {
      die(17, index2, values.length);
    }
  };
  return ObservableArrayAdministration2;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name = false ? "ObservableArray@" + getNextId() : "ObservableArray";
  }
  if (owned === void 0) {
    owned = false;
  }
  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;
  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }
  return proxy;
}
var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  toJSON: function toJSON() {
    return this.slice();
  },
  splice: function splice(index2, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }
    var adm = this[$mobx];
    switch (arguments.length) {
      case 0:
        return [];
      case 1:
        return adm.spliceWithArray_(index2);
      case 2:
        return adm.spliceWithArray_(index2, deleteCount);
    }
    return adm.spliceWithArray_(index2, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index2, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index2, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];
    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }
    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }
    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }
    var copy21 = this.slice();
    copy21.sort.apply(copy21, arguments);
    this.replace(copy21);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }
    return false;
  }
};
addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc);
addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc);
addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);
function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
}
function simpleFunc(funcName) {
  return function() {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
function mapLikeFunc(funcName) {
  return function(callback, thisArg) {
    var _this2 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function(element, index2) {
      return callback.call(thisArg, element, index2, _this2);
    });
  };
}
function reduceLikeFunc(funcName) {
  return function() {
    var _this3 = this;
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    var callback = arguments[0];
    arguments[0] = function(accumulator, currentValue, index2) {
      return callback(accumulator, currentValue, index2, _this3);
    };
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}
var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}
var _Symbol$iterator;
var _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete";
_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /* @__PURE__ */ function(_Symbol$iterator2, _Symbol$toStringTag2) {
  function ObservableMap2(initialData, enhancer_, name_) {
    var _this = this;
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = false ? "ObservableMap@" + getNextId() : "ObservableMap";
    }
    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;
    if (!isFunction(Map)) {
      die(18);
    }
    this.keysAtom_ = createAtom(false ? this.name_ + ".keys()" : "ObservableMap.keys()");
    this.data_ = /* @__PURE__ */ new Map();
    this.hasMap_ = /* @__PURE__ */ new Map();
    allowStateChanges(true, function() {
      _this.merge(initialData);
    });
  }
  var _proto = ObservableMap2.prototype;
  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };
  _proto.has = function has2(key) {
    var _this2 = this;
    if (!globalState.trackingDerivation)
      return this.has_(key);
    var entry = this.hasMap_.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, false ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableMap.key?", false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function() {
        return _this2.hasMap_["delete"](key);
      });
    }
    return entry.get();
  };
  _proto.set = function set5(key, value) {
    var hasKey = this.has_(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change)
        return this;
      value = change.newValue;
    }
    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }
    return this;
  };
  _proto["delete"] = function _delete(key) {
    var _this3 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change)
        return false;
    }
    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;
      if (false)
        spyReportStart(_change);
      transaction(function() {
        var _this3$hasMap_$get;
        _this3.keysAtom_.reportChanged();
        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
        var observable2 = _this3.data_.get(key);
        observable2.setNewValue_(void 0);
        _this3.data_["delete"](key);
      });
      if (notify)
        notifyListeners(this, _change);
      if (false)
        spyReportEnd();
      return true;
    }
    return false;
  };
  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable2 = this.data_.get(key);
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (false)
        spyReportStart(change);
      observable2.setNewValue_(newValue);
      if (notify)
        notifyListeners(this, change);
      if (false)
        spyReportEnd();
    }
  };
  _proto.addValue_ = function addValue_(key, newValue) {
    var _this4 = this;
    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function() {
      var _this4$hasMap_$get;
      var observable2 = new ObservableValue(newValue, _this4.enhancer_, false ? _this4.name_ + "." + stringifyKey(key) : "ObservableMap.key", false);
      _this4.data_.set(key, observable2);
      newValue = observable2.value_;
      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
      _this4.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue
    } : null;
    if (false)
      spyReportStart(change);
    if (notify)
      notifyListeners(this, change);
    if (false)
      spyReportEnd();
  };
  _proto.get = function get4(key) {
    if (this.has(key))
      return this.dehanceValue_(this.data_.get(key).get());
    return this.dehanceValue_(void 0);
  };
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };
  _proto.values = function values() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(), done = _keys$next.done, value = _keys$next.value;
        return {
          done,
          value: done ? void 0 : self2.get(value)
        };
      }
    });
  };
  _proto.entries = function entries2() {
    var self2 = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(), done = _keys$next2.done, value = _keys$next2.value;
        return {
          done,
          value: done ? void 0 : [value, self2.get(value)]
        };
      }
    });
  };
  _proto[_Symbol$iterator2] = function() {
    return this.entries();
  };
  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
      var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  };
  _proto.merge = function merge(other) {
    var _this5 = this;
    if (isObservableMap(other)) {
      other = new Map(other);
    }
    transaction(function() {
      if (isPlainObject(other))
        getPlainObjectKeys(other).forEach(function(key) {
          return _this5.set(key, other[key]);
        });
      else if (Array.isArray(other))
        other.forEach(function(_ref) {
          var key = _ref[0], value = _ref[1];
          return _this5.set(key, value);
        });
      else if (isES6Map(other)) {
        if (other.constructor !== Map)
          die(19, other);
        other.forEach(function(value, key) {
          return _this5.set(key, value);
        });
      } else if (other !== null && other !== void 0)
        die(20, other);
    });
    return this;
  };
  _proto.clear = function clear2() {
    var _this6 = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
          var key = _step2.value;
          _this6["delete"](key);
        }
      });
    });
  };
  _proto.replace = function replace2(values) {
    var _this7 = this;
    transaction(function() {
      var replacementMap = convertToMap(values);
      var orderedData = /* @__PURE__ */ new Map();
      var keysReportChangedCalled = false;
      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
        var key = _step3.value;
        if (!replacementMap.has(key)) {
          var deleted = _this7["delete"](key);
          if (deleted) {
            keysReportChangedCalled = true;
          } else {
            var value = _this7.data_.get(key);
            orderedData.set(key, value);
          }
        }
      }
      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
        var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
        var keyExisted = _this7.data_.has(_key);
        _this7.set(_key, _value);
        if (_this7.data_.has(_key)) {
          var _value2 = _this7.data_.get(_key);
          orderedData.set(_key, _value2);
          if (!keyExisted) {
            keysReportChangedCalled = true;
          }
        }
      }
      if (!keysReportChangedCalled) {
        if (_this7.data_.size !== orderedData.size) {
          _this7.keysAtom_.reportChanged();
        } else {
          var iter1 = _this7.data_.keys();
          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();
          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this7.keysAtom_.reportChanged();
              break;
            }
            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      }
      _this7.data_ = orderedData;
    });
    return this;
  };
  _proto.toString = function toString2() {
    return "[object ObservableMap]";
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (false)
      die("`observe` doesn't support fireImmediately=true in combination with maps.");
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _createClass(ObservableMap2, [{
    key: "size",
    get: function get4() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Map";
    }
  }]);
  return ObservableMap2;
}(_Symbol$iterator, _Symbol$toStringTag);
var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map2 = /* @__PURE__ */ new Map();
    for (var key in dataStructure) {
      map2.set(key, dataStructure[key]);
    }
    return map2;
  } else {
    return die(21, dataStructure);
  }
}
var _Symbol$iterator$1;
var _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /* @__PURE__ */ function(_Symbol$iterator2, _Symbol$toStringTag2) {
  function ObservableSet2(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }
    if (name_ === void 0) {
      name_ = false ? "ObservableSet@" + getNextId() : "ObservableSet";
    }
    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = /* @__PURE__ */ new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;
    if (!isFunction(Set)) {
      die(22);
    }
    this.atom_ = createAtom(this.name_);
    this.enhancer_ = function(newV, oldV) {
      return enhancer(newV, oldV, name_);
    };
    if (initialData) {
      this.replace(initialData);
    }
  }
  var _proto = ObservableSet2.prototype;
  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== void 0) {
      return this.dehancer(value);
    }
    return value;
  };
  _proto.clear = function clear2() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done; ) {
          var value = _step.value;
          _this["delete"](value);
        }
      });
    });
  };
  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };
  _proto.add = function add(value) {
    var _this2 = this;
    checkIfStateModificationsAreAllowed(this.atom_);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change)
        return this;
    }
    if (!this.has(value)) {
      transaction(function() {
        _this2.data_.add(_this2.enhancer_(value, void 0));
        _this2.atom_.reportChanged();
      });
      var notifySpy = false;
      var notify = hasListeners(this);
      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;
      if (notifySpy && false)
        spyReportStart(_change);
      if (notify)
        notifyListeners(this, _change);
      if (notifySpy && false)
        spyReportEnd();
    }
    return this;
  };
  _proto["delete"] = function _delete(value) {
    var _this3 = this;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change)
        return false;
    }
    if (this.has(value)) {
      var notifySpy = false;
      var notify = hasListeners(this);
      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;
      if (notifySpy && false)
        spyReportStart(_change2);
      transaction(function() {
        _this3.atom_.reportChanged();
        _this3.data_["delete"](value);
      });
      if (notify)
        notifyListeners(this, _change2);
      if (notifySpy && false)
        spyReportEnd();
      return true;
    }
    return false;
  };
  _proto.has = function has2(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };
  _proto.entries = function entries2() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index2 = nextIndex;
        nextIndex += 1;
        return index2 < values.length ? {
          value: [keys[index2], values[index2]],
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.keys = function keys() {
    return this.values();
  };
  _proto.values = function values() {
    this.atom_.reportObserved();
    var self2 = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self2.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };
  _proto.replace = function replace2(other) {
    var _this4 = this;
    if (isObservableSet(other)) {
      other = new Set(other);
    }
    transaction(function() {
      if (Array.isArray(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();
        other.forEach(function(value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== void 0) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (false)
      die("`observe` doesn't support fireImmediately=true in combination with sets.");
    return registerListener(this, listener);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.toJSON = function toJSON2() {
    return Array.from(this);
  };
  _proto.toString = function toString2() {
    return "[object ObservableSet]";
  };
  _proto[_Symbol$iterator2] = function() {
    return this.values();
  };
  _createClass(ObservableSet2, [{
    key: "size",
    get: function get4() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Set";
    }
  }]);
  return ObservableSet2;
}(_Symbol$iterator$1, _Symbol$toStringTag$1);
var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
var descriptorCache = /* @__PURE__ */ Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /* @__PURE__ */ function() {
  function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = /* @__PURE__ */ new Map();
    }
    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }
    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom(false ? this.name_ + ".keys" : "ObservableObject.keys");
    this.isPlainObject_ = isPlainObject(this.target_);
    if (false) {
      die("defaultAnnotation must be valid annotation");
    }
    if (false) {
      this.appliedAnnotations_ = {};
    }
  }
  var _proto = ObservableObjectAdministration2.prototype;
  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };
  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable2 = this.values_.get(key);
    if (observable2 instanceof ComputedValue) {
      observable2.set(newValue);
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue
      });
      if (!change)
        return null;
      newValue = change.newValue;
    }
    newValue = observable2.prepareNewValue_(newValue);
    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy = false;
      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable2.value_,
        name: key,
        newValue
      } : null;
      if (false)
        spyReportStart(_change);
      observable2.setNewValue_(newValue);
      if (notify)
        notifyListeners(this, _change);
      if (false)
        spyReportEnd();
    }
    return true;
  };
  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      this.has_(key);
    }
    return this.target_[key];
  };
  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (hasProp(this.target_, key)) {
      if (this.values_.has(key)) {
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        return Reflect.set(this.target_, key, value);
      } else {
        this.target_[key] = value;
        return true;
      }
    } else {
      return this.extend_(key, {
        value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  };
  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      return key in this.target_;
    }
    this.pendingKeys_ || (this.pendingKeys_ = /* @__PURE__ */ new Map());
    var entry = this.pendingKeys_.get(key);
    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer, false ? this.name_ + "." + stringifyKey(key) + "?" : "ObservableObject.key?", false);
      this.pendingKeys_.set(key, entry);
    }
    return entry.get();
  };
  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return;
    }
    assertAnnotable(this, annotation, key);
    if (!(key in this.target_)) {
      var _this$target_$storedA;
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
        return;
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }
    var source = this.target_;
    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);
      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0)
          return;
        if (outcome === 1)
          break;
      }
      source = Object.getPrototypeOf(source);
    }
    recordAnnotationApplied(this, annotation, key);
  };
  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }
    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }
    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }
    return outcome;
  };
  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change)
          return null;
        var newValue = change.newValue;
        if (descriptor.value !== newValue) {
          descriptor = _extends2({}, descriptor, {
            value: newValue
          });
        }
      }
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change)
          return null;
        value = change.newValue;
      }
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      var observable2 = new ObservableValue(value, enhancer, false ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
      this.values_.set(key, observable2);
      this.notifyPropertyAddition_(key, observable2.value_);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options2, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    try {
      startBatch();
      var deleteOutcome = this.delete_(key);
      if (!deleteOutcome) {
        return deleteOutcome;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: void 0
        });
        if (!change)
          return null;
      }
      options2.name || (options2.name = false ? this.name_ + "." + key.toString() : "ObservableObject.key");
      options2.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      };
      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }
      this.values_.set(key, new ComputedValue(options2));
      this.notifyPropertyAddition_(key, void 0);
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }
    if (!hasProp(this.target_, key)) {
      return true;
    }
    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      });
      if (!change)
        return null;
    }
    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;
      startBatch();
      var notify = hasListeners(this);
      var notifySpy = false;
      var observable2 = this.values_.get(key);
      var value = void 0;
      if (!observable2 && (notify || notifySpy)) {
        var _getDescriptor2;
        value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
      }
      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      }
      if (false) {
        delete this.appliedAnnotations_[key];
      }
      if (observable2) {
        this.values_["delete"](key);
        if (observable2 instanceof ObservableValue) {
          value = observable2.value_;
        }
        propagateChanged(observable2);
      }
      this.keysAtom_.reportChanged();
      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if (false)
          spyReportStart(_change2);
        if (notify)
          notifyListeners(this, _change2);
        if (false)
          spyReportEnd();
      }
    } finally {
      endBatch();
    }
    return true;
  };
  _proto.observe_ = function observe_(callback, fireImmediately) {
    if (false)
      die("`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };
  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };
  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;
    var notify = hasListeners(this);
    var notifySpy = false;
    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if (false)
        spyReportStart(change);
      if (notify)
        notifyListeners(this, change);
      if (false)
        spyReportEnd();
    }
    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
    this.keysAtom_.reportChanged();
  };
  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };
  _proto.keys_ = function keys_() {
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };
  return ObservableObjectAdministration2;
}();
function asObservableObject(target, options2) {
  var _options$name;
  if (false) {
    die("Options can't be provided for already observable objects.");
  }
  if (hasProp(target, $mobx)) {
    if (false) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
    }
    return target;
  }
  if (false)
    die("Cannot make the designated object observable; it is not extensible");
  var name = (_options$name = options2 == null ? void 0 : options2.name) != null ? _options$name : false ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : "ObservableObject";
  var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), String(name), getAnnotationFromOptions(options2));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get4() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set5(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}
function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }
  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;
  if (false) {
    adm.appliedAnnotations_[key] = annotation;
  }
  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}
function assertAnnotable(adm, annotation, key) {
  if (false) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  if (false) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overriden by subclass.");
  }
}
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
var StubArray = function StubArray2() {
};
function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== void 0) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}
inherit(StubArray, Array.prototype);
var LegacyObservableArray = /* @__PURE__ */ function(_StubArray, _Symbol$toStringTag2, _Symbol$iterator2) {
  _inheritsLoose(LegacyObservableArray2, _StubArray);
  function LegacyObservableArray2(initialValues, enhancer, name, owned) {
    var _this;
    if (name === void 0) {
      name = false ? "ObservableArray@" + getNextId() : "ObservableArray";
    }
    if (owned === void 0) {
      owned = false;
    }
    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true);
      _this.spliceWithArray(0, 0, initialValues);
      allowStateChangesEnd(prev);
    }
    return _this;
  }
  var _proto = LegacyObservableArray2.prototype;
  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();
    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }
    return Array.prototype.concat.apply(this.slice(), arrays.map(function(a6) {
      return isObservableArray(a6) ? a6.slice() : a6;
    }));
  };
  _proto[_Symbol$iterator2] = function() {
    var self2 = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        return nextIndex < self2.length ? {
          value: self2[nextIndex++],
          done: false
        } : {
          done: true,
          value: void 0
        };
      }
    });
  };
  _createClass(LegacyObservableArray2, [{
    key: "length",
    get: function get4() {
      return this[$mobx].getArrayLength_();
    },
    set: function set5(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: _Symbol$toStringTag2,
    get: function get4() {
      return "Array";
    }
  }]);
  return LegacyObservableArray2;
}(StubArray, Symbol.toStringTag, Symbol.iterator);
Object.entries(arrayExtensions).forEach(function(_ref) {
  var prop = _ref[0], fn = _ref[1];
  if (prop !== "concat")
    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
});
function createArrayEntryDescriptor(index2) {
  return {
    enumerable: false,
    configurable: true,
    get: function get4() {
      return this[$mobx].get_(index2);
    },
    set: function set5(value) {
      this[$mobx].set_(index2, value);
    }
  };
}
function createArrayBufferItem(index2) {
  defineProperty(LegacyObservableArray.prototype, "" + index2, createArrayEntryDescriptor(index2));
}
function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index2 = OBSERVABLE_ARRAY_BUFFER_SIZE; index2 < max + 100; index2++) {
      createArrayBufferItem(index2);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1e3);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}
function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== void 0)
        die(23);
      return thing[$mobx].atom_;
    }
    if (isObservableSet(thing)) {
      return thing[$mobx];
    }
    if (isObservableMap(thing)) {
      if (property === void 0)
        return thing.keysAtom_;
      var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable2)
        die(25, property, getDebugName(thing));
      return observable2;
    }
    if (isObservableObject(thing)) {
      if (!property)
        return die(26);
      var _observable = thing[$mobx].values_.get(property);
      if (!_observable)
        die(27, property, getDebugName(thing));
      return _observable;
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      return thing[$mobx];
    }
  }
  die(28);
}
function getAdministration(thing, property) {
  if (!thing)
    die(29);
  if (property !== void 0)
    return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
    return thing;
  if (isObservableMap(thing) || isObservableSet(thing))
    return thing;
  if (thing[$mobx])
    return thing[$mobx];
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;
  if (property !== void 0) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    named = getAtom(thing);
  }
  return named.name_;
}
var toString = objectPrototype.toString;
function deepEqual(a6, b7, depth) {
  if (depth === void 0) {
    depth = -1;
  }
  return eq(a6, b7, depth);
}
function eq(a6, b7, depth, aStack, bStack) {
  if (a6 === b7)
    return a6 !== 0 || 1 / a6 === 1 / b7;
  if (a6 == null || b7 == null)
    return false;
  if (a6 !== a6)
    return b7 !== b7;
  var type = typeof a6;
  if (type !== "function" && type !== "object" && typeof b7 != "object")
    return false;
  var className = toString.call(a6);
  if (className !== toString.call(b7))
    return false;
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a6 === "" + b7;
    case "[object Number]":
      if (+a6 !== +a6)
        return +b7 !== +b7;
      return +a6 === 0 ? 1 / +a6 === 1 / b7 : +a6 === +b7;
    case "[object Date]":
    case "[object Boolean]":
      return +a6 === +b7;
    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a6) === Symbol.valueOf.call(b7);
    case "[object Map]":
    case "[object Set]":
      if (depth >= 0) {
        depth++;
      }
      break;
  }
  a6 = unwrap(a6);
  b7 = unwrap(b7);
  var areArrays = className === "[object Array]";
  if (!areArrays) {
    if (typeof a6 != "object" || typeof b7 != "object")
      return false;
    var aCtor = a6.constructor, bCtor = b7.constructor;
    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a6 && "constructor" in b7) {
      return false;
    }
  }
  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a6)
      return bStack[length] === b7;
  }
  aStack.push(a6);
  bStack.push(b7);
  if (areArrays) {
    length = a6.length;
    if (length !== b7.length)
      return false;
    while (length--) {
      if (!eq(a6[length], b7[length], depth - 1, aStack, bStack))
        return false;
    }
  } else {
    var keys = Object.keys(a6);
    var key;
    length = keys.length;
    if (Object.keys(b7).length !== length)
      return false;
    while (length--) {
      key = keys[length];
      if (!(hasProp(b7, key) && eq(a6[key], b7[key], depth - 1, aStack, bStack)))
        return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function unwrap(a6) {
  if (isObservableArray(a6))
    return a6.slice();
  if (isES6Map(a6) || isObservableMap(a6))
    return Array.from(a6.entries());
  if (isES6Set(a6) || isObservableSet(a6))
    return Array.from(a6.entries());
  return a6;
}
function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}
function getSelf() {
  return this;
}
["Symbol", "Map", "Set"].forEach(function(m8) {
  var g7 = getGlobal();
  if (typeof g7[m8] === "undefined") {
    die("MobX requires global '" + m8 + "' to be available or polyfilled");
  }
});
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy,
    extras: {
      getDebugName
    },
    $mobx
  });
}

// ../../node_modules/mobx-react-lite/es/utils/assertEnvironment.js
var import_react3 = __toESM(require_react());
if (!import_react3.useState) {
  throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!makeObservable) {
  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}

// ../../node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js
var import_react_dom = __toESM(require_react_dom());

// ../../node_modules/mobx-react-lite/es/utils/observerBatching.js
function defaultNoopBatch(callback) {
  callback();
}
function observerBatching(reactionScheduler3) {
  if (!reactionScheduler3) {
    reactionScheduler3 = defaultNoopBatch;
    if (false) {
      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
    }
  }
  configure({ reactionScheduler: reactionScheduler3 });
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
var import_react4 = __toESM(require_react());

// ../../node_modules/mobx-react-lite/es/utils/printDebugValue.js
function printDebugValue(v6) {
  return getDependencyTree(v6);
}

// ../../node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js
var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? void 0 : FinalizationRegistry;

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js
function createTrackingData(reaction) {
  var trackingData = {
    reaction,
    mounted: false,
    changedBeforeMount: false,
    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
  };
  return trackingData;
}
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 1e4;
var CLEANUP_TIMER_LOOP_MILLIS = 1e4;

// ../../node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js
function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry2) {
  var cleanupTokenToReactionTrackingMap = /* @__PURE__ */ new Map();
  var globalCleanupTokensCounter = 1;
  var registry = new FinalizationRegistry2(function cleanupFunction(token) {
    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
    if (trackedReaction) {
      trackedReaction.reaction.dispose();
      cleanupTokenToReactionTrackingMap.delete(token);
    }
  });
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      var token = globalCleanupTokensCounter++;
      registry.register(objectRetainedByReact, token, reactionTrackingRef);
      reactionTrackingRef.current = createTrackingData(reaction);
      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: function(reactionRef) {
      registry.unregister(reactionRef);
      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
      }
    },
    forceCleanupTimerToRunNowForTests: function() {
    },
    resetCleanupScheduleForTests: function() {
    }
  };
}

// ../../node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js
var __values = function(o10) {
  var s9 = typeof Symbol === "function" && Symbol.iterator, m8 = s9 && o10[s9], i7 = 0;
  if (m8)
    return m8.call(o10);
  if (o10 && typeof o10.length === "number")
    return {
      next: function() {
        if (o10 && i7 >= o10.length)
          o10 = void 0;
        return { value: o10 && o10[i7++], done: !o10 };
      }
    };
  throw new TypeError(s9 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function createTimerBasedReactionCleanupTracking() {
  var uncommittedReactionRefs = /* @__PURE__ */ new Set();
  var reactionCleanupHandle;
  function forceCleanupTimerToRunNowForTests2() {
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      cleanUncommittedReactions();
    }
  }
  function resetCleanupScheduleForTests2() {
    var e_1, _a3;
    if (uncommittedReactionRefs.size > 0) {
      try {
        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
          var ref = uncommittedReactionRefs_1_1.value;
          var tracking = ref.current;
          if (tracking) {
            tracking.reaction.dispose();
            ref.current = null;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a3 = uncommittedReactionRefs_1.return))
            _a3.call(uncommittedReactionRefs_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      uncommittedReactionRefs.clear();
    }
    if (reactionCleanupHandle) {
      clearTimeout(reactionCleanupHandle);
      reactionCleanupHandle = void 0;
    }
  }
  function ensureCleanupTimerRunning() {
    if (reactionCleanupHandle === void 0) {
      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
    }
  }
  function scheduleCleanupOfReactionIfLeaked(ref) {
    uncommittedReactionRefs.add(ref);
    ensureCleanupTimerRunning();
  }
  function recordReactionAsCommitted2(reactionRef) {
    uncommittedReactionRefs.delete(reactionRef);
  }
  function cleanUncommittedReactions() {
    reactionCleanupHandle = void 0;
    var now2 = Date.now();
    uncommittedReactionRefs.forEach(function(ref) {
      var tracking = ref.current;
      if (tracking) {
        if (now2 >= tracking.cleanAt) {
          tracking.reaction.dispose();
          ref.current = null;
          uncommittedReactionRefs.delete(ref);
        }
      }
    });
    if (uncommittedReactionRefs.size > 0) {
      ensureCleanupTimerRunning();
    }
  }
  return {
    addReactionToTrack: function(reactionTrackingRef, reaction, objectRetainedByReact) {
      reactionTrackingRef.current = createTrackingData(reaction);
      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
      return reactionTrackingRef.current;
    },
    recordReactionAsCommitted: recordReactionAsCommitted2,
    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests2,
    resetCleanupScheduleForTests: resetCleanupScheduleForTests2
  };
}

// ../../node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js
var _a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking();
var addReactionToTrack = _a.addReactionToTrack;
var recordReactionAsCommitted = _a.recordReactionAsCommitted;
var resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests;
var forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;

// ../../node_modules/mobx-react-lite/es/staticRendering.js
var globalIsUsingStaticRendering = false;
function isUsingStaticRendering() {
  return globalIsUsingStaticRendering;
}

// ../../node_modules/mobx-react-lite/es/useObserver.js
var __read = function(o10, n6) {
  var m8 = typeof Symbol === "function" && o10[Symbol.iterator];
  if (!m8)
    return o10;
  var i7 = m8.call(o10), r12, ar = [], e13;
  try {
    while ((n6 === void 0 || n6-- > 0) && !(r12 = i7.next()).done)
      ar.push(r12.value);
  } catch (error) {
    e13 = { error };
  } finally {
    try {
      if (r12 && !r12.done && (m8 = i7["return"]))
        m8.call(i7);
    } finally {
      if (e13)
        throw e13.error;
    }
  }
  return ar;
};
function observerComponentNameFor(baseComponentName) {
  return "observer".concat(baseComponentName);
}
var ObjectToBeRetainedByReact = function() {
  function ObjectToBeRetainedByReact2() {
  }
  return ObjectToBeRetainedByReact2;
}();
function objectToBeRetainedByReactFactory() {
  return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
  if (baseComponentName === void 0) {
    baseComponentName = "observed";
  }
  if (isUsingStaticRendering()) {
    return fn();
  }
  var _a3 = __read(import_react4.default.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a3[0];
  var _b = __read(import_react4.default.useState(), 2), setState = _b[1];
  var forceUpdate = function() {
    return setState([]);
  };
  var reactionTrackingRef = import_react4.default.useRef(null);
  if (!reactionTrackingRef.current) {
    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function() {
      if (trackingData_1.mounted) {
        forceUpdate();
      } else {
        trackingData_1.changedBeforeMount = true;
      }
    });
    var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
  }
  var reaction = reactionTrackingRef.current.reaction;
  import_react4.default.useDebugValue(reaction, printDebugValue);
  import_react4.default.useEffect(function() {
    recordReactionAsCommitted(reactionTrackingRef);
    if (reactionTrackingRef.current) {
      reactionTrackingRef.current.mounted = true;
      if (reactionTrackingRef.current.changedBeforeMount) {
        reactionTrackingRef.current.changedBeforeMount = false;
        forceUpdate();
      }
    } else {
      reactionTrackingRef.current = {
        reaction: new Reaction(observerComponentNameFor(baseComponentName), function() {
          forceUpdate();
        }),
        mounted: true,
        changedBeforeMount: false,
        cleanAt: Infinity
      };
      forceUpdate();
    }
    return function() {
      reactionTrackingRef.current.reaction.dispose();
      reactionTrackingRef.current = null;
    };
  }, []);
  var rendering;
  var exception;
  reaction.track(function() {
    try {
      rendering = fn();
    } catch (e13) {
      exception = e13;
    }
  });
  if (exception) {
    throw exception;
  }
  return rendering;
}

// ../../node_modules/mobx-react-lite/es/observer.js
var import_react5 = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function(t12) {
    for (var s9, i7 = 1, n6 = arguments.length; i7 < n6; i7++) {
      s9 = arguments[i7];
      for (var p7 in s9)
        if (Object.prototype.hasOwnProperty.call(s9, p7))
          t12[p7] = s9[p7];
    }
    return t12;
  };
  return __assign.apply(this, arguments);
};
function observer(baseComponent, options2) {
  if (isUsingStaticRendering()) {
    return baseComponent;
  }
  var realOptions = __assign({ forwardRef: false }, options2);
  var baseComponentName = baseComponent.displayName || baseComponent.name;
  var wrappedComponent = function(props, ref) {
    return useObserver(function() {
      return baseComponent(props, ref);
    }, baseComponentName);
  };
  if (baseComponentName !== "") {
    wrappedComponent.displayName = baseComponentName;
  }
  if (baseComponent.contextTypes) {
    wrappedComponent.contextTypes = baseComponent.contextTypes;
  }
  var memoComponent;
  if (realOptions.forwardRef) {
    memoComponent = (0, import_react5.memo)((0, import_react5.forwardRef)(wrappedComponent));
  } else {
    memoComponent = (0, import_react5.memo)(wrappedComponent);
  }
  copyStaticProperties(baseComponent, memoComponent);
  if (false) {
    Object.defineProperty(memoComponent, "contextTypes", {
      set: function() {
        var _a3;
        throw new Error("[mobx-react-lite] `".concat(this.displayName || ((_a3 = this.type) === null || _a3 === void 0 ? void 0 : _a3.displayName) || "Component", ".contextTypes` must be set before applying `observer`."));
      }
    });
  }
  return memoComponent;
}
var hoistBlackList = {
  $$typeof: true,
  render: true,
  compare: true,
  type: true,
  displayName: true
};
function copyStaticProperties(base, target) {
  Object.keys(base).forEach(function(key) {
    if (!hoistBlackList[key]) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}

// ../../node_modules/mobx-react-lite/es/ObserverComponent.js
function ObserverComponent(_a3) {
  var children = _a3.children, render = _a3.render;
  var component = children || render;
  if (typeof component !== "function") {
    return null;
  }
  return useObserver(component);
}
if (false) {
  ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
  };
}
ObserverComponent.displayName = "Observer";

// ../../node_modules/mobx-react-lite/es/useLocalObservable.js
var import_react6 = __toESM(require_react());

// ../../node_modules/mobx-react-lite/es/useLocalStore.js
var import_react8 = __toESM(require_react());

// ../../node_modules/mobx-react-lite/es/useAsObservableSource.js
var import_react7 = __toESM(require_react());

// ../../node_modules/mobx-react-lite/es/index.js
observerBatching(import_react_dom.unstable_batchedUpdates);

// ../../packages/core/dist/index.mjs
var React45 = __toESM(require_react(), 1);
var React44 = __toESM(require_react(), 1);
var React3 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);

// ../../node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
function clamp(v6, min, max) {
  return Math.max(min, Math.min(v6, max));
}
var V = {
  toVector(v6, fallback) {
    if (v6 === void 0)
      v6 = fallback;
    return Array.isArray(v6) ? v6 : [v6, v6];
  },
  add(v1, v22) {
    return [v1[0] + v22[0], v1[1] + v22[1]];
  },
  sub(v1, v22) {
    return [v1[0] - v22[0], v1[1] - v22[1]];
  },
  addTo(v1, v22) {
    v1[0] += v22[0];
    v1[1] += v22[1];
  },
  subTo(v1, v22) {
    v1[0] -= v22[0];
    v1[1] -= v22[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {
  if (constant === 0)
    return clamp(position, min, max);
  if (position < min)
    return -rubberband(min - position, max - min, constant) + min;
  if (position > max)
    return +rubberband(position - max, max - min, constant) + max;
  return position;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}

// ../../node_modules/@use-gesture/core/dist/actions-e2a59bb9.esm.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys3(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i7 = 1; i7 < arguments.length; i7++) {
    var source = arguments[i7] != null ? arguments[i7] : {};
    i7 % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string) {
  if (!string)
    return "";
  return string[0].toUpperCase() + string.slice(1);
}
var actionsWithoutCaptureSupported = ["enter", "leave"];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action2 = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action2] || action2 : action2;
  return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
}
var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf("passive");
  if (passive)
    eventKey = eventKey.replace("passive", "");
  const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture)
    eventKey = eventKey.replace("capture", "");
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action2 = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action2] || action2 : action2;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getPointerType(event) {
  if (isTouch(event))
    return "touch";
  if ("pointerType" in event)
    return event.pointerType;
  return "mouse";
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e13) => {
    var _event$currentTarget, _event$currentTarget$;
    return e13.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e13.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P22) {
  const dx = P22.clientX - P1.clientX;
  const dy = P22.clientY - P1.clientY;
  const cx = (P22.clientX + P1.clientX) / 2;
  const cy = (P22.clientY + P1.clientY) / 2;
  const distance = Math.hypot(dx, dy);
  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
  const origin = [cx, cy];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P22] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P1, P22);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call(v6, ...args) {
  if (typeof v6 === "function") {
    return v6(...args);
  } else {
    return v6;
  }
}
function noop3() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop3;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config.from ? call(config.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  computeValues(values) {
    const state = this.state;
    state._values = values;
    state.values = this.config.transform(values);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent)
      this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t0, t1] = config.threshold;
    const {
      _step,
      values
    } = state;
    if (config.hasCustomTransform) {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && values[0];
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && values[1];
    } else {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional)
      return;
    const movement = [0, 0];
    if (config.hasCustomTransform) {
      const [v0, v1] = values;
      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked)
      this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config)
            state._bounds = call(config.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox, oy] = state.offset;
    const [[x0, x1], [y0, y1]] = state._bounds;
    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband2 = state._active ? config.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband2);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt > 0) {
        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
      return;
    const memo23 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo23 !== void 0)
      state.memo = memo23;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx, dy], threshold) {
  const absDx = Math.abs(dx);
  const absDy = Math.abs(dy);
  if (absDx > absDy && absDx > threshold) {
    return "x";
  }
  if (absDy > absDx && absDy > threshold) {
    return "y";
  }
  return void 0;
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config = this.config;
    if (!state.axis && event) {
      const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
  }
  restrictToAxis(v6) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case "x":
          v6[1] = 0;
          break;
        case "y":
          v6[0] = 0;
          break;
      }
    }
  }
};
var identity = (v6) => v6;
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  eventOptions(value, _k, config) {
    return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === "function")
      return value;
    if (value != null)
      return V.toVector(value);
  },
  transform(value, _k, config) {
    const transform = value || config.shared.transform;
    this.hasCustomTransform = !!transform;
    if (false) {
      const originalTransform = transform || identity;
      return (v6) => {
        const r12 = originalTransform(v6);
        if (!isFinite(r12[0]) || !isFinite(r12[1])) {
          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r12[0]},${[1]}]`);
        }
        return r12;
      };
    }
    return transform || identity;
  },
  threshold(value) {
    return V.toVector(value, 0);
  }
};
if (false) {
  Object.assign(commonConfigResolver, {
    domTarget(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
      return NaN;
    },
    lockDirection(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
      return NaN;
    },
    initial(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
      return NaN;
    }
  });
}
var DEFAULT_AXIS_THRESHOLD = 0;
var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
    return value;
  },
  bounds(value = {}) {
    if (typeof value === "function") {
      return (state) => coordinatesConfigResolver.bounds(value(state));
    }
    if ("current" in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
      return value;
    }
    const {
      left: left6 = -Infinity,
      right: right6 = Infinity,
      top: top7 = -Infinity,
      bottom: bottom6 = Infinity
    } = value;
    return [[left6, right6], [top7, bottom6]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons))
      return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config.preventScrollAxis && getPointerType(event) !== "mouse") {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config.delay > 0) {
      this.setupDelayTrigger(event);
      if (config.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (false) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config = this.config;
    if (!state._active || !state._pointerActive)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;
    if (state.tap && config.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx, vy] = state.velocity;
      const [mx, my] = state.movement;
      const [svx, svy] = config.swipe.velocity;
      const [sx, sy] = config.swipe.distance;
      const sdt = config.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx) > svx && Math.abs(mx) > sx)
          state.swipe[0] = dirx;
        if (Math.abs(vy) > svy && Math.abs(my) > sy)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config = this.config;
    const device = config.device;
    if (false) {
      try {
        if (device === "pointer" && config.preventScrollDelay === void 0) {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    persistEvent(event);
    const remove3 = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", remove3);
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove3);
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
      bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
    }
    bindFunction("key", "down", this.keyDown.bind(this));
    bindFunction("key", "up", this.keyUp.bind(this));
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e13) {
    return false;
  }
}
var SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: isTouchScreen(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v, _k, {
    pointer: {
      touch = false,
      lock: lock21 = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock21 && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer && !mouse)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScrollAxis(value, _k, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
    if (!SUPPORT.touchscreen || preventScroll === false)
      return void 0;
    return value ? value : preventScroll !== void 0 ? "y" : void 0;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  threshold(value, _k, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = void 0
  }) {
    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  },
  axisThreshold(value) {
    if (!value)
      return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
  }
});
if (false) {
  Object.assign(dragConfigResolver, {
    useTouch(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
      return NaN;
    },
    experimental_preventWindowScrollY(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
      return NaN;
    },
    swipeVelocity(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
      return NaN;
    },
    swipeDistance(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
      return NaN;
    },
    swipeDuration(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
      return NaN;
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 100;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "pinching");
    _defineProperty(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = /* @__PURE__ */ new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type,
      movement,
      lastOffset
    } = this.state;
    if (type === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
  }
  restrictToAxis(v6) {
    if (this.config.lockDirection) {
      if (this.state.axis === "scale")
        v6[1] = 0;
      else if (this.state.axis === "angle")
        v6[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && !event[modifierKey])
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (false) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    } else {
      bindFunction("wheel", "", this.wheel.bind(this), {
        passive: false
      });
    }
  }
};
var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v, _k, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (SUPPORT.touch && touch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D5 = assignDefault(call(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D5.min, D5.max];
    };
    const _angleBounds = (state) => {
      const A4 = assignDefault(call(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A4.min, A4.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k, config) {
    this.lockDirection = config.axis === "lock";
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value) {
    if (value === void 0)
      return "ctrlKey";
    return value;
  }
});
var MoveEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "moving");
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    if (!this.state._active)
      this.moveStart(event);
    else
      this.moveChange(event);
    this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.computeInitial();
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active)
      return;
    const values = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "change", this.move.bind(this));
    bindFunction("pointer", "leave", this.moveEnd.bind(this));
  }
};
var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var ScrollEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "scrolling");
  }
  scroll(event) {
    if (!this.state._active)
      this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    const values = scrollValues(event);
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("scroll", "", this.scroll.bind(this));
  }
};
var scrollConfigResolver = coordinatesConfigResolver;
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var HoverEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "hovering");
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    const state = this.state;
    if (!state._active)
      return;
    state._active = false;
    const values = pointerValues(event);
    state._movement = state._delta = V.sub(values, state._values);
    this.computeValues(values);
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "enter", this.enter.bind(this));
    bindFunction("pointer", "leave", this.leave.bind(this));
  }
};
var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var EngineMap = /* @__PURE__ */ new Map();
var ConfigResolverMap = /* @__PURE__ */ new Map();
function registerAction(action2) {
  EngineMap.set(action2.key, action2.engine);
  ConfigResolverMap.set(action2.key, action2.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var hoverAction = {
  key: "hover",
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
var moveAction = {
  key: "move",
  engine: MoveEngine,
  resolver: moveConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var scrollAction = {
  key: "scroll",
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// ../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react9 = __toESM(require_react());

// ../../node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i7;
  for (i7 = 0; i7 < sourceKeys.length; i7++) {
    key = sourceKeys[i7];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i7;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i7 = 0; i7 < sourceSymbolKeys.length; i7++) {
      key = sourceSymbolKeys[i7];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => "current" in value ? value.current : value;
    }
    return void 0;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : void 0) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value) {
    return value;
  }
};
var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case "function":
        if (false) {
          const r12 = resolver.call(result, config[key], key, config);
          if (!Number.isNaN(r12))
            result[key] = r12;
        } else {
          result[key] = resolver.call(result, config[key], key, config);
        }
        break;
      case "object":
        result[key] = resolveWith(config[key], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key] = config[key];
        break;
    }
  }
  return result;
}
function parse(config, gestureKey) {
  const _ref = config, {
    target,
    eventOptions,
    window: window2,
    enabled,
    transform
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
  const _config = {
    shared: resolveWith({
      target,
      eventOptions,
      window: window2,
      enabled,
      transform
    }, sharedConfigResolver)
  };
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (false) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
          if (key === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action2, handler, options2) {
    const listeners = this._listeners;
    const type = toDomEventType(device, action2);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options2);
    element.addEventListener(type, handler, eventOptions);
    const remove3 = () => {
      element.removeEventListener(type, handler, eventOptions);
      listeners.delete(remove3);
    };
    listeners.add(remove3);
    return remove3;
  }
  clean() {
    this._listeners.forEach((remove3) => remove3());
    this._listeners.clear();
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(key, callback, ms = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout)
      window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
};
var Controller = class {
  constructor(handlers) {
    _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ("pointerId" in event) {
      if (event.type === "pointerup" || event.type === "pointercancel")
        this.pointerIds.delete(event.pointerId);
      else if (event.type === "pointerdown")
        this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config, gestureKey) {
    this.config = parse(config, gestureKey);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target)
        return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
        if (gestureConfig.enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target)
      return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target, device, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action2, handler, options2 = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options2.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options2.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action2, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers2) {
  const native = {};
  const handlers = {};
  const actions = /* @__PURE__ */ new Set();
  for (let key in _handlers2) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers2[key];
    } else {
      native[key] = _handlers2[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key)) {
    if (false) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo23 = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo23 = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo23;
  };
  internalHandlers[key] = fn;
  config[key] = config[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// ../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react9.default.useMemo(() => new Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  import_react9.default.useEffect(ctrl.effect.bind(ctrl));
  import_react9.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture2(_handlers2, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = parseMergedHandlers(_handlers2, _config || {});
    return useRecognizers(handlers, config, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config || {});
}

// ../../packages/vec/dist/index.mjs
var h = Object.defineProperty;
var d = (s9, n6, r12) => n6 in s9 ? h(s9, n6, { enumerable: true, configurable: true, writable: true, value: r12 }) : s9[n6] = r12;
var m = (s9, n6, r12) => (d(s9, typeof n6 != "symbol" ? n6 + "" : n6, r12), r12);
var t = class {
  static clamp(n6, r12, u5) {
    return Math.max(r12, typeof u5 != "undefined" ? Math.min(n6, u5) : n6);
  }
  static clampV(n6, r12, u5) {
    return n6.map((b7) => u5 ? t.clamp(b7, r12, u5) : t.clamp(b7, r12));
  }
  static cross(n6, r12, u5) {
    return (r12[0] - n6[0]) * (u5[1] - n6[1]) - (u5[0] - n6[0]) * (r12[1] - n6[1]);
  }
  static snap(n6, r12 = 1) {
    return [Math.round(n6[0] / r12) * r12, Math.round(n6[1] / r12) * r12];
  }
};
var e = t;
m(e, "neg", (n6) => [-n6[0], -n6[1]]), m(e, "add", (n6, r12) => [n6[0] + r12[0], n6[1] + r12[1]]), m(e, "addScalar", (n6, r12) => [n6[0] + r12, n6[1] + r12]), m(e, "sub", (n6, r12) => [n6[0] - r12[0], n6[1] - r12[1]]), m(e, "subScalar", (n6, r12) => [n6[0] - r12, n6[1] - r12]), m(e, "vec", (n6, r12) => [r12[0] - n6[0], r12[1] - n6[1]]), m(e, "mul", (n6, r12) => [n6[0] * r12, n6[1] * r12]), m(e, "mulV", (n6, r12) => [n6[0] * r12[0], n6[1] * r12[1]]), m(e, "div", (n6, r12) => [n6[0] / r12, n6[1] / r12]), m(e, "divV", (n6, r12) => [n6[0] / r12[0], n6[1] / r12[1]]), m(e, "per", (n6) => [n6[1], -n6[0]]), m(e, "dpr", (n6, r12) => n6[0] * r12[0] + n6[1] * r12[1]), m(e, "cpr", (n6, r12) => n6[0] * r12[1] - r12[0] * n6[1]), m(e, "len2", (n6) => n6[0] * n6[0] + n6[1] * n6[1]), m(e, "len", (n6) => Math.hypot(n6[0], n6[1])), m(e, "pry", (n6, r12) => t.dpr(n6, r12) / t.len(r12)), m(e, "uni", (n6) => t.div(n6, t.len(n6))), m(e, "normalize", (n6) => t.uni(n6)), m(e, "tangent", (n6, r12) => t.uni(t.sub(n6, r12))), m(e, "dist2", (n6, r12) => t.len2(t.sub(n6, r12))), m(e, "dist", (n6, r12) => Math.hypot(n6[1] - r12[1], n6[0] - r12[0])), m(e, "fastDist", (n6, r12) => {
  let u5 = [r12[0] - n6[0], r12[1] - n6[1]], b7 = [Math.abs(u5[0]), Math.abs(u5[1])], a6 = 1 / Math.max(b7[0], b7[1]);
  return a6 = a6 * (1.29289 - (b7[0] + b7[1]) * a6 * 0.29289), [u5[0] * a6, u5[1] * a6];
}), m(e, "ang", (n6, r12) => Math.atan2(t.cpr(n6, r12), t.dpr(n6, r12))), m(e, "angle", (n6, r12) => Math.atan2(r12[1] - n6[1], r12[0] - n6[0])), m(e, "med", (n6, r12) => t.mul(t.add(n6, r12), 0.5)), m(e, "rot", (n6, r12 = 0) => [n6[0] * Math.cos(r12) - n6[1] * Math.sin(r12), n6[0] * Math.sin(r12) + n6[1] * Math.cos(r12)]), m(e, "rotWith", (n6, r12, u5 = 0) => {
  if (u5 === 0)
    return n6;
  let b7 = Math.sin(u5), a6 = Math.cos(u5), i7 = n6[0] - r12[0], o10 = n6[1] - r12[1], c8 = i7 * a6 - o10 * b7, l8 = i7 * b7 + o10 * a6;
  return [c8 + r12[0], l8 + r12[1]];
}), m(e, "isEqual", (n6, r12) => n6[0] === r12[0] && n6[1] === r12[1]), m(e, "lrp", (n6, r12, u5) => t.add(n6, t.mul(t.sub(r12, n6), u5))), m(e, "int", (n6, r12, u5, b7, a6 = 1) => {
  let i7 = (t.clamp(u5, b7) - u5) / (b7 - u5);
  return t.add(t.mul(n6, 1 - i7), t.mul(r12, a6));
}), m(e, "ang3", (n6, r12, u5) => {
  let b7 = t.vec(r12, n6), a6 = t.vec(r12, u5);
  return t.ang(b7, a6);
}), m(e, "abs", (n6) => [Math.abs(n6[0]), Math.abs(n6[1])]), m(e, "rescale", (n6, r12) => {
  let u5 = t.len(n6);
  return [r12 * n6[0] / u5, r12 * n6[1] / u5];
}), m(e, "isLeft", (n6, r12, u5) => (r12[0] - n6[0]) * (u5[1] - n6[1]) - (u5[0] - n6[0]) * (r12[1] - n6[1])), m(e, "clockwise", (n6, r12, u5) => t.isLeft(n6, r12, u5) > 0), m(e, "toFixed", (n6) => n6.map((r12) => Math.round(r12 * 100) / 100)), m(e, "nearestPointOnLineThroughPoint", (n6, r12, u5) => t.add(n6, t.mul(r12, t.pry(t.sub(u5, n6), r12)))), m(e, "distanceToLineThroughPoint", (n6, r12, u5) => t.dist(u5, t.nearestPointOnLineThroughPoint(n6, r12, u5))), m(e, "nearestPointOnLineSegment", (n6, r12, u5, b7 = true) => {
  let a6 = t.uni(t.sub(r12, n6)), i7 = t.add(n6, t.mul(a6, t.pry(t.sub(u5, n6), a6)));
  if (b7) {
    if (i7[0] < Math.min(n6[0], r12[0]))
      return n6[0] < r12[0] ? n6 : r12;
    if (i7[0] > Math.max(n6[0], r12[0]))
      return n6[0] > r12[0] ? n6 : r12;
    if (i7[1] < Math.min(n6[1], r12[1]))
      return n6[1] < r12[1] ? n6 : r12;
    if (i7[1] > Math.max(n6[1], r12[1]))
      return n6[1] > r12[1] ? n6 : r12;
  }
  return i7;
}), m(e, "distanceToLineSegment", (n6, r12, u5, b7 = true) => t.dist(u5, t.nearestPointOnLineSegment(n6, r12, u5, b7))), m(e, "nearestPointOnBounds", (n6, r12) => [t.clamp(r12[0], n6.minX, n6.maxX), t.clamp(r12[1], n6.minY, n6.maxY)]), m(e, "distanceToBounds", (n6, r12) => t.dist(r12, t.nearestPointOnBounds(n6, r12))), m(e, "nudge", (n6, r12, u5) => t.isEqual(n6, r12) ? n6 : t.add(n6, t.mul(t.uni(t.sub(r12, n6)), u5))), m(e, "nudgeAtAngle", (n6, r12, u5) => [Math.cos(r12) * u5 + n6[0], Math.sin(r12) * u5 + n6[1]]), m(e, "toPrecision", (n6, r12 = 4) => [+n6[0].toPrecision(r12), +n6[1].toPrecision(r12)]), m(e, "pointsBetween", (n6, r12, u5 = 6) => Array.from(Array(u5)).map((b7, a6) => {
  let i7 = a6 / (u5 - 1), o10 = Math.min(1, 0.5 + Math.abs(0.5 - i7));
  return [...t.lrp(n6, r12, i7), o10];
})), m(e, "slope", (n6, r12) => n6[0] === r12[0] ? NaN : (n6[1] - r12[1]) / (n6[0] - r12[0])), m(e, "max", (...n6) => [Math.max(...n6.map((r12) => r12[0])), Math.max(...n6.map((r12) => r12[1]))]), m(e, "min", (...n6) => [Math.min(...n6.map((r12) => r12[0])), Math.min(...n6.map((r12) => r12[1]))]);
var p = e;

// ../../packages/core/dist/index.mjs
var import_react11 = __toESM(require_react(), 1);
var React32 = __toESM(require_react(), 1);
var React4 = __toESM(require_react(), 1);
var React5 = __toESM(require_react(), 1);
var React6 = __toESM(require_react(), 1);
var React7 = __toESM(require_react(), 1);
var React8 = __toESM(require_react(), 1);
var React9 = __toESM(require_react(), 1);
var React10 = __toESM(require_react(), 1);
var React11 = __toESM(require_react(), 1);
var React12 = __toESM(require_react(), 1);
var React13 = __toESM(require_react(), 1);
var React14 = __toESM(require_react(), 1);
var React15 = __toESM(require_react(), 1);
var React16 = __toESM(require_react(), 1);
var React17 = __toESM(require_react(), 1);
var React18 = __toESM(require_react(), 1);
var React35 = __toESM(require_react(), 1);
var React27 = __toESM(require_react(), 1);
var React19 = __toESM(require_react(), 1);
var React20 = __toESM(require_react(), 1);
var React21 = __toESM(require_react(), 1);
var React222 = __toESM(require_react(), 1);
var React23 = __toESM(require_react(), 1);
var React25 = __toESM(require_react(), 1);
var React24 = __toESM(require_react(), 1);
var React26 = __toESM(require_react(), 1);
var React28 = __toESM(require_react(), 1);
var React30 = __toESM(require_react(), 1);
var React29 = __toESM(require_react(), 1);
var React33 = __toESM(require_react(), 1);
var React322 = __toESM(require_react(), 1);
var React31 = __toESM(require_react(), 1);
var React34 = __toESM(require_react(), 1);
var React37 = __toESM(require_react(), 1);
var React36 = __toESM(require_react(), 1);

// ../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key) {
      var index2 = getIndex(this.__entries__, key);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key, value) {
      var index2 = getIndex(this.__entries__, key);
      if (~index2) {
        this.__entries__[index2][1] = value;
      } else {
        this.__entries__.push([key, value]);
      }
    };
    class_1.prototype.delete = function(key) {
      var entries2 = this.__entries__;
      var index2 = getIndex(entries2, key);
      if (~index2) {
        entries2.splice(index2, 1);
      }
    };
    class_1.prototype.has = function(key) {
      return !!~getIndex(this.__entries__, key);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx) {
      if (ctx === void 0) {
        ctx = null;
      }
      for (var _i = 0, _a3 = this.__entries__; _i < _a3.length; _i++) {
        var entry = _a3[_i];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer2) {
    if (!~this.observers_.indexOf(observer2)) {
      this.observers_.push(observer2);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer2) {
    var observers2 = this.observers_;
    var index2 = observers2.indexOf(observer2);
    if (~index2) {
      observers2.splice(index2, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer2) {
      return observer2.gatherActive(), observer2.hasActive();
    });
    activeObservers.forEach(function(observer2) {
      return observer2.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser2 || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser2 || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a3) {
    var _b = _a3.propertyName, propertyName = _b === void 0 ? "" : _b;
    var isReflowProperty = transitionKeys.some(function(key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target, props) {
  for (var _i = 0, _a3 = Object.keys(props); _i < _a3.length; _i++) {
    var key = _a3[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles23) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles23["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles23) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles23["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles23 = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles23);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles23.width), height = toFloat(styles23.height);
  if (styles23.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles23, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles23, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser2) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a3) {
  var x7 = _a3.x, y4 = _a3.y, width = _a3.width, height = _a3.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x7,
    y: y4,
    width,
    height,
    top: y4,
    right: x7 + width,
    bottom: height + y4,
    left: x7
  });
  return rect;
}
function createRectInit(x7, y4, width, height) {
  return { x: x7, y: y4, width, height };
}
var ResizeObservation = function() {
  function ResizeObservation2(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, { target, contentRect });
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    var entries2 = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries2, ctx);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver2 = function() {
  function ResizeObserver3(callback) {
    if (!(this instanceof ResizeObserver3)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer2 = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer2);
  }
  return ResizeObserver3;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method) {
  ResizeObserver2.prototype[method] = function() {
    var _a3;
    return (_a3 = observers.get(this))[method].apply(_a3, arguments);
  };
});
var index = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver2;
}();
var ResizeObserver_es_default = index;

// ../../packages/core/dist/index.mjs
var React38 = __toESM(require_react(), 1);
var React39 = __toESM(require_react(), 1);
var React40 = __toESM(require_react(), 1);
var React41 = __toESM(require_react(), 1);
var React42 = __toESM(require_react(), 1);
var React43 = __toESM(require_react(), 1);

// ../../node_modules/perfect-freehand/dist/esm/index.js
function W(e13, t12, u5, x7 = (g7) => g7) {
  return e13 * x7(0.5 - t12 * (0.5 - u5));
}
function re(e13) {
  return [-e13[0], -e13[1]];
}
function l(e13, t12) {
  return [e13[0] + t12[0], e13[1] + t12[1]];
}
function a(e13, t12) {
  return [e13[0] - t12[0], e13[1] - t12[1]];
}
function b(e13, t12) {
  return [e13[0] * t12, e13[1] * t12];
}
function le(e13, t12) {
  return [e13[0] / t12, e13[1] / t12];
}
function R(e13) {
  return [e13[1], -e13[0]];
}
function ne(e13, t12) {
  return e13[0] * t12[0] + e13[1] * t12[1];
}
function oe(e13, t12) {
  return e13[0] === t12[0] && e13[1] === t12[1];
}
function fe(e13) {
  return Math.hypot(e13[0], e13[1]);
}
function be(e13) {
  return e13[0] * e13[0] + e13[1] * e13[1];
}
function Y(e13, t12) {
  return be(a(e13, t12));
}
function H2(e13) {
  return le(e13, fe(e13));
}
function ue(e13, t12) {
  return Math.hypot(e13[1] - t12[1], e13[0] - t12[0]);
}
function L(e13, t12, u5) {
  let x7 = Math.sin(u5), g7 = Math.cos(u5), y4 = e13[0] - t12[0], n6 = e13[1] - t12[1], f8 = y4 * g7 - n6 * x7, d8 = y4 * x7 + n6 * g7;
  return [f8 + t12[0], d8 + t12[1]];
}
function V2(e13, t12, u5) {
  return l(e13, b(a(t12, e13), u5));
}
function Z(e13, t12, u5) {
  return l(e13, b(t12, u5));
}
var { min: T, PI: ge } = Math;
var se = 0.275;
var j = ge + 1e-4;
function ie(e13, t12 = {}) {
  let { size: u5 = 16, smoothing: x7 = 0.5, thinning: g7 = 0.5, simulatePressure: y4 = true, easing: n6 = (r12) => r12, start: f8 = {}, end: d8 = {}, last: _4 = false } = t12, { cap: S3 = true, easing: q3 = (r12) => r12 * (2 - r12) } = f8, { cap: C6 = true, easing: p7 = (r12) => --r12 * r12 * r12 + 1 } = d8;
  if (e13.length === 0 || u5 <= 0)
    return [];
  let m8 = e13[e13.length - 1].runningLength, h6 = f8.taper === false ? 0 : f8.taper === true ? Math.max(u5, m8) : f8.taper, z3 = d8.taper === false ? 0 : d8.taper === true ? Math.max(u5, m8) : d8.taper, $2 = Math.pow(u5 * x7, 2), D5 = [], M3 = [], N2 = e13.slice(0, 10).reduce((r12, i7) => {
    let o10 = i7.pressure;
    if (y4) {
      let s9 = T(1, i7.distance / u5), J4 = T(1, 1 - s9);
      o10 = T(1, r12 + (J4 - r12) * (s9 * se));
    }
    return (r12 + o10) / 2;
  }, e13[0].pressure), c8 = W(u5, g7, e13[e13.length - 1].pressure, n6), U3, B4 = e13[0].vector, I4 = e13[0].point, F6 = I4, O5 = I4, E7 = F6;
  for (let r12 = 0; r12 < e13.length; r12++) {
    let { pressure: i7 } = e13[r12], { point: o10, vector: s9, distance: J4, runningLength: K3 } = e13[r12];
    if (r12 < e13.length - 1 && m8 - K3 < 3)
      continue;
    if (g7) {
      if (y4) {
        let v6 = T(1, J4 / u5), Q = T(1, 1 - v6);
        i7 = T(1, N2 + (Q - N2) * (v6 * se));
      }
      c8 = W(u5, g7, i7, n6);
    } else
      c8 = u5 / 2;
    U3 === void 0 && (U3 = c8);
    let ce = K3 < h6 ? q3(K3 / h6) : 1, ae = m8 - K3 < z3 ? p7((m8 - K3) / z3) : 1;
    if (c8 = Math.max(0.01, c8 * Math.min(ce, ae)), r12 === e13.length - 1) {
      let v6 = b(R(s9), c8);
      D5.push(a(o10, v6)), M3.push(l(o10, v6));
      continue;
    }
    let A4 = e13[r12 + 1].vector, ee = ne(s9, A4);
    if (ee < 0) {
      let v6 = b(R(B4), c8);
      for (let Q = 1 / 13, G3 = 0; G3 <= 1; G3 += Q)
        O5 = L(a(o10, v6), o10, j * G3), D5.push(O5), E7 = L(l(o10, v6), o10, j * -G3), M3.push(E7);
      I4 = O5, F6 = E7;
      continue;
    }
    let te = b(R(V2(A4, s9, ee)), c8);
    O5 = a(o10, te), (r12 <= 1 || Y(I4, O5) > $2) && (D5.push(O5), I4 = O5), E7 = l(o10, te), (r12 <= 1 || Y(F6, E7) > $2) && (M3.push(E7), F6 = E7), N2 = i7, B4 = s9;
  }
  let k4 = e13[0].point.slice(0, 2), P3 = e13.length > 1 ? e13[e13.length - 1].point.slice(0, 2) : l(e13[0].point, [1, 1]), X3 = [], w7 = [];
  if (e13.length === 1) {
    if (!(h6 || z3) || _4) {
      let r12 = Z(k4, H2(R(a(k4, P3))), -(U3 || c8)), i7 = [];
      for (let o10 = 1 / 13, s9 = o10; s9 <= 1; s9 += o10)
        i7.push(L(r12, k4, j * 2 * s9));
      return i7;
    }
  } else {
    if (!(h6 || z3 && e13.length === 1))
      if (S3)
        for (let i7 = 1 / 13, o10 = i7; o10 <= 1; o10 += i7) {
          let s9 = L(M3[0], k4, j * o10);
          X3.push(s9);
        }
      else {
        let i7 = a(D5[0], M3[0]), o10 = b(i7, 0.5), s9 = b(i7, 0.51);
        X3.push(a(k4, o10), a(k4, s9), l(k4, s9), l(k4, o10));
      }
    let r12 = R(re(e13[e13.length - 1].vector));
    if (z3 || h6 && e13.length === 1)
      w7.push(P3);
    else if (C6) {
      let i7 = Z(P3, r12, c8);
      for (let o10 = 1 / 29, s9 = o10; s9 < 1; s9 += o10)
        w7.push(L(i7, P3, j * 3 * s9));
    } else
      w7.push(l(P3, b(r12, c8)), l(P3, b(r12, c8 * 0.99)), a(P3, b(r12, c8 * 0.99)), a(P3, b(r12, c8)));
  }
  return D5.concat(w7, M3.reverse(), X3);
}
function me(e13, t12 = {}) {
  var C6;
  let { streamline: u5 = 0.5, size: x7 = 16, last: g7 = false } = t12;
  if (e13.length === 0)
    return [];
  let y4 = 0.15 + (1 - u5) * 0.85, n6 = Array.isArray(e13[0]) ? e13 : e13.map(({ x: p7, y: m8, pressure: h6 = 0.5 }) => [p7, m8, h6]);
  if (n6.length === 2) {
    let p7 = n6[1];
    n6 = n6.slice(0, -1);
    for (let m8 = 1; m8 < 5; m8++)
      n6.push(V2(n6[0], p7, m8 / 4));
  }
  n6.length === 1 && (n6 = [...n6, [...l(n6[0], [1, 1]), ...n6[0].slice(2)]]);
  let f8 = [{ point: [n6[0][0], n6[0][1]], pressure: n6[0][2] >= 0 ? n6[0][2] : 0.25, vector: [1, 1], distance: 0, runningLength: 0 }], d8 = false, _4 = 0, S3 = f8[0], q3 = n6.length - 1;
  for (let p7 = 1; p7 < n6.length; p7++) {
    let m8 = g7 && p7 === q3 ? n6[p7].slice(0, 2) : V2(S3.point, n6[p7], y4);
    if (oe(S3.point, m8))
      continue;
    let h6 = ue(m8, S3.point);
    if (_4 += h6, p7 < q3 && !d8) {
      if (_4 < x7)
        continue;
      d8 = true;
    }
    S3 = { point: m8, pressure: n6[p7][2] >= 0 ? n6[p7][2] : 0.5, vector: H2(a(S3.point, m8)), distance: h6, runningLength: _4 }, f8.push(S3);
  }
  return f8[0].vector = ((C6 = f8[1]) == null ? void 0 : C6.vector) || [0, 0], f8;
}
function pe(e13, t12 = {}) {
  return ie(me(e13, t12), t12);
}
var Te = pe;

// ../../packages/core/dist/index.mjs
var React46 = __toESM(require_react(), 1);
var React47 = __toESM(require_react(), 1);

// ../../packages/intersect/dist/index.mjs
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a6, b7) => {
  for (var prop in b7 || (b7 = {}))
    if (__hasOwnProp2.call(b7, prop))
      __defNormalProp2(a6, prop, b7[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b7)) {
      if (__propIsEnum2.call(b7, prop))
        __defNormalProp2(a6, prop, b7[prop]);
    }
  return a6;
};
var __spreadProps2 = (a6, b7) => __defProps2(a6, __getOwnPropDescs2(b7));
function createIntersection(message, ...points) {
  const didIntersect = points.length > 0;
  return { didIntersect, message, points };
}
function getRectangleSides(point, size, rotation = 0) {
  const center = [point[0] + size[0] / 2, point[1] + size[1] / 2];
  const tl = e.rotWith(point, center, rotation);
  const tr = e.rotWith(e.add(point, [size[0], 0]), center, rotation);
  const br = e.rotWith(e.add(point, size), center, rotation);
  const bl = e.rotWith(e.add(point, [0, size[1]]), center, rotation);
  return [
    ["top", [tl, tr]],
    ["right", [tr, br]],
    ["bottom", [br, bl]],
    ["left", [bl, tl]]
  ];
}
function isAngleBetween(a6, b7, c8) {
  if (c8 === a6 || c8 === b7)
    return true;
  const PI24 = Math.PI * 2;
  const AB = (b7 - a6 + PI24) % PI24;
  const AC = (c8 - a6 + PI24) % PI24;
  return AB <= Math.PI !== AC > AB;
}
function intersectLineLine(AB, PQ) {
  const slopeAB = e.slope(AB[0], AB[1]);
  const slopePQ = e.slope(PQ[0], PQ[1]);
  if (slopeAB === slopePQ)
    return void 0;
  if (Number.isNaN(slopeAB) && !Number.isNaN(slopePQ)) {
    return [AB[0][0], (AB[0][0] - PQ[0][0]) * slopePQ + PQ[0][1]];
  }
  if (Number.isNaN(slopePQ) && !Number.isNaN(slopeAB)) {
    return [PQ[0][0], (PQ[0][0] - AB[0][0]) * slopeAB + AB[0][1]];
  }
  const x7 = (slopeAB * AB[0][0] - slopePQ * PQ[0][0] + PQ[0][1] - AB[0][1]) / (slopeAB - slopePQ);
  const y4 = slopePQ * (x7 - PQ[0][0]) + PQ[0][1];
  return [x7, y4];
}
function intersectRayLineSegment(origin, direction, a1, a22) {
  const [x7, y4] = origin;
  const [dx, dy] = direction;
  const [x1, y1] = a1;
  const [x22, y22] = a22;
  if (dy / dx !== (y22 - y1) / (x22 - x1)) {
    const d8 = dx * (y22 - y1) - dy * (x22 - x1);
    if (d8 !== 0) {
      const r12 = ((y4 - y1) * (x22 - x1) - (x7 - x1) * (y22 - y1)) / d8;
      const s9 = ((y4 - y1) * dx - (x7 - x1) * dy) / d8;
      if (r12 >= 0 && s9 >= 0 && s9 <= 1) {
        return createIntersection("intersection", [x7 + r12 * dx, y4 + r12 * dy]);
      }
    }
  }
  return createIntersection("no intersection");
}
function intersectRayRectangle(origin, direction, point, size, rotation = 0) {
  return intersectRectangleRay(point, size, rotation, origin, direction);
}
function intersectRayEllipse(origin, direction, center, rx, ry, rotation) {
  const a1 = origin;
  const a22 = e.mul(direction, 999999999);
  return intersectLineSegmentEllipse(a1, a22, center, rx, ry, rotation);
}
function intersectRayBounds(origin, direction, bounds, rotation = 0) {
  const { minX, minY, width, height } = bounds;
  return intersectRayRectangle(origin, direction, [minX, minY], [width, height], rotation);
}
function intersectLineSegmentLineSegment(a1, a22, b1, b22) {
  const AB = e.sub(a1, b1);
  const BV = e.sub(b22, b1);
  const AV = e.sub(a22, a1);
  const ua_t = BV[0] * AB[1] - BV[1] * AB[0];
  const ub_t = AV[0] * AB[1] - AV[1] * AB[0];
  const u_b = BV[1] * AV[0] - BV[0] * AV[1];
  if (ua_t === 0 || ub_t === 0) {
    return createIntersection("coincident");
  }
  if (u_b === 0) {
    return createIntersection("parallel");
  }
  if (u_b !== 0) {
    const ua = ua_t / u_b;
    const ub = ub_t / u_b;
    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
      return createIntersection("intersection", e.add(a1, e.mul(AV, ua)));
    }
  }
  return createIntersection("no intersection");
}
function intersectLineSegmentRectangle(a1, a22, point, size) {
  return intersectRectangleLineSegment(point, size, a1, a22);
}
function intersectLineSegmentArc(a1, a22, center, radius, start, end) {
  const sa = e.angle(center, start);
  const ea = e.angle(center, end);
  const ellipseTest = intersectEllipseLineSegment(center, radius, radius, 0, a1, a22);
  if (!ellipseTest.didIntersect)
    return createIntersection("no intersection");
  const points = ellipseTest.points.filter((point) => isAngleBetween(sa, ea, e.angle(center, point)));
  if (points.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentCircle(a1, a22, c8, r12) {
  const a6 = (a22[0] - a1[0]) * (a22[0] - a1[0]) + (a22[1] - a1[1]) * (a22[1] - a1[1]);
  const b7 = 2 * ((a22[0] - a1[0]) * (a1[0] - c8[0]) + (a22[1] - a1[1]) * (a1[1] - c8[1]));
  const cc = c8[0] * c8[0] + c8[1] * c8[1] + a1[0] * a1[0] + a1[1] * a1[1] - 2 * (c8[0] * a1[0] + c8[1] * a1[1]) - r12 * r12;
  const deter = b7 * b7 - 4 * a6 * cc;
  if (deter < 0) {
    return createIntersection("outside");
  }
  if (deter === 0) {
    return createIntersection("tangent");
  }
  const e13 = Math.sqrt(deter);
  const u1 = (-b7 + e13) / (2 * a6);
  const u22 = (-b7 - e13) / (2 * a6);
  if ((u1 < 0 || u1 > 1) && (u22 < 0 || u22 > 1)) {
    if (u1 < 0 && u22 < 0 || u1 > 1 && u22 > 1) {
      return createIntersection("outside");
    } else {
      return createIntersection("inside");
    }
  }
  const results = [];
  if (0 <= u1 && u1 <= 1)
    results.push(e.lrp(a1, a22, u1));
  if (0 <= u22 && u22 <= 1)
    results.push(e.lrp(a1, a22, u22));
  return createIntersection("intersection", ...results);
}
function intersectLineSegmentEllipse(a1, a22, center, rx, ry, rotation = 0) {
  if (rx === 0 || ry === 0 || e.isEqual(a1, a22)) {
    return createIntersection("no intersection");
  }
  rx = rx < 0 ? rx : -rx;
  ry = ry < 0 ? ry : -ry;
  a1 = e.sub(e.rotWith(a1, center, -rotation), center);
  a22 = e.sub(e.rotWith(a22, center, -rotation), center);
  const diff = e.sub(a22, a1);
  const A4 = diff[0] * diff[0] / rx / rx + diff[1] * diff[1] / ry / ry;
  const B4 = 2 * a1[0] * diff[0] / rx / rx + 2 * a1[1] * diff[1] / ry / ry;
  const C6 = a1[0] * a1[0] / rx / rx + a1[1] * a1[1] / ry / ry - 1;
  const tValues = [];
  const discriminant = B4 * B4 - 4 * A4 * C6;
  if (discriminant === 0) {
    tValues.push(-B4 / 2 / A4);
  } else if (discriminant > 0) {
    const root2 = Math.sqrt(discriminant);
    tValues.push((-B4 + root2) / 2 / A4);
    tValues.push((-B4 - root2) / 2 / A4);
  }
  const points = tValues.filter((t12) => t12 >= 0 && t12 <= 1).map((t12) => e.add(center, e.add(a1, e.mul(e.sub(a22, a1), t12)))).map((p7) => e.rotWith(p7, center, rotation));
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentBounds(a1, a22, bounds) {
  return intersectBoundsLineSegment(bounds, a1, a22);
}
function intersectLineSegmentPolyline(a1, a22, points) {
  const pts = [];
  for (let i7 = 1; i7 < points.length; i7++) {
    const int = intersectLineSegmentLineSegment(a1, a22, points[i7 - 1], points[i7]);
    if (int) {
      pts.push(...int.points);
    }
  }
  if (pts.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectLineSegmentPolygon(a1, a22, points) {
  const pts = [];
  for (let i7 = 1; i7 < points.length + 1; i7++) {
    const int = intersectLineSegmentLineSegment(a1, a22, points[i7 - 1], points[i7 % points.length]);
    if (int) {
      pts.push(...int.points);
    }
  }
  if (pts.length === 0) {
    return createIntersection("no intersection");
  }
  return createIntersection("intersection", ...points);
}
function intersectRectangleRay(point, size, rotation, origin, direction) {
  const sideIntersections = getRectangleSides(point, size, rotation).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectRayLineSegment(origin, direction, a1, a22);
    if (intersection) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleLineSegment(point, size, a1, a22) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [b1, b22]]) => {
    const intersection = intersectLineSegmentLineSegment(a1, a22, b1, b22);
    if (intersection) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleRectangle(point1, size1, point2, size2) {
  const sideIntersections = getRectangleSides(point1, size1).reduce((acc, [message, [a1, a22]]) => {
    const intersections = intersectRectangleLineSegment(point2, size2, a1, a22);
    acc.push(...intersections.map((int) => createIntersection(`${message} ${int.message}`, ...int.points)));
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleArc(point, size, center, radius, start, end) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectArcLineSegment(center, radius, start, end, a1, a22);
    if (intersection) {
      acc.push(__spreadProps2(__spreadValues2({}, intersection), { message }));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleCircle(point, size, c8, r12) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectLineSegmentCircle(a1, a22, c8, r12);
    if (intersection) {
      acc.push(__spreadProps2(__spreadValues2({}, intersection), { message }));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectangleEllipse(point, size, c8, rx, ry, rotation = 0) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectLineSegmentEllipse(a1, a22, c8, rx, ry, rotation);
    if (intersection) {
      acc.push(__spreadProps2(__spreadValues2({}, intersection), { message }));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectanglePolyline(point, size, points) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectLineSegmentPolyline(a1, a22, points);
    if (intersection.didIntersect) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectRectanglePolygon(point, size, points) {
  const sideIntersections = getRectangleSides(point, size).reduce((acc, [message, [a1, a22]]) => {
    const intersection = intersectLineSegmentPolygon(a1, a22, points);
    if (intersection.didIntersect) {
      acc.push(createIntersection(message, ...intersection.points));
    }
    return acc;
  }, []);
  return sideIntersections.filter((int) => int.didIntersect);
}
function intersectArcLineSegment(center, radius, start, end, a1, a22) {
  return intersectLineSegmentArc(a1, a22, center, radius, start, end);
}
function intersectArcRectangle(center, radius, start, end, point, size) {
  return intersectRectangleArc(point, size, center, radius, start, end);
}
function intersectArcBounds(center, radius, start, end, bounds) {
  const { minX, minY, width, height } = bounds;
  return intersectArcRectangle(center, radius, start, end, [minX, minY], [width, height]);
}
function intersectCircleLineSegment(c8, r12, a1, a22) {
  return intersectLineSegmentCircle(a1, a22, c8, r12);
}
function intersectCircleCircle(c1, r1, c22, r22) {
  let dx = c22[0] - c1[0], dy = c22[1] - c1[1];
  const d8 = Math.sqrt(dx * dx + dy * dy), x7 = (d8 * d8 - r22 * r22 + r1 * r1) / (2 * d8), y4 = Math.sqrt(r1 * r1 - x7 * x7);
  dx /= d8;
  dy /= d8;
  return createIntersection("intersection", [c1[0] + dx * x7 - dy * y4, c1[1] + dy * x7 + dx * y4], [c1[0] + dx * x7 + dy * y4, c1[1] + dy * x7 - dx * y4]);
}
function intersectEllipseLineSegment(center, rx, ry, rotation = 0, a1, a22) {
  if (rx === ry) {
    return intersectLineSegmentCircle(a1, a22, center, rx);
  }
  return intersectLineSegmentEllipse(a1, a22, center, rx, ry, rotation);
}
function intersectEllipseRectangle(center, rx, ry, rotation = 0, point, size) {
  if (rx === ry) {
    return intersectRectangleCircle(point, size, center, rx);
  }
  return intersectRectangleEllipse(point, size, center, rx, ry, rotation);
}
function intersectEllipseBounds(c8, rx, ry, rotation, bounds) {
  const { minX, minY, width, height } = bounds;
  return intersectEllipseRectangle(c8, rx, ry, rotation, [minX, minY], [width, height]);
}
function intersectBoundsLineSegment(bounds, a1, a22) {
  const { minX, minY, width, height } = bounds;
  return intersectLineSegmentRectangle(a1, a22, [minX, minY], [width, height]);
}
function intersectBoundsBounds(bounds1, bounds2) {
  return intersectRectangleRectangle([bounds1.minX, bounds1.minY], [bounds1.width, bounds1.height], [bounds2.minX, bounds2.minY], [bounds2.width, bounds2.height]);
}
function intersectBoundsPolyline(bounds, points) {
  return intersectPolylineBounds(points, bounds);
}
function intersectBoundsPolygon(bounds, points) {
  return intersectPolygonBounds(points, bounds);
}
function intersectPolylineBounds(points, bounds) {
  return intersectRectanglePolyline([bounds.minX, bounds.minY], [bounds.width, bounds.height], points);
}
function intersectPolygonBounds(points, bounds) {
  return intersectRectanglePolygon([bounds.minX, bounds.minY], [bounds.width, bounds.height], points);
}

// ../../packages/core/dist/index.mjs
var __defProp3 = Object.defineProperty;
var __defProps3 = Object.defineProperties;
var __getOwnPropDescs3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues3 = (a6, b7) => {
  for (var prop in b7 || (b7 = {}))
    if (__hasOwnProp3.call(b7, prop))
      __defNormalProp3(a6, prop, b7[prop]);
  if (__getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(b7)) {
      if (__propIsEnum3.call(b7, prop))
        __defNormalProp3(a6, prop, b7[prop]);
    }
  return a6;
};
var __spreadProps3 = (a6, b7) => __defProps3(a6, __getOwnPropDescs3(b7));
var __objRest2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp3.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum3.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var TLContext = React3.createContext({});
function useTLContext() {
  const context = React3.useContext(TLContext);
  return context;
}
var TLBoundsCorner = /* @__PURE__ */ ((TLBoundsCorner2) => {
  TLBoundsCorner2["TopLeft"] = "top_left_corner";
  TLBoundsCorner2["TopRight"] = "top_right_corner";
  TLBoundsCorner2["BottomRight"] = "bottom_right_corner";
  TLBoundsCorner2["BottomLeft"] = "bottom_left_corner";
  return TLBoundsCorner2;
})(TLBoundsCorner || {});
if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function(str, newStr) {
    if (Object.prototype.toString.call(str).toLowerCase() === "[object regexp]") {
      return this.replace(str, newStr);
    }
    return this.replace(new RegExp(str, "g"), newStr);
  };
}
var TAU = Math.PI * 2;
var _Utils = class {
  static lerp(y1, y22, mu) {
    mu = _Utils.clamp(mu, 0, 1);
    return y1 * (1 - mu) + y22 * mu;
  }
  static lerpColor(color1, color2, factor = 0.5) {
    function h2r(hex) {
      const result2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return [parseInt(result2[1], 16), parseInt(result2[2], 16), parseInt(result2[3], 16)];
    }
    function r2h(rgb) {
      return "#" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);
    }
    const c1 = h2r(color1) || [0, 0, 0];
    const c22 = h2r(color2) || [0, 0, 0];
    const result = c1.slice();
    for (let i7 = 0; i7 < 3; i7++) {
      result[i7] = Math.round(result[i7] + factor * (c22[i7] - c1[i7]));
    }
    return r2h(result);
  }
  static modulate(value, rangeA, rangeB, clamp2 = false) {
    const [fromLow, fromHigh] = rangeA;
    const [v0, v1] = rangeB;
    const result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
    return clamp2 ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
  }
  static clamp(n6, min, max) {
    return Math.max(min, typeof max !== "undefined" ? Math.min(n6, max) : n6);
  }
  static deepClone(obj) {
    if (obj === null)
      return obj;
    if (Array.isArray(obj)) {
      return [...obj];
    }
    if (typeof obj === "object") {
      const clone = __spreadValues3({}, obj);
      Object.keys(clone).forEach((key) => clone[key] = typeof obj[key] === "object" ? _Utils.deepClone(obj[key]) : obj[key]);
      return clone;
    }
    return obj;
  }
  static rng(seed = "") {
    let x7 = 0;
    let y4 = 0;
    let z3 = 0;
    let w7 = 0;
    function next() {
      const t12 = x7 ^ x7 << 11;
      x7 = y4;
      y4 = z3;
      z3 = w7;
      w7 ^= (w7 >>> 19 ^ t12 ^ t12 >>> 8) >>> 0;
      return w7 / 4294967296;
    }
    for (let k4 = 0; k4 < seed.length + 64; k4++) {
      x7 ^= seed.charCodeAt(k4) | 0;
      next();
    }
    return next;
  }
  static pointsToLineSegments(points, closed = false) {
    const segments = [];
    for (let i7 = 1; i7 < points.length; i7++)
      segments.push([points[i7 - 1], points[i7]]);
    if (closed)
      segments.push([points[points.length - 1], points[0]]);
    return segments;
  }
  static getRectangleSides(point, size, rotation = 0) {
    const center = [point[0] + size[0] / 2, point[1] + size[1] / 2];
    const tl = e.rotWith(point, center, rotation);
    const tr = e.rotWith(e.add(point, [size[0], 0]), center, rotation);
    const br = e.rotWith(e.add(point, size), center, rotation);
    const bl = e.rotWith(e.add(point, [0, size[1]]), center, rotation);
    return [
      ["top", [tl, tr]],
      ["right", [tr, br]],
      ["bottom", [br, bl]],
      ["left", [bl, tl]]
    ];
  }
  static circleFromThreePoints(A4, B4, C6) {
    const [x1, y1] = A4;
    const [x22, y22] = B4;
    const [x32, y32] = C6;
    const a6 = x1 * (y22 - y32) - y1 * (x22 - x32) + x22 * y32 - x32 * y22;
    const b7 = (x1 * x1 + y1 * y1) * (y32 - y22) + (x22 * x22 + y22 * y22) * (y1 - y32) + (x32 * x32 + y32 * y32) * (y22 - y1);
    const c8 = (x1 * x1 + y1 * y1) * (x22 - x32) + (x22 * x22 + y22 * y22) * (x32 - x1) + (x32 * x32 + y32 * y32) * (x1 - x22);
    const x7 = -b7 / (2 * a6);
    const y4 = -c8 / (2 * a6);
    return [x7, y4, Math.hypot(x7 - x1, y4 - y1)];
  }
  static perimeterOfEllipse(rx, ry) {
    const h6 = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
    const p7 = Math.PI * (rx + ry) * (1 + 3 * h6 / (10 + Math.sqrt(4 - 3 * h6)));
    return p7;
  }
  static shortAngleDist(a0, a1) {
    const max = Math.PI * 2;
    const da = (a1 - a0) % max;
    return 2 * da % max - da;
  }
  static longAngleDist(a0, a1) {
    return Math.PI * 2 - _Utils.shortAngleDist(a0, a1);
  }
  static lerpAngles(a0, a1, t12) {
    return a0 + _Utils.shortAngleDist(a0, a1) * t12;
  }
  static angleDelta(a0, a1) {
    return _Utils.shortAngleDist(a0, a1);
  }
  static getSweep(C6, A4, B4) {
    return _Utils.angleDelta(e.angle(C6, A4), e.angle(C6, B4));
  }
  static clampRadians(r12) {
    return (Math.PI * 2 + r12) % (Math.PI * 2);
  }
  static snapAngleToSegments(r12, segments) {
    const seg = Math.PI * 2 / segments;
    return Math.floor((_Utils.clampRadians(r12) + seg / 2) / seg) * seg;
  }
  static isAngleBetween(a6, b7, c8) {
    if (c8 === a6 || c8 === b7)
      return true;
    const AB = (b7 - a6 + TAU) % TAU;
    const AC = (c8 - a6 + TAU) % TAU;
    return AB <= Math.PI !== AC > AB;
  }
  static degreesToRadians(d8) {
    return d8 * Math.PI / 180;
  }
  static radiansToDegrees(r12) {
    return r12 * 180 / Math.PI;
  }
  static getArcLength(C6, r12, A4, B4) {
    const sweep = _Utils.getSweep(C6, A4, B4);
    return r12 * (2 * Math.PI) * (sweep / (2 * Math.PI));
  }
  static getSweepFlag(A4, B4, C6) {
    const angleAC = e.angle(A4, C6);
    const angleAB = e.angle(A4, B4);
    const angleCAB = (angleAB - angleAC + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
    return angleCAB > 0 ? 0 : 1;
  }
  static getLargeArcFlag(A4, C6, P3) {
    const anglePA = e.angle(P3, A4);
    const anglePC = e.angle(P3, C6);
    const angleAPC = (anglePC - anglePA + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
    return Math.abs(angleAPC) > Math.PI / 2 ? 0 : 1;
  }
  static getArcDashOffset(C6, r12, A4, B4, step) {
    const del0 = _Utils.getSweepFlag(C6, A4, B4);
    const len0 = _Utils.getArcLength(C6, r12, A4, B4);
    const off0 = del0 < 0 ? len0 : 2 * Math.PI * C6[2] - len0;
    return -off0 / 2 + step;
  }
  static getEllipseDashOffset(A4, step) {
    const c8 = 2 * Math.PI * A4[2];
    return -c8 / 2 + -step;
  }
  static pointInCircle(A4, C6, r12) {
    return e.dist(A4, C6) <= r12;
  }
  static pointInEllipse(A4, C6, rx, ry, rotation = 0) {
    rotation = rotation || 0;
    const cos = Math.cos(rotation);
    const sin = Math.sin(rotation);
    const delta = e.sub(A4, C6);
    const tdx = cos * delta[0] + sin * delta[1];
    const tdy = sin * delta[0] - cos * delta[1];
    return tdx * tdx / (rx * rx) + tdy * tdy / (ry * ry) <= 1;
  }
  static pointInRect(point, size) {
    return !(point[0] < size[0] || point[0] > point[0] + size[0] || point[1] < size[1] || point[1] > point[1] + size[1]);
  }
  static pointInPolygon(p7, points) {
    let wn = 0;
    points.forEach((a6, i7) => {
      const b7 = points[(i7 + 1) % points.length];
      if (a6[1] <= p7[1]) {
        if (b7[1] > p7[1] && e.cross(a6, b7, p7) > 0) {
          wn += 1;
        }
      } else if (b7[1] <= p7[1] && e.cross(a6, b7, p7) < 0) {
        wn -= 1;
      }
    });
    return wn !== 0;
  }
  static pointInBounds(A4, b7) {
    return !(A4[0] < b7.minX || A4[0] > b7.maxX || A4[1] < b7.minY || A4[1] > b7.maxY);
  }
  static pointInPolyline(A4, points, distance = 3) {
    for (let i7 = 1; i7 < points.length; i7++) {
      if (e.distanceToLineSegment(points[i7 - 1], points[i7], A4) < distance) {
        return true;
      }
    }
    return false;
  }
  static getBoundsSides(bounds) {
    return this.getRectangleSides([bounds.minX, bounds.minY], [bounds.width, bounds.height]);
  }
  static expandBounds(bounds, delta) {
    return {
      minX: bounds.minX - delta,
      minY: bounds.minY - delta,
      maxX: bounds.maxX + delta,
      maxY: bounds.maxY + delta,
      width: bounds.width + delta * 2,
      height: bounds.height + delta * 2
    };
  }
  static boundsCollide(a6, b7) {
    return !(a6.maxX < b7.minX || a6.minX > b7.maxX || a6.maxY < b7.minY || a6.minY > b7.maxY);
  }
  static boundsContain(a6, b7) {
    return a6.minX < b7.minX && a6.minY < b7.minY && a6.maxY > b7.maxY && a6.maxX > b7.maxX;
  }
  static boundsContained(a6, b7) {
    return _Utils.boundsContain(b7, a6);
  }
  static boundsAreEqual(a6, b7) {
    return !(b7.maxX !== a6.maxX || b7.minX !== a6.minX || b7.maxY !== a6.maxY || b7.minY !== a6.minY);
  }
  static getBoundsFromPoints(points, rotation = 0) {
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    if (points.length < 2) {
      minX = 0;
      minY = 0;
      maxX = 1;
      maxY = 1;
    } else {
      for (const [x7, y4] of points) {
        minX = Math.min(x7, minX);
        minY = Math.min(y4, minY);
        maxX = Math.max(x7, maxX);
        maxY = Math.max(y4, maxY);
      }
    }
    if (rotation !== 0) {
      return _Utils.getBoundsFromPoints(points.map((pt) => e.rotWith(pt, [(minX + maxX) / 2, (minY + maxY) / 2], rotation)));
    }
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: Math.max(1, maxX - minX),
      height: Math.max(1, maxY - minY)
    };
  }
  static centerBounds(bounds, point) {
    const boundsCenter = this.getBoundsCenter(bounds);
    const dx = point[0] - boundsCenter[0];
    const dy = point[1] - boundsCenter[1];
    return this.translateBounds(bounds, [dx, dy]);
  }
  static snapBoundsToGrid(bounds, gridSize) {
    const minX = Math.round(bounds.minX / gridSize) * gridSize;
    const minY = Math.round(bounds.minY / gridSize) * gridSize;
    const maxX = Math.round(bounds.maxX / gridSize) * gridSize;
    const maxY = Math.round(bounds.maxY / gridSize) * gridSize;
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: Math.max(1, maxX - minX),
      height: Math.max(1, maxY - minY)
    };
  }
  static translateBounds(bounds, delta) {
    return {
      minX: bounds.minX + delta[0],
      minY: bounds.minY + delta[1],
      maxX: bounds.maxX + delta[0],
      maxY: bounds.maxY + delta[1],
      width: bounds.width,
      height: bounds.height
    };
  }
  static rotateBounds(bounds, center, rotation) {
    const [minX, minY] = e.rotWith([bounds.minX, bounds.minY], center, rotation);
    const [maxX, maxY] = e.rotWith([bounds.maxX, bounds.maxY], center, rotation);
    return {
      minX,
      minY,
      maxX,
      maxY,
      width: bounds.width,
      height: bounds.height
    };
  }
  static getRotatedEllipseBounds(x7, y4, rx, ry, rotation = 0) {
    const c8 = Math.cos(rotation);
    const s9 = Math.sin(rotation);
    const w7 = Math.hypot(rx * c8, ry * s9);
    const h6 = Math.hypot(rx * s9, ry * c8);
    return {
      minX: x7 + rx - w7,
      minY: y4 + ry - h6,
      maxX: x7 + rx + w7,
      maxY: y4 + ry + h6,
      width: w7 * 2,
      height: h6 * 2
    };
  }
  static getExpandedBounds(a6, b7) {
    const minX = Math.min(a6.minX, b7.minX);
    const minY = Math.min(a6.minY, b7.minY);
    const maxX = Math.max(a6.maxX, b7.maxX);
    const maxY = Math.max(a6.maxY, b7.maxY);
    const width = Math.abs(maxX - minX);
    const height = Math.abs(maxY - minY);
    return { minX, minY, maxX, maxY, width, height };
  }
  static getCommonBounds(bounds) {
    if (bounds.length < 2)
      return bounds[0];
    let result = bounds[0];
    for (let i7 = 1; i7 < bounds.length; i7++) {
      result = _Utils.getExpandedBounds(result, bounds[i7]);
    }
    return result;
  }
  static getRotatedCorners(b7, rotation = 0) {
    const center = [b7.minX + b7.width / 2, b7.minY + b7.height / 2];
    return [
      [b7.minX, b7.minY],
      [b7.maxX, b7.minY],
      [b7.maxX, b7.maxY],
      [b7.minX, b7.maxY]
    ].map((point) => e.rotWith(point, center, rotation));
  }
  static getTransformedBoundingBox(bounds, handle, delta, rotation = 0, isAspectRatioLocked = false) {
    const [ax0, ay0] = [bounds.minX, bounds.minY];
    const [ax1, ay1] = [bounds.maxX, bounds.maxY];
    let [bx0, by0] = [bounds.minX, bounds.minY];
    let [bx1, by1] = [bounds.maxX, bounds.maxY];
    if (handle === "center") {
      return {
        minX: bx0 + delta[0],
        minY: by0 + delta[1],
        maxX: bx1 + delta[0],
        maxY: by1 + delta[1],
        width: bx1 - bx0,
        height: by1 - by0,
        scaleX: 1,
        scaleY: 1
      };
    }
    const [dx, dy] = e.rot(delta, -rotation);
    switch (handle) {
      case "top_edge":
      case "top_left_corner":
      case "top_right_corner": {
        by0 += dy;
        break;
      }
      case "bottom_edge":
      case "bottom_left_corner":
      case "bottom_right_corner": {
        by1 += dy;
        break;
      }
    }
    switch (handle) {
      case "left_edge":
      case "top_left_corner":
      case "bottom_left_corner": {
        bx0 += dx;
        break;
      }
      case "right_edge":
      case "top_right_corner":
      case "bottom_right_corner": {
        bx1 += dx;
        break;
      }
    }
    const aw = ax1 - ax0;
    const ah = ay1 - ay0;
    const scaleX = (bx1 - bx0) / aw;
    const scaleY = (by1 - by0) / ah;
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    const bw = Math.abs(bx1 - bx0);
    const bh = Math.abs(by1 - by0);
    if (isAspectRatioLocked) {
      const ar = aw / ah;
      const isTall = ar < bw / bh;
      const tw = bw * (scaleY < 0 ? 1 : -1) * (1 / ar);
      const th = bh * (scaleX < 0 ? 1 : -1) * ar;
      switch (handle) {
        case "top_left_corner": {
          if (isTall)
            by0 = by1 + tw;
          else
            bx0 = bx1 + th;
          break;
        }
        case "top_right_corner": {
          if (isTall)
            by0 = by1 + tw;
          else
            bx1 = bx0 - th;
          break;
        }
        case "bottom_right_corner": {
          if (isTall)
            by1 = by0 - tw;
          else
            bx1 = bx0 - th;
          break;
        }
        case "bottom_left_corner": {
          if (isTall)
            by1 = by0 - tw;
          else
            bx0 = bx1 + th;
          break;
        }
        case "bottom_edge":
        case "top_edge": {
          const m8 = (bx0 + bx1) / 2;
          const w7 = bh * ar;
          bx0 = m8 - w7 / 2;
          bx1 = m8 + w7 / 2;
          break;
        }
        case "left_edge":
        case "right_edge": {
          const m8 = (by0 + by1) / 2;
          const h6 = bw / ar;
          by0 = m8 - h6 / 2;
          by1 = m8 + h6 / 2;
          break;
        }
      }
    }
    if (rotation % (Math.PI * 2) !== 0) {
      let cv = [0, 0];
      const c0 = e.med([ax0, ay0], [ax1, ay1]);
      const c1 = e.med([bx0, by0], [bx1, by1]);
      switch (handle) {
        case "top_left_corner": {
          cv = e.sub(e.rotWith([bx1, by1], c1, rotation), e.rotWith([ax1, ay1], c0, rotation));
          break;
        }
        case "top_right_corner": {
          cv = e.sub(e.rotWith([bx0, by1], c1, rotation), e.rotWith([ax0, ay1], c0, rotation));
          break;
        }
        case "bottom_right_corner": {
          cv = e.sub(e.rotWith([bx0, by0], c1, rotation), e.rotWith([ax0, ay0], c0, rotation));
          break;
        }
        case "bottom_left_corner": {
          cv = e.sub(e.rotWith([bx1, by0], c1, rotation), e.rotWith([ax1, ay0], c0, rotation));
          break;
        }
        case "top_edge": {
          cv = e.sub(e.rotWith(e.med([bx0, by1], [bx1, by1]), c1, rotation), e.rotWith(e.med([ax0, ay1], [ax1, ay1]), c0, rotation));
          break;
        }
        case "left_edge": {
          cv = e.sub(e.rotWith(e.med([bx1, by0], [bx1, by1]), c1, rotation), e.rotWith(e.med([ax1, ay0], [ax1, ay1]), c0, rotation));
          break;
        }
        case "bottom_edge": {
          cv = e.sub(e.rotWith(e.med([bx0, by0], [bx1, by0]), c1, rotation), e.rotWith(e.med([ax0, ay0], [ax1, ay0]), c0, rotation));
          break;
        }
        case "right_edge": {
          cv = e.sub(e.rotWith(e.med([bx0, by0], [bx0, by1]), c1, rotation), e.rotWith(e.med([ax0, ay0], [ax0, ay1]), c0, rotation));
          break;
        }
      }
      ;
      [bx0, by0] = e.sub([bx0, by0], cv);
      [bx1, by1] = e.sub([bx1, by1], cv);
    }
    if (bx1 < bx0) {
      ;
      [bx1, bx0] = [bx0, bx1];
    }
    if (by1 < by0) {
      ;
      [by1, by0] = [by0, by1];
    }
    return {
      minX: bx0,
      minY: by0,
      maxX: bx1,
      maxY: by1,
      width: bx1 - bx0,
      height: by1 - by0,
      scaleX: (bx1 - bx0) / (ax1 - ax0 || 1) * (flipX ? -1 : 1),
      scaleY: (by1 - by0) / (ay1 - ay0 || 1) * (flipY ? -1 : 1)
    };
  }
  static getTransformAnchor(type, isFlippedX, isFlippedY) {
    let anchor = type;
    switch (type) {
      case "top_left_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "bottom_right_corner";
        } else if (isFlippedX) {
          anchor = "top_right_corner";
        } else if (isFlippedY) {
          anchor = "bottom_left_corner";
        } else {
          anchor = "bottom_right_corner";
        }
        break;
      }
      case "top_right_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "bottom_left_corner";
        } else if (isFlippedX) {
          anchor = "top_left_corner";
        } else if (isFlippedY) {
          anchor = "bottom_right_corner";
        } else {
          anchor = "bottom_left_corner";
        }
        break;
      }
      case "bottom_right_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "top_left_corner";
        } else if (isFlippedX) {
          anchor = "bottom_left_corner";
        } else if (isFlippedY) {
          anchor = "top_right_corner";
        } else {
          anchor = "top_left_corner";
        }
        break;
      }
      case "bottom_left_corner": {
        if (isFlippedX && isFlippedY) {
          anchor = "top_right_corner";
        } else if (isFlippedX) {
          anchor = "bottom_right_corner";
        } else if (isFlippedY) {
          anchor = "top_left_corner";
        } else {
          anchor = "top_right_corner";
        }
        break;
      }
    }
    return anchor;
  }
  static getRelativeTransformedBoundingBox(bounds, initialBounds, initialShapeBounds, isFlippedX, isFlippedY) {
    const nx = (isFlippedX ? initialBounds.maxX - initialShapeBounds.maxX : initialShapeBounds.minX - initialBounds.minX) / initialBounds.width;
    const ny = (isFlippedY ? initialBounds.maxY - initialShapeBounds.maxY : initialShapeBounds.minY - initialBounds.minY) / initialBounds.height;
    const nw = initialShapeBounds.width / initialBounds.width;
    const nh = initialShapeBounds.height / initialBounds.height;
    const minX = bounds.minX + bounds.width * nx;
    const minY = bounds.minY + bounds.height * ny;
    const width = bounds.width * nw;
    const height = bounds.height * nh;
    return {
      minX,
      minY,
      maxX: minX + width,
      maxY: minY + height,
      width,
      height
    };
  }
  static getRotatedSize(size, rotation) {
    const center = e.div(size, 2);
    const points = [[0, 0], [size[0], 0], size, [0, size[1]]].map((point) => e.rotWith(point, center, rotation));
    const bounds = _Utils.getBoundsFromPoints(points);
    return [bounds.width, bounds.height];
  }
  static getBoundsCenter(bounds) {
    return [bounds.minX + bounds.width / 2, bounds.minY + bounds.height / 2];
  }
  static getBoundsWithCenter(bounds) {
    const center = _Utils.getBoundsCenter(bounds);
    return __spreadProps3(__spreadValues3({}, bounds), {
      midX: center[0],
      midY: center[1]
    });
  }
  static getCommonTopLeft(points) {
    const min = [Infinity, Infinity];
    points.forEach((point) => {
      min[0] = Math.min(min[0], point[0]);
      min[1] = Math.min(min[1], point[1]);
    });
    return min;
  }
  static getFromCache(cache, item, getNext) {
    let value = cache.get(item);
    if (value === void 0) {
      cache.set(item, getNext());
      value = cache.get(item);
      if (value === void 0) {
        throw Error("Cache did not include item!");
      }
    }
    return value;
  }
  static uniqueId(a6 = "") {
    return a6 ? ((Number(a6) ^ Math.random() * 16) >> Number(a6) / 4).toString(16) : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, _Utils.uniqueId);
  }
  static rotateArray(arr, offset) {
    return arr.map((_4, i7) => arr[(i7 + offset) % arr.length]);
  }
  static debounce(fn, ms = 0) {
    let timeoutId;
    return function(...args) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => fn.apply(args), ms);
    };
  }
  static getSvgPathFromStroke(points, closed = true) {
    if (!points.length) {
      return "";
    }
    const max = points.length - 1;
    return points.reduce((acc, point, i7, arr) => {
      if (i7 === max) {
        if (closed)
          acc.push("Z");
      } else
        acc.push(point, e.med(point, arr[i7 + 1]));
      return acc;
    }, ["M", points[0], "Q"]).join(" ").replaceAll(this.TRIM_NUMBERS, "$1");
  }
  static getPerfectDashProps(length, strokeWidth, style, snap = 1, outset = true, lengthRatio = 2) {
    let dashLength;
    let strokeDashoffset;
    let ratio;
    if (style.toLowerCase() === "dashed") {
      dashLength = strokeWidth * lengthRatio;
      ratio = 1;
      strokeDashoffset = outset ? (dashLength / 2).toString() : "0";
    } else if (style.toLowerCase() === "dotted") {
      dashLength = strokeWidth / 100;
      ratio = 100;
      strokeDashoffset = "0";
    } else {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
    let dashes = Math.floor(length / dashLength / (2 * ratio));
    dashes -= dashes % snap;
    dashes = Math.max(dashes, 4);
    const gapLength = Math.max(dashLength, (length - dashes * dashLength) / (outset ? dashes : dashes - 1));
    return {
      strokeDasharray: [dashLength, gapLength].join(" "),
      strokeDashoffset
    };
  }
  static isMobileSize() {
    if (typeof window === "undefined")
      return false;
    return window.innerWidth < 768;
  }
  static isMobileSafari() {
    if (typeof window === "undefined")
      return false;
    const ua = window.navigator.userAgent;
    const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    const webkit = !!ua.match(/WebKit/i);
    return iOS && webkit && !ua.match(/CriOS/i);
  }
  static throttle(func, limit) {
    let inThrottle;
    let lastResult;
    return function(...args) {
      if (!inThrottle) {
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
        lastResult = func(...args);
      }
      return lastResult;
    };
  }
  static isDarwin() {
    return /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
  }
  static metaKey(e13) {
    return _Utils.isDarwin() ? e13.metaKey : e13.ctrlKey;
  }
  static lns(str) {
    const result = str.split("");
    result.push(...result.splice(0, Math.round(result.length / 5)));
    result.push(...result.splice(0, Math.round(result.length / 4)));
    result.push(...result.splice(0, Math.round(result.length / 3)));
    result.push(...result.splice(0, Math.round(result.length / 2)));
    return result.reverse().map((n6) => +n6 ? +n6 < 5 ? 5 + +n6 : +n6 > 5 ? +n6 - 5 : n6 : n6).join("");
  }
};
var Utils = _Utils;
__publicField(Utils, "getSnapPoints", (bounds, others, snapDistance) => {
  const A4 = __spreadValues3({}, bounds);
  const offset = [0, 0];
  const snapLines = [];
  const snaps = {
    ["minX"]: { id: "minX", isSnapped: false },
    ["midX"]: { id: "midX", isSnapped: false },
    ["maxX"]: { id: "maxX", isSnapped: false },
    ["minY"]: { id: "minY", isSnapped: false },
    ["midY"]: { id: "midY", isSnapped: false },
    ["maxY"]: { id: "maxY", isSnapped: false }
  };
  const xs = ["midX", "minX", "maxX"];
  const ys = ["midY", "minY", "maxY"];
  const snapResults = others.map((B4) => {
    const rx = xs.flatMap((f8, i7) => xs.map((t12, k4) => {
      const gap = A4[f8] - B4[t12];
      const distance = Math.abs(gap);
      return {
        f: f8,
        t: t12,
        gap,
        distance,
        isCareful: i7 === 0 || i7 + k4 === 3
      };
    }));
    const ry = ys.flatMap((f8, i7) => ys.map((t12, k4) => {
      const gap = A4[f8] - B4[t12];
      const distance = Math.abs(gap);
      return {
        f: f8,
        t: t12,
        gap,
        distance,
        isCareful: i7 === 0 || i7 + k4 === 3
      };
    }));
    return [B4, rx, ry];
  });
  let gapX = Infinity;
  let gapY = Infinity;
  let minX = Infinity;
  let minY = Infinity;
  snapResults.forEach(([_4, rx, ry]) => {
    rx.forEach((r12) => {
      if (r12.distance < snapDistance && r12.distance < minX) {
        minX = r12.distance;
        gapX = r12.gap;
      }
    });
    ry.forEach((r12) => {
      if (r12.distance < snapDistance && r12.distance < minY) {
        minY = r12.distance;
        gapY = r12.gap;
      }
    });
  });
  snapResults.forEach(([B4, rx, ry]) => {
    if (gapX !== Infinity) {
      rx.forEach((r12) => {
        if (Math.abs(r12.gap - gapX) < 2) {
          snaps[r12.f] = __spreadProps3(__spreadValues3({}, snaps[r12.f]), {
            isSnapped: true,
            to: B4[r12.t],
            B: B4,
            distance: r12.distance
          });
        }
      });
    }
    if (gapY !== Infinity) {
      ry.forEach((r12) => {
        if (Math.abs(r12.gap - gapY) < 2) {
          snaps[r12.f] = __spreadProps3(__spreadValues3({}, snaps[r12.f]), {
            isSnapped: true,
            to: B4[r12.t],
            B: B4,
            distance: r12.distance
          });
        }
      });
    }
  });
  offset[0] = gapX === Infinity ? 0 : gapX;
  offset[1] = gapY === Infinity ? 0 : gapY;
  A4.minX -= offset[0];
  A4.midX -= offset[0];
  A4.maxX -= offset[0];
  A4.minY -= offset[1];
  A4.midY -= offset[1];
  A4.maxY -= offset[1];
  xs.forEach((from) => {
    const snap = snaps[from];
    if (!snap.isSnapped)
      return;
    const { id, B: B4 } = snap;
    const x7 = A4[id];
    snapLines.push(id === "minX" ? [
      [x7, A4.midY],
      [x7, B4.minY],
      [x7, B4.maxY]
    ] : [
      [x7, A4.minY],
      [x7, A4.maxY],
      [x7, B4.minY],
      [x7, B4.maxY]
    ]);
  });
  ys.forEach((from) => {
    const snap = snaps[from];
    if (!snap.isSnapped)
      return;
    const { id, B: B4 } = snap;
    const y4 = A4[id];
    snapLines.push(id === "midY" ? [
      [A4.midX, y4],
      [B4.minX, y4],
      [B4.maxX, y4]
    ] : [
      [A4.minX, y4],
      [A4.maxX, y4],
      [B4.minX, y4],
      [B4.maxX, y4]
    ]);
  });
  return { offset, snapLines };
});
__publicField(Utils, "deepMerge", (target, patch) => {
  const result = __spreadValues3({}, target);
  const entries2 = Object.entries(patch);
  for (const [key, value] of entries2)
    result[key] = value === Object(value) && !Array.isArray(value) ? _Utils.deepMerge(result[key], value) : value;
  return result;
});
__publicField(Utils, "TRIM_NUMBERS", /(\s?[A-Z]?,?-?[0-9]*\.[0-9]{0,2})(([0-9]|e|-)*)/g);
var utils_default = Utils;
function useZoomEvents(zoomRef, ref) {
  const rOriginPoint = React22.useRef(void 0);
  const rPinchPoint = React22.useRef(void 0);
  const rDelta = React22.useRef([0, 0]);
  const { inputs: inputs2, bounds, callbacks } = useTLContext();
  React22.useEffect(() => {
    const preventGesture = (event) => event.preventDefault();
    document.addEventListener("gesturestart", preventGesture);
    document.addEventListener("gesturechange", preventGesture);
    return () => {
      document.removeEventListener("gesturestart", preventGesture);
      document.removeEventListener("gesturechange", preventGesture);
    };
  }, []);
  const handleWheel = React22.useCallback(({ event: e13 }) => {
    var _a3, _b, _c, _d;
    e13.preventDefault();
    if (inputs2.isPinching)
      return;
    const { offset } = normalizeWheel(e13);
    if ((e13.altKey || e13.ctrlKey || e13.metaKey) && e13.buttons === 0) {
      const point = (_b = (_a3 = inputs2.pointer) == null ? void 0 : _a3.point) != null ? _b : [bounds.width / 2, bounds.height / 2];
      const delta2 = [...point, offset[1] * 0.618];
      const info2 = inputs2.pan(delta2, e13);
      (_c = callbacks.onZoom) == null ? void 0 : _c.call(callbacks, __spreadProps3(__spreadValues3({}, info2), { delta: delta2 }), e13);
      return;
    }
    const delta = e.mul(e13.shiftKey && !utils_default.isDarwin ? [offset[1], 0] : [...offset], 0.5);
    if (e.isEqual(delta, [0, 0]))
      return;
    const info = inputs2.pan(delta, e13);
    (_d = callbacks.onPan) == null ? void 0 : _d.call(callbacks, info, e13);
  }, [callbacks, inputs2, bounds]);
  const handlePinchStart = React22.useCallback(({ origin, event }) => {
    var _a3;
    if (event instanceof WheelEvent)
      return;
    const elm = ref.current;
    if (!elm || !(event.target === elm || elm.contains(event.target)))
      return;
    const info = inputs2.pinch(origin, origin);
    inputs2.isPinching = true;
    (_a3 = callbacks.onPinchStart) == null ? void 0 : _a3.call(callbacks, info, event);
    rPinchPoint.current = info.point;
    rOriginPoint.current = info.origin;
    rDelta.current = [0, 0];
  }, [callbacks, inputs2, bounds]);
  const handlePinch = React22.useCallback(({ origin, offset, event }) => {
    var _a3;
    if (event instanceof WheelEvent)
      return;
    const elm = ref.current;
    if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
      return;
    if (!rOriginPoint.current)
      return;
    const info = inputs2.pinch(origin, rOriginPoint.current);
    const trueDelta = e.sub(info.delta, rDelta.current);
    rDelta.current = info.delta;
    (_a3 = callbacks.onPinch) == null ? void 0 : _a3.call(callbacks, __spreadProps3(__spreadValues3({}, info), {
      point: info.point,
      origin: rOriginPoint.current,
      delta: [...trueDelta, offset[0]]
    }), event);
    rPinchPoint.current = origin;
  }, [callbacks, inputs2, bounds]);
  const handlePinchEnd = React22.useCallback(({ origin, event }) => {
    var _a3;
    const elm = ref.current;
    if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
      return;
    const info = inputs2.pinch(origin, origin);
    inputs2.isPinching = false;
    (_a3 = callbacks.onPinchEnd) == null ? void 0 : _a3.call(callbacks, info, event);
    rPinchPoint.current = void 0;
    rOriginPoint.current = void 0;
    rDelta.current = [0, 0];
  }, []);
  useGesture({
    onWheel: handleWheel,
    onPinchStart: handlePinchStart,
    onPinch: handlePinch,
    onPinchEnd: handlePinchEnd
  }, {
    target: ref,
    eventOptions: { passive: false },
    pinch: {
      from: [zoomRef.current, 0],
      scaleBounds: () => {
        return { from: zoomRef.current, max: 5, min: 0.1 };
      }
    }
  });
}
var PIXEL_STEP = 10;
var LINE_HEIGHT2 = 40;
var PAGE_HEIGHT2 = 800;
function normalizeWheel(event) {
  let sX = 0, sY = 0, pX = 0, pY = 0;
  if ("detail" in event)
    sY = event.detail;
  if ("wheelDelta" in event)
    sY = -event.wheelDelta / 120;
  if ("wheelDeltaY" in event)
    sY = -event.wheelDeltaY / 120;
  if ("wheelDeltaX" in event)
    sX = -event.wheelDeltaX / 120;
  if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = "deltaX" in event ? event.deltaX : sX * PIXEL_STEP;
  pY = "deltaY" in event ? event.deltaY : sY * PIXEL_STEP;
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      pX *= LINE_HEIGHT2;
      pY *= LINE_HEIGHT2;
    } else {
      pX *= PAGE_HEIGHT2;
      pY *= PAGE_HEIGHT2;
    }
  }
  if (pX && !sX)
    sX = pX < 1 ? -1 : 1;
  if (pY && !sY)
    sY = pY < 1 ? -1 : 1;
  return { spin: [sX, sY], offset: [pX, pY] };
}
function useSafariFocusOutFix() {
  const { callbacks } = useTLContext();
  (0, import_react11.useEffect)(() => {
    function handleFocusOut() {
      var _a3;
      (_a3 = callbacks.onShapeBlur) == null ? void 0 : _a3.call(callbacks);
    }
    if (utils_default.isMobileSafari()) {
      document.addEventListener("focusout", handleFocusOut);
      return () => document.removeEventListener("focusout", handleFocusOut);
    }
    return () => null;
  }, [callbacks]);
}
function useCanvasEvents() {
  const { callbacks, inputs: inputs2 } = useTLContext();
  return React32.useMemo(() => {
    return {
      onPointerDown: (e13) => {
        var _a3, _b;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        if (e13.button !== 0 && e13.button !== 1)
          return;
        if (!inputs2.pointerIsValid(e13))
          return;
        e13.currentTarget.setPointerCapture(e13.pointerId);
        const info = inputs2.pointerDown(e13, "canvas");
        if (e13.button === 0 || e13.button === 1) {
          (_a3 = callbacks.onPointCanvas) == null ? void 0 : _a3.call(callbacks, info, e13);
          (_b = callbacks.onPointerDown) == null ? void 0 : _b.call(callbacks, info, e13);
        }
      },
      onPointerMove: (e13) => {
        var _a3, _b;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        const info = inputs2.pointerMove(e13, "canvas");
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = callbacks.onDragCanvas) == null ? void 0 : _a3.call(callbacks, info, e13);
        }
        (_b = callbacks.onPointerMove) == null ? void 0 : _b.call(callbacks, info, e13);
      },
      onPointerUp: (e13) => {
        var _a3, _b, _c, _d;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (e13.button !== 0 && e13.button !== 1)
          return;
        inputs2.activePointer = void 0;
        if (!inputs2.pointerIsValid(e13))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e13, "canvas");
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = e13.currentTarget) == null ? void 0 : _a3.releasePointerCapture(e13.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) {
          (_b = callbacks.onDoubleClickCanvas) == null ? void 0 : _b.call(callbacks, info, e13);
        }
        (_c = callbacks.onReleaseCanvas) == null ? void 0 : _c.call(callbacks, info, e13);
        (_d = callbacks.onPointerUp) == null ? void 0 : _d.call(callbacks, info, e13);
      },
      onDrop: callbacks.onDrop,
      onDragOver: callbacks.onDragOver
    };
  }, [callbacks, inputs2]);
}
function useShapeEvents(id) {
  const { rPageState, rSelectionBounds, callbacks, inputs: inputs2 } = React4.useContext(TLContext);
  return React4.useMemo(() => ({
    onPointerDown: (e13) => {
      var _a3, _b, _c, _d, _e, _f, _g;
      if (e13.dead)
        return;
      else
        e13.dead = true;
      if (!inputs2.pointerIsValid(e13))
        return;
      if (e13.button === 2) {
        (_a3 = callbacks.onRightPointShape) == null ? void 0 : _a3.call(callbacks, inputs2.pointerDown(e13, id), e13);
        return;
      }
      if (e13.button !== 0)
        return;
      const info = inputs2.pointerDown(e13, id);
      (_b = e13.currentTarget) == null ? void 0 : _b.setPointerCapture(e13.pointerId);
      if (rSelectionBounds.current && Utils.pointInBounds(info.point, rSelectionBounds.current) && !rPageState.current.selectedIds.includes(id)) {
        (_c = callbacks.onPointBounds) == null ? void 0 : _c.call(callbacks, inputs2.pointerDown(e13, "bounds"), e13);
        (_d = callbacks.onPointShape) == null ? void 0 : _d.call(callbacks, info, e13);
        (_e = callbacks.onPointerDown) == null ? void 0 : _e.call(callbacks, info, e13);
        return;
      }
      (_f = callbacks.onPointShape) == null ? void 0 : _f.call(callbacks, info, e13);
      (_g = callbacks.onPointerDown) == null ? void 0 : _g.call(callbacks, info, e13);
    },
    onPointerUp: (e13) => {
      var _a3, _b, _c, _d;
      if (e13.dead)
        return;
      else
        e13.dead = true;
      if (e13.button !== 0)
        return;
      inputs2.activePointer = void 0;
      if (!inputs2.pointerIsValid(e13))
        return;
      const isDoubleClick = inputs2.isDoubleClick();
      const info = inputs2.pointerUp(e13, id);
      if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
        (_a3 = e13.currentTarget) == null ? void 0 : _a3.releasePointerCapture(e13.pointerId);
      }
      if (isDoubleClick && !(info.altKey || info.metaKey)) {
        (_b = callbacks.onDoubleClickShape) == null ? void 0 : _b.call(callbacks, info, e13);
      }
      (_c = callbacks.onReleaseShape) == null ? void 0 : _c.call(callbacks, info, e13);
      (_d = callbacks.onPointerUp) == null ? void 0 : _d.call(callbacks, info, e13);
    },
    onPointerMove: (e13) => {
      var _a3, _b;
      if (e13.dead)
        return;
      else
        e13.dead = true;
      if (!inputs2.pointerIsValid(e13))
        return;
      if (inputs2.pointer && e13.pointerId !== inputs2.pointer.pointerId)
        return;
      const info = inputs2.pointerMove(e13, id);
      if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
        (_a3 = callbacks.onDragShape) == null ? void 0 : _a3.call(callbacks, info, e13);
      }
      (_b = callbacks.onPointerMove) == null ? void 0 : _b.call(callbacks, info, e13);
    },
    onPointerEnter: (e13) => {
      var _a3;
      if (!inputs2.pointerIsValid(e13))
        return;
      const info = inputs2.pointerEnter(e13, id);
      (_a3 = callbacks.onHoverShape) == null ? void 0 : _a3.call(callbacks, info, e13);
    },
    onPointerLeave: (e13) => {
      var _a3;
      if (!inputs2.pointerIsValid(e13))
        return;
      const info = inputs2.pointerEnter(e13, id);
      (_a3 = callbacks.onUnhoverShape) == null ? void 0 : _a3.call(callbacks, info, e13);
    }
  }), [inputs2, callbacks, id]);
}
function addToShapeTree(shape, branch, shapes, pageState, assets, isChildOfGhost = false, isChildOfSelected = false, meta) {
  const node = {
    shape,
    asset: shape.assetId ? assets[shape.assetId] : void 0,
    meta,
    isChildOfSelected,
    isGhost: shape.isGhost || isChildOfGhost,
    isEditing: pageState.editingId === shape.id,
    isBinding: pageState.bindingTargetId === shape.id,
    isSelected: pageState.selectedIds.includes(shape.id),
    isHovered: pageState.hoveredId === shape.id || shape.children !== void 0 && (pageState.hoveredId && shape.children.includes(pageState.hoveredId) || shape.children.some((childId) => pageState.selectedIds.includes(childId)))
  };
  branch.push(node);
  if (shape.children) {
    node.children = [];
    shape.children.map((id) => shapes[id]).filter(Boolean).sort((a6, b7) => a6.childIndex - b7.childIndex).forEach((childShape) => addToShapeTree(childShape, node.children, shapes, pageState, assets, node.isGhost, node.isSelected || node.isChildOfSelected, meta));
  }
}
function shapeIsInViewport(bounds, viewport) {
  return Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds);
}
function useShapeTree(page7, pageState, assets, meta) {
  const { callbacks, shapeUtils: shapeUtils2, bounds } = useTLContext();
  const rTimeout = React5.useRef();
  const rPreviousCount = React5.useRef(-1);
  const rShapesIdsToRender = React5.useRef(/* @__PURE__ */ new Set());
  const rShapesToRender = React5.useRef(/* @__PURE__ */ new Set());
  const { selectedIds, camera } = pageState;
  const [minX, minY] = e.sub(e.div([0, 0], camera.zoom), camera.point);
  const [maxX, maxY] = e.sub(e.div([bounds.width, bounds.height], camera.zoom), camera.point);
  const viewport = {
    minX,
    minY,
    maxX,
    maxY,
    height: maxX - minX,
    width: maxY - minY
  };
  const shapesToRender = rShapesToRender.current;
  const shapesIdsToRender = rShapesIdsToRender.current;
  shapesToRender.clear();
  shapesIdsToRender.clear();
  const allShapes = Object.values(page7.shapes);
  allShapes.filter((shape) => shapeUtils2[shape.type].isStateful || selectedIds.includes(shape.id) || shapeIsInViewport(shapeUtils2[shape.type].getBounds(shape), viewport)).forEach((shape) => {
    if (shape.parentId === page7.id) {
      shapesIdsToRender.add(shape.id);
      shapesToRender.add(shape);
      return;
    }
    const parent = page7.shapes[shape.parentId];
    if (parent === void 0) {
      throw Error(`A shape (${shape.id}) has a parent (${shape.parentId}) that does not exist!`);
    } else {
      shapesIdsToRender.add(parent.id);
      shapesToRender.add(parent);
    }
  });
  if (shapesToRender.size !== rPreviousCount.current) {
    if (rTimeout.current) {
      clearTimeout(rTimeout.current);
    }
    rTimeout.current = requestAnimationFrame(() => {
      var _a3;
      (_a3 = callbacks.onRenderCountChange) == null ? void 0 : _a3.call(callbacks, Array.from(shapesIdsToRender.values()));
    });
    rPreviousCount.current = shapesToRender.size;
  }
  const bindingTargetId = pageState.bindingId ? page7.bindings[pageState.bindingId].toId : void 0;
  const tree = [];
  shapesToRender.forEach((shape) => {
    if (shape === void 0) {
      throw Error("Rendered shapes included a missing shape");
    }
    addToShapeTree(shape, tree, page7.shapes, __spreadProps3(__spreadValues3({}, pageState), { bindingTargetId }), assets, shape.isGhost, false, meta);
  });
  tree.sort((a6, b7) => a6.shape.childIndex - b7.shape.childIndex);
  return tree;
}
var styles = /* @__PURE__ */ new Map();
function makeCssTheme(prefix, theme) {
  return Object.keys(theme).reduce((acc, key) => {
    const value = theme[key];
    if (value) {
      return acc + `${`--${prefix}-${key}`}: ${value};
`;
    }
    return acc;
  }, "");
}
function useTheme(prefix, theme, selector = ":root") {
  React6.useLayoutEffect(() => {
    const style = document.createElement("style");
    const cssTheme = makeCssTheme(prefix, theme);
    style.setAttribute("id", `${prefix}-theme`);
    style.setAttribute("data-selector", selector);
    style.innerHTML = `
        ${selector} {
          ${cssTheme}
        }
      `;
    document.head.appendChild(style);
    return () => {
      if (style && document.head.contains(style)) {
        document.head.removeChild(style);
      }
    };
  }, [prefix, theme, selector]);
}
function useStyle(uid, rules) {
  React6.useLayoutEffect(() => {
    if (styles.get(uid)) {
      return () => void 0;
    }
    const style = document.createElement("style");
    style.innerHTML = rules;
    style.setAttribute("id", uid);
    document.head.appendChild(style);
    styles.set(uid, style);
    return () => {
      if (style && document.head.contains(style)) {
        document.head.removeChild(style);
        styles.delete(uid);
      }
    };
  }, [uid, rules]);
}
var css = (strings, ...args) => strings.reduce((acc, string, index2) => acc + string + (index2 < args.length ? args[index2] : ""), "");
var defaultTheme = {
  accent: "rgb(255, 0, 0)",
  brushFill: "rgba(0,0,0,.05)",
  brushStroke: "rgba(0,0,0,.25)",
  brushDashStroke: "rgba(0,0,0,.6)",
  selectStroke: "rgb(66, 133, 244)",
  selectFill: "rgba(65, 132, 244, 0.05)",
  binding: "rgba(65, 132, 244, 0.12)",
  background: "rgb(248, 249, 250)",
  foreground: "rgb(51, 51, 51)",
  grid: "rgba(144, 144, 144, 1)"
};
var TLCSS = css`
  .tl-container {
    --tl-zoom: 1;
    --tl-scale: calc(1 / var(--tl-zoom));
    --tl-padding: calc(64px * max(1, var(--tl-scale)));
    --tl-performance-all: auto;
    --tl-performance-selected: auto;
    position: relative;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;
    z-index: 100;
    overflow: hidden;
    touch-action: none;
    overscroll-behavior: none;
    background-color: var(--tl-background);
  }
  .tl-container * {
    box-sizing: border-box;
  }
  .tl-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
  }
  .tl-grid {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: none;
    user-select: none;
  }
  .tl-snap-line {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-snap-point {
    stroke: var(--tl-accent);
    stroke-width: calc(1px * var(--tl-scale));
  }
  .tl-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
    touch-action: none;
    pointer-events: all;
    overflow: clip;
  }
  .tl-layer {
    position: absolute;
    top: 0px;
    left: 0px;
    height: 0px;
    width: 0px;
    contain: layout style size;
  }
  .tl-absolute {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    contain: layout style size;
  }
  .tl-positioned {
    position: absolute;
    top: 0px;
    left: 0px;
    transform-origin: center center;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    contain: layout style size;
    will-change: var(--tl-performance-all);
  }
  .tl-positioned-svg {
    width: 100%;
    height: 100%;
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-div {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: var(--tl-padding);
    overflow: hidden;
    contain: layout style size;
  }
  .tl-positioned-selected {
    will-change: var(--tl-performance-selected);
  }
  .tl-inner-div {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .tl-stroke-hitarea {
    fill: none;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: stroke;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-fill-hitarea {
    fill: transparent;
    stroke: transparent;
    stroke-width: calc(24px * var(--tl-scale));
    pointer-events: all;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
  .tl-counter-scaled {
    transform: scale(var(--tl-scale));
  }
  .tl-dashed {
    stroke-dasharray: calc(2px * var(--tl-scale)), calc(2px * var(--tl-scale));
  }
  .tl-transparent {
    fill: transparent;
    stroke: transparent;
  }
  .tl-cursor-ns {
    cursor: ns-resize;
  }
  .tl-cursor-ew {
    cursor: ew-resize;
  }
  .tl-cursor-nesw {
    cursor: nesw-resize;
  }
  .tl-cursor-nwse {
    cursor: nwse-resize;
  }
  .tl-corner-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-rotate-handle {
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
    stroke-width: calc(1.5px * var(--tl-scale));
    cursor: grab;
  }
  .tl-binding {
    fill: var(--tl-selectFill);
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user {
    left: calc(-15px * var(--tl-scale));
    top: calc(-15px * var(--tl-scale));
    height: calc(35px * var(--tl-scale));
    width: calc(35px * var(--tl-scale));
    transform: scale(var(--tl-scale));
    pointer-events: none;
    will-change: transform;
  }
  .tl-indicator {
    fill: transparent;
    stroke-width: calc(1.5px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-user-indicator-bounds {
    border-style: solid;
    border-width: calc(1px * var(--tl-scale));
  }
  .tl-hovered {
    stroke: var(--tl-selectStroke);
  }
  .tl-selected {
    stroke: var(--tl-selectStroke);
  }
  .tl-locked {
    stroke-dasharray: calc(3px * var(--tl-scale)) calc(3px * var(--tl-scale));
  }
  .tl-editing {
    stroke-width: calc(2.5px * min(5, var(--tl-scale)));
  }
  .tl-performance {
    will-change: transform, contents;
  }
  .tl-clone-target {
    pointer-events: all;
  }
  .tl-clone-target:hover .tl-clone-button {
    opacity: 1;
  }
  .tl-clone-button-target {
    cursor: pointer;
    pointer-events: all;
  }
  .tl-clone-button-target:hover .tl-clone-button {
    fill: var(--tl-selectStroke);
  }
  .tl-clone-button {
    opacity: 0;
    r: calc(8px * var(--tl-scale));
    stroke-width: calc(1.5px * var(--tl-scale));
    stroke: var(--tl-selectStroke);
    fill: var(--tl-background);
  }
  .tl-bounds {
    pointer-events: none;
    contain: layout style size;
  }
  .tl-bounds-bg {
    stroke: none;
    fill: var(--tl-selectFill);
    pointer-events: all;
    contain: layout style size;
  }
  .tl-bounds-center {
    fill: transparent;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(1.5px * var(--tl-scale));
  }
  .tl-brush {
    fill: var(--tl-brushFill);
    stroke: var(--tl-brushStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
    contain: layout style size;
  }
  .tl-dashed-brush-line {
    fill: none;
    stroke: var(--tl-brushDashStroke);
    stroke-width: calc(1px * var(--tl-scale));
    pointer-events: none;
  }
  .tl-brush.dashed {
    stroke: none;
  }
  .tl-handle {
    pointer-events: all;
    cursor: grab;
  }
  .tl-handle:hover .tl-handle-bg {
    fill: var(--tl-selectFill);
  }
  .tl-handle:hover .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg {
    cursor: grabbing;
    fill: var(--tl-selectFill);
  }
  .tl-handle:active .tl-handle-bg > * {
    stroke: var(--tl-selectFill);
  }
  .tl-handle {
    fill: var(--tl-background);
    stroke: var(--tl-selectStroke);
    stroke-width: 1.5px;
  }
  .tl-handle-bg {
    fill: transparent;
    stroke: none;
    pointer-events: all;
    r: calc(16px / max(1, var(--tl-zoom)));
  }
  .tl-binding-indicator {
    fill: transparent;
    stroke: var(--tl-binding);
  }
  .tl-centered-g {
    transform: translate(var(--tl-padding), var(--tl-padding));
  }
  .tl-current-parent > *[data-shy='true'] {
    opacity: 1;
  }
  .tl-binding {
    fill: none;
    stroke: var(--tl-selectStroke);
    stroke-width: calc(2px * var(--tl-scale));
  }
  .tl-grid-dot {
    fill: var(--tl-grid);
  }
  .tl-erase-line {
    stroke-linejoin: round;
    stroke-linecap: round;
    pointer-events: none;
    fill: var(--tl-grid);
    opacity: 0.32;
  }
`;
function useTLTheme(theme, selector) {
  const tltheme = React6.useMemo(() => __spreadValues3(__spreadValues3({}, defaultTheme), theme), [theme]);
  useTheme("tl", tltheme, selector);
  useStyle("tl-canvas", TLCSS);
}
function useBoundsHandleEvents(id) {
  const { callbacks, inputs: inputs2 } = useTLContext();
  const onPointerDown = React7.useCallback((e13) => {
    var _a3, _b, _c;
    if (e13.dead)
      return;
    else
      e13.dead = true;
    if (e13.button !== 0)
      return;
    if (!inputs2.pointerIsValid(e13))
      return;
    const info = inputs2.pointerDown(e13, id);
    if (inputs2.isDoubleClick() && !(info.altKey || info.metaKey)) {
      (_a3 = callbacks.onDoubleClickBoundsHandle) == null ? void 0 : _a3.call(callbacks, info, e13);
    }
    (_b = callbacks.onPointBoundsHandle) == null ? void 0 : _b.call(callbacks, info, e13);
    (_c = callbacks.onPointerDown) == null ? void 0 : _c.call(callbacks, info, e13);
  }, [inputs2, callbacks, id]);
  const onPointerUp = React7.useCallback((e13) => {
    var _a3, _b;
    if (e13.dead)
      return;
    else
      e13.dead = true;
    if (e13.button !== 0)
      return;
    if (!inputs2.pointerIsValid(e13))
      return;
    const info = inputs2.pointerUp(e13, id);
    (_a3 = callbacks.onReleaseBoundsHandle) == null ? void 0 : _a3.call(callbacks, info, e13);
    (_b = callbacks.onPointerUp) == null ? void 0 : _b.call(callbacks, info, e13);
  }, [inputs2, callbacks, id]);
  const onPointerMove = React7.useCallback((e13) => {
    var _a3, _b;
    if (e13.dead)
      return;
    else
      e13.dead = true;
    if (!inputs2.pointerIsValid(e13))
      return;
    if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
      (_a3 = callbacks.onDragBoundsHandle) == null ? void 0 : _a3.call(callbacks, inputs2.pointerMove(e13, id), e13);
    }
    const info = inputs2.pointerMove(e13, id);
    (_b = callbacks.onPointerMove) == null ? void 0 : _b.call(callbacks, info, e13);
  }, [inputs2, callbacks, id]);
  const onPointerEnter = React7.useCallback((e13) => {
    var _a3;
    if (!inputs2.pointerIsValid(e13))
      return;
    (_a3 = callbacks.onHoverBoundsHandle) == null ? void 0 : _a3.call(callbacks, inputs2.pointerEnter(e13, id), e13);
  }, [inputs2, callbacks, id]);
  const onPointerLeave = React7.useCallback((e13) => {
    var _a3;
    if (!inputs2.pointerIsValid(e13))
      return;
    (_a3 = callbacks.onUnhoverBoundsHandle) == null ? void 0 : _a3.call(callbacks, inputs2.pointerEnter(e13, id), e13);
  }, [inputs2, callbacks, id]);
  return {
    onPointerDown,
    onPointerUp,
    onPointerEnter,
    onPointerMove,
    onPointerLeave
  };
}
function useCameraCss(layerRef, containerRef, pageState) {
  const rZoom = React8.useRef();
  const rPoint = React8.useRef();
  React8.useLayoutEffect(() => {
    return autorun(() => {
      const { zoom, point } = pageState.camera;
      const didZoom = zoom !== rZoom.current;
      const didPan = point !== rPoint.current;
      rZoom.current = zoom;
      rPoint.current = point;
      if (didZoom || didPan) {
        const layer = layerRef.current;
        if (containerRef && "current" in containerRef) {
          const container2 = containerRef.current;
          if (didZoom) {
            if (container2) {
              container2.style.setProperty("--tl-zoom", zoom.toString());
            }
          }
          if (layer) {
            layer.style.setProperty("transform", `scale(${zoom}) translateX(${point[0]}px) translateY(${point[1]}px)`);
          }
        }
      }
    });
  }, [pageState]);
}
function canvasToScreen(point, camera) {
  return [(point[0] + camera.point[0]) * camera.zoom, (point[1] + camera.point[1]) * camera.zoom];
}
function getShapeUtils(shapeUtils2, shape) {
  return shapeUtils2[shape.type];
}
function useSelection(page7, pageState, shapeUtils2) {
  const { rSelectionBounds } = useTLContext();
  const { selectedIds } = pageState;
  const rPrevBounds = React9.useRef();
  let bounds = void 0;
  let rotation = 0;
  let isLocked = false;
  let isLinked = false;
  if (selectedIds.length === 1) {
    const id = selectedIds[0];
    const shape = page7.shapes[id];
    if (!shape) {
      throw Error(`selectedIds is set to the id of a shape that doesn't exist: ${id}`);
    }
    rotation = shape.rotation || 0;
    isLocked = shape.isLocked || false;
    const utils = getShapeUtils(shapeUtils2, shape);
    bounds = utils.hideBounds ? void 0 : utils.getBounds(shape);
  } else if (selectedIds.length > 1) {
    const selectedShapes = selectedIds.map((id) => page7.shapes[id]);
    rotation = 0;
    isLocked = selectedShapes.every((shape) => shape.isLocked);
    bounds = selectedShapes.reduce((acc, shape, i7) => {
      if (i7 === 0) {
        return getShapeUtils(shapeUtils2, shape).getRotatedBounds(shape);
      }
      return utils_default.getExpandedBounds(acc, getShapeUtils(shapeUtils2, shape).getRotatedBounds(shape));
    }, {});
  }
  if (bounds) {
    const [minX, minY] = canvasToScreen([bounds.minX, bounds.minY], pageState.camera);
    const [maxX, maxY] = canvasToScreen([bounds.maxX, bounds.maxY], pageState.camera);
    isLinked = !!Object.values(page7.bindings).find((binding) => selectedIds.includes(binding.toId) || selectedIds.includes(binding.fromId));
    rSelectionBounds.current = {
      minX,
      minY,
      maxX,
      maxY,
      width: maxX - minX,
      height: maxY - minY
    };
  } else {
    rSelectionBounds.current = null;
  }
  const prevBounds = rPrevBounds.current;
  if (!prevBounds || !bounds) {
    rPrevBounds.current = bounds;
  } else if (bounds) {
    if (prevBounds.minX === bounds.minX && prevBounds.minY === bounds.minY && prevBounds.maxX === bounds.maxX && prevBounds.maxY === bounds.maxY) {
      bounds = rPrevBounds.current;
    }
  }
  return { bounds, rotation, isLocked, isLinked };
}
function useHandleEvents(id) {
  const { inputs: inputs2, callbacks } = useTLContext();
  return React10.useMemo(() => {
    return {
      onPointerDown: (e13) => {
        var _a3, _b, _c;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        if (e13.button !== 0)
          return;
        if (!inputs2.pointerIsValid(e13))
          return;
        (_a3 = e13.currentTarget) == null ? void 0 : _a3.setPointerCapture(e13.pointerId);
        const info = inputs2.pointerDown(e13, id);
        (_b = callbacks.onPointHandle) == null ? void 0 : _b.call(callbacks, info, e13);
        (_c = callbacks.onPointerDown) == null ? void 0 : _c.call(callbacks, info, e13);
      },
      onPointerUp: (e13) => {
        var _a3, _b, _c, _d;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (e13.button !== 0)
          return;
        if (!inputs2.pointerIsValid(e13))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e13, id);
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = e13.currentTarget) == null ? void 0 : _a3.releasePointerCapture(e13.pointerId);
          if (isDoubleClick && !(info.altKey || info.metaKey)) {
            (_b = callbacks.onDoubleClickHandle) == null ? void 0 : _b.call(callbacks, info, e13);
          }
          (_c = callbacks.onReleaseHandle) == null ? void 0 : _c.call(callbacks, info, e13);
        }
        (_d = callbacks.onPointerUp) == null ? void 0 : _d.call(callbacks, info, e13);
      },
      onPointerMove: (e13) => {
        var _a3, _b;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        const info = inputs2.pointerMove(e13, id);
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = callbacks.onDragHandle) == null ? void 0 : _a3.call(callbacks, info, e13);
        }
        (_b = callbacks.onPointerMove) == null ? void 0 : _b.call(callbacks, info, e13);
      },
      onPointerEnter: (e13) => {
        var _a3;
        if (!inputs2.pointerIsValid(e13))
          return;
        const info = inputs2.pointerEnter(e13, id);
        (_a3 = callbacks.onHoverHandle) == null ? void 0 : _a3.call(callbacks, info, e13);
      },
      onPointerLeave: (e13) => {
        var _a3;
        if (!inputs2.pointerIsValid(e13))
          return;
        const info = inputs2.pointerEnter(e13, id);
        (_a3 = callbacks.onUnhoverHandle) == null ? void 0 : _a3.call(callbacks, info, e13);
      }
    };
  }, [inputs2, callbacks, id]);
}
function usePreventNavigationCss(rCanvas) {
  const { bounds } = useTLContext();
  React11.useEffect(() => {
    const preventGestureNavigation = (event) => {
      event.preventDefault();
    };
    const preventNavigation = (event) => {
      const touchXPosition = event.touches[0].pageX;
      const touchXRadius = event.touches[0].radiusX || 0;
      if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > bounds.width - 10) {
        event.preventDefault();
      }
    };
    const elm = rCanvas.current;
    if (!elm)
      return () => void 0;
    elm.addEventListener("touchstart", preventGestureNavigation);
    elm.addEventListener("gestureend", preventGestureNavigation);
    elm.addEventListener("gesturechange", preventGestureNavigation);
    elm.addEventListener("gesturestart", preventGestureNavigation);
    elm.addEventListener("touchstart", preventNavigation);
    return () => {
      if (elm) {
        elm.removeEventListener("touchstart", preventGestureNavigation);
        elm.removeEventListener("gestureend", preventGestureNavigation);
        elm.removeEventListener("gesturechange", preventGestureNavigation);
        elm.removeEventListener("gesturestart", preventGestureNavigation);
        elm.removeEventListener("touchstart", preventNavigation);
      }
    };
  }, [rCanvas, bounds.width]);
}
function useBoundsEvents() {
  const { callbacks, inputs: inputs2 } = useTLContext();
  return React12.useMemo(() => {
    return {
      onPointerDown: (e13) => {
        var _a3, _b, _c, _d;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        if (e13.button === 2) {
          (_a3 = callbacks.onRightPointBounds) == null ? void 0 : _a3.call(callbacks, inputs2.pointerDown(e13, "bounds"), e13);
          return;
        }
        if (e13.button !== 0)
          return;
        (_b = e13.currentTarget) == null ? void 0 : _b.setPointerCapture(e13.pointerId);
        const info = inputs2.pointerDown(e13, "bounds");
        (_c = callbacks.onPointBounds) == null ? void 0 : _c.call(callbacks, info, e13);
        (_d = callbacks.onPointerDown) == null ? void 0 : _d.call(callbacks, info, e13);
      },
      onPointerUp: (e13) => {
        var _a3, _b, _c, _d;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (e13.button !== 0)
          return;
        inputs2.activePointer = void 0;
        if (!inputs2.pointerIsValid(e13))
          return;
        const isDoubleClick = inputs2.isDoubleClick();
        const info = inputs2.pointerUp(e13, "bounds");
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = e13.currentTarget) == null ? void 0 : _a3.releasePointerCapture(e13.pointerId);
        }
        if (isDoubleClick && !(info.altKey || info.metaKey)) {
          (_b = callbacks.onDoubleClickBounds) == null ? void 0 : _b.call(callbacks, info, e13);
        }
        (_c = callbacks.onReleaseBounds) == null ? void 0 : _c.call(callbacks, info, e13);
        (_d = callbacks.onPointerUp) == null ? void 0 : _d.call(callbacks, info, e13);
      },
      onPointerMove: (e13) => {
        var _a3, _b;
        if (e13.dead)
          return;
        else
          e13.dead = true;
        if (!inputs2.pointerIsValid(e13))
          return;
        if (e13.currentTarget.hasPointerCapture(e13.pointerId)) {
          (_a3 = callbacks.onDragBounds) == null ? void 0 : _a3.call(callbacks, inputs2.pointerMove(e13, "bounds"), e13);
        }
        const info = inputs2.pointerMove(e13, "bounds");
        (_b = callbacks.onPointerMove) == null ? void 0 : _b.call(callbacks, info, e13);
      },
      onPointerEnter: (e13) => {
        var _a3;
        if (!inputs2.pointerIsValid(e13))
          return;
        (_a3 = callbacks.onHoverBounds) == null ? void 0 : _a3.call(callbacks, inputs2.pointerEnter(e13, "bounds"), e13);
      },
      onPointerLeave: (e13) => {
        var _a3;
        if (!inputs2.pointerIsValid(e13))
          return;
        (_a3 = callbacks.onUnhoverBounds) == null ? void 0 : _a3.call(callbacks, inputs2.pointerEnter(e13, "bounds"), e13);
      }
    };
  }, [inputs2, callbacks]);
}
function usePosition(bounds, rotation = 0) {
  const rBounds = React13.useRef(null);
  React13.useLayoutEffect(() => {
    return autorun(() => {
      const elm = rBounds.current;
      const transform = `
    translate(
      calc(${bounds.minX}px - var(--tl-padding)),
      calc(${bounds.minY}px - var(--tl-padding))
    )
    rotate(${rotation + (bounds.rotation || 0)}rad)`;
      elm.style.setProperty("transform", transform);
      elm.style.setProperty("width", `calc(${Math.floor(bounds.width)}px + (var(--tl-padding) * 2))`);
      elm.style.setProperty("height", `calc(${Math.floor(bounds.height)}px + (var(--tl-padding) * 2))`);
    });
  }, [bounds, rotation]);
  return rBounds;
}
function useKeyEvents() {
  const { inputs: inputs2, callbacks } = useTLContext();
  React14.useEffect(() => {
    const handleKeyDown = (e13) => {
      var _a3;
      (_a3 = callbacks.onKeyDown) == null ? void 0 : _a3.call(callbacks, e13.key, inputs2.keydown(e13), e13);
    };
    const handleKeyUp = (e13) => {
      var _a3;
      inputs2.keyup(e13);
      (_a3 = callbacks.onKeyUp) == null ? void 0 : _a3.call(callbacks, e13.key, inputs2.keyup(e13), e13);
    };
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [inputs2, callbacks]);
}
function useCursorAnimation(ref, point, skip = false) {
  const rState = React15.useRef("idle");
  const rPrevPoint = React15.useRef(point);
  const rQueue = React15.useRef([]);
  const rTimestamp = React15.useRef(performance.now());
  const rLastRequestId = React15.useRef(0);
  const rTimeoutId = React15.useRef(0);
  const [spline] = React15.useState(() => new Spline());
  React15.useLayoutEffect(() => {
    if (skip) {
      const elm = ref.current;
      if (!elm)
        return;
      rState.current = "stopped";
      rPrevPoint.current = point;
      elm.style.setProperty("transform", `translate(${point[0]}px, ${point[1]}px)`);
      return;
    }
    const animateNext = (animation2) => {
      const start = performance.now();
      function loop() {
        const t12 = (performance.now() - start) / animation2.duration;
        if (t12 <= 1) {
          const elm = ref.current;
          if (!elm)
            return;
          const point2 = animation2.curve ? spline.getSplinePoint(t12 + animation2.start) : p.lrp(animation2.from, animation2.to, t12);
          elm.style.setProperty("transform", `translate(${point2[0]}px, ${point2[1]}px)`);
          rLastRequestId.current = requestAnimationFrame(loop);
          return;
        }
        const next = rQueue.current.shift();
        if (next) {
          rState.current = "animating";
          animateNext(next);
        } else {
          rState.current = "idle";
          rTimeoutId.current = setTimeout(() => {
            rState.current = "stopped";
          }, 250);
        }
      }
      loop();
    };
    const now2 = performance.now();
    if (rState.current === "stopped") {
      rTimestamp.current = now2;
      rPrevPoint.current = point;
      spline.clear();
    }
    spline.addPoint(point);
    const animation = {
      distance: spline.totalLength,
      curve: spline.points.length > 3,
      start: spline.points.length - 3,
      from: rPrevPoint.current,
      to: point,
      timeStamp: now2,
      duration: Math.min(now2 - rTimestamp.current, 300)
    };
    rTimestamp.current = now2;
    switch (rState.current) {
      case "stopped": {
        rPrevPoint.current = point;
        rState.current = "idle";
        break;
      }
      case "idle": {
        rState.current = "animating";
        animateNext(animation);
        break;
      }
      case "animating": {
        rPrevPoint.current = point;
        rQueue.current.push(animation);
        break;
      }
    }
    return () => clearTimeout(rTimeoutId.current);
  }, [skip, point, spline]);
}
var Spline = class {
  constructor() {
    __publicField(this, "points", []);
    __publicField(this, "lengths", []);
    __publicField(this, "totalLength", 0);
    __publicField(this, "prev");
  }
  addPoint(point) {
    if (this.prev) {
      const length = p.dist(this.prev, point);
      this.lengths.push(length);
      this.totalLength += length;
      this.points.push(point);
    }
    this.prev = point;
  }
  getSplinePoint(t12) {
    const { points } = this;
    const l8 = points.length - 1;
    const d8 = Math.trunc(t12);
    const p1 = Math.min(d8 + 1, l8);
    const p22 = Math.min(p1 + 1, l8);
    const p32 = Math.min(p22 + 1, l8);
    const p0 = p1 - 1;
    t12 = t12 - d8;
    const tt = t12 * t12, ttt = tt * t12, q1 = -ttt + 2 * tt - t12, q22 = 3 * ttt - 5 * tt + 2, q3 = -3 * ttt + 4 * tt + t12, q4 = ttt - tt;
    if (!(points[p0] && points[p1] && points[p22] && points[p32])) {
      return [0, 0];
    }
    return [
      0.5 * (points[p0][0] * q1 + points[p1][0] * q22 + points[p22][0] * q3 + points[p32][0] * q4),
      0.5 * (points[p0][1] * q1 + points[p1][1] * q22 + points[p22][1] * q3 + points[p32][1] * q4)
    ];
  }
  clear() {
    this.points = [];
    this.totalLength = 0;
  }
};
function usePerformanceCss(performanceMode, rContainer) {
  React16.useLayoutEffect(() => {
    if (rContainer && "current" in rContainer) {
      const container2 = rContainer == null ? void 0 : rContainer.current;
      if (!container2)
        return;
      switch (performanceMode) {
        case "transform_selected": {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "transform_all": {
          container2.style.setProperty("--tl-performance-all", "transform, contents");
          container2.style.setProperty("--tl-performance-selected", "transform, contents");
          break;
        }
        case "translate_selected": {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        case "translate_all": {
          container2.style.setProperty("--tl-performance-all", "transform");
          container2.style.setProperty("--tl-performance-selected", "transform");
          break;
        }
        default: {
          container2.style.setProperty("--tl-performance-all", "auto");
          container2.style.setProperty("--tl-performance-selected", "auto");
        }
      }
    }
  }, [performanceMode]);
}
var Container = observer(function Container2(_a3) {
  var _b = _a3, {
    id,
    bounds,
    rotation = 0,
    isGhost = false,
    isSelected = false,
    children
  } = _b, props = __objRest2(_b, [
    "id",
    "bounds",
    "rotation",
    "isGhost",
    "isSelected",
    "children"
  ]);
  const rPositioned = usePosition(bounds, rotation);
  return /* @__PURE__ */ React17.createElement("div", __spreadValues3({
    id,
    ref: rPositioned,
    className: `tl-positioned${isGhost ? " tl-ghost" : ""}${isSelected ? ` tl-positioned-selected` : ""}`,
    "aria-label": "container",
    "data-testid": "container"
  }, props), children);
});
var Brush = observer(function Brush2({ brush, zoom, dashed }) {
  return /* @__PURE__ */ React18.createElement(Container, {
    bounds: brush,
    rotation: 0
  }, /* @__PURE__ */ React18.createElement(SVGContainer, null, /* @__PURE__ */ React18.createElement("rect", {
    className: "tl-brush" + (dashed ? " dashed" : ""),
    opacity: 1,
    x: 0,
    y: 0,
    width: brush.width,
    height: brush.height,
    "aria-label": "brush"
  }), dashed && /* @__PURE__ */ React18.createElement("g", {
    className: "tl-dashed-brush-line"
  }, /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: 0,
    x2: brush.width,
    y2: 0,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: brush.width,
    y1: 0,
    x2: brush.width,
    y2: brush.height,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: brush.height,
    x2: brush.width,
    y2: brush.height,
    zoom
  }), /* @__PURE__ */ React18.createElement(PerfectDashLine, {
    x1: 0,
    y1: 0,
    x2: 0,
    y2: brush.height,
    zoom
  }))));
});
function PerfectDashLine({ x1, y1, x2: x22, y2: y22, zoom }) {
  const dash = utils_default.getPerfectDashProps(Math.hypot(x22 - x1, y22 - y1), 1 / zoom, "dashed", 1, true, 3);
  return /* @__PURE__ */ React18.createElement("line", {
    x1,
    y1,
    x2: x22,
    y2: y22,
    strokeWidth: 1 / zoom,
    strokeDasharray: dash.strokeDasharray,
    strokeDashoffset: dash.strokeDashoffset
  });
}
var CenterHandle = observer(function CenterHandle2({
  bounds,
  isLocked,
  isHidden
}) {
  return /* @__PURE__ */ React19.createElement("rect", {
    className: ["tl-bounds-center", isLocked ? "tl-dashed" : ""].join(" "),
    x: -1,
    y: -1,
    width: bounds.width + 2,
    height: bounds.height + 2,
    opacity: isHidden ? 0 : 1,
    pointerEvents: "none",
    "aria-label": "center handle"
  });
});
var RotateHandle = observer(function RotateHandle2({
  bounds,
  targetSize,
  size,
  isHidden
}) {
  const events = useBoundsHandleEvents("rotate");
  return /* @__PURE__ */ React20.createElement("g", {
    cursor: "grab",
    opacity: isHidden ? 0 : 1
  }, /* @__PURE__ */ React20.createElement("circle", __spreadValues3({
    className: "tl-transparent",
    "aria-label": "rotate handle transparent",
    cx: bounds.width / 2,
    cy: size * -2,
    r: targetSize,
    pointerEvents: isHidden ? "none" : "all"
  }, events)), /* @__PURE__ */ React20.createElement("circle", {
    className: "tl-rotate-handle",
    "aria-label": "rotate handle",
    cx: bounds.width / 2,
    cy: size * -2,
    r: size / 2,
    pointerEvents: "none"
  }));
});
var cornerBgClassnames = {
  ["top_left_corner"]: "tl-cursor-nwse",
  ["top_right_corner"]: "tl-cursor-nesw",
  ["bottom_right_corner"]: "tl-cursor-nwse",
  ["bottom_left_corner"]: "tl-cursor-nesw"
};
var CornerHandle = observer(function CornerHandle2({
  size,
  targetSize,
  isHidden,
  corner,
  bounds
}) {
  const events = useBoundsHandleEvents(corner);
  const isTop = corner === "top_left_corner" || corner === "top_right_corner";
  const isLeft = corner === "top_left_corner" || corner === "bottom_left_corner";
  return /* @__PURE__ */ React21.createElement("g", {
    opacity: isHidden ? 0 : 1
  }, /* @__PURE__ */ React21.createElement("rect", __spreadValues3({
    className: "tl-transparent " + (isHidden ? "" : cornerBgClassnames[corner]),
    "aria-label": "corner transparent",
    x: (isLeft ? -1 : bounds.width + 1) - targetSize,
    y: (isTop ? -1 : bounds.height + 1) - targetSize,
    width: targetSize * 2,
    height: targetSize * 2,
    pointerEvents: isHidden ? "none" : "all"
  }, events)), /* @__PURE__ */ React21.createElement("rect", {
    className: "tl-corner-handle",
    "aria-label": "corner handle",
    x: (isLeft ? -1 : bounds.width + 1) - size / 2,
    y: (isTop ? -1 : bounds.height + 1) - size / 2,
    width: size,
    height: size,
    pointerEvents: "none"
  }));
});
function LinkHandle({ size, bounds, isHidden }) {
  const leftEvents = useBoundsHandleEvents("left");
  const centerEvents = useBoundsHandleEvents("center");
  const rightEvents = useBoundsHandleEvents("right");
  return /* @__PURE__ */ React222.createElement("g", {
    cursor: "grab",
    transform: `translate(${bounds.width / 2 - size * 4}, ${bounds.height + size * 2})`,
    "aria-label": "link handle"
  }, /* @__PURE__ */ React222.createElement("g", {
    className: "tl-transparent",
    pointerEvents: isHidden ? "none" : "all"
  }, /* @__PURE__ */ React222.createElement("rect", __spreadValues3({
    x: 0,
    y: 0,
    width: size * 2,
    height: size * 2
  }, leftEvents)), /* @__PURE__ */ React222.createElement("rect", __spreadValues3({
    x: size * 3,
    y: 0,
    width: size * 2,
    height: size * 2
  }, centerEvents)), /* @__PURE__ */ React222.createElement("rect", __spreadValues3({
    x: size * 6,
    y: 0,
    width: size * 2,
    height: size * 2
  }, rightEvents))), /* @__PURE__ */ React222.createElement("g", {
    className: "tl-rotate-handle",
    transform: `translate(${size / 2}, ${size / 2})`,
    "aria-label": "link rotate handle"
  }, /* @__PURE__ */ React222.createElement("path", {
    d: `M 0,${size / 2} L ${size},${size} ${size},0 Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  }), /* @__PURE__ */ React222.createElement("path", {
    transform: `translate(${size * 3}, 0)`,
    d: `M 0,0 L ${size},0 ${size / 2},${size} Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  }), /* @__PURE__ */ React222.createElement("path", {
    transform: `translate(${size * 6}, 0)`,
    d: `M ${size},${size / 2} L 0,0 0,${size} Z`,
    pointerEvents: "none",
    opacity: isHidden ? 0 : 1
  })));
}
var edgeClassnames = {
  ["top_edge"]: "tl-cursor-ns",
  ["right_edge"]: "tl-cursor-ew",
  ["bottom_edge"]: "tl-cursor-ns",
  ["left_edge"]: "tl-cursor-ew"
};
var EdgeHandle = observer(function EdgeHandle2({
  size,
  isHidden,
  bounds,
  edge
}) {
  const events = useBoundsHandleEvents(edge);
  const isHorizontal = edge === "top_edge" || edge === "bottom_edge";
  const isFarEdge = edge === "right_edge" || edge === "bottom_edge";
  const { height, width } = bounds;
  return /* @__PURE__ */ React23.createElement("rect", __spreadValues3({
    pointerEvents: isHidden ? "none" : "all",
    className: "tl-transparent tl-edge-handle " + (isHidden ? "" : edgeClassnames[edge]),
    "aria-label": `${edge} handle`,
    opacity: isHidden ? 0 : 1,
    x: isHorizontal ? size / 2 : (isFarEdge ? width + 1 : -1) - size / 2,
    y: isHorizontal ? (isFarEdge ? height + 1 : -1) - size / 2 : size / 2,
    width: isHorizontal ? Math.max(0, width + 1 - size) : size,
    height: isHorizontal ? size : Math.max(0, height + 1 - size)
  }, events));
});
var ROTATIONS = {
  right: 0,
  bottomRight: 45,
  bottom: 90,
  bottomLeft: 135,
  left: 180,
  topLeft: 225,
  top: 270,
  topRight: 315
};
var CloneButton = observer(function CloneButton2({
  bounds,
  side,
  targetSize,
  size
}) {
  const s9 = targetSize * 2;
  const x7 = {
    left: -s9,
    topLeft: -s9,
    bottomLeft: -s9,
    right: bounds.width,
    topRight: bounds.width,
    bottomRight: bounds.width,
    top: bounds.width / 2 - s9 / 2,
    bottom: bounds.width / 2 - s9 / 2
  }[side];
  const y4 = {
    left: bounds.height / 2 - s9 / 2,
    right: bounds.height / 2 - s9 / 2,
    top: -s9 * 2,
    topLeft: -s9,
    topRight: -s9,
    bottom: bounds.height,
    bottomLeft: bounds.height,
    bottomRight: bounds.height
  }[side];
  const { callbacks, inputs: inputs2 } = useTLContext();
  const handleClick = React24.useCallback((e13) => {
    var _a3;
    e13.stopPropagation();
    const info = inputs2.pointerDown(e13, side);
    (_a3 = callbacks.onShapeClone) == null ? void 0 : _a3.call(callbacks, info, e13);
  }, [callbacks.onShapeClone]);
  return /* @__PURE__ */ React24.createElement("g", {
    className: "tl-clone-target",
    transform: `translate(${x7}, ${y4})`,
    "aria-label": "clone button"
  }, /* @__PURE__ */ React24.createElement("rect", {
    className: "tl-transparent",
    width: targetSize * 2,
    height: targetSize * 2
  }), /* @__PURE__ */ React24.createElement("g", {
    className: "tl-clone-button-target",
    onPointerDown: handleClick,
    transform: `translate(${targetSize}, ${targetSize}) rotate(${ROTATIONS[side]})`
  }, /* @__PURE__ */ React24.createElement("circle", {
    className: "tl-transparent ",
    r: targetSize
  }), /* @__PURE__ */ React24.createElement("path", {
    className: "tl-clone-button",
    d: `M -${size / 2},-${size / 2} L ${size / 2},0 -${size / 2},${size / 2} Z`,
    strokeLinejoin: "round"
  })));
});
function CloneButtons({ targetSize, size, bounds }) {
  return /* @__PURE__ */ React25.createElement(React25.Fragment, null, /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "top"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "right"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottom"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "left"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "topLeft"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "topRight"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottomLeft"
  }), /* @__PURE__ */ React25.createElement(CloneButton, {
    targetSize,
    size,
    bounds,
    side: "bottomRight"
  }));
}
var SVGContainer = React26.forwardRef(function SVGContainer2(_a3, ref) {
  var _b = _a3, { id, className = "", children } = _b, rest = __objRest2(_b, ["id", "className", "children"]);
  return /* @__PURE__ */ React26.createElement(ObserverComponent, null, () => /* @__PURE__ */ React26.createElement("svg", __spreadValues3({
    ref,
    className: `tl-positioned-svg ${className}`
  }, rest), /* @__PURE__ */ React26.createElement("g", {
    id,
    className: "tl-centered-g"
  }, children)));
});
var Bounds = observer(function Bounds2({
  zoom,
  bounds,
  viewportWidth,
  rotation,
  isHidden,
  isLocked,
  hideCloneHandles,
  hideResizeHandles,
  hideRotateHandle,
  hideBindingHandles
}) {
  const targetSize = (viewportWidth < 768 ? 16 : 8) / zoom;
  const size = 8 / zoom;
  const smallDimension = Math.min(bounds.width, bounds.height) * zoom;
  const showRotateHandle = !hideRotateHandle && !isHidden && !isLocked && smallDimension > 32;
  const showEdgeHandles = !isHidden && !isLocked && smallDimension > 24;
  const showCornerHandles = !isHidden && !isLocked && smallDimension > 20;
  const showCloneHandles = !hideCloneHandles && smallDimension > 24;
  const showResizeHandles = !hideResizeHandles && !isLocked;
  return /* @__PURE__ */ React27.createElement(Container, {
    bounds,
    rotation
  }, /* @__PURE__ */ React27.createElement(SVGContainer, null, /* @__PURE__ */ React27.createElement(CenterHandle, {
    bounds,
    isLocked,
    isHidden
  }), showResizeHandles ? /* @__PURE__ */ React27.createElement(React27.Fragment, null, /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "top_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "right_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "bottom_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(EdgeHandle, {
    targetSize,
    size,
    bounds,
    edge: "left_edge",
    isHidden: !showEdgeHandles
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "top_left_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "top_right_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "bottom_right_corner"
  }), /* @__PURE__ */ React27.createElement(CornerHandle, {
    targetSize,
    size,
    bounds,
    isHidden: isHidden || !showCornerHandles,
    corner: "bottom_left_corner"
  })) : null, showRotateHandle && /* @__PURE__ */ React27.createElement(RotateHandle, {
    targetSize,
    size,
    bounds,
    isHidden: !showEdgeHandles
  }), showCloneHandles && /* @__PURE__ */ React27.createElement(CloneButtons, {
    bounds,
    targetSize,
    size
  }), !hideBindingHandles && /* @__PURE__ */ React27.createElement(LinkHandle, {
    targetSize,
    size,
    bounds,
    isHidden: !showEdgeHandles
  })));
});
var BoundsBg = observer(function BoundsBg2({ bounds, rotation, isHidden }) {
  const events = useBoundsEvents();
  return /* @__PURE__ */ React28.createElement(Container, {
    bounds,
    rotation
  }, /* @__PURE__ */ React28.createElement(SVGContainer, null, /* @__PURE__ */ React28.createElement("rect", __spreadValues3({
    className: "tl-bounds-bg",
    "aria-label": "bounds bg",
    width: bounds.width,
    height: bounds.height,
    opacity: isHidden ? 0 : 1
  }, events))));
});
var Handle = observer(function Handle2({ id, point }) {
  const events = useHandleEvents(id);
  return /* @__PURE__ */ React29.createElement(Container, {
    bounds: utils_default.translateBounds({
      minX: 0,
      minY: 0,
      maxX: 0,
      maxY: 0,
      width: 0,
      height: 0
    }, point)
  }, /* @__PURE__ */ React29.createElement(SVGContainer, null, /* @__PURE__ */ React29.createElement("g", __spreadValues3({
    className: "tl-handle",
    "aria-label": "handle"
  }, events), /* @__PURE__ */ React29.createElement("circle", {
    className: "tl-handle-bg",
    pointerEvents: "all"
  }), /* @__PURE__ */ React29.createElement("circle", {
    className: "tl-counter-scaled tl-handle",
    pointerEvents: "none",
    r: 4
  }))));
});
var Handles = observer(function Handles2({ shape, zoom }) {
  if (shape.handles === void 0) {
    return null;
  }
  let prev = null;
  const handlesToShow = Object.values(shape.handles).reduce((acc, cur) => {
    const point = e.add(cur.point, shape.point);
    if (!prev || e.dist(point, prev) * zoom >= 32) {
      acc.push(cur);
      prev = point;
    }
    return acc;
  }, []);
  if (handlesToShow.length === 1)
    return null;
  return /* @__PURE__ */ React30.createElement(React30.Fragment, null, handlesToShow.map((handle) => /* @__PURE__ */ React30.createElement(Handle, {
    key: shape.id + "_" + handle.id,
    id: handle.id,
    point: e.add(handle.point, shape.point)
  })));
});
var _RenderedShape = observer(function RenderedShape(props) {
  const ref = props.utils.getRef(props.shape);
  return /* @__PURE__ */ React31.createElement(props.utils.Component, __spreadValues3({
    ref
  }, props));
});
var RenderedShape2 = React31.memo(_RenderedShape, (prev, next) => {
  if (prev.isHovered !== next.isHovered || prev.isSelected !== next.isSelected || prev.isEditing !== next.isEditing || prev.isBinding !== next.isBinding || prev.isGhost !== next.isGhost || prev.meta !== next.meta) {
    return false;
  }
  if (next.shape !== prev.shape) {
    return !next.utils.shouldRender(next.shape, prev.shape);
  }
  return true;
});
var Shape = observer(function Shape2(_a3) {
  var _b = _a3, {
    shape,
    utils,
    meta
  } = _b, rest = __objRest2(_b, [
    "shape",
    "utils",
    "meta"
  ]);
  const { callbacks } = useTLContext();
  const bounds = utils.getBounds(shape);
  const events = useShapeEvents(shape.id);
  return /* @__PURE__ */ React322.createElement(Container, {
    id: shape.id,
    bounds,
    rotation: shape.rotation,
    "data-shape": shape.type,
    isGhost: rest.isGhost,
    isSelected: rest.isSelected
  }, /* @__PURE__ */ React322.createElement(RenderedShape2, __spreadValues3({
    shape,
    utils,
    meta,
    events,
    bounds,
    onShapeChange: callbacks.onShapeChange,
    onShapeBlur: callbacks.onShapeBlur
  }, rest)));
});
var ShapeNode = observer(function ShapeNode2(_a3) {
  var _b = _a3, {
    shape,
    utils,
    meta,
    children
  } = _b, rest = __objRest2(_b, [
    "shape",
    "utils",
    "meta",
    "children"
  ]);
  return /* @__PURE__ */ React33.createElement(React33.Fragment, null, /* @__PURE__ */ React33.createElement(Shape, __spreadValues3({
    shape,
    utils: utils[shape.type],
    meta
  }, rest)), children && children.map((childNode) => /* @__PURE__ */ React33.createElement(ShapeNode2, __spreadValues3({
    key: childNode.shape.id,
    utils
  }, childNode))));
});
var ShapeIndicator = observer(function ShapeIndicator2({
  isHovered = false,
  isSelected = false,
  isEditing = false,
  shape,
  user,
  meta
}) {
  const { shapeUtils: shapeUtils2 } = useTLContext();
  const utils = shapeUtils2[shape.type];
  const bounds = utils.getBounds(shape);
  const rPositioned = usePosition(bounds, shape.rotation);
  return /* @__PURE__ */ React34.createElement("div", {
    ref: rPositioned,
    draggable: false,
    className: [
      "tl-indicator",
      "tl-absolute",
      isSelected && !user ? "tl-selected" : "tl-hovered",
      isEditing ? "tl-editing" : "",
      shape.isLocked ? "tl-locked" : ""
    ].join(" ")
  }, /* @__PURE__ */ React34.createElement("svg", {
    width: "100%",
    height: "100%"
  }, /* @__PURE__ */ React34.createElement("g", {
    className: "tl-centered-g",
    stroke: user == null ? void 0 : user.color
  }, /* @__PURE__ */ React34.createElement(utils.Indicator, {
    shape,
    meta,
    user,
    bounds,
    isSelected,
    isHovered
  }))));
});
var Page = observer(function _Page({
  page: page7,
  pageState,
  assets,
  hideBounds,
  hideHandles,
  hideIndicators,
  hideBindingHandles,
  hideCloneHandles,
  hideRotateHandle,
  hideResizeHandles,
  meta
}) {
  const { bounds: rendererBounds, shapeUtils: shapeUtils2 } = useTLContext();
  const shapeTree = useShapeTree(page7, pageState, assets, meta);
  const { bounds, isLinked, isLocked, rotation } = useSelection(page7, pageState, shapeUtils2);
  const {
    selectedIds,
    hoveredId,
    editingId,
    camera: { zoom }
  } = pageState;
  let _hideIndicators = hideIndicators;
  let _hideCloneHandles = true;
  let _isEditing = false;
  let shapeWithHandles = void 0;
  const selectedShapes = selectedIds.map((id) => page7.shapes[id]);
  if (selectedShapes.length === 1) {
    const shape = selectedShapes[0];
    _isEditing = editingId === shape.id;
    if (_isEditing)
      _hideIndicators = true;
    const utils = shapeUtils2[shape.type];
    _hideCloneHandles = hideCloneHandles || !utils.showCloneHandles;
    if (shape.handles !== void 0 && !_isEditing) {
      shapeWithHandles = shape;
    }
  }
  return /* @__PURE__ */ React35.createElement(React35.Fragment, null, bounds && /* @__PURE__ */ React35.createElement(BoundsBg, {
    bounds,
    rotation,
    isHidden: hideBounds
  }), shapeTree.map((node) => /* @__PURE__ */ React35.createElement(ShapeNode, __spreadValues3({
    key: node.shape.id,
    utils: shapeUtils2
  }, node))), !_hideIndicators && selectedShapes.map((shape) => /* @__PURE__ */ React35.createElement(ShapeIndicator, {
    key: "selected_" + shape.id,
    shape,
    meta,
    isSelected: true,
    isEditing: _isEditing
  })), !_hideIndicators && hoveredId && hoveredId !== editingId && /* @__PURE__ */ React35.createElement(ShapeIndicator, {
    key: "hovered_" + hoveredId,
    shape: page7.shapes[hoveredId],
    meta,
    isHovered: true
  }), bounds && /* @__PURE__ */ React35.createElement(Bounds, {
    zoom,
    bounds,
    viewportWidth: rendererBounds.width,
    isLocked,
    rotation,
    isHidden: hideBounds,
    hideRotateHandle,
    hideResizeHandles,
    hideBindingHandles: hideBindingHandles || !isLinked,
    hideCloneHandles: _hideCloneHandles
  }), !hideHandles && shapeWithHandles && /* @__PURE__ */ React35.createElement(Handles, {
    shape: shapeWithHandles,
    zoom
  }));
});
function User({ user }) {
  const rCursor = React36.useRef(null);
  useCursorAnimation(rCursor, user.point, user.session);
  return /* @__PURE__ */ React36.createElement("svg", {
    ref: rCursor,
    className: "tl-absolute tl-user tl-counter-scaled",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 35 35",
    fill: "none",
    fillRule: "evenodd"
  }, /* @__PURE__ */ React36.createElement("g", {
    fill: "rgba(0,0,0,.2)",
    transform: "translate(1,1)"
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z"
  })), /* @__PURE__ */ React36.createElement("g", {
    fill: "white"
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z"
  })), /* @__PURE__ */ React36.createElement("g", {
    fill: user.color
  }, /* @__PURE__ */ React36.createElement("path", {
    d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z"
  }), /* @__PURE__ */ React36.createElement("path", {
    d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z"
  })));
}
function Users({ userId, users }) {
  return /* @__PURE__ */ React37.createElement(React37.Fragment, null, Object.values(users).filter((user) => user && user.id !== userId).map((user) => /* @__PURE__ */ React37.createElement(User, {
    key: user.id,
    user
  })));
}
var getNearestScrollableContainer = (element) => {
  let parent = element.parentElement;
  while (parent) {
    if (parent === document.body) {
      return document;
    }
    const { overflowY } = window.getComputedStyle(parent);
    const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
    if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return document;
};
function useResizeObserver(ref, onBoundsChange) {
  const { inputs: inputs2, callbacks } = useTLContext();
  const rIsMounted = React38.useRef(false);
  const updateBounds = React38.useCallback(() => {
    var _a3, _b;
    if (rIsMounted.current) {
      const rect = (_a3 = ref.current) == null ? void 0 : _a3.getBoundingClientRect();
      if (rect) {
        const bounds = {
          minX: rect.left,
          maxX: rect.left + rect.width,
          minY: rect.top,
          maxY: rect.top + rect.height,
          width: rect.width,
          height: rect.height
        };
        inputs2.bounds = bounds;
        onBoundsChange(bounds);
        (_b = callbacks.onBoundsChange) == null ? void 0 : _b.call(callbacks, bounds);
      }
    } else {
      rIsMounted.current = true;
    }
  }, [ref, inputs2, callbacks.onBoundsChange]);
  React38.useEffect(() => {
    const scrollingAnchor = ref.current ? getNearestScrollableContainer(ref.current) : document;
    const debouncedupdateBounds = Utils.debounce(updateBounds, 100);
    scrollingAnchor.addEventListener("scroll", debouncedupdateBounds);
    window.addEventListener("resize", debouncedupdateBounds);
    return () => {
      scrollingAnchor.removeEventListener("scroll", debouncedupdateBounds);
      window.removeEventListener("resize", debouncedupdateBounds);
    };
  }, []);
  React38.useEffect(() => {
    const resizeObserver = new ResizeObserver_es_default((entries2) => {
      if (inputs2.isPinching) {
        return;
      }
      if (entries2[0].contentRect) {
        updateBounds();
      }
    });
    if (ref.current) {
      resizeObserver.observe(ref.current);
    }
    return () => {
      resizeObserver.disconnect();
    };
  }, [ref, inputs2]);
  React38.useEffect(() => {
    updateBounds();
  }, [ref]);
}
function UsersIndicators({
  userId,
  users,
  meta,
  page: page7
}) {
  const { shapeUtils: shapeUtils2 } = useTLContext();
  return /* @__PURE__ */ React39.createElement(React39.Fragment, null, Object.values(users).filter(Boolean).filter((user) => user.id !== userId && user.selectedIds.length > 0).map((user) => {
    const shapes = user.selectedIds.map((id) => page7.shapes[id]).filter(Boolean);
    if (shapes.length === 0)
      return null;
    const bounds = utils_default.getCommonBounds(shapes.map((shape) => shapeUtils2[shape.type].getBounds(shape)));
    return /* @__PURE__ */ React39.createElement(React39.Fragment, {
      key: user.id + "_shapes"
    }, /* @__PURE__ */ React39.createElement("div", {
      className: "tl-absolute tl-user-indicator-bounds",
      style: {
        backgroundColor: user.color + "0d",
        borderColor: user.color + "78",
        transform: `translate(${bounds.minX}px, ${bounds.minY}px)`,
        width: bounds.width,
        height: bounds.height,
        pointerEvents: "none"
      }
    }), shapes.map((shape) => /* @__PURE__ */ React39.createElement(ShapeIndicator, {
      key: `${user.id}_${shape.id}_indicator`,
      shape,
      user,
      meta,
      isHovered: true
    })));
  }));
}
var SnapLines = observer(function SnapLines2({ snapLines }) {
  return /* @__PURE__ */ React40.createElement(React40.Fragment, null, snapLines.map((snapLine, i7) => /* @__PURE__ */ React40.createElement(SnapLine, {
    key: i7,
    snapLine
  })));
});
var SnapLine = observer(function SnapLine2({ snapLine }) {
  const bounds = utils_default.getBoundsFromPoints(snapLine);
  return /* @__PURE__ */ React40.createElement(React40.Fragment, null, /* @__PURE__ */ React40.createElement("line", {
    className: "tl-snap-line",
    x1: bounds.minX,
    y1: bounds.minY,
    x2: bounds.maxX,
    y2: bounds.maxY
  }), snapLine.map(([x7, y4], i7) => /* @__PURE__ */ React40.createElement("use", {
    key: i7,
    href: "#tl-snap-point",
    x: x7,
    y: y4
  })));
});
var STEPS = [
  [-1, 0.15, 64],
  [0.05, 0.375, 16],
  [0.15, 1, 4],
  [0.7, 2.5, 1]
];
function Grid({ grid, camera }) {
  return /* @__PURE__ */ React41.createElement("svg", {
    className: "tl-grid",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React41.createElement("defs", null, STEPS.map(([min, mid, size], i7) => {
    const s9 = size * grid * camera.zoom;
    const xo = camera.point[0] * camera.zoom;
    const yo = camera.point[1] * camera.zoom;
    const gxo = xo > 0 ? xo % s9 : s9 + xo % s9;
    const gyo = yo > 0 ? yo % s9 : s9 + yo % s9;
    const opacity = camera.zoom < mid ? utils_default.modulate(camera.zoom, [min, mid], [0, 1]) : 1;
    return /* @__PURE__ */ React41.createElement("pattern", {
      key: `grid-pattern-${i7}`,
      id: `grid-${i7}`,
      width: s9,
      height: s9,
      patternUnits: "userSpaceOnUse"
    }, /* @__PURE__ */ React41.createElement("circle", {
      className: `tl-grid-dot`,
      cx: gxo,
      cy: gyo,
      r: 1,
      opacity
    }));
  })), STEPS.map((_4, i7) => /* @__PURE__ */ React41.createElement("rect", {
    key: `grid-rect-${i7}`,
    width: "100%",
    height: "100%",
    fill: `url(#grid-${i7})`
  })));
}
var Overlay = observer(function Overlay2({ camera: { zoom, point }, children }) {
  const l8 = 2.5 / zoom;
  return /* @__PURE__ */ React42.createElement("svg", {
    className: "tl-overlay"
  }, /* @__PURE__ */ React42.createElement("defs", null, /* @__PURE__ */ React42.createElement("g", {
    id: "tl-snap-point"
  }, /* @__PURE__ */ React42.createElement("path", {
    className: "tl-snap-point",
    d: `M ${-l8},${-l8} L ${l8},${l8} M ${-l8},${l8} L ${l8},${-l8}`
  }))), /* @__PURE__ */ React42.createElement("g", {
    transform: `scale(${zoom}) translate(${point})`
  }, children));
});
var EraseLine = observer(function EraserLine({ points, zoom }) {
  if (points.length === 0)
    return null;
  const d8 = utils_default.getSvgPathFromStroke(Te(points, { size: 16 / zoom, start: { taper: true } }));
  return /* @__PURE__ */ React43.createElement("path", {
    d: d8,
    className: "tl-erase-line"
  });
});
var Canvas = observer(function _Canvas({
  id,
  page: page7,
  pageState,
  assets,
  snapLines,
  eraseLine,
  grid,
  users,
  userId,
  meta,
  performanceMode,
  externalContainerRef,
  showDashedBrush,
  hideHandles,
  hideBounds,
  hideIndicators,
  hideBindingHandles,
  hideCloneHandles,
  hideResizeHandles,
  hideRotateHandle,
  hideGrid,
  onBoundsChange
}) {
  const rCanvas = React44.useRef(null);
  const rZoomRef = React44.useRef(pageState.camera.zoom);
  rZoomRef.current = pageState.camera.zoom;
  useZoomEvents(rZoomRef, externalContainerRef || rCanvas);
  useResizeObserver(rCanvas, onBoundsChange);
  useSafariFocusOutFix();
  usePreventNavigationCss(rCanvas);
  const rContainer = React44.useRef(null);
  const rLayer = React44.useRef(null);
  useCameraCss(rLayer, rContainer, pageState);
  usePerformanceCss(performanceMode, rContainer);
  useKeyEvents();
  const events = useCanvasEvents();
  return /* @__PURE__ */ React44.createElement("div", {
    id,
    className: "tl-container",
    ref: rContainer
  }, /* @__PURE__ */ React44.createElement("div", __spreadValues3({
    id: "canvas",
    className: "tl-absolute tl-canvas",
    ref: rCanvas
  }, events), !hideGrid && grid && /* @__PURE__ */ React44.createElement(Grid, {
    grid,
    camera: pageState.camera
  }), /* @__PURE__ */ React44.createElement("div", {
    ref: rLayer,
    className: "tl-absolute tl-layer",
    "data-testid": "layer"
  }, /* @__PURE__ */ React44.createElement(Page, {
    page: page7,
    pageState,
    assets,
    hideBounds,
    hideIndicators,
    hideHandles,
    hideBindingHandles,
    hideCloneHandles,
    hideResizeHandles,
    hideRotateHandle,
    meta
  }), users && userId && /* @__PURE__ */ React44.createElement(UsersIndicators, {
    userId,
    users,
    page: page7,
    meta
  }), pageState.brush && /* @__PURE__ */ React44.createElement(Brush, {
    brush: pageState.brush,
    dashed: showDashedBrush,
    zoom: pageState.camera.zoom
  }), users && /* @__PURE__ */ React44.createElement(Users, {
    userId,
    users
  })), /* @__PURE__ */ React44.createElement(Overlay, {
    camera: pageState.camera
  }, eraseLine && /* @__PURE__ */ React44.createElement(EraseLine, {
    points: eraseLine,
    zoom: pageState.camera.zoom
  }), snapLines && /* @__PURE__ */ React44.createElement(SnapLines, {
    snapLines
  }))));
});
var DOUBLE_CLICK_DURATION = 250;
var Inputs = class {
  constructor() {
    __publicField(this, "pointer");
    __publicField(this, "keyboard");
    __publicField(this, "keys", {});
    __publicField(this, "isPinching", false);
    __publicField(this, "bounds", {
      minX: 0,
      maxX: 640,
      minY: 0,
      maxY: 480,
      width: 640,
      height: 480
    });
    __publicField(this, "pointerUpTime", 0);
    __publicField(this, "activePointer");
    __publicField(this, "panStart", (e13) => {
      var _a3, _b;
      const { shiftKey, ctrlKey, metaKey, altKey } = e13;
      const info = {
        target: "wheel",
        pointerId: ((_a3 = this.pointer) == null ? void 0 : _a3.pointerId) || 0,
        origin: ((_b = this.pointer) == null ? void 0 : _b.origin) || [0, 0],
        delta: [0, 0],
        pressure: 0.5,
        point: Inputs.getPoint(e13, this.bounds),
        shiftKey,
        ctrlKey,
        metaKey,
        altKey,
        spaceKey: this.keys[" "]
      };
      this.pointer = info;
      return info;
    });
    __publicField(this, "pan", (delta, e13) => {
      if (!this.pointer || this.pointer.target !== "wheel") {
        return this.panStart(e13);
      }
      const { shiftKey, ctrlKey, metaKey, altKey } = e13;
      const prev = this.pointer;
      const point = Inputs.getPoint(e13, this.bounds);
      const info = __spreadProps3(__spreadValues3({}, prev), {
        target: "wheel",
        delta,
        point,
        shiftKey,
        ctrlKey,
        metaKey,
        altKey,
        spaceKey: this.keys[" "]
      });
      this.pointer = info;
      return info;
    });
    __publicField(this, "keydown", (e13) => {
      var _a3, _b;
      const { shiftKey, ctrlKey, metaKey, altKey } = e13;
      this.keys[e13.key] = true;
      return {
        point: ((_a3 = this.pointer) == null ? void 0 : _a3.point) || [0, 0],
        origin: ((_b = this.pointer) == null ? void 0 : _b.origin) || [0, 0],
        key: e13.key,
        keys: Object.keys(this.keys),
        shiftKey,
        ctrlKey,
        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
        altKey
      };
    });
    __publicField(this, "keyup", (e13) => {
      var _a3, _b;
      const { shiftKey, ctrlKey, metaKey, altKey } = e13;
      delete this.keys[e13.key];
      return {
        point: ((_a3 = this.pointer) == null ? void 0 : _a3.point) || [0, 0],
        origin: ((_b = this.pointer) == null ? void 0 : _b.origin) || [0, 0],
        key: e13.key,
        keys: Object.keys(this.keys),
        shiftKey,
        ctrlKey,
        metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
        altKey
      };
    });
  }
  pointerIsValid(e13) {
    if ("pointerId" in e13) {
      if (this.activePointer && this.activePointer !== e13.pointerId) {
        return false;
      }
    }
    if ("touches" in e13) {
      const touch = e13.changedTouches[0];
      if (this.activePointer && this.activePointer !== touch.identifier) {
        return false;
      }
    }
    return true;
  }
  touchStart(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const touch = e13.changedTouches[0];
    this.activePointer = touch.identifier;
    const info = {
      target,
      pointerId: touch.identifier,
      origin: Inputs.getPoint(touch, this.bounds),
      delta: [0, 0],
      point: Inputs.getPoint(touch, this.bounds),
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  touchEnd(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const touch = e13.changedTouches[0];
    const info = {
      target,
      pointerId: touch.identifier,
      origin: Inputs.getPoint(touch, this.bounds),
      delta: [0, 0],
      point: Inputs.getPoint(touch, this.bounds),
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    this.activePointer = void 0;
    return info;
  }
  touchMove(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const touch = e13.changedTouches[0];
    const prev = this.pointer;
    const point = Inputs.getPoint(touch, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    const info = __spreadProps3(__spreadValues3({
      origin: point
    }, prev), {
      target,
      pointerId: touch.identifier,
      point,
      delta,
      pressure: Inputs.getPressure(touch),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    return info;
  }
  pointerDown(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const point = Inputs.getPoint(e13, this.bounds);
    this.activePointer = e13.pointerId;
    const info = {
      target,
      pointerId: e13.pointerId,
      origin: point,
      point,
      delta: [0, 0],
      pressure: Inputs.getPressure(e13),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  pointerEnter(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const point = Inputs.getPoint(e13, this.bounds);
    const info = {
      target,
      pointerId: e13.pointerId,
      origin: point,
      delta: [0, 0],
      point,
      pressure: Inputs.getPressure(e13),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  pointerMove(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const prev = this.pointer;
    const point = Inputs.getPoint(e13, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    const info = __spreadProps3(__spreadValues3({
      origin: point
    }, prev), {
      target,
      pointerId: e13.pointerId,
      point,
      delta,
      pressure: Inputs.getPressure(e13),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    return info;
  }
  pointerUp(e13, target) {
    const { shiftKey, ctrlKey, metaKey, altKey } = e13;
    const prev = this.pointer;
    const point = Inputs.getPoint(e13, this.bounds);
    const delta = (prev == null ? void 0 : prev.point) ? e.sub(point, prev.point) : [0, 0];
    this.activePointer = void 0;
    const info = __spreadProps3(__spreadValues3({
      origin: point
    }, prev), {
      target,
      pointerId: e13.pointerId,
      point,
      delta,
      pressure: Inputs.getPressure(e13),
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    });
    this.pointer = info;
    this.pointerUpTime = performance.now();
    return info;
  }
  isDoubleClick() {
    if (!this.pointer)
      return false;
    const { origin, point } = this.pointer;
    const isDoubleClick = performance.now() - this.pointerUpTime < DOUBLE_CLICK_DURATION && e.dist(origin, point) < 4;
    if (isDoubleClick)
      this.activePointer = void 0;
    return isDoubleClick;
  }
  clear() {
    this.pointer = void 0;
  }
  resetDoubleClick() {
    this.pointerUpTime = 0;
  }
  pinch(point, origin) {
    const { shiftKey, ctrlKey, metaKey, altKey } = this.keys;
    const delta = e.sub(origin, point);
    const info = {
      pointerId: 0,
      target: "pinch",
      origin,
      delta,
      point: e.sub(e.toFixed(point), [this.bounds.minX, this.bounds.minY]),
      pressure: 0.5,
      shiftKey,
      ctrlKey,
      metaKey: Utils.isDarwin() ? metaKey : ctrlKey,
      altKey,
      spaceKey: this.keys[" "]
    };
    this.pointer = info;
    return info;
  }
  reset() {
    this.pointerUpTime = 0;
    this.pointer = void 0;
    this.keyboard = void 0;
    this.activePointer = void 0;
    this.keys = {};
  }
  static getPoint(e13, bounds) {
    return [+e13.clientX.toFixed(2) - bounds.minX, +e13.clientY.toFixed(2) - bounds.minY];
  }
  static getPressure(e13) {
    return "pressure" in e13 ? +e13.pressure.toFixed(2) || 0.5 : 0.5;
  }
  static commandKey() {
    return Utils.isDarwin() ? "\u2318" : "Ctrl";
  }
};
var inputs = new Inputs();
var Renderer = observer(function _Renderer(_a3) {
  var _b = _a3, {
    id = "tl",
    shapeUtils: shapeUtils2,
    page: page7,
    pageState,
    assets = EMPTY_OBJECT2,
    users,
    userId,
    theme,
    meta,
    snapLines,
    eraseLine,
    grid,
    containerRef,
    performanceMode,
    hideHandles = false,
    hideIndicators = false,
    hideCloneHandles = false,
    hideBindingHandles = false,
    hideResizeHandles = false,
    hideRotateHandles = false,
    hideBounds = false,
    hideGrid = true,
    showDashedBrush = false
  } = _b, rest = __objRest2(_b, [
    "id",
    "shapeUtils",
    "page",
    "pageState",
    "assets",
    "users",
    "userId",
    "theme",
    "meta",
    "snapLines",
    "eraseLine",
    "grid",
    "containerRef",
    "performanceMode",
    "hideHandles",
    "hideIndicators",
    "hideCloneHandles",
    "hideBindingHandles",
    "hideResizeHandles",
    "hideRotateHandles",
    "hideBounds",
    "hideGrid",
    "showDashedBrush"
  ]);
  useTLTheme(theme, "#" + id);
  const rSelectionBounds = React45.useRef(null);
  const rPageState = React45.useRef(pageState);
  React45.useEffect(() => {
    rPageState.current = pageState;
  }, [pageState]);
  const [context, setContext] = React45.useState(() => ({
    callbacks: rest,
    shapeUtils: shapeUtils2,
    rSelectionBounds,
    rPageState,
    bounds: {
      minX: 0,
      minY: 0,
      maxX: Infinity,
      maxY: Infinity,
      width: Infinity,
      height: Infinity
    },
    inputs: new Inputs()
  }));
  const onBoundsChange = React45.useCallback((bounds) => {
    setContext((context2) => __spreadProps3(__spreadValues3({}, context2), {
      bounds
    }));
  }, []);
  return /* @__PURE__ */ React45.createElement(TLContext.Provider, {
    value: context
  }, /* @__PURE__ */ React45.createElement(Canvas, {
    id,
    page: page7,
    pageState,
    assets,
    snapLines,
    eraseLine,
    grid,
    users,
    userId,
    externalContainerRef: containerRef,
    hideBounds,
    hideIndicators,
    hideHandles,
    hideCloneHandles,
    hideBindingHandles,
    hideRotateHandle: hideRotateHandles,
    hideResizeHandles,
    hideGrid,
    showDashedBrush,
    onBoundsChange,
    performanceMode,
    meta
  }));
});
var EMPTY_OBJECT2 = {};
var HTMLContainer = React46.forwardRef(function HTMLContainer2(_a3, ref) {
  var _b = _a3, { children, className = "" } = _b, rest = __objRest2(_b, ["children", "className"]);
  return /* @__PURE__ */ React46.createElement(ObserverComponent, null, () => /* @__PURE__ */ React46.createElement("div", __spreadValues3({
    ref,
    className: `tl-positioned-div ${className}`,
    draggable: false
  }, rest), /* @__PURE__ */ React46.createElement("div", {
    className: "tl-inner-div"
  }, children)));
});
var TLShapeUtil = class {
  constructor() {
    __publicField(this, "refMap", /* @__PURE__ */ new Map());
    __publicField(this, "boundsCache", /* @__PURE__ */ new WeakMap());
    __publicField(this, "showCloneHandles", false);
    __publicField(this, "hideBounds", false);
    __publicField(this, "isStateful", false);
    __publicField(this, "shouldRender", (prev, next) => true);
    __publicField(this, "getRef", (shape) => {
      if (!this.refMap.has(shape.id)) {
        this.refMap.set(shape.id, React47.createRef());
      }
      return this.refMap.get(shape.id);
    });
    __publicField(this, "hitTestBounds", (shape, bounds) => {
      const shapeBounds = this.getBounds(shape);
      const corners = utils_default.getRotatedCorners(shapeBounds, shape.rotation);
      return corners.every((point) => utils_default.pointInBounds(point, bounds)) || intersectPolygonBounds(corners, bounds).length > 0;
    });
    __publicField(this, "getRotatedBounds", (shape) => {
      return utils_default.getBoundsFromPoints(utils_default.getRotatedCorners(this.getBounds(shape), shape.rotation));
    });
  }
};
__publicField(TLShapeUtil, "Component", (component) => {
  return React47.forwardRef(component);
});
__publicField(TLShapeUtil, "Indicator", (component) => component);

// ../../node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign: __assign2,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values: __values2,
  __read: __read2,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// ../../node_modules/react-intl/lib/src/components/createFormattedComponent.js
var React51 = __toESM(require_react());

// ../../node_modules/react-intl/lib/src/components/useIntl.js
var React50 = __toESM(require_react());

// ../../node_modules/react-intl/lib/src/components/injectIntl.js
var React49 = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// ../../node_modules/react-intl/lib/src/utils.js
var React48 = __toESM(require_react());

// ../../node_modules/@formatjs/ecma402-abstract/lib/utils.js
function invariant2(condition, message, Err) {
  if (Err === void 0) {
    Err = Error;
  }
  if (!condition) {
    throw new Err(message);
  }
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js
var ErrorKind;
(function(ErrorKind2) {
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
  ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js
var TYPE;
(function(TYPE2) {
  TYPE2[TYPE2["literal"] = 0] = "literal";
  TYPE2[TYPE2["argument"] = 1] = "argument";
  TYPE2[TYPE2["number"] = 2] = "number";
  TYPE2[TYPE2["date"] = 3] = "date";
  TYPE2[TYPE2["time"] = 4] = "time";
  TYPE2[TYPE2["select"] = 5] = "select";
  TYPE2[TYPE2["plural"] = 6] = "plural";
  TYPE2[TYPE2["pound"] = 7] = "pound";
  TYPE2[TYPE2["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function(SKELETON_TYPE2) {
  SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
  SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
function isLiteralElement(el) {
  return el.type === TYPE.literal;
}
function isArgumentElement(el) {
  return el.type === TYPE.argument;
}
function isNumberElement(el) {
  return el.type === TYPE.number;
}
function isDateElement(el) {
  return el.type === TYPE.date;
}
function isTimeElement(el) {
  return el.type === TYPE.time;
}
function isSelectElement(el) {
  return el.type === TYPE.select;
}
function isPluralElement(el) {
  return el.type === TYPE.plural;
}
function isPoundElement(el) {
  return el.type === TYPE.pound;
}
function isTagElement(el) {
  return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function(match) {
    var len = match.length;
    switch (match[0]) {
      case "G":
        result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "y":
        result.year = len === 2 ? "2-digit" : "numeric";
        break;
      case "Y":
      case "u":
      case "U":
      case "r":
        throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
      case "q":
      case "Q":
        throw new RangeError("`q/Q` (quarter) patterns are not supported");
      case "M":
      case "L":
        result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
        break;
      case "w":
      case "W":
        throw new RangeError("`w/W` (week) patterns are not supported");
      case "d":
        result.day = ["numeric", "2-digit"][len - 1];
        break;
      case "D":
      case "F":
      case "g":
        throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
      case "E":
        result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
        break;
      case "e":
        if (len < 4) {
          throw new RangeError("`e..eee` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "c":
        if (len < 4) {
          throw new RangeError("`c..ccc` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "a":
        result.hour12 = true;
        break;
      case "b":
      case "B":
        throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
      case "h":
        result.hourCycle = "h12";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "H":
        result.hourCycle = "h23";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "K":
        result.hourCycle = "h11";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "k":
        result.hourCycle = "h24";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "j":
      case "J":
      case "C":
        throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
      case "m":
        result.minute = ["numeric", "2-digit"][len - 1];
        break;
      case "s":
        result.second = ["numeric", "2-digit"][len - 1];
        break;
      case "S":
      case "A":
        throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
      case "z":
        result.timeZoneName = len < 4 ? "short" : "long";
        break;
      case "Z":
      case "O":
      case "v":
      case "V":
      case "X":
      case "x":
        throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
    }
    return "";
  });
  return result;
}

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

// ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js
function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error("Number skeleton cannot be empty");
  }
  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x7) {
    return x7.length > 0;
  });
  var tokens = [];
  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
    var stringToken = stringTokens_1[_i];
    var stemAndOptions = stringToken.split("/");
    if (stemAndOptions.length === 0) {
      throw new Error("Invalid number skeleton");
    }
    var stem = stemAndOptions[0], options2 = stemAndOptions.slice(1);
    for (var _a3 = 0, options_1 = options2; _a3 < options_1.length; _a3++) {
      var option = options_1[_a3];
      if (option.length === 0) {
        throw new Error("Invalid number skeleton");
      }
    }
    tokens.push({ stem, options: options2 });
  }
  return tokens;
}
function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, "");
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
  var result = {};
  if (str[str.length - 1] === "r") {
    result.roundingPriority = "morePrecision";
  } else if (str[str.length - 1] === "s") {
    result.roundingPriority = "lessPrecision";
  }
  str.replace(SIGNIFICANT_PRECISION_REGEX, function(_4, g1, g22) {
    if (typeof g22 !== "string") {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length;
    } else if (g22 === "+") {
      result.minimumSignificantDigits = g1.length;
    } else if (g1[0] === "#") {
      result.maximumSignificantDigits = g1.length;
    } else {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length + (typeof g22 === "string" ? g22.length : 0);
    }
    return "";
  });
  return result;
}
function parseSign(str) {
  switch (str) {
    case "sign-auto":
      return {
        signDisplay: "auto"
      };
    case "sign-accounting":
    case "()":
      return {
        currencySign: "accounting"
      };
    case "sign-always":
    case "+!":
      return {
        signDisplay: "always"
      };
    case "sign-accounting-always":
    case "()!":
      return {
        signDisplay: "always",
        currencySign: "accounting"
      };
    case "sign-except-zero":
    case "+?":
      return {
        signDisplay: "exceptZero"
      };
    case "sign-accounting-except-zero":
    case "()?":
      return {
        signDisplay: "exceptZero",
        currencySign: "accounting"
      };
    case "sign-never":
    case "+_":
      return {
        signDisplay: "never"
      };
  }
}
function parseConciseScientificAndEngineeringStem(stem) {
  var result;
  if (stem[0] === "E" && stem[1] === "E") {
    result = {
      notation: "engineering"
    };
    stem = stem.slice(2);
  } else if (stem[0] === "E") {
    result = {
      notation: "scientific"
    };
    stem = stem.slice(1);
  }
  if (result) {
    var signDisplay = stem.slice(0, 2);
    if (signDisplay === "+!") {
      result.signDisplay = "always";
      stem = stem.slice(2);
    } else if (signDisplay === "+?") {
      result.signDisplay = "exceptZero";
      stem = stem.slice(2);
    }
    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error("Malformed concise eng/scientific notation");
    }
    result.minimumIntegerDigits = stem.length;
  }
  return result;
}
function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);
  if (signOpts) {
    return signOpts;
  }
  return result;
}
function parseNumberSkeleton(tokens) {
  var result = {};
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    switch (token.stem) {
      case "percent":
      case "%":
        result.style = "percent";
        continue;
      case "%x100":
        result.style = "percent";
        result.scale = 100;
        continue;
      case "currency":
        result.style = "currency";
        result.currency = token.options[0];
        continue;
      case "group-off":
      case ",_":
        result.useGrouping = false;
        continue;
      case "precision-integer":
      case ".":
        result.maximumFractionDigits = 0;
        continue;
      case "measure-unit":
      case "unit":
        result.style = "unit";
        result.unit = icuUnitToEcma(token.options[0]);
        continue;
      case "compact-short":
      case "K":
        result.notation = "compact";
        result.compactDisplay = "short";
        continue;
      case "compact-long":
      case "KK":
        result.notation = "compact";
        result.compactDisplay = "long";
        continue;
      case "scientific":
        result = __assign2(__assign2(__assign2({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
          return __assign2(__assign2({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "engineering":
        result = __assign2(__assign2(__assign2({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
          return __assign2(__assign2({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "notation-simple":
        result.notation = "standard";
        continue;
      case "unit-width-narrow":
        result.currencyDisplay = "narrowSymbol";
        result.unitDisplay = "narrow";
        continue;
      case "unit-width-short":
        result.currencyDisplay = "code";
        result.unitDisplay = "short";
        continue;
      case "unit-width-full-name":
        result.currencyDisplay = "name";
        result.unitDisplay = "long";
        continue;
      case "unit-width-iso-code":
        result.currencyDisplay = "symbol";
        continue;
      case "scale":
        result.scale = parseFloat(token.options[0]);
        continue;
      case "integer-width":
        if (token.options.length > 1) {
          throw new RangeError("integer-width stems only accept a single optional option");
        }
        token.options[0].replace(INTEGER_WIDTH_REGEX, function(_4, g1, g22, g32, g42, g52) {
          if (g1) {
            result.minimumIntegerDigits = g22.length;
          } else if (g32 && g42) {
            throw new Error("We currently do not support maximum integer digits");
          } else if (g52) {
            throw new Error("We currently do not support exact integer digits");
          }
          return "";
        });
        continue;
    }
    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
      result.minimumIntegerDigits = token.stem.length;
      continue;
    }
    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      if (token.options.length > 1) {
        throw new RangeError("Fraction-precision stems only accept a single optional option");
      }
      token.stem.replace(FRACTION_PRECISION_REGEX, function(_4, g1, g22, g32, g42, g52) {
        if (g22 === "*") {
          result.minimumFractionDigits = g1.length;
        } else if (g32 && g32[0] === "#") {
          result.maximumFractionDigits = g32.length;
        } else if (g42 && g52) {
          result.minimumFractionDigits = g42.length;
          result.maximumFractionDigits = g42.length + g52.length;
        } else {
          result.minimumFractionDigits = g1.length;
          result.maximumFractionDigits = g1.length;
        }
        return "";
      });
      var opt = token.options[0];
      if (opt === "w") {
        result = __assign2(__assign2({}, result), { trailingZeroDisplay: "stripIfInteger" });
      } else if (opt) {
        result = __assign2(__assign2({}, result), parseSignificantPrecision(opt));
      }
      continue;
    }
    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign2(__assign2({}, result), parseSignificantPrecision(token.stem));
      continue;
    }
    var signOpts = parseSign(token.stem);
    if (signOpts) {
      result = __assign2(__assign2({}, result), signOpts);
    }
    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
    if (conciseScientificAndEngineeringOpts) {
      result = __assign2(__assign2({}, result), conciseScientificAndEngineeringOpts);
    }
  }
  return result;
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
var timeData = {
  "AX": [
    "H"
  ],
  "BQ": [
    "H"
  ],
  "CP": [
    "H"
  ],
  "CZ": [
    "H"
  ],
  "DK": [
    "H"
  ],
  "FI": [
    "H"
  ],
  "ID": [
    "H"
  ],
  "IS": [
    "H"
  ],
  "ML": [
    "H"
  ],
  "NE": [
    "H"
  ],
  "RU": [
    "H"
  ],
  "SE": [
    "H"
  ],
  "SJ": [
    "H"
  ],
  "SK": [
    "H"
  ],
  "AS": [
    "h",
    "H"
  ],
  "BT": [
    "h",
    "H"
  ],
  "DJ": [
    "h",
    "H"
  ],
  "ER": [
    "h",
    "H"
  ],
  "GH": [
    "h",
    "H"
  ],
  "IN": [
    "h",
    "H"
  ],
  "LS": [
    "h",
    "H"
  ],
  "PG": [
    "h",
    "H"
  ],
  "PW": [
    "h",
    "H"
  ],
  "SO": [
    "h",
    "H"
  ],
  "TO": [
    "h",
    "H"
  ],
  "VU": [
    "h",
    "H"
  ],
  "WS": [
    "h",
    "H"
  ],
  "001": [
    "H",
    "h"
  ],
  "AL": [
    "h",
    "H",
    "hB"
  ],
  "TD": [
    "h",
    "H",
    "hB"
  ],
  "ca-ES": [
    "H",
    "h",
    "hB"
  ],
  "CF": [
    "H",
    "h",
    "hB"
  ],
  "CM": [
    "H",
    "h",
    "hB"
  ],
  "fr-CA": [
    "H",
    "h",
    "hB"
  ],
  "gl-ES": [
    "H",
    "h",
    "hB"
  ],
  "it-CH": [
    "H",
    "h",
    "hB"
  ],
  "it-IT": [
    "H",
    "h",
    "hB"
  ],
  "LU": [
    "H",
    "h",
    "hB"
  ],
  "NP": [
    "H",
    "h",
    "hB"
  ],
  "PF": [
    "H",
    "h",
    "hB"
  ],
  "SC": [
    "H",
    "h",
    "hB"
  ],
  "SM": [
    "H",
    "h",
    "hB"
  ],
  "SN": [
    "H",
    "h",
    "hB"
  ],
  "TF": [
    "H",
    "h",
    "hB"
  ],
  "VA": [
    "H",
    "h",
    "hB"
  ],
  "CY": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "GR": [
    "h",
    "H",
    "hb",
    "hB"
  ],
  "CO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "DO": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KP": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "KR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "NA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PA": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "PR": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "VE": [
    "h",
    "H",
    "hB",
    "hb"
  ],
  "AC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "AI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "BW": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "BZ": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CC": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "CX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "DG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "FK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GB": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "GI": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IM": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "IO": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "JE": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "LT": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MK": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "MS": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NF": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NG": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NR": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "NU": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "PN": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SH": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "SX": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "TA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "ZA": [
    "H",
    "h",
    "hb",
    "hB"
  ],
  "af-ZA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "AR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CL": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "CU": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "EA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BO": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-BR": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-EC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-ES": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-GQ": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "es-PE": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "GT": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "HN": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "IC": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KG": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "KM": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "LK": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MA": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "MX": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "NI": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "PY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "SV": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "UY": [
    "H",
    "h",
    "hB",
    "hb"
  ],
  "JP": [
    "H",
    "h",
    "K"
  ],
  "AD": [
    "H",
    "hB"
  ],
  "AM": [
    "H",
    "hB"
  ],
  "AO": [
    "H",
    "hB"
  ],
  "AT": [
    "H",
    "hB"
  ],
  "AW": [
    "H",
    "hB"
  ],
  "BE": [
    "H",
    "hB"
  ],
  "BF": [
    "H",
    "hB"
  ],
  "BJ": [
    "H",
    "hB"
  ],
  "BL": [
    "H",
    "hB"
  ],
  "BR": [
    "H",
    "hB"
  ],
  "CG": [
    "H",
    "hB"
  ],
  "CI": [
    "H",
    "hB"
  ],
  "CV": [
    "H",
    "hB"
  ],
  "DE": [
    "H",
    "hB"
  ],
  "EE": [
    "H",
    "hB"
  ],
  "FR": [
    "H",
    "hB"
  ],
  "GA": [
    "H",
    "hB"
  ],
  "GF": [
    "H",
    "hB"
  ],
  "GN": [
    "H",
    "hB"
  ],
  "GP": [
    "H",
    "hB"
  ],
  "GW": [
    "H",
    "hB"
  ],
  "HR": [
    "H",
    "hB"
  ],
  "IL": [
    "H",
    "hB"
  ],
  "IT": [
    "H",
    "hB"
  ],
  "KZ": [
    "H",
    "hB"
  ],
  "MC": [
    "H",
    "hB"
  ],
  "MD": [
    "H",
    "hB"
  ],
  "MF": [
    "H",
    "hB"
  ],
  "MQ": [
    "H",
    "hB"
  ],
  "MZ": [
    "H",
    "hB"
  ],
  "NC": [
    "H",
    "hB"
  ],
  "NL": [
    "H",
    "hB"
  ],
  "PM": [
    "H",
    "hB"
  ],
  "PT": [
    "H",
    "hB"
  ],
  "RE": [
    "H",
    "hB"
  ],
  "RO": [
    "H",
    "hB"
  ],
  "SI": [
    "H",
    "hB"
  ],
  "SR": [
    "H",
    "hB"
  ],
  "ST": [
    "H",
    "hB"
  ],
  "TG": [
    "H",
    "hB"
  ],
  "TR": [
    "H",
    "hB"
  ],
  "WF": [
    "H",
    "hB"
  ],
  "YT": [
    "H",
    "hB"
  ],
  "BD": [
    "h",
    "hB",
    "H"
  ],
  "PK": [
    "h",
    "hB",
    "H"
  ],
  "AZ": [
    "H",
    "hB",
    "h"
  ],
  "BA": [
    "H",
    "hB",
    "h"
  ],
  "BG": [
    "H",
    "hB",
    "h"
  ],
  "CH": [
    "H",
    "hB",
    "h"
  ],
  "GE": [
    "H",
    "hB",
    "h"
  ],
  "LI": [
    "H",
    "hB",
    "h"
  ],
  "ME": [
    "H",
    "hB",
    "h"
  ],
  "RS": [
    "H",
    "hB",
    "h"
  ],
  "UA": [
    "H",
    "hB",
    "h"
  ],
  "UZ": [
    "H",
    "hB",
    "h"
  ],
  "XK": [
    "H",
    "hB",
    "h"
  ],
  "AG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "AU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "CA": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "DM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "en-001": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FJ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "FM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GD": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GU": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "GY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "JM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KN": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "KY": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "LR": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MH": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MP": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "MW": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "NZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SB": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SL": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SS": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "SZ": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "TT": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "UM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "US": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VC": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VG": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "VI": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "ZM": [
    "h",
    "hb",
    "H",
    "hB"
  ],
  "BO": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "EC": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "ES": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "GQ": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "PE": [
    "H",
    "hB",
    "h",
    "hb"
  ],
  "AE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "ar-001": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "BH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "DZ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EG": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "EH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "HK": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "IQ": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "JO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "KW": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "LB": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "LY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MO": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "MR": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "OM": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PH": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "PS": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "QA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SA": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SD": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "SY": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "TN": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "YE": [
    "h",
    "hB",
    "hb",
    "H"
  ],
  "AF": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "LA": [
    "H",
    "hb",
    "hB",
    "h"
  ],
  "CN": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "LV": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "TL": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "zu-ZA": [
    "H",
    "hB",
    "hb",
    "h"
  ],
  "CD": [
    "hB",
    "H"
  ],
  "IR": [
    "hB",
    "H"
  ],
  "hi-IN": [
    "hB",
    "h",
    "H"
  ],
  "kn-IN": [
    "hB",
    "h",
    "H"
  ],
  "ml-IN": [
    "hB",
    "h",
    "H"
  ],
  "te-IN": [
    "hB",
    "h",
    "H"
  ],
  "KH": [
    "hB",
    "h",
    "H",
    "hb"
  ],
  "ta-IN": [
    "hB",
    "h",
    "hb",
    "H"
  ],
  "BN": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "MY": [
    "hb",
    "hB",
    "h",
    "H"
  ],
  "ET": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "gu-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "mr-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "pa-IN": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "TW": [
    "hB",
    "hb",
    "h",
    "H"
  ],
  "KE": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "MM": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "TZ": [
    "hB",
    "hb",
    "H",
    "h"
  ],
  "UG": [
    "hB",
    "hb",
    "H",
    "h"
  ]
};

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
function getBestPattern(skeleton, locale) {
  var skeletonCopy = "";
  for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
    var patternChar = skeleton.charAt(patternPos);
    if (patternChar === "j") {
      var extraLength = 0;
      while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
        extraLength++;
        patternPos++;
      }
      var hourLen = 1 + (extraLength & 1);
      var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
      var dayPeriodChar = "a";
      var hourChar = getDefaultHourSymbolFromLocale(locale);
      if (hourChar == "H" || hourChar == "k") {
        dayPeriodLen = 0;
      }
      while (dayPeriodLen-- > 0) {
        skeletonCopy += dayPeriodChar;
      }
      while (hourLen-- > 0) {
        skeletonCopy = hourChar + skeletonCopy;
      }
    } else if (patternChar === "J") {
      skeletonCopy += "H";
    } else {
      skeletonCopy += patternChar;
    }
  }
  return skeletonCopy;
}
function getDefaultHourSymbolFromLocale(locale) {
  var hourCycle = locale.hourCycle;
  if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
    hourCycle = locale.hourCycles[0];
  }
  if (hourCycle) {
    switch (hourCycle) {
      case "h24":
        return "k";
      case "h23":
        return "H";
      case "h12":
        return "h";
      case "h11":
        return "K";
      default:
        throw new Error("Invalid hourCycle");
    }
  }
  var languageTag = locale.language;
  var regionTag;
  if (languageTag !== "root") {
    regionTag = locale.maximize().region;
  }
  var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
  return hourCycles[0];
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a2;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
  return { start, end };
}
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n6) {
  return typeof n6 === "number" && isFinite(n6) && Math.floor(n6) === n6 && Math.abs(n6) <= 9007199254740991;
};
var REGEX_SUPPORTS_U_AND_Y = true;
try {
  re3 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  REGEX_SUPPORTS_U_AND_Y = ((_a2 = re3.exec("a")) === null || _a2 === void 0 ? void 0 : _a2[0]) === "a";
} catch (_4) {
  REGEX_SUPPORTS_U_AND_Y = false;
}
var re3;
var startsWith = hasNativeStartsWith ? function startsWith2(s9, search3, position) {
  return s9.startsWith(search3, position);
} : function startsWith3(s9, search3, position) {
  return s9.slice(position, position + search3.length) === search3;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
  var codePoints = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    codePoints[_i] = arguments[_i];
  }
  var elements = "";
  var length = codePoints.length;
  var i7 = 0;
  var code3;
  while (length > i7) {
    code3 = codePoints[i7++];
    if (code3 > 1114111)
      throw RangeError(code3 + " is not a valid code point");
    elements += code3 < 65536 ? String.fromCharCode(code3) : String.fromCharCode(((code3 -= 65536) >> 10) + 55296, code3 % 1024 + 56320);
  }
  return elements;
};
var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries2) {
  var obj = {};
  for (var _i = 0, entries_1 = entries2; _i < entries_1.length; _i++) {
    var _a3 = entries_1[_i], k4 = _a3[0], v6 = _a3[1];
    obj[k4] = v6;
  }
  return obj;
};
var codePointAt = hasNativeCodePointAt ? function codePointAt2(s9, index2) {
  return s9.codePointAt(index2);
} : function codePointAt3(s9, index2) {
  var size = s9.length;
  if (index2 < 0 || index2 >= size) {
    return void 0;
  }
  var first = s9.charCodeAt(index2);
  var second;
  return first < 55296 || first > 56319 || index2 + 1 === size || (second = s9.charCodeAt(index2 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
};
var trimStart = hasTrimStart ? function trimStart2(s9) {
  return s9.trimStart();
} : function trimStart3(s9) {
  return s9.replace(SPACE_SEPARATOR_START_REGEX, "");
};
var trimEnd = hasTrimEnd ? function trimEnd2(s9) {
  return s9.trimEnd();
} : function trimEnd3(s9) {
  return s9.replace(SPACE_SEPARATOR_END_REGEX, "");
};
function RE(s9, flag) {
  return new RegExp(s9, flag);
}
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
  IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s9, index2) {
    var _a3;
    IDENTIFIER_PREFIX_RE_1.lastIndex = index2;
    var match = IDENTIFIER_PREFIX_RE_1.exec(s9);
    return (_a3 = match[1]) !== null && _a3 !== void 0 ? _a3 : "";
  };
} else {
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s9, index2) {
    var match = [];
    while (true) {
      var c8 = codePointAt(s9, index2);
      if (c8 === void 0 || _isWhiteSpace(c8) || _isPatternSyntax(c8)) {
        break;
      }
      match.push(c8);
      index2 += c8 >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match);
  };
}
var IDENTIFIER_PREFIX_RE_1;
var Parser = function() {
  function Parser2(message, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    this.message = message;
    this.position = { offset: 0, line: 1, column: 1 };
    this.ignoreTag = !!options2.ignoreTag;
    this.locale = options2.locale;
    this.requiresOtherClause = !!options2.requiresOtherClause;
    this.shouldParseSkeletons = !!options2.shouldParseSkeletons;
  }
  Parser2.prototype.parse = function() {
    if (this.offset() !== 0) {
      throw Error("parser can only be used once");
    }
    return this.parseMessage(0, "", false);
  };
  Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
    var elements = [];
    while (!this.isEOF()) {
      var char = this.char();
      if (char === 123) {
        var result = this.parseArgument(nestingLevel, expectingCloseTag);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else if (char === 125 && nestingLevel > 0) {
        break;
      } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
        var position = this.clonePosition();
        this.bump();
        elements.push({
          type: TYPE.pound,
          location: createLocation(position, this.clonePosition())
        });
      } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
        if (expectingCloseTag) {
          break;
        } else {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
        }
      } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
        var result = this.parseTag(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else {
        var result = this.parseLiteral(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      }
    }
    return { val: elements, err: null };
  };
  Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
    var startPosition = this.clonePosition();
    this.bump();
    var tagName = this.parseTagName();
    this.bumpSpace();
    if (this.bumpIf("/>")) {
      return {
        val: {
          type: TYPE.literal,
          value: "<".concat(tagName, "/>"),
          location: createLocation(startPosition, this.clonePosition())
        },
        err: null
      };
    } else if (this.bumpIf(">")) {
      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
      if (childrenResult.err) {
        return childrenResult;
      }
      var children = childrenResult.val;
      var endTagStartPosition = this.clonePosition();
      if (this.bumpIf("</")) {
        if (this.isEOF() || !_isAlpha(this.char())) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        var closingTagNameStartPosition = this.clonePosition();
        var closingTagName = this.parseTagName();
        if (tagName !== closingTagName) {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (!this.bumpIf(">")) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        return {
          val: {
            type: TYPE.tag,
            value: tagName,
            children,
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else {
        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
      }
    } else {
      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseTagName = function() {
    var startOffset = this.offset();
    this.bump();
    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
      this.bump();
    }
    return this.message.slice(startOffset, this.offset());
  };
  Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
    var start = this.clonePosition();
    var value = "";
    while (true) {
      var parseQuoteResult = this.tryParseQuote(parentArgType);
      if (parseQuoteResult) {
        value += parseQuoteResult;
        continue;
      }
      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
      if (parseUnquotedResult) {
        value += parseUnquotedResult;
        continue;
      }
      var parseLeftAngleResult = this.tryParseLeftAngleBracket();
      if (parseLeftAngleResult) {
        value += parseLeftAngleResult;
        continue;
      }
      break;
    }
    var location2 = createLocation(start, this.clonePosition());
    return {
      val: { type: TYPE.literal, value, location: location2 },
      err: null
    };
  };
  Parser2.prototype.tryParseLeftAngleBracket = function() {
    if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
      this.bump();
      return "<";
    }
    return null;
  };
  Parser2.prototype.tryParseQuote = function(parentArgType) {
    if (this.isEOF() || this.char() !== 39) {
      return null;
    }
    switch (this.peek()) {
      case 39:
        this.bump();
        this.bump();
        return "'";
      case 123:
      case 60:
      case 62:
      case 125:
        break;
      case 35:
        if (parentArgType === "plural" || parentArgType === "selectordinal") {
          break;
        }
        return null;
      default:
        return null;
    }
    this.bump();
    var codePoints = [this.char()];
    this.bump();
    while (!this.isEOF()) {
      var ch = this.char();
      if (ch === 39) {
        if (this.peek() === 39) {
          codePoints.push(39);
          this.bump();
        } else {
          this.bump();
          break;
        }
      } else {
        codePoints.push(ch);
      }
      this.bump();
    }
    return fromCodePoint.apply(void 0, codePoints);
  };
  Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
    if (this.isEOF()) {
      return null;
    }
    var ch = this.char();
    if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
      return null;
    } else {
      this.bump();
      return fromCodePoint(ch);
    }
  };
  Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
    var openingBracePosition = this.clonePosition();
    this.bump();
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    if (this.char() === 125) {
      this.bump();
      return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    var value = this.parseIdentifierIfPossible().value;
    if (!value) {
      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    switch (this.char()) {
      case 125: {
        this.bump();
        return {
          val: {
            type: TYPE.argument,
            value,
            location: createLocation(openingBracePosition, this.clonePosition())
          },
          err: null
        };
      }
      case 44: {
        this.bump();
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
      }
      default:
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseIdentifierIfPossible = function() {
    var startingPosition = this.clonePosition();
    var startOffset = this.offset();
    var value = matchIdentifierAtIndex(this.message, startOffset);
    var endOffset = startOffset + value.length;
    this.bumpTo(endOffset);
    var endPosition = this.clonePosition();
    var location2 = createLocation(startingPosition, endPosition);
    return { value, location: location2 };
  };
  Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
    var _a3;
    var typeStartPosition = this.clonePosition();
    var argType = this.parseIdentifierIfPossible().value;
    var typeEndPosition = this.clonePosition();
    switch (argType) {
      case "":
        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      case "number":
      case "date":
      case "time": {
        this.bumpSpace();
        var styleAndLocation = null;
        if (this.bumpIf(",")) {
          this.bumpSpace();
          var styleStartPosition = this.clonePosition();
          var result = this.parseSimpleArgStyleIfPossible();
          if (result.err) {
            return result;
          }
          var style = trimEnd(result.val);
          if (style.length === 0) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          var styleLocation = createLocation(styleStartPosition, this.clonePosition());
          styleAndLocation = { style, styleLocation };
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_1 = createLocation(openingBracePosition, this.clonePosition());
        if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
          var skeleton = trimStart(styleAndLocation.style.slice(2));
          if (argType === "number") {
            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
            if (result.err) {
              return result;
            }
            return {
              val: { type: TYPE.number, value, location: location_1, style: result.val },
              err: null
            };
          } else {
            if (skeleton.length === 0) {
              return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
            }
            var dateTimePattern = skeleton;
            if (this.locale) {
              dateTimePattern = getBestPattern(skeleton, this.locale);
            }
            var style = {
              type: SKELETON_TYPE.dateTime,
              pattern: dateTimePattern,
              location: styleAndLocation.styleLocation,
              parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
            };
            var type = argType === "date" ? TYPE.date : TYPE.time;
            return {
              val: { type, value, location: location_1, style },
              err: null
            };
          }
        }
        return {
          val: {
            type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
            value,
            location: location_1,
            style: (_a3 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a3 !== void 0 ? _a3 : null
          },
          err: null
        };
      }
      case "plural":
      case "selectordinal":
      case "select": {
        var typeEndPosition_1 = this.clonePosition();
        this.bumpSpace();
        if (!this.bumpIf(",")) {
          return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign2({}, typeEndPosition_1)));
        }
        this.bumpSpace();
        var identifierAndLocation = this.parseIdentifierIfPossible();
        var pluralOffset = 0;
        if (argType !== "select" && identifierAndLocation.value === "offset") {
          if (!this.bumpIf(":")) {
            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          this.bumpSpace();
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
          if (result.err) {
            return result;
          }
          this.bumpSpace();
          identifierAndLocation = this.parseIdentifierIfPossible();
          pluralOffset = result.val;
        }
        var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
        if (optionsResult.err) {
          return optionsResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_2 = createLocation(openingBracePosition, this.clonePosition());
        if (argType === "select") {
          return {
            val: {
              type: TYPE.select,
              value,
              options: fromEntries(optionsResult.val),
              location: location_2
            },
            err: null
          };
        } else {
          return {
            val: {
              type: TYPE.plural,
              value,
              options: fromEntries(optionsResult.val),
              offset: pluralOffset,
              pluralType: argType === "plural" ? "cardinal" : "ordinal",
              location: location_2
            },
            err: null
          };
        }
      }
      default:
        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
    }
  };
  Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
    if (this.isEOF() || this.char() !== 125) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bump();
    return { val: true, err: null };
  };
  Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
    var nestedBraces = 0;
    var startPosition = this.clonePosition();
    while (!this.isEOF()) {
      var ch = this.char();
      switch (ch) {
        case 39: {
          this.bump();
          var apostrophePosition = this.clonePosition();
          if (!this.bumpUntil("'")) {
            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
          }
          this.bump();
          break;
        }
        case 123: {
          nestedBraces += 1;
          this.bump();
          break;
        }
        case 125: {
          if (nestedBraces > 0) {
            nestedBraces -= 1;
          } else {
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null
            };
          }
          break;
        }
        default:
          this.bump();
          break;
      }
    }
    return {
      val: this.message.slice(startPosition.offset, this.offset()),
      err: null
    };
  };
  Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
    var tokens = [];
    try {
      tokens = parseNumberSkeletonFromString(skeleton);
    } catch (e13) {
      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
    }
    return {
      val: {
        type: SKELETON_TYPE.number,
        tokens,
        location: location2,
        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
      },
      err: null
    };
  };
  Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
    var _a3;
    var hasOtherClause = false;
    var options2 = [];
    var parsedSelectors = /* @__PURE__ */ new Set();
    var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
    while (true) {
      if (selector.length === 0) {
        var startPosition = this.clonePosition();
        if (parentArgType !== "select" && this.bumpIf("=")) {
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
          if (result.err) {
            return result;
          }
          selectorLocation = createLocation(startPosition, this.clonePosition());
          selector = this.message.slice(startPosition.offset, this.offset());
        } else {
          break;
        }
      }
      if (parsedSelectors.has(selector)) {
        return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
      }
      if (selector === "other") {
        hasOtherClause = true;
      }
      this.bumpSpace();
      var openingBracePosition = this.clonePosition();
      if (!this.bumpIf("{")) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
      }
      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
      if (fragmentResult.err) {
        return fragmentResult;
      }
      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
      if (argCloseResult.err) {
        return argCloseResult;
      }
      options2.push([
        selector,
        {
          value: fragmentResult.val,
          location: createLocation(openingBracePosition, this.clonePosition())
        }
      ]);
      parsedSelectors.add(selector);
      this.bumpSpace();
      _a3 = this.parseIdentifierIfPossible(), selector = _a3.value, selectorLocation = _a3.location;
    }
    if (options2.length === 0) {
      return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
    }
    if (this.requiresOtherClause && !hasOtherClause) {
      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
    }
    return { val: options2, err: null };
  };
  Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
    var sign = 1;
    var startingPosition = this.clonePosition();
    if (this.bumpIf("+")) {
    } else if (this.bumpIf("-")) {
      sign = -1;
    }
    var hasDigits = false;
    var decimal = 0;
    while (!this.isEOF()) {
      var ch = this.char();
      if (ch >= 48 && ch <= 57) {
        hasDigits = true;
        decimal = decimal * 10 + (ch - 48);
        this.bump();
      } else {
        break;
      }
    }
    var location2 = createLocation(startingPosition, this.clonePosition());
    if (!hasDigits) {
      return this.error(expectNumberError, location2);
    }
    decimal *= sign;
    if (!isSafeInteger(decimal)) {
      return this.error(invalidNumberError, location2);
    }
    return { val: decimal, err: null };
  };
  Parser2.prototype.offset = function() {
    return this.position.offset;
  };
  Parser2.prototype.isEOF = function() {
    return this.offset() === this.message.length;
  };
  Parser2.prototype.clonePosition = function() {
    return {
      offset: this.position.offset,
      line: this.position.line,
      column: this.position.column
    };
  };
  Parser2.prototype.char = function() {
    var offset = this.position.offset;
    if (offset >= this.message.length) {
      throw Error("out of bound");
    }
    var code3 = codePointAt(this.message, offset);
    if (code3 === void 0) {
      throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
    }
    return code3;
  };
  Parser2.prototype.error = function(kind, location2) {
    return {
      val: null,
      err: {
        kind,
        message: this.message,
        location: location2
      }
    };
  };
  Parser2.prototype.bump = function() {
    if (this.isEOF()) {
      return;
    }
    var code3 = this.char();
    if (code3 === 10) {
      this.position.line += 1;
      this.position.column = 1;
      this.position.offset += 1;
    } else {
      this.position.column += 1;
      this.position.offset += code3 < 65536 ? 1 : 2;
    }
  };
  Parser2.prototype.bumpIf = function(prefix) {
    if (startsWith(this.message, prefix, this.offset())) {
      for (var i7 = 0; i7 < prefix.length; i7++) {
        this.bump();
      }
      return true;
    }
    return false;
  };
  Parser2.prototype.bumpUntil = function(pattern) {
    var currentOffset = this.offset();
    var index2 = this.message.indexOf(pattern, currentOffset);
    if (index2 >= 0) {
      this.bumpTo(index2);
      return true;
    } else {
      this.bumpTo(this.message.length);
      return false;
    }
  };
  Parser2.prototype.bumpTo = function(targetOffset) {
    if (this.offset() > targetOffset) {
      throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
    }
    targetOffset = Math.min(targetOffset, this.message.length);
    while (true) {
      var offset = this.offset();
      if (offset === targetOffset) {
        break;
      }
      if (offset > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
      }
      this.bump();
      if (this.isEOF()) {
        break;
      }
    }
  };
  Parser2.prototype.bumpSpace = function() {
    while (!this.isEOF() && _isWhiteSpace(this.char())) {
      this.bump();
    }
  };
  Parser2.prototype.peek = function() {
    if (this.isEOF()) {
      return null;
    }
    var code3 = this.char();
    var offset = this.offset();
    var nextCode = this.message.charCodeAt(offset + (code3 >= 65536 ? 2 : 1));
    return nextCode !== null && nextCode !== void 0 ? nextCode : null;
  };
  return Parser2;
}();
function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
}
function _isPotentialElementNameChar(c8) {
  return c8 === 45 || c8 === 46 || c8 >= 48 && c8 <= 57 || c8 === 95 || c8 >= 97 && c8 <= 122 || c8 >= 65 && c8 <= 90 || c8 == 183 || c8 >= 192 && c8 <= 214 || c8 >= 216 && c8 <= 246 || c8 >= 248 && c8 <= 893 || c8 >= 895 && c8 <= 8191 || c8 >= 8204 && c8 <= 8205 || c8 >= 8255 && c8 <= 8256 || c8 >= 8304 && c8 <= 8591 || c8 >= 11264 && c8 <= 12271 || c8 >= 12289 && c8 <= 55295 || c8 >= 63744 && c8 <= 64975 || c8 >= 65008 && c8 <= 65533 || c8 >= 65536 && c8 <= 983039;
}
function _isWhiteSpace(c8) {
  return c8 >= 9 && c8 <= 13 || c8 === 32 || c8 === 133 || c8 >= 8206 && c8 <= 8207 || c8 === 8232 || c8 === 8233;
}
function _isPatternSyntax(c8) {
  return c8 >= 33 && c8 <= 35 || c8 === 36 || c8 >= 37 && c8 <= 39 || c8 === 40 || c8 === 41 || c8 === 42 || c8 === 43 || c8 === 44 || c8 === 45 || c8 >= 46 && c8 <= 47 || c8 >= 58 && c8 <= 59 || c8 >= 60 && c8 <= 62 || c8 >= 63 && c8 <= 64 || c8 === 91 || c8 === 92 || c8 === 93 || c8 === 94 || c8 === 96 || c8 === 123 || c8 === 124 || c8 === 125 || c8 === 126 || c8 === 161 || c8 >= 162 && c8 <= 165 || c8 === 166 || c8 === 167 || c8 === 169 || c8 === 171 || c8 === 172 || c8 === 174 || c8 === 176 || c8 === 177 || c8 === 182 || c8 === 187 || c8 === 191 || c8 === 215 || c8 === 247 || c8 >= 8208 && c8 <= 8213 || c8 >= 8214 && c8 <= 8215 || c8 === 8216 || c8 === 8217 || c8 === 8218 || c8 >= 8219 && c8 <= 8220 || c8 === 8221 || c8 === 8222 || c8 === 8223 || c8 >= 8224 && c8 <= 8231 || c8 >= 8240 && c8 <= 8248 || c8 === 8249 || c8 === 8250 || c8 >= 8251 && c8 <= 8254 || c8 >= 8257 && c8 <= 8259 || c8 === 8260 || c8 === 8261 || c8 === 8262 || c8 >= 8263 && c8 <= 8273 || c8 === 8274 || c8 === 8275 || c8 >= 8277 && c8 <= 8286 || c8 >= 8592 && c8 <= 8596 || c8 >= 8597 && c8 <= 8601 || c8 >= 8602 && c8 <= 8603 || c8 >= 8604 && c8 <= 8607 || c8 === 8608 || c8 >= 8609 && c8 <= 8610 || c8 === 8611 || c8 >= 8612 && c8 <= 8613 || c8 === 8614 || c8 >= 8615 && c8 <= 8621 || c8 === 8622 || c8 >= 8623 && c8 <= 8653 || c8 >= 8654 && c8 <= 8655 || c8 >= 8656 && c8 <= 8657 || c8 === 8658 || c8 === 8659 || c8 === 8660 || c8 >= 8661 && c8 <= 8691 || c8 >= 8692 && c8 <= 8959 || c8 >= 8960 && c8 <= 8967 || c8 === 8968 || c8 === 8969 || c8 === 8970 || c8 === 8971 || c8 >= 8972 && c8 <= 8991 || c8 >= 8992 && c8 <= 8993 || c8 >= 8994 && c8 <= 9e3 || c8 === 9001 || c8 === 9002 || c8 >= 9003 && c8 <= 9083 || c8 === 9084 || c8 >= 9085 && c8 <= 9114 || c8 >= 9115 && c8 <= 9139 || c8 >= 9140 && c8 <= 9179 || c8 >= 9180 && c8 <= 9185 || c8 >= 9186 && c8 <= 9254 || c8 >= 9255 && c8 <= 9279 || c8 >= 9280 && c8 <= 9290 || c8 >= 9291 && c8 <= 9311 || c8 >= 9472 && c8 <= 9654 || c8 === 9655 || c8 >= 9656 && c8 <= 9664 || c8 === 9665 || c8 >= 9666 && c8 <= 9719 || c8 >= 9720 && c8 <= 9727 || c8 >= 9728 && c8 <= 9838 || c8 === 9839 || c8 >= 9840 && c8 <= 10087 || c8 === 10088 || c8 === 10089 || c8 === 10090 || c8 === 10091 || c8 === 10092 || c8 === 10093 || c8 === 10094 || c8 === 10095 || c8 === 10096 || c8 === 10097 || c8 === 10098 || c8 === 10099 || c8 === 10100 || c8 === 10101 || c8 >= 10132 && c8 <= 10175 || c8 >= 10176 && c8 <= 10180 || c8 === 10181 || c8 === 10182 || c8 >= 10183 && c8 <= 10213 || c8 === 10214 || c8 === 10215 || c8 === 10216 || c8 === 10217 || c8 === 10218 || c8 === 10219 || c8 === 10220 || c8 === 10221 || c8 === 10222 || c8 === 10223 || c8 >= 10224 && c8 <= 10239 || c8 >= 10240 && c8 <= 10495 || c8 >= 10496 && c8 <= 10626 || c8 === 10627 || c8 === 10628 || c8 === 10629 || c8 === 10630 || c8 === 10631 || c8 === 10632 || c8 === 10633 || c8 === 10634 || c8 === 10635 || c8 === 10636 || c8 === 10637 || c8 === 10638 || c8 === 10639 || c8 === 10640 || c8 === 10641 || c8 === 10642 || c8 === 10643 || c8 === 10644 || c8 === 10645 || c8 === 10646 || c8 === 10647 || c8 === 10648 || c8 >= 10649 && c8 <= 10711 || c8 === 10712 || c8 === 10713 || c8 === 10714 || c8 === 10715 || c8 >= 10716 && c8 <= 10747 || c8 === 10748 || c8 === 10749 || c8 >= 10750 && c8 <= 11007 || c8 >= 11008 && c8 <= 11055 || c8 >= 11056 && c8 <= 11076 || c8 >= 11077 && c8 <= 11078 || c8 >= 11079 && c8 <= 11084 || c8 >= 11085 && c8 <= 11123 || c8 >= 11124 && c8 <= 11125 || c8 >= 11126 && c8 <= 11157 || c8 === 11158 || c8 >= 11159 && c8 <= 11263 || c8 >= 11776 && c8 <= 11777 || c8 === 11778 || c8 === 11779 || c8 === 11780 || c8 === 11781 || c8 >= 11782 && c8 <= 11784 || c8 === 11785 || c8 === 11786 || c8 === 11787 || c8 === 11788 || c8 === 11789 || c8 >= 11790 && c8 <= 11798 || c8 === 11799 || c8 >= 11800 && c8 <= 11801 || c8 === 11802 || c8 === 11803 || c8 === 11804 || c8 === 11805 || c8 >= 11806 && c8 <= 11807 || c8 === 11808 || c8 === 11809 || c8 === 11810 || c8 === 11811 || c8 === 11812 || c8 === 11813 || c8 === 11814 || c8 === 11815 || c8 === 11816 || c8 === 11817 || c8 >= 11818 && c8 <= 11822 || c8 === 11823 || c8 >= 11824 && c8 <= 11833 || c8 >= 11834 && c8 <= 11835 || c8 >= 11836 && c8 <= 11839 || c8 === 11840 || c8 === 11841 || c8 === 11842 || c8 >= 11843 && c8 <= 11855 || c8 >= 11856 && c8 <= 11857 || c8 === 11858 || c8 >= 11859 && c8 <= 11903 || c8 >= 12289 && c8 <= 12291 || c8 === 12296 || c8 === 12297 || c8 === 12298 || c8 === 12299 || c8 === 12300 || c8 === 12301 || c8 === 12302 || c8 === 12303 || c8 === 12304 || c8 === 12305 || c8 >= 12306 && c8 <= 12307 || c8 === 12308 || c8 === 12309 || c8 === 12310 || c8 === 12311 || c8 === 12312 || c8 === 12313 || c8 === 12314 || c8 === 12315 || c8 === 12316 || c8 === 12317 || c8 >= 12318 && c8 <= 12319 || c8 === 12320 || c8 === 12336 || c8 === 64830 || c8 === 64831 || c8 >= 65093 && c8 <= 65094;
}

// ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js
function pruneLocation(els) {
  els.forEach(function(el) {
    delete el.location;
    if (isSelectElement(el) || isPluralElement(el)) {
      for (var k4 in el.options) {
        delete el.options[k4].location;
        pruneLocation(el.options[k4].value);
      }
    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
      delete el.style.location;
    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
      delete el.style.location;
    } else if (isTagElement(el)) {
      pruneLocation(el.children);
    }
  });
}
function parse2(message, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = __assign2({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
  var result = new Parser(message, opts).parse();
  if (result.err) {
    var error = SyntaxError(ErrorKind[result.err.kind]);
    error.location = result.err.location;
    error.originalMessage = result.err.message;
    throw error;
  }
  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }
  return result.val;
}

// ../../node_modules/@formatjs/fast-memoize/lib/index.js
function memoize(fn, options2) {
  var cache = options2 && options2.cache ? options2.cache : cacheDefault;
  var serializer = options2 && options2.serializer ? options2.serializer : serializerDefault;
  var strategy = options2 && options2.strategy ? options2.strategy : strategyDefault;
  return strategy(fn, {
    cache,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
  return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options2) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(fn, this, strategy, options2.cache.create(), options2.serializer);
}
function strategyVariadic(fn, options2) {
  return assemble(fn, this, variadic, options2.cache.create(), options2.serializer);
}
function strategyMonadic(fn, options2) {
  return assemble(fn, this, monadic, options2.cache.create(), options2.serializer);
}
var serializerDefault = function() {
  return JSON.stringify(arguments);
};
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function(key) {
  return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
  this.cache[key] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};

// ../../node_modules/intl-messageformat/lib/src/error.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
  ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
  ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = function(_super) {
  __extends(FormatError2, _super);
  function FormatError2(msg, code3, originalMessage) {
    var _this = _super.call(this, msg) || this;
    _this.code = code3;
    _this.originalMessage = originalMessage;
    return _this;
  }
  FormatError2.prototype.toString = function() {
    return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
  };
  return FormatError2;
}(Error);
var InvalidValueError = function(_super) {
  __extends(InvalidValueError2, _super);
  function InvalidValueError2(variableId, value, options2, originalMessage) {
    return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options2).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueError2;
}(FormatError);
var InvalidValueTypeError = function(_super) {
  __extends(InvalidValueTypeError2, _super);
  function InvalidValueTypeError2(value, type, originalMessage) {
    return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueTypeError2;
}(FormatError);
var MissingValueError = function(_super) {
  __extends(MissingValueError2, _super);
  function MissingValueError2(variableId, originalMessage) {
    return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
  }
  return MissingValueError2;
}(FormatError);

// ../../node_modules/intl-messageformat/lib/src/formatters.js
var PART_TYPE;
(function(PART_TYPE2) {
  PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
  PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }
  return parts.reduce(function(all, part) {
    var lastPart = all[all.length - 1];
    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all.push(part);
    } else {
      lastPart.value += part.value;
    }
    return all;
  }, []);
}
function isFormatXMLElementFn(el) {
  return typeof el === "function";
}
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [
      {
        type: PART_TYPE.literal,
        value: els[0].value
      }
    ];
  }
  var result = [];
  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
    var el = els_1[_i];
    if (isLiteralElement(el)) {
      result.push({
        type: PART_TYPE.literal,
        value: el.value
      });
      continue;
    }
    if (isPoundElement(el)) {
      if (typeof currentPluralValue === "number") {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }
      continue;
    }
    var varName = el.value;
    if (!(values && varName in values)) {
      throw new MissingValueError(varName, originalMessage);
    }
    var value = values[varName];
    if (isArgumentElement(el)) {
      if (!value || typeof value === "string" || typeof value === "number") {
        value = typeof value === "string" || typeof value === "number" ? String(value) : "";
      }
      result.push({
        type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
        value
      });
      continue;
    }
    if (isDateElement(el)) {
      var style = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTimeElement(el)) {
      var style = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isNumberElement(el)) {
      var style = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
      if (style && style.scale) {
        value = value * (style.scale || 1);
      }
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTagElement(el)) {
      var children = el.children, value_1 = el.value;
      var formatFn = values[value_1];
      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, "function", originalMessage);
      }
      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
      var chunks = formatFn(parts.map(function(p7) {
        return p7.value;
      }));
      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }
      result.push.apply(result, chunks.map(function(c8) {
        return {
          type: typeof c8 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: c8
        };
      }));
    }
    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }
    if (isPluralElement(el)) {
      var opt = el.options["=".concat(value)];
      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
        }
        var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
      continue;
    }
  }
  return mergeLiteral(result);
}

// ../../node_modules/intl-messageformat/lib/src/core.js
function mergeConfig(c1, c22) {
  if (!c22) {
    return c1;
  }
  return __assign2(__assign2(__assign2({}, c1 || {}), c22 || {}), Object.keys(c1).reduce(function(all, k4) {
    all[k4] = __assign2(__assign2({}, c1[k4]), c22[k4] || {});
    return all;
  }, {}));
}
function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }
  return Object.keys(defaultConfig).reduce(function(all, k4) {
    all[k4] = mergeConfig(defaultConfig[k4], configs[k4]);
    return all;
  }, __assign2({}, defaultConfig));
}
function createFastMemoizeCache(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }
  return {
    getNumberFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.PluralRules).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.pluralRules),
      strategy: strategies.variadic
    })
  };
}
var IntlMessageFormat = function() {
  function IntlMessageFormat2(message, locales, overrideFormats, opts) {
    var _this = this;
    if (locales === void 0) {
      locales = IntlMessageFormat2.defaultLocale;
    }
    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
    this.format = function(values) {
      var parts = _this.formatToParts(values);
      if (parts.length === 1) {
        return parts[0].value;
      }
      var result = parts.reduce(function(all, part) {
        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
          all.push(part.value);
        } else {
          all[all.length - 1] += part.value;
        }
        return all;
      }, []);
      if (result.length <= 1) {
        return result[0] || "";
      }
      return result;
    };
    this.formatToParts = function(values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
    };
    this.resolvedOptions = function() {
      var _a3;
      return {
        locale: ((_a3 = _this.resolvedLocale) === null || _a3 === void 0 ? void 0 : _a3.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };
    this.getAst = function() {
      return _this.ast;
    };
    this.locales = locales;
    this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
    if (typeof message === "string") {
      this.message = message;
      if (!IntlMessageFormat2.__parse) {
        throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
      }
      this.ast = IntlMessageFormat2.__parse(message, {
        ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
        locale: this.resolvedLocale
      });
    } else {
      this.ast = message;
    }
    if (!Array.isArray(this.ast)) {
      throw new TypeError("A message must be provided as a String or AST.");
    }
    this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }
  Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
    get: function() {
      if (!IntlMessageFormat2.memoizedDefaultLocale) {
        IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
      }
      return IntlMessageFormat2.memoizedDefaultLocale;
    },
    enumerable: false,
    configurable: true
  });
  IntlMessageFormat2.memoizedDefaultLocale = null;
  IntlMessageFormat2.resolveLocale = function(locales) {
    if (typeof Intl.Locale === "undefined") {
      return;
    }
    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
    if (supportedLocales.length > 0) {
      return new Intl.Locale(supportedLocales[0]);
    }
    return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
  };
  IntlMessageFormat2.__parse = parse2;
  IntlMessageFormat2.formats = {
    number: {
      integer: {
        maximumFractionDigits: 0
      },
      currency: {
        style: "currency"
      },
      percent: {
        style: "percent"
      }
    },
    date: {
      short: {
        month: "numeric",
        day: "numeric",
        year: "2-digit"
      },
      medium: {
        month: "short",
        day: "numeric",
        year: "numeric"
      },
      long: {
        month: "long",
        day: "numeric",
        year: "numeric"
      },
      full: {
        weekday: "long",
        month: "long",
        day: "numeric",
        year: "numeric"
      }
    },
    time: {
      short: {
        hour: "numeric",
        minute: "numeric"
      },
      medium: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      long: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      },
      full: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      }
    }
  };
  return IntlMessageFormat2;
}();

// ../../node_modules/@formatjs/intl/lib/src/error.js
var IntlErrorCode;
(function(IntlErrorCode2) {
  IntlErrorCode2["FORMAT_ERROR"] = "FORMAT_ERROR";
  IntlErrorCode2["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
  IntlErrorCode2["INVALID_CONFIG"] = "INVALID_CONFIG";
  IntlErrorCode2["MISSING_DATA"] = "MISSING_DATA";
  IntlErrorCode2["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
})(IntlErrorCode || (IntlErrorCode = {}));
var IntlError = function(_super) {
  __extends(IntlError2, _super);
  function IntlError2(code3, message, exception) {
    var _this = this;
    var err = exception ? exception instanceof Error ? exception : new Error(String(exception)) : void 0;
    _this = _super.call(this, "[@formatjs/intl Error ".concat(code3, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : "")) || this;
    _this.code = code3;
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(_this, IntlError2);
    }
    return _this;
  }
  return IntlError2;
}(Error);
var UnsupportedFormatterError = function(_super) {
  __extends(UnsupportedFormatterError2, _super);
  function UnsupportedFormatterError2(message, exception) {
    return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;
  }
  return UnsupportedFormatterError2;
}(IntlError);
var InvalidConfigError = function(_super) {
  __extends(InvalidConfigError2, _super);
  function InvalidConfigError2(message, exception) {
    return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;
  }
  return InvalidConfigError2;
}(IntlError);
var MissingDataError = function(_super) {
  __extends(MissingDataError2, _super);
  function MissingDataError2(message, exception) {
    return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;
  }
  return MissingDataError2;
}(IntlError);
var IntlFormatError = function(_super) {
  __extends(IntlFormatError2, _super);
  function IntlFormatError2(message, locale, exception) {
    return _super.call(this, IntlErrorCode.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale, "\n"), exception) || this;
  }
  return IntlFormatError2;
}(IntlError);
var MessageFormatError = function(_super) {
  __extends(MessageFormatError2, _super);
  function MessageFormatError2(message, locale, descriptor, exception) {
    var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale, exception) || this;
    _this.descriptor = descriptor;
    return _this;
  }
  return MessageFormatError2;
}(IntlFormatError);
var MissingTranslationError = function(_super) {
  __extends(MissingTranslationError2, _super);
  function MissingTranslationError2(descriptor, locale) {
    var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, 'Missing message: "'.concat(descriptor.id, '" for locale "').concat(locale, '", using ').concat(descriptor.defaultMessage ? "default message (".concat(typeof descriptor.defaultMessage === "string" ? descriptor.defaultMessage : descriptor.defaultMessage.map(function(e13) {
      var _a3;
      return (_a3 = e13.value) !== null && _a3 !== void 0 ? _a3 : JSON.stringify(e13);
    }).join(), ")") : "id", " as fallback.")) || this;
    _this.descriptor = descriptor;
    return _this;
  }
  return MissingTranslationError2;
}(IntlError);

// ../../node_modules/@formatjs/intl/lib/src/utils.js
function filterProps(props, allowlist, defaults) {
  if (defaults === void 0) {
    defaults = {};
  }
  return allowlist.reduce(function(filtered, name) {
    if (name in props) {
      filtered[name] = props[name];
    } else if (name in defaults) {
      filtered[name] = defaults[name];
    }
    return filtered;
  }, {});
}
var defaultErrorHandler = function(error) {
  if (false) {
    console.error(error);
  }
};
var defaultWarnHandler = function(warning) {
  if (false) {
    console.warn(warning);
  }
};
var DEFAULT_INTL_CONFIG = {
  formats: {},
  messages: {},
  timeZone: void 0,
  defaultLocale: "en",
  defaultFormats: {},
  fallbackOnEmptyString: true,
  onError: defaultErrorHandler,
  onWarn: defaultWarnHandler
};
function createIntlCache() {
  return {
    dateTime: {},
    number: {},
    message: {},
    relativeTime: {},
    pluralRules: {},
    list: {},
    displayNames: {}
  };
}
function createFastMemoizeCache2(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createFormatters(cache) {
  if (cache === void 0) {
    cache = createIntlCache();
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  var ListFormat = Intl.ListFormat;
  var DisplayNames = Intl.DisplayNames;
  var getDateTimeFormat = memoize(function() {
    var _a3;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.dateTime),
    strategy: strategies.variadic
  });
  var getNumberFormat = memoize(function() {
    var _a3;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.number),
    strategy: strategies.variadic
  });
  var getPluralRules = memoize(function() {
    var _a3;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return new ((_a3 = Intl.PluralRules).bind.apply(_a3, __spreadArray([void 0], args, false)))();
  }, {
    cache: createFastMemoizeCache2(cache.pluralRules),
    strategy: strategies.variadic
  });
  return {
    getDateTimeFormat,
    getNumberFormat,
    getMessageFormat: memoize(function(message, locales, overrideFormats, opts) {
      return new IntlMessageFormat(message, locales, overrideFormats, __assign2({ formatters: {
        getNumberFormat,
        getDateTimeFormat,
        getPluralRules
      } }, opts || {}));
    }, {
      cache: createFastMemoizeCache2(cache.message),
      strategy: strategies.variadic
    }),
    getRelativeTimeFormat: memoize(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.relativeTime),
      strategy: strategies.variadic
    }),
    getPluralRules,
    getListFormat: memoize(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.list),
      strategy: strategies.variadic
    }),
    getDisplayNames: memoize(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache2(cache.displayNames),
      strategy: strategies.variadic
    })
  };
}
function getNamedFormat(formats, type, name, onError) {
  var formatType = formats && formats[type];
  var format;
  if (formatType) {
    format = formatType[name];
  }
  if (format) {
    return format;
  }
  onError(new UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
}

// ../../node_modules/@formatjs/intl/lib/src/message.js
function setTimeZoneInOptions(opts, timeZone) {
  return Object.keys(opts).reduce(function(all, k4) {
    all[k4] = __assign2({ timeZone }, opts[k4]);
    return all;
  }, {});
}
function deepMergeOptions(opts1, opts2) {
  var keys = Object.keys(__assign2(__assign2({}, opts1), opts2));
  return keys.reduce(function(all, k4) {
    all[k4] = __assign2(__assign2({}, opts1[k4] || {}), opts2[k4] || {});
    return all;
  }, {});
}
function deepMergeFormatsAndSetTimeZone(f1, timeZone) {
  if (!timeZone) {
    return f1;
  }
  var mfFormats = IntlMessageFormat.formats;
  return __assign2(__assign2(__assign2({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });
}
var formatMessage = function(_a3, state, messageDescriptor, values, opts) {
  var locale = _a3.locale, formats = _a3.formats, messages = _a3.messages, defaultLocale = _a3.defaultLocale, defaultFormats = _a3.defaultFormats, fallbackOnEmptyString = _a3.fallbackOnEmptyString, onError = _a3.onError, timeZone = _a3.timeZone, defaultRichTextElements = _a3.defaultRichTextElements;
  if (messageDescriptor === void 0) {
    messageDescriptor = { id: "" };
  }
  var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
  invariant2(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
  var id = String(msgId);
  var message = messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id];
  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {
    return message[0].value;
  }
  if (!values && message && typeof message === "string" && !defaultRichTextElements) {
    return message.replace(/'\{(.*?)\}'/gi, "{$1}");
  }
  values = __assign2(__assign2({}, defaultRichTextElements), values || {});
  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
  if (!message) {
    if (fallbackOnEmptyString === false && message === "") {
      return message;
    }
    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
      onError(new MissingTranslationError(messageDescriptor, locale));
    }
    if (defaultMessage) {
      try {
        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
        return formatter.format(values);
      } catch (e13) {
        onError(new MessageFormatError('Error formatting default message for: "'.concat(id, '", rendering default message verbatim'), locale, messageDescriptor, e13));
        return typeof defaultMessage === "string" ? defaultMessage : id;
      }
    }
    return id;
  }
  try {
    var formatter = state.getMessageFormat(message, locale, formats, __assign2({ formatters: state }, opts || {}));
    return formatter.format(values);
  } catch (e13) {
    onError(new MessageFormatError('Error formatting message: "'.concat(id, '", using ').concat(defaultMessage ? "default message" : "id", " as fallback."), locale, messageDescriptor, e13));
  }
  if (defaultMessage) {
    try {
      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
      return formatter.format(values);
    } catch (e13) {
      onError(new MessageFormatError('Error formatting the default message for: "'.concat(id, '", rendering message verbatim'), locale, messageDescriptor, e13));
    }
  }
  if (typeof message === "string") {
    return message;
  }
  if (typeof defaultMessage === "string") {
    return defaultMessage;
  }
  return id;
};

// ../../node_modules/@formatjs/intl/lib/src/dateTime.js
var DATE_TIME_FORMAT_OPTIONS = [
  "formatMatcher",
  "timeZone",
  "hour12",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "hourCycle",
  "dateStyle",
  "timeStyle",
  "calendar",
  "numberingSystem",
  "fractionalSecondDigits"
];
function getFormatter(_a3, type, getDateTimeFormat, options2) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError, timeZone = _a3.timeZone;
  if (options2 === void 0) {
    options2 = {};
  }
  var format = options2.format;
  var defaults = __assign2(__assign2({}, timeZone && { timeZone }), format && getNamedFormat(formats, type, format, onError));
  var filteredOptions = filterProps(options2, DATE_TIME_FORMAT_OPTIONS, defaults);
  if (type === "time" && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {
    filteredOptions = __assign2(__assign2({}, filteredOptions), { hour: "numeric", minute: "numeric" });
  }
  return getDateTimeFormat(locale, filteredOptions);
}
function formatDate(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    _a3[_i - 2] = arguments[_i];
  }
  var value = _a3[0], _b = _a3[1], options2 = _b === void 0 ? {} : _b;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options2).format(date);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e13));
  }
  return String(date);
}
function formatTime(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    _a3[_i - 2] = arguments[_i];
  }
  var value = _a3[0], _b = _a3[1], options2 = _b === void 0 ? {} : _b;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options2).format(date);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e13));
  }
  return String(date);
}
function formatDateTimeRange(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    _a3[_i - 2] = arguments[_i];
  }
  var from = _a3[0], to21 = _a3[1], _b = _a3[2], options2 = _b === void 0 ? {} : _b;
  var timeZone = config.timeZone, locale = config.locale, onError = config.onError;
  var filteredOptions = filterProps(options2, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone } : {});
  try {
    return getDateTimeFormat(locale, filteredOptions).formatRange(from, to21);
  } catch (e13) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date time range.", e13));
  }
  return String(from);
}
function formatDateToParts(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    _a3[_i - 2] = arguments[_i];
  }
  var value = _a3[0], _b = _a3[1], options2 = _b === void 0 ? {} : _b;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "date", getDateTimeFormat, options2).formatToParts(date);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting date.", e13));
  }
  return [];
}
function formatTimeToParts(config, getDateTimeFormat) {
  var _a3 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    _a3[_i - 2] = arguments[_i];
  }
  var value = _a3[0], _b = _a3[1], options2 = _b === void 0 ? {} : _b;
  var date = typeof value === "string" ? new Date(value || 0) : value;
  try {
    return getFormatter(config, "time", getDateTimeFormat, options2).formatToParts(date);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting time.", e13));
  }
  return [];
}

// ../../node_modules/@formatjs/intl/lib/src/displayName.js
var DISPLAY_NAMES_OPTONS = [
  "style",
  "type",
  "fallback"
];
function formatDisplayName(_a3, getDisplayNames, value, options2) {
  var locale = _a3.locale, onError = _a3.onError;
  var DisplayNames = Intl.DisplayNames;
  if (!DisplayNames) {
    onError(new FormatError('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options2, DISPLAY_NAMES_OPTONS);
  try {
    return getDisplayNames(locale, filteredOptions).of(value);
  } catch (e13) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting display name.", e13));
  }
}

// ../../node_modules/@formatjs/intl/lib/src/list.js
var LIST_FORMAT_OPTIONS = [
  "type",
  "style"
];
var now = Date.now();
function generateToken(i7) {
  return "".concat(now, "_").concat(i7, "_").concat(now);
}
function formatList(opts, getListFormat, values, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var results = formatListToParts(opts, getListFormat, values, options2).reduce(function(all, el) {
    var val = el.value;
    if (typeof val !== "string") {
      all.push(val);
    } else if (typeof all[all.length - 1] === "string") {
      all[all.length - 1] += val;
    } else {
      all.push(val);
    }
    return all;
  }, []);
  return results.length === 1 ? results[0] : results;
}
function formatListToParts(_a3, getListFormat, values, options2) {
  var locale = _a3.locale, onError = _a3.onError;
  if (options2 === void 0) {
    options2 = {};
  }
  var ListFormat = Intl.ListFormat;
  if (!ListFormat) {
    onError(new FormatError('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options2, LIST_FORMAT_OPTIONS);
  try {
    var richValues_1 = {};
    var serializedValues = values.map(function(v6, i7) {
      if (typeof v6 === "object") {
        var id = generateToken(i7);
        richValues_1[id] = v6;
        return id;
      }
      return String(v6);
    });
    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function(part) {
      return part.type === "literal" ? part : __assign2(__assign2({}, part), { value: richValues_1[part.value] || part.value });
    });
  } catch (e13) {
    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting list.", e13));
  }
  return values;
}

// ../../node_modules/@formatjs/intl/lib/src/plural.js
var PLURAL_FORMAT_OPTIONS = ["type"];
function formatPlural(_a3, getPluralRules, value, options2) {
  var locale = _a3.locale, onError = _a3.onError;
  if (options2 === void 0) {
    options2 = {};
  }
  if (!Intl.PluralRules) {
    onError(new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API));
  }
  var filteredOptions = filterProps(options2, PLURAL_FORMAT_OPTIONS);
  try {
    return getPluralRules(locale, filteredOptions).select(value);
  } catch (e13) {
    onError(new IntlFormatError("Error formatting plural.", locale, e13));
  }
  return "other";
}

// ../../node_modules/@formatjs/intl/lib/src/relativeTime.js
var RELATIVE_TIME_FORMAT_OPTIONS = ["numeric", "style"];
function getFormatter2(_a3, getRelativeTimeFormat, options2) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError;
  if (options2 === void 0) {
    options2 = {};
  }
  var format = options2.format;
  var defaults = !!format && getNamedFormat(formats, "relative", format, onError) || {};
  var filteredOptions = filterProps(options2, RELATIVE_TIME_FORMAT_OPTIONS, defaults);
  return getRelativeTimeFormat(locale, filteredOptions);
}
function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  if (!unit) {
    unit = "second";
  }
  var RelativeTimeFormat = Intl.RelativeTimeFormat;
  if (!RelativeTimeFormat) {
    config.onError(new FormatError('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n', ErrorCode.MISSING_INTL_API));
  }
  try {
    return getFormatter2(config, getRelativeTimeFormat, options2).format(value, unit);
  } catch (e13) {
    config.onError(new IntlFormatError("Error formatting relative time.", config.locale, e13));
  }
  return String(value);
}

// ../../node_modules/@formatjs/intl/lib/src/number.js
var NUMBER_FORMAT_OPTIONS = [
  "style",
  "currency",
  "currencyDisplay",
  "unit",
  "unitDisplay",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "currencyDisplay",
  "currencySign",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "numberingSystem"
];
function getFormatter3(_a3, getNumberFormat, options2) {
  var locale = _a3.locale, formats = _a3.formats, onError = _a3.onError;
  if (options2 === void 0) {
    options2 = {};
  }
  var format = options2.format;
  var defaults = format && getNamedFormat(formats, "number", format, onError) || {};
  var filteredOptions = filterProps(options2, NUMBER_FORMAT_OPTIONS, defaults);
  return getNumberFormat(locale, filteredOptions);
}
function formatNumber(config, getNumberFormat, value, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options2).format(value);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e13));
  }
  return String(value);
}
function formatNumberToParts(config, getNumberFormat, value, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  try {
    return getFormatter3(config, getNumberFormat, options2).formatToParts(value);
  } catch (e13) {
    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, "Error formatting number.", e13));
  }
  return [];
}

// ../../node_modules/@formatjs/intl/lib/src/create-intl.js
function messagesContainString(messages) {
  var firstMessage = messages ? messages[Object.keys(messages)[0]] : void 0;
  return typeof firstMessage === "string";
}
function verifyConfigMessages(config) {
  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {
    config.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution');
  }
}
function createIntl(config, cache) {
  var formatters = createFormatters(cache);
  var resolvedConfig = __assign2(__assign2({}, DEFAULT_INTL_CONFIG), config);
  var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
  if (!locale) {
    if (onError) {
      onError(new InvalidConfigError('"locale" was not configured, using "'.concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details')));
    }
    resolvedConfig.locale = resolvedConfig.defaultLocale || "en";
  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.NumberFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {
    onError(new MissingDataError('Missing locale data for locale: "'.concat(locale, '" in Intl.DateTimeFormat. Using default locale: "').concat(defaultLocale, '" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details')));
  }
  verifyConfigMessages(resolvedConfig);
  return __assign2(__assign2({}, resolvedConfig), { formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), $t: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });
}

// ../../node_modules/react-intl/lib/src/utils.js
function invariantIntlContext(intl) {
  invariant2(intl, "[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.");
}
var DEFAULT_INTL_CONFIG2 = __assign2(__assign2({}, DEFAULT_INTL_CONFIG), { textComponent: React48.Fragment });
function assignUniqueKeysToParts(formatXMLElementFn) {
  return function(parts) {
    return formatXMLElementFn(React48.Children.toArray(parts));
  };
}
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (var i7 = 0; i7 < len; i7++) {
    var key = aKeys[i7];
    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }
  return true;
}

// ../../node_modules/react-intl/lib/src/components/injectIntl.js
var IntlContext = React49.createContext(null);
var IntlConsumer = IntlContext.Consumer;
var IntlProvider = IntlContext.Provider;
var Provider = IntlProvider;
var Context = IntlContext;

// ../../node_modules/react-intl/lib/src/components/useIntl.js
function useIntl() {
  var intl = React50.useContext(Context);
  invariantIntlContext(intl);
  return intl;
}

// ../../node_modules/react-intl/lib/src/components/createFormattedComponent.js
var DisplayName;
(function(DisplayName2) {
  DisplayName2["formatDate"] = "FormattedDate";
  DisplayName2["formatTime"] = "FormattedTime";
  DisplayName2["formatNumber"] = "FormattedNumber";
  DisplayName2["formatList"] = "FormattedList";
  DisplayName2["formatDisplayName"] = "FormattedDisplayName";
})(DisplayName || (DisplayName = {}));
var DisplayNameParts;
(function(DisplayNameParts2) {
  DisplayNameParts2["formatDate"] = "FormattedDateParts";
  DisplayNameParts2["formatTime"] = "FormattedTimeParts";
  DisplayNameParts2["formatNumber"] = "FormattedNumberParts";
  DisplayNameParts2["formatList"] = "FormattedListParts";
})(DisplayNameParts || (DisplayNameParts = {}));
var FormattedNumberParts = function(props) {
  var intl = useIntl();
  var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
  return children(intl.formatNumberToParts(value, formatProps));
};
FormattedNumberParts.displayName = "FormattedNumberParts";
FormattedNumberParts.displayName = "FormattedNumberParts";
function createFormattedDateTimePartsComponent(name) {
  var ComponentParts = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
    var date = typeof value === "string" ? new Date(value || 0) : value;
    var formattedParts = name === "formatDate" ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);
    return children(formattedParts);
  };
  ComponentParts.displayName = DisplayNameParts[name];
  return ComponentParts;
}
function createFormattedComponent(name) {
  var Component = function(props) {
    var intl = useIntl();
    var value = props.value, children = props.children, formatProps = __rest(props, ["value", "children"]);
    var formattedValue = intl[name](value, formatProps);
    if (typeof children === "function") {
      return children(formattedValue);
    }
    var Text2 = intl.textComponent || React51.Fragment;
    return React51.createElement(Text2, null, formattedValue);
  };
  Component.displayName = DisplayName[name];
  return Component;
}

// ../../node_modules/react-intl/lib/src/components/provider.js
var React52 = __toESM(require_react());
function processIntlConfig(config) {
  return {
    locale: config.locale,
    timeZone: config.timeZone,
    fallbackOnEmptyString: config.fallbackOnEmptyString,
    formats: config.formats,
    textComponent: config.textComponent,
    messages: config.messages,
    defaultLocale: config.defaultLocale,
    defaultFormats: config.defaultFormats,
    onError: config.onError,
    onWarn: config.onWarn,
    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,
    defaultRichTextElements: config.defaultRichTextElements
  };
}
function assignUniqueKeysToFormatXMLElementFnArgument(values) {
  if (!values) {
    return values;
  }
  return Object.keys(values).reduce(function(acc, k4) {
    var v6 = values[k4];
    acc[k4] = isFormatXMLElementFn(v6) ? assignUniqueKeysToParts(v6) : v6;
    return acc;
  }, {});
}
var formatMessage2 = function(config, formatters, descriptor, rawValues) {
  var rest = [];
  for (var _i = 4; _i < arguments.length; _i++) {
    rest[_i - 4] = arguments[_i];
  }
  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);
  var chunks = formatMessage.apply(void 0, __spreadArray([
    config,
    formatters,
    descriptor,
    values
  ], rest, false));
  if (Array.isArray(chunks)) {
    return React52.Children.toArray(chunks);
  }
  return chunks;
};
var createIntl2 = function(_a3, cache) {
  var rawDefaultRichTextElements = _a3.defaultRichTextElements, config = __rest(_a3, ["defaultRichTextElements"]);
  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);
  var coreIntl = createIntl(__assign2(__assign2(__assign2({}, DEFAULT_INTL_CONFIG2), config), { defaultRichTextElements }), cache);
  var resolvedConfig = {
    locale: coreIntl.locale,
    timeZone: coreIntl.timeZone,
    fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,
    formats: coreIntl.formats,
    defaultLocale: coreIntl.defaultLocale,
    defaultFormats: coreIntl.defaultFormats,
    messages: coreIntl.messages,
    onError: coreIntl.onError,
    defaultRichTextElements
  };
  return __assign2(__assign2({}, coreIntl), { formatMessage: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters), $t: formatMessage2.bind(null, resolvedConfig, coreIntl.formatters) });
};
var IntlProvider2 = function(_super) {
  __extends(IntlProvider3, _super);
  function IntlProvider3() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.cache = createIntlCache();
    _this.state = {
      cache: _this.cache,
      intl: createIntl2(processIntlConfig(_this.props), _this.cache),
      prevConfig: processIntlConfig(_this.props)
    };
    return _this;
  }
  IntlProvider3.getDerivedStateFromProps = function(props, _a3) {
    var prevConfig = _a3.prevConfig, cache = _a3.cache;
    var config = processIntlConfig(props);
    if (!shallowEqual(prevConfig, config)) {
      return {
        intl: createIntl2(config, cache),
        prevConfig: config
      };
    }
    return null;
  };
  IntlProvider3.prototype.render = function() {
    invariantIntlContext(this.state.intl);
    return React52.createElement(Provider, { value: this.state.intl }, this.props.children);
  };
  IntlProvider3.displayName = "IntlProvider";
  IntlProvider3.defaultProps = DEFAULT_INTL_CONFIG2;
  return IntlProvider3;
}(React52.PureComponent);
var provider_default = IntlProvider2;

// ../../node_modules/react-intl/lib/src/components/message.js
var React53 = __toESM(require_react());
function areEqual(prevProps, nextProps) {
  var values = prevProps.values, otherProps = __rest(prevProps, ["values"]);
  var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, ["values"]);
  return shallowEqual(nextValues, values) && shallowEqual(otherProps, nextOtherProps);
}
function FormattedMessage(props) {
  var intl = useIntl();
  var formatMessage3 = intl.formatMessage, _a3 = intl.textComponent, Text2 = _a3 === void 0 ? React53.Fragment : _a3;
  var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text2 : _b, ignoreTag = props.ignoreTag;
  var descriptor = { id, description, defaultMessage };
  var nodes = formatMessage3(descriptor, values, {
    ignoreTag
  });
  if (typeof children === "function") {
    return children(Array.isArray(nodes) ? nodes : [nodes]);
  }
  if (Component) {
    return React53.createElement(Component, null, React53.Children.toArray(nodes));
  }
  return React53.createElement(React53.Fragment, null, nodes);
}
FormattedMessage.displayName = "FormattedMessage";
var MemoizedFormattedMessage = React53.memo(FormattedMessage, areEqual);
MemoizedFormattedMessage.displayName = "MemoizedFormattedMessage";
var message_default = MemoizedFormattedMessage;

// ../../node_modules/react-intl/lib/index.js
var FormattedDate = createFormattedComponent("formatDate");
var FormattedTime = createFormattedComponent("formatTime");
var FormattedNumber = createFormattedComponent("formatNumber");
var FormattedList = createFormattedComponent("formatList");
var FormattedDisplayName = createFormattedComponent("formatDisplayName");
var FormattedDateParts = createFormattedDateTimePartsComponent("formatDate");
var FormattedTimeParts = createFormattedDateTimePartsComponent("formatTime");

// ../../node_modules/@stitches/react/dist/index.mjs
var import_react12 = __toESM(require_react(), 1);
var e2 = "colors";
var t2 = "sizes";
var r2 = "space";
var n = { gap: r2, gridGap: r2, columnGap: r2, gridColumnGap: r2, rowGap: r2, gridRowGap: r2, inset: r2, insetBlock: r2, insetBlockEnd: r2, insetBlockStart: r2, insetInline: r2, insetInlineEnd: r2, insetInlineStart: r2, margin: r2, marginTop: r2, marginRight: r2, marginBottom: r2, marginLeft: r2, marginBlock: r2, marginBlockEnd: r2, marginBlockStart: r2, marginInline: r2, marginInlineEnd: r2, marginInlineStart: r2, padding: r2, paddingTop: r2, paddingRight: r2, paddingBottom: r2, paddingLeft: r2, paddingBlock: r2, paddingBlockEnd: r2, paddingBlockStart: r2, paddingInline: r2, paddingInlineEnd: r2, paddingInlineStart: r2, top: r2, right: r2, bottom: r2, left: r2, scrollMargin: r2, scrollMarginTop: r2, scrollMarginRight: r2, scrollMarginBottom: r2, scrollMarginLeft: r2, scrollMarginX: r2, scrollMarginY: r2, scrollMarginBlock: r2, scrollMarginBlockEnd: r2, scrollMarginBlockStart: r2, scrollMarginInline: r2, scrollMarginInlineEnd: r2, scrollMarginInlineStart: r2, scrollPadding: r2, scrollPaddingTop: r2, scrollPaddingRight: r2, scrollPaddingBottom: r2, scrollPaddingLeft: r2, scrollPaddingX: r2, scrollPaddingY: r2, scrollPaddingBlock: r2, scrollPaddingBlockEnd: r2, scrollPaddingBlockStart: r2, scrollPaddingInline: r2, scrollPaddingInlineEnd: r2, scrollPaddingInlineStart: r2, fontSize: "fontSizes", background: e2, backgroundColor: e2, backgroundImage: e2, borderImage: e2, border: e2, borderBlock: e2, borderBlockEnd: e2, borderBlockStart: e2, borderBottom: e2, borderBottomColor: e2, borderColor: e2, borderInline: e2, borderInlineEnd: e2, borderInlineStart: e2, borderLeft: e2, borderLeftColor: e2, borderRight: e2, borderRightColor: e2, borderTop: e2, borderTopColor: e2, caretColor: e2, color: e2, columnRuleColor: e2, fill: e2, outline: e2, outlineColor: e2, stroke: e2, textDecorationColor: e2, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t2, minBlockSize: t2, maxBlockSize: t2, inlineSize: t2, minInlineSize: t2, maxInlineSize: t2, width: t2, minWidth: t2, maxWidth: t2, height: t2, minHeight: t2, maxHeight: t2, flexBasis: t2, gridTemplateColumns: t2, gridTemplateRows: t2, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
var i = (e13, t12) => typeof t12 == "function" ? { "()": Function.prototype.toString.call(t12) } : t12;
var o = () => {
  const e13 = /* @__PURE__ */ Object.create(null);
  return (t12, r12, ...n6) => {
    const o10 = ((e14) => JSON.stringify(e14, i))(t12);
    return o10 in e13 ? e13[o10] : e13[o10] = r12(t12, ...n6);
  };
};
var l2 = Symbol.for("sxs.internal");
var s = (e13, t12) => Object.defineProperties(e13, Object.getOwnPropertyDescriptors(t12));
var a2 = (e13) => {
  for (const t12 in e13)
    return true;
  return false;
};
var { hasOwnProperty: c } = Object.prototype;
var d2 = (e13) => e13.includes("-") ? e13 : e13.replace(/[A-Z]/g, (e14) => "-" + e14.toLowerCase());
var g = /\s+(?![^()]*\))/;
var p2 = (e13) => (t12) => e13(...typeof t12 == "string" ? String(t12).split(g) : [t12]);
var u = { appearance: (e13) => ({ WebkitAppearance: e13, appearance: e13 }), backfaceVisibility: (e13) => ({ WebkitBackfaceVisibility: e13, backfaceVisibility: e13 }), backdropFilter: (e13) => ({ WebkitBackdropFilter: e13, backdropFilter: e13 }), backgroundClip: (e13) => ({ WebkitBackgroundClip: e13, backgroundClip: e13 }), boxDecorationBreak: (e13) => ({ WebkitBoxDecorationBreak: e13, boxDecorationBreak: e13 }), clipPath: (e13) => ({ WebkitClipPath: e13, clipPath: e13 }), content: (e13) => ({ content: e13.includes('"') || e13.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e13) ? e13 : `"${e13}"` }), hyphens: (e13) => ({ WebkitHyphens: e13, hyphens: e13 }), maskImage: (e13) => ({ WebkitMaskImage: e13, maskImage: e13 }), maskSize: (e13) => ({ WebkitMaskSize: e13, maskSize: e13 }), tabSize: (e13) => ({ MozTabSize: e13, tabSize: e13 }), textSizeAdjust: (e13) => ({ WebkitTextSizeAdjust: e13, textSizeAdjust: e13 }), userSelect: (e13) => ({ WebkitUserSelect: e13, userSelect: e13 }), marginBlock: p2((e13, t12) => ({ marginBlockStart: e13, marginBlockEnd: t12 || e13 })), marginInline: p2((e13, t12) => ({ marginInlineStart: e13, marginInlineEnd: t12 || e13 })), maxSize: p2((e13, t12) => ({ maxBlockSize: e13, maxInlineSize: t12 || e13 })), minSize: p2((e13, t12) => ({ minBlockSize: e13, minInlineSize: t12 || e13 })), paddingBlock: p2((e13, t12) => ({ paddingBlockStart: e13, paddingBlockEnd: t12 || e13 })), paddingInline: p2((e13, t12) => ({ paddingInlineStart: e13, paddingInlineEnd: t12 || e13 })) };
var h2 = /([\d.]+)([^]*)/;
var f = (e13, t12) => e13.length ? e13.reduce((e14, r12) => (e14.push(...t12.map((e15) => e15.includes("&") ? e15.replace(/&/g, /[ +>|~]/.test(r12) && /&.*&/.test(e15) ? `:is(${r12})` : r12) : r12 + " " + e15)), e14), []) : t12;
var m2 = (e13, t12) => e13 in b2 && typeof t12 == "string" ? t12.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t13, r12, n6, i7) => r12 + (n6 === "stretch" ? `-moz-available${i7};${d2(e13)}:${r12}-webkit-fill-available` : `-moz-fit-content${i7};${d2(e13)}:${r12}fit-content`) + i7) : String(t12);
var b2 = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
var S = (e13) => e13 ? e13 + "-" : "";
var k = (e13, t12, r12) => e13.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e14, n6, i7, o10, l8) => o10 == "$" == !!i7 ? e14 : (n6 || o10 == "--" ? "calc(" : "") + "var(--" + (o10 === "$" ? S(t12) + (l8.includes("$") ? "" : S(r12)) + l8.replace(/\$/g, "-") : l8) + ")" + (n6 || o10 == "--" ? "*" + (n6 || "") + (i7 || "1") + ")" : ""));
var y = /\s*,\s*(?![^()]*\))/;
var B2 = Object.prototype.toString;
var $ = (e13, t12, r12, n6, i7) => {
  let o10, l8, s9;
  const a6 = (e14, t13, r13) => {
    let c8, g7;
    const p7 = (e15) => {
      for (c8 in e15) {
        const R7 = c8.charCodeAt(0) === 64, z3 = R7 && Array.isArray(e15[c8]) ? e15[c8] : [e15[c8]];
        for (g7 of z3) {
          const e16 = /[A-Z]/.test($2 = c8) ? $2 : $2.replace(/-[^]/g, (e17) => e17[1].toUpperCase()), z4 = typeof g7 == "object" && g7 && g7.toString === B2 && (!n6.utils[e16] || !t13.length);
          if (e16 in n6.utils && !z4) {
            const t14 = n6.utils[e16];
            if (t14 !== l8) {
              l8 = t14, p7(t14(g7)), l8 = null;
              continue;
            }
          } else if (e16 in u) {
            const t14 = u[e16];
            if (t14 !== s9) {
              s9 = t14, p7(t14(g7)), s9 = null;
              continue;
            }
          }
          if (R7 && (b7 = c8.slice(1) in n6.media ? "@media " + n6.media[c8.slice(1)] : c8, c8 = b7.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e17, t14, r14, n7, i8, o11) => {
            const l9 = h2.test(t14), s10 = 0.0625 * (l9 ? -1 : 1), [a7, c9] = l9 ? [n7, t14] : [t14, n7];
            return "(" + (r14[0] === "=" ? "" : r14[0] === ">" === l9 ? "max-" : "min-") + a7 + ":" + (r14[0] !== "=" && r14.length === 1 ? c9.replace(h2, (e18, t15, n8) => Number(t15) + s10 * (r14 === ">" ? 1 : -1) + n8) : c9) + (i8 ? ") and (" + (i8[0] === ">" ? "min-" : "max-") + a7 + ":" + (i8.length === 1 ? o11.replace(h2, (e18, t15, r15) => Number(t15) + s10 * (i8 === ">" ? -1 : 1) + r15) : o11) : "") + ")";
          })), z4) {
            const e17 = R7 ? r13.concat(c8) : [...r13], n7 = R7 ? [...t13] : f(t13, c8.split(y));
            o10 !== void 0 && i7(x(...o10)), o10 = void 0, a6(g7, n7, e17);
          } else
            o10 === void 0 && (o10 = [[], t13, r13]), c8 = R7 || c8.charCodeAt(0) !== 36 ? c8 : `--${S(n6.prefix)}${c8.slice(1).replace(/\$/g, "-")}`, g7 = z4 ? g7 : typeof g7 == "number" ? g7 && e16 in I2 ? String(g7) + "px" : String(g7) : k(m2(e16, g7 == null ? "" : g7), n6.prefix, n6.themeMap[e16]), o10[0].push(`${R7 ? `${c8} ` : `${d2(c8)}:`}${g7}`);
        }
      }
      var b7, $2;
    };
    p7(e14), o10 !== void 0 && i7(x(...o10)), o10 = void 0;
  };
  a6(e13, t12, r12);
};
var x = (e13, t12, r12) => `${r12.map((e14) => `${e14}{`).join("")}${t12.length ? `${t12.join(",")}{` : ""}${e13.join(";")}${t12.length ? "}" : ""}${Array(r12.length ? r12.length + 1 : 0).join("}")}`;
var I2 = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
var R2 = (e13) => String.fromCharCode(e13 + (e13 > 25 ? 39 : 97));
var z = (e13) => ((e14) => {
  let t12, r12 = "";
  for (t12 = Math.abs(e14); t12 > 52; t12 = t12 / 52 | 0)
    r12 = R2(t12 % 52) + r12;
  return R2(t12 % 52) + r12;
})(((e14, t12) => {
  let r12 = t12.length;
  for (; r12; )
    e14 = 33 * e14 ^ t12.charCodeAt(--r12);
  return e14;
})(5381, JSON.stringify(e13)) >>> 0);
var W2 = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
var j2 = (e13) => {
  if (e13.href && !e13.href.startsWith(location.origin))
    return false;
  try {
    return !!e13.cssRules;
  } catch (e14) {
    return false;
  }
};
var E2 = (e13) => {
  let t12;
  const r12 = () => {
    const { cssRules: e14 } = t12.sheet;
    return [].map.call(e14, (r13, n7) => {
      const { cssText: i7 } = r13;
      let o10 = "";
      if (i7.startsWith("--sxs"))
        return "";
      if (e14[n7 - 1] && (o10 = e14[n7 - 1].cssText).startsWith("--sxs")) {
        if (!r13.cssRules.length)
          return "";
        for (const e15 in t12.rules)
          if (t12.rules[e15].group === r13)
            return `--sxs{--sxs:${[...t12.rules[e15].cache].join(" ")}}${i7}`;
        return r13.cssRules.length ? `${o10}${i7}` : "";
      }
      return i7;
    }).join("");
  }, n6 = () => {
    if (t12) {
      const { rules: e14, sheet: r13 } = t12;
      if (!r13.deleteRule) {
        for (; Object(Object(r13.cssRules)[0]).type === 3; )
          r13.cssRules.splice(0, 1);
        r13.cssRules = [];
      }
      for (const t13 in e14)
        delete e14[t13];
    }
    const i7 = Object(e13).styleSheets || [];
    for (const e14 of i7)
      if (j2(e14)) {
        for (let i8 = 0, o11 = e14.cssRules; o11[i8]; ++i8) {
          const l9 = Object(o11[i8]);
          if (l9.type !== 1)
            continue;
          const s9 = Object(o11[i8 + 1]);
          if (s9.type !== 4)
            continue;
          ++i8;
          const { cssText: a6 } = l9;
          if (!a6.startsWith("--sxs"))
            continue;
          const c8 = a6.slice(14, -3).trim().split(/\s+/), d8 = W2[c8[0]];
          d8 && (t12 || (t12 = { sheet: e14, reset: n6, rules: {}, toString: r12 }), t12.rules[d8] = { group: s9, index: i8, cache: new Set(c8) });
        }
        if (t12)
          break;
      }
    if (!t12) {
      const i8 = (e14, t13) => ({ type: t13, cssRules: [], insertRule(e15, t14) {
        this.cssRules.splice(t14, 0, i8(e15, { import: 3, undefined: 1 }[(e15.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
      }, get cssText() {
        return e14 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e15) => e15.cssText).join("")}}` : e14;
      } });
      t12 = { sheet: e13 ? (e13.head || e13).appendChild(document.createElement("style")).sheet : i8("", "text/css"), rules: {}, reset: n6, toString: r12 };
    }
    const { sheet: o10, rules: l8 } = t12;
    for (let e14 = W2.length - 1; e14 >= 0; --e14) {
      const t13 = W2[e14];
      if (!l8[t13]) {
        const r13 = W2[e14 + 1], n7 = l8[r13] ? l8[r13].index : o10.cssRules.length;
        o10.insertRule("@media{}", n7), o10.insertRule(`--sxs{--sxs:${e14}}`, n7), l8[t13] = { group: o10.cssRules[n7 + 1], index: n7, cache: /* @__PURE__ */ new Set([e14]) };
      }
      v(l8[t13]);
    }
  };
  return n6(), t12;
};
var v = (e13) => {
  const t12 = e13.group;
  let r12 = t12.cssRules.length;
  e13.apply = (e14) => {
    try {
      t12.insertRule(e14, r12), ++r12;
    } catch (e15) {
    }
  };
};
var T2 = Symbol();
var w = o();
var M = (e13, t12) => w(e13, () => (...r12) => {
  let n6 = { type: null, composers: /* @__PURE__ */ new Set() };
  for (const t13 of r12)
    if (t13 != null)
      if (t13[l2]) {
        n6.type == null && (n6.type = t13[l2].type);
        for (const e14 of t13[l2].composers)
          n6.composers.add(e14);
      } else
        t13.constructor !== Object || t13.$$typeof ? n6.type == null && (n6.type = t13) : n6.composers.add(C2(t13, e13));
  return n6.type == null && (n6.type = "span"), n6.composers.size || n6.composers.add(["PJLV", {}, [], [], {}, []]), P(e13, n6, t12);
});
var C2 = (_a3, i7) => {
  var _b = _a3, { variants: e13, compoundVariants: t12, defaultVariants: r12 } = _b, n6 = __objRest(_b, ["variants", "compoundVariants", "defaultVariants"]);
  const o10 = `${S(i7.prefix)}c-${z(n6)}`, l8 = [], s9 = [], d8 = /* @__PURE__ */ Object.create(null), g7 = [];
  for (const e14 in r12)
    d8[e14] = String(r12[e14]);
  if (typeof e13 == "object" && e13)
    for (const t13 in e13) {
      p7 = d8, u5 = t13, c.call(p7, u5) || (d8[t13] = "undefined");
      const r13 = e13[t13];
      for (const e14 in r13) {
        const n7 = { [t13]: String(e14) };
        String(e14) === "undefined" && g7.push(t13);
        const i8 = r13[e14], o11 = [n7, i8, !a2(i8)];
        l8.push(o11);
      }
    }
  var p7, u5;
  if (typeof t12 == "object" && t12)
    for (const e14 of t12) {
      let _a4 = e14, { css: t13 } = _a4, r13 = __objRest(_a4, ["css"]);
      t13 = typeof t13 == "object" && t13 || {};
      for (const e15 in r13)
        r13[e15] = String(r13[e15]);
      const n7 = [r13, t13, !a2(t13)];
      s9.push(n7);
    }
  return [o10, n6, l8, s9, d8, g7];
};
var P = (e13, t12, r12) => {
  const [n6, i7, o10, a6] = L2(t12.composers), c8 = typeof t12.type == "function" || t12.type.$$typeof ? ((e14) => {
    function t13() {
      for (let r13 = 0; r13 < t13[T2].length; r13++) {
        const [n7, i8] = t13[T2][r13];
        e14.rules[n7].apply(i8);
      }
      return t13[T2] = [], null;
    }
    return t13[T2] = [], t13.rules = {}, W2.forEach((e15) => t13.rules[e15] = { apply: (r13) => t13[T2].push([e15, r13]) }), t13;
  })(r12) : null, d8 = (c8 || r12).rules, g7 = `.${n6}${i7.length > 1 ? `:where(.${i7.slice(1).join(".")})` : ""}`, p7 = (l8) => {
    l8 = typeof l8 == "object" && l8 || A;
    const _a3 = l8, { css: s9 } = _a3, p8 = __objRest(_a3, ["css"]), u5 = {};
    for (const e14 in o10)
      if (delete p8[e14], e14 in l8) {
        let t13 = l8[e14];
        typeof t13 == "object" && t13 ? u5[e14] = __spreadValues({ "@initial": o10[e14] }, t13) : (t13 = String(t13), u5[e14] = t13 !== "undefined" || a6.has(e14) ? t13 : o10[e14]);
      } else
        u5[e14] = o10[e14];
    const h6 = /* @__PURE__ */ new Set([...i7]);
    for (const [n7, i8, o11, l9] of t12.composers) {
      r12.rules.styled.cache.has(n7) || (r12.rules.styled.cache.add(n7), $(i8, [`.${n7}`], [], e13, (e14) => {
        d8.styled.apply(e14);
      }));
      const t13 = O(o11, u5, e13.media), s10 = O(l9, u5, e13.media, true);
      for (const i9 of t13)
        if (i9 !== void 0)
          for (const [t14, o12, l10] of i9) {
            const i10 = `${n7}-${z(o12)}-${t14}`;
            h6.add(i10);
            const s11 = (l10 ? r12.rules.resonevar : r12.rules.onevar).cache, a7 = l10 ? d8.resonevar : d8.onevar;
            s11.has(i10) || (s11.add(i10), $(o12, [`.${i10}`], [], e13, (e14) => {
              a7.apply(e14);
            }));
          }
      for (const t14 of s10)
        if (t14 !== void 0)
          for (const [i9, o12] of t14) {
            const t15 = `${n7}-${z(o12)}-${i9}`;
            h6.add(t15), r12.rules.allvar.cache.has(t15) || (r12.rules.allvar.cache.add(t15), $(o12, [`.${t15}`], [], e13, (e14) => {
              d8.allvar.apply(e14);
            }));
          }
    }
    if (typeof s9 == "object" && s9) {
      const t13 = `${n6}-i${z(s9)}-css`;
      h6.add(t13), r12.rules.inline.cache.has(t13) || (r12.rules.inline.cache.add(t13), $(s9, [`.${t13}`], [], e13, (e14) => {
        d8.inline.apply(e14);
      }));
    }
    for (const e14 of String(l8.className || "").trim().split(/\s+/))
      e14 && h6.add(e14);
    const f8 = p8.className = [...h6].join(" ");
    return { type: t12.type, className: f8, selector: g7, props: p8, toString: () => f8, deferredInjector: c8 };
  };
  return s(p7, { className: n6, selector: g7, [l2]: t12, toString: () => (r12.rules.styled.cache.has(n6) || p7(), n6) });
};
var L2 = (e13) => {
  let t12 = "";
  const r12 = [], n6 = {}, i7 = [];
  for (const [o10, , , , l8, s9] of e13) {
    t12 === "" && (t12 = o10), r12.push(o10), i7.push(...s9);
    for (const e14 in l8) {
      const t13 = l8[e14];
      (n6[e14] === void 0 || t13 !== "undefined" || s9.includes(t13)) && (n6[e14] = t13);
    }
  }
  return [t12, r12, n6, new Set(i7)];
};
var O = (e13, t12, r12, n6) => {
  const i7 = [];
  e:
    for (let [o10, l8, s9] of e13) {
      if (s9)
        continue;
      let e14, a6 = 0, c8 = false;
      for (e14 in o10) {
        const n7 = o10[e14];
        let i8 = t12[e14];
        if (i8 !== n7) {
          if (typeof i8 != "object" || !i8)
            continue e;
          {
            let e15, t13, o11 = 0;
            for (const l9 in i8) {
              if (n7 === String(i8[l9])) {
                if (l9 !== "@initial") {
                  const e16 = l9.slice(1);
                  (t13 = t13 || []).push(e16 in r12 ? r12[e16] : l9.replace(/^@media ?/, "")), c8 = true;
                }
                a6 += o11, e15 = true;
              }
              ++o11;
            }
            if (t13 && t13.length && (l8 = { ["@media " + t13.join(", ")]: l8 }), !e15)
              continue e;
          }
        }
      }
      (i7[a6] = i7[a6] || []).push([n6 ? "cv" : `${e14}-${o10[e14]}`, l8, c8]);
    }
  return i7;
};
var A = {};
var N = o();
var D = (e13, t12) => N(e13, () => (...r12) => {
  const n6 = () => {
    for (let n7 of r12) {
      n7 = typeof n7 == "object" && n7 || {};
      let r13 = z(n7);
      if (!t12.rules.global.cache.has(r13)) {
        if (t12.rules.global.cache.add(r13), "@import" in n7) {
          let e14 = [].indexOf.call(t12.sheet.cssRules, t12.rules.themed.group) - 1;
          for (let r14 of [].concat(n7["@import"]))
            r14 = r14.includes('"') || r14.includes("'") ? r14 : `"${r14}"`, t12.sheet.insertRule(`@import ${r14};`, e14++);
          delete n7["@import"];
        }
        $(n7, [], [], e13, (e14) => {
          t12.rules.global.apply(e14);
        });
      }
    }
    return "";
  };
  return s(n6, { toString: n6 });
});
var H3 = o();
var V3 = (e13, t12) => H3(e13, () => (r12) => {
  const n6 = `${S(e13.prefix)}k-${z(r12)}`, i7 = () => {
    if (!t12.rules.global.cache.has(n6)) {
      t12.rules.global.cache.add(n6);
      const i8 = [];
      $(r12, [], [], e13, (e14) => i8.push(e14));
      const o10 = `@keyframes ${n6}{${i8.join("")}}`;
      t12.rules.global.apply(o10);
    }
    return n6;
  };
  return s(i7, { get name() {
    return i7();
  }, toString: i7 });
});
var G = class {
  constructor(e13, t12, r12, n6) {
    this.token = e13 == null ? "" : String(e13), this.value = t12 == null ? "" : String(t12), this.scale = r12 == null ? "" : String(r12), this.prefix = n6 == null ? "" : String(n6);
  }
  get computedValue() {
    return "var(" + this.variable + ")";
  }
  get variable() {
    return "--" + S(this.prefix) + S(this.scale) + this.token;
  }
  toString() {
    return this.computedValue;
  }
};
var F2 = o();
var J2 = (e13, t12) => F2(e13, () => (r12, n6) => {
  n6 = typeof r12 == "object" && r12 || Object(n6);
  const i7 = `.${r12 = (r12 = typeof r12 == "string" ? r12 : "") || `${S(e13.prefix)}t-${z(n6)}`}`, o10 = {}, l8 = [];
  for (const t13 in n6) {
    o10[t13] = {};
    for (const r13 in n6[t13]) {
      const i8 = `--${S(e13.prefix)}${t13}-${r13}`, s10 = k(String(n6[t13][r13]), e13.prefix, t13);
      o10[t13][r13] = new G(r13, s10, t13, e13.prefix), l8.push(`${i8}:${s10}`);
    }
  }
  const s9 = () => {
    if (l8.length && !t12.rules.themed.cache.has(r12)) {
      t12.rules.themed.cache.add(r12);
      const i8 = `${n6 === e13.theme ? ":root," : ""}.${r12}{${l8.join(";")}}`;
      t12.rules.themed.apply(i8);
    }
    return r12;
  };
  return __spreadProps(__spreadValues({}, o10), { get className() {
    return s9();
  }, selector: i7, toString: s9 });
});
var U = o();
var X;
var Y2 = o();
var q = (e13) => {
  const t12 = ((e14) => {
    let t13 = false;
    const r12 = U(e14, (e15) => {
      t13 = true;
      const r13 = "prefix" in (e15 = typeof e15 == "object" && e15 || {}) ? String(e15.prefix) : "", i7 = typeof e15.media == "object" && e15.media || {}, o10 = typeof e15.root == "object" ? e15.root || null : globalThis.document || null, l8 = typeof e15.theme == "object" && e15.theme || {}, s9 = { prefix: r13, media: i7, theme: l8, themeMap: typeof e15.themeMap == "object" && e15.themeMap || __spreadValues({}, n), utils: typeof e15.utils == "object" && e15.utils || {} }, a6 = E2(o10), c8 = { css: M(s9, a6), globalCss: D(s9, a6), keyframes: V3(s9, a6), createTheme: J2(s9, a6), reset() {
        a6.reset(), c8.theme.toString();
      }, theme: {}, sheet: a6, config: s9, prefix: r13, getCssText: a6.toString, toString: a6.toString };
      return String(c8.theme = c8.createTheme(l8)), c8;
    });
    return t13 || r12.reset(), r12;
  })(e13);
  return t12.styled = (({ config: e14, sheet: t13 }) => Y2(e14, () => {
    const r12 = M(e14, t13);
    return (...e15) => {
      const t14 = r12(...e15), n6 = t14[l2].type, i7 = import_react12.default.forwardRef((e16, r13) => {
        const i8 = e16 && e16.as || n6, { props: o10, deferredInjector: l8 } = t14(e16);
        return delete o10.as, o10.ref = r13, l8 ? import_react12.default.createElement(import_react12.default.Fragment, null, import_react12.default.createElement(i8, o10), import_react12.default.createElement(l8, null)) : import_react12.default.createElement(i8, o10);
      });
      return i7.className = t14.className, i7.displayName = `Styled.${n6.displayName || n6.name || n6}`, i7.selector = t14.selector, i7.toString = () => t14.selector, i7[l2] = t14[l2], i7;
    };
  }))(t12), t12;
};
var K = () => X || (X = q());
var re2 = (...e13) => K().styled(...e13);

// ../../node_modules/safari-14-idb-fix/dist/index.js
function idbReady() {
  var isSafari2 = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
  if (!isSafari2 || !indexedDB.databases)
    return Promise.resolve();
  var intervalId;
  return new Promise(function(resolve) {
    var tryIdb = function() {
      return indexedDB.databases().finally(resolve);
    };
    intervalId = setInterval(tryIdb, 100);
    tryIdb();
  }).finally(function() {
    return clearInterval(intervalId);
  });
}
var dist_default = idbReady;

// ../../node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject2) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject2(request.error);
  });
}
function createStore(dbName, storeName) {
  const dbp = dist_default().then(() => {
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    return promisifyRequest(request);
  });
  return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get3(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set4(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}

// ../../packages/tldraw/dist/index.mjs
var React62 = __toESM(require_react(), 1);
var React210 = __toESM(require_react(), 1);
var React60 = __toESM(require_react(), 1);
var React310 = __toESM(require_react(), 1);
var React410 = __toESM(require_react(), 1);
var React510 = __toESM(require_react(), 1);
var React102 = __toESM(require_react(), 1);
var React72 = __toESM(require_react(), 1);
var React82 = __toESM(require_react(), 1);
var React92 = __toESM(require_react(), 1);
var React132 = __toESM(require_react(), 1);
var React112 = __toESM(require_react(), 1);
var React122 = __toESM(require_react(), 1);
var React182 = __toESM(require_react(), 1);
var React152 = __toESM(require_react(), 1);
var React142 = __toESM(require_react(), 1);
var React162 = __toESM(require_react(), 1);
var React172 = __toESM(require_react(), 1);
var React192 = __toESM(require_react(), 1);
var React202 = __toESM(require_react(), 1);
var React212 = __toESM(require_react(), 1);
var React223 = __toESM(require_react(), 1);
var React232 = __toESM(require_react(), 1);
var React242 = __toESM(require_react(), 1);

// ../../node_modules/zustand/esm/vanilla.mjs
function createStore2(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace2 ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}

// ../../node_modules/zustand/esm/index.mjs
var import_react13 = __toESM(require_react(), 1);
function createStore3(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace2 ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react13.useEffect : import_react13.useLayoutEffect;
function create2(createState) {
  const api = typeof createState === "function" ? createStore3(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = (0, import_react13.useReducer)((c8) => c8 + 1, 0);
    const state = api.getState();
    const stateRef = (0, import_react13.useRef)(state);
    const selectorRef = (0, import_react13.useRef)(selector);
    const equalityFnRef = (0, import_react13.useRef)(equalityFn);
    const erroredRef = (0, import_react13.useRef)(false);
    const currentSliceRef = (0, import_react13.useRef)();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = (0, import_react13.useRef)(state);
    useIsomorphicLayoutEffect(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    (0, import_react13.useDebugValue)(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return { value: items.shift(), done };
      }
    };
  };
  return useStore;
}

// ../../packages/tldraw/dist/index.mjs
var React252 = __toESM(require_react(), 1);

// ../../node_modules/hotkeys-js/dist/hotkeys.esm.js
var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
function addEvent(object2, event, method) {
  if (object2.addEventListener) {
    object2.addEventListener(event, method, false);
  } else if (object2.attachEvent) {
    object2.attachEvent("on".concat(event), function() {
      method(window.event);
    });
  }
}
function getMods(modifier, key) {
  var mods = key.slice(0, key.length - 1);
  for (var i7 = 0; i7 < mods.length; i7++) {
    mods[i7] = modifier[mods[i7].toLowerCase()];
  }
  return mods;
}
function getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  var keys = key.split(",");
  var index2 = keys.lastIndexOf("");
  for (; index2 >= 0; ) {
    keys[index2 - 1] += ",";
    keys.splice(index2, 1);
    index2 = keys.lastIndexOf("");
  }
  return keys;
}
function compareArray(a1, a22) {
  var arr1 = a1.length >= a22.length ? a1 : a22;
  var arr2 = a1.length >= a22.length ? a22 : a1;
  var isIndex = true;
  for (var i7 = 0; i7 < arr1.length; i7++) {
    if (arr2.indexOf(arr1[i7]) === -1)
      isIndex = false;
  }
  return isIndex;
}
var _keyMap = {
  backspace: 8,
  tab: 9,
  clear: 12,
  enter: 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  "\u21EA": 20,
  ",": 188,
  ".": 190,
  "/": 191,
  "`": 192,
  "-": isff ? 173 : 189,
  "=": isff ? 61 : 187,
  ";": isff ? 59 : 186,
  "'": 222,
  "[": 219,
  "]": 221,
  "\\": 220
};
var _modifier = {
  "\u21E7": 16,
  shift: 16,
  "\u2325": 18,
  alt: 18,
  option: 18,
  "\u2303": 17,
  ctrl: 17,
  control: 17,
  "\u2318": 91,
  cmd: 91,
  command: 91
};
var modifierMap = {
  16: "shiftKey",
  18: "altKey",
  17: "ctrlKey",
  91: "metaKey",
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
var _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
var _handlers = {};
for (k4 = 1; k4 < 20; k4++) {
  _keyMap["f".concat(k4)] = 111 + k4;
}
var k4;
var _downKeys = [];
var _scope = "all";
var elementHasBindEvent = [];
var code = function code2(x7) {
  return _keyMap[x7.toLowerCase()] || _modifier[x7.toLowerCase()] || x7.toUpperCase().charCodeAt(0);
};
function setScope(scope) {
  _scope = scope || "all";
}
function getScope() {
  return _scope || "all";
}
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function filter(event) {
  var target = event.target || event.srcElement;
  var tagName = target.tagName;
  var flag = true;
  if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
    flag = false;
  }
  return flag;
}
function isPressed(keyCode) {
  if (typeof keyCode === "string") {
    keyCode = code(keyCode);
  }
  return _downKeys.indexOf(keyCode) !== -1;
}
function deleteScope(scope, newScope) {
  var handlers;
  var i7;
  if (!scope)
    scope = getScope();
  for (var key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i7 = 0; i7 < handlers.length; ) {
        if (handlers[i7].scope === scope)
          handlers.splice(i7, 1);
        else
          i7++;
      }
    }
  }
  if (getScope() === scope)
    setScope(newScope || "all");
}
function clearModifier(event) {
  var key = event.keyCode || event.which || event.charCode;
  var i7 = _downKeys.indexOf(key);
  if (i7 >= 0) {
    _downKeys.splice(i7, 1);
  }
  if (event.key && event.key.toLowerCase() === "meta") {
    _downKeys.splice(0, _downKeys.length);
  }
  if (key === 93 || key === 224)
    key = 91;
  if (key in _mods) {
    _mods[key] = false;
    for (var k4 in _modifier) {
      if (_modifier[k4] === key)
        hotkeys[k4] = false;
    }
  }
}
function unbind(keysInfo) {
  if (!keysInfo) {
    Object.keys(_handlers).forEach(function(key) {
      return delete _handlers[key];
    });
  } else if (Array.isArray(keysInfo)) {
    keysInfo.forEach(function(info) {
      if (info.key)
        eachUnbind(info);
    });
  } else if (typeof keysInfo === "object") {
    if (keysInfo.key)
      eachUnbind(keysInfo);
  } else if (typeof keysInfo === "string") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var scope = args[0], method = args[1];
    if (typeof scope === "function") {
      method = scope;
      scope = "";
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: "+"
    });
  }
}
var eachUnbind = function eachUnbind2(_ref) {
  var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
  var multipleKeys = getKeys(key);
  multipleKeys.forEach(function(originKey) {
    var unbindKeys = originKey.split(splitKey);
    var len = unbindKeys.length;
    var lastKey = unbindKeys[len - 1];
    var keyCode = lastKey === "*" ? "*" : code(lastKey);
    if (!_handlers[keyCode])
      return;
    if (!scope)
      scope = getScope();
    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    _handlers[keyCode] = _handlers[keyCode].map(function(record) {
      var isMatchingMethod = method ? record.method === method : true;
      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {
        return {};
      }
      return record;
    });
  });
};
function eventHandler(event, handler, scope) {
  var modifiersMatch;
  if (handler.scope === scope || handler.scope === "all") {
    modifiersMatch = handler.mods.length > 0;
    for (var y4 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y4)) {
        if (!_mods[y4] && handler.mods.indexOf(+y4) > -1 || _mods[y4] && handler.mods.indexOf(+y4) === -1) {
          modifiersMatch = false;
        }
      }
    }
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
      if (handler.method(event, handler) === false) {
        if (event.preventDefault)
          event.preventDefault();
        else
          event.returnValue = false;
        if (event.stopPropagation)
          event.stopPropagation();
        if (event.cancelBubble)
          event.cancelBubble = true;
      }
    }
  }
}
function dispatch(event) {
  var asterisk = _handlers["*"];
  var key = event.keyCode || event.which || event.charCode;
  if (!hotkeys.filter.call(this, event))
    return;
  if (key === 93 || key === 224)
    key = 91;
  if (_downKeys.indexOf(key) === -1 && key !== 229)
    _downKeys.push(key);
  ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
    var keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  if (key in _mods) {
    _mods[key] = true;
    for (var k4 in _modifier) {
      if (_modifier[k4] === key)
        hotkeys[k4] = true;
    }
    if (!asterisk)
      return;
  }
  for (var e13 in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e13)) {
      _mods[e13] = event[modifierMap[e13]];
    }
  }
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }
  var scope = getScope();
  if (asterisk) {
    for (var i7 = 0; i7 < asterisk.length; i7++) {
      if (asterisk[i7].scope === scope && (event.type === "keydown" && asterisk[i7].keydown || event.type === "keyup" && asterisk[i7].keyup)) {
        eventHandler(event, asterisk[i7], scope);
      }
    }
  }
  if (!(key in _handlers))
    return;
  for (var _i = 0; _i < _handlers[key].length; _i++) {
    if (event.type === "keydown" && _handlers[key][_i].keydown || event.type === "keyup" && _handlers[key][_i].keyup) {
      if (_handlers[key][_i].key) {
        var record = _handlers[key][_i];
        var splitKey = record.splitKey;
        var keyShortcut = record.key.split(splitKey);
        var _downKeysCurrent = [];
        for (var a6 = 0; a6 < keyShortcut.length; a6++) {
          _downKeysCurrent.push(code(keyShortcut[a6]));
        }
        if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
          eventHandler(event, record, scope);
        }
      }
    }
  }
}
function isElementBind(element) {
  return elementHasBindEvent.indexOf(element) > -1;
}
function hotkeys(key, option, method) {
  _downKeys = [];
  var keys = getKeys(key);
  var mods = [];
  var scope = "all";
  var element = document;
  var i7 = 0;
  var keyup = false;
  var keydown = true;
  var splitKey = "+";
  if (method === void 0 && typeof option === "function") {
    method = option;
  }
  if (Object.prototype.toString.call(option) === "[object Object]") {
    if (option.scope)
      scope = option.scope;
    if (option.element)
      element = option.element;
    if (option.keyup)
      keyup = option.keyup;
    if (option.keydown !== void 0)
      keydown = option.keydown;
    if (typeof option.splitKey === "string")
      splitKey = option.splitKey;
  }
  if (typeof option === "string")
    scope = option;
  for (; i7 < keys.length; i7++) {
    key = keys[i7].split(splitKey);
    mods = [];
    if (key.length > 1)
      mods = getMods(_modifier, key);
    key = key[key.length - 1];
    key = key === "*" ? "*" : code(key);
    if (!(key in _handlers))
      _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i7],
      method,
      key: keys[i7],
      splitKey
    });
  }
  if (typeof element !== "undefined" && !isElementBind(element) && window) {
    elementHasBindEvent.push(element);
    addEvent(element, "keydown", function(e13) {
      dispatch(e13);
    });
    addEvent(window, "focus", function() {
      _downKeys = [];
    });
    addEvent(element, "keyup", function(e13) {
      dispatch(e13);
      clearModifier(e13);
    });
  }
}
var _api = {
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  isPressed,
  filter,
  unbind
};
for (a6 in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a6)) {
    hotkeys[a6] = _api[a6];
  }
}
var a6;
if (typeof window !== "undefined") {
  _hotkeys = window.hotkeys;
  hotkeys.noConflict = function(deep) {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}
var _hotkeys;
var hotkeys_esm_default = hotkeys;

// ../../node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js
var import_react14 = __toESM(require_react());
hotkeys_esm_default.filter = function() {
  return true;
};
var tagFilter = function tagFilter2(_ref, enableOnTags) {
  var target = _ref.target;
  var targetTagName = target && target.tagName;
  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
};
var isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput2(ev) {
  return tagFilter(ev, ["INPUT", "TEXTAREA", "SELECT"]);
};
function useHotkeys(keys, callback, options2, deps) {
  if (options2 instanceof Array) {
    deps = options2;
    options2 = void 0;
  }
  var _ref2 = options2 || {}, enableOnTags = _ref2.enableOnTags, filter2 = _ref2.filter, keyup = _ref2.keyup, keydown = _ref2.keydown, _ref2$filterPreventDe = _ref2.filterPreventDefault, filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe, _ref2$enabled = _ref2.enabled, enabled = _ref2$enabled === void 0 ? true : _ref2$enabled, _ref2$enableOnContent = _ref2.enableOnContentEditable, enableOnContentEditable = _ref2$enableOnContent === void 0 ? false : _ref2$enableOnContent;
  var ref = (0, import_react14.useRef)(null);
  var memoisedCallback = (0, import_react14.useCallback)(function(keyboardEvent, hotkeysEvent) {
    var _keyboardEvent$target;
    if (filter2 && !filter2(keyboardEvent)) {
      return !filterPreventDefault;
    }
    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags) || (_keyboardEvent$target = keyboardEvent.target) != null && _keyboardEvent$target.isContentEditable && !enableOnContentEditable) {
      return true;
    }
    if (ref.current === null || document.activeElement === ref.current) {
      callback(keyboardEvent, hotkeysEvent);
      return true;
    }
    return false;
  }, deps ? [ref, enableOnTags, filter2].concat(deps) : [ref, enableOnTags, filter2]);
  (0, import_react14.useEffect)(function() {
    if (!enabled) {
      hotkeys_esm_default.unbind(keys, memoisedCallback);
      return;
    }
    if (keyup && keydown !== true) {
      options2.keydown = false;
    }
    hotkeys_esm_default(keys, options2 || {}, memoisedCallback);
    return function() {
      return hotkeys_esm_default.unbind(keys, memoisedCallback);
    };
  }, [memoisedCallback, keys, enabled]);
  return ref;
}
var isHotkeyPressed = hotkeys_esm_default.isPressed;

// ../../packages/tldraw/dist/index.mjs
var React262 = __toESM(require_react(), 1);
var React272 = __toESM(require_react(), 1);
var React282 = __toESM(require_react(), 1);
var React292 = __toESM(require_react(), 1);
var React302 = __toESM(require_react(), 1);
var React68 = __toESM(require_react(), 1);
var React312 = __toESM(require_react(), 1);
var React342 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var o2 = __toESM(require_react());
var useLayoutEffect10 = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? o2.useLayoutEffect : () => {
};

// ../../node_modules/@radix-ui/react-id/dist/index.module.js
var e3 = __toESM(require_react());
var r3 = e3["useId".toString()] || (() => {
});
var n2 = 0;
function useId(o10) {
  const [u5, i7] = e3.useState(r3());
  return useLayoutEffect10(() => {
    o10 || i7((t12) => t12 != null ? t12 : String(n2++));
  }, [o10]), o10 || (u5 ? `radix-${u5}` : "");
}

// ../../node_modules/@radix-ui/react-focus-guards/dist/index.module.js
var e4 = __toESM(require_react());
var t3 = 0;
function useFocusGuards() {
  e4.useEffect(() => {
    var e13, n6;
    const r12 = document.querySelectorAll("[data-radix-focus-guard]");
    return document.body.insertAdjacentElement("afterbegin", (e13 = r12[0]) !== null && e13 !== void 0 ? e13 : o3()), document.body.insertAdjacentElement("beforeend", (n6 = r12[1]) !== null && n6 !== void 0 ? n6 : o3()), t3++, () => {
      t3 === 1 && document.querySelectorAll("[data-radix-focus-guard]").forEach((e14) => e14.remove()), t3--;
    };
  }, []);
}
function o3() {
  const e13 = document.createElement("span");
  return e13.setAttribute("data-radix-focus-guard", ""), e13.tabIndex = 0, e13.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none", e13;
}

// ../../node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
var e5 = __toESM(require_react());
function useCallbackRef(r12) {
  const t12 = e5.useRef(r12);
  return e5.useEffect(() => {
    t12.current = r12;
  }), e5.useMemo(() => (...e13) => {
    var r13;
    return (r13 = t12.current) === null || r13 === void 0 ? void 0 : r13.call(t12, ...e13);
  }, []);
}

// ../../node_modules/@radix-ui/react-use-direction/dist/index.module.js
var e6 = __toESM(require_react());
function useDirection(t12, n6) {
  const [r12, o10] = e6.useState("ltr"), [i7, u5] = e6.useState(), c8 = e6.useRef(0);
  return e6.useEffect(() => {
    if (n6 === void 0 && t12 != null && t12.parentElement) {
      const e13 = getComputedStyle(t12.parentElement);
      u5(e13);
    }
  }, [t12, n6]), e6.useEffect(() => (n6 === void 0 && function e13() {
    c8.current = requestAnimationFrame(() => {
      const t13 = i7 == null ? void 0 : i7.direction;
      t13 && o10(t13), e13();
    });
  }(), () => cancelAnimationFrame(c8.current)), [i7, n6, o10]), n6 || r12;
}

// ../../node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
var t4 = __toESM(require_react());
function useControllableState({ prop: o10, defaultProp: r12, onChange: n6 = () => {
} }) {
  const [a6, u5] = function({ defaultProp: o11, onChange: r13 }) {
    const n7 = t4.useState(o11), [a7] = n7, u6 = t4.useRef(a7), c9 = useCallbackRef(r13);
    return t4.useEffect(() => {
      u6.current !== a7 && (c9(a7), u6.current = a7);
    }, [a7, u6, c9]), n7;
  }({ defaultProp: r12, onChange: n6 }), c8 = o10 !== void 0, f8 = c8 ? o10 : a6, l8 = useCallbackRef(n6);
  return [f8, t4.useCallback((e13) => {
    if (c8) {
      const t12 = e13, r13 = typeof e13 == "function" ? t12(o10) : e13;
      r13 !== o10 && l8(r13);
    } else
      u5(e13);
  }, [c8, o10, u5, l8])];
}

// ../../node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var o4 = __toESM(require_react());
function composeRefs(...o10) {
  return (e13) => o10.forEach((o11) => function(o12, e14) {
    typeof o12 == "function" ? o12(e14) : o12 != null && (o12.current = e14);
  }(o11, e13));
}
function useComposedRefs(...e13) {
  return o4.useCallback(composeRefs(...e13), e13);
}

// ../../node_modules/@radix-ui/react-slot/dist/index.module.js
var t5 = __toESM(require_react());
var Slot = /* @__PURE__ */ t5.forwardRef((e13, o10) => {
  const _a3 = e13, { children: a6 } = _a3, s9 = __objRest(_a3, ["children"]);
  return t5.Children.toArray(a6).some(l3) ? /* @__PURE__ */ t5.createElement(t5.Fragment, null, t5.Children.map(a6, (e14) => l3(e14) ? /* @__PURE__ */ t5.createElement(n3, _extends({}, s9, { ref: o10 }), e14.props.children) : e14)) : /* @__PURE__ */ t5.createElement(n3, _extends({}, s9, { ref: o10 }), a6);
});
Slot.displayName = "Slot";
var n3 = /* @__PURE__ */ t5.forwardRef((r12, n6) => {
  const _a3 = r12, { children: l8 } = _a3, a6 = __objRest(_a3, ["children"]);
  return t5.isValidElement(l8) ? /* @__PURE__ */ t5.cloneElement(l8, __spreadProps(__spreadValues({}, o5(a6, l8.props)), { ref: composeRefs(n6, l8.ref) })) : t5.Children.count(l8) > 1 ? t5.Children.only(null) : null;
});
n3.displayName = "SlotClone";
var Slottable = ({ children: e13 }) => /* @__PURE__ */ t5.createElement(t5.Fragment, null, e13);
function l3(e13) {
  return t5.isValidElement(e13) && e13.type === Slottable;
}
function o5(e13, t12) {
  const r12 = __spreadValues({}, t12);
  for (const n6 in t12) {
    const l8 = e13[n6], o10 = t12[n6];
    /^on[A-Z]/.test(n6) ? r12[n6] = (...e14) => {
      o10 == null || o10(...e14), l8 == null || l8(...e14);
    } : n6 === "style" ? r12[n6] = __spreadValues(__spreadValues({}, l8), o10) : n6 === "className" && (r12[n6] = [l8, o10].filter(Boolean).join(" "));
  }
  return __spreadValues(__spreadValues({}, e13), r12);
}

// ../../node_modules/@radix-ui/react-primitive/dist/index.module.js
var r4 = __toESM(require_react());
var Primitive = ["a", "button", "div", "h2", "h3", "img", "li", "nav", "ol", "p", "span", "svg", "ul"].reduce((o10, i7) => __spreadProps(__spreadValues({}, o10), { [i7]: /* @__PURE__ */ r4.forwardRef((o11, m8) => {
  const _a3 = o11, { asChild: a6 } = _a3, s9 = __objRest(_a3, ["asChild"]), n6 = a6 ? Slot : i7;
  return r4.useEffect(() => {
    window[Symbol.for("radix-ui")] = true;
  }, []), /* @__PURE__ */ r4.createElement(n6, _extends({}, s9, { ref: m8 }));
}) }), {});

// ../../node_modules/@radix-ui/react-context/dist/index.module.js
var e7 = __toESM(require_react());
function createContext5(t12, n6) {
  const o10 = /* @__PURE__ */ e7.createContext(n6);
  function r12(t13) {
    const _a3 = t13, { children: n7 } = _a3, r13 = __objRest(_a3, ["children"]), c8 = e7.useMemo(() => r13, Object.values(r13));
    return e7.createElement(o10.Provider, { value: c8 }, n7);
  }
  return r12.displayName = t12 + "Provider", [r12, function(r13) {
    const c8 = e7.useContext(o10);
    if (c8)
      return c8;
    if (n6 !== void 0)
      return n6;
    throw new Error(`\`${r13}\` must be used within \`${t12}\``);
  }];
}
function createContextScope(n6, o10 = []) {
  let r12 = [];
  const c8 = () => {
    const t12 = r12.map((t13) => /* @__PURE__ */ e7.createContext(t13));
    return function(o11) {
      const r13 = (o11 == null ? void 0 : o11[n6]) || t12;
      return e7.useMemo(() => ({ [`__scope${n6}`]: __spreadProps(__spreadValues({}, o11), { [n6]: r13 }) }), [o11, r13]);
    };
  };
  return c8.scopeName = n6, [function(t12, o11) {
    const c9 = /* @__PURE__ */ e7.createContext(o11), u5 = r12.length;
    function s9(t13) {
      const _a3 = t13, { scope: o12, children: r13 } = _a3, s10 = __objRest(_a3, ["scope", "children"]), i7 = (o12 == null ? void 0 : o12[n6][u5]) || c9, a6 = e7.useMemo(() => s10, Object.values(s10));
      return e7.createElement(i7.Provider, { value: a6 }, r13);
    }
    return r12 = [...r12, o11], s9.displayName = t12 + "Provider", [s9, function(r13, s10) {
      const i7 = (s10 == null ? void 0 : s10[n6][u5]) || c9, a6 = e7.useContext(i7);
      if (a6)
        return a6;
      if (o11 !== void 0)
        return o11;
      throw new Error(`\`${r13}\` must be used within \`${t12}\``);
    }];
  }, t6(c8, ...o10)];
}
function t6(...t12) {
  const n6 = t12[0];
  if (t12.length === 1)
    return n6;
  const o10 = () => {
    const o11 = t12.map((e13) => ({ useScope: e13(), scopeName: e13.scopeName }));
    return function(t13) {
      const r12 = o11.reduce((e13, { useScope: n7, scopeName: o12 }) => __spreadValues(__spreadValues({}, e13), n7(t13)[`__scope${o12}`]), {});
      return e7.useMemo(() => ({ [`__scope${n6.scopeName}`]: r12 }), [r12]);
    };
  };
  return o10.scopeName = n6.scopeName, o10;
}

// ../../node_modules/@radix-ui/react-collection/dist/index.module.js
var import_react15 = __toESM(require_react());
function createCollection(c8) {
  const n6 = c8 + "CollectionProvider", [l8, i7] = createContextScope(n6), [f8, a6] = l8(n6, { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }), u5 = (e13) => {
    const { scope: r12, children: t12 } = e13, c9 = import_react15.default.useRef(null), n7 = import_react15.default.useRef(/* @__PURE__ */ new Map()).current;
    return import_react15.default.createElement(f8, { scope: r12, itemMap: n7, collectionRef: c9 }, t12);
  }, m8 = c8 + "CollectionSlot", s9 = /* @__PURE__ */ import_react15.default.forwardRef((t12, c9) => {
    const { scope: n7, children: l9 } = t12, i8 = a6(m8, n7), f9 = useComposedRefs(c9, i8.collectionRef);
    return import_react15.default.createElement(Slot, { ref: f9 }, l9);
  }), p7 = c8 + "CollectionItemSlot", d8 = "data-radix-collection-item", R7 = /* @__PURE__ */ import_react15.default.forwardRef((t12, c9) => {
    const _a3 = t12, { scope: n7, children: l9 } = _a3, i8 = __objRest(_a3, ["scope", "children"]), f9 = import_react15.default.useRef(null), u6 = useComposedRefs(c9, f9), m9 = a6(p7, n7);
    return import_react15.default.useEffect(() => (m9.itemMap.set(f9, __spreadValues({ ref: f9 }, i8)), () => {
      m9.itemMap.delete(f9);
    })), /* @__PURE__ */ import_react15.default.createElement(Slot, { [d8]: "", ref: u6 }, l9);
  });
  return [{ Provider: u5, Slot: s9, ItemSlot: R7 }, function(e13) {
    const r12 = a6(c8 + "CollectionConsumer", e13);
    return import_react15.default.useCallback(() => {
      const e14 = r12.collectionRef.current;
      if (!e14)
        return [];
      const t12 = Array.from(e14.querySelectorAll(`[${d8}]`));
      return Array.from(r12.itemMap.values()).sort((e15, r13) => t12.indexOf(e15.ref.current) - t12.indexOf(r13.ref.current));
    }, [r12.collectionRef, r12.itemMap]);
  }, i7];
}

// ../../node_modules/@radix-ui/primitive/dist/index.module.js
function composeEventHandlers(e13, n6, { checkForDefaultPrevented: t12 = true } = {}) {
  return function(r12) {
    if (e13 == null || e13(r12), t12 === false || !r12.defaultPrevented)
      return n6 == null ? void 0 : n6(r12);
  };
}

// ../../node_modules/@radix-ui/react-roving-focus/dist/index.module.js
var s2 = __toESM(require_react());
var f2 = { bubbles: false, cancelable: true };
var [p3, l4, m3] = createCollection("RovingFocusGroup");
var [d3, v2] = createContextScope("RovingFocusGroup", [m3]);
var [g2, F3] = d3("RovingFocusGroup");
var RovingFocusGroup = /* @__PURE__ */ s2.forwardRef((e13, o10) => /* @__PURE__ */ s2.createElement(p3.Provider, { scope: e13.__scopeRovingFocusGroup }, /* @__PURE__ */ s2.createElement(p3.Slot, { scope: e13.__scopeRovingFocusGroup }, /* @__PURE__ */ s2.createElement(w2, _extends({}, e13, { ref: o10 })))));
var w2 = /* @__PURE__ */ s2.forwardRef((t12, n6) => {
  const _a3 = t12, { __scopeRovingFocusGroup: c8, orientation: p7, dir: m8 = "ltr", loop: d8 = false, currentTabStopId: v6, defaultCurrentTabStopId: F6, onCurrentTabStopIdChange: w7, onEntryFocus: b7 } = _a3, x7 = __objRest(_a3, ["__scopeRovingFocusGroup", "orientation", "dir", "loop", "currentTabStopId", "defaultCurrentTabStopId", "onCurrentTabStopIdChange", "onEntryFocus"]), E7 = s2.useRef(null), I4 = useComposedRefs(n6, E7), [G3 = null, h6] = useControllableState({ prop: v6, defaultProp: F6, onChange: w7 }), [T5, A4] = s2.useState(false), y4 = useCallbackRef(b7), D5 = l4(c8), S3 = s2.useRef(false);
  return s2.useEffect(() => {
    const e13 = E7.current;
    if (e13)
      return e13.addEventListener("rovingFocusGroup.onEntryFocus", y4), () => e13.removeEventListener("rovingFocusGroup.onEntryFocus", y4);
  }, [y4]), /* @__PURE__ */ s2.createElement(g2, { scope: c8, orientation: p7, dir: m8, loop: d8, currentTabStopId: G3, onItemFocus: s2.useCallback((e13) => h6(e13), [h6]), onItemShiftTab: s2.useCallback(() => A4(true), []) }, /* @__PURE__ */ s2.createElement(Primitive.div, _extends({ tabIndex: T5 ? -1 : 0, "data-orientation": p7 }, x7, { ref: I4, style: __spreadValues({ outline: "none" }, t12.style), onMouseDown: composeEventHandlers(t12.onMouseDown, () => {
    S3.current = true;
  }), onFocus: composeEventHandlers(t12.onFocus, (e13) => {
    const o10 = !S3.current;
    if (e13.target === e13.currentTarget && o10 && !T5) {
      const o11 = new Event("rovingFocusGroup.onEntryFocus", f2);
      if (e13.currentTarget.dispatchEvent(o11), !o11.defaultPrevented) {
        const e14 = D5().filter((e15) => e15.focusable);
        R3([e14.find((e15) => e15.active), e14.find((e15) => e15.id === G3), ...e14].filter(Boolean).map((e15) => e15.ref.current));
      }
    }
    S3.current = false;
  }), onBlur: composeEventHandlers(t12.onBlur, () => A4(false)) })));
});
var RovingFocusGroupItem = /* @__PURE__ */ s2.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeRovingFocusGroup: n6, focusable: i7 = true, active: c8 = false } = _a3, f8 = __objRest(_a3, ["__scopeRovingFocusGroup", "focusable", "active"]), m8 = useId(), d8 = F3("RovingFocusGroupItem", n6), v6 = d8.currentTabStopId === m8, g7 = l4(n6);
  return s2.createElement(p3.ItemSlot, { scope: n6, id: m8, focusable: i7, active: c8 }, /* @__PURE__ */ s2.createElement(Primitive.span, _extends({ tabIndex: v6 ? 0 : -1, "data-orientation": d8.orientation }, f8, { ref: o10, onMouseDown: composeEventHandlers(e13.onMouseDown, (e14) => {
    i7 ? d8.onItemFocus(m8) : e14.preventDefault();
  }), onFocus: composeEventHandlers(e13.onFocus, () => d8.onItemFocus(m8)), onKeyDown: composeEventHandlers(e13.onKeyDown, (e14) => {
    if (e14.key === "Tab" && e14.shiftKey)
      return void d8.onItemShiftTab();
    if (e14.target !== e14.currentTarget)
      return;
    const o11 = function(e15, o12, r13) {
      const t13 = function(e16, o13) {
        return o13 !== "rtl" ? e16 : e16 === "ArrowLeft" ? "ArrowRight" : e16 === "ArrowRight" ? "ArrowLeft" : e16;
      }(e15.key, r13);
      return o12 === "vertical" && ["ArrowLeft", "ArrowRight"].includes(t13) || o12 === "horizontal" && ["ArrowUp", "ArrowDown"].includes(t13) ? void 0 : b3[t13];
    }(e14, d8.orientation, d8.dir);
    if (o11 !== void 0) {
      e14.preventDefault();
      let n7 = g7().filter((e15) => e15.focusable).map((e15) => e15.ref.current);
      if (o11 === "last")
        n7.reverse();
      else if (o11 === "prev" || o11 === "next") {
        o11 === "prev" && n7.reverse();
        const i8 = n7.indexOf(e14.currentTarget);
        n7 = d8.loop ? (t12 = i8 + 1, (r12 = n7).map((e15, o12) => r12[(t12 + o12) % r12.length])) : n7.slice(i8 + 1);
      }
      setTimeout(() => R3(n7));
    }
    var r12, t12;
  }) })));
});
var b3 = { ArrowLeft: "prev", ArrowUp: "prev", ArrowRight: "next", ArrowDown: "next", PageUp: "first", Home: "first", PageDown: "last", End: "last" };
function R3(e13) {
  const o10 = document.activeElement;
  for (const r12 of e13) {
    if (r12 === o10)
      return;
    if (r12.focus(), document.activeElement !== o10)
      return;
  }
}
var Root = RovingFocusGroup;
var Item = RovingFocusGroupItem;

// ../../node_modules/@radix-ui/react-portal/dist/index.module.js
var import_react_dom2 = __toESM(require_react_dom());
var r5 = __toESM(require_react());
var Portal = /* @__PURE__ */ r5.forwardRef((a6, i7) => {
  var n6, d8;
  const _a3 = a6, { containerRef: s9, style: u5 } = _a3, c8 = __objRest(_a3, ["containerRef", "style"]), m8 = (n6 = s9 == null ? void 0 : s9.current) !== null && n6 !== void 0 ? n6 : globalThis === null || globalThis === void 0 || (d8 = globalThis.document) === null || d8 === void 0 ? void 0 : d8.body, [, f8] = r5.useState({});
  return useLayoutEffect10(() => {
    f8({});
  }, []), m8 ? /* @__PURE__ */ import_react_dom2.default.createPortal(/* @__PURE__ */ r5.createElement(Primitive.div, _extends({ "data-radix-portal": "" }, c8, { ref: i7, style: m8 === document.body ? __spreadValues({ position: "absolute", top: 0, left: 0, zIndex: 2147483647 }, u5) : void 0 })), m8) : null;
});
var UnstablePortal = /* @__PURE__ */ r5.forwardRef((t12, a6) => {
  var i7;
  const _a3 = t12, { container: n6 = globalThis === null || globalThis === void 0 || (i7 = globalThis.document) === null || i7 === void 0 ? void 0 : i7.body } = _a3, d8 = __objRest(_a3, ["container"]);
  return n6 ? /* @__PURE__ */ import_react_dom2.default.createPortal(/* @__PURE__ */ r5.createElement(Primitive.div, _extends({}, d8, { ref: a6 })), n6) : null;
});

// ../../node_modules/@radix-ui/react-arrow/dist/index.module.js
var r6 = __toESM(require_react());
var Arrow = /* @__PURE__ */ r6.forwardRef((o10, i7) => {
  const _a3 = o10, { children: n6, width: s9 = 10, height: m8 = 5 } = _a3, p7 = __objRest(_a3, ["children", "width", "height"]);
  return r6.createElement(Primitive.svg, _extends({}, p7, { ref: i7, width: s9, height: m8, viewBox: "0 0 30 10", preserveAspectRatio: "none" }), o10.asChild ? n6 : /* @__PURE__ */ r6.createElement("polygon", { points: "0,0 30,0 15,10" }));
});
var Root2 = Arrow;

// ../../node_modules/@radix-ui/react-use-size/dist/index.module.js
var e9 = __toESM(require_react());
function useSize(r12) {
  const [i7, t12] = e9.useState(void 0);
  return e9.useEffect(() => {
    if (r12) {
      const e13 = new ResizeObserver((e14) => {
        if (!Array.isArray(e14))
          return;
        if (!e14.length)
          return;
        const i8 = e14[0];
        let o10, n6;
        if ("borderBoxSize" in i8) {
          const e15 = i8.borderBoxSize, r13 = Array.isArray(e15) ? e15[0] : e15;
          o10 = r13.inlineSize, n6 = r13.blockSize;
        } else {
          const e15 = r12.getBoundingClientRect();
          o10 = e15.width, n6 = e15.height;
        }
        t12({ width: o10, height: n6 });
      });
      return e13.observe(r12, { box: "border-box" }), () => e13.unobserve(r12);
    }
    t12(void 0);
  }, [r12]), i7;
}

// ../../node_modules/@radix-ui/rect/dist/index.module.js
function observeElementRect(n6, o10) {
  const i7 = e10.get(n6);
  return i7 === void 0 ? (e10.set(n6, { rect: {}, callbacks: [o10] }), e10.size === 1 && (t7 = requestAnimationFrame(c2))) : (i7.callbacks.push(o10), o10(n6.getBoundingClientRect())), () => {
    const c8 = e10.get(n6);
    if (c8 === void 0)
      return;
    const i8 = c8.callbacks.indexOf(o10);
    i8 > -1 && c8.callbacks.splice(i8, 1), c8.callbacks.length === 0 && (e10.delete(n6), e10.size === 0 && cancelAnimationFrame(t7));
  };
}
var t7;
var e10 = /* @__PURE__ */ new Map();
function c2() {
  const n6 = [];
  e10.forEach((t12, e13) => {
    const c8 = e13.getBoundingClientRect();
    var o10, i7;
    o10 = t12.rect, i7 = c8, (o10.width !== i7.width || o10.height !== i7.height || o10.top !== i7.top || o10.right !== i7.right || o10.bottom !== i7.bottom || o10.left !== i7.left) && (t12.rect = c8, n6.push(t12));
  }), n6.forEach((t12) => {
    t12.callbacks.forEach((e13) => e13(t12.rect));
  }), t7 = requestAnimationFrame(c2);
}

// ../../node_modules/@radix-ui/react-use-rect/dist/index.module.js
var r7 = __toESM(require_react());
function useRect(e13) {
  const [o10, c8] = r7.useState();
  return r7.useEffect(() => {
    if (e13) {
      const r12 = observeElementRect(e13, c8);
      return () => {
        c8(void 0), r12();
      };
    }
  }, [e13]), o10;
}

// ../../node_modules/@radix-ui/popper/dist/index.module.js
function getPlacementData({ anchorRect: p7, popperSize: c8, arrowSize: f8, arrowOffset: l8 = 0, side: d8, sideOffset: h6 = 0, align: x7, alignOffset: g7 = 0, shouldAvoidCollisions: u5 = true, collisionBoundariesRect: w7, collisionTolerance: m8 = 0 }) {
  if (!p7 || !c8 || !w7)
    return { popperStyles: o7, arrowStyles: n4 };
  const y4 = function(e13, r12, o10 = 0, n6 = 0, i7) {
    const p8 = i7 ? i7.height : 0, a6 = t8(r12, e13, "x"), s9 = t8(r12, e13, "y"), c9 = s9.before - o10 - p8, f9 = s9.after + o10 + p8, l9 = a6.before - o10 - p8, d9 = a6.after + o10 + p8;
    return { top: { start: { x: a6.start + n6, y: c9 }, center: { x: a6.center, y: c9 }, end: { x: a6.end - n6, y: c9 } }, right: { start: { x: d9, y: s9.start + n6 }, center: { x: d9, y: s9.center }, end: { x: d9, y: s9.end - n6 } }, bottom: { start: { x: a6.start + n6, y: f9 }, center: { x: a6.center, y: f9 }, end: { x: a6.end - n6, y: f9 } }, left: { start: { x: l9, y: s9.start + n6 }, center: { x: l9, y: s9.center }, end: { x: l9, y: s9.end - n6 } } };
  }(c8, p7, h6, g7, f8), b7 = y4[d8][x7];
  if (u5 === false) {
    const t12 = e11(b7);
    let o10 = n4;
    f8 && (o10 = i2({ popperSize: c8, arrowSize: f8, arrowOffset: l8, side: d8, align: x7 }));
    return { popperStyles: __spreadProps(__spreadValues({}, t12), { "--radix-popper-transform-origin": r8(c8, d8, x7, l8, f8) }), arrowStyles: o10, placedSide: d8, placedAlign: x7 };
  }
  const S3 = DOMRect.fromRect(__spreadValues(__spreadValues({}, c8), b7)), $2 = (O5 = w7, z3 = m8, DOMRect.fromRect({ width: O5.width - 2 * z3, height: O5.height - 2 * z3, x: O5.left + z3, y: O5.top + z3 }));
  var O5, z3;
  const R7 = s3(S3, $2), M3 = y4[a3(d8)][x7], D5 = function(t12, e13, r12) {
    const o10 = a3(t12);
    return e13[t12] && !r12[o10] ? o10 : t12;
  }(d8, R7, s3(DOMRect.fromRect(__spreadValues(__spreadValues({}, c8), M3)), $2)), A4 = function(t12, e13, r12, o10, n6) {
    const i7 = r12 === "top" || r12 === "bottom", p8 = i7 ? "left" : "top", a6 = i7 ? "right" : "bottom", s9 = i7 ? "width" : "height", c9 = e13[s9] > t12[s9];
    if ((o10 === "start" || o10 === "center") && (n6[p8] && c9 || n6[a6] && !c9))
      return "end";
    if ((o10 === "end" || o10 === "center") && (n6[a6] && c9 || n6[p8] && !c9))
      return "start";
    return o10;
  }(c8, p7, d8, x7, R7), I4 = e11(y4[D5][A4]);
  let C6 = n4;
  f8 && (C6 = i2({ popperSize: c8, arrowSize: f8, arrowOffset: l8, side: D5, align: A4 }));
  return { popperStyles: __spreadProps(__spreadValues({}, I4), { "--radix-popper-transform-origin": r8(c8, D5, A4, l8, f8) }), arrowStyles: C6, placedSide: D5, placedAlign: A4 };
}
function t8(t12, e13, r12) {
  const o10 = t12[r12 === "x" ? "left" : "top"], n6 = r12 === "x" ? "width" : "height", i7 = t12[n6], p7 = e13[n6];
  return { before: o10 - p7, start: o10, center: o10 + (i7 - p7) / 2, end: o10 + i7 - p7, after: o10 + i7 };
}
function e11(t12) {
  return { position: "absolute", top: 0, left: 0, minWidth: "max-content", willChange: "transform", transform: `translate3d(${Math.round(t12.x + window.scrollX)}px, ${Math.round(t12.y + window.scrollY)}px, 0)` };
}
function r8(t12, e13, r12, o10, n6) {
  const i7 = e13 === "top" || e13 === "bottom", p7 = n6 ? n6.width : 0, a6 = n6 ? n6.height : 0, s9 = p7 / 2 + o10;
  let c8 = "", f8 = "";
  return i7 ? (c8 = { start: `${s9}px`, center: "center", end: t12.width - s9 + "px" }[r12], f8 = e13 === "top" ? `${t12.height + a6}px` : -a6 + "px") : (c8 = e13 === "left" ? `${t12.width + a6}px` : -a6 + "px", f8 = { start: `${s9}px`, center: "center", end: t12.height - s9 + "px" }[r12]), `${c8} ${f8}`;
}
var o7 = { position: "fixed", top: 0, left: 0, opacity: 0, transform: "translate3d(0, -200%, 0)" };
var n4 = { position: "absolute", opacity: 0 };
function i2({ popperSize: t12, arrowSize: e13, arrowOffset: r12, side: o10, align: n6 }) {
  const i7 = (t12.width - e13.width) / 2, a6 = (t12.height - e13.width) / 2, s9 = { top: 0, right: 90, bottom: 180, left: -90 }[o10], c8 = Math.max(e13.width, e13.height), f8 = { width: `${c8}px`, height: `${c8}px`, transform: `rotate(${s9}deg)`, willChange: "transform", position: "absolute", [o10]: "100%", direction: p4(o10, n6) };
  return o10 !== "top" && o10 !== "bottom" || (n6 === "start" && (f8.left = `${r12}px`), n6 === "center" && (f8.left = `${i7}px`), n6 === "end" && (f8.right = `${r12}px`)), o10 !== "left" && o10 !== "right" || (n6 === "start" && (f8.top = `${r12}px`), n6 === "center" && (f8.top = `${a6}px`), n6 === "end" && (f8.bottom = `${r12}px`)), f8;
}
function p4(t12, e13) {
  return (t12 !== "top" && t12 !== "right" || e13 !== "end") && (t12 !== "bottom" && t12 !== "left" || e13 === "end") ? "ltr" : "rtl";
}
function a3(t12) {
  return { top: "bottom", right: "left", bottom: "top", left: "right" }[t12];
}
function s3(t12, e13) {
  return { top: t12.top < e13.top, right: t12.right > e13.right, bottom: t12.bottom > e13.bottom, left: t12.left < e13.left };
}

// ../../node_modules/@radix-ui/react-popper/dist/index.module.js
var s4 = __toESM(require_react());
var [c3, l5] = createContextScope("Popper");
var [f3, d4] = c3("Popper");
var Popper = (e13) => {
  const { __scopePopper: o10, children: r12 } = e13, [t12, n6] = s4.useState(null);
  return s4.createElement(f3, { scope: o10, anchor: t12, onAnchorChange: n6 }, r12);
};
var PopperAnchor = /* @__PURE__ */ s4.forwardRef((e13, r12) => {
  const _a3 = e13, { __scopePopper: t12, virtualRef: n6 } = _a3, p7 = __objRest(_a3, ["__scopePopper", "virtualRef"]), c8 = d4("PopperAnchor", t12), l8 = s4.useRef(null), f8 = useComposedRefs(r12, l8);
  return s4.useEffect(() => {
    c8.onAnchorChange((n6 == null ? void 0 : n6.current) || l8.current);
  }), n6 ? null : /* @__PURE__ */ s4.createElement(Primitive.div, _extends({}, p7, { ref: f8 }));
});
var [u2, m4] = c3("PopperContent");
var PopperContent = /* @__PURE__ */ s4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopePopper: c8, side: l8 = "bottom", sideOffset: f8, align: m8 = "center", alignOffset: w7, collisionTolerance: h6, avoidCollisions: x7 = true } = _a3, v6 = __objRest(_a3, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "collisionTolerance", "avoidCollisions"]), P3 = d4("PopperContent", c8), [A4, g7] = s4.useState(), E7 = useRect(P3.anchor), [y4, C6] = s4.useState(null), S3 = useSize(y4), [R7, O5] = s4.useState(null), _4 = useSize(R7), b7 = useComposedRefs(n6, (e14) => C6(e14)), z3 = function() {
    const [e14, o10] = s4.useState(void 0);
    return s4.useEffect(() => {
      let e15;
      function r12() {
        o10({ width: window.innerWidth, height: window.innerHeight });
      }
      function t12() {
        window.clearTimeout(e15), e15 = window.setTimeout(r12, 100);
      }
      return r12(), window.addEventListener("resize", t12), () => window.removeEventListener("resize", t12);
    }, []), e14;
  }(), T5 = z3 ? DOMRect.fromRect(__spreadProps(__spreadValues({}, z3), { x: 0, y: 0 })) : void 0, { popperStyles: k4, arrowStyles: L4, placedSide: B4, placedAlign: D5 } = getPlacementData({ anchorRect: E7, popperSize: S3, arrowSize: _4, arrowOffset: A4, side: l8, sideOffset: f8, align: m8, alignOffset: w7, shouldAvoidCollisions: x7, collisionBoundariesRect: T5, collisionTolerance: h6 }), H5 = B4 !== void 0;
  return s4.createElement("div", { style: k4, "data-radix-popper-content-wrapper": "" }, /* @__PURE__ */ s4.createElement(u2, { scope: c8, arrowStyles: L4, onArrowChange: O5, onArrowOffsetChange: g7 }, /* @__PURE__ */ s4.createElement(Primitive.div, _extends({ "data-side": B4, "data-align": D5 }, v6, { style: __spreadProps(__spreadValues({}, v6.style), { animation: H5 ? void 0 : "none" }), ref: b7 }))));
});
var PopperArrow = /* @__PURE__ */ s4.forwardRef(function(o10, r12) {
  const _a3 = o10, { __scopePopper: t12, offset: n6 } = _a3, i7 = __objRest(_a3, ["__scopePopper", "offset"]), p7 = m4("PopperArrow", t12), { onArrowOffsetChange: c8 } = p7;
  return s4.useEffect(() => c8(n6), [c8, n6]), /* @__PURE__ */ s4.createElement("span", { style: __spreadProps(__spreadValues({}, p7.arrowStyles), { pointerEvents: "none" }) }, /* @__PURE__ */ s4.createElement("span", { ref: p7.onArrowChange, style: { display: "inline-block", verticalAlign: "top", pointerEvents: "auto" } }, /* @__PURE__ */ s4.createElement(Root2, _extends({}, i7, { ref: r12, style: __spreadProps(__spreadValues({}, i7.style), { display: "block" }) }))));
});
var Root3 = Popper;
var Anchor = PopperAnchor;
var Content = PopperContent;
var Arrow2 = PopperArrow;

// ../../node_modules/@radix-ui/react-presence/dist/index.module.js
var t9 = __toESM(require_react());
var Presence = (u5) => {
  const { present: o10, children: i7 } = u5, s9 = function(n6) {
    const [u6, o11] = t9.useState(), i8 = t9.useRef({}), s10 = t9.useRef(n6), c9 = t9.useRef("none"), a7 = n6 ? "mounted" : "unmounted", [d8, m8] = function(e13, n7) {
      return t9.useReducer((e14, t12) => {
        const r12 = n7[e14][t12];
        return r12 != null ? r12 : e14;
      }, e13);
    }(a7, { mounted: { UNMOUNT: "unmounted", ANIMATION_OUT: "unmountSuspended" }, unmountSuspended: { MOUNT: "mounted", ANIMATION_END: "unmounted" }, unmounted: { MOUNT: "mounted" } });
    return t9.useEffect(() => {
      const e13 = r9(i8.current);
      c9.current = d8 === "mounted" ? e13 : "none";
    }, [d8]), useLayoutEffect10(() => {
      const e13 = i8.current, t12 = s10.current;
      if (t12 !== n6) {
        const u7 = c9.current, o12 = r9(e13);
        if (n6)
          m8("MOUNT");
        else if (o12 === "none" || (e13 == null ? void 0 : e13.display) === "none")
          m8("UNMOUNT");
        else {
          const e14 = u7 !== o12;
          m8(t12 && e14 ? "ANIMATION_OUT" : "UNMOUNT");
        }
        s10.current = n6;
      }
    }, [n6, m8]), useLayoutEffect10(() => {
      if (u6) {
        const e13 = (e14) => {
          const n8 = r9(i8.current).includes(e14.animationName);
          e14.target === u6 && n8 && m8("ANIMATION_END");
        }, n7 = (e14) => {
          e14.target === u6 && (c9.current = r9(i8.current));
        };
        return u6.addEventListener("animationstart", n7), u6.addEventListener("animationcancel", e13), u6.addEventListener("animationend", e13), () => {
          u6.removeEventListener("animationstart", n7), u6.removeEventListener("animationcancel", e13), u6.removeEventListener("animationend", e13);
        };
      }
      m8("ANIMATION_END");
    }, [u6, m8]), { isPresent: ["mounted", "unmountSuspended"].includes(d8), ref: t9.useCallback((e13) => {
      e13 && (i8.current = getComputedStyle(e13)), o11(e13);
    }, []) };
  }(o10), c8 = typeof i7 == "function" ? i7({ present: s9.isPresent }) : t9.Children.only(i7), a6 = useComposedRefs(s9.ref, c8.ref);
  return typeof i7 == "function" || s9.isPresent ? /* @__PURE__ */ t9.cloneElement(c8, { ref: a6 }) : null;
};
function r9(e13) {
  return (e13 == null ? void 0 : e13.animationName) || "none";
}
Presence.displayName = "Presence";

// ../../node_modules/@radix-ui/react-focus-scope/dist/index.module.js
var o8 = __toESM(require_react());
var c4 = { bubbles: false, cancelable: true };
var FocusScope = /* @__PURE__ */ o8.forwardRef((i7, f8) => {
  const _a3 = i7, { loop: l8 = false, trapped: m8 = false, onMountAutoFocus: p7, onUnmountAutoFocus: v6 } = _a3, E7 = __objRest(_a3, ["loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus"]), [F6, S3] = o8.useState(null), b7 = useCallbackRef(p7), T5 = useCallbackRef(v6), y4 = o8.useRef(null), L4 = useComposedRefs(f8, (e13) => S3(e13)), h6 = o8.useRef({ paused: false, pause() {
    this.paused = true;
  }, resume() {
    this.paused = false;
  } }).current;
  o8.useEffect(() => {
    if (m8) {
      let e13 = function(e14) {
        if (h6.paused || !F6)
          return;
        const t13 = e14.target;
        F6.contains(t13) ? y4.current = t13 : a4(y4.current, { select: true });
      }, t12 = function(e14) {
        !h6.paused && F6 && (F6.contains(e14.relatedTarget) || a4(y4.current, { select: true }));
      };
      return document.addEventListener("focusin", e13), document.addEventListener("focusout", t12), () => {
        document.removeEventListener("focusin", e13), document.removeEventListener("focusout", t12);
      };
    }
  }, [m8, F6, h6.paused]), o8.useEffect(() => {
    if (F6) {
      d5.add(h6);
      const t12 = document.activeElement;
      if (!F6.contains(t12)) {
        const n6 = new Event("focusScope.autoFocusOnMount", c4);
        F6.addEventListener("focusScope.autoFocusOnMount", b7), F6.dispatchEvent(n6), n6.defaultPrevented || (!function(e14, { select: t13 = false } = {}) {
          const n7 = document.activeElement;
          for (const o10 of e14)
            if (a4(o10, { select: t13 }), document.activeElement !== n7)
              return;
        }((e13 = r10(F6), e13.filter((e14) => e14.tagName !== "A")), { select: true }), document.activeElement === t12 && a4(F6));
      }
      return () => {
        F6.removeEventListener("focusScope.autoFocusOnMount", b7), setTimeout(() => {
          const e14 = new Event("focusScope.autoFocusOnUnmount", c4);
          F6.addEventListener("focusScope.autoFocusOnUnmount", T5), F6.dispatchEvent(e14), e14.defaultPrevented || a4(t12 != null ? t12 : document.body, { select: true }), F6.removeEventListener("focusScope.autoFocusOnUnmount", T5), d5.remove(h6);
        }, 0);
      };
    }
    var e13;
  }, [F6, b7, T5, h6]);
  const N2 = o8.useCallback((e13) => {
    if (!l8 && !m8)
      return;
    if (h6.paused)
      return;
    const t12 = e13.key === "Tab" && !e13.altKey && !e13.ctrlKey && !e13.metaKey, n6 = document.activeElement;
    if (t12 && n6) {
      const t13 = e13.currentTarget, [o10, u5] = function(e14) {
        const t14 = r10(e14), n7 = s5(t14, e14), o11 = s5(t14.reverse(), e14);
        return [n7, o11];
      }(t13);
      o10 && u5 ? e13.shiftKey || n6 !== u5 ? e13.shiftKey && n6 === o10 && (e13.preventDefault(), l8 && a4(u5, { select: true })) : (e13.preventDefault(), l8 && a4(o10, { select: true })) : n6 === t13 && e13.preventDefault();
    }
  }, [l8, m8, h6.paused]);
  return o8.createElement(Primitive.div, _extends({ tabIndex: -1 }, E7, { ref: L4, onKeyDown: N2 }));
});
function r10(e13) {
  const t12 = [], n6 = document.createTreeWalker(e13, NodeFilter.SHOW_ELEMENT, { acceptNode: (e14) => {
    const t13 = e14.tagName === "INPUT" && e14.type === "hidden";
    return e14.disabled || e14.hidden || t13 ? NodeFilter.FILTER_SKIP : e14.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
  } });
  for (; n6.nextNode(); )
    t12.push(n6.currentNode);
  return t12;
}
function s5(e13, t12) {
  for (const n6 of e13)
    if (!i3(n6, { upTo: t12 }))
      return n6;
}
function i3(e13, { upTo: t12 }) {
  if (getComputedStyle(e13).visibility === "hidden")
    return true;
  for (; e13; ) {
    if (t12 !== void 0 && e13 === t12)
      return false;
    if (getComputedStyle(e13).display === "none")
      return true;
    e13 = e13.parentElement;
  }
  return false;
}
function a4(e13, { select: t12 = false } = {}) {
  if (e13 && e13.focus) {
    const n6 = document.activeElement;
    e13.focus({ preventScroll: true }), e13 !== n6 && function(e14) {
      return e14 instanceof HTMLInputElement && "select" in e14;
    }(e13) && t12 && e13.select();
  }
}
var d5 = function() {
  let e13 = [];
  return { add(t12) {
    const n6 = e13[0];
    t12 !== n6 && (n6 == null || n6.pause()), e13 = f4(e13, t12), e13.unshift(t12);
  }, remove(t12) {
    var n6;
    e13 = f4(e13, t12), (n6 = e13[0]) === null || n6 === void 0 || n6.resume();
  } };
}();
function f4(e13, t12) {
  const n6 = [...e13], o10 = n6.indexOf(t12);
  return o10 !== -1 && n6.splice(o10, 1), n6;
}

// ../../node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
var t10 = __toESM(require_react());
function useEscapeKeydown(n6) {
  const o10 = useCallbackRef(n6);
  t10.useEffect(() => {
    const e13 = (e14) => {
      e14.key === "Escape" && o10(e14);
    };
    return document.addEventListener("keydown", e13), () => document.removeEventListener("keydown", e13);
  }, [o10]);
}

// ../../node_modules/@radix-ui/react-use-body-pointer-events/dist/index.module.js
var t11 = __toESM(require_react());
var n5;
var o9 = 0;
function useBodyPointerEvents({ disabled: r12 }) {
  const i7 = t11.useRef(false);
  useLayoutEffect10(() => {
    if (r12) {
      let e13 = function() {
        o9--, o9 === 0 && (document.body.style.pointerEvents = n5);
      }, t12 = function(e14) {
        i7.current = e14.pointerType !== "mouse";
      };
      return o9 === 0 && (n5 = document.body.style.pointerEvents), document.body.style.pointerEvents = "none", o9++, document.addEventListener("pointerup", t12), () => {
        i7.current ? document.addEventListener("click", e13, { once: true }) : e13(), document.removeEventListener("pointerup", t12);
      };
    }
  }, [r12]);
}

// ../../node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
var i4 = __toESM(require_react());
var u3 = /* @__PURE__ */ i4.createContext({ layers: /* @__PURE__ */ new Set(), layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(), branches: /* @__PURE__ */ new Set() });
var DismissableLayer = /* @__PURE__ */ i4.forwardRef((l8, m8) => {
  const _a3 = l8, { disableOutsidePointerEvents: f8 = false, onEscapeKeyDown: p7, onPointerDownOutside: v6, onFocusOutside: b7, onInteractOutside: E7, onDismiss: y4 } = _a3, w7 = __objRest(_a3, ["disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss"]), h6 = i4.useContext(u3), [D5, x7] = i4.useState(null), [, C6] = i4.useState({}), L4 = useComposedRefs(m8, (e13) => x7(e13)), P3 = Array.from(h6.layers), [O5] = [...h6.layersWithOutsidePointerEventsDisabled].slice(-1), g7 = P3.indexOf(O5), B4 = D5 ? P3.indexOf(D5) : -1, R7 = h6.layersWithOutsidePointerEventsDisabled.size > 0, F6 = B4 >= g7, S3 = function(e13) {
    const n6 = useCallbackRef(e13), r12 = i4.useRef(false);
    return i4.useEffect(() => {
      const e14 = (e15) => {
        if (e15.target && !r12.current) {
          d6("dismissableLayer.pointerDownOutside", n6, { originalEvent: e15 });
        }
        r12.current = false;
      }, t12 = window.setTimeout(() => {
        document.addEventListener("pointerdown", e14);
      }, 0);
      return () => {
        window.clearTimeout(t12), document.removeEventListener("pointerdown", e14);
      };
    }, [n6]), { onPointerDownCapture: () => r12.current = true };
  }((e13) => {
    const t12 = e13.target, n6 = [...h6.branches].some((e14) => e14.contains(t12));
    F6 && !n6 && (v6 == null || v6(e13), E7 == null || E7(e13), e13.defaultPrevented || y4 == null || y4());
  }), W4 = function(e13) {
    const n6 = useCallbackRef(e13), r12 = i4.useRef(false);
    return i4.useEffect(() => {
      const e14 = (e15) => {
        if (e15.target && !r12.current) {
          d6("dismissableLayer.focusOutside", n6, { originalEvent: e15 });
        }
      };
      return document.addEventListener("focusin", e14), () => document.removeEventListener("focusin", e14);
    }, [n6]), { onFocusCapture: () => r12.current = true, onBlurCapture: () => r12.current = false };
  }((e13) => {
    const t12 = e13.target;
    [...h6.branches].some((e14) => e14.contains(t12)) || (b7 == null || b7(e13), E7 == null || E7(e13), e13.defaultPrevented || y4 == null || y4());
  });
  return useEscapeKeydown((e13) => {
    B4 === h6.layers.size - 1 && (p7 == null || p7(e13), e13.defaultPrevented || y4 == null || y4());
  }), useBodyPointerEvents({ disabled: f8 }), i4.useEffect(() => {
    D5 && (f8 && h6.layersWithOutsidePointerEventsDisabled.add(D5), h6.layers.add(D5), c5());
  }, [D5, f8, h6]), i4.useEffect(() => () => {
    D5 && (h6.layers.delete(D5), h6.layersWithOutsidePointerEventsDisabled.delete(D5), c5());
  }, [D5, h6]), i4.useEffect(() => {
    const e13 = () => C6({});
    return document.addEventListener("dismissableLayer.update", e13), () => document.removeEventListener("dismissableLayer.update", e13);
  }, []), /* @__PURE__ */ i4.createElement(Primitive.div, _extends({}, w7, { ref: L4, style: __spreadValues({ pointerEvents: R7 ? F6 ? "auto" : "none" : void 0 }, l8.style), onFocusCapture: composeEventHandlers(l8.onFocusCapture, W4.onFocusCapture), onBlurCapture: composeEventHandlers(l8.onBlurCapture, W4.onBlurCapture), onPointerDownCapture: composeEventHandlers(l8.onPointerDownCapture, S3.onPointerDownCapture) }));
});
function c5() {
  const e13 = new Event("dismissableLayer.update");
  document.dispatchEvent(e13);
}
function d6(e13, t12, n6) {
  const r12 = n6.originalEvent.target, s9 = new CustomEvent(e13, { bubbles: false, cancelable: true, detail: n6 });
  return t12 && r12.addEventListener(e13, t12, { once: true }), !r12.dispatchEvent(s9);
}

// ../../node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (parentNode === void 0) {
    parentNode = getDefaultParent(originalTarget);
  }
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || targets.indexOf(parent) >= 0) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        var attr = node.getAttribute("aria-hidden");
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node) || 0) + 1;
        var markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenNodes.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node, true);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node.setAttribute("aria-hidden", "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute("aria-hidden");
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};

// ../../node_modules/react-remove-scroll/node_modules/tslib/modules/index.js
var import_tslib18 = __toESM(require_tslib2(), 1);
var {
  __extends: __extends2,
  __assign: __assign3,
  __rest: __rest2,
  __decorate: __decorate2,
  __param: __param2,
  __metadata: __metadata2,
  __awaiter: __awaiter2,
  __generator: __generator2,
  __exportStar: __exportStar2,
  __createBinding: __createBinding2,
  __values: __values3,
  __read: __read3,
  __spread: __spread2,
  __spreadArrays: __spreadArrays2,
  __await: __await2,
  __asyncGenerator: __asyncGenerator2,
  __asyncDelegator: __asyncDelegator2,
  __asyncValues: __asyncValues2,
  __makeTemplateObject: __makeTemplateObject2,
  __importStar: __importStar2,
  __importDefault: __importDefault2,
  __classPrivateFieldGet: __classPrivateFieldGet2,
  __classPrivateFieldSet: __classPrivateFieldSet2
} = import_tslib18.default;

// ../../node_modules/react-remove-scroll/dist/es2015/Combination.js
var React59 = __toESM(require_react());

// ../../node_modules/react-remove-scroll/dist/es2015/UI.js
var React55 = __toESM(require_react());

// ../../node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// ../../node_modules/use-sidecar/node_modules/tslib/modules/index.js
var import_tslib19 = __toESM(require_tslib3(), 1);
var {
  __extends: __extends3,
  __assign: __assign4,
  __rest: __rest3,
  __decorate: __decorate3,
  __param: __param3,
  __metadata: __metadata3,
  __awaiter: __awaiter3,
  __generator: __generator3,
  __exportStar: __exportStar3,
  __createBinding: __createBinding3,
  __values: __values4,
  __read: __read4,
  __spread: __spread3,
  __spreadArrays: __spreadArrays3,
  __await: __await3,
  __asyncGenerator: __asyncGenerator3,
  __asyncDelegator: __asyncDelegator3,
  __asyncValues: __asyncValues3,
  __makeTemplateObject: __makeTemplateObject3,
  __importStar: __importStar3,
  __importDefault: __importDefault3,
  __classPrivateFieldGet: __classPrivateFieldGet3,
  __classPrivateFieldSet: __classPrivateFieldSet3
} = import_tslib19.default;

// ../../node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a6) {
  return a6;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x7) {
          return x7 !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x7) {
          return cb(x7);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x7) {
          pendingQueue.push(x7);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign4({ async: true, ssr: false }, options2);
  return medium;
}

// ../../node_modules/use-sidecar/dist/es2015/exports.js
var React54 = __toESM(require_react());
var SideCar = function(_a3) {
  var sideCar = _a3.sideCar, rest = __rest3(_a3, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React54.createElement(Target, __assign4({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// ../../node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// ../../node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// ../../node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react16 = __toESM(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react16.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// ../../node_modules/use-callback-ref/dist/es2015/useMergeRef.js
function useMergeRefs(refs, defaultValue) {
  return useCallbackRef2(defaultValue, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
}

// ../../node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React55.forwardRef(function(props, parentRef) {
  var ref = React55.useRef(null);
  var _a3 = React55.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a3[0], setCallbacks = _a3[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container4 = _b === void 0 ? "div" : _b, rest = __rest2(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([
    ref,
    parentRef
  ]);
  var containerProps = __assign3({}, rest, callbacks);
  return React55.createElement(React55.Fragment, null, enabled && React55.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React55.cloneElement(React55.Children.only(children), __assign3({}, containerProps, { ref: containerRef })) : React55.createElement(Container4, __assign3({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// ../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React58 = __toESM(require_react());

// ../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React57 = __toESM(require_react());

// ../../node_modules/react-style-singleton/dist/es2015/hook.js
var React56 = __toESM(require_react());

// ../../node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// ../../node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// ../../node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles23) {
    React56.useEffect(function() {
      sheet.add(styles23);
      return function() {
        sheet.remove();
      };
    }, []);
  };
};

// ../../node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet = function(_a3) {
    var styles23 = _a3.styles;
    useStyle2(styles23);
    return null;
  };
  return Sheet;
};

// ../../node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse3 = function(x7) {
  return parseInt(x7 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left6 = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top7 = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right6 = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [
    parse3(left6),
    parse3(top7),
    parse3(right6)
  ];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// ../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var getStyles = function(_a3, allowRelative, gapMode, important) {
  var left6 = _a3.left, top7 = _a3.top, right6 = _a3.right, gap = _a3.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  ." + noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
    allowRelative && "position: relative " + important + ";",
    gapMode === "margin" && "\n    padding-left: " + left6 + "px;\n    padding-top: " + top7 + "px;\n    padding-right: " + right6 + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
    gapMode === "padding" && "padding-right: " + gap + "px " + important + ";"
  ].filter(Boolean).join("") + "\n  }\n  \n  ." + zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + zeroRightClassName + " ." + zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + fullWidthClassName + " ." + fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + removedBarSizeVariable + ": " + gap + "px;\n  }\n";
};
var RemoveScrollBar = function(props) {
  var _a3 = React57.useState(getGapWidth(props.gapMode)), gap = _a3[0], setGap = _a3[1];
  React57.useEffect(function() {
    setGap(getGapWidth(props.gapMode));
  }, [props.gapMode]);
  var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? "margin" : _b;
  return React57.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// ../../node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var elementCouldBeVScrolled = function(node) {
  var styles23 = window.getComputedStyle(node);
  return styles23.overflowY !== "hidden" && !(styles23.overflowY === styles23.overflowX && styles23.overflowY === "visible");
};
var elementCouldBeHScrolled = function(node) {
  var styles23 = window.getComputedStyle(node);
  if (node.type === "range") {
    return true;
  }
  return styles23.overflowX !== "hidden" && !(styles23.overflowY === styles23.overflowX && styles23.overflowX === "visible");
};
var locationCouldBeScrolled = function(axis, node) {
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a3 = getScrollVariables(axis, current), s9 = _a3[1], d8 = _a3[2];
      if (s9 > d8) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a3) {
  var scrollTop = _a3.scrollTop, scrollHeight = _a3.scrollHeight, clientHeight = _a3.clientHeight;
  return [scrollTop, scrollHeight, clientHeight];
};
var getHScrollVariables = function(_a3) {
  var scrollLeft = _a3.scrollLeft, scrollWidth = _a3.scrollWidth, clientWidth = _a3.clientWidth;
  return [scrollLeft, scrollWidth, clientWidth];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a3 = getScrollVariables(axis, target), position = _a3[0], scroll_1 = _a3[1], capacity = _a3[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// ../../node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options2 = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options2, options2);
    window.removeEventListener("test", options2, options2);
  } catch (err) {
    passiveSupported = false;
  }
}
var options2;
var nonPassive = passiveSupported ? { passive: false } : false;

// ../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x7, y4) {
  return x7[0] === y4[0] && x7[1] === y4[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-" + id + " {pointer-events: none;}\n  .allow-interactivity-" + id + " {pointer-events: all;}\n";
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React58.useRef([]);
  var touchStartRef = React58.useRef([0, 0]);
  var activeAxis = React58.useRef();
  var id = React58.useState(idCounter++)[0];
  var Style2 = React58.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React58.useRef(props);
  React58.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React58.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-" + id);
      var allow_1 = [
        props.lockRef.current
      ].concat((props.shards || []).map(extractRef)).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-" + id);
      });
      return function() {
        document.body.classList.remove("block-interactivity-" + id);
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-" + id);
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React58.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React58.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e13) {
      return e13.name === event.type && e13.target === event.target && deltaCompare(e13.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      event.preventDefault();
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        event.preventDefault();
      }
    }
  }, []);
  var shouldCancel = React58.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e13) {
        return e13 !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React58.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React58.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React58.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React58.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React58.createElement(React58.Fragment, null, inert ? React58.createElement(Style2, { styles: generateStyle(id) }) : null, removeScrollBar ? React58.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
}

// ../../node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// ../../node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React59.forwardRef(function(props, ref) {
  return React59.createElement(RemoveScroll, __assign3({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// ../../node_modules/@radix-ui/react-menu/dist/index.module.js
var E3 = __toESM(require_react());
var x2 = ["Enter", " "];
var b4 = ["ArrowUp", "PageDown", "End"];
var R4 = ["ArrowDown", "PageUp", "Home", ...b4];
var _ = { ltr: [...x2, "ArrowRight"], rtl: [...x2, "ArrowLeft"] };
var y2 = { ltr: ["ArrowLeft"], rtl: ["ArrowRight"] };
var [I3, k2, P2] = createCollection("Menu");
var [D2, S2] = createContextScope("Menu", [P2, l5, v2]);
var O2 = l5();
var T3 = v2();
var [L3, A2] = D2("Menu");
var Menu = (e13) => {
  const { __scopeMenu: n6, open: o10 = false, children: u5, onOpenChange: c8, modal: i7 = true } = e13, s9 = O2(n6), [l8, d8] = E3.useState(null), p7 = E3.useRef(false), f8 = useCallbackRef(c8), m8 = useDirection(l8, e13.dir);
  return E3.useEffect(() => {
    const e14 = () => {
      p7.current = true, document.addEventListener("pointerdown", n7, { capture: true, once: true }), document.addEventListener("pointermove", n7, { capture: true, once: true });
    }, n7 = () => p7.current = false;
    return document.addEventListener("keydown", e14, { capture: true }), () => {
      document.removeEventListener("keydown", e14, { capture: true }), document.removeEventListener("pointerdown", n7, { capture: true }), document.removeEventListener("pointermove", n7, { capture: true });
    };
  }, []), /* @__PURE__ */ E3.createElement(Root3, s9, /* @__PURE__ */ E3.createElement(L3, { scope: n6, isSubmenu: false, isUsingKeyboardRef: p7, dir: m8, open: o10, onOpenChange: f8, content: l8, onContentChange: d8, onRootClose: E3.useCallback(() => f8(false), [f8]), modal: i7 }, u5));
};
var MenuSub = (n6) => {
  const { __scopeMenu: r12, children: o10, open: u5 = false, onOpenChange: c8 } = n6, i7 = A2("MenuSub", r12), s9 = O2(r12), [l8, d8] = E3.useState(null), [p7, f8] = E3.useState(null), m8 = useCallbackRef(c8);
  return E3.useEffect(() => (i7.open === false && m8(false), () => m8(false)), [i7.open, m8]), /* @__PURE__ */ E3.createElement(Root3, s9, /* @__PURE__ */ E3.createElement(L3, { scope: r12, isSubmenu: true, isUsingKeyboardRef: i7.isUsingKeyboardRef, dir: i7.dir, open: u5, onOpenChange: m8, content: p7, onContentChange: f8, onRootClose: i7.onRootClose, contentId: useId(), trigger: l8, onTriggerChange: d8, triggerId: useId(), modal: false }, o10));
};
var MenuAnchor = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12 } = _a3, r12 = __objRest(_a3, ["__scopeMenu"]), o10 = O2(t12);
  return E3.createElement(Anchor, _extends({}, o10, r12, { ref: n6 }));
});
var [F4, K2] = D2("MenuContent");
var MenuContent = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { forceMount: t12 } = _a3, r12 = __objRest(_a3, ["forceMount"]), o10 = A2("MenuContent", e13.__scopeMenu);
  return E3.createElement(I3.Provider, { scope: e13.__scopeMenu }, /* @__PURE__ */ E3.createElement(Presence, { present: t12 || o10.open }, /* @__PURE__ */ E3.createElement(I3.Slot, { scope: e13.__scopeMenu }, o10.isSubmenu ? /* @__PURE__ */ E3.createElement(X2, _extends({}, r12, { ref: n6 })) : /* @__PURE__ */ E3.createElement(G2, _extends({}, r12, { ref: n6 })))));
});
var G2 = /* @__PURE__ */ E3.forwardRef((e13, n6) => A2("MenuContent", e13.__scopeMenu).modal ? /* @__PURE__ */ E3.createElement(U2, _extends({}, e13, { ref: n6 })) : /* @__PURE__ */ E3.createElement(V4, _extends({}, e13, { ref: n6 })));
var U2 = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const t12 = A2("MenuContent", e13.__scopeMenu), r12 = E3.useRef(null), o10 = useComposedRefs(n6, r12);
  return E3.useEffect(() => {
    const e14 = r12.current;
    if (e14)
      return hideOthers(e14);
  }, []), /* @__PURE__ */ E3.createElement(B3, _extends({}, e13, { ref: o10, trapFocus: t12.open, disableOutsidePointerEvents: t12.open, disableOutsideScroll: true, onFocusOutside: composeEventHandlers(e13.onFocusOutside, (e14) => e14.preventDefault(), { checkForDefaultPrevented: false }), onDismiss: () => t12.onOpenChange(false) }));
});
var V4 = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const t12 = A2("MenuContent", e13.__scopeMenu);
  return E3.createElement(B3, _extends({}, e13, { ref: n6, trapFocus: false, disableOutsidePointerEvents: false, disableOutsideScroll: false, onDismiss: () => t12.onOpenChange(false) }));
});
var X2 = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const t12 = A2("MenuContent", e13.__scopeMenu), r12 = E3.useRef(null), o10 = useComposedRefs(n6, r12);
  return t12.isSubmenu ? /* @__PURE__ */ E3.createElement(B3, _extends({ id: t12.contentId, "aria-labelledby": t12.triggerId }, e13, { ref: o10, align: "start", side: t12.dir === "rtl" ? "left" : "right", portalled: true, disableOutsidePointerEvents: false, disableOutsideScroll: false, trapFocus: false, onOpenAutoFocus: (e14) => {
    var n7;
    t12.isUsingKeyboardRef.current && ((n7 = r12.current) === null || n7 === void 0 || n7.focus()), e14.preventDefault();
  }, onCloseAutoFocus: (e14) => e14.preventDefault(), onFocusOutside: composeEventHandlers(e13.onFocusOutside, (e14) => {
    e14.target !== t12.trigger && t12.onOpenChange(false);
  }), onEscapeKeyDown: composeEventHandlers(e13.onEscapeKeyDown, t12.onRootClose), onKeyDown: composeEventHandlers(e13.onKeyDown, (e14) => {
    const n7 = e14.currentTarget.contains(e14.target), r13 = y2[t12.dir].includes(e14.key);
    var o11;
    n7 && r13 && (t12.onOpenChange(false), (o11 = t12.trigger) === null || o11 === void 0 || o11.focus(), e14.preventDefault());
  }) })) : null;
});
var B3 = /* @__PURE__ */ E3.forwardRef((e13, t12) => {
  const _a3 = e13, { __scopeMenu: r12, loop: u5 = false, trapFocus: i7, onOpenAutoFocus: s9, onCloseAutoFocus: l8, disableOutsidePointerEvents: f8, onEscapeKeyDown: v6, onPointerDownOutside: g7, onFocusOutside: h6, onInteractOutside: x7, onDismiss: _4, disableOutsideScroll: y4, allowPinchZoom: I4, portalled: P3 } = _a3, D5 = __objRest(_a3, ["__scopeMenu", "loop", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss", "disableOutsideScroll", "allowPinchZoom", "portalled"]), S3 = A2("MenuContent", r12), L4 = O2(r12), K3 = T3(r12), G3 = k2(r12), [U3, V5] = E3.useState(null), X3 = E3.useRef(null), B4 = useComposedRefs(t12, X3, S3.onContentChange), Y4 = E3.useRef(0), Z4 = E3.useRef(""), z3 = E3.useRef(0), H5 = E3.useRef(null), W4 = E3.useRef("right"), q3 = E3.useRef(0), N2 = P3 ? Portal : E3.Fragment, Q = y4 ? Combination_default : E3.Fragment, $2 = y4 ? { allowPinchZoom: I4 } : void 0, ee = (e14) => {
    var n6, t13;
    const r13 = Z4.current + e14, o10 = G3().filter((e15) => !e15.disabled), u6 = document.activeElement, c8 = (n6 = o10.find((e15) => e15.ref.current === u6)) === null || n6 === void 0 ? void 0 : n6.textValue, a6 = function(e15, n7, t14) {
      const r14 = n7.length > 1 && Array.from(n7).every((e16) => e16 === n7[0]) ? n7[0] : n7, o11 = t14 ? e15.indexOf(t14) : -1;
      let u7 = (c9 = e15, a7 = Math.max(o11, 0), c9.map((e16, n8) => c9[(a7 + n8) % c9.length]));
      var c9, a7;
      r14.length === 1 && (u7 = u7.filter((e16) => e16 !== t14));
      const i9 = u7.find((e16) => e16.toLowerCase().startsWith(r14.toLowerCase()));
      return i9 !== t14 ? i9 : void 0;
    }(o10.map((e15) => e15.textValue), r13, c8), i8 = (t13 = o10.find((e15) => e15.textValue === a6)) === null || t13 === void 0 ? void 0 : t13.ref.current;
    !function e15(n7) {
      Z4.current = n7, window.clearTimeout(Y4.current), n7 !== "" && (Y4.current = window.setTimeout(() => e15(""), 1e3));
    }(r13), i8 && setTimeout(() => i8.focus());
  };
  E3.useEffect(() => () => window.clearTimeout(Y4.current), []), useFocusGuards();
  const ne2 = E3.useCallback((e14) => {
    var n6, t13;
    return W4.current === ((n6 = H5.current) === null || n6 === void 0 ? void 0 : n6.side) && function(e15, n7) {
      if (!n7)
        return false;
      return function(e16, n8) {
        const { x: t14, y: r13 } = e16;
        let o10 = false;
        for (let e17 = 0, u6 = n8.length - 1; e17 < n8.length; u6 = e17++) {
          const c8 = n8[e17].x, a6 = n8[e17].y, i8 = n8[u6].x, s10 = n8[u6].y;
          a6 > r13 != s10 > r13 && t14 < (i8 - c8) * (r13 - a6) / (s10 - a6) + c8 && (o10 = !o10);
        }
        return o10;
      }({ x: e15.clientX, y: e15.clientY }, n7);
    }(e14, (t13 = H5.current) === null || t13 === void 0 ? void 0 : t13.area);
  }, []);
  return E3.createElement(N2, null, /* @__PURE__ */ E3.createElement(Q, $2, /* @__PURE__ */ E3.createElement(F4, { scope: r12, searchRef: Z4, onItemEnter: E3.useCallback((e14) => {
    ne2(e14) && e14.preventDefault();
  }, [ne2]), onItemLeave: E3.useCallback((e14) => {
    var n6;
    ne2(e14) || ((n6 = X3.current) === null || n6 === void 0 || n6.focus(), V5(null));
  }, [ne2]), onTriggerLeave: E3.useCallback((e14) => {
    ne2(e14) && e14.preventDefault();
  }, [ne2]), pointerGraceTimerRef: z3, onPointerGraceIntentChange: E3.useCallback((e14) => {
    H5.current = e14;
  }, []) }, /* @__PURE__ */ E3.createElement(FocusScope, { asChild: true, trapped: i7, onMountAutoFocus: composeEventHandlers(s9, (e14) => {
    var n6;
    e14.preventDefault(), (n6 = X3.current) === null || n6 === void 0 || n6.focus();
  }), onUnmountAutoFocus: l8 }, /* @__PURE__ */ E3.createElement(DismissableLayer, { asChild: true, disableOutsidePointerEvents: f8, onEscapeKeyDown: v6, onPointerDownOutside: g7, onFocusOutside: h6, onInteractOutside: x7, onDismiss: _4 }, /* @__PURE__ */ E3.createElement(Root, _extends({ asChild: true }, K3, { dir: S3.dir, orientation: "vertical", loop: u5, currentTabStopId: U3, onCurrentTabStopIdChange: V5, onEntryFocus: (e14) => {
    S3.isUsingKeyboardRef.current || e14.preventDefault();
  } }), /* @__PURE__ */ E3.createElement(Content, _extends({ role: "menu", "aria-orientation": "vertical", "data-state": j3(S3.open), dir: S3.dir }, L4, D5, { ref: B4, style: __spreadValues({ outline: "none" }, D5.style), onKeyDown: composeEventHandlers(D5.onKeyDown, (e14) => {
    const n6 = e14.target, t13 = e14.currentTarget.contains(n6), r13 = e14.ctrlKey || e14.altKey || e14.metaKey, o10 = e14.key.length === 1;
    t13 && (e14.key === "Tab" && e14.preventDefault(), !r13 && o10 && ee(e14.key));
    const u6 = X3.current;
    if (e14.target !== u6)
      return;
    if (!R4.includes(e14.key))
      return;
    e14.preventDefault();
    const c8 = G3().filter((e15) => !e15.disabled).map((e15) => e15.ref.current);
    b4.includes(e14.key) && c8.reverse(), function(e15) {
      const n7 = document.activeElement;
      for (const t14 of e15) {
        if (t14 === n7)
          return;
        if (t14.focus(), document.activeElement !== n7)
          return;
      }
    }(c8);
  }), onBlur: composeEventHandlers(e13.onBlur, (e14) => {
    e14.currentTarget.contains(e14.target) || (window.clearTimeout(Y4.current), Z4.current = "");
  }), onPointerMove: composeEventHandlers(e13.onPointerMove, J3((e14) => {
    const n6 = e14.target, t13 = q3.current !== e14.clientX;
    if (e14.currentTarget.contains(n6) && t13) {
      const n7 = e14.clientX > q3.current ? "right" : "left";
      W4.current = n7, q3.current = e14.clientX;
    }
  })) }))))))));
});
var MenuGroup = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12 } = _a3, r12 = __objRest(_a3, ["__scopeMenu"]);
  return E3.createElement(Primitive.div, _extends({ role: "group" }, r12, { ref: n6 }));
});
var MenuItem = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { disabled: t12 = false, onSelect: r12 } = _a3, o10 = __objRest(_a3, ["disabled", "onSelect"]), u5 = E3.useRef(null), c8 = A2("MenuItem", e13.__scopeMenu), a6 = K2("MenuItem", e13.__scopeMenu), i7 = useComposedRefs(n6, u5), s9 = E3.useRef(false);
  return E3.createElement(Y3, _extends({}, o10, { ref: i7, disabled: t12, onClick: composeEventHandlers(e13.onClick, () => {
    const e14 = u5.current;
    if (!t12 && e14) {
      const n7 = new Event("menu.itemSelect", { bubbles: true, cancelable: true });
      e14.addEventListener("menu.itemSelect", (e15) => r12 == null ? void 0 : r12(e15), { once: true }), e14.dispatchEvent(n7), n7.defaultPrevented ? s9.current = false : c8.onRootClose();
    }
  }), onPointerDown: (n7) => {
    var t13;
    (t13 = e13.onPointerDown) === null || t13 === void 0 || t13.call(e13, n7), s9.current = true;
  }, onPointerUp: composeEventHandlers(e13.onPointerUp, (e14) => {
    var n7;
    s9.current || (n7 = e14.currentTarget) === null || n7 === void 0 || n7.click();
  }), onKeyDown: composeEventHandlers(e13.onKeyDown, (e14) => {
    const n7 = a6.searchRef.current !== "";
    t12 || n7 && e14.key === " " || x2.includes(e14.key) && (e14.currentTarget.click(), e14.preventDefault());
  }) }));
});
var MenuSubTrigger = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const t12 = A2("MenuSubTrigger", e13.__scopeMenu), r12 = K2("MenuSubTrigger", e13.__scopeMenu), o10 = E3.useRef(null), { pointerGraceTimerRef: u5, onPointerGraceIntentChange: c8 } = r12, a6 = { __scopeMenu: e13.__scopeMenu }, i7 = E3.useCallback(() => {
    o10.current && window.clearTimeout(o10.current), o10.current = null;
  }, []);
  return E3.useEffect(() => i7, [i7]), E3.useEffect(() => {
    const e14 = u5.current;
    return () => {
      window.clearTimeout(e14), c8(null);
    };
  }, [u5, c8]), t12.isSubmenu ? /* @__PURE__ */ E3.createElement(MenuAnchor, _extends({ asChild: true }, a6), /* @__PURE__ */ E3.createElement(Y3, _extends({ id: t12.triggerId, "aria-haspopup": "menu", "aria-expanded": t12.open, "aria-controls": t12.contentId, "data-state": j3(t12.open) }, e13, { ref: composeRefs(n6, t12.onTriggerChange), onClick: (n7) => {
    var r13;
    (r13 = e13.onClick) === null || r13 === void 0 || r13.call(e13, n7), e13.disabled || n7.defaultPrevented || (n7.currentTarget.focus(), t12.open || t12.onOpenChange(true));
  }, onPointerMove: composeEventHandlers(e13.onPointerMove, J3((n7) => {
    r12.onItemEnter(n7), n7.defaultPrevented || e13.disabled || t12.open || o10.current || (r12.onPointerGraceIntentChange(null), o10.current = window.setTimeout(() => {
      t12.onOpenChange(true), i7();
    }, 100));
  })), onPointerLeave: composeEventHandlers(e13.onPointerLeave, J3((e14) => {
    var n7;
    i7();
    const o11 = (n7 = t12.content) === null || n7 === void 0 ? void 0 : n7.getBoundingClientRect();
    if (o11) {
      var c9;
      const n8 = (c9 = t12.content) === null || c9 === void 0 ? void 0 : c9.dataset.side, a7 = n8 === "right", i8 = a7 ? -5 : 5, s9 = o11[a7 ? "left" : "right"], l8 = o11[a7 ? "right" : "left"];
      r12.onPointerGraceIntentChange({ area: [{ x: e14.clientX + i8, y: e14.clientY }, { x: s9, y: o11.top }, { x: l8, y: o11.top }, { x: l8, y: o11.bottom }, { x: s9, y: o11.bottom }], side: n8 }), window.clearTimeout(u5.current), u5.current = window.setTimeout(() => r12.onPointerGraceIntentChange(null), 300);
    } else {
      if (r12.onTriggerLeave(e14), e14.defaultPrevented)
        return;
      r12.onPointerGraceIntentChange(null);
    }
  })), onKeyDown: composeEventHandlers(e13.onKeyDown, (n7) => {
    const o11 = r12.searchRef.current !== "";
    var u6;
    e13.disabled || o11 && n7.key === " " || _[t12.dir].includes(n7.key) && (t12.onOpenChange(true), (u6 = t12.content) === null || u6 === void 0 || u6.focus(), n7.preventDefault());
  }) }))) : null;
});
var Y3 = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12, disabled: r12 = false, textValue: u5 } = _a3, c8 = __objRest(_a3, ["__scopeMenu", "disabled", "textValue"]), a6 = K2("MenuItem", t12), i7 = T3(t12), l8 = E3.useRef(null), d8 = useComposedRefs(n6, l8), [p7, f8] = E3.useState("");
  return E3.useEffect(() => {
    const e14 = l8.current;
    var n7;
    e14 && f8(((n7 = e14.textContent) !== null && n7 !== void 0 ? n7 : "").trim());
  }, [c8.children]), /* @__PURE__ */ E3.createElement(I3.ItemSlot, { scope: t12, disabled: r12, textValue: u5 != null ? u5 : p7 }, /* @__PURE__ */ E3.createElement(Item, _extends({ asChild: true }, i7, { focusable: !r12 }), /* @__PURE__ */ E3.createElement(Primitive.div, _extends({ role: "menuitem", "aria-disabled": r12 || void 0, "data-disabled": r12 ? "" : void 0 }, c8, { ref: d8, onPointerMove: composeEventHandlers(e13.onPointerMove, J3((e14) => {
    if (r12)
      a6.onItemLeave(e14);
    else if (a6.onItemEnter(e14), !e14.defaultPrevented) {
      e14.currentTarget.focus();
    }
  })), onPointerLeave: composeEventHandlers(e13.onPointerLeave, J3((e14) => a6.onItemLeave(e14))) }))));
});
var MenuCheckboxItem = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { checked: t12 = false, onCheckedChange: r12 } = _a3, o10 = __objRest(_a3, ["checked", "onCheckedChange"]);
  return E3.createElement(H4, { scope: e13.__scopeMenu, checked: t12 }, /* @__PURE__ */ E3.createElement(MenuItem, _extends({ role: "menuitemcheckbox", "aria-checked": t12 }, o10, { ref: n6, "data-state": q2(t12), onSelect: composeEventHandlers(o10.onSelect, () => r12 == null ? void 0 : r12(!t12), { checkForDefaultPrevented: false }) })));
});
var [Z3, z2] = D2("MenuRadioGroup", { value: void 0, onValueChange: () => {
} });
var MenuRadioGroup = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { value: r12, onValueChange: o10 } = _a3, u5 = __objRest(_a3, ["value", "onValueChange"]), c8 = useCallbackRef(o10);
  return E3.createElement(Z3, { scope: e13.__scopeMenu, value: r12, onValueChange: c8 }, /* @__PURE__ */ E3.createElement(MenuGroup, _extends({}, u5, { ref: n6 })));
});
var MenuRadioItem = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { value: t12 } = _a3, r12 = __objRest(_a3, ["value"]), o10 = z2("MenuRadioItem", e13.__scopeMenu), u5 = t12 === o10.value;
  return E3.createElement(H4, { scope: e13.__scopeMenu, checked: u5 }, /* @__PURE__ */ E3.createElement(MenuItem, _extends({ role: "menuitemradio", "aria-checked": u5 }, r12, { ref: n6, "data-state": q2(u5), onSelect: composeEventHandlers(r12.onSelect, () => {
    var e14;
    return (e14 = o10.onValueChange) === null || e14 === void 0 ? void 0 : e14.call(o10, t12);
  }, { checkForDefaultPrevented: false }) })));
});
var [H4, W3] = D2("MenuItemIndicator", { checked: false });
var MenuItemIndicator = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12, forceMount: r12 } = _a3, o10 = __objRest(_a3, ["__scopeMenu", "forceMount"]), u5 = W3("MenuItemIndicator", t12);
  return E3.createElement(Presence, { present: r12 || u5.checked }, /* @__PURE__ */ E3.createElement(Primitive.span, _extends({}, o10, { ref: n6, "data-state": q2(u5.checked) })));
});
var MenuSeparator = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12 } = _a3, r12 = __objRest(_a3, ["__scopeMenu"]);
  return E3.createElement(Primitive.div, _extends({ role: "separator", "aria-orientation": "horizontal" }, r12, { ref: n6 }));
});
var MenuArrow = /* @__PURE__ */ E3.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeMenu: t12 } = _a3, r12 = __objRest(_a3, ["__scopeMenu"]), o10 = O2(t12);
  return E3.createElement(Arrow2, _extends({}, o10, r12, { ref: n6 }));
});
function j3(e13) {
  return e13 ? "open" : "closed";
}
function q2(e13) {
  return e13 ? "checked" : "unchecked";
}
function J3(e13) {
  return (n6) => n6.pointerType === "mouse" ? e13(n6) : void 0;
}
var Root4 = Menu;
var Sub = MenuSub;
var Anchor2 = MenuAnchor;
var SubTrigger = MenuSubTrigger;
var Content2 = MenuContent;
var Item2 = MenuItem;
var CheckboxItem = MenuCheckboxItem;
var RadioGroup = MenuRadioGroup;
var RadioItem = MenuRadioItem;
var ItemIndicator = MenuItemIndicator;
var Separator = MenuSeparator;
var Arrow3 = MenuArrow;

// ../../node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
var c6 = __toESM(require_react());
var [s6, i5] = createContextScope("DropdownMenu", [S2]);
var l6 = S2();
var [m5, w3] = s6("DropdownMenu");
var DropdownMenu = (e13) => {
  const { __scopeDropdownMenu: n6, children: r12, open: p7, defaultOpen: d8, onOpenChange: a6 } = e13, s9 = M2("DropdownMenu", n6), i7 = l6(n6), [w7 = false, D5] = useControllableState({ prop: p7, defaultProp: d8, onChange: a6 }), g7 = c6.useCallback(() => D5((e14) => !e14), [D5]);
  return s9.isInsideContent ? /* @__PURE__ */ c6.createElement(m5, { scope: n6, isRootMenu: false, open: w7, onOpenChange: D5, onOpenToggle: g7 }, /* @__PURE__ */ c6.createElement(Sub, _extends({}, i7, { open: w7, onOpenChange: D5 }), r12)) : /* @__PURE__ */ c6.createElement(f5, _extends({}, e13, { open: w7, onOpenChange: D5, onOpenToggle: g7 }), r12);
};
var f5 = (n6) => {
  const { __scopeDropdownMenu: r12, children: t12, dir: p7, open: d8, onOpenChange: a6, onOpenToggle: s9, modal: i7 = true } = n6, w7 = l6(r12), f8 = c6.useRef(null);
  return c6.createElement(m5, { scope: r12, isRootMenu: true, triggerId: useId(), triggerRef: f8, contentId: useId(), open: d8, onOpenChange: a6, onOpenToggle: s9, modal: i7 }, /* @__PURE__ */ c6.createElement(Root4, _extends({}, w7, { open: d8, onOpenChange: a6, dir: p7, modal: i7 }), t12));
};
var DropdownMenuTrigger = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: t12, disabled: p7 = false } = _a3, s9 = __objRest(_a3, ["__scopeDropdownMenu", "disabled"]), i7 = w3("DropdownMenuTrigger", t12), m8 = l6(t12);
  return i7.isRootMenu ? /* @__PURE__ */ c6.createElement(Anchor2, _extends({ asChild: true }, m8), /* @__PURE__ */ c6.createElement(Primitive.button, _extends({ type: "button", id: i7.triggerId, "aria-haspopup": "menu", "aria-expanded": !!i7.open || void 0, "aria-controls": i7.open ? i7.contentId : void 0, "data-state": i7.open ? "open" : "closed", "data-disabled": p7 ? "" : void 0, disabled: p7 }, s9, { ref: composeRefs(n6, i7.triggerRef), onPointerDown: composeEventHandlers(e13.onPointerDown, (e14) => {
    p7 || e14.button !== 0 || e14.ctrlKey !== false || (i7.open || e14.preventDefault(), i7.onOpenToggle());
  }), onKeyDown: composeEventHandlers(e13.onKeyDown, (e14) => {
    p7 || (["Enter", " "].includes(e14.key) && i7.onOpenToggle(), e14.key === "ArrowDown" && i7.onOpenChange(true), [" ", "ArrowDown"].includes(e14.key) && e14.preventDefault());
  }) }))) : null;
});
var [D3, M2] = s6("DropdownMenuContent", { isInsideContent: false });
var DropdownMenuContent = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = w3("DropdownMenuContent", r12), d8 = l6(r12), a6 = __spreadProps(__spreadValues({}, t12), { style: __spreadProps(__spreadValues({}, e13.style), { "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)" }) });
  return c6.createElement(D3, { scope: r12, isInsideContent: true }, p7.isRootMenu ? /* @__PURE__ */ c6.createElement(g3, _extends({ __scopeDropdownMenu: r12 }, a6, { ref: n6 })) : /* @__PURE__ */ c6.createElement(Content2, _extends({}, d8, a6, { ref: n6 })));
});
var g3 = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12, portalled: t12 = true } = _a3, p7 = __objRest(_a3, ["__scopeDropdownMenu", "portalled"]), d8 = w3("DropdownMenuContent", r12), s9 = l6(r12), i7 = c6.useRef(false);
  return d8.isRootMenu ? /* @__PURE__ */ c6.createElement(Content2, _extends({ id: d8.contentId, "aria-labelledby": d8.triggerId }, s9, p7, { ref: n6, portalled: t12, onCloseAutoFocus: composeEventHandlers(e13.onCloseAutoFocus, (e14) => {
    var o10;
    i7.current || (o10 = d8.triggerRef.current) === null || o10 === void 0 || o10.focus(), i7.current = false, e14.preventDefault();
  }), onInteractOutside: composeEventHandlers(e13.onInteractOutside, (e14) => {
    const o10 = e14.detail.originalEvent, n7 = o10.button === 0 && o10.ctrlKey === true, r13 = o10.button === 2 || n7;
    d8.modal && !r13 || (i7.current = true);
  }) })) : null;
});
var DropdownMenuItem = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(Item2, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuTriggerItem = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(SubTrigger, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuCheckboxItem = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(CheckboxItem, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuRadioGroup = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(RadioGroup, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuRadioItem = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(RadioItem, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuItemIndicator = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(ItemIndicator, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuSeparator = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(Separator, _extends({}, p7, t12, { ref: n6 }));
});
var DropdownMenuArrow = /* @__PURE__ */ c6.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeDropdownMenu: r12 } = _a3, t12 = __objRest(_a3, ["__scopeDropdownMenu"]), p7 = l6(r12);
  return c6.createElement(Arrow3, _extends({}, p7, t12, { ref: n6 }));
});
var Root5 = DropdownMenu;
var Trigger = DropdownMenuTrigger;
var Content3 = DropdownMenuContent;
var Item3 = DropdownMenuItem;
var TriggerItem = DropdownMenuTriggerItem;
var CheckboxItem2 = DropdownMenuCheckboxItem;
var RadioGroup2 = DropdownMenuRadioGroup;
var RadioItem2 = DropdownMenuRadioItem;
var ItemIndicator2 = DropdownMenuItemIndicator;
var Separator2 = DropdownMenuSeparator;
var Arrow4 = DropdownMenuArrow;

// ../../node_modules/@radix-ui/react-icons/dist/react-icons.esm.js
var import_react17 = __toESM(require_react());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i7;
  for (i7 = 0; i7 < sourceKeys.length; i7++) {
    key = sourceKeys[i7];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["color"];
var AlignBottomIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M9 3C9 2.44772 8.55229 2 8 2H7C6.44772 2 6 2.44772 6 3L6 14H1.5C1.22386 14 1 14.2239 1 14.5C1 14.7761 1.22386 15 1.5 15L6 15H9H13.5C13.7761 15 14 14.7761 14 14.5C14 14.2239 13.7761 14 13.5 14H9V3Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4 = ["color"];
var AlignCenterHorizontallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1.99988 6C1.44759 6 0.999877 6.44772 0.999877 7L0.999877 8C0.999877 8.55228 1.44759 9 1.99988 9L6.99988 9L6.99988 13.5C6.99988 13.7761 7.22374 14 7.49988 14C7.77602 14 7.99988 13.7761 7.99988 13.5L7.99988 9L12.9999 9C13.5522 9 13.9999 8.55228 13.9999 8L13.9999 7C13.9999 6.44772 13.5522 6 12.9999 6L7.99988 6L7.99988 1.5C7.99988 1.22386 7.77602 1 7.49988 1C7.22373 1 6.99988 1.22386 6.99988 1.5L6.99988 6L1.99988 6Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$5 = ["color"];
var AlignCenterVerticallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$5);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M6.99988 1C6.44759 1 5.99988 1.44772 5.99988 2V7H1.49988C1.22374 7 0.999878 7.22386 0.999878 7.5C0.999878 7.77614 1.22374 8 1.49988 8H5.99988V13C5.99988 13.5523 6.44759 14 6.99988 14H7.99988C8.55216 14 8.99988 13.5523 8.99988 13V8H13.4999C13.776 8 13.9999 7.77614 13.9999 7.5C13.9999 7.22386 13.776 7 13.4999 7H8.99988V2C8.99988 1.44772 8.55216 1 7.99988 1L6.99988 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$6 = ["color"];
var AlignLeftIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$6);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M0.499995 0.999995C0.223855 0.999995 -5.58458e-07 1.22385 -5.46388e-07 1.49999L-2.18554e-08 13.4999C-9.78492e-09 13.776 0.223855 13.9999 0.499995 13.9999C0.776136 13.9999 0.999991 13.776 0.999991 13.4999L0.999991 8.99993L12 8.99993C12.5523 8.99993 13 8.55222 13 7.99993L13 6.99994C13 6.44766 12.5523 5.99995 12 5.99995L0.999991 5.99995L0.999991 1.49999C0.999991 1.22385 0.776135 0.999995 0.499995 0.999995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$7 = ["color"];
var AlignRightIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$7);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M14.4999 1C14.2237 1 13.9999 1.22386 13.9999 1.5L13.9999 6L2.99988 6C2.44759 6 1.99988 6.44772 1.99988 7L1.99988 8C1.99988 8.55228 2.44759 9 2.99988 9L13.9999 9L13.9999 13.5C13.9999 13.7761 14.2237 14 14.4999 14C14.776 14 14.9999 13.7761 14.9999 13.5L14.9999 9L14.9999 6L14.9999 1.5C14.9999 1.22386 14.776 1 14.4999 1Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$8 = ["color"];
var AlignTopIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$8);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1.5 0C1.22386 0 1 0.223858 1 0.5C1 0.776142 1.22386 1 1.5 1H6V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V1H13.5C13.7761 1 14 0.776142 14 0.5C14 0.223858 13.7761 0 13.5 0H9H6H1.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$a = ["color"];
var AngleIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$a);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M8.8914 2.1937C9.1158 2.35464 9.16725 2.66701 9.00631 2.89141L2.47388 12H13.5C13.7761 12 14 12.2239 14 12.5C14 12.7762 13.7761 13 13.5 13H1.5C1.31254 13 1.14082 12.8952 1.0552 12.7284C0.969578 12.5616 0.984438 12.361 1.09369 12.2086L8.19369 2.30862C8.35462 2.08422 8.667 2.03277 8.8914 2.1937ZM11.1 6.50001C11.1 6.22387 11.3238 6.00001 11.6 6.00001C11.8761 6.00001 12.1 6.22387 12.1 6.50001C12.1 6.77615 11.8761 7.00001 11.6 7.00001C11.3238 7.00001 11.1 6.77615 11.1 6.50001ZM10.4 4.00001C10.1239 4.00001 9.90003 4.22387 9.90003 4.50001C9.90003 4.77615 10.1239 5.00001 10.4 5.00001C10.6762 5.00001 10.9 4.77615 10.9 4.50001C10.9 4.22387 10.6762 4.00001 10.4 4.00001ZM12.1 8.50001C12.1 8.22387 12.3238 8.00001 12.6 8.00001C12.8761 8.00001 13.1 8.22387 13.1 8.50001C13.1 8.77615 12.8761 9.00001 12.6 9.00001C12.3238 9.00001 12.1 8.77615 12.1 8.50001ZM13.4 10C13.1239 10 12.9 10.2239 12.9 10.5C12.9 10.7761 13.1239 11 13.4 11C13.6762 11 13.9 10.7761 13.9 10.5C13.9 10.2239 13.6762 10 13.4 10Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$e = ["color"];
var ArrowDownIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$e);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M7.5 2C7.77614 2 8 2.22386 8 2.5L8 11.2929L11.1464 8.14645C11.3417 7.95118 11.6583 7.95118 11.8536 8.14645C12.0488 8.34171 12.0488 8.65829 11.8536 8.85355L7.85355 12.8536C7.75979 12.9473 7.63261 13 7.5 13C7.36739 13 7.24021 12.9473 7.14645 12.8536L3.14645 8.85355C2.95118 8.65829 2.95118 8.34171 3.14645 8.14645C3.34171 7.95118 3.65829 7.95118 3.85355 8.14645L7 11.2929L7 2.5C7 2.22386 7.22386 2 7.5 2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$i = ["color"];
var ArrowTopRightIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$i);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$j = ["color"];
var ArrowUpIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$j);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$k = ["color"];
var AspectRatioIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$k);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M2.5 2H12.5C12.7761 2 13 2.22386 13 2.5V12.5C13 12.7761 12.7761 13 12.5 13H2.5C2.22386 13 2 12.7761 2 12.5V2.5C2 2.22386 2.22386 2 2.5 2ZM1 2.5C1 1.67157 1.67157 1 2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5ZM7.5 4C7.77614 4 8 3.77614 8 3.5C8 3.22386 7.77614 3 7.5 3C7.22386 3 7 3.22386 7 3.5C7 3.77614 7.22386 4 7.5 4ZM8 5.5C8 5.77614 7.77614 6 7.5 6C7.22386 6 7 5.77614 7 5.5C7 5.22386 7.22386 5 7.5 5C7.77614 5 8 5.22386 8 5.5ZM7.5 8C7.77614 8 8 7.77614 8 7.5C8 7.22386 7.77614 7 7.5 7C7.22386 7 7 7.22386 7 7.5C7 7.77614 7.22386 8 7.5 8ZM10 7.5C10 7.77614 9.77614 8 9.5 8C9.22386 8 9 7.77614 9 7.5C9 7.22386 9.22386 7 9.5 7C9.77614 7 10 7.22386 10 7.5ZM11.5 8C11.7761 8 12 7.77614 12 7.5C12 7.22386 11.7761 7 11.5 7C11.2239 7 11 7.22386 11 7.5C11 7.77614 11.2239 8 11.5 8Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$F = ["color"];
var BoxIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$F);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M12.5 2H2.5C2.22386 2 2 2.22386 2 2.5V12.5C2 12.7761 2.22386 13 2.5 13H12.5C12.7761 13 13 12.7761 13 12.5V2.5C13 2.22386 12.7761 2 12.5 2ZM2.5 1C1.67157 1 1 1.67157 1 2.5V12.5C1 13.3284 1.67157 14 2.5 14H12.5C13.3284 14 14 13.3284 14 12.5V2.5C14 1.67157 13.3284 1 12.5 1H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$T = ["color"];
var CheckIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$T);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$Y = ["color"];
var ChevronRightIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$Y);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$_ = ["color"];
var CircleIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$_);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M0.877075 7.49991C0.877075 3.84222 3.84222 0.877075 7.49991 0.877075C11.1576 0.877075 14.1227 3.84222 14.1227 7.49991C14.1227 11.1576 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1576 0.877075 7.49991ZM7.49991 1.82708C4.36689 1.82708 1.82708 4.36689 1.82708 7.49991C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49991C13.1727 4.36689 10.6329 1.82708 7.49991 1.82708Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$10 = ["color"];
var ClipboardIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$10);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM11 2V2.25C11 2.66421 10.6642 3 10.25 3H4.75C4.33579 3 4 2.66421 4 2.25V2H3.5C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V2.5C12 2.22386 11.7761 2 11.5 2H11Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1h = ["color"];
var CopyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1h);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1 9.50006C1 10.3285 1.67157 11.0001 2.5 11.0001H4L4 10.0001H2.5C2.22386 10.0001 2 9.7762 2 9.50006L2 2.50006C2 2.22392 2.22386 2.00006 2.5 2.00006L9.5 2.00006C9.77614 2.00006 10 2.22392 10 2.50006V4.00002H5.5C4.67158 4.00002 4 4.67159 4 5.50002V12.5C4 13.3284 4.67158 14 5.5 14H12.5C13.3284 14 14 13.3284 14 12.5V5.50002C14 4.67159 13.3284 4.00002 12.5 4.00002H11V2.50006C11 1.67163 10.3284 1.00006 9.5 1.00006H2.5C1.67157 1.00006 1 1.67163 1 2.50006V9.50006ZM5 5.50002C5 5.22388 5.22386 5.00002 5.5 5.00002H12.5C12.7761 5.00002 13 5.22388 13 5.50002V12.5C13 12.7762 12.7761 13 12.5 13H5.5C5.22386 13 5 12.7762 5 12.5V5.50002Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1r = ["color"];
var Cross2Icon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1r);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1x = ["color"];
var CursorArrowIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1x);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3.29227 0.048984C3.47033 -0.032338 3.67946 -0.00228214 3.8274 0.125891L12.8587 7.95026C13.0134 8.08432 13.0708 8.29916 13.0035 8.49251C12.9362 8.68586 12.7578 8.81866 12.5533 8.82768L9.21887 8.97474L11.1504 13.2187C11.2648 13.47 11.1538 13.7664 10.9026 13.8808L8.75024 14.8613C8.499 14.9758 8.20255 14.8649 8.08802 14.6137L6.15339 10.3703L3.86279 12.7855C3.72196 12.934 3.50487 12.9817 3.31479 12.9059C3.1247 12.8301 3 12.6461 3 12.4414V0.503792C3 0.308048 3.11422 0.130306 3.29227 0.048984ZM4 1.59852V11.1877L5.93799 9.14425C6.05238 9.02363 6.21924 8.96776 6.38319 8.99516C6.54715 9.02256 6.68677 9.12965 6.75573 9.2809L8.79056 13.7441L10.0332 13.178L8.00195 8.71497C7.93313 8.56376 7.94391 8.38824 8.03072 8.24659C8.11753 8.10494 8.26903 8.01566 8.435 8.00834L11.2549 7.88397L4 1.59852Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$1I = ["color"];
var DotFilledIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1I);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M9.875 7.5C9.875 8.81168 8.81168 9.875 7.5 9.875C6.18832 9.875 5.125 8.81168 5.125 7.5C5.125 6.18832 6.18832 5.125 7.5 5.125C8.81168 5.125 9.875 6.18832 9.875 7.5Z",
    fill: color
  }));
});
var _excluded$1J = ["color"];
var DotsHorizontalIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$1J);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3.625 7.5C3.625 8.12132 3.12132 8.625 2.5 8.625C1.87868 8.625 1.375 8.12132 1.375 7.5C1.375 6.87868 1.87868 6.375 2.5 6.375C3.12132 6.375 3.625 6.87868 3.625 7.5ZM8.625 7.5C8.625 8.12132 8.12132 8.625 7.5 8.625C6.87868 8.625 6.375 8.12132 6.375 7.5C6.375 6.87868 6.87868 6.375 7.5 6.375C8.12132 6.375 8.625 6.87868 8.625 7.5ZM12.5 8.625C13.1213 8.625 13.625 8.12132 13.625 7.5C13.625 6.87868 13.1213 6.375 12.5 6.375C11.8787 6.375 11.375 6.87868 11.375 7.5C11.375 8.12132 11.8787 8.625 12.5 8.625Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$21 = ["color"];
var ExitIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$21);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3 1C2.44771 1 2 1.44772 2 2V13C2 13.5523 2.44772 14 3 14H10.5C10.7761 14 11 13.7761 11 13.5C11 13.2239 10.7761 13 10.5 13H3V2L10.5 2C10.7761 2 11 1.77614 11 1.5C11 1.22386 10.7761 1 10.5 1H3ZM12.6036 4.89645C12.4083 4.70118 12.0917 4.70118 11.8964 4.89645C11.7012 5.09171 11.7012 5.40829 11.8964 5.60355L13.2929 7H6.5C6.22386 7 6 7.22386 6 7.5C6 7.77614 6.22386 8 6.5 8H13.2929L11.8964 9.39645C11.7012 9.59171 11.7012 9.90829 11.8964 10.1036C12.0917 10.2988 12.4083 10.2988 12.6036 10.1036L14.8536 7.85355C15.0488 7.65829 15.0488 7.34171 14.8536 7.14645L12.6036 4.89645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$23 = ["color"];
var ExternalLinkIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$23);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2p = ["color"];
var GroupIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2p);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1.44995 0.949951C1.31734 0.949951 1.19016 1.00263 1.0964 1.0964C1.00263 1.19017 0.949951 1.31735 0.949951 1.44995L0.949966 3.44995C0.949969 3.7261 1.17383 3.94995 1.44997 3.94995C1.72611 3.94995 1.94997 3.72609 1.94997 3.44995L1.94995 1.94995H3.44997C3.72611 1.94995 3.94997 1.72609 3.94997 1.44995C3.94997 1.17381 3.72611 0.949951 3.44997 0.949951H1.44995ZM5.94995 0.949951C5.67381 0.949951 5.44995 1.17381 5.44995 1.44995C5.44995 1.72609 5.67381 1.94995 5.94995 1.94995H8.94995C9.22609 1.94995 9.44995 1.72609 9.44995 1.44995C9.44995 1.17381 9.22609 0.949951 8.94995 0.949951H5.94995ZM5.44995 13.45C5.44995 13.1738 5.67381 12.95 5.94995 12.95H8.94995C9.22609 12.95 9.44995 13.1738 9.44995 13.45C9.44995 13.7261 9.22609 13.95 8.94995 13.95H5.94995C5.67381 13.95 5.44995 13.7261 5.44995 13.45ZM1.94995 5.94995C1.94995 5.67381 1.72609 5.44995 1.44995 5.44995C1.17381 5.44995 0.949951 5.67381 0.949951 5.94995V8.94995C0.949951 9.22609 1.17381 9.44995 1.44995 9.44995C1.72609 9.44995 1.94995 9.22609 1.94995 8.94995V5.94995ZM13.45 5.44995C13.7261 5.44995 13.95 5.67381 13.95 5.94995V8.94995C13.95 9.22609 13.7261 9.44995 13.45 9.44995C13.1738 9.44995 12.95 9.22609 12.95 8.94995V5.94995C12.95 5.67381 13.1738 5.44995 13.45 5.44995ZM11.45 0.949951C11.1738 0.949951 10.95 1.17381 10.95 1.44995C10.95 1.72609 11.1738 1.94995 11.45 1.94995H12.9499V3.44995C12.9499 3.72609 13.1738 3.94995 13.4499 3.94995C13.7261 3.94995 13.9499 3.72609 13.9499 3.44995V1.44995C13.9499 1.17381 13.7252 0.949951 13.449 0.949951H11.45ZM1.44995 10.95C1.72609 10.95 1.94995 11.1738 1.94995 11.45V12.95H3.44997C3.72611 12.95 3.94997 13.1738 3.94997 13.45C3.94997 13.7261 3.72611 13.95 3.44997 13.95H1.44995C1.17381 13.95 0.949951 13.7261 0.949951 13.45V11.45C0.949951 11.1738 1.17381 10.95 1.44995 10.95ZM13.95 11.45C13.95 11.1738 13.7261 10.95 13.45 10.95C13.1738 10.9499 12.95 11.1738 12.95 11.4499L12.9491 12.95H11.45C11.1738 12.95 10.95 13.1738 10.95 13.45C10.95 13.7261 11.1738 13.95 11.45 13.95H13.4499C13.7261 13.95 13.9499 13.7261 13.9499 13.45L13.95 11.45Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2s = ["color"];
var HamburgerMenuIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2s);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1.5 3C1.22386 3 1 3.22386 1 3.5C1 3.77614 1.22386 4 1.5 4H13.5C13.7761 4 14 3.77614 14 3.5C14 3.22386 13.7761 3 13.5 3H1.5ZM1 7.5C1 7.22386 1.22386 7 1.5 7H13.5C13.7761 7 14 7.22386 14 7.5C14 7.77614 13.7761 8 13.5 8H1.5C1.22386 8 1 7.77614 1 7.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H13.5C13.7761 11 14 11.2239 14 11.5C14 11.7761 13.7761 12 13.5 12H1.5C1.22386 12 1 11.7761 1 11.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2_ = ["color"];
var LockClosedIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2_);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M5 4.63601C5 3.76031 5.24219 3.1054 5.64323 2.67357C6.03934 2.24705 6.64582 1.9783 7.5014 1.9783C8.35745 1.9783 8.96306 2.24652 9.35823 2.67208C9.75838 3.10299 10 3.75708 10 4.63325V5.99999H5V4.63601ZM4 5.99999V4.63601C4 3.58148 4.29339 2.65754 4.91049 1.99307C5.53252 1.32329 6.42675 0.978302 7.5014 0.978302C8.57583 0.978302 9.46952 1.32233 10.091 1.99162C10.7076 2.65557 11 3.57896 11 4.63325V5.99999H12C12.5523 5.99999 13 6.44771 13 6.99999V13C13 13.5523 12.5523 14 12 14H3C2.44772 14 2 13.5523 2 13V6.99999C2 6.44771 2.44772 5.99999 3 5.99999H4ZM3 6.99999H12V13H3V6.99999Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$2$ = ["color"];
var LockOpen1Icon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$2$);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M7.4986 0C6.3257 0 5.36107 0.38943 4.73753 1.19361C4.23745 1.83856 4 2.68242 4 3.63325H5C5 2.84313 5.19691 2.23312 5.5278 1.80636C5.91615 1.30552 6.55152 1 7.4986 1C8.35683 1 8.96336 1.26502 9.35846 1.68623C9.75793 2.11211 10 2.76044 10 3.63601V6H3C2.44772 6 2 6.44772 2 7V13C2 13.5523 2.44772 14 3 14H12C12.5523 14 13 13.5523 13 13V7C13 6.44771 12.5523 6 12 6H11V3.63601C11 2.58135 10.7065 1.66167 10.0878 1.0021C9.46477 0.337871 8.57061 0 7.4986 0ZM3 7H12V13H3V7Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3b = ["color"];
var MixerVerticalIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3b);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M5 1.5C5 1.22386 4.77614 1 4.5 1C4.22386 1 4 1.22386 4 1.5L4 7C4 7.01671 4.00082 7.03323 4.00242 7.04952C2.86009 7.28022 2 8.28967 2 9.5C2 10.7103 2.86009 11.7198 4.00242 11.9505C4.00082 11.9668 4 11.9833 4 12V13.5C4 13.7761 4.22386 14 4.5 14C4.77614 14 5 13.7761 5 13.5V12C5 11.9833 4.99918 11.9668 4.99758 11.9505C6.1399 11.7198 7 10.7103 7 9.5C7 8.28967 6.1399 7.28022 4.99758 7.04952C4.99918 7.03323 5 7.01671 5 7L5 1.5ZM11 1.5C11 1.22386 10.7761 1 10.5 1C10.2239 1 10 1.22386 10 1.5V3C10 3.01671 10.0008 3.03323 10.0024 3.04952C8.8601 3.28022 8 4.28967 8 5.5C8 6.71033 8.8601 7.71978 10.0024 7.95048C10.0008 7.96677 10 7.98329 10 8V13.5C10 13.7761 10.2239 14 10.5 14C10.7761 14 11 13.7761 11 13.5V8C11 7.98329 10.9992 7.96677 10.9976 7.95048C12.1399 7.71978 13 6.71033 13 5.5C13 4.28967 12.1399 3.28022 10.9976 3.04952C10.9992 3.03323 11 3.01671 11 3V1.5ZM4.5 8C3.67157 8 3 8.67157 3 9.5C3 10.3284 3.67157 11 4.5 11C5.32843 11 6 10.3284 6 9.5C6 8.67157 5.32843 8 4.5 8ZM9 5.5C9 4.67157 9.67157 4 10.5 4C11.3284 4 12 4.67157 12 5.5C12 6.32843 11.3284 7 10.5 7C9.67157 7 9 6.32843 9 5.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3n = ["color"];
var Pencil1Icon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3n);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3o = ["color"];
var Pencil2Icon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3o);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3s = ["color"];
var PinBottomIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3s);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M13.5 13.95C13.7485 13.95 13.95 13.7485 13.95 13.5C13.95 13.2514 13.7485 13.05 13.5 13.05L1.49995 13.05C1.25142 13.05 1.04995 13.2514 1.04995 13.5C1.04995 13.7485 1.25142 13.95 1.49995 13.95L13.5 13.95ZM11.0681 7.5683C11.2439 7.39257 11.2439 7.10764 11.0681 6.93191C10.8924 6.75617 10.6075 6.75617 10.4317 6.93191L7.94993 9.41371L7.94993 1.49998C7.94993 1.25146 7.74846 1.04998 7.49993 1.04998C7.2514 1.04998 7.04993 1.25146 7.04993 1.49998L7.04993 9.41371L4.56813 6.93191C4.39239 6.75617 4.10746 6.75617 3.93173 6.93191C3.75599 7.10764 3.75599 7.39257 3.93173 7.5683L7.18173 10.8183C7.35746 10.994 7.64239 10.994 7.81812 10.8183L11.0681 7.5683Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3v = ["color"];
var PinTopIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3v);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1.50005 1.05005C1.25152 1.05005 1.05005 1.25152 1.05005 1.50005C1.05005 1.74858 1.25152 1.95005 1.50005 1.95005L13.5 1.95005C13.7486 1.95005 13.95 1.74858 13.95 1.50005C13.95 1.25152 13.7486 1.05005 13.5 1.05005H1.50005ZM3.93188 7.43169C3.75614 7.60743 3.75614 7.89236 3.93188 8.06809C4.10761 8.24383 4.39254 8.24383 4.56827 8.06809L7.05007 5.58629V13.5C7.05007 13.7485 7.25155 13.95 7.50007 13.95C7.7486 13.95 7.95007 13.7485 7.95007 13.5L7.95007 5.58629L10.4319 8.06809C10.6076 8.24383 10.8925 8.24383 11.0683 8.06809C11.244 7.89235 11.244 7.60743 11.0683 7.43169L7.81827 4.18169C7.64254 4.00596 7.35761 4.00596 7.18188 4.18169L3.93188 7.43169Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3x = ["color"];
var PlusIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3x);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3z = ["color"];
var QuestionMarkIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3z);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M5.07505 4.10001C5.07505 2.91103 6.25727 1.92502 7.50005 1.92502C8.74283 1.92502 9.92505 2.91103 9.92505 4.10001C9.92505 5.19861 9.36782 5.71436 8.61854 6.37884L8.58757 6.4063C7.84481 7.06467 6.92505 7.87995 6.92505 9.5C6.92505 9.81757 7.18248 10.075 7.50005 10.075C7.81761 10.075 8.07505 9.81757 8.07505 9.5C8.07505 8.41517 8.62945 7.90623 9.38156 7.23925L9.40238 7.22079C10.1496 6.55829 11.075 5.73775 11.075 4.10001C11.075 2.12757 9.21869 0.775024 7.50005 0.775024C5.7814 0.775024 3.92505 2.12757 3.92505 4.10001C3.92505 4.41758 4.18249 4.67501 4.50005 4.67501C4.81761 4.67501 5.07505 4.41758 5.07505 4.10001ZM7.50005 13.3575C7.9833 13.3575 8.37505 12.9657 8.37505 12.4825C8.37505 11.9992 7.9833 11.6075 7.50005 11.6075C7.0168 11.6075 6.62505 11.9992 6.62505 12.4825C6.62505 12.9657 7.0168 13.3575 7.50005 13.3575Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$3I = ["color"];
var RotateCounterClockwiseIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$3I);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M7.59664 2.93628C7.76085 3.06401 8.00012 2.94698 8.00012 2.73895V1.99998C9.98143 2 11.1848 2.3637 11.9105 3.08945C12.6363 3.81522 13 5.0186 13 6.99998C13 7.27613 13.2239 7.49998 13.5 7.49998C13.7761 7.49998 14 7.27613 14 6.99998C14 4.9438 13.6325 3.39719 12.6176 2.38234C11.6028 1.36752 10.0562 0.999999 8.00012 0.999984V0.261266C8.00012 0.0532293 7.76085 -0.0637944 7.59664 0.063928L6.00384 1.30277C5.87516 1.40286 5.87516 1.59735 6.00384 1.69744L7.59664 2.93628ZM9.5 5H2.5C2.22386 5 2 5.22386 2 5.5V12.5C2 12.7761 2.22386 13 2.5 13H9.5C9.77614 13 10 12.7761 10 12.5V5.5C10 5.22386 9.77614 5 9.5 5ZM2.5 4C1.67157 4 1 4.67157 1 5.5V12.5C1 13.3284 1.67157 14 2.5 14H9.5C10.3284 14 11 13.3284 11 12.5V5.5C11 4.67157 10.3284 4 9.5 4H2.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$42 = ["color"];
var SpaceEvenlyHorizontallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$42);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992ZM0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992ZM1.99998 6.99994C1.99998 6.44766 2.44769 5.99995 2.99998 5.99995L5.99995 5.99995C6.55223 5.99995 6.99994 6.44766 6.99994 6.99994L6.99994 7.99993C6.99994 8.55221 6.55223 8.99992 5.99995 8.99992L2.99998 8.99992C2.4477 8.99992 1.99998 8.55221 1.99998 7.99993L1.99998 6.99994ZM8.99993 5.99995C8.44765 5.99995 7.99993 6.44766 7.99993 6.99994L7.99993 7.99993C7.99993 8.55221 8.44765 8.99992 8.99993 8.99992L11.9999 8.99992C12.5522 8.99992 12.9999 8.55221 12.9999 7.99993L12.9999 6.99994C12.9999 6.44766 12.5522 5.99995 11.9999 5.99995L8.99993 5.99995Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$43 = ["color"];
var SpaceEvenlyVerticallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$43);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM7 2C6.44772 2 6 2.44772 6 3V6C6 6.55228 6.44772 7 7 7H8C8.55228 7 9 6.55228 9 6V3C9 2.44772 8.55228 2 8 2H7ZM7 8C6.44772 8 6 8.44771 6 9V12C6 12.5523 6.44772 13 7 13H8C8.55228 13 9 12.5523 9 12V9C9 8.44772 8.55228 8 8 8H7ZM1.49988 14C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H1.49988Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$48 = ["color"];
var SquareIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$48);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M1 1H1.5H13.5H14V1.5V13.5V14H13.5H1.5H1V13.5V1.5V1ZM2 2V13H13V2H2Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4f = ["color"];
var StretchHorizontallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4f);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M14.4999 0.999992C14.2237 0.999992 13.9999 1.22385 13.9999 1.49999L13.9999 5.99995L0.999992 5.99995L0.999992 1.49999C0.999992 1.22385 0.776136 0.999992 0.499996 0.999992C0.223856 0.999992 -9.78509e-09 1.22385 -2.18556e-08 1.49999L4.07279e-07 13.4999C3.95208e-07 13.776 0.223855 13.9999 0.499996 13.9999C0.776136 13.9999 0.999992 13.776 0.999992 13.4999L0.999992 8.99992L13.9999 8.99992L13.9999 13.4999C13.9999 13.776 14.2237 13.9999 14.4999 13.9999C14.776 13.9999 14.9999 13.776 14.9999 13.4999L14.9999 1.49999C14.9999 1.22385 14.776 0.999992 14.4999 0.999992Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4g = ["color"];
var StretchVerticallyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4g);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M0.999878 0.5C0.999878 0.223858 1.22374 0 1.49988 0H13.4999C13.776 0 13.9999 0.223858 13.9999 0.5C13.9999 0.776142 13.776 1 13.4999 1H6H1.49988C1.22374 1 0.999878 0.776142 0.999878 0.5ZM9 14V1L6 1V14H1.49988C1.22374 14 0.999878 14.2239 0.999878 14.5C0.999878 14.7761 1.22374 15 1.49988 15H13.4999C13.776 15 13.9999 14.7761 13.9999 14.5C13.9999 14.2239 13.776 14 13.4999 14H9Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4n = ["color"];
var TextIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4n);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4p = ["color"];
var TextAlignCenterIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4p);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H10.5C10.7761 7 11 7.22386 11 7.5C11 7.77614 10.7761 8 10.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM3 10.5C3 10.2239 3.22386 10 3.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H3.5C3.22386 11 3 10.7761 3 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4q = ["color"];
var TextAlignJustifyIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4q);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M2.5 4C2.22386 4 2 4.22386 2 4.5C2 4.77614 2.22386 5 2.5 5H12.5C12.7761 5 13 4.77614 13 4.5C13 4.22386 12.7761 4 12.5 4H2.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4r = ["color"];
var TextAlignLeftIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4r);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM2 7.5C2 7.22386 2.22386 7 2.5 7H7.5C7.77614 7 8 7.22386 8 7.5C8 7.77614 7.77614 8 7.5 8H2.5C2.22386 8 2 7.77614 2 7.5ZM2 10.5C2 10.2239 2.22386 10 2.5 10H10.5C10.7761 10 11 10.2239 11 10.5C11 10.7761 10.7761 11 10.5 11H2.5C2.22386 11 2 10.7761 2 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4t = ["color"];
var TextAlignRightIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4t);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M2 4.5C2 4.22386 2.22386 4 2.5 4H12.5C12.7761 4 13 4.22386 13 4.5C13 4.77614 12.7761 5 12.5 5H2.5C2.22386 5 2 4.77614 2 4.5ZM7 7.5C7 7.22386 7.22386 7 7.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H7.5C7.22386 8 7 7.77614 7 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H12.5C12.7761 10 13 10.2239 13 10.5C13 10.7761 12.7761 11 12.5 11H4.5C4.22386 11 4 10.7761 4 10.5Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});
var _excluded$4R = ["color"];
var VercelLogoIcon = /* @__PURE__ */ (0, import_react17.forwardRef)(function(_ref, forwardedRef) {
  var _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, props = _objectWithoutPropertiesLoose2(_ref, _excluded$4R);
  return (0, import_react17.createElement)("svg", Object.assign({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    ref: forwardedRef
  }), (0, import_react17.createElement)("path", {
    d: "M7.49998 1L6.92321 2.00307L1.17498 12L0.599976 13H1.7535H13.2464H14.4L13.825 12L8.07674 2.00307L7.49998 1ZM7.49998 3.00613L2.3285 12H12.6714L7.49998 3.00613Z",
    fill: color,
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
});

// ../../packages/tldraw/dist/index.mjs
var React332 = __toESM(require_react(), 1);
var React323 = __toESM(require_react(), 1);
var React572 = __toESM(require_react(), 1);
var React362 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-visually-hidden/dist/index.module.js
var r11 = __toESM(require_react());
var VisuallyHidden = /* @__PURE__ */ r11.forwardRef((i7, o10) => /* @__PURE__ */ r11.createElement(Primitive.span, _extends({}, i7, { ref: o10, style: __spreadValues({ position: "absolute", border: 0, width: 1, height: 1, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", wordWrap: "normal" }, i7.style) })));
var Root6 = VisuallyHidden;

// ../../node_modules/@radix-ui/react-use-previous/dist/index.module.js
var e12 = __toESM(require_react());
function usePrevious(r12) {
  const u5 = e12.useRef({ value: r12, previous: r12 });
  return e12.useMemo(() => (u5.current.value !== r12 && (u5.current.previous = u5.current.value, u5.current.value = r12), u5.current.previous), [r12]);
}

// ../../node_modules/@radix-ui/react-tooltip/dist/index.module.js
var T4 = __toESM(require_react());
var [w4, x3] = createContextScope("Tooltip", [l5]);
var g4 = l5();
var E4 = 700;
var [v3, b5] = w4("TooltipProvider", { isOpenDelayed: true, delayDuration: E4, onOpen: () => {
}, onClose: () => {
} });
var [y3, _2] = w4("Tooltip");
var Tooltip = (o10) => {
  const { __scopeTooltip: t12, children: r12, open: i7, defaultOpen: a6 = false, onOpenChange: l8, delayDuration: c8 } = o10, s9 = b5("Tooltip", t12), u5 = g4(t12), [d8, m8] = T4.useState(null), f8 = useId(), C6 = T4.useRef(0), w7 = c8 != null ? c8 : s9.delayDuration, x7 = T4.useRef(false), { onOpen: E7, onClose: v6 } = s9, [_4 = false, h6] = useControllableState({ prop: i7, defaultProp: a6, onChange: (e13) => {
    e13 && (document.dispatchEvent(new CustomEvent("tooltip.open")), E7()), l8 == null || l8(e13);
  } }), k4 = T4.useMemo(() => _4 ? x7.current ? "delayed-open" : "instant-open" : "closed", [_4]), D5 = T4.useCallback(() => {
    window.clearTimeout(C6.current), x7.current = false, h6(true);
  }, [h6]), O5 = T4.useCallback(() => {
    window.clearTimeout(C6.current), C6.current = window.setTimeout(() => {
      x7.current = true, h6(true);
    }, w7);
  }, [w7, h6]);
  return T4.useEffect(() => () => window.clearTimeout(C6.current), []), /* @__PURE__ */ T4.createElement(Root3, u5, /* @__PURE__ */ T4.createElement(y3, { scope: t12, contentId: f8, open: _4, stateAttribute: k4, trigger: d8, onTriggerChange: m8, onTriggerEnter: T4.useCallback(() => {
    s9.isOpenDelayed ? O5() : D5();
  }, [s9.isOpenDelayed, O5, D5]), onOpen: T4.useCallback(D5, [D5]), onClose: T4.useCallback(() => {
    window.clearTimeout(C6.current), h6(false), v6();
  }, [h6, v6]) }, r12));
};
var TooltipTrigger = /* @__PURE__ */ T4.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeTooltip: t12 } = _a3, r12 = __objRest(_a3, ["__scopeTooltip"]), i7 = _2("TooltipTrigger", t12), l8 = g4(t12), c8 = useComposedRefs(o10, i7.onTriggerChange), s9 = T4.useRef(false), u5 = T4.useCallback(() => s9.current = false, []);
  return T4.useEffect(() => () => document.removeEventListener("mouseup", u5), [u5]), /* @__PURE__ */ T4.createElement(Anchor, _extends({ asChild: true }, l8), /* @__PURE__ */ T4.createElement(Primitive.button, _extends({ "aria-describedby": i7.open ? i7.contentId : void 0, "data-state": i7.stateAttribute }, r12, { ref: c8, onMouseEnter: composeEventHandlers(e13.onMouseEnter, i7.onTriggerEnter), onMouseLeave: composeEventHandlers(e13.onMouseLeave, i7.onClose), onMouseDown: composeEventHandlers(e13.onMouseDown, () => {
    i7.onClose(), s9.current = true, document.addEventListener("mouseup", u5, { once: true });
  }), onFocus: composeEventHandlers(e13.onFocus, () => {
    s9.current || i7.onOpen();
  }), onBlur: composeEventHandlers(e13.onBlur, i7.onClose), onClick: composeEventHandlers(e13.onClick, (e14) => {
    e14.detail === 0 && i7.onClose();
  }) })));
});
var TooltipContent = /* @__PURE__ */ T4.forwardRef((e13, o10) => {
  const _a3 = e13, { forceMount: t12 } = _a3, r12 = __objRest(_a3, ["forceMount"]), n6 = _2("TooltipContent", e13.__scopeTooltip);
  return T4.createElement(Presence, { present: t12 || n6.open }, /* @__PURE__ */ T4.createElement(h3, _extends({ ref: o10 }, r12)));
});
var h3 = /* @__PURE__ */ T4.forwardRef((e13, i7) => {
  const _a3 = e13, { __scopeTooltip: a6, children: l8, "aria-label": c8, portalled: s9 = true } = _a3, p7 = __objRest(_a3, ["__scopeTooltip", "children", "aria-label", "portalled"]), d8 = _2("TooltipContent", a6), m8 = g4(a6), f8 = s9 ? Portal : T4.Fragment, { onClose: w7 } = d8;
  return useEscapeKeydown(() => w7()), T4.useEffect(() => (document.addEventListener("tooltip.open", w7), () => document.removeEventListener("tooltip.open", w7)), [w7]), /* @__PURE__ */ T4.createElement(f8, null, /* @__PURE__ */ T4.createElement(k3, { __scopeTooltip: a6 }), /* @__PURE__ */ T4.createElement(Content, _extends({ "data-state": d8.stateAttribute }, m8, p7, { ref: i7, style: __spreadProps(__spreadValues({}, p7.style), { "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)" }) }), /* @__PURE__ */ T4.createElement(Slottable, null, l8), /* @__PURE__ */ T4.createElement(Root6, { id: d8.contentId, role: "tooltip" }, c8 || l8)));
});
var TooltipArrow = /* @__PURE__ */ T4.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeTooltip: t12 } = _a3, r12 = __objRest(_a3, ["__scopeTooltip"]), i7 = g4(t12);
  return T4.createElement(Arrow2, _extends({}, i7, r12, { ref: o10 }));
});
function k3(e13) {
  const { __scopeTooltip: o10 } = e13, t12 = _2("CheckTriggerMoved", o10), r12 = useRect(t12.trigger), n6 = r12 == null ? void 0 : r12.left, i7 = usePrevious(n6), a6 = r12 == null ? void 0 : r12.top, l8 = usePrevious(a6), u5 = t12.onClose;
  return T4.useEffect(() => {
    (i7 !== void 0 && i7 !== n6 || l8 !== void 0 && l8 !== a6) && u5();
  }, [u5, i7, l8, n6, a6]), null;
}
var Root7 = Tooltip;
var Trigger2 = TooltipTrigger;
var Content4 = TooltipContent;
var Arrow5 = TooltipArrow;

// ../../packages/tldraw/dist/index.mjs
var React352 = __toESM(require_react(), 1);
var React562 = __toESM(require_react(), 1);
var React372 = __toESM(require_react(), 1);
var React382 = __toESM(require_react(), 1);
var React392 = __toESM(require_react(), 1);
var React402 = __toESM(require_react(), 1);
var React412 = __toESM(require_react(), 1);
var React422 = __toESM(require_react(), 1);
var React432 = __toESM(require_react(), 1);
var React442 = __toESM(require_react(), 1);
var React452 = __toESM(require_react(), 1);
var React462 = __toESM(require_react(), 1);
var React472 = __toESM(require_react(), 1);
var React482 = __toESM(require_react(), 1);
var React492 = __toESM(require_react(), 1);
var React502 = __toESM(require_react(), 1);
var React512 = __toESM(require_react(), 1);
var React522 = __toESM(require_react(), 1);
var React532 = __toESM(require_react(), 1);
var React542 = __toESM(require_react(), 1);
var React552 = __toESM(require_react(), 1);
var React63 = __toESM(require_react(), 1);
var React582 = __toESM(require_react(), 1);
var React592 = __toESM(require_react(), 1);
var React602 = __toESM(require_react(), 1);
var React61 = __toESM(require_react(), 1);
var React622 = __toESM(require_react(), 1);
var React64 = __toESM(require_react(), 1);
var React67 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-popover/dist/index.module.js
var v4 = __toESM(require_react());
var [C3, g5] = createContextScope("Popover", [l5]);
var x4 = l5();
var [h4, E5] = C3("Popover");
var Popover = (e13) => {
  const { __scopePopover: o10, children: t12, open: n6, defaultOpen: c8, onOpenChange: a6, modal: s9 = false } = e13, i7 = x4(o10), u5 = v4.useRef(null), [d8, m8] = v4.useState(false), [f8 = false, P3] = useControllableState({ prop: n6, defaultProp: c8, onChange: a6 });
  return v4.createElement(Root3, i7, /* @__PURE__ */ v4.createElement(h4, { scope: o10, contentId: useId(), triggerRef: u5, open: f8, onOpenChange: P3, onOpenToggle: v4.useCallback(() => P3((e14) => !e14), [P3]), hasCustomAnchor: d8, onCustomAnchorAdd: v4.useCallback(() => m8(true), []), onCustomAnchorRemove: v4.useCallback(() => m8(false), []), modal: s9 }, t12));
};
var PopoverAnchor = /* @__PURE__ */ v4.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopePopover: r12 } = _a3, t12 = __objRest(_a3, ["__scopePopover"]), n6 = E5("PopoverAnchor", r12), c8 = x4(r12), { onCustomAnchorAdd: a6, onCustomAnchorRemove: s9 } = n6;
  return v4.useEffect(() => (a6(), () => s9()), [a6, s9]), /* @__PURE__ */ v4.createElement(Anchor, _extends({}, c8, t12, { ref: o10 }));
});
var PopoverTrigger = /* @__PURE__ */ v4.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopePopover: r12 } = _a3, n6 = __objRest(_a3, ["__scopePopover"]), c8 = E5("PopoverTrigger", r12), a6 = x4(r12), s9 = useComposedRefs(o10, c8.triggerRef), i7 = /* @__PURE__ */ v4.createElement(Primitive.button, _extends({ type: "button", "aria-haspopup": "dialog", "aria-expanded": c8.open, "aria-controls": c8.contentId, "data-state": w5(c8.open) }, n6, { ref: s9, onClick: composeEventHandlers(e13.onClick, c8.onOpenToggle) }));
  return c8.hasCustomAnchor ? i7 : /* @__PURE__ */ v4.createElement(Anchor, _extends({ asChild: true }, a6), i7);
});
var PopoverContent = /* @__PURE__ */ v4.forwardRef((e13, o10) => {
  const _a3 = e13, { forceMount: r12 } = _a3, t12 = __objRest(_a3, ["forceMount"]), c8 = E5("PopoverContent", e13.__scopePopover);
  return v4.createElement(Presence, { present: r12 || c8.open }, c8.modal ? /* @__PURE__ */ v4.createElement(A3, _extends({}, t12, { ref: o10 })) : /* @__PURE__ */ v4.createElement(O3, _extends({}, t12, { ref: o10 })));
});
var A3 = /* @__PURE__ */ v4.forwardRef((r12, t12) => {
  const _a3 = r12, { allowPinchZoom: n6, portalled: c8 = true } = _a3, s9 = __objRest(_a3, ["allowPinchZoom", "portalled"]), i7 = E5("PopoverContent", r12.__scopePopover), p7 = v4.useRef(null), u5 = useComposedRefs(t12, p7), l8 = v4.useRef(false);
  v4.useEffect(() => {
    const o10 = p7.current;
    if (o10)
      return hideOthers(o10);
  }, []);
  const d8 = c8 ? Portal : v4.Fragment;
  return v4.createElement(d8, null, /* @__PURE__ */ v4.createElement(Combination_default, { allowPinchZoom: n6 }, /* @__PURE__ */ v4.createElement(R5, _extends({}, s9, { ref: u5, trapFocus: i7.open, disableOutsidePointerEvents: true, onCloseAutoFocus: composeEventHandlers(r12.onCloseAutoFocus, (e13) => {
    var o10;
    e13.preventDefault(), l8.current || (o10 = i7.triggerRef.current) === null || o10 === void 0 || o10.focus();
  }), onPointerDownOutside: composeEventHandlers(r12.onPointerDownOutside, (e13) => {
    const o10 = e13.detail.originalEvent, r13 = o10.button === 0 && o10.ctrlKey === true, t13 = o10.button === 2 || r13;
    l8.current = t13;
  }, { checkForDefaultPrevented: false }), onFocusOutside: composeEventHandlers(r12.onFocusOutside, (e13) => e13.preventDefault(), { checkForDefaultPrevented: false }) }))));
});
var O3 = /* @__PURE__ */ v4.forwardRef((e13, o10) => {
  const _a3 = e13, { portalled: r12 = true } = _a3, t12 = __objRest(_a3, ["portalled"]), n6 = E5("PopoverContent", e13.__scopePopover), c8 = v4.useRef(false), s9 = r12 ? Portal : v4.Fragment;
  return v4.createElement(s9, null, /* @__PURE__ */ v4.createElement(R5, _extends({}, t12, { ref: o10, trapFocus: false, disableOutsidePointerEvents: false, onCloseAutoFocus: (o11) => {
    var r13, t13;
    ((r13 = e13.onCloseAutoFocus) === null || r13 === void 0 || r13.call(e13, o11), o11.defaultPrevented) || (c8.current || (t13 = n6.triggerRef.current) === null || t13 === void 0 || t13.focus(), o11.preventDefault());
    c8.current = false;
  }, onInteractOutside: (o11) => {
    var r13, t13;
    (r13 = e13.onInteractOutside) === null || r13 === void 0 || r13.call(e13, o11), o11.defaultPrevented || (c8.current = true);
    const a6 = o11.target;
    ((t13 = n6.triggerRef.current) === null || t13 === void 0 ? void 0 : t13.contains(a6)) && o11.preventDefault();
  } })));
});
var R5 = /* @__PURE__ */ v4.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopePopover: r12, trapFocus: t12, onOpenAutoFocus: n6, onCloseAutoFocus: a6, disableOutsidePointerEvents: u5, onEscapeKeyDown: l8, onPointerDownOutside: d8, onFocusOutside: m8, onInteractOutside: f8 } = _a3, C6 = __objRest(_a3, ["__scopePopover", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside"]), g7 = E5("PopoverContent", r12), h6 = x4(r12);
  return useFocusGuards(), /* @__PURE__ */ v4.createElement(FocusScope, { asChild: true, loop: true, trapped: t12, onMountAutoFocus: n6, onUnmountAutoFocus: a6 }, /* @__PURE__ */ v4.createElement(DismissableLayer, { asChild: true, disableOutsidePointerEvents: u5, onInteractOutside: f8, onEscapeKeyDown: l8, onPointerDownOutside: d8, onFocusOutside: m8, onDismiss: () => g7.onOpenChange(false) }, /* @__PURE__ */ v4.createElement(Content, _extends({ "data-state": w5(g7.open), role: "dialog", id: g7.contentId }, h6, C6, { ref: o10, style: __spreadProps(__spreadValues({}, C6.style), { "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)" }) }))));
});
function w5(e13) {
  return e13 ? "open" : "closed";
}
var Root8 = Popover;
var Anchor3 = PopoverAnchor;
var Trigger3 = PopoverTrigger;
var Content5 = PopoverContent;

// ../../packages/tldraw/dist/index.mjs
var React65 = __toESM(require_react(), 1);
var React66 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-dialog/dist/index.module.js
var m6 = __toESM(require_react());
var [x5, C4] = createContextScope("Dialog");
var [v5, E6] = x5("Dialog");
var Dialog = (e13) => {
  const { __scopeDialog: o10, children: t12, open: r12, defaultOpen: n6, onOpenChange: a6, modal: i7 = true, allowPinchZoom: l8 } = e13, c8 = m6.useRef(null), p7 = m6.useRef(null), [d8 = false, f8] = useControllableState({ prop: r12, defaultProp: n6, onChange: a6 });
  return m6.createElement(v5, { scope: o10, triggerRef: c8, contentRef: p7, contentId: useId(), titleId: useId(), descriptionId: useId(), open: d8, onOpenChange: f8, onOpenToggle: m6.useCallback(() => f8((e14) => !e14), [f8]), modal: i7, allowPinchZoom: l8 }, t12);
};
var DialogTrigger = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeDialog: t12 } = _a3, r12 = __objRest(_a3, ["__scopeDialog"]), a6 = E6("DialogTrigger", t12), i7 = useComposedRefs(o10, a6.triggerRef);
  return m6.createElement(Primitive.button, _extends({ type: "button", "aria-haspopup": "dialog", "aria-expanded": a6.open, "aria-controls": a6.contentId, "data-state": b6(a6.open) }, r12, { ref: i7, onClick: composeEventHandlers(e13.onClick, a6.onOpenToggle) }));
});
var DialogPortal = (e13) => {
  const { __scopeDialog: o10, forceMount: t12, children: r12, container: n6 } = e13, l8 = E6("DialogPortal", o10);
  return m6.createElement(m6.Fragment, null, m6.Children.map(r12, (e14) => /* @__PURE__ */ m6.createElement(Presence, { present: t12 || l8.open }, /* @__PURE__ */ m6.createElement(UnstablePortal, { asChild: true, container: n6 }, e14))));
};
var DialogOverlay = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { forceMount: t12 } = _a3, r12 = __objRest(_a3, ["forceMount"]), n6 = E6("DialogOverlay", e13.__scopeDialog);
  return n6.modal ? /* @__PURE__ */ m6.createElement(Presence, { present: t12 || n6.open }, /* @__PURE__ */ m6.createElement(R6, _extends({}, r12, { ref: o10 }))) : null;
});
var R6 = /* @__PURE__ */ m6.forwardRef((o10, r12) => {
  const _a3 = o10, { __scopeDialog: a6 } = _a3, i7 = __objRest(_a3, ["__scopeDialog"]), l8 = E6("DialogOverlay", a6);
  return m6.createElement(Combination_default, { as: Slot, allowPinchZoom: l8.allowPinchZoom, shards: [l8.contentRef] }, /* @__PURE__ */ m6.createElement(Primitive.div, _extends({ "data-state": b6(l8.open) }, i7, { ref: r12, style: __spreadValues({ pointerEvents: "auto" }, i7.style) })));
});
var DialogContent = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { forceMount: t12 } = _a3, r12 = __objRest(_a3, ["forceMount"]), n6 = E6("DialogContent", e13.__scopeDialog);
  return m6.createElement(Presence, { present: t12 || n6.open }, n6.modal ? /* @__PURE__ */ m6.createElement(_3, _extends({}, r12, { ref: o10 })) : /* @__PURE__ */ m6.createElement(O4, _extends({}, r12, { ref: o10 })));
});
var _3 = /* @__PURE__ */ m6.forwardRef((e13, t12) => {
  const r12 = E6("DialogContent", e13.__scopeDialog), n6 = m6.useRef(null), a6 = useComposedRefs(t12, r12.contentRef, n6);
  return m6.useEffect(() => {
    const e14 = n6.current;
    if (e14)
      return hideOthers(e14);
  }, []), /* @__PURE__ */ m6.createElement(h5, _extends({}, e13, { ref: a6, trapFocus: r12.open, disableOutsidePointerEvents: true, onCloseAutoFocus: composeEventHandlers(e13.onCloseAutoFocus, (e14) => {
    var o10;
    e14.preventDefault(), (o10 = r12.triggerRef.current) === null || o10 === void 0 || o10.focus();
  }), onPointerDownOutside: composeEventHandlers(e13.onPointerDownOutside, (e14) => {
    const o10 = e14.detail.originalEvent, t13 = o10.button === 0 && o10.ctrlKey === true;
    (o10.button === 2 || t13) && e14.preventDefault();
  }), onFocusOutside: composeEventHandlers(e13.onFocusOutside, (e14) => e14.preventDefault()) }));
});
var O4 = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const t12 = E6("DialogContent", e13.__scopeDialog), r12 = m6.useRef(false);
  return m6.createElement(h5, _extends({}, e13, { ref: o10, trapFocus: false, disableOutsidePointerEvents: false, onCloseAutoFocus: (o11) => {
    var n6, a6;
    ((n6 = e13.onCloseAutoFocus) === null || n6 === void 0 || n6.call(e13, o11), o11.defaultPrevented) || (r12.current || (a6 = t12.triggerRef.current) === null || a6 === void 0 || a6.focus(), o11.preventDefault());
    r12.current = false;
  }, onInteractOutside: (o11) => {
    var n6, a6;
    (n6 = e13.onInteractOutside) === null || n6 === void 0 || n6.call(e13, o11), o11.defaultPrevented || (r12.current = true);
    const i7 = o11.target;
    ((a6 = t12.triggerRef.current) === null || a6 === void 0 ? void 0 : a6.contains(i7)) && o11.preventDefault();
  } }));
});
var h5 = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeDialog: t12, trapFocus: n6, onOpenAutoFocus: a6, onCloseAutoFocus: i7 } = _a3, s9 = __objRest(_a3, ["__scopeDialog", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus"]), u5 = E6("DialogContent", t12), p7 = m6.useRef(null), d8 = useComposedRefs(o10, p7);
  return useFocusGuards(), /* @__PURE__ */ m6.createElement(m6.Fragment, null, /* @__PURE__ */ m6.createElement(FocusScope, { asChild: true, loop: true, trapped: n6, onMountAutoFocus: a6, onUnmountAutoFocus: i7 }, /* @__PURE__ */ m6.createElement(DismissableLayer, _extends({ role: "dialog", id: u5.contentId, "aria-describedby": u5.descriptionId, "aria-labelledby": u5.titleId, "data-state": b6(u5.open) }, s9, { ref: d8, onDismiss: () => u5.onOpenChange(false) }))), false);
});
var DialogTitle = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeDialog: t12 } = _a3, r12 = __objRest(_a3, ["__scopeDialog"]), a6 = E6("DialogTitle", t12);
  return m6.createElement(Primitive.h2, _extends({ id: a6.titleId }, r12, { ref: o10 }));
});
var DialogClose = /* @__PURE__ */ m6.forwardRef((e13, o10) => {
  const _a3 = e13, { __scopeDialog: t12 } = _a3, r12 = __objRest(_a3, ["__scopeDialog"]), a6 = E6("DialogClose", t12);
  return m6.createElement(Primitive.button, _extends({ type: "button" }, r12, { ref: o10, onClick: composeEventHandlers(e13.onClick, () => a6.onOpenChange(false)) }));
});
function b6(e13) {
  return e13 ? "open" : "closed";
}
var [w6, F5] = createContext5("DialogTitleWarning", { contentName: "DialogContent", titleName: "DialogTitle", docsSlug: "dialog" });
var Root9 = Dialog;
var Trigger4 = DialogTrigger;
var Portal2 = DialogPortal;
var Overlay3 = DialogOverlay;
var Content6 = DialogContent;
var Title = DialogTitle;
var Close = DialogClose;

// ../../packages/tldraw/dist/index.mjs
var React78 = __toESM(require_react(), 1);
var React70 = __toESM(require_react(), 1);
var React69 = __toESM(require_react(), 1);
var React73 = __toESM(require_react(), 1);
var React722 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-alert-dialog/dist/index.module.js
var a5 = __toESM(require_react());
var [c7, s7] = createContextScope("AlertDialog", [C4]);
var p5 = C4();
var AlertDialog = (e13) => {
  const _a3 = e13, { __scopeAlertDialog: t12 } = _a3, o10 = __objRest(_a3, ["__scopeAlertDialog"]), l8 = p5(t12);
  return a5.createElement(Root9, _extends({}, l8, o10, { modal: true }));
};
var AlertDialogTrigger = /* @__PURE__ */ a5.forwardRef((e13, t12) => {
  const _a3 = e13, { __scopeAlertDialog: o10 } = _a3, l8 = __objRest(_a3, ["__scopeAlertDialog"]), n6 = p5(o10);
  return a5.createElement(Trigger4, _extends({}, n6, l8, { ref: t12 }));
});
var AlertDialogPortal = (e13) => {
  const _a3 = e13, { __scopeAlertDialog: t12 } = _a3, o10 = __objRest(_a3, ["__scopeAlertDialog"]), l8 = p5(t12);
  return a5.createElement(Portal2, _extends({}, l8, o10));
};
var AlertDialogOverlay = /* @__PURE__ */ a5.forwardRef((e13, t12) => {
  const _a3 = e13, { __scopeAlertDialog: o10 } = _a3, l8 = __objRest(_a3, ["__scopeAlertDialog"]), n6 = p5(o10);
  return a5.createElement(Overlay3, _extends({}, n6, l8, { ref: t12 }));
});
var [g6, D4] = c7("AlertDialogContent");
var AlertDialogContent = /* @__PURE__ */ a5.forwardRef((o10, n6) => {
  const _a3 = o10, { __scopeAlertDialog: c8, children: s9 } = _a3, D5 = __objRest(_a3, ["__scopeAlertDialog", "children"]), A4 = p5(c8), m8 = a5.useRef(null), u5 = useComposedRefs(n6, m8), x7 = a5.useRef(null);
  return a5.createElement(w6, { contentName: "AlertDialogContent", titleName: f6, docsSlug: "alert-dialog" }, /* @__PURE__ */ a5.createElement(g6, { scope: c8, cancelRef: x7 }, /* @__PURE__ */ a5.createElement(Content6, _extends({ role: "alertdialog" }, A4, D5, { ref: u5, onOpenAutoFocus: composeEventHandlers(D5.onOpenAutoFocus, (e13) => {
    var t12;
    e13.preventDefault(), (t12 = x7.current) === null || t12 === void 0 || t12.focus({ preventScroll: true });
  }), onPointerDownOutside: (e13) => e13.preventDefault(), onInteractOutside: (e13) => e13.preventDefault() }), /* @__PURE__ */ a5.createElement(Slottable, null, s9), false)));
});
var f6 = "AlertDialogTitle";
var AlertDialogAction = /* @__PURE__ */ a5.forwardRef((e13, t12) => {
  const _a3 = e13, { __scopeAlertDialog: o10 } = _a3, l8 = __objRest(_a3, ["__scopeAlertDialog"]), n6 = p5(o10);
  return a5.createElement(Close, _extends({}, n6, l8, { ref: t12 }));
});
var AlertDialogCancel = /* @__PURE__ */ a5.forwardRef((e13, t12) => {
  const _a3 = e13, { __scopeAlertDialog: o10 } = _a3, n6 = __objRest(_a3, ["__scopeAlertDialog"]), { cancelRef: c8 } = D4("AlertDialogCancel", o10), s9 = p5(o10), g7 = useComposedRefs(t12, c8);
  return a5.createElement(Close, _extends({}, s9, n6, { ref: g7 }));
});
var Root10 = AlertDialog;
var Trigger5 = AlertDialogTrigger;
var Portal3 = AlertDialogPortal;
var Overlay4 = AlertDialogOverlay;
var Content7 = AlertDialogContent;
var Action = AlertDialogAction;
var Cancel = AlertDialogCancel;

// ../../packages/tldraw/dist/index.mjs
var React71 = __toESM(require_react(), 1);
var React74 = __toESM(require_react(), 1);
var React75 = __toESM(require_react(), 1);
var React77 = __toESM(require_react(), 1);
var React76 = __toESM(require_react(), 1);
var React79 = __toESM(require_react(), 1);

// ../../node_modules/@radix-ui/react-context-menu/dist/index.module.js
var u4 = __toESM(require_react());
var [s8, i6] = createContextScope("ContextMenu", [S2]);
var x6 = S2();
var [p6, C5] = s8("ContextMenu");
var ContextMenu = (n6) => {
  const { __scopeContextMenu: o10, children: r12, onOpenChange: c8, dir: s9, modal: i7 = true } = n6, [C6, m8] = u4.useState(false), f8 = l7("ContextMenu", o10), d8 = x6(o10), M3 = useCallbackRef(c8), R7 = u4.useCallback((e13) => {
    m8(e13), M3(e13);
  }, [M3]);
  return f8.isInsideContent ? /* @__PURE__ */ u4.createElement(p6, { scope: o10, isRootMenu: false, open: C6, onOpenChange: R7, modal: i7 }, /* @__PURE__ */ u4.createElement(Sub, _extends({}, d8, { open: C6, onOpenChange: R7 }), r12)) : /* @__PURE__ */ u4.createElement(p6, { scope: o10, isRootMenu: true, open: C6, onOpenChange: R7, modal: i7 }, /* @__PURE__ */ u4.createElement(Root4, _extends({}, d8, { dir: s9, open: C6, onOpenChange: R7, modal: i7 }), r12));
};
var ContextMenuTrigger = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: r12 } = _a3, s9 = __objRest(_a3, ["__scopeContextMenu"]), i7 = C5("ContextMenuTrigger", r12), p7 = x6(r12), l8 = u4.useRef({ x: 0, y: 0 }), f8 = u4.useRef({ getBoundingClientRect: () => DOMRect.fromRect(__spreadValues({ width: 0, height: 0 }, l8.current)) }), M3 = u4.useRef(0), R7 = u4.useCallback(() => window.clearTimeout(M3.current), []), _4 = (e14) => {
    l8.current = { x: e14.clientX, y: e14.clientY }, i7.onOpenChange(true);
  };
  return u4.useEffect(() => R7, [R7]), /* @__PURE__ */ u4.createElement(m7, { scope: r12, isInsideContent: false }, /* @__PURE__ */ u4.createElement(Anchor2, _extends({}, p7, { virtualRef: f8 })), /* @__PURE__ */ u4.createElement(Primitive.span, _extends({}, s9, { ref: n6, style: __spreadValues({ WebkitTouchCallout: "none" }, e13.style), onContextMenu: composeEventHandlers(e13.onContextMenu, (e14) => {
    R7(), e14.preventDefault(), _4(e14);
  }), onPointerDown: composeEventHandlers(e13.onPointerDown, d7((e14) => {
    R7(), M3.current = window.setTimeout(() => _4(e14), 700);
  })), onPointerMove: composeEventHandlers(e13.onPointerMove, d7(R7)), onPointerCancel: composeEventHandlers(e13.onPointerCancel, d7(R7)), onPointerUp: composeEventHandlers(e13.onPointerUp, d7(R7)) })));
});
var [m7, l7] = s8("ContextMenuContent", { isInsideContent: false });
var ContextMenuContent = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: o10 } = _a3, r12 = __objRest(_a3, ["__scopeContextMenu"]), c8 = C5("ContextMenuContent", o10), s9 = x6(o10), i7 = __spreadProps(__spreadValues({}, r12), { style: __spreadProps(__spreadValues({}, e13.style), { "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)" }) });
  return u4.createElement(m7, { scope: o10, isInsideContent: true }, c8.isRootMenu ? /* @__PURE__ */ u4.createElement(f7, _extends({ __scopeContextMenu: o10 }, i7, { ref: n6 })) : /* @__PURE__ */ u4.createElement(Content2, _extends({}, s9, i7, { ref: n6 })));
});
var f7 = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: o10 } = _a3, r12 = __objRest(_a3, ["__scopeContextMenu"]), c8 = C5("ContextMenuContent", o10), s9 = x6(o10), i7 = u4.useRef(false);
  return u4.createElement(Content2, _extends({}, s9, r12, { ref: n6, portalled: true, side: "right", sideOffset: 2, align: "start", onCloseAutoFocus: (t12) => {
    var n7;
    (n7 = e13.onCloseAutoFocus) === null || n7 === void 0 || n7.call(e13, t12), !t12.defaultPrevented && i7.current && t12.preventDefault(), i7.current = false;
  }, onInteractOutside: (t12) => {
    var n7;
    (n7 = e13.onInteractOutside) === null || n7 === void 0 || n7.call(e13, t12), t12.defaultPrevented || c8.modal || (i7.current = true);
  } }));
});
var ContextMenuItem = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: o10 } = _a3, r12 = __objRest(_a3, ["__scopeContextMenu"]), c8 = x6(o10);
  return u4.createElement(Item2, _extends({}, c8, r12, { ref: n6 }));
});
var ContextMenuTriggerItem = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: o10 } = _a3, r12 = __objRest(_a3, ["__scopeContextMenu"]), c8 = x6(o10);
  return u4.createElement(SubTrigger, _extends({}, c8, r12, { ref: n6 }));
});
var ContextMenuArrow = /* @__PURE__ */ u4.forwardRef((e13, n6) => {
  const _a3 = e13, { __scopeContextMenu: o10 } = _a3, r12 = __objRest(_a3, ["__scopeContextMenu"]), c8 = x6(o10);
  return u4.createElement(Arrow3, _extends({}, c8, r12, { ref: n6 }));
});
function d7(e13) {
  return (t12) => t12.pointerType !== "mouse" ? e13(t12) : void 0;
}
var Root11 = ContextMenu;
var Trigger6 = ContextMenuTrigger;
var Content8 = ContextMenuContent;

// ../../packages/tldraw/dist/index.mjs
var React80 = __toESM(require_react(), 1);
var React81 = __toESM(require_react(), 1);
var import_react_error_boundary = __toESM(require_react_error_boundary_umd(), 1);
var React822 = __toESM(require_react(), 1);
var __defProp4 = Object.defineProperty;
var __defProps4 = Object.defineProperties;
var __getOwnPropDescs4 = Object.getOwnPropertyDescriptors;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getOwnPropSymbols4 = Object.getOwnPropertySymbols;
var __hasOwnProp4 = Object.prototype.hasOwnProperty;
var __propIsEnum4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues4 = (a6, b7) => {
  for (var prop in b7 || (b7 = {}))
    if (__hasOwnProp4.call(b7, prop))
      __defNormalProp4(a6, prop, b7[prop]);
  if (__getOwnPropSymbols4)
    for (var prop of __getOwnPropSymbols4(b7)) {
      if (__propIsEnum4.call(b7, prop))
        __defNormalProp4(a6, prop, b7[prop]);
    }
  return a6;
};
var __spreadProps4 = (a6, b7) => __defProps4(a6, __getOwnPropDescs4(b7));
var __objRest3 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp4.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols4)
    for (var prop of __getOwnPropSymbols4(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum4.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp4(target, name, { get: all[name], enumerable: true });
};
var __publicField2 = (obj, key, value) => {
  __defNormalProp4(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async2 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject2) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e13) {
        reject2(e13);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e13) {
        reject2(e13);
      }
    };
    var step = (x7) => x7.done ? resolve(x7.value) : Promise.resolve(x7.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var supported;
var supported_default;
var init_supported = __esm({
  "src/state/data/browser-fs-access/supported.js"() {
    supported = (() => {
      if (typeof self === "undefined") {
        return false;
      }
      if ("top" in self && self !== top) {
        try {
          top.location + "";
        } catch (e13) {
          return false;
        }
      } else if ("showOpenFilePicker" in self) {
        return "showOpenFilePicker";
      }
      return false;
    })();
    supported_default = supported;
  }
});
var file_open_exports = {};
__export(file_open_exports, {
  default: () => file_open_default
});
var file_open_default;
var init_file_open = __esm({
  "src/state/data/browser-fs-access/legacy/file-open.js"() {
    file_open_default = (..._0) => __async2(void 0, [..._0], function* (options2 = [{}]) {
      if (!Array.isArray(options2)) {
        options2 = [options2];
      }
      return new Promise((resolve, reject2) => {
        const input = document.createElement("input");
        input.type = "file";
        const accept = [
          ...options2.map((option) => option.mimeTypes || []).join(),
          options2.map((option) => option.extensions || []).join()
        ].join();
        input.multiple = options2[0].multiple || false;
        input.accept = accept || "";
        const _reject = () => cleanupListenersAndMaybeReject(reject2);
        const _resolve = (value) => {
          if (typeof cleanupListenersAndMaybeReject === "function") {
            cleanupListenersAndMaybeReject();
          }
          resolve(value);
        };
        const cleanupListenersAndMaybeReject = options2[0].legacySetup && options2[0].legacySetup(_resolve, _reject, input);
        input.addEventListener("change", () => {
          _resolve(input.multiple ? Array.from(input.files) : input.files[0]);
        });
        input.click();
      });
    });
  }
});
var file_open_exports2 = {};
__export(file_open_exports2, {
  default: () => file_open_default2
});
var getFileWithHandle;
var file_open_default2;
var init_file_open2 = __esm({
  "src/state/data/browser-fs-access/fs-access/file-open.js"() {
    getFileWithHandle = (handle) => __async2(void 0, null, function* () {
      const file = yield handle.getFile();
      file.handle = handle;
      return file;
    });
    file_open_default2 = (..._0) => __async2(void 0, [..._0], function* (options2 = [{}]) {
      if (!Array.isArray(options2)) {
        options2 = [options2];
      }
      const types = [];
      options2.forEach((option, i7) => {
        types[i7] = {
          description: option.description || "",
          accept: {}
        };
        if (option.mimeTypes) {
          option.mimeTypes.map((mimeType) => {
            types[i7].accept[mimeType] = option.extensions || [];
          });
        } else {
          types[i7].accept["*/*"] = option.extensions || [];
        }
      });
      const handleOrHandles = yield window.showOpenFilePicker({
        id: options2[0].id,
        startIn: options2[0].startIn,
        types,
        multiple: options2[0].multiple || false,
        excludeAcceptAllOption: options2[0].excludeAcceptAllOption || false
      });
      const files = yield Promise.all(handleOrHandles.map(getFileWithHandle));
      if (options2[0].multiple) {
        return files;
      }
      return files[0];
    });
  }
});
function fileOpen(...args) {
  return __async2(this, null, function* () {
    return (yield implementation).default(...args);
  });
}
var implementation;
var init_file_open3 = __esm({
  "src/state/data/browser-fs-access/file-open.js"() {
    init_supported();
    implementation = !supported_default ? Promise.resolve().then(() => (init_file_open(), file_open_exports)) : Promise.resolve().then(() => (init_file_open2(), file_open_exports2));
  }
});
var directory_open_exports = {};
__export(directory_open_exports, {
  default: () => directory_open_default
});
var directory_open_default;
var init_directory_open = __esm({
  "src/state/data/browser-fs-access/legacy/directory-open.js"() {
    directory_open_default = (..._0) => __async2(void 0, [..._0], function* (options2 = [{}]) {
      if (!Array.isArray(options2)) {
        options2 = [options2];
      }
      options2[0].recursive = options2[0].recursive || false;
      return new Promise((resolve, reject2) => {
        const input = document.createElement("input");
        input.type = "file";
        input.webkitdirectory = true;
        const _reject = () => cleanupListenersAndMaybeReject(reject2);
        const _resolve = (value) => {
          if (typeof cleanupListenersAndMaybeReject === "function") {
            cleanupListenersAndMaybeReject();
          }
          resolve(value);
        };
        const cleanupListenersAndMaybeReject = options2[0].legacySetup && options2[0].legacySetup(_resolve, _reject, input);
        input.addEventListener("change", () => {
          let files = Array.from(input.files);
          if (!options2[0].recursive) {
            files = files.filter((file) => {
              return file.webkitRelativePath.split("/").length === 2;
            });
          } else if (options2[0].recursive && options2[0].skipDirectory) {
            files = files.filter((file) => {
              const directoriesName = file.webkitRelativePath.split("/");
              return directoriesName.every((directoryName) => !options2[0].skipDirectory({
                name: directoryName,
                kind: "directory"
              }));
            });
          }
          _resolve(files);
        });
        input.click();
      });
    });
  }
});
var directory_open_exports2 = {};
__export(directory_open_exports2, {
  default: () => directory_open_default2
});
var getFiles;
var directory_open_default2;
var init_directory_open2 = __esm({
  "src/state/data/browser-fs-access/fs-access/directory-open.js"() {
    getFiles = (_0, _1, ..._22) => __async2(void 0, [_0, _1, ..._22], function* (dirHandle, recursive, path = dirHandle.name, skipDirectory) {
      const dirs = [];
      const files = [];
      for (const entry of dirHandle.values()) {
        const nestedPath = `${path}/${entry.name}`;
        if (entry.kind === "file") {
          files.push(yield entry.getFile().then((file) => {
            file.directoryHandle = dirHandle;
            return Object.defineProperty(file, "webkitRelativePath", {
              configurable: true,
              enumerable: true,
              get: () => nestedPath
            });
          }));
        } else if (entry.kind === "directory" && recursive && (!skipDirectory || !skipDirectory(entry))) {
          dirs.push(yield getFiles(entry, recursive, nestedPath, skipDirectory));
        }
      }
      return [...(yield Promise.all(dirs)).flat(), ...yield Promise.all(files)];
    });
    directory_open_default2 = (..._0) => __async2(void 0, [..._0], function* (options2 = {}) {
      options2.recursive = options2.recursive || false;
      const handle = yield window.showDirectoryPicker({
        id: options2.id,
        startIn: options2.startIn
      });
      return getFiles(handle, options2.recursive, void 0, options2.skipDirectory);
    });
  }
});
function directoryOpen(...args) {
  return __async2(this, null, function* () {
    return (yield implementation2).default(...args);
  });
}
var implementation2;
var init_directory_open3 = __esm({
  "src/state/data/browser-fs-access/directory-open.js"() {
    init_supported();
    implementation2 = !supported_default ? Promise.resolve().then(() => (init_directory_open(), directory_open_exports)) : Promise.resolve().then(() => (init_directory_open2(), directory_open_exports2));
  }
});
var file_save_exports = {};
__export(file_save_exports, {
  default: () => file_save_default
});
function streamToBlob(stream, type) {
  return __async2(this, null, function* () {
    const reader = stream.getReader();
    const pumpedStream = new ReadableStream({
      start(controller) {
        return pump();
        function pump() {
          return __async2(this, null, function* () {
            return reader.read().then(({ done, value }) => {
              if (done) {
                controller.close();
                return;
              }
              controller.enqueue(value);
              return pump();
            });
          });
        }
      }
    });
    const res = new Response(pumpedStream);
    reader.releaseLock();
    return new Blob([yield res.blob()], { type });
  });
}
var file_save_default;
var init_file_save = __esm({
  "src/state/data/browser-fs-access/legacy/file-save.js"() {
    file_save_default = (_0, ..._1) => __async2(void 0, [_0, ..._1], function* (blobOrResponse, options2 = {}) {
      if (Array.isArray(options2)) {
        options2 = options2[0];
      }
      const a6 = document.createElement("a");
      let data = blobOrResponse;
      if ("body" in blobOrResponse) {
        data = yield streamToBlob(blobOrResponse.body, blobOrResponse.headers.get("content-type"));
      }
      a6.download = options2.fileName || "Untitled";
      a6.href = URL.createObjectURL(data);
      const _reject = () => cleanupListenersAndMaybeReject(reject);
      const _resolve = () => {
        if (typeof cleanupListenersAndMaybeReject === "function") {
          cleanupListenersAndMaybeReject();
        }
      };
      const cleanupListenersAndMaybeReject = options2.legacySetup && options2.legacySetup(_resolve, _reject, a6);
      a6.addEventListener("click", () => {
        setTimeout(() => URL.revokeObjectURL(a6.href), 30 * 1e3);
        _resolve(null);
      });
      a6.click();
      return null;
    });
  }
});
var file_save_exports2 = {};
__export(file_save_exports2, {
  default: () => file_save_default2
});
var file_save_default2;
var init_file_save2 = __esm({
  "src/state/data/browser-fs-access/fs-access/file-save.js"() {
    file_save_default2 = (_0, ..._1) => __async2(void 0, [_0, ..._1], function* (blobOrResponse, options2 = [{}], existingHandle = null, throwIfExistingHandleNotGood = false) {
      if (!Array.isArray(options2)) {
        options2 = [options2];
      }
      options2[0].fileName = options2[0].fileName || "Untitled";
      const types = [];
      options2.forEach((option, i7) => {
        types[i7] = {
          description: option.description || "",
          accept: {}
        };
        if (option.mimeTypes) {
          if (i7 === 0) {
            if (blobOrResponse.type) {
              option.mimeTypes.push(blobOrResponse.type);
            } else if (blobOrResponse.headers && blobOrResponse.headers.get("content-type")) {
              option.mimeTypes.push(blobOrResponse.headers.get("content-type"));
            }
          }
          option.mimeTypes.map((mimeType) => {
            types[i7].accept[mimeType] = option.extensions || [];
          });
        } else if (blobOrResponse.type) {
          types[i7].accept[blobOrResponse.type] = option.extensions || [];
        }
      });
      if (existingHandle) {
        try {
          yield existingHandle.getFile();
        } catch (err) {
          existingHandle = null;
          if (throwIfExistingHandleNotGood) {
            throw err;
          }
        }
      }
      const handle = existingHandle || (yield window.showSaveFilePicker({
        suggestedName: options2[0].fileName,
        id: options2[0].id,
        startIn: options2[0].startIn,
        types,
        excludeAcceptAllOption: options2[0].excludeAcceptAllOption || false
      }));
      const writable = yield handle.createWritable();
      if ("stream" in blobOrResponse) {
        const stream = blobOrResponse.stream();
        yield stream.pipeTo(writable);
        return handle;
      } else if ("body" in blobOrResponse) {
        yield blobOrResponse.body.pipeTo(writable);
        return handle;
      }
      yield writable.write(blob);
      yield writable.close();
      return handle;
    });
  }
});
function fileSave(...args) {
  return __async2(this, null, function* () {
    return (yield implementation3).default(...args);
  });
}
var implementation3;
var init_file_save3 = __esm({
  "src/state/data/browser-fs-access/file-save.js"() {
    init_supported();
    implementation3 = !supported_default ? Promise.resolve().then(() => (init_file_save(), file_save_exports)) : Promise.resolve().then(() => (init_file_save2(), file_save_exports2));
  }
});
var browser_fs_access_exports = {};
__export(browser_fs_access_exports, {
  directoryOpen: () => directoryOpen,
  fileOpen: () => fileOpen,
  fileSave: () => fileSave,
  supported: () => supported_default
});
var init_browser_fs_access = __esm({
  "src/state/data/browser-fs-access/index.js"() {
    init_file_open3();
    init_directory_open3();
    init_file_save3();
    init_supported();
  }
});
var { styled, createTheme } = q({
  themeMap: __spreadValues4({}, n),
  theme: {
    colors: {
      bounds: "rgba(65, 132, 244, 1.000)",
      boundsBg: "rgba(65, 132, 244, 0.05)",
      hover: "#ececec",
      overlay: "rgba(0, 0, 0, 0.15)",
      overlayContrast: "rgba(255, 255, 255, 0.15)",
      panel: "#fefefe",
      panelContrast: "#ffffff",
      selected: "rgba(66, 133, 244, 1.000)",
      selectedContrast: "#fefefe",
      sponsor: "#ec6cb9",
      sponsorContrast: "#ec6cb944",
      text: "#333333",
      tooltip: "#1d1d1d",
      tooltipContrast: "#ffffff",
      warn: "rgba(255, 100, 100, 1)",
      canvas: "rgb(248, 249, 250)"
    },
    shadows: {
      2: "0px 1px 1px rgba(0, 0, 0, 0.14)",
      3: "0px 2px 3px rgba(0, 0, 0, 0.14)",
      4: "0px 4px 5px -1px rgba(0, 0, 0, 0.14)",
      8: "0px 12px 17px rgba(0, 0, 0, 0.14)",
      12: "0px 12px 17px rgba(0, 0, 0, 0.14)",
      24: "0px 24px 38px rgba(0, 0, 0, 0.14)",
      key: "1px 1px rgba(0,0,0,1)",
      panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -8px rgba(0, 0, 0, 0.05), 
        0px 0px 16px -12px rgba(0, 0, 0, 0.12),
        0px 0px 2px 0px rgba(0, 0, 0, 0.08)`
    },
    space: {
      0: "2px",
      1: "3px",
      2: "4px",
      3: "8px",
      4: "12px",
      5: "16px",
      6: "32px",
      7: "48px"
    },
    fontSizes: {
      0: "10px",
      1: "12px",
      2: "13px",
      3: "16px",
      4: "18px"
    },
    fonts: {
      ui: '"Recursive", system-ui, sans-serif',
      body: '"Recursive", system-ui, sans-serif',
      mono: '"Recursive Mono", monospace'
    },
    fontWeights: {},
    lineHeights: {},
    letterSpacings: {},
    sizes: {},
    borderWidths: {
      0: "$1"
    },
    borderStyles: {},
    radii: {
      0: "2px",
      1: "4px",
      2: "8px",
      3: "12px",
      4: "16px"
    },
    zIndices: {},
    transitions: {}
  },
  media: {
    micro: "(max-width: 370px)",
    sm: "(min-width: 640px)",
    md: "(min-width: 768px)",
    lg: "(min-width: 1024px)"
  },
  utils: {
    zStrokeWidth: () => (value) => {
      if (Array.isArray(value)) {
        return {
          strokeWidth: `calc(${value[0]}px / var(--camera-zoom))`
        };
      }
      return {
        strokeWidth: `calc(${value}px / var(--camera-zoom))`
      };
    }
  }
});
var dark = createTheme({
  colors: {
    bounds: "rgba(38, 150, 255, 1.000)",
    boundsBg: "rgba(38, 150, 255, 0.05)",
    hover: "#444A50",
    overlay: "rgba(0, 0, 0, 0.15)",
    overlayContrast: "rgba(255, 255, 255, 0.15)",
    panel: "#363D44",
    panelContrast: "#49555f",
    selected: "rgba(38, 150, 255, 1.000)",
    selectedContrast: "#fefefe",
    text: "#f8f9fa",
    tooltip: "#1d1d1d",
    tooltipContrast: "#ffffff",
    canvas: "#212529"
  },
  shadows: {
    2: "0px 1px 1px rgba(0, 0, 0, 0.24)",
    3: "0px 2px 3px rgba(0, 0, 0, 0.24)",
    4: "0px 4px 5px -1px rgba(0, 0, 0, 0.24)",
    8: "0px 12px 17px rgba(0, 0, 0, 0.24)",
    12: "0px 12px 17px rgba(0, 0, 0, 0.24)",
    24: "0px 24px 38px rgba(0, 0, 0, 0.24)",
    panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), 
      0px 0px 16px -8px rgba(0, 0, 0, 0.09), 
      0px 0px 16px -12px rgba(0, 0, 0, 0.2)`
  }
});
var TDEventHandler = class {
  constructor() {
    __publicField2(this, "onPinchStart");
    __publicField2(this, "onPinchEnd");
    __publicField2(this, "onPinch");
    __publicField2(this, "onKeyDown");
    __publicField2(this, "onKeyUp");
    __publicField2(this, "onPointerMove");
    __publicField2(this, "onPointerUp");
    __publicField2(this, "onPan");
    __publicField2(this, "onZoom");
    __publicField2(this, "onPointerDown");
    __publicField2(this, "onPointCanvas");
    __publicField2(this, "onDoubleClickCanvas");
    __publicField2(this, "onRightPointCanvas");
    __publicField2(this, "onDragCanvas");
    __publicField2(this, "onReleaseCanvas");
    __publicField2(this, "onPointShape");
    __publicField2(this, "onDoubleClickShape");
    __publicField2(this, "onRightPointShape");
    __publicField2(this, "onDragShape");
    __publicField2(this, "onHoverShape");
    __publicField2(this, "onUnhoverShape");
    __publicField2(this, "onReleaseShape");
    __publicField2(this, "onPointBounds");
    __publicField2(this, "onDoubleClickBounds");
    __publicField2(this, "onRightPointBounds");
    __publicField2(this, "onDragBounds");
    __publicField2(this, "onHoverBounds");
    __publicField2(this, "onUnhoverBounds");
    __publicField2(this, "onReleaseBounds");
    __publicField2(this, "onPointBoundsHandle");
    __publicField2(this, "onDoubleClickBoundsHandle");
    __publicField2(this, "onRightPointBoundsHandle");
    __publicField2(this, "onDragBoundsHandle");
    __publicField2(this, "onHoverBoundsHandle");
    __publicField2(this, "onUnhoverBoundsHandle");
    __publicField2(this, "onReleaseBoundsHandle");
    __publicField2(this, "onPointHandle");
    __publicField2(this, "onDoubleClickHandle");
    __publicField2(this, "onRightPointHandle");
    __publicField2(this, "onDragHandle");
    __publicField2(this, "onHoverHandle");
    __publicField2(this, "onUnhoverHandle");
    __publicField2(this, "onReleaseHandle");
    __publicField2(this, "onShapeBlur");
    __publicField2(this, "onShapeClone");
  }
};
var SizeStyle = /* @__PURE__ */ ((SizeStyle2) => {
  SizeStyle2["Small"] = "small";
  SizeStyle2["Medium"] = "medium";
  SizeStyle2["Large"] = "large";
  return SizeStyle2;
})(SizeStyle || {});
var DashStyle = /* @__PURE__ */ ((DashStyle2) => {
  DashStyle2["Draw"] = "draw";
  DashStyle2["Solid"] = "solid";
  DashStyle2["Dashed"] = "dashed";
  DashStyle2["Dotted"] = "dotted";
  return DashStyle2;
})(DashStyle || {});
var AlignStyle = /* @__PURE__ */ ((AlignStyle2) => {
  AlignStyle2["Start"] = "start";
  AlignStyle2["Middle"] = "middle";
  AlignStyle2["End"] = "end";
  AlignStyle2["Justify"] = "justify";
  return AlignStyle2;
})(AlignStyle || {});
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2["Script"] = "script";
  FontStyle2["Sans"] = "sans";
  FontStyle2["Serif"] = "erif";
  FontStyle2["Mono"] = "mono";
  return FontStyle2;
})(FontStyle || {});
function migrate(state, newVersion) {
  const { document: document2, settings } = state;
  const { version = 0 } = document2;
  if (!("assets" in document2)) {
    document2.assets = {};
  }
  const assetIdsInUse = /* @__PURE__ */ new Set();
  Object.values(document2.pages).forEach((page7) => Object.values(page7.shapes).forEach((shape) => {
    const { parentId, children, assetId } = shape;
    if (assetId) {
      assetIdsInUse.add(assetId);
    }
    if (parentId !== page7.id && !page7.shapes[parentId]) {
      console.warn("Encountered a shape with a missing parent!");
      shape.parentId = page7.id;
    }
    if (shape.type === "group" && children) {
      children.forEach((childId) => {
        if (!page7.shapes[childId]) {
          console.warn("Encountered a parent with a missing child!", shape.id, childId);
          children == null ? void 0 : children.splice(children.indexOf(childId), 1);
        }
      });
    }
  }));
  Object.keys(document2.assets).forEach((assetId) => {
    if (!assetIdsInUse.has(assetId)) {
      delete document2.assets[assetId];
    }
  });
  if (version === newVersion)
    return state;
  if (version < 14) {
    Object.values(document2.pages).forEach((page7) => {
      Object.values(page7.shapes).filter((shape) => shape.type === "text").forEach((shape) => shape.style.font === "script");
    });
  }
  if (version <= 13) {
    Object.values(document2.pages).forEach((page7) => {
      Object.values(page7.bindings).forEach((binding) => {
        Object.assign(binding, binding.meta);
      });
      Object.values(page7.shapes).forEach((shape) => {
        Object.entries(shape.style).forEach(([id, style]) => {
          if (typeof style === "string") {
            shape.style[id] = style.toLowerCase();
          }
        });
        if (shape.type === "arrow") {
          if (shape.decorations) {
            Object.entries(shape.decorations).forEach(([id, decoration]) => {
              if (decoration === "Arrow") {
                shape.decorations = __spreadProps4(__spreadValues4({}, shape.decorations), {
                  [id]: "arrow"
                });
              }
            });
          }
        }
      });
    });
  }
  if (version <= 13.1) {
    document2.name = "New Document";
  }
  if (version < 15) {
    document2.assets = {};
  }
  Object.values(document2.pages).forEach((page7) => {
    Object.values(page7.shapes).forEach((shape) => {
      if (version < 15.2) {
        if (shape.type === "image" || shape.type === "video") {
          shape.style.isFilled = true;
        }
      }
      if (version < 15.3) {
        if (shape.type === "rectangle" || shape.type === "triangle" || shape.type === "ellipse" || shape.type === "arrow") {
          shape.label = shape.text || "";
          shape.labelPoint = [0.5, 0.5];
        }
      }
    });
  });
  if (version < 15.4) {
    settings.dockPosition = "bottom";
  }
  Object.values(document2.pageStates).forEach((pageState) => {
    pageState.selectedIds = pageState.selectedIds.filter((id) => {
      return document2.pages[pageState.id].shapes[id] !== void 0;
    });
    pageState.bindingId = void 0;
    pageState.editingId = void 0;
    pageState.hoveredId = void 0;
    pageState.pointedId = void 0;
  });
  document2.version = newVersion;
  return state;
}
var LETTER_SPACING = "-0.03em";
var LINE_HEIGHT3 = 1;
var GRID_SIZE = 8;
var SVG_EXPORT_PADDING = 16;
var BINDING_DISTANCE = 16;
var CLONING_DISTANCE = 32;
var FIT_TO_SCREEN_PADDING = 128;
var SNAP_DISTANCE = 5;
var SLOW_SPEED = 10;
var GHOSTED_OPACITY = 0.3;
var DEAD_ZONE = 3;
var LABEL_POINT = [0.5, 0.5];
var PI2 = Math.PI * 2;
var EASINGS = {
  linear: (t12) => t12,
  easeInQuad: (t12) => t12 * t12,
  easeOutQuad: (t12) => t12 * (2 - t12),
  easeInOutQuad: (t12) => t12 < 0.5 ? 2 * t12 * t12 : -1 + (4 - 2 * t12) * t12,
  easeInCubic: (t12) => t12 * t12 * t12,
  easeOutCubic: (t12) => --t12 * t12 * t12 + 1,
  easeInOutCubic: (t12) => t12 < 0.5 ? 4 * t12 * t12 * t12 : (t12 - 1) * (2 * t12 - 2) * (2 * t12 - 2) + 1,
  easeInQuart: (t12) => t12 * t12 * t12 * t12,
  easeOutQuart: (t12) => 1 - --t12 * t12 * t12 * t12,
  easeInOutQuart: (t12) => t12 < 0.5 ? 8 * t12 * t12 * t12 * t12 : 1 - 8 * --t12 * t12 * t12 * t12,
  easeInQuint: (t12) => t12 * t12 * t12 * t12 * t12,
  easeOutQuint: (t12) => 1 + --t12 * t12 * t12 * t12 * t12,
  easeInOutQuint: (t12) => t12 < 0.5 ? 16 * t12 * t12 * t12 * t12 * t12 : 1 + 16 * --t12 * t12 * t12 * t12 * t12,
  easeInSine: (t12) => 1 - Math.cos(t12 * Math.PI / 2),
  easeOutSine: (t12) => Math.sin(t12 * Math.PI / 2),
  easeInOutSine: (t12) => -(Math.cos(Math.PI * t12) - 1) / 2,
  easeInExpo: (t12) => t12 <= 0 ? 0 : Math.pow(2, 10 * t12 - 10),
  easeOutExpo: (t12) => t12 >= 1 ? 1 : 1 - Math.pow(2, -10 * t12),
  easeInOutExpo: (t12) => t12 <= 0 ? 0 : t12 >= 1 ? 1 : t12 < 0.5 ? Math.pow(2, 20 * t12 - 10) / 2 : (2 - Math.pow(2, -20 * t12 + 10)) / 2
};
var USER_COLORS = [
  "#EC5E41",
  "#F2555A",
  "#F04F88",
  "#E34BA9",
  "#BD54C6",
  "#9D5BD2",
  "#7B66DC",
  "#02B1CC",
  "#11B3A3",
  "#39B178",
  "#55B467",
  "#FF802B"
];
var isSafari = typeof Window === "undefined" ? false : /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
var IMAGE_EXTENSIONS = [".png", ".svg", ".jpg", ".jpeg", ".gif"];
var VIDEO_EXTENSIONS = isSafari ? [] : [".mp4", ".webm"];
var options = { mode: "readwrite" };
var checkPermissions = (handle) => __async2(void 0, null, function* () {
  return (yield handle.queryPermission(options)) === "granted" || (yield handle.requestPermission(options)) === "granted";
});
function loadFileHandle() {
  return __async2(this, null, function* () {
    if (typeof Window === "undefined" || !("_location" in Window))
      return;
    const fileHandle = yield get3(`Tldraw_file_handle_${window.location.origin}`);
    if (!fileHandle)
      return null;
    return fileHandle;
  });
}
function saveFileHandle(fileHandle) {
  return __async2(this, null, function* () {
    return set4(`Tldraw_file_handle_${window.location.origin}`, fileHandle);
  });
}
function saveToFileSystem(document2, fileHandle) {
  return __async2(this, null, function* () {
    const file = {
      name: document2.name || "New Document",
      fileHandle: fileHandle != null ? fileHandle : null,
      document: document2,
      assets: {}
    };
    const json = JSON.stringify(file, null, 2);
    const blob2 = new Blob([json], {
      type: "application/vnd.Tldraw+json"
    });
    if (fileHandle) {
      const hasPermissions = yield checkPermissions(fileHandle);
      if (!hasPermissions)
        return null;
    }
    const browserFS = yield Promise.resolve().then(() => (init_browser_fs_access(), browser_fs_access_exports));
    const fileSave2 = browserFS.fileSave;
    const newFileHandle = yield fileSave2(blob2, {
      fileName: `${file.name}.tldr`,
      description: "Tldraw File",
      extensions: [`.tldr`]
    }, fileHandle);
    yield saveFileHandle(newFileHandle);
    return newFileHandle;
  });
}
function openFromFileSystem() {
  return __async2(this, null, function* () {
    var _a3;
    const browserFS = yield Promise.resolve().then(() => (init_browser_fs_access(), browser_fs_access_exports));
    const fileOpen2 = browserFS.fileOpen;
    const blob2 = yield fileOpen2({
      description: "Tldraw File",
      extensions: [`.tldr`],
      multiple: false
    });
    if (!blob2)
      return null;
    const json = yield new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.readyState === FileReader.DONE) {
          resolve(reader.result);
        }
      };
      reader.readAsText(blob2, "utf8");
    });
    const file = JSON.parse(json);
    const fileHandle = (_a3 = blob2.handle) != null ? _a3 : null;
    yield saveFileHandle(fileHandle);
    return {
      fileHandle,
      document: file.document
    };
  });
}
function openAssetsFromFileSystem() {
  return __async2(this, null, function* () {
    const browserFS = yield Promise.resolve().then(() => (init_browser_fs_access(), browser_fs_access_exports));
    const fileOpen2 = browserFS.fileOpen;
    return fileOpen2({
      description: "Image or Video",
      extensions: [...IMAGE_EXTENSIONS, ...VIDEO_EXTENSIONS],
      multiple: true
    });
  });
}
function fileToBase64(file) {
  return new Promise((resolve, reject2) => {
    if (file) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject2(error);
      reader.onabort = (error) => reject2(error);
    }
  });
}
function fileToText(file) {
  return new Promise((resolve, reject2) => {
    if (file) {
      const reader = new FileReader();
      reader.readAsText(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject2(error);
      reader.onabort = (error) => reject2(error);
    }
  });
}
function getImageSizeFromSrc(src) {
  return new Promise((resolve, reject2) => {
    const img = new Image();
    img.onload = () => resolve([img.width, img.height]);
    img.onerror = () => reject2(new Error("Could not get image size"));
    img.src = src;
  });
}
function getVideoSizeFromSrc(src) {
  return new Promise((resolve, reject2) => {
    const video = document.createElement("video");
    video.onloadedmetadata = () => resolve([video.videoWidth, video.videoHeight]);
    video.onerror = () => reject2(new Error("Could not get video size"));
    video.src = src;
  });
}
init_browser_fs_access();
var canvasLight = "#fafafa";
var canvasDark = "#343d45";
var colors = {
  ["white"]: "#f0f1f3",
  ["lightGray"]: "#c6cbd1",
  ["gray"]: "#788492",
  ["black"]: "#1d1d1d",
  ["green"]: "#36b24d",
  ["cyan"]: "#0e98ad",
  ["blue"]: "#1c7ed6",
  ["indigo"]: "#4263eb",
  ["violet"]: "#7746f1",
  ["red"]: "#ff2133",
  ["orange"]: "#ff9433",
  ["yellow"]: "#ffc936"
};
var stickyFills = {
  light: __spreadProps4(__spreadValues4({}, Object.fromEntries(Object.entries(colors).map(([k4, v6]) => [k4, Utils.lerpColor(v6, canvasLight, 0.45)]))), {
    ["white"]: "#ffffff",
    ["black"]: "#3d3d3d"
  }),
  dark: __spreadProps4(__spreadValues4({}, Object.fromEntries(Object.entries(colors).map(([k4, v6]) => [
    k4,
    Utils.lerpColor(Utils.lerpColor(v6, "#999999", 0.3), canvasDark, 0.4)
  ]))), {
    ["white"]: "#1d1d1d",
    ["black"]: "#bbbbbb"
  })
};
var strokes = {
  light: __spreadProps4(__spreadValues4({}, colors), {
    ["white"]: "#1d1d1d"
  }),
  dark: __spreadProps4(__spreadValues4({}, Object.fromEntries(Object.entries(colors).map(([k4, v6]) => [k4, Utils.lerpColor(v6, canvasDark, 0.1)]))), {
    ["white"]: "#cecece",
    ["black"]: "#cecece"
  })
};
var fills = {
  light: __spreadProps4(__spreadValues4({}, Object.fromEntries(Object.entries(colors).map(([k4, v6]) => [k4, Utils.lerpColor(v6, canvasLight, 0.82)]))), {
    ["white"]: "#fefefe"
  }),
  dark: __spreadProps4(__spreadValues4({}, Object.fromEntries(Object.entries(colors).map(([k4, v6]) => [k4, Utils.lerpColor(v6, canvasDark, 0.82)]))), {
    ["white"]: "rgb(30,33,37)",
    ["black"]: "#1e1e1f"
  })
};
var strokeWidths = {
  ["small"]: 2,
  ["medium"]: 3.5,
  ["large"]: 5
};
var fontSizes = {
  ["small"]: 28,
  ["medium"]: 48,
  ["large"]: 96,
  auto: "auto"
};
var fontFaces = {
  ["script"]: '"Caveat Brush"',
  ["sans"]: '"Source Sans Pro"',
  ["erif"]: '"Crimson Pro"',
  ["mono"]: '"Source Code Pro"'
};
var fontSizeModifiers = {
  ["script"]: 1,
  ["sans"]: 1,
  ["erif"]: 1,
  ["mono"]: 1
};
var stickyFontSizes = {
  ["small"]: 24,
  ["medium"]: 36,
  ["large"]: 48,
  auto: "auto"
};
function getStrokeWidth(size) {
  return strokeWidths[size];
}
function getFontSize(size, fontStyle = "script") {
  return fontSizes[size] * fontSizeModifiers[fontStyle];
}
function getFontFace(font = "script") {
  return fontFaces[font];
}
function getStickyFontSize(size) {
  return stickyFontSizes[size];
}
function getFontStyle(style) {
  const fontSize = getFontSize(style.size, style.font);
  const fontFace = getFontFace(style.font);
  const { scale = 1 } = style;
  return `${fontSize * scale}px/1 ${fontFace}`;
}
function getStickyFontStyle(style) {
  const fontSize = getStickyFontSize(style.size);
  const fontFace = getFontFace(style.font);
  const { scale = 1 } = style;
  return `${fontSize * scale}px/1 ${fontFace}`;
}
function getStickyShapeStyle(style, isDarkMode = false) {
  const { color } = style;
  const theme = isDarkMode ? "dark" : "light";
  const adjustedColor = color === "white" || color === "black" ? "yellow" : color;
  return {
    fill: stickyFills[theme][adjustedColor],
    stroke: strokes[theme][adjustedColor],
    color: isDarkMode ? "#1d1d1d" : "#0d0d0d"
  };
}
function getShapeStyle(style, isDarkMode) {
  const { color, size, isFilled } = style;
  const strokeWidth = getStrokeWidth(size);
  const theme = isDarkMode ? "dark" : "light";
  return {
    stroke: strokes[theme][color],
    fill: isFilled ? fills[theme][color] : "none",
    strokeWidth
  };
}
var defaultStyle = {
  color: "black",
  size: "small",
  isFilled: false,
  dash: "draw",
  scale: 1
};
var defaultTextStyle = __spreadProps4(__spreadValues4({}, defaultStyle), {
  font: "script",
  textAlign: "middle"
});
var ALIGN_VALUES = {
  ["start"]: "left",
  ["middle"]: "center",
  ["end"]: "right",
  ["justify"]: "justify"
};
function getTextAlign(alignStyle = "start") {
  return ALIGN_VALUES[alignStyle];
}
function getTextSvgElement(text21, style, bounds) {
  var _a3;
  const fontSize = getFontSize(style.size, style.font);
  const g7 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  const scale = (_a3 = style.scale) != null ? _a3 : 1;
  const textLines = text21.split("\n").map((line2, i7) => {
    const textElm = document.createElementNS("http://www.w3.org/2000/svg", "text");
    textElm.textContent = line2;
    textElm.setAttribute("y", fontSize * (0.5 + i7 * LINE_HEIGHT3) + "");
    textElm.setAttribute("letter-spacing", fontSize * -0.03 + "");
    textElm.setAttribute("font-size", fontSize + "px");
    textElm.setAttribute("font-family", getFontFace(style.font).slice(1, -1));
    textElm.setAttribute("text-align", getTextAlign(style.textAlign));
    textElm.setAttribute("text-align", getTextAlign(style.textAlign));
    textElm.setAttribute("alignment-baseline", "central");
    if (style.scale !== 1) {
      textElm.setAttribute("transform", `scale(${style.scale})`);
    }
    g7.appendChild(textElm);
    return textElm;
  });
  switch (style.textAlign) {
    case "middle": {
      g7.setAttribute("text-align", "center");
      g7.setAttribute("text-anchor", "middle");
      textLines.forEach((textElm) => {
        textElm.setAttribute("x", bounds.width / 2 / scale + "");
      });
      break;
    }
    case "end": {
      g7.setAttribute("text-align", "right");
      g7.setAttribute("text-anchor", "end");
      textLines.forEach((textElm) => textElm.setAttribute("x", bounds.width / scale + ""));
      break;
    }
    case "start": {
      g7.setAttribute("text-align", "left");
      g7.setAttribute("text-anchor", "start");
    }
  }
  return g7;
}
var melm;
function getMeasurementDiv() {
  var _a3;
  (_a3 = document.getElementById("__textLabelMeasure")) == null ? void 0 : _a3.remove();
  const pre = document.createElement("pre");
  pre.id = "__textLabelMeasure";
  Object.assign(pre.style, {
    whiteSpace: "pre",
    width: "auto",
    border: "1px solid transparent",
    padding: "4px",
    margin: "0px",
    letterSpacing: LETTER_SPACING,
    opacity: "0",
    position: "absolute",
    top: "-500px",
    left: "0px",
    zIndex: "9999",
    pointerEvents: "none",
    userSelect: "none",
    alignmentBaseline: "mathematical",
    dominantBaseline: "mathematical"
  });
  pre.tabIndex = -1;
  document.body.appendChild(pre);
  return pre;
}
if (typeof window !== "undefined") {
  melm = getMeasurementDiv();
}
var prevText = "";
var prevFont = "";
var prevSize = [0, 0];
function clearPrevSize() {
  prevText = "";
}
function getTextLabelSize(text21, font) {
  if (!text21) {
    return [16, 32];
  }
  if (!melm) {
    return [10, 10];
  }
  if (!melm.parent)
    document.body.appendChild(melm);
  if (text21 === prevText && font === prevFont) {
    return prevSize;
  }
  prevText = text21;
  prevFont = font;
  melm.textContent = text21;
  melm.style.font = font;
  const width = melm.offsetWidth || 1;
  const height = melm.offsetHeight || 1;
  prevSize = [width, height];
  return prevSize;
}
function getBoundsRectangle(shape, boundsCache) {
  const bounds = Utils.getFromCache(boundsCache, shape, () => {
    const [width, height] = shape.size;
    return {
      minX: 0,
      maxX: width,
      minY: 0,
      maxY: height,
      width,
      height
    };
  });
  return Utils.translateBounds(bounds, shape.point);
}
function transformRectangle(shape, bounds, { initialShape, transformOrigin, scaleX, scaleY }) {
  if (shape.rotation || initialShape.isAspectRatioLocked) {
    const size = p.toFixed(p.mul(initialShape.size, Math.min(Math.abs(scaleX), Math.abs(scaleY))));
    const point = p.toFixed([
      bounds.minX + (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]),
      bounds.minY + (bounds.height - shape.size[1]) * (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1])
    ]);
    const rotation = scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? initialShape.rotation ? -initialShape.rotation : 0 : initialShape.rotation;
    return {
      size,
      point,
      rotation
    };
  } else {
    return {
      point: p.toFixed([bounds.minX, bounds.minY]),
      size: p.toFixed([bounds.width, bounds.height])
    };
  }
}
function transformSingleRectangle(shape, bounds) {
  return {
    size: p.toFixed([bounds.width, bounds.height]),
    point: p.toFixed([bounds.minX, bounds.minY])
  };
}
var INDENT = "  ";
var TextAreaUtils = class {
  static insertTextFirefox(field, text21) {
    field.setRangeText(text21, field.selectionStart || 0, field.selectionEnd || 0, "end");
    field.dispatchEvent(new InputEvent("input", {
      data: text21,
      inputType: "insertText",
      isComposing: false
    }));
  }
  static insert(field, text21) {
    const document2 = field.ownerDocument;
    const initialFocus = document2.activeElement;
    if (initialFocus !== field) {
      field.focus();
    }
    if (!document2.execCommand("insertText", false, text21)) {
      TextAreaUtils.insertTextFirefox(field, text21);
    }
    if (initialFocus === document2.body) {
      field.blur();
    } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
      initialFocus.focus();
    }
  }
  static set(field, text21) {
    field.select();
    TextAreaUtils.insert(field, text21);
  }
  static getSelection(field) {
    const { selectionStart, selectionEnd } = field;
    return field.value.slice(selectionStart ? selectionStart : void 0, selectionEnd ? selectionEnd : void 0);
  }
  static wrapSelection(field, wrap, wrapEnd) {
    const { selectionStart, selectionEnd } = field;
    const selection = TextAreaUtils.getSelection(field);
    TextAreaUtils.insert(field, wrap + selection + (wrapEnd != null ? wrapEnd : wrap));
    field.selectionStart = (selectionStart || 0) + wrap.length;
    field.selectionEnd = (selectionEnd || 0) + wrap.length;
  }
  static replace(field, searchValue, replacer) {
    let drift = 0;
    field.value.replace(searchValue, (...args) => {
      const matchStart = drift + args[args.length - 2];
      const matchLength = args[0].length;
      field.selectionStart = matchStart;
      field.selectionEnd = matchStart + matchLength;
      const replacement = typeof replacer === "string" ? replacer : replacer(...args);
      TextAreaUtils.insert(field, replacement);
      field.selectionStart = matchStart;
      drift += replacement.length - matchLength;
      return replacement;
    });
  }
  static findLineEnd(value, currentEnd) {
    const lastLineStart = value.lastIndexOf("\n", currentEnd - 1) + 1;
    if (value.charAt(lastLineStart) !== "	") {
      return currentEnd;
    }
    return lastLineStart + 1;
  }
  static indent(element) {
    var _a3;
    const { selectionStart, selectionEnd, value } = element;
    const selectedContrast = value.slice(selectionStart, selectionEnd);
    const lineBreakCount = (_a3 = /\n/g.exec(selectedContrast)) == null ? void 0 : _a3.length;
    if (lineBreakCount && lineBreakCount > 0) {
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const newSelection = element.value.slice(firstLineStart, selectionEnd - 1);
      const indentedText = newSelection.replace(/^|\n/g, `$&${INDENT}`);
      const replacementsCount = indentedText.length - newSelection.length;
      element.setSelectionRange(firstLineStart, selectionEnd - 1);
      TextAreaUtils.insert(element, indentedText);
      element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount);
    } else {
      TextAreaUtils.insert(element, INDENT);
    }
  }
  static unindent(element) {
    const { selectionStart, selectionEnd, value } = element;
    const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
    const minimumSelectionEnd = TextAreaUtils.findLineEnd(value, selectionEnd);
    const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd);
    const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
    const replacementsCount = newSelection.length - indentedText.length;
    element.setSelectionRange(firstLineStart, minimumSelectionEnd);
    TextAreaUtils.insert(element, indentedText);
    const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
    const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
    const newSelectionStart = selectionStart - difference;
    element.setSelectionRange(selectionStart - difference, Math.max(newSelectionStart, selectionEnd - replacementsCount));
  }
};
var stopPropagation = (e13) => e13.stopPropagation();
var TextLabel = React60.memo(function TextLabel2({
  font,
  text: text21,
  color,
  offsetX = 0,
  offsetY = 0,
  scale = 1,
  isEditing = false,
  onBlur,
  onChange
}) {
  const rInput = React60.useRef(null);
  const rIsMounted = React60.useRef(false);
  const handleChange = React60.useCallback((e13) => {
    onChange(TLDR.normalizeText(e13.currentTarget.value));
  }, [onChange]);
  const handleKeyDown = React60.useCallback((e13) => {
    if (e13.key === "Escape") {
      e13.preventDefault();
      e13.stopPropagation();
      onBlur == null ? void 0 : onBlur();
      return;
    }
    if (e13.key === "Tab" && text21.length === 0) {
      e13.preventDefault();
      return;
    }
    if (!(e13.key === "Meta" || e13.metaKey)) {
      e13.stopPropagation();
    } else if (e13.key === "z" && e13.metaKey) {
      if (e13.shiftKey) {
        document.execCommand("redo", false);
      } else {
        document.execCommand("undo", false);
      }
      e13.stopPropagation();
      e13.preventDefault();
      return;
    }
    if ((e13.metaKey || e13.ctrlKey) && e13.key === "=") {
      e13.preventDefault();
    }
    if (e13.key === "Tab") {
      e13.preventDefault();
      if (e13.shiftKey) {
        TextAreaUtils.unindent(e13.currentTarget);
      } else {
        TextAreaUtils.indent(e13.currentTarget);
      }
      onChange == null ? void 0 : onChange(TLDR.normalizeText(e13.currentTarget.value));
    }
  }, [onChange]);
  const handleBlur = React60.useCallback((e13) => {
    e13.currentTarget.setSelectionRange(0, 0);
    onBlur == null ? void 0 : onBlur();
  }, [onBlur]);
  const handleFocus = React60.useCallback((e13) => {
    if (!isEditing)
      return;
    if (!rIsMounted.current)
      return;
    if (document.activeElement === e13.currentTarget) {
      e13.currentTarget.select();
    }
  }, [isEditing]);
  const handlePointerDown = React60.useCallback((e13) => {
    if (isEditing) {
      e13.stopPropagation();
    }
  }, [isEditing]);
  React60.useEffect(() => {
    if (isEditing) {
      requestAnimationFrame(() => {
        rIsMounted.current = true;
        const elm = rInput.current;
        if (elm) {
          elm.focus();
          elm.select();
        }
      });
    } else {
      onBlur == null ? void 0 : onBlur();
    }
  }, [isEditing, onBlur]);
  const rInnerWrapper = React60.useRef(null);
  React60.useLayoutEffect(() => {
    const elm = rInnerWrapper.current;
    if (!elm)
      return;
    const size = getTextLabelSize(text21, font);
    elm.style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`;
    elm.style.width = size[0] + 1 + "px";
    elm.style.height = size[1] + 1 + "px";
  }, [text21, font, offsetY, offsetX, scale]);
  return /* @__PURE__ */ React60.createElement(TextWrapper, null, /* @__PURE__ */ React60.createElement(InnerWrapper, {
    ref: rInnerWrapper,
    hasText: !!text21,
    isEditing,
    style: {
      font,
      color
    }
  }, isEditing ? /* @__PURE__ */ React60.createElement(TextArea, {
    ref: rInput,
    style: {
      font,
      color
    },
    name: "text",
    tabIndex: -1,
    autoComplete: "false",
    autoCapitalize: "false",
    autoCorrect: "false",
    autoSave: "false",
    autoFocus: true,
    placeholder: "",
    spellCheck: "true",
    wrap: "off",
    dir: "auto",
    datatype: "wysiwyg",
    defaultValue: text21,
    color,
    onFocus: handleFocus,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    onPointerDown: handlePointerDown,
    onContextMenu: stopPropagation,
    onCopy: stopPropagation,
    onPaste: stopPropagation,
    onCut: stopPropagation
  }) : text21, "\u200B"));
});
var TextWrapper = styled("div", {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  pointerEvents: "none",
  userSelect: "none",
  variants: {
    isGhost: {
      false: { opacity: 1 },
      true: { transition: "opacity .2s", opacity: GHOSTED_OPACITY }
    }
  }
});
var commonTextWrapping = {
  whiteSpace: "pre-wrap",
  overflowWrap: "break-word"
};
var InnerWrapper = styled("div", __spreadValues4({
  position: "absolute",
  padding: "4px",
  zIndex: 1,
  minHeight: 1,
  minWidth: 1,
  lineHeight: 1,
  letterSpacing: LETTER_SPACING,
  outline: 0,
  fontWeight: "500",
  textAlign: "center",
  backfaceVisibility: "hidden",
  userSelect: "none",
  WebkitUserSelect: "none",
  WebkitTouchCallout: "none",
  variants: {
    hasText: {
      false: {
        pointerEvents: "none"
      },
      true: {
        pointerEvents: "all"
      }
    },
    isEditing: {
      false: {
        userSelect: "none"
      },
      true: {
        background: "$boundsBg",
        userSelect: "text",
        WebkitUserSelect: "text"
      }
    }
  }
}, commonTextWrapping));
var TextArea = styled("textarea", __spreadProps4(__spreadValues4({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  width: "100%",
  height: "100%",
  border: "none",
  padding: "4px",
  resize: "none",
  textAlign: "inherit",
  minHeight: "inherit",
  minWidth: "inherit",
  lineHeight: "inherit",
  letterSpacing: "inherit",
  outline: 0,
  fontWeight: "inherit",
  overflow: "hidden",
  backfaceVisibility: "hidden",
  display: "inline-block",
  pointerEvents: "all",
  background: "$boundsBg",
  userSelect: "text",
  WebkitUserSelect: "text",
  fontSmooth: "always",
  WebkitFontSmoothing: "subpixel-antialiased",
  MozOsxFontSmoothing: "auto"
}, commonTextWrapping), {
  "&:focus": {
    outline: "none",
    border: "none"
  }
}));
var TDShapeUtil = class extends TLShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "canBind", false);
    __publicField2(this, "canEdit", false);
    __publicField2(this, "canClone", false);
    __publicField2(this, "isAspectRatioLocked", false);
    __publicField2(this, "hideResizeHandles", false);
    __publicField2(this, "bindingDistance", BINDING_DISTANCE);
    __publicField2(this, "hitTestPoint", (shape, point) => {
      return Utils.pointInBounds(point, this.getRotatedBounds(shape));
    });
    __publicField2(this, "hitTestLineSegment", (shape, A4, B4) => {
      const box2 = Utils.getBoundsFromPoints([A4, B4]);
      const bounds = this.getBounds(shape);
      return Utils.boundsContain(bounds, box2) || shape.rotation ? intersectLineSegmentPolyline(A4, B4, Utils.getRotatedCorners(this.getBounds(shape))).didIntersect : intersectLineSegmentBounds(A4, B4, this.getBounds(shape)).length > 0;
    });
    __publicField2(this, "create", (props) => {
      this.refMap.set(props.id, React210.createRef());
      return this.getShape(props);
    });
    __publicField2(this, "getCenter", (shape) => {
      return Utils.getBoundsCenter(this.getBounds(shape));
    });
    __publicField2(this, "getExpandedBounds", (shape) => {
      return Utils.expandBounds(this.getBounds(shape), this.bindingDistance);
    });
    __publicField2(this, "getBindingPoint", (shape, fromShape, point, origin, direction, bindAnywhere) => {
      const bounds = this.getBounds(shape);
      const expandedBounds = this.getExpandedBounds(shape);
      if (!Utils.pointInBounds(point, expandedBounds))
        return;
      const intersections = intersectRayBounds(origin, direction, expandedBounds).filter((int) => int.didIntersect).map((int) => int.points[0]);
      if (!intersections.length)
        return;
      const center = this.getCenter(shape);
      const intersection = intersections.sort((a6, b7) => e.dist(b7, origin) - e.dist(a6, origin))[0];
      const middlePoint = e.med(point, intersection);
      let anchor;
      let distance;
      if (bindAnywhere) {
        anchor = e.dist(point, center) < BINDING_DISTANCE / 2 ? center : point;
        distance = 0;
      } else {
        if (e.distanceToLineSegment(point, middlePoint, center) < BINDING_DISTANCE / 2) {
          anchor = center;
        } else {
          anchor = middlePoint;
        }
        if (Utils.pointInBounds(point, bounds)) {
          distance = this.bindingDistance;
        } else {
          distance = Math.max(this.bindingDistance, Utils.getBoundsSides(bounds).map((side) => e.distanceToLineSegment(side[1][0], side[1][1], point)).sort((a6, b7) => a6 - b7)[0]);
        }
      }
      const bindingPoint = e.divV(e.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [
        expandedBounds.width,
        expandedBounds.height
      ]);
      return {
        point: e.clampV(bindingPoint, 0, 1),
        distance
      };
    });
    __publicField2(this, "mutate", (shape, props) => {
      return props;
    });
    __publicField2(this, "transform", (shape, bounds, info) => {
      return __spreadProps4(__spreadValues4({}, shape), { point: [bounds.minX, bounds.minY] });
    });
    __publicField2(this, "transformSingle", (shape, bounds, info) => {
      return this.transform(shape, bounds, info);
    });
    __publicField2(this, "updateChildren");
    __publicField2(this, "onChildrenChange");
    __publicField2(this, "onHandleChange");
    __publicField2(this, "onRightPointHandle");
    __publicField2(this, "onDoubleClickHandle");
    __publicField2(this, "onDoubleClickBoundsHandle");
    __publicField2(this, "onSessionComplete");
    __publicField2(this, "getSvgElement", (shape, isDarkMode) => {
      var _a3;
      const elm = (_a3 = document.getElementById(shape.id + "_svg")) == null ? void 0 : _a3.cloneNode(true);
      if (!elm)
        return;
      if ("label" in shape && shape.label) {
        const s9 = shape;
        const g7 = document.createElementNS("http://www.w3.org/2000/svg", "g");
        const bounds = this.getBounds(shape);
        const labelElm = getTextSvgElement(s9["label"], shape.style, bounds);
        labelElm.setAttribute("fill", getShapeStyle(shape.style, isDarkMode).stroke);
        const font = getFontStyle(shape.style);
        const size = getTextLabelSize(s9["label"], font);
        labelElm.setAttribute("transform-origin", "top left");
        labelElm.setAttribute("transform", `translate(${bounds.width / 2}, ${(bounds.height - size[1]) / 2})`);
        g7.setAttribute("text-align", "center");
        g7.setAttribute("text-anchor", "middle");
        g7.appendChild(elm);
        g7.appendChild(labelElm);
        return g7;
      }
      return elm;
    });
  }
};
function getRectangleDrawPoints(id, style, size) {
  const styles222 = getShapeStyle(style);
  const getRandom = Utils.rng(id);
  const sw = styles222.strokeWidth;
  const w7 = Math.max(0, size[0]);
  const h6 = Math.max(0, size[1]);
  const offsets = Array.from(Array(4)).map(() => {
    return [getRandom() * sw * 0.75, getRandom() * sw * 0.75];
  });
  const tl = p.add([sw / 2, sw / 2], offsets[0]);
  const tr = p.add([w7 - sw / 2, sw / 2], offsets[1]);
  const br = p.add([w7 - sw / 2, h6 - sw / 2], offsets[2]);
  const bl = p.add([sw / 2, h6 - sw / 2], offsets[3]);
  const rm = Math.round(Math.abs(getRandom() * 2 * 4));
  const rx = Math.min(w7 / 4, sw * 2);
  const ry = Math.min(h6 / 4, sw * 2);
  const px = Math.max(8, Math.floor(w7 / 16));
  const py = Math.max(8, Math.floor(h6 / 16));
  const lines = Utils.rotateArray([
    p.pointsBetween(p.add(tl, [rx, 0]), p.sub(tr, [rx, 0]), px),
    p.pointsBetween(p.add(tr, [0, ry]), p.sub(br, [0, ry]), py),
    p.pointsBetween(p.sub(br, [rx, 0]), p.add(bl, [rx, 0]), px),
    p.pointsBetween(p.sub(bl, [0, ry]), p.add(tl, [0, ry]), py)
  ], rm);
  const points = [...lines.flat(), ...lines[0]].slice(5, Math.floor((rm % 2 === 0 ? px : py) / -2) + 3);
  return {
    points
  };
}
function getDrawStrokeInfo(id, style, size) {
  const { points } = getRectangleDrawPoints(id, style, size);
  const { strokeWidth } = getShapeStyle(style);
  const options2 = {
    size: strokeWidth,
    thinning: 0.65,
    streamline: 0.3,
    smoothing: 1,
    simulatePressure: false,
    last: true
  };
  return { points, options: options2 };
}
function getRectanglePath(id, style, size) {
  const { points, options: options2 } = getDrawStrokeInfo(id, style, size);
  const stroke = Te(points, options2);
  return Utils.getSvgPathFromStroke(stroke);
}
function getRectangleIndicatorPathTDSnapshot(id, style, size) {
  const { points, options: options2 } = getDrawStrokeInfo(id, style, size);
  const strokePoints = me(points, options2);
  return Utils.getSvgPathFromStroke(strokePoints.map((pt) => pt.point.slice(0, 2)), false);
}
var DrawRectangle = React310.memo(function DrawRectangle2({
  id,
  style,
  size,
  isSelected,
  isDarkMode
}) {
  const { isFilled } = style;
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const pathTDSnapshot = getRectanglePath(id, style, size);
  const innerPath = getRectangleIndicatorPathTDSnapshot(id, style, size);
  return /* @__PURE__ */ React310.createElement(React310.Fragment, null, /* @__PURE__ */ React310.createElement("path", {
    className: style.isFilled || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    d: innerPath
  }), isFilled && /* @__PURE__ */ React310.createElement("path", {
    d: innerPath,
    fill,
    pointerEvents: "none"
  }), /* @__PURE__ */ React310.createElement("path", {
    d: pathTDSnapshot,
    fill: stroke,
    stroke,
    strokeWidth,
    pointerEvents: "none"
  }));
});
var DashedRectangle = React410.memo(function DashedRectangle2({
  id,
  style,
  size,
  isSelected,
  isDarkMode
}) {
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const sw = 1 + strokeWidth * 1.618;
  const w7 = Math.max(0, size[0] - sw / 2);
  const h6 = Math.max(0, size[1] - sw / 2);
  const strokes2 = [
    [[sw / 2, sw / 2], [w7, sw / 2], w7 - sw / 2],
    [[w7, sw / 2], [w7, h6], h6 - sw / 2],
    [[w7, h6], [sw / 2, h6], w7 - sw / 2],
    [[sw / 2, h6], [sw / 2, sw / 2], h6 - sw / 2]
  ];
  const paths = strokes2.map(([start, end, length], i7) => {
    const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(length, strokeWidth * 1.618, style.dash);
    return /* @__PURE__ */ React410.createElement("line", {
      key: id + "_" + i7,
      x1: start[0],
      y1: start[1],
      x2: end[0],
      y2: end[1],
      strokeDasharray,
      strokeDashoffset
    });
  });
  return /* @__PURE__ */ React410.createElement(React410.Fragment, null, /* @__PURE__ */ React410.createElement("rect", {
    className: isSelected || style.isFilled ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    x: sw / 2,
    y: sw / 2,
    width: w7,
    height: h6,
    strokeWidth: BINDING_DISTANCE
  }), style.isFilled && /* @__PURE__ */ React410.createElement("rect", {
    x: sw / 2,
    y: sw / 2,
    width: w7,
    height: h6,
    fill,
    pointerEvents: "none"
  }), /* @__PURE__ */ React410.createElement("g", {
    pointerEvents: "none",
    stroke,
    strokeWidth: sw,
    strokeLinecap: "round"
  }, paths));
});
function BindingIndicator({ strokeWidth, size }) {
  return /* @__PURE__ */ React510.createElement("rect", {
    className: "tl-binding-indicator",
    x: strokeWidth,
    y: strokeWidth,
    width: Math.max(0, size[0] - strokeWidth / 2),
    height: Math.max(0, size[1] - strokeWidth / 2),
    strokeWidth: BINDING_DISTANCE * 2
  });
}
var RectangleUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "rectangle");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "rectangle",
        name: "Rectangle",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [1, 1],
        rotation: 0,
        style: defaultStyle,
        label: "",
        labelPoint: [0.5, 0.5]
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({
      shape,
      isEditing,
      isBinding,
      isSelected,
      isGhost,
      meta,
      bounds,
      events,
      onShapeBlur,
      onShapeChange
    }, ref) => {
      const { id, size, style, label = "", labelPoint = LABEL_POINT } = shape;
      const font = getFontStyle(style);
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const Component = style.dash === "draw" ? DrawRectangle : DashedRectangle;
      const handleLabelChange = React62.useCallback((label2) => onShapeChange == null ? void 0 : onShapeChange({ id, label: label2 }), [onShapeChange]);
      return /* @__PURE__ */ React62.createElement(FullWrapper, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React62.createElement(TextLabel, {
        isEditing,
        onChange: handleLabelChange,
        onBlur: onShapeBlur,
        font,
        text: label,
        color: styles222.stroke,
        offsetX: (labelPoint[0] - 0.5) * bounds.width,
        offsetY: (labelPoint[1] - 0.5) * bounds.height
      }), /* @__PURE__ */ React62.createElement(SVGContainer, {
        id: shape.id + "_svg",
        opacity: isGhost ? GHOSTED_OPACITY : 1
      }, isBinding && /* @__PURE__ */ React62.createElement(BindingIndicator, {
        strokeWidth: styles222.strokeWidth,
        size
      }), /* @__PURE__ */ React62.createElement(Component, {
        id,
        style,
        size,
        isSelected,
        isDarkMode: meta.isDarkMode
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { id, style, size } = shape;
      const styles222 = getShapeStyle(style, false);
      const sw = styles222.strokeWidth;
      if (style.dash === "draw") {
        return /* @__PURE__ */ React62.createElement("path", {
          d: getRectangleIndicatorPathTDSnapshot(id, style, size)
        });
      }
      return /* @__PURE__ */ React62.createElement("rect", {
        x: sw,
        y: sw,
        rx: 1,
        ry: 1,
        width: Math.max(1, size[0] - sw * 2),
        height: Math.max(1, size[1] - sw * 2)
      });
    }));
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style || next.label !== prev.label;
    });
    __publicField2(this, "transform", transformRectangle);
    __publicField2(this, "transformSingle", transformSingleRectangle);
  }
};
var FullWrapper = styled("div", { width: "100%", height: "100%" });
var PI22 = Math.PI * 2;
var _PolygonUtils = class {
  static inwardEdgeNormal(edge) {
    const delta = p.sub(edge[1], edge[0]);
    const len = p.len2(delta);
    return [-delta[0] / len, delta[1] / len];
  }
  static outwardEdgeNormal(edge) {
    return p.neg(_PolygonUtils.inwardEdgeNormal(edge));
  }
  static isReflexVertex(polygon, index2) {
    const len = polygon.length;
    const v0 = polygon[(index2 + len - 1) % len];
    const v1 = polygon[index2];
    const v22 = polygon[(index2 + 1) % len];
    if (_PolygonUtils.leftSide(v0, v22, v1) < 0)
      return true;
    return false;
  }
  static getEdges(vertices) {
    return vertices.map((vert, i7) => [vert, vertices[(i7 + 1) % vertices.length]]);
  }
  static edgesIntersection([A1, A22], [B1, B22]) {
    const den = (B22[1] - B1[1]) * (A22[0] - A1[0]) - (B22[0] - B1[0]) * (A22[1] - A1[1]);
    if (den == 0)
      return null;
    const ua = ((B22[0] - B1[0]) * (A1[1] - B1[1]) - (B22[1] - B1[1]) * (A1[0] - B1[0])) / den;
    const ub = ((A22[0] - A1[0]) * (A1[1] - B1[1]) - (A22[1] - A1[1]) * (A1[0] - B1[0])) / den;
    if (ua < 0 || ub < 0 || ua > 1 || ub > 1)
      return null;
    return [A1[0] + ua * (A22[0] - A1[0]), A1[1] + ua * (A22[1] - A1[1])];
  }
  static appendArc(polygon, center, radius, startVertex, endVertex, isPaddingBoundary = false) {
    const vertices = [...polygon];
    let startAngle = Math.atan2(startVertex[1] - center[1], startVertex[0] - center[0]);
    let endAngle = Math.atan2(endVertex[1] - center[1], endVertex[0] - center[0]);
    if (startAngle < 0)
      startAngle += PI22;
    if (endAngle < 0)
      endAngle += PI22;
    const arcSegmentCount = 5;
    const angle = startAngle > endAngle ? startAngle - endAngle : startAngle + PI22 - endAngle;
    const angle5 = (isPaddingBoundary ? -angle : PI22 - angle) / arcSegmentCount;
    vertices.push(startVertex);
    for (let i7 = 1; i7 < arcSegmentCount; ++i7) {
      const angle2 = startAngle + angle5 * i7;
      vertices.push([center[0] + Math.cos(angle2) * radius, center[1] + Math.sin(angle2) * radius]);
    }
    vertices.push(endVertex);
    return vertices;
  }
  static createOffsetEdge(edge, offset) {
    return edge.map((vert) => p.add(vert, offset));
  }
  static getOffsetPolygon(polygon, offset = 0) {
    const edges = _PolygonUtils.getEdges(polygon);
    const offsetEdges = edges.map((edge) => _PolygonUtils.createOffsetEdge(edge, p.mul(_PolygonUtils.outwardEdgeNormal(edge), offset)));
    const vertices = [];
    for (let i7 = 0; i7 < offsetEdges.length; i7++) {
      const thisEdge = offsetEdges[i7];
      const prevEdge = offsetEdges[(i7 + offsetEdges.length - 1) % offsetEdges.length];
      const vertex = _PolygonUtils.edgesIntersection(prevEdge, thisEdge);
      if (vertex)
        vertices.push(vertex);
      else {
        _PolygonUtils.appendArc(vertices, edges[i7][0], offset, prevEdge[1], thisEdge[0], false);
      }
    }
    return vertices;
  }
  static createPaddingPolygon(polygon, shapePadding = 0) {
    const offsetEdges = polygon.map((edge) => _PolygonUtils.createOffsetEdge(edge, _PolygonUtils.inwardEdgeNormal(edge)));
    const vertices = [];
    for (let i7 = 0; i7 < offsetEdges.length; i7++) {
      const thisEdge = offsetEdges[i7];
      const prevEdge = offsetEdges[(i7 + offsetEdges.length - 1) % offsetEdges.length];
      const vertex = _PolygonUtils.edgesIntersection(prevEdge, thisEdge);
      if (vertex)
        vertices.push(vertex);
      else {
        _PolygonUtils.appendArc(vertices, polygon[i7][0], shapePadding, prevEdge[1], thisEdge[0], true);
      }
    }
    return vertices;
  }
};
var PolygonUtils = _PolygonUtils;
__publicField2(PolygonUtils, "leftSide", p.isLeft);
function getOffsetPolygon(points, offset) {
  if (points.length < 3)
    throw Error("Polygon must have at least 3 points");
  const len = points.length;
  return points.map((point, i7) => [point, points[(i7 + 1) % len]]).map(([A4, B4]) => {
    const offsetVector = p.mul(p.per(p.uni(p.sub(B4, A4))), offset);
    return [p.add(A4, offsetVector), p.add(B4, offsetVector)];
  }).map((edge, i7, edges) => {
    const intersection = intersectLineLine(edge, edges[(i7 + 1) % edges.length]);
    if (intersection === void 0)
      throw Error("Expected an intersection");
    return intersection;
  });
}
function getTrianglePoints(size, offset = 0, rotation = 0) {
  const [w7, h6] = size;
  let points = [
    [w7 / 2, 0],
    [w7, h6],
    [0, h6]
  ];
  if (offset)
    points = getOffsetPolygon(points, offset);
  if (rotation)
    points = points.map((pt) => p.rotWith(pt, [w7 / 2, h6 / 2], rotation));
  return points;
}
function getTriangleCentroid(size) {
  const [w7, h6] = size;
  const points = [
    [w7 / 2, 0],
    [w7, h6],
    [0, h6]
  ];
  return [
    (points[0][0] + points[1][0] + points[2][0]) / 3,
    (points[0][1] + points[1][1] + points[2][1]) / 3
  ];
}
function getTriangleDrawPoints(id, size, strokeWidth) {
  const [w7, h6] = size;
  const getRandom = Utils.rng(id);
  const offsets = Array.from(Array(3)).map(() => {
    return [getRandom() * strokeWidth * 0.75, getRandom() * strokeWidth * 0.75];
  });
  const corners = [
    p.add([w7 / 2, 0], offsets[0]),
    p.add([w7, h6], offsets[1]),
    p.add([0, h6], offsets[2])
  ];
  const rm = Math.round(Math.abs(getRandom() * 2 * 3));
  const lines = Utils.rotateArray([
    p.pointsBetween(corners[0], corners[1], 32),
    p.pointsBetween(corners[1], corners[2], 32),
    p.pointsBetween(corners[2], corners[0], 32)
  ], rm);
  const points = [...lines.flat(), ...lines[0]];
  return {
    points
  };
}
function getDrawStrokeInfo2(id, size, style) {
  const { strokeWidth } = getShapeStyle(style);
  const { points } = getTriangleDrawPoints(id, size, strokeWidth);
  const options2 = {
    size: strokeWidth,
    thinning: 0.65,
    streamline: 0.3,
    smoothing: 1,
    simulatePressure: false,
    last: true
  };
  return { points, options: options2 };
}
function getTrianglePath(id, size, style) {
  const { points, options: options2 } = getDrawStrokeInfo2(id, size, style);
  const stroke = Te(points, options2);
  return Utils.getSvgPathFromStroke(stroke);
}
function getTriangleIndicatorPathTDSnapshot(id, size, style) {
  const { points, options: options2 } = getDrawStrokeInfo2(id, size, style);
  const strokePoints = me(points, options2);
  return Utils.getSvgPathFromStroke(strokePoints.map((pt) => pt.point.slice(0, 2)), false);
}
var DrawTriangle = React72.memo(function DrawTriangle2({
  id,
  size,
  style,
  isSelected,
  isDarkMode
}) {
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const pathTDSnapshot = getTrianglePath(id, size, style);
  const indicatorPath = getTriangleIndicatorPathTDSnapshot(id, size, style);
  return /* @__PURE__ */ React72.createElement(React72.Fragment, null, /* @__PURE__ */ React72.createElement("path", {
    className: style.isFilled || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    d: indicatorPath
  }), style.isFilled && /* @__PURE__ */ React72.createElement("path", {
    d: indicatorPath,
    fill,
    pointerEvents: "none"
  }), /* @__PURE__ */ React72.createElement("path", {
    d: pathTDSnapshot,
    fill: stroke,
    stroke,
    strokeWidth,
    pointerEvents: "none"
  }));
});
var DashedTriangle = React82.memo(function DashedTriangle2({
  id,
  size,
  style,
  isSelected,
  isDarkMode
}) {
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const sw = 1 + strokeWidth * 1.618;
  const points = getTrianglePoints(size);
  const sides = Utils.pointsToLineSegments(points, true);
  const paths = sides.map(([start, end], i7) => {
    const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(p.dist(start, end), strokeWidth * 1.618, style.dash);
    return /* @__PURE__ */ React82.createElement("line", {
      key: id + "_" + i7,
      x1: start[0],
      y1: start[1],
      x2: end[0],
      y2: end[1],
      stroke,
      strokeWidth: sw,
      strokeLinecap: "round",
      strokeDasharray,
      strokeDashoffset
    });
  });
  const bgPath = points.join();
  return /* @__PURE__ */ React82.createElement(React82.Fragment, null, /* @__PURE__ */ React82.createElement("polygon", {
    className: style.isFilled || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    points: bgPath
  }), style.isFilled && /* @__PURE__ */ React82.createElement("polygon", {
    fill,
    points: bgPath,
    pointerEvents: "none"
  }), /* @__PURE__ */ React82.createElement("g", {
    pointerEvents: "stroke"
  }, paths));
});
function TriangleBindingIndicator({ size }) {
  const trianglePoints = getTrianglePoints(size).join();
  return /* @__PURE__ */ React92.createElement("polygon", {
    className: "tl-binding-indicator",
    points: trianglePoints,
    strokeWidth: BINDING_DISTANCE * 2
  });
}
var TriangleUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "triangle");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "triangle",
        name: "Triangle",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [1, 1],
        rotation: 0,
        style: defaultStyle,
        label: "",
        labelPoint: [0.5, 0.5]
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({
      shape,
      bounds,
      isBinding,
      isEditing,
      isSelected,
      isGhost,
      meta,
      events,
      onShapeChange,
      onShapeBlur
    }, ref) => {
      const { id, label = "", size, style, labelPoint = LABEL_POINT } = shape;
      const font = getFontStyle(style);
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const Component = style.dash === "draw" ? DrawTriangle : DashedTriangle;
      const handleLabelChange = React102.useCallback((label2) => onShapeChange == null ? void 0 : onShapeChange({ id, label: label2 }), [onShapeChange]);
      const offsetY = React102.useMemo(() => {
        const center = p.div(size, 2);
        const centroid = getTriangleCentroid(size);
        return (centroid[1] - center[1]) * 0.72;
      }, [size]);
      return /* @__PURE__ */ React102.createElement(FullWrapper2, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React102.createElement(TextLabel, {
        font,
        text: label,
        color: styles222.stroke,
        offsetX: (labelPoint[0] - 0.5) * bounds.width,
        offsetY: offsetY + (labelPoint[1] - 0.5) * bounds.height,
        isEditing,
        onChange: handleLabelChange,
        onBlur: onShapeBlur
      }), /* @__PURE__ */ React102.createElement(SVGContainer, {
        id: shape.id + "_svg",
        opacity: isGhost ? GHOSTED_OPACITY : 1
      }, isBinding && /* @__PURE__ */ React102.createElement(TriangleBindingIndicator, {
        size
      }), /* @__PURE__ */ React102.createElement(Component, {
        id,
        style,
        size,
        isSelected,
        isDarkMode: meta.isDarkMode
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { size } = shape;
      return /* @__PURE__ */ React102.createElement("polygon", {
        points: getTrianglePoints(size).join()
      });
    }));
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style || next.label !== prev.label;
    });
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "getExpandedBounds", (shape) => {
      return Utils.getBoundsFromPoints(getTrianglePoints(shape.size, this.bindingDistance).map((pt) => p.add(pt, shape.point)));
    });
    __publicField2(this, "hitTestLineSegment", (shape, A4, B4) => {
      return intersectLineSegmentPolyline(A4, B4, this.getPoints(shape)).didIntersect;
    });
    __publicField2(this, "hitTestBounds", (shape, bounds) => {
      return Utils.boundsContained(this.getBounds(shape), bounds) || intersectBoundsPolygon(bounds, this.getPoints(shape)).length > 0;
    });
    __publicField2(this, "getBindingPoint", (shape, fromShape, point, origin, direction, bindAnywhere) => {
      const expandedBounds = this.getExpandedBounds(shape);
      if (!Utils.pointInBounds(point, expandedBounds))
        return;
      const points = getTrianglePoints(shape.size).map((pt) => p.add(pt, shape.point));
      const expandedPoints = getTrianglePoints(shape.size, this.bindingDistance).map((pt) => p.add(pt, shape.point));
      const closestDistanceToEdge = Utils.pointsToLineSegments(points, true).map(([a6, b7]) => p.distanceToLineSegment(a6, b7, point)).sort((a6, b7) => a6 - b7)[0];
      if (!(Utils.pointInPolygon(point, expandedPoints) || closestDistanceToEdge < this.bindingDistance))
        return;
      const intersections = Utils.pointsToLineSegments(expandedPoints.concat([expandedPoints[0]])).map((segment) => intersectRayLineSegment(origin, direction, segment[0], segment[1])).filter((intersection2) => intersection2.didIntersect).flatMap((intersection2) => intersection2.points);
      if (!intersections.length)
        return;
      const center = p.add(getTriangleCentroid(shape.size), shape.point);
      const intersection = intersections.sort((a6, b7) => p.dist(b7, origin) - p.dist(a6, origin))[0];
      const middlePoint = p.med(point, intersection);
      let anchor;
      let distance;
      if (bindAnywhere) {
        anchor = p.dist(point, center) < BINDING_DISTANCE / 2 ? center : point;
        distance = 0;
      } else {
        if (p.distanceToLineSegment(point, middlePoint, center) < BINDING_DISTANCE / 2) {
          anchor = center;
        } else {
          anchor = middlePoint;
        }
        if (Utils.pointInPolygon(point, points)) {
          distance = this.bindingDistance;
        } else {
          distance = Math.max(this.bindingDistance, closestDistanceToEdge);
        }
      }
      const bindingPoint = p.divV(p.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [
        expandedBounds.width,
        expandedBounds.height
      ]);
      return {
        point: p.clampV(bindingPoint, 0, 1),
        distance
      };
    });
    __publicField2(this, "transform", transformRectangle);
    __publicField2(this, "transformSingle", transformSingleRectangle);
  }
  getPoints(shape) {
    const {
      rotation = 0,
      point: [x7, y4],
      size: [w7, h6]
    } = shape;
    return [
      [x7 + w7 / 2, y4],
      [x7, y4 + h6],
      [x7 + w7, y4 + h6]
    ].map((pt) => p.rotWith(pt, this.getCenter(shape), rotation));
  }
};
var FullWrapper2 = styled("div", { width: "100%", height: "100%" });
function getEllipseStrokePoints(id, radius, style) {
  const { strokeWidth } = getShapeStyle(style);
  const getRandom = Utils.rng(id);
  const rx = radius[0] + getRandom() * strokeWidth * 2;
  const ry = radius[1] + getRandom() * strokeWidth * 2;
  const perimeter = Utils.perimeterOfEllipse(rx, ry);
  const points = [];
  const start = Math.PI + Math.PI * getRandom();
  const extra = Math.abs(getRandom());
  const count = Math.max(16, perimeter / 10);
  for (let i7 = 0; i7 < count; i7++) {
    const t12 = EASINGS.easeInOutSine(i7 / (count + 1));
    const rads = start * 2 + Math.PI * (2 + extra) * t12;
    const c8 = Math.cos(rads);
    const s9 = Math.sin(rads);
    points.push([rx * c8 + radius[0], ry * s9 + radius[1], t12 + 0.5 + getRandom() / 2]);
  }
  return me(points, {
    size: 1 + strokeWidth * 2,
    thinning: 0.618,
    end: { taper: perimeter / 8 },
    start: { taper: perimeter / 12 },
    streamline: 0,
    simulatePressure: true
  });
}
function getEllipsePath(id, radius, style) {
  const { strokeWidth } = getShapeStyle(style);
  const getRandom = Utils.rng(id);
  const rx = radius[0] + getRandom() * strokeWidth * 2;
  const ry = radius[1] + getRandom() * strokeWidth * 2;
  const perimeter = Utils.perimeterOfEllipse(rx, ry);
  return Utils.getSvgPathFromStroke(ie(getEllipseStrokePoints(id, radius, style), {
    size: 2 + strokeWidth * 2,
    thinning: 0.618,
    end: { taper: perimeter / 8 },
    start: { taper: perimeter / 12 },
    streamline: 0,
    simulatePressure: true
  }));
}
function getEllipseIndicatorPath(id, radius, style) {
  return Utils.getSvgPathFromStroke(getEllipseStrokePoints(id, radius, style).map((pt) => pt.point.slice(0, 2)), false);
}
var DrawEllipse = React112.memo(function DrawEllipse2({
  id,
  radius,
  style,
  isSelected,
  isDarkMode
}) {
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const innerPath = getEllipsePath(id, radius, style);
  return /* @__PURE__ */ React112.createElement(React112.Fragment, null, /* @__PURE__ */ React112.createElement("ellipse", {
    className: style.isFilled || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    cx: radius[0],
    cy: radius[1],
    rx: radius[0],
    ry: radius[1]
  }), style.isFilled && /* @__PURE__ */ React112.createElement("path", {
    d: getEllipseIndicatorPath(id, radius, style),
    stroke: "none",
    fill,
    pointerEvents: "none"
  }), /* @__PURE__ */ React112.createElement("path", {
    d: innerPath,
    fill: stroke,
    stroke,
    strokeWidth,
    pointerEvents: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
});
var DashedEllipse = React122.memo(function DashedEllipse2({
  radius,
  style,
  isSelected,
  isDarkMode
}) {
  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode);
  const sw = 1 + strokeWidth * 1.618;
  const rx = Math.max(0, radius[0] - sw / 2);
  const ry = Math.max(0, radius[1] - sw / 2);
  const perimeter = Utils.perimeterOfEllipse(rx, ry);
  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(perimeter < 64 ? perimeter * 2 : perimeter, strokeWidth * 1.618, style.dash, 4);
  return /* @__PURE__ */ React122.createElement(React122.Fragment, null, /* @__PURE__ */ React122.createElement("ellipse", {
    className: style.isFilled || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
    cx: radius[0],
    cy: radius[1],
    rx: radius[0],
    ry: radius[1]
  }), /* @__PURE__ */ React122.createElement("ellipse", {
    cx: radius[0],
    cy: radius[1],
    rx,
    ry,
    fill,
    stroke,
    strokeWidth: sw,
    strokeDasharray,
    strokeDashoffset,
    pointerEvents: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
});
var EllipseUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "ellipse");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "ellipse",
        name: "Ellipse",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        radius: [1, 1],
        rotation: 0,
        style: defaultStyle,
        label: "",
        labelPoint: [0.5, 0.5]
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({
      shape,
      isGhost,
      isSelected,
      isBinding,
      isEditing,
      meta,
      bounds,
      events,
      onShapeChange,
      onShapeBlur
    }, ref) => {
      const { id, radius, style, label = "", labelPoint = LABEL_POINT } = shape;
      const font = getFontStyle(shape.style);
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const strokeWidth = styles222.strokeWidth;
      const sw = 1 + strokeWidth * 1.618;
      const rx = Math.max(0, radius[0] - sw / 2);
      const ry = Math.max(0, radius[1] - sw / 2);
      const Component = style.dash === "draw" ? DrawEllipse : DashedEllipse;
      const handleLabelChange = React132.useCallback((label2) => onShapeChange == null ? void 0 : onShapeChange({ id, label: label2 }), [onShapeChange]);
      return /* @__PURE__ */ React132.createElement(FullWrapper3, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React132.createElement(TextLabel, {
        isEditing,
        onChange: handleLabelChange,
        onBlur: onShapeBlur,
        font,
        text: label,
        color: styles222.stroke,
        offsetX: (labelPoint[0] - 0.5) * bounds.width,
        offsetY: (labelPoint[1] - 0.5) * bounds.height
      }), /* @__PURE__ */ React132.createElement(SVGContainer, {
        id: shape.id + "_svg",
        opacity: isGhost ? GHOSTED_OPACITY : 1
      }, isBinding && /* @__PURE__ */ React132.createElement("ellipse", {
        className: "tl-binding-indicator",
        cx: radius[0],
        cy: radius[1],
        rx,
        ry,
        strokeWidth: this.bindingDistance
      }), /* @__PURE__ */ React132.createElement(Component, {
        id,
        radius,
        style,
        isSelected,
        isDarkMode: meta.isDarkMode
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { id, radius, style } = shape;
      const styles222 = getShapeStyle(style);
      const strokeWidth = styles222.strokeWidth;
      const sw = 1 + strokeWidth * 1.618;
      const rx = Math.max(0, radius[0] - sw / 2);
      const ry = Math.max(0, radius[1] - sw / 2);
      return style.dash === "draw" ? /* @__PURE__ */ React132.createElement("path", {
        d: getEllipseIndicatorPath(id, radius, style)
      }) : /* @__PURE__ */ React132.createElement("ellipse", {
        cx: radius[0],
        cy: radius[1],
        rx,
        ry
      });
    }));
    __publicField2(this, "hitTestPoint", (shape, point) => {
      return Utils.pointInBounds(point, this.getRotatedBounds(shape)) && Utils.pointInEllipse(point, this.getCenter(shape), shape.radius[0], shape.radius[1], shape.rotation || 0);
    });
    __publicField2(this, "hitTestLineSegment", (shape, A4, B4) => {
      return intersectLineSegmentEllipse(A4, B4, this.getCenter(shape), shape.radius[0], shape.radius[1], shape.rotation || 0).didIntersect;
    });
    __publicField2(this, "getBounds", (shape) => {
      return Utils.getFromCache(this.boundsCache, shape, () => {
        return Utils.getRotatedEllipseBounds(shape.point[0], shape.point[1], shape.radius[0], shape.radius[1], 0);
      });
    });
    __publicField2(this, "getRotatedBounds", (shape) => {
      return Utils.getRotatedEllipseBounds(shape.point[0], shape.point[1], shape.radius[0], shape.radius[1], shape.rotation);
    });
    __publicField2(this, "hitTestBounds", (shape, bounds) => {
      const shapeBounds = this.getBounds(shape);
      return Utils.boundsContained(shapeBounds, bounds) || intersectEllipseBounds(this.getCenter(shape), shape.radius[0], shape.radius[1], shape.rotation || 0, bounds).length > 0;
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.radius !== prev.radius || next.style !== prev.style || next.label !== prev.label;
    });
    __publicField2(this, "getCenter", (shape) => {
      return e.add(shape.point, shape.radius);
    });
    __publicField2(this, "getBindingPoint", (shape, fromShape, point, origin, direction, bindAnywhere) => {
      {
        const expandedBounds = this.getExpandedBounds(shape);
        const center = this.getCenter(shape);
        let bindingPoint;
        let distance;
        if (!Utils.pointInEllipse(point, center, shape.radius[0] + this.bindingDistance, shape.radius[1] + this.bindingDistance)) {
          return;
        }
        if (bindAnywhere) {
          if (e.dist(point, this.getCenter(shape)) < 12) {
            bindingPoint = [0.5, 0.5];
          } else {
            bindingPoint = e.divV(e.sub(point, [expandedBounds.minX, expandedBounds.minY]), [
              expandedBounds.width,
              expandedBounds.height
            ]);
          }
          distance = 0;
        } else {
          let intersection = intersectRayEllipse(origin, direction, center, shape.radius[0], shape.radius[1], shape.rotation || 0).points.sort((a6, b7) => e.dist(a6, origin) - e.dist(b7, origin))[0];
          if (!intersection) {
            intersection = intersectLineSegmentEllipse(point, center, center, shape.radius[0], shape.radius[1], shape.rotation || 0).points.sort((a6, b7) => e.dist(a6, point) - e.dist(b7, point))[0];
          }
          if (!intersection) {
            return void 0;
          }
          const anchor = e.med(point, intersection);
          if (e.distanceToLineSegment(point, anchor, this.getCenter(shape)) < 12) {
            bindingPoint = [0.5, 0.5];
          } else {
            bindingPoint = e.divV(e.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [
              expandedBounds.width,
              expandedBounds.height
            ]);
          }
          if (Utils.pointInEllipse(point, center, shape.radius[0], shape.radius[1], shape.rotation || 0)) {
            distance = this.bindingDistance / 2;
          } else {
            const innerIntersection = intersectLineSegmentEllipse(point, center, center, shape.radius[0], shape.radius[1], shape.rotation || 0).points[0];
            if (!innerIntersection)
              return void 0;
            distance = Math.max(this.bindingDistance / 2, e.dist(point, innerIntersection));
          }
        }
        return {
          point: bindingPoint,
          distance
        };
      }
    });
    __publicField2(this, "transform", (shape, bounds, { scaleX, scaleY, initialShape }) => {
      const { rotation = 0 } = initialShape;
      return {
        point: [bounds.minX, bounds.minY],
        radius: [bounds.width / 2, bounds.height / 2],
        rotation: scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? -(rotation || 0) : rotation || 0
      };
    });
    __publicField2(this, "transformSingle", (shape, bounds) => {
      return {
        point: e.toFixed([bounds.minX, bounds.minY]),
        radius: e.div([bounds.width, bounds.height], 2)
      };
    });
  }
};
var FullWrapper3 = styled("div", { width: "100%", height: "100%" });
function getArrowArcPath(start, end, circle, bend) {
  return [
    "M",
    start[0],
    start[1],
    "A",
    circle[2],
    circle[2],
    0,
    0,
    bend < 0 ? 0 : 1,
    end[0],
    end[1]
  ].join(" ");
}
function getBendPoint(handles, bend) {
  const { start, end } = handles;
  const dist = p.dist(start.point, end.point);
  const midPoint = p.med(start.point, end.point);
  const bendDist = dist / 2 * bend;
  const u5 = p.uni(p.vec(start.point, end.point));
  const point = p.toFixed(Math.abs(bendDist) < 10 ? midPoint : p.add(midPoint, p.mul(p.per(u5), bendDist)));
  return point;
}
function renderFreehandArrowShaft(id, style, start, end, decorationStart, decorationEnd) {
  const getRandom = Utils.rng(id);
  const strokeWidth = getShapeStyle(style).strokeWidth;
  const startPoint = decorationStart ? p.nudge(start, end, strokeWidth) : start;
  const endPoint = decorationEnd ? p.nudge(end, start, strokeWidth) : end;
  const stroke = Te([startPoint, endPoint], {
    size: strokeWidth,
    thinning: 0.618 + getRandom() * 0.2,
    easing: EASINGS.easeOutQuad,
    simulatePressure: true,
    streamline: 0,
    last: true
  });
  return Utils.getSvgPathFromStroke(stroke);
}
function renderCurvedFreehandArrowShaft(id, style, start, end, decorationStart, decorationEnd, center, radius, length, easing) {
  const getRandom = Utils.rng(id);
  const strokeWidth = getShapeStyle(style).strokeWidth;
  const startPoint = decorationStart ? p.rotWith(start, center, strokeWidth / length) : start;
  const endPoint = decorationEnd ? p.rotWith(end, center, -(strokeWidth / length)) : end;
  const startAngle = p.angle(center, startPoint);
  const endAngle = p.angle(center, endPoint);
  const points = [];
  const count = 8 + Math.floor(Math.abs(length) / 20 * 1 + getRandom() / 2);
  for (let i7 = 0; i7 < count; i7++) {
    const t12 = easing(i7 / count);
    const angle = Utils.lerpAngles(startAngle, endAngle, t12);
    points.push(p.toFixed(p.nudgeAtAngle(center, angle, radius)));
  }
  const stroke = Te([startPoint, ...points, endPoint], {
    size: 1 + strokeWidth,
    thinning: 0.618 + getRandom() * 0.2,
    easing: EASINGS.easeOutQuad,
    simulatePressure: false,
    streamline: 0,
    last: true
  });
  return Utils.getSvgPathFromStroke(stroke);
}
function getCtp(start, bend, end) {
  return Utils.circleFromThreePoints(start, end, bend);
}
function getCurvedArrowHeadPoints(A4, r1, C6, r22, sweep) {
  const ints = intersectCircleCircle(A4, r1 * 0.618, C6, r22).points;
  if (!ints) {
    TLDR.warn("Could not find an intersection for the arrow head.");
    return { left: A4, right: A4 };
  }
  const int = sweep ? ints[0] : ints[1];
  const left6 = int ? p.nudge(p.rotWith(int, A4, Math.PI / 6), A4, r1 * -0.382) : A4;
  const right6 = int ? p.nudge(p.rotWith(int, A4, -Math.PI / 6), A4, r1 * -0.382) : A4;
  return { left: left6, right: right6 };
}
function getStraightArrowHeadPoints(A4, B4, r12) {
  const ints = intersectCircleLineSegment(A4, r12, A4, B4).points;
  if (!ints) {
    TLDR.warn("Could not find an intersection for the arrow head.");
    return { left: A4, right: A4 };
  }
  const int = ints[0];
  const left6 = int ? p.rotWith(int, A4, Math.PI / 6) : A4;
  const right6 = int ? p.rotWith(int, A4, -Math.PI / 6) : A4;
  return { left: left6, right: right6 };
}
function getCurvedArrowHeadPath(A4, r1, C6, r22, sweep) {
  const { left: left6, right: right6 } = getCurvedArrowHeadPoints(A4, r1, C6, r22, sweep);
  return `M ${left6} L ${A4} ${right6}`;
}
function getStraightArrowHeadPath(A4, B4, r12) {
  const { left: left6, right: right6 } = getStraightArrowHeadPoints(A4, B4, r12);
  return `M ${left6} L ${A4} ${right6}`;
}
function getArrowPath(style, start, bend, end, decorationStart, decorationEnd) {
  const { strokeWidth } = getShapeStyle(style, false);
  const arrowDist = p.dist(start, end);
  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8);
  const path = [];
  const isStraightLine = p.dist(bend, p.toFixed(p.med(start, end))) < 1;
  if (isStraightLine) {
    path.push(`M ${start} L ${end}`);
    if (decorationStart) {
      path.push(getStraightArrowHeadPath(start, end, arrowHeadLength));
    }
    if (decorationEnd) {
      path.push(getStraightArrowHeadPath(end, start, arrowHeadLength));
    }
  } else {
    const circle = getCtp(start, bend, end);
    const center = [circle[0], circle[1]];
    const radius = circle[2];
    const length = getArcLength(center, radius, start, end);
    path.push(`M ${start} A ${radius} ${radius} 0 0 ${length > 0 ? "1" : "0"} ${end}`);
    if (decorationStart)
      path.push(getCurvedArrowHeadPath(start, arrowHeadLength, center, radius, length < 0));
    if (decorationEnd) {
      path.push(getCurvedArrowHeadPath(end, arrowHeadLength, center, radius, length >= 0));
    }
  }
  return path.join(" ");
}
function getArcPoints(start, bend, end) {
  if (p.dist2(bend, p.med(start, end)) <= 4)
    return [start, end];
  const points = [];
  const circle = getCtp(start, bend, end);
  const center = [circle[0], circle[1]];
  const radius = circle[2];
  const startAngle = p.angle(center, start);
  const endAngle = p.angle(center, end);
  for (let i7 = 1 / 20; i7 < 1; i7 += 1 / 20) {
    const angle = Utils.lerpAngles(startAngle, endAngle, i7);
    points.push(p.nudgeAtAngle(center, angle, radius));
  }
  return points;
}
function isAngleBetween2(a6, b7, c8) {
  if (c8 === a6 || c8 === b7)
    return true;
  const PI24 = Math.PI * 2;
  const AB = (b7 - a6 + PI24) % PI24;
  const AC = (c8 - a6 + PI24) % PI24;
  return AB <= Math.PI !== AC > AB;
}
function getArcLength(C6, r12, A4, B4) {
  const sweep = Utils.getSweep(C6, A4, B4);
  return r12 * (2 * Math.PI) * (sweep / (2 * Math.PI));
}
function Arrowhead({ left: left6, middle, right: right6, stroke, strokeWidth }) {
  return /* @__PURE__ */ React142.createElement("g", null, /* @__PURE__ */ React142.createElement("path", {
    className: "tl-stroke-hitarea",
    d: `M ${left6} L ${middle} ${right6}`
  }), /* @__PURE__ */ React142.createElement("path", {
    d: `M ${left6} L ${middle} ${right6}`,
    fill: "none",
    stroke,
    strokeWidth,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    pointerEvents: "none"
  }));
}
var StraightArrow = React152.memo(function StraightArrow2({
  id,
  style,
  start,
  end,
  decorationStart,
  decorationEnd,
  isDraw,
  isDarkMode
}) {
  const arrowDist = p.dist(start, end);
  if (arrowDist < 2)
    return null;
  const styles222 = getShapeStyle(style, isDarkMode);
  const { strokeWidth } = styles222;
  const sw = 1 + strokeWidth * 1.618;
  const path = isDraw ? renderFreehandArrowShaft(id, style, start, end, decorationStart, decorationEnd) : "M" + p.toFixed(start) + "L" + p.toFixed(end);
  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(arrowDist, strokeWidth * 1.618, style.dash, 2, false);
  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8);
  const startArrowHead = decorationStart ? getStraightArrowHeadPoints(start, end, arrowHeadLength) : null;
  const endArrowHead = decorationEnd ? getStraightArrowHeadPoints(end, start, arrowHeadLength) : null;
  return /* @__PURE__ */ React152.createElement(React152.Fragment, null, /* @__PURE__ */ React152.createElement("path", {
    className: "tl-stroke-hitarea",
    d: path
  }), /* @__PURE__ */ React152.createElement("path", {
    d: path,
    fill: styles222.stroke,
    stroke: styles222.stroke,
    strokeWidth: isDraw ? sw / 2 : sw,
    strokeDasharray,
    strokeDashoffset,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    pointerEvents: "stroke"
  }), startArrowHead && /* @__PURE__ */ React152.createElement(Arrowhead, {
    left: startArrowHead.left,
    middle: start,
    right: startArrowHead.right,
    stroke: styles222.stroke,
    strokeWidth: sw
  }), endArrowHead && /* @__PURE__ */ React152.createElement(Arrowhead, {
    left: endArrowHead.left,
    middle: end,
    right: endArrowHead.right,
    stroke: styles222.stroke,
    strokeWidth: sw
  }));
});
var CurvedArrow = React162.memo(function CurvedArrow2({
  id,
  style,
  start,
  bend,
  end,
  arrowBend,
  decorationStart,
  decorationEnd,
  isDraw,
  isDarkMode
}) {
  const arrowDist = p.dist(start, end);
  if (arrowDist < 2)
    return null;
  const styles222 = getShapeStyle(style, isDarkMode);
  const { strokeWidth } = styles222;
  const sw = 1 + strokeWidth * 1.618;
  const circle = getCtp(start, bend, end);
  const center = [circle[0], circle[1]];
  const radius = circle[2];
  const length = getArcLength(center, radius, start, end);
  const getRandom = Utils.rng(id);
  const easing = EASINGS[getRandom() > 0 ? "easeInOutSine" : "easeInOutCubic"];
  const path = isDraw ? renderCurvedFreehandArrowShaft(id, style, start, end, decorationStart, decorationEnd, center, radius, length, easing) : getArrowArcPath(start, end, circle, arrowBend);
  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(Math.abs(length), sw, style.dash, 2, false);
  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8);
  const startArrowHead = decorationStart ? getCurvedArrowHeadPoints(start, arrowHeadLength, center, radius, length < 0) : null;
  const endArrowHead = decorationEnd ? getCurvedArrowHeadPoints(end, arrowHeadLength, center, radius, length >= 0) : null;
  return /* @__PURE__ */ React162.createElement(React162.Fragment, null, /* @__PURE__ */ React162.createElement("path", {
    className: "tl-stroke-hitarea",
    d: path
  }), /* @__PURE__ */ React162.createElement("path", {
    d: path,
    fill: isDraw ? styles222.stroke : "none",
    stroke: styles222.stroke,
    strokeWidth: isDraw ? 0 : sw,
    strokeDasharray,
    strokeDashoffset,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    pointerEvents: "none"
  }), startArrowHead && /* @__PURE__ */ React162.createElement(Arrowhead, {
    left: startArrowHead.left,
    middle: start,
    right: startArrowHead.right,
    stroke: styles222.stroke,
    strokeWidth: sw
  }), endArrowHead && /* @__PURE__ */ React162.createElement(Arrowhead, {
    left: endArrowHead.left,
    middle: end,
    right: endArrowHead.right,
    stroke: styles222.stroke,
    strokeWidth: sw
  }));
});
function LabelMask({ id, bounds, labelSize, offset, scale = 1 }) {
  return /* @__PURE__ */ React172.createElement("defs", null, /* @__PURE__ */ React172.createElement("mask", {
    id: id + "_clip"
  }, /* @__PURE__ */ React172.createElement("rect", {
    x: -100,
    y: -100,
    width: bounds.width + 200,
    height: bounds.height + 200,
    fill: "white"
  }), /* @__PURE__ */ React172.createElement("rect", {
    x: bounds.width / 2 - labelSize[0] / 2 * scale + ((offset == null ? void 0 : offset[0]) || 0),
    y: bounds.height / 2 - labelSize[1] / 2 * scale + ((offset == null ? void 0 : offset[1]) || 0),
    width: labelSize[0] * scale,
    height: labelSize[1] * scale,
    rx: 4 * scale,
    ry: 4 * scale,
    fill: "black",
    opacity: Math.max(scale, 0.8)
  })));
}
var ArrowUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "arrow");
    __publicField2(this, "hideBounds", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "pathCache", /* @__PURE__ */ new WeakMap());
    __publicField2(this, "getShape", (props) => {
      var _a3, _b, _c, _d;
      return __spreadValues4({
        id: "id",
        type: "arrow",
        name: "Arrow",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        rotation: 0,
        bend: 0,
        handles: {
          start: __spreadValues4({
            id: "start",
            index: 0,
            point: [0, 0],
            canBind: true
          }, (_a3 = props.handles) == null ? void 0 : _a3.start),
          end: __spreadValues4({
            id: "end",
            index: 1,
            point: [1, 1],
            canBind: true
          }, (_b = props.handles) == null ? void 0 : _b.end),
          bend: __spreadValues4({
            id: "bend",
            index: 2,
            point: [0.5, 0.5]
          }, (_c = props.handles) == null ? void 0 : _c.bend)
        },
        decorations: (_d = props.decorations) != null ? _d : {
          end: "arrow"
        },
        style: __spreadValues4(__spreadProps4(__spreadValues4({}, defaultStyle), {
          isFilled: false
        }), props.style),
        label: "",
        labelPoint: [0.5, 0.5]
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, isEditing, isGhost, meta, events, onShapeChange, onShapeBlur }, ref) => {
      var _a3, _b;
      const {
        id,
        label = "",
        handles: { start, bend, end },
        decorations = {},
        style
      } = shape;
      const hasLabel = (_b = (_a3 = label == null ? void 0 : label.trim()) == null ? void 0 : _a3.length) != null ? _b : 0 > 0;
      const isStraightLine = e.dist(bend.point, e.toFixed(e.med(start.point, end.point))) < 1;
      const font = getFontStyle(style);
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const labelSize = hasLabel || isEditing ? getTextLabelSize(label, font) : [0, 0];
      const bounds = this.getBounds(shape);
      const dist = React182.useMemo(() => {
        const { start: start2, bend: bend2, end: end2 } = shape.handles;
        if (isStraightLine)
          return e.dist(start2.point, end2.point);
        const circle = getCtp(start2.point, bend2.point, end2.point);
        const center = circle.slice(0, 2);
        const radius = circle[2];
        const length = getArcLength(center, radius, start2.point, end2.point);
        return Math.abs(length);
      }, [shape.handles]);
      const scale = Math.max(0.5, Math.min(1, Math.max(dist / (labelSize[1] + 128), dist / (labelSize[0] + 128))));
      const offset = React182.useMemo(() => {
        const bounds2 = this.getBounds(shape);
        const offset2 = e.sub(shape.handles.bend.point, e.toFixed([bounds2.width / 2, bounds2.height / 2]));
        return offset2;
      }, [shape, scale]);
      const handleLabelChange = React182.useCallback((label2) => {
        onShapeChange == null ? void 0 : onShapeChange({ id, label: label2 });
      }, [onShapeChange]);
      const Component = isStraightLine ? StraightArrow : CurvedArrow;
      return /* @__PURE__ */ React182.createElement(FullWrapper4, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React182.createElement(TextLabel, {
        font,
        text: label,
        color: styles222.stroke,
        offsetX: offset[0],
        offsetY: offset[1],
        scale,
        isEditing,
        onChange: handleLabelChange,
        onBlur: onShapeBlur
      }), /* @__PURE__ */ React182.createElement(SVGContainer, {
        id: shape.id + "_svg"
      }, /* @__PURE__ */ React182.createElement("defs", null, /* @__PURE__ */ React182.createElement("mask", {
        id: shape.id + "_clip"
      }, /* @__PURE__ */ React182.createElement("rect", {
        x: -100,
        y: -100,
        width: bounds.width + 200,
        height: bounds.height + 200,
        fill: "white"
      }), /* @__PURE__ */ React182.createElement("rect", {
        x: bounds.width / 2 - labelSize[0] / 2 * scale + offset[0],
        y: bounds.height / 2 - labelSize[1] / 2 * scale + offset[1],
        width: labelSize[0] * scale,
        height: labelSize[1] * scale,
        rx: 4 * scale,
        ry: 4 * scale,
        fill: "black",
        opacity: 1
      }))), /* @__PURE__ */ React182.createElement("g", {
        pointerEvents: "none",
        opacity: isGhost ? GHOSTED_OPACITY : 1,
        mask: hasLabel || isEditing ? `url(#${shape.id}_clip)` : ``
      }, /* @__PURE__ */ React182.createElement(Component, {
        id,
        style,
        start: start.point,
        end: end.point,
        bend: bend.point,
        arrowBend: shape.bend,
        decorationStart: decorations == null ? void 0 : decorations.start,
        decorationEnd: decorations == null ? void 0 : decorations.end,
        isDraw: style.dash === "draw",
        isDarkMode: meta.isDarkMode
      }))));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape, bounds }) => {
      var _a3, _b;
      const {
        style,
        decorations,
        label,
        handles: { start, bend, end }
      } = shape;
      const hasLabel = (_b = (_a3 = label == null ? void 0 : label.trim()) == null ? void 0 : _a3.length) != null ? _b : 0 > 0;
      const font = getFontStyle(style);
      const labelSize = hasLabel ? getTextLabelSize(label, font) : [0, 0];
      const isStraightLine = e.dist(bend.point, e.toFixed(e.med(start.point, end.point))) < 1;
      const dist = React182.useMemo(() => {
        const { start: start2, bend: bend2, end: end2 } = shape.handles;
        if (isStraightLine)
          return e.dist(start2.point, end2.point);
        const circle = getCtp(start2.point, bend2.point, end2.point);
        const center = circle.slice(0, 2);
        const radius = circle[2];
        const length = getArcLength(center, radius, start2.point, end2.point);
        return Math.abs(length);
      }, [shape.handles]);
      const scale = Math.max(0.5, Math.min(1, Math.max(dist / (labelSize[1] + 128), dist / (labelSize[0] + 128))));
      const offset = React182.useMemo(() => {
        const bounds2 = this.getBounds(shape);
        const offset2 = e.sub(shape.handles.bend.point, [bounds2.width / 2, bounds2.height / 2]);
        return offset2;
      }, [shape, scale]);
      return /* @__PURE__ */ React182.createElement(React182.Fragment, null, hasLabel && /* @__PURE__ */ React182.createElement(LabelMask, {
        id: shape.id,
        scale,
        offset,
        bounds,
        labelSize
      }), /* @__PURE__ */ React182.createElement("path", {
        d: getArrowPath(style, start.point, bend.point, end.point, decorations == null ? void 0 : decorations.start, decorations == null ? void 0 : decorations.end),
        mask: hasLabel ? `url(#${shape.id}_clip)` : ``
      }), hasLabel && /* @__PURE__ */ React182.createElement("rect", {
        x: bounds.width / 2 - labelSize[0] / 2 * scale + offset[0],
        y: bounds.height / 2 - labelSize[1] / 2 * scale + offset[1],
        width: labelSize[0] * scale,
        height: labelSize[1] * scale,
        rx: 4 * scale,
        ry: 4 * scale,
        fill: "transparent"
      }));
    }));
    __publicField2(this, "getBounds", (shape) => {
      const bounds = Utils.getFromCache(this.boundsCache, shape, () => {
        const {
          handles: { start, bend, end }
        } = shape;
        return Utils.getBoundsFromPoints(getArcPoints(start.point, bend.point, end.point));
      });
      return Utils.translateBounds(bounds, shape.point);
    });
    __publicField2(this, "getRotatedBounds", (shape) => {
      const {
        handles: { start, bend, end }
      } = shape;
      let points = getArcPoints(start.point, bend.point, end.point);
      const { minX, minY, maxX, maxY } = Utils.getBoundsFromPoints(points);
      if (shape.rotation !== 0) {
        points = points.map((pt) => e.rotWith(pt, [(minX + maxX) / 2, (minY + maxY) / 2], shape.rotation || 0));
      }
      return Utils.translateBounds(Utils.getBoundsFromPoints(points), shape.point);
    });
    __publicField2(this, "getCenter", (shape) => {
      const { start, end } = shape.handles;
      return e.add(shape.point, e.med(start.point, end.point));
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.decorations !== prev.decorations || next.handles !== prev.handles || next.style !== prev.style || next.label !== prev.label;
    });
    __publicField2(this, "hitTestPoint", (shape, point) => {
      const {
        handles: { start, bend, end }
      } = shape;
      const pt = e.sub(point, shape.point);
      const points = getArcPoints(start.point, bend.point, end.point);
      for (let i7 = 1; i7 < points.length; i7++) {
        if (e.distanceToLineSegment(points[i7 - 1], points[i7], pt) < 1) {
          return true;
        }
      }
      return false;
    });
    __publicField2(this, "hitTestLineSegment", (shape, A4, B4) => {
      const {
        handles: { start, bend, end }
      } = shape;
      const ptA = e.sub(A4, shape.point);
      const ptB = e.sub(B4, shape.point);
      const points = getArcPoints(start.point, bend.point, end.point);
      for (let i7 = 1; i7 < points.length; i7++) {
        if (intersectLineSegmentLineSegment(points[i7 - 1], points[i7], ptA, ptB).didIntersect) {
          return true;
        }
      }
      return false;
    });
    __publicField2(this, "hitTestBounds", (shape, bounds) => {
      const { start, end, bend } = shape.handles;
      const sp = e.add(shape.point, start.point);
      const ep = e.add(shape.point, end.point);
      if (Utils.pointInBounds(sp, bounds) || Utils.pointInBounds(ep, bounds)) {
        return true;
      }
      if (e.isEqual(e.med(start.point, end.point), bend.point)) {
        return intersectLineSegmentBounds(sp, ep, bounds).length > 0;
      } else {
        const [cx, cy, r12] = getCtp(start.point, bend.point, end.point);
        const cp = e.add(shape.point, [cx, cy]);
        return intersectArcBounds(cp, r12, sp, ep, bounds).length > 0;
      }
    });
    __publicField2(this, "transform", (shape, bounds, { initialShape, scaleX, scaleY }) => {
      const initialShapeBounds = this.getBounds(initialShape);
      const handles = ["start", "end"];
      const nextHandles = __spreadValues4({}, initialShape.handles);
      handles.forEach((handle) => {
        const [x7, y4] = nextHandles[handle].point;
        const nw = x7 / initialShapeBounds.width;
        const nh = y4 / initialShapeBounds.height;
        nextHandles[handle] = __spreadProps4(__spreadValues4({}, nextHandles[handle]), {
          point: [
            bounds.width * (scaleX < 0 ? 1 - nw : nw),
            bounds.height * (scaleY < 0 ? 1 - nh : nh)
          ]
        });
      });
      const { start, bend, end } = nextHandles;
      const dist = e.dist(start.point, end.point);
      const midPoint = e.med(start.point, end.point);
      const bendDist = dist / 2 * initialShape.bend;
      const u5 = e.uni(e.vec(start.point, end.point));
      const point = e.add(midPoint, e.mul(e.per(u5), bendDist));
      nextHandles["bend"] = __spreadProps4(__spreadValues4({}, bend), {
        point: e.toFixed(Math.abs(bendDist) < 10 ? midPoint : point)
      });
      return {
        point: e.toFixed([bounds.minX, bounds.minY]),
        handles: nextHandles
      };
    });
    __publicField2(this, "onDoubleClickHandle", (shape, handle) => {
      var _a3, _b;
      switch (handle) {
        case "bend": {
          return {
            bend: 0,
            handles: __spreadProps4(__spreadValues4({}, shape.handles), {
              bend: __spreadProps4(__spreadValues4({}, shape.handles.bend), {
                point: getBendPoint(shape.handles, shape.bend)
              })
            })
          };
        }
        case "start": {
          return {
            decorations: __spreadProps4(__spreadValues4({}, shape.decorations), {
              start: ((_a3 = shape.decorations) == null ? void 0 : _a3.start) ? void 0 : "arrow"
            })
          };
        }
        case "end": {
          return {
            decorations: __spreadProps4(__spreadValues4({}, shape.decorations), {
              end: ((_b = shape.decorations) == null ? void 0 : _b.end) ? void 0 : "arrow"
            })
          };
        }
      }
      return this;
    });
    __publicField2(this, "onHandleChange", (shape, handles) => {
      let nextHandles = Utils.deepMerge(shape.handles, handles);
      let nextBend = shape.bend;
      nextHandles = Utils.deepMerge(nextHandles, {
        start: {
          point: e.toFixed(nextHandles.start.point)
        },
        end: {
          point: e.toFixed(nextHandles.end.point)
        }
      });
      if (e.isEqual(nextHandles.start.point, nextHandles.end.point))
        return;
      if ("bend" in handles) {
        const { start, end, bend } = nextHandles;
        const distance = e.dist(start.point, end.point);
        const midPoint = e.med(start.point, end.point);
        const angle = e.angle(start.point, end.point);
        const u5 = e.uni(e.vec(start.point, end.point));
        const ap = e.add(midPoint, e.mul(e.per(u5), distance));
        const bp = e.sub(midPoint, e.mul(e.per(u5), distance));
        const bendPoint = e.nearestPointOnLineSegment(ap, bp, bend.point, true);
        const bendDist = e.dist(midPoint, bendPoint);
        const realBend = bendDist / (distance / 2);
        nextBend = Utils.clamp(realBend, -0.99, 0.99);
        const angleToBend = e.angle(start.point, bendPoint);
        if (e.isEqual(midPoint, getBendPoint(nextHandles, nextBend))) {
          nextBend = 0;
        } else if (isAngleBetween2(angle, angle + Math.PI, angleToBend)) {
          nextBend *= -1;
        }
      }
      const nextShape = {
        point: shape.point,
        bend: nextBend,
        handles: __spreadProps4(__spreadValues4({}, nextHandles), {
          bend: __spreadProps4(__spreadValues4({}, nextHandles.bend), {
            point: getBendPoint(nextHandles, nextBend)
          })
        })
      };
      const topLeft = shape.point;
      const nextBounds = this.getBounds(__spreadValues4({}, nextShape));
      const offset = e.sub([nextBounds.minX, nextBounds.minY], topLeft);
      if (!e.isEqual(offset, [0, 0])) {
        Object.values(nextShape.handles).forEach((handle) => {
          handle.point = e.toFixed(e.sub(handle.point, offset));
        });
        nextShape.point = e.toFixed(e.add(nextShape.point, offset));
      }
      return nextShape;
    });
  }
};
var FullWrapper4 = styled("div", { width: "100%", height: "100%" });
var GroupUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "group");
    __publicField2(this, "canBind", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "group",
        name: "Group",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [100, 100],
        rotation: 0,
        children: [],
        style: defaultStyle
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, isBinding, isGhost, isHovered, isSelected, events }, ref) => {
      const { id, size } = shape;
      const sw = 2;
      const w7 = Math.max(0, size[0] - sw / 2);
      const h6 = Math.max(0, size[1] - sw / 2);
      const strokes2 = [
        [[sw / 2, sw / 2], [w7, sw / 2], w7 - sw / 2],
        [[w7, sw / 2], [w7, h6], h6 - sw / 2],
        [[w7, h6], [sw / 2, h6], w7 - sw / 2],
        [[sw / 2, h6], [sw / 2, sw / 2], h6 - sw / 2]
      ];
      const paths = strokes2.map(([start, end], i7) => {
        return /* @__PURE__ */ React192.createElement("line", {
          key: id + "_" + i7,
          x1: start[0],
          y1: start[1],
          x2: end[0],
          y2: end[1]
        });
      });
      return /* @__PURE__ */ React192.createElement(SVGContainer, __spreadValues4({
        ref
      }, events), isBinding && /* @__PURE__ */ React192.createElement("rect", {
        className: "tl-binding-indicator",
        strokeWidth: this.bindingDistance
      }), /* @__PURE__ */ React192.createElement("g", {
        opacity: isGhost ? GHOSTED_OPACITY : 1
      }, /* @__PURE__ */ React192.createElement("rect", {
        x: 0,
        y: 0,
        width: size[0],
        height: size[1],
        fill: "transparent",
        pointerEvents: "all"
      }), /* @__PURE__ */ React192.createElement(ScaledLines, {
        stroke: "black",
        opacity: isHovered || isSelected ? 1 : 0,
        strokeLinecap: "round",
        pointerEvents: "stroke"
      }, paths)));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { id, size } = shape;
      const sw = 2;
      const w7 = Math.max(0, size[0] - sw / 2);
      const h6 = Math.max(0, size[1] - sw / 2);
      const strokes2 = [
        [[sw / 2, sw / 2], [w7, sw / 2], w7 - sw / 2],
        [[w7, sw / 2], [w7, h6], h6 - sw / 2],
        [[w7, h6], [sw / 2, h6], w7 - sw / 2],
        [[sw / 2, h6], [sw / 2, sw / 2], h6 - sw / 2]
      ];
      const paths = strokes2.map(([start, end], i7) => {
        return /* @__PURE__ */ React192.createElement("line", {
          key: id + "_" + i7,
          x1: start[0],
          y1: start[1],
          x2: end[0],
          y2: end[1]
        });
      });
      return /* @__PURE__ */ React192.createElement(ScaledLines, {
        strokeLinecap: "round",
        pointerEvents: "stroke"
      }, paths);
    }));
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style;
    });
  }
};
var ScaledLines = styled("g", {
  strokeWidth: "calc(1.5px * var(--tl-scale))",
  strokeDasharray: `calc(1px * var(--tl-scale)), calc(3px * var(--tl-scale))`
});
var StickyUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "sticky");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "hideResizeHandles", true);
    __publicField2(this, "showCloneHandles", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "sticky",
        name: "Sticky",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [200, 200],
        text: "",
        rotation: 0,
        style: defaultTextStyle
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, meta, events, isGhost, isBinding, isEditing, onShapeBlur, onShapeChange }, ref) => {
      const font = getStickyFontStyle(shape.style);
      const { color, fill } = getStickyShapeStyle(shape.style, meta.isDarkMode);
      const rContainer = React202.useRef(null);
      const rTextArea = React202.useRef(null);
      const rText = React202.useRef(null);
      const rIsMounted = React202.useRef(false);
      const handlePointerDown = React202.useCallback((e13) => {
        e13.stopPropagation();
      }, []);
      const onChange = React202.useCallback((text21) => {
        onShapeChange == null ? void 0 : onShapeChange({
          id: shape.id,
          type: shape.type,
          text: TLDR.normalizeText(text21)
        });
      }, [shape.id]);
      const handleTextChange = React202.useCallback((e13) => {
        onChange(e13.currentTarget.value);
      }, [onShapeChange, onChange]);
      const handleKeyDown = React202.useCallback((e13) => {
        if (e13.key === "Escape") {
          e13.preventDefault();
          e13.stopPropagation();
          onShapeBlur == null ? void 0 : onShapeBlur();
          return;
        }
        if (e13.key === "Tab" && shape.text.length === 0) {
          e13.preventDefault();
          return;
        }
        if (!(e13.key === "Meta" || e13.metaKey)) {
          e13.stopPropagation();
        } else if (e13.key === "z" && e13.metaKey) {
          if (e13.shiftKey) {
            document.execCommand("redo", false);
          } else {
            document.execCommand("undo", false);
          }
          e13.stopPropagation();
          e13.preventDefault();
          return;
        }
        if ((e13.metaKey || e13.ctrlKey) && e13.key === "=") {
          e13.preventDefault();
        }
        if (e13.key === "Tab") {
          e13.preventDefault();
          if (e13.shiftKey) {
            TextAreaUtils.unindent(e13.currentTarget);
          } else {
            TextAreaUtils.indent(e13.currentTarget);
          }
          onShapeChange == null ? void 0 : onShapeChange(__spreadProps4(__spreadValues4({}, shape), { text: TLDR.normalizeText(e13.currentTarget.value) }));
        }
      }, [shape, onShapeChange]);
      const handleBlur = React202.useCallback((e13) => {
        e13.currentTarget.setSelectionRange(0, 0);
        onShapeBlur == null ? void 0 : onShapeBlur();
      }, []);
      const handleFocus = React202.useCallback((e13) => {
        if (!isEditing)
          return;
        if (!rIsMounted.current)
          return;
        e13.currentTarget.select();
      }, [isEditing]);
      React202.useEffect(() => {
        if (isEditing) {
          rIsMounted.current = true;
          const elm = rTextArea.current;
          elm.focus();
          elm.select();
        }
      }, [isEditing]);
      React202.useEffect(() => {
        const text21 = rText.current;
        const { size } = shape;
        const { offsetHeight: currTextHeight } = text21;
        const minTextHeight = MIN_CONTAINER_HEIGHT - PADDING * 2;
        const prevTextHeight = size[1] - PADDING * 2;
        if (currTextHeight === prevTextHeight)
          return;
        if (currTextHeight > minTextHeight) {
          onShapeChange == null ? void 0 : onShapeChange({ id: shape.id, size: [size[0], currTextHeight + PADDING * 2] });
          return;
        }
        if (currTextHeight < minTextHeight && size[1] > MIN_CONTAINER_HEIGHT) {
          onShapeChange == null ? void 0 : onShapeChange({ id: shape.id, size: [size[0], MIN_CONTAINER_HEIGHT] });
          return;
        }
        const textarea = rTextArea.current;
        textarea == null ? void 0 : textarea.focus();
      }, [shape.text, shape.size[1], shape.style]);
      const style = {
        font,
        color,
        textShadow: meta.isDarkMode ? `0.5px 0.5px 2px rgba(255, 255, 255,.25)` : `0.5px 0.5px 2px rgba(255, 255, 255,.5)`
      };
      return /* @__PURE__ */ React202.createElement(HTMLContainer, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React202.createElement(StyledStickyContainer, {
        ref: rContainer,
        isDarkMode: meta.isDarkMode,
        isGhost,
        style: __spreadValues4({ backgroundColor: fill }, style)
      }, isBinding && /* @__PURE__ */ React202.createElement("div", {
        className: "tl-binding-indicator",
        style: {
          position: "absolute",
          top: -this.bindingDistance,
          left: -this.bindingDistance,
          width: `calc(100% + ${this.bindingDistance * 2}px)`,
          height: `calc(100% + ${this.bindingDistance * 2}px)`,
          backgroundColor: "var(--tl-selectFill)"
        }
      }), /* @__PURE__ */ React202.createElement(StyledText, {
        ref: rText,
        isEditing,
        alignment: shape.style.textAlign
      }, shape.text, "\u200B"), isEditing && /* @__PURE__ */ React202.createElement(StyledTextArea, {
        ref: rTextArea,
        onPointerDown: handlePointerDown,
        value: shape.text,
        onChange: handleTextChange,
        onKeyDown: handleKeyDown,
        onFocus: handleFocus,
        onBlur: handleBlur,
        tabIndex: -1,
        autoComplete: "false",
        autoCapitalize: "false",
        autoCorrect: "false",
        autoSave: "false",
        autoFocus: true,
        spellCheck: true,
        alignment: shape.style.textAlign,
        onContextMenu: stopPropagation,
        onCopy: stopPropagation,
        onPaste: stopPropagation,
        onCut: stopPropagation
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const {
        size: [width, height]
      } = shape;
      return /* @__PURE__ */ React202.createElement("rect", {
        x: 0,
        y: 0,
        rx: 3,
        ry: 3,
        width: Math.max(1, width),
        height: Math.max(1, height)
      });
    }));
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style || next.text !== prev.text;
    });
    __publicField2(this, "transform", (shape, bounds, { scaleX, scaleY, transformOrigin }) => {
      const point = e.toFixed([
        bounds.minX + (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]),
        bounds.minY + (bounds.height - shape.size[1]) * (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1])
      ]);
      return {
        point
      };
    });
    __publicField2(this, "transformSingle", (shape) => {
      return shape;
    });
    __publicField2(this, "getSvgElement", (shape, isDarkMode) => {
      const bounds = this.getBounds(shape);
      const textBounds = Utils.expandBounds(bounds, -PADDING);
      const textElm = getTextSvgElement(shape.text, shape.style, textBounds);
      const style = getStickyShapeStyle(shape.style, isDarkMode);
      textElm.setAttribute("fill", style.color);
      textElm.setAttribute("transform", `translate(${PADDING}, ${PADDING})`);
      const g7 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("width", bounds.width + "");
      rect.setAttribute("height", bounds.height + "");
      rect.setAttribute("fill", style.fill);
      rect.setAttribute("rx", "3");
      rect.setAttribute("ry", "3");
      g7.appendChild(rect);
      g7.appendChild(textElm);
      return g7;
    });
  }
};
var PADDING = 16;
var MIN_CONTAINER_HEIGHT = 200;
var StyledStickyContainer = styled("div", {
  pointerEvents: "all",
  position: "relative",
  backgroundColor: "rgba(255, 220, 100)",
  fontFamily: "sans-serif",
  height: "100%",
  width: "100%",
  padding: PADDING + "px",
  borderRadius: "3px",
  perspective: "800px",
  variants: {
    isGhost: {
      false: { opacity: 1 },
      true: { transition: "opacity .2s", opacity: GHOSTED_OPACITY }
    },
    isDarkMode: {
      true: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"
      },
      false: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"
      }
    }
  }
});
var commonTextWrapping2 = {
  whiteSpace: "pre-wrap",
  overflowWrap: "break-word"
};
var StyledText = styled("div", __spreadValues4({
  position: "absolute",
  top: PADDING,
  left: PADDING,
  width: `calc(100% - ${PADDING * 2}px)`,
  height: "fit-content",
  font: "inherit",
  pointerEvents: "none",
  userSelect: "none",
  variants: {
    isEditing: {
      true: {
        opacity: 1
      },
      false: {
        opacity: 1
      }
    },
    alignment: {
      ["start"]: {
        textAlign: "left"
      },
      ["middle"]: {
        textAlign: "center"
      },
      ["end"]: {
        textAlign: "right"
      },
      ["justify"]: {
        textAlign: "justify"
      }
    }
  }
}, commonTextWrapping2));
var StyledTextArea = styled("textarea", __spreadProps4(__spreadValues4({
  width: "100%",
  height: "100%",
  border: "none",
  overflow: "hidden",
  background: "none",
  outline: "none",
  textAlign: "left",
  font: "inherit",
  padding: 0,
  color: "transparent",
  verticalAlign: "top",
  resize: "none",
  caretColor: "black"
}, commonTextWrapping2), {
  variants: {
    alignment: {
      ["start"]: {
        textAlign: "left"
      },
      ["middle"]: {
        textAlign: "center"
      },
      ["end"]: {
        textAlign: "right"
      },
      ["justify"]: {
        textAlign: "justify"
      }
    }
  },
  "&:focus": {
    outline: "none",
    border: "none"
  }
}));
var TextUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "text");
    __publicField2(this, "isAspectRatioLocked", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "canBind", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "bindingDistance", BINDING_DISTANCE / 2);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "text",
        name: "Text",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        rotation: 0,
        text: " ",
        style: defaultTextStyle
      }, props);
    });
    __publicField2(this, "texts", /* @__PURE__ */ new Map());
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, isBinding, isGhost, isEditing, onShapeBlur, onShapeChange, meta, events }, ref) => {
      const { text: text21, style } = shape;
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const font = getFontStyle(shape.style);
      const rInput = React212.useRef(null);
      const rIsMounted = React212.useRef(false);
      const rEditedText = React212.useRef(text21);
      React212.useLayoutEffect(() => {
        if (text21 !== rEditedText.current) {
          let delta = [0, 0];
          this.texts.set(shape.id, text21);
          const currentBounds = this.getBounds(shape);
          const nextBounds = this.getBounds(shape);
          switch (shape.style.textAlign) {
            case "start": {
              break;
            }
            case "middle": {
              delta = e.div([nextBounds.width - currentBounds.width, 0], 2);
              break;
            }
            case "end": {
              delta = [nextBounds.width - currentBounds.width, 0];
              break;
            }
          }
          rEditedText.current = text21;
          onShapeChange == null ? void 0 : onShapeChange(__spreadProps4(__spreadValues4({}, shape), {
            id: shape.id,
            point: e.sub(shape.point, delta),
            text: text21
          }));
        }
      }, [text21]);
      const handleChange = React212.useCallback((e13) => {
        let delta = [0, 0];
        const newText = TLDR.normalizeText(e13.currentTarget.value);
        const currentBounds = this.getBounds(shape);
        this.texts.set(shape.id, newText);
        const nextBounds = this.getBounds(__spreadProps4(__spreadValues4({}, shape), {
          text: newText
        }));
        switch (shape.style.textAlign) {
          case "start": {
            break;
          }
          case "middle": {
            delta = e.div([nextBounds.width - currentBounds.width, 0], 2);
            break;
          }
          case "end": {
            delta = [nextBounds.width - currentBounds.width, 0];
            break;
          }
        }
        rEditedText.current = newText;
        onShapeChange == null ? void 0 : onShapeChange(__spreadProps4(__spreadValues4({}, shape), {
          id: shape.id,
          point: e.sub(shape.point, delta),
          text: newText
        }));
      }, [shape.id, shape.point]);
      const handleKeyDown = React212.useCallback((e13) => {
        if (e13.key === "Escape") {
          e13.preventDefault();
          e13.stopPropagation();
          onShapeBlur == null ? void 0 : onShapeBlur();
          return;
        }
        if (e13.key === "Tab" && shape.text.length === 0) {
          e13.preventDefault();
          return;
        }
        if (e13.key === "Enter" && (e13.metaKey || e13.ctrlKey)) {
          e13.preventDefault();
          e13.stopPropagation();
          rInput.current.blur();
          return;
        }
        if (!(e13.key === "Meta" || e13.metaKey)) {
          e13.stopPropagation();
        } else if (e13.key === "z" && e13.metaKey) {
          if (e13.shiftKey) {
            document.execCommand("redo", false);
          } else {
            document.execCommand("undo", false);
          }
          e13.stopPropagation();
          e13.preventDefault();
          return;
        }
        if ((e13.metaKey || e13.ctrlKey) && e13.key === "=") {
          e13.preventDefault();
        }
        if (e13.key === "Tab") {
          e13.preventDefault();
          if (e13.shiftKey) {
            TextAreaUtils.unindent(e13.currentTarget);
          } else {
            TextAreaUtils.indent(e13.currentTarget);
          }
          onShapeChange == null ? void 0 : onShapeChange(__spreadProps4(__spreadValues4({}, shape), { text: TLDR.normalizeText(e13.currentTarget.value) }));
        }
      }, [shape, onShapeChange]);
      const handleBlur = React212.useCallback((e13) => {
        e13.currentTarget.setSelectionRange(0, 0);
        onShapeBlur == null ? void 0 : onShapeBlur();
      }, []);
      const handleFocus = React212.useCallback((e13) => {
        if (!isEditing)
          return;
        if (!rIsMounted.current)
          return;
        if (document.activeElement === e13.currentTarget) {
          e13.currentTarget.select();
        }
      }, [isEditing]);
      const handlePointerDown = React212.useCallback((e13) => {
        if (isEditing) {
          e13.stopPropagation();
        }
      }, [isEditing]);
      React212.useEffect(() => {
        if (isEditing) {
          this.texts.set(shape.id, text21);
          requestAnimationFrame(() => {
            rIsMounted.current = true;
            const elm = rInput.current;
            if (elm) {
              elm.focus();
              elm.select();
            }
          });
        } else {
          onShapeBlur == null ? void 0 : onShapeBlur();
        }
      }, [isEditing]);
      return /* @__PURE__ */ React212.createElement(HTMLContainer, __spreadValues4({
        ref
      }, events), /* @__PURE__ */ React212.createElement(Wrapper, {
        isGhost,
        isEditing,
        onPointerDown: handlePointerDown
      }, /* @__PURE__ */ React212.createElement(InnerWrapper2, {
        style: {
          font,
          color: styles222.stroke,
          textAlign: getTextAlign(style.textAlign)
        }
      }, isBinding && /* @__PURE__ */ React212.createElement("div", {
        className: "tl-binding-indicator",
        style: {
          position: "absolute",
          top: -this.bindingDistance,
          left: -this.bindingDistance,
          width: `calc(100% + ${this.bindingDistance * 2}px)`,
          height: `calc(100% + ${this.bindingDistance * 2}px)`,
          backgroundColor: "var(--tl-selectFill)"
        }
      }), isEditing ? /* @__PURE__ */ React212.createElement(TextArea2, {
        ref: rInput,
        style: {
          font,
          color: styles222.stroke
        },
        name: "text",
        tabIndex: -1,
        autoComplete: "false",
        autoCapitalize: "false",
        autoCorrect: "false",
        autoSave: "false",
        autoFocus: true,
        placeholder: "",
        spellCheck: "true",
        wrap: "off",
        dir: "auto",
        datatype: "wysiwyg",
        defaultValue: text21,
        color: styles222.stroke,
        onFocus: handleFocus,
        onChange: handleChange,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onPointerDown: handlePointerDown,
        onContextMenu: stopPropagation,
        onCopy: stopPropagation,
        onPaste: stopPropagation,
        onCut: stopPropagation
      }) : text21, "\u200B")));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { width, height } = this.getBounds(shape);
      return /* @__PURE__ */ React212.createElement("rect", {
        x: 0,
        y: 0,
        width,
        height
      });
    }));
    __publicField2(this, "getBounds", (shape) => {
      const bounds = Utils.getFromCache(this.boundsCache, shape, () => {
        var _a3;
        if (!melm2) {
          return { minX: 0, minY: 0, maxX: 10, maxY: 10, width: 10, height: 10 };
        }
        if (!melm2.parentNode)
          document.body.appendChild(melm2);
        melm2.style.font = getFontStyle(shape.style);
        melm2.textContent = (_a3 = this.texts.get(shape.id)) != null ? _a3 : shape.text;
        const width = melm2.offsetWidth || 1;
        const height = melm2.offsetHeight || 1;
        return {
          minX: 0,
          maxX: width,
          minY: 0,
          maxY: height,
          width,
          height
        };
      });
      return Utils.translateBounds(bounds, shape.point);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.text !== prev.text || next.style.scale !== prev.style.scale || next.style !== prev.style;
    });
    __publicField2(this, "transform", (shape, bounds, { initialShape, scaleX, scaleY }) => {
      const {
        rotation = 0,
        style: { scale = 1 }
      } = initialShape;
      const nextScale = scale * Math.abs(Math.min(scaleX, scaleY));
      return {
        point: [bounds.minX, bounds.minY],
        rotation: scaleX < 0 && scaleY >= 0 || scaleY < 0 && scaleX >= 0 ? -(rotation || 0) : rotation,
        style: __spreadProps4(__spreadValues4({}, initialShape.style), {
          scale: nextScale
        })
      };
    });
    __publicField2(this, "transformSingle", (shape, bounds, { initialShape, scaleX, scaleY }) => {
      const {
        style: { scale = 1 }
      } = initialShape;
      return {
        point: e.toFixed([bounds.minX, bounds.minY]),
        style: __spreadProps4(__spreadValues4({}, initialShape.style), {
          scale: scale * Math.max(Math.abs(scaleY), Math.abs(scaleX))
        })
      };
    });
    __publicField2(this, "onDoubleClickBoundsHandle", (shape) => {
      const center = this.getCenter(shape);
      const newCenter = this.getCenter(__spreadProps4(__spreadValues4({}, shape), {
        style: __spreadProps4(__spreadValues4({}, shape.style), {
          scale: 1
        })
      }));
      return {
        style: __spreadProps4(__spreadValues4({}, shape.style), {
          scale: 1
        }),
        point: e.toFixed(e.add(shape.point, e.sub(center, newCenter)))
      };
    });
    __publicField2(this, "getSvgElement", (shape, isDarkMode) => {
      const bounds = this.getBounds(shape);
      const style = getShapeStyle(shape.style, isDarkMode);
      const elm = getTextSvgElement(shape.text, shape.style, bounds);
      elm.setAttribute("fill", style.stroke);
      return elm;
    });
  }
};
var melm2;
function getMeasurementDiv2() {
  var _a3;
  (_a3 = document.getElementById("__textMeasure")) == null ? void 0 : _a3.remove();
  const pre = document.createElement("pre");
  pre.id = "__textMeasure";
  Object.assign(pre.style, {
    whiteSpace: "pre",
    width: "auto",
    border: "1px solid transparent",
    padding: "4px",
    margin: "0px",
    letterSpacing: LETTER_SPACING,
    opacity: "0",
    position: "absolute",
    top: "-500px",
    left: "0px",
    zIndex: "9999",
    pointerEvents: "none",
    userSelect: "none",
    alignmentBaseline: "mathematical",
    dominantBaseline: "mathematical"
  });
  pre.tabIndex = -1;
  document.body.appendChild(pre);
  return pre;
}
if (typeof window !== "undefined") {
  melm2 = getMeasurementDiv2();
}
var Wrapper = styled("div", {
  width: "100%",
  height: "100%",
  variants: {
    isGhost: {
      false: { opacity: 1 },
      true: { transition: "opacity .2s", opacity: GHOSTED_OPACITY }
    },
    isEditing: {
      false: {
        pointerEvents: "all",
        userSelect: "all"
      },
      true: {
        pointerEvents: "none",
        userSelect: "none"
      }
    }
  }
});
var commonTextWrapping3 = {
  whiteSpace: "pre-wrap",
  overflowWrap: "break-word"
};
var InnerWrapper2 = styled("div", __spreadValues4({
  position: "absolute",
  width: "100%",
  height: "100%",
  padding: "4px",
  zIndex: 1,
  minHeight: 1,
  minWidth: 1,
  lineHeight: 1,
  letterSpacing: LETTER_SPACING,
  outline: 0,
  fontWeight: "500",
  backfaceVisibility: "hidden",
  userSelect: "none",
  pointerEvents: "none",
  WebkitUserSelect: "none",
  WebkitTouchCallout: "none",
  isEditing: {
    false: {},
    true: {
      pointerEvents: "all",
      background: "$boundsBg",
      userSelect: "text",
      WebkitUserSelect: "text"
    }
  }
}, commonTextWrapping3));
var TextArea2 = styled("textarea", __spreadProps4(__spreadValues4({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  width: "100%",
  height: "100%",
  border: "none",
  padding: "4px",
  resize: "none",
  textAlign: "inherit",
  minHeight: "inherit",
  minWidth: "inherit",
  lineHeight: "inherit",
  letterSpacing: "inherit",
  outline: 0,
  fontWeight: "inherit",
  overflow: "hidden",
  backfaceVisibility: "hidden",
  display: "inline-block",
  pointerEvents: "all",
  background: "$boundsBg",
  userSelect: "text",
  WebkitUserSelect: "text"
}, commonTextWrapping3), {
  "&:focus": {
    outline: "none",
    border: "none"
  }
}));
var simulatePressureSettings = {
  easing: (t12) => Math.sin(t12 * Math.PI / 2),
  simulatePressure: true
};
var realPressureSettings = {
  easing: (t12) => t12 * t12,
  simulatePressure: false
};
function getFreehandOptions(shape) {
  const styles222 = getShapeStyle(shape.style);
  const options2 = __spreadProps4(__spreadValues4({
    size: 1 + styles222.strokeWidth * 1.5,
    thinning: 0.65,
    streamline: 0.65,
    smoothing: 0.65
  }, shape.points[1][2] === 0.5 ? simulatePressureSettings : realPressureSettings), {
    last: shape.isComplete
  });
  return options2;
}
function getFillPath(shape) {
  if (shape.points.length < 2)
    return "";
  return Utils.getSvgPathFromStroke(me(shape.points, getFreehandOptions(shape)).map((pt) => pt.point));
}
function getDrawStrokePoints(shape, options2) {
  return me(shape.points, options2);
}
function getDrawStrokePathTDSnapshot(shape) {
  if (shape.points.length < 2)
    return "";
  const options2 = getFreehandOptions(shape);
  const strokePoints = getDrawStrokePoints(shape, options2);
  const path = Utils.getSvgPathFromStroke(ie(strokePoints, options2));
  return path;
}
function getSolidStrokePathTDSnapshot(shape) {
  const { points } = shape;
  if (points.length < 2)
    return "M 0 0 L 0 0";
  const options2 = getFreehandOptions(shape);
  const strokePoints = getDrawStrokePoints(shape, options2).map((pt) => pt.point.slice(0, 2));
  const last = points[points.length - 1].slice(0, 2);
  if (!p.isEqual(strokePoints[0], last))
    strokePoints.push(last);
  const path = Utils.getSvgPathFromStroke(strokePoints, false);
  return path;
}
var DrawUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "draw");
    __publicField2(this, "pointsBoundsCache", /* @__PURE__ */ new WeakMap([]));
    __publicField2(this, "shapeBoundsCache", /* @__PURE__ */ new Map());
    __publicField2(this, "rotatedCache", /* @__PURE__ */ new WeakMap([]));
    __publicField2(this, "pointCache", {});
    __publicField2(this, "canClone", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "id",
        type: "draw",
        name: "Draw",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        rotation: 0,
        style: defaultStyle,
        points: [],
        isComplete: false
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, meta, isSelected, isGhost, events }, ref) => {
      const { points, style, isComplete } = shape;
      const polygonPathTDSnapshot = React223.useMemo(() => {
        return getFillPath(shape);
      }, [points, style.size]);
      const pathTDSnapshot = React223.useMemo(() => {
        return style.dash === "draw" ? getDrawStrokePathTDSnapshot(shape) : getSolidStrokePathTDSnapshot(shape);
      }, [points, style.size, style.dash, isComplete]);
      const styles222 = getShapeStyle(style, meta.isDarkMode);
      const { stroke, fill, strokeWidth } = styles222;
      const bounds = this.getBounds(shape);
      const verySmall = bounds.width <= strokeWidth / 2 && bounds.height <= strokeWidth / 2;
      if (verySmall) {
        const sw2 = 1 + strokeWidth;
        return /* @__PURE__ */ React223.createElement(SVGContainer, __spreadValues4({
          ref,
          id: shape.id + "_svg"
        }, events), /* @__PURE__ */ React223.createElement("circle", {
          r: sw2,
          fill: stroke,
          stroke,
          pointerEvents: "all",
          opacity: isGhost ? GHOSTED_OPACITY : 1
        }));
      }
      const shouldFill = style.isFilled && points.length > 3 && e.dist(points[0], points[points.length - 1]) < strokeWidth * 2;
      if (shape.style.dash === "draw") {
        return /* @__PURE__ */ React223.createElement(SVGContainer, __spreadValues4({
          ref,
          id: shape.id + "_svg"
        }, events), /* @__PURE__ */ React223.createElement("g", {
          opacity: isGhost ? GHOSTED_OPACITY : 1
        }, /* @__PURE__ */ React223.createElement("path", {
          className: shouldFill || isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
          d: pathTDSnapshot
        }), shouldFill && /* @__PURE__ */ React223.createElement("path", {
          d: polygonPathTDSnapshot,
          stroke: "none",
          fill,
          strokeLinejoin: "round",
          strokeLinecap: "round",
          pointerEvents: "none"
        }), /* @__PURE__ */ React223.createElement("path", {
          d: pathTDSnapshot,
          fill: stroke,
          stroke,
          strokeWidth: strokeWidth / 2,
          strokeLinejoin: "round",
          strokeLinecap: "round",
          pointerEvents: "none"
        })));
      }
      const strokeDasharray = {
        ["draw"]: "none",
        ["solid"]: `none`,
        ["dotted"]: `0.1 ${strokeWidth * 4}`,
        ["dashed"]: `${strokeWidth * 4} ${strokeWidth * 4}`
      }[style.dash];
      const strokeDashoffset = {
        ["draw"]: "none",
        ["solid"]: `none`,
        ["dotted"]: `0`,
        ["dashed"]: `0`
      }[style.dash];
      const sw = 1 + strokeWidth * 1.5;
      return /* @__PURE__ */ React223.createElement(SVGContainer, __spreadValues4({
        ref,
        id: shape.id + "_svg"
      }, events), /* @__PURE__ */ React223.createElement("g", {
        opacity: isGhost ? GHOSTED_OPACITY : 1
      }, /* @__PURE__ */ React223.createElement("path", {
        className: shouldFill && isSelected ? "tl-fill-hitarea" : "tl-stroke-hitarea",
        d: pathTDSnapshot
      }), /* @__PURE__ */ React223.createElement("path", {
        d: pathTDSnapshot,
        fill: shouldFill ? fill : "none",
        stroke: "none",
        strokeWidth: Math.min(4, strokeWidth * 2),
        strokeLinejoin: "round",
        strokeLinecap: "round",
        pointerEvents: "none"
      }), /* @__PURE__ */ React223.createElement("path", {
        d: pathTDSnapshot,
        fill: "none",
        stroke,
        strokeWidth: sw,
        strokeDasharray,
        strokeDashoffset,
        strokeLinejoin: "round",
        strokeLinecap: "round",
        pointerEvents: "none"
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const { points } = shape;
      const pathTDSnapshot = React223.useMemo(() => {
        return getSolidStrokePathTDSnapshot(shape);
      }, [points]);
      const bounds = this.getBounds(shape);
      const verySmall = bounds.width < 4 && bounds.height < 4;
      if (verySmall) {
        return /* @__PURE__ */ React223.createElement("circle", {
          x: bounds.width / 2,
          y: bounds.height / 2,
          r: 1
        });
      }
      return /* @__PURE__ */ React223.createElement("path", {
        d: pathTDSnapshot
      });
    }));
    __publicField2(this, "transform", (shape, bounds, { initialShape, scaleX, scaleY }) => {
      const initialShapeBounds = Utils.getFromCache(this.boundsCache, initialShape, () => Utils.getBoundsFromPoints(initialShape.points));
      const points = initialShape.points.map(([x7, y4, r12]) => {
        return [
          bounds.width * (scaleX < 0 ? 1 - x7 / initialShapeBounds.width : x7 / initialShapeBounds.width),
          bounds.height * (scaleY < 0 ? 1 - y4 / initialShapeBounds.height : y4 / initialShapeBounds.height),
          r12
        ];
      });
      const newBounds = Utils.getBoundsFromPoints(shape.points);
      const point = e.sub([bounds.minX, bounds.minY], [newBounds.minX, newBounds.minY]);
      return {
        points,
        point
      };
    });
    __publicField2(this, "getBounds", (shape) => {
      const pointsHaveChanged = !this.pointsBoundsCache.has(shape.points);
      const pointHasChanged = !(this.pointCache[shape.id] === shape.point);
      if (pointsHaveChanged) {
        const bounds = Utils.getBoundsFromPoints(shape.points);
        this.pointsBoundsCache.set(shape.points, bounds);
        this.shapeBoundsCache.set(shape.id, Utils.translateBounds(bounds, shape.point));
        this.pointCache[shape.id] = shape.point;
      } else if (pointHasChanged && !pointsHaveChanged) {
        this.pointCache[shape.id] = shape.point;
        this.shapeBoundsCache.set(shape.id, Utils.translateBounds(this.pointsBoundsCache.get(shape.points), shape.point));
      }
      return this.shapeBoundsCache.get(shape.id);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.points !== prev.points || next.style !== prev.style || next.isComplete !== prev.isComplete;
    });
    __publicField2(this, "hitTestPoint", (shape, point) => {
      const ptA = e.sub(point, shape.point);
      return Utils.pointInPolyline(ptA, shape.points);
    });
    __publicField2(this, "hitTestLineSegment", (shape, A4, B4) => {
      const { points, point } = shape;
      const ptA = e.sub(A4, point);
      const ptB = e.sub(B4, point);
      const bounds = this.getBounds(shape);
      if (bounds.width < 8 && bounds.height < 8) {
        return e.distanceToLineSegment(A4, B4, Utils.getBoundsCenter(bounds)) < 5;
      }
      if (intersectLineSegmentBounds(ptA, ptB, bounds)) {
        for (let i7 = 1; i7 < points.length; i7++) {
          if (intersectLineSegmentLineSegment(points[i7 - 1], points[i7], ptA, ptB).didIntersect) {
            return true;
          }
        }
      }
      return false;
    });
    __publicField2(this, "hitTestBounds", (shape, bounds) => {
      if (!shape.rotation) {
        const shapeBounds = this.getBounds(shape);
        return Utils.boundsContain(bounds, shapeBounds) || (Utils.boundsContain(shapeBounds, bounds) || intersectBoundsBounds(shapeBounds, bounds).length > 0) && intersectBoundsPolyline(Utils.translateBounds(bounds, e.neg(shape.point)), shape.points).length > 0;
      }
      const rBounds = this.getRotatedBounds(shape);
      const rotatedBounds = Utils.getFromCache(this.rotatedCache, shape, () => {
        const c8 = Utils.getBoundsCenter(Utils.getBoundsFromPoints(shape.points));
        return shape.points.map((pt) => e.rotWith(pt, c8, shape.rotation || 0));
      });
      return Utils.boundsContain(bounds, rBounds) || intersectBoundsPolyline(Utils.translateBounds(bounds, e.neg(shape.point)), rotatedBounds).length > 0;
    });
  }
};
var ImageUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "image");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "isAspectRatioLocked", true);
    __publicField2(this, "showCloneHandles", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "image",
        type: "image",
        name: "Image",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [1, 1],
        rotation: 0,
        style: __spreadProps4(__spreadValues4({}, defaultStyle), { isFilled: true }),
        assetId: "assetId"
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, asset = { src: "" }, isBinding, isGhost, meta, events, onShapeChange }, ref) => {
      const { size, style } = shape;
      const rImage = React232.useRef(null);
      const rWrapper = React232.useRef(null);
      React232.useLayoutEffect(() => {
        const wrapper = rWrapper.current;
        if (!wrapper)
          return;
        const [width, height] = size;
        wrapper.style.width = `${width}px`;
        wrapper.style.height = `${height}px`;
      }, [size]);
      return /* @__PURE__ */ React232.createElement(HTMLContainer, __spreadValues4({
        ref
      }, events), isBinding && /* @__PURE__ */ React232.createElement("div", {
        className: "tl-binding-indicator",
        style: {
          position: "absolute",
          top: `calc(${-this.bindingDistance}px * var(--tl-zoom))`,
          left: `calc(${-this.bindingDistance}px * var(--tl-zoom))`,
          width: `calc(100% + ${this.bindingDistance * 2}px * var(--tl-zoom))`,
          height: `calc(100% + ${this.bindingDistance * 2}px * var(--tl-zoom))`,
          backgroundColor: "var(--tl-selectFill)"
        }
      }), /* @__PURE__ */ React232.createElement(Wrapper2, {
        ref: rWrapper,
        isDarkMode: meta.isDarkMode,
        isFilled: style.isFilled,
        isGhost
      }, /* @__PURE__ */ React232.createElement(ImageElement, {
        id: shape.id + "_image",
        ref: rImage,
        src: asset.src,
        alt: "tl_image_asset",
        draggable: false
      })));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const {
        size: [width, height]
      } = shape;
      return /* @__PURE__ */ React232.createElement("rect", {
        x: 0,
        y: 0,
        rx: 2,
        ry: 2,
        width: Math.max(1, width),
        height: Math.max(1, height)
      });
    }));
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style;
    });
    __publicField2(this, "transform", transformRectangle);
    __publicField2(this, "transformSingle", transformSingleRectangle);
    __publicField2(this, "getSvgElement", (shape) => {
      const bounds = this.getBounds(shape);
      const elm = document.createElementNS("http://www.w3.org/2000/svg", "image");
      elm.setAttribute("width", `${bounds.width}`);
      elm.setAttribute("height", `${bounds.height}`);
      elm.setAttribute("xmlns:xlink", `http://www.w3.org/1999/xlink`);
      return elm;
    });
  }
};
var Wrapper2 = re2("div", {
  pointerEvents: "all",
  position: "relative",
  fontFamily: "sans-serif",
  fontSize: "2em",
  height: "100%",
  width: "100%",
  borderRadius: "3px",
  perspective: "800px",
  overflow: "hidden",
  p: {
    userSelect: "none"
  },
  img: {
    userSelect: "none"
  },
  variants: {
    isGhost: {
      false: { opacity: 1 },
      true: { transition: "opacity .2s", opacity: GHOSTED_OPACITY }
    },
    isFilled: {
      true: {},
      false: {}
    },
    isDarkMode: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      isFilled: true,
      isDarkMode: true,
      css: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"
      }
    },
    {
      isFilled: true,
      isDarkMode: false,
      css: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"
      }
    }
  ]
});
var ImageElement = re2("img", {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  maxWidth: "100%",
  minWidth: "100%",
  pointerEvents: "none",
  objectFit: "cover",
  userSelect: "none",
  borderRadius: 2
});
var VideoUtil = class extends TDShapeUtil {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "video");
    __publicField2(this, "canBind", true);
    __publicField2(this, "canEdit", true);
    __publicField2(this, "canClone", true);
    __publicField2(this, "isAspectRatioLocked", true);
    __publicField2(this, "showCloneHandles", true);
    __publicField2(this, "isStateful", true);
    __publicField2(this, "getShape", (props) => {
      return Utils.deepMerge({
        id: "video",
        type: "video",
        name: "Video",
        parentId: "page",
        childIndex: 1,
        point: [0, 0],
        size: [1, 1],
        rotation: 0,
        style: defaultStyle,
        assetId: "assetId",
        isPlaying: true,
        currentTime: 0
      }, props);
    });
    __publicField2(this, "Component", TDShapeUtil.Component(({ shape, asset = { src: "" }, isBinding, isEditing, isGhost, meta, events, onShapeChange }, ref) => {
      const rVideo = React242.useRef(null);
      const rWrapper = React242.useRef(null);
      const { currentTime = 0, size, isPlaying, style } = shape;
      React242.useLayoutEffect(() => {
        const wrapper = rWrapper.current;
        if (!wrapper)
          return;
        const [width, height] = size;
        wrapper.style.width = `${width}px`;
        wrapper.style.height = `${height}px`;
      }, [size]);
      React242.useLayoutEffect(() => {
        const video = rVideo.current;
        if (!video)
          return;
        if (isPlaying)
          video.play();
        else
          video.pause();
      }, [isPlaying]);
      React242.useLayoutEffect(() => {
        const video = rVideo.current;
        if (!video)
          return;
        if (currentTime !== video.currentTime) {
          video.currentTime = currentTime;
        }
      }, [currentTime]);
      const handlePlay = React242.useCallback(() => {
        onShapeChange == null ? void 0 : onShapeChange({ id: shape.id, isPlaying: true });
      }, []);
      const handlePause = React242.useCallback(() => {
        onShapeChange == null ? void 0 : onShapeChange({ id: shape.id, isPlaying: false });
      }, []);
      const handleSetCurrentTime = React242.useCallback(() => {
        const video = rVideo.current;
        if (!video)
          return;
        if (!isEditing)
          return;
        onShapeChange == null ? void 0 : onShapeChange({ id: shape.id, currentTime: video.currentTime });
      }, [isEditing]);
      return /* @__PURE__ */ React242.createElement(HTMLContainer, __spreadValues4({
        ref
      }, events), isBinding && /* @__PURE__ */ React242.createElement("div", {
        className: "tl-binding-indicator",
        style: {
          position: "absolute",
          top: -this.bindingDistance,
          left: -this.bindingDistance,
          width: `calc(100% + ${this.bindingDistance * 2}px)`,
          height: `calc(100% + ${this.bindingDistance * 2}px)`,
          backgroundColor: "var(--tl-selectFill)"
        }
      }), /* @__PURE__ */ React242.createElement(Wrapper3, {
        ref: rWrapper,
        isDarkMode: meta.isDarkMode,
        isGhost,
        isFilled: style.isFilled
      }, /* @__PURE__ */ React242.createElement(VideoElement, {
        ref: rVideo,
        id: shape.id + "_video",
        muted: true,
        loop: true,
        playsInline: true,
        disableRemotePlayback: true,
        disablePictureInPicture: true,
        controls: isEditing,
        autoPlay: isPlaying,
        onPlay: handlePlay,
        onPause: handlePause,
        onTimeUpdate: handleSetCurrentTime
      }, /* @__PURE__ */ React242.createElement("source", {
        src: asset.src
      }))));
    }));
    __publicField2(this, "Indicator", TDShapeUtil.Indicator(({ shape }) => {
      const {
        size: [width, height]
      } = shape;
      return /* @__PURE__ */ React242.createElement("rect", {
        x: 0,
        y: 0,
        rx: 2,
        ry: 2,
        width: Math.max(1, width),
        height: Math.max(1, height)
      });
    }));
    __publicField2(this, "getBounds", (shape) => {
      return getBoundsRectangle(shape, this.boundsCache);
    });
    __publicField2(this, "shouldRender", (prev, next) => {
      return next.size !== prev.size || next.style !== prev.style || next.isPlaying !== prev.isPlaying;
    });
    __publicField2(this, "getSvgElement", (shape) => {
      const bounds = this.getBounds(shape);
      const elm = document.createElementNS("http://www.w3.org/2000/svg", "image");
      elm.setAttribute("width", `${bounds.width}`);
      elm.setAttribute("height", `${bounds.height}`);
      elm.setAttribute("xmlns:xlink", `http://www.w3.org/1999/xlink`);
      return elm;
    });
    __publicField2(this, "transform", transformRectangle);
    __publicField2(this, "transformSingle", transformSingleRectangle);
  }
};
var Wrapper3 = re2("div", {
  pointerEvents: "all",
  position: "relative",
  fontFamily: "sans-serif",
  fontSize: "2em",
  height: "100%",
  width: "100%",
  borderRadius: "3px",
  perspective: "800px",
  overflow: "hidden",
  p: {
    userSelect: "none"
  },
  img: {
    userSelect: "none"
  },
  variants: {
    isGhost: {
      false: { opacity: 1 },
      true: { transition: "opacity .2s", opacity: GHOSTED_OPACITY }
    },
    isFilled: {
      true: {},
      false: {}
    },
    isDarkMode: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      isFilled: true,
      isDarkMode: true,
      css: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)"
      }
    },
    {
      isFilled: true,
      isDarkMode: false,
      css: {
        boxShadow: "2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)"
      }
    }
  ]
});
var VideoElement = re2("video", {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  maxWidth: "100%",
  minWidth: "100%",
  pointerEvents: "none",
  objectFit: "cover",
  userSelect: "none",
  borderRadius: 2
});
var Rectangle = new RectangleUtil();
var Triangle = new TriangleUtil();
var Ellipse = new EllipseUtil();
var Draw = new DrawUtil();
var Arrow6 = new ArrowUtil();
var Text = new TextUtil();
var Group2 = new GroupUtil();
var Sticky = new StickyUtil();
var Image2 = new ImageUtil();
var Video = new VideoUtil();
var shapeUtils = {
  ["rectangle"]: Rectangle,
  ["triangle"]: Triangle,
  ["ellipse"]: Ellipse,
  ["draw"]: Draw,
  ["arrow"]: Arrow6,
  ["text"]: Text,
  ["group"]: Group2,
  ["sticky"]: Sticky,
  ["image"]: Image2,
  ["video"]: Video
};
var getShapeUtil = (shape) => {
  if (typeof shape === "string")
    return shapeUtils[shape];
  return shapeUtils[shape.type];
};
function deepCopy(target) {
  if (target === null) {
    return target;
  }
  if (target instanceof Date) {
    return new Date(target.getTime());
  }
  if (typeof target === "object") {
    if (typeof target[Symbol.iterator] === "function") {
      const cp = [];
      if (target.length > 0) {
        for (const arrayMember of target) {
          cp.push(deepCopy(arrayMember));
        }
      }
      return cp;
    } else {
      const targetKeys = Object.keys(target);
      const cp = {};
      if (targetKeys.length > 0) {
        for (const key of targetKeys) {
          cp[key] = deepCopy(target[key]);
        }
      }
      return cp;
    }
  }
  return target;
}
var isDev = true;
var _TLDR = class {
  static getShapeUtil(shape) {
    return getShapeUtil(shape);
  }
  static getSelectedShapes(data, pageId) {
    const page7 = _TLDR.getPage(data, pageId);
    const selectedIds = _TLDR.getSelectedIds(data, pageId);
    return selectedIds.map((id) => page7.shapes[id]);
  }
  static screenToWorld(data, point) {
    const camera = _TLDR.getPageState(data, data.appState.currentPageId).camera;
    return e.sub(e.div(point, camera.zoom), camera.point);
  }
  static getCameraZoom(zoom) {
    return Utils.clamp(zoom, 0.1, 5);
  }
  static getPage(data, pageId) {
    return data.document.pages[pageId];
  }
  static getPageState(data, pageId) {
    return data.document.pageStates[pageId];
  }
  static getSelectedIds(data, pageId) {
    return _TLDR.getPageState(data, pageId).selectedIds;
  }
  static getShapes(data, pageId) {
    return Object.values(_TLDR.getPage(data, pageId).shapes);
  }
  static getCamera(data, pageId) {
    return _TLDR.getPageState(data, pageId).camera;
  }
  static getShape(data, shapeId, pageId) {
    return _TLDR.getPage(data, pageId).shapes[shapeId];
  }
  static getCenter(shape) {
    return _TLDR.getShapeUtil(shape).getCenter(shape);
  }
  static getBounds(shape) {
    return _TLDR.getShapeUtil(shape).getBounds(shape);
  }
  static getRotatedBounds(shape) {
    return _TLDR.getShapeUtil(shape).getRotatedBounds(shape);
  }
  static getSelectedBounds(data) {
    return Utils.getCommonBounds(_TLDR.getSelectedShapes(data, data.appState.currentPageId).map((shape) => _TLDR.getShapeUtil(shape).getBounds(shape)));
  }
  static getParentId(data, id, pageId) {
    return _TLDR.getShape(data, id, pageId).parentId;
  }
  static getDocumentBranch(data, id, pageId) {
    const shape = _TLDR.getShape(data, id, pageId);
    if (shape.children === void 0)
      return [id];
    return [
      id,
      ...shape.children.flatMap((childId) => _TLDR.getDocumentBranch(data, childId, pageId))
    ];
  }
  static getSelectedBranchSnapshot(data, pageId, fn) {
    const page7 = _TLDR.getPage(data, pageId);
    const copies = _TLDR.getSelectedIds(data, pageId).flatMap((id) => _TLDR.getDocumentBranch(data, id, pageId).map((id2) => page7.shapes[id2])).filter((shape) => !shape.isLocked).map(Utils.deepClone);
    if (fn !== void 0) {
      return copies.map((shape) => __spreadValues4({ id: shape.id }, fn(shape)));
    }
    return copies;
  }
  static getSelectedShapeSnapshot(data, pageId, fn) {
    const copies = _TLDR.getSelectedShapes(data, pageId).filter((shape) => !shape.isLocked).map(Utils.deepClone);
    if (fn !== void 0) {
      return copies.map((shape) => __spreadValues4({ id: shape.id }, fn(shape)));
    }
    return copies;
  }
  static getAllEffectedShapeIds(data, ids, pageId) {
    const page7 = _TLDR.getPage(data, pageId);
    const visited = new Set(ids);
    ids.forEach((id) => {
      const shape = page7.shapes[id];
      function collectDescendants(shape2) {
        if (shape2.children === void 0)
          return;
        shape2.children.filter((childId) => !visited.has(childId)).forEach((childId) => {
          visited.add(childId);
          collectDescendants(page7.shapes[childId]);
        });
      }
      collectDescendants(shape);
      function collectAscendants(shape2) {
        const parentId = shape2.parentId;
        if (parentId === page7.id)
          return;
        if (visited.has(parentId))
          return;
        visited.add(parentId);
        collectAscendants(page7.shapes[parentId]);
      }
      collectAscendants(shape);
      visited.forEach((id2) => {
        Object.values(page7.bindings).filter((binding) => binding.fromId === id2 || binding.toId === id2).forEach((binding) => visited.add(binding.fromId === id2 ? binding.toId : binding.fromId));
      });
    });
    return Array.from(visited.values());
  }
  static getLinkedShapeIds(data, pageId, direction, includeArrows = true) {
    const selectedIds = _TLDR.getSelectedIds(data, pageId);
    const page7 = _TLDR.getPage(data, pageId);
    const linkedIds = new Set(selectedIds);
    const checkedIds = /* @__PURE__ */ new Set();
    const idsToCheck = [...selectedIds];
    const arrows = new Set(Object.values(page7.shapes).filter((shape) => {
      var _a3;
      return shape.type === "arrow" && (shape.handles.start.bindingId || ((_a3 = shape.handles) == null ? void 0 : _a3.end.bindingId));
    }));
    while (idsToCheck.length) {
      const id = idsToCheck.pop();
      if (!(id && arrows.size))
        break;
      if (checkedIds.has(id))
        continue;
      checkedIds.add(id);
      arrows.forEach((arrow21) => {
        var _a3, _b;
        const {
          handles: {
            start: { bindingId: startBindingId },
            end: { bindingId: endBindingId }
          }
        } = arrow21;
        const startBinding = startBindingId ? page7.bindings[startBindingId] : null;
        const endBinding = endBindingId ? page7.bindings[endBindingId] : null;
        let hit = false;
        if (startBinding && startBinding.toId === id) {
          if (direction === "center") {
            hit = true;
          } else if (((_a3 = arrow21.decorations) == null ? void 0 : _a3.start) && endBinding) {
            hit = direction === "left";
          } else {
            hit = direction === "right";
          }
          if (hit) {
            if (includeArrows)
              linkedIds.add(arrow21.id);
            linkedIds.add(id);
            if (endBinding) {
              linkedIds.add(endBinding.toId);
              idsToCheck.push(endBinding.toId);
            }
          }
        } else if (endBinding && endBinding.toId === id) {
          if (direction === "center") {
            hit = true;
          } else if (((_b = arrow21.decorations) == null ? void 0 : _b.end) && startBinding) {
            hit = direction === "left";
          } else {
            hit = direction === "right";
          }
          if (hit) {
            if (includeArrows)
              linkedIds.add(arrow21.id);
            linkedIds.add(id);
            if (startBinding) {
              linkedIds.add(startBinding.toId);
              idsToCheck.push(startBinding.toId);
            }
          }
        }
        if ((!startBinding || linkedIds.has(startBinding.toId)) && (!endBinding || linkedIds.has(endBinding.toId))) {
          arrows.delete(arrow21);
        }
      });
    }
    return Array.from(linkedIds.values());
  }
  static getChildIndexAbove(data, id, pageId) {
    const page7 = data.document.pages[pageId];
    const shape = page7.shapes[id];
    let siblings;
    if (shape.parentId === page7.id) {
      siblings = Object.values(page7.shapes).filter((shape2) => shape2.parentId === page7.id).sort((a6, b7) => a6.childIndex - b7.childIndex);
    } else {
      const parent = page7.shapes[shape.parentId];
      if (!parent.children)
        throw Error("No children in parent!");
      siblings = parent.children.map((childId) => page7.shapes[childId]).sort((a6, b7) => a6.childIndex - b7.childIndex);
    }
    const index2 = siblings.indexOf(shape);
    const nextSibling = siblings[index2 + 1];
    if (!nextSibling)
      return shape.childIndex + 1;
    return nextSibling.childIndex;
  }
  static getBeforeShape(shape, change) {
    return Object.fromEntries(Object.keys(change).map((k4) => [k4, shape[k4]]));
  }
  static mutateShapes(data, ids, fn, pageId) {
    const beforeShapes = {};
    const afterShapes = {};
    ids.forEach((id, i7) => {
      const shape = _TLDR.getShape(data, id, pageId);
      if (shape.isLocked)
        return;
      const change = fn(shape, i7);
      if (change) {
        beforeShapes[id] = _TLDR.getBeforeShape(shape, change);
        afterShapes[id] = change;
      }
    });
    const dataWithMutations = Utils.deepMerge(data, {
      document: {
        pages: {
          [data.appState.currentPageId]: {
            shapes: afterShapes
          }
        }
      }
    });
    return {
      before: beforeShapes,
      after: afterShapes,
      data: dataWithMutations
    };
  }
  static createShapes(data, shapes, pageId) {
    const before = {
      document: {
        pages: {
          [pageId]: {
            shapes: __spreadValues4({}, Object.fromEntries(shapes.flatMap((shape) => {
              const results = [[shape.id, void 0]];
              if (shape.parentId !== pageId) {
                const parent = _TLDR.getShape(data, shape.parentId, pageId);
                if (!parent.children)
                  throw Error("No children in parent!");
                results.push([parent.id, { children: parent.children }]);
              }
              return results;
            })))
          }
        }
      }
    };
    const after = {
      document: {
        pages: {
          [pageId]: {
            shapes: {
              shapes: __spreadValues4({}, Object.fromEntries(shapes.flatMap((shape) => {
                const results = [[shape.id, shape]];
                if (shape.parentId !== pageId) {
                  const parent = _TLDR.getShape(data, shape.parentId, pageId);
                  if (!parent.children)
                    throw Error("No children in parent!");
                  results.push([parent.id, { children: [...parent.children, shape.id] }]);
                }
                return results;
              })))
            }
          }
        }
      }
    };
    return {
      before,
      after
    };
  }
  static deleteShapes(data, shapes, pageId) {
    pageId = pageId ? pageId : data.appState.currentPageId;
    const page7 = _TLDR.getPage(data, pageId);
    const shapeIds = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
    const before = {
      document: {
        pages: {
          [pageId]: {
            shapes: __spreadValues4({}, Object.fromEntries(shapeIds.flatMap((id) => {
              const shape = page7.shapes[id];
              const results = [[shape.id, shape]];
              if (shape.parentId !== pageId) {
                const parent = page7.shapes[shape.parentId];
                if (!parent.children)
                  throw Error("No children in parent!");
                results.push([parent.id, { children: parent.children }]);
              }
              return results;
            }))),
            bindings: __spreadValues4({}, Object.fromEntries(Object.values(page7.bindings).filter((binding) => {
              return shapeIds.includes(binding.fromId) || shapeIds.includes(binding.toId);
            }).map((binding) => {
              return [binding.id, binding];
            })))
          }
        }
      }
    };
    const after = {
      document: {
        pages: {
          [pageId]: {
            shapes: __spreadValues4({}, Object.fromEntries(shapeIds.flatMap((id) => {
              const shape = page7.shapes[id];
              const results = [[shape.id, void 0]];
              if (shape.parentId !== page7.id) {
                const parent = page7.shapes[shape.parentId];
                if (!parent.children)
                  throw Error("No children in parent!");
                results.push([
                  parent.id,
                  { children: parent.children.filter((id2) => id2 !== shape.id) }
                ]);
              }
              return results;
            })))
          }
        }
      }
    };
    return {
      before,
      after
    };
  }
  static onSessionComplete(shape) {
    var _a3, _b;
    const delta = (_b = (_a3 = _TLDR.getShapeUtil(shape)).onSessionComplete) == null ? void 0 : _b.call(_a3, shape);
    if (!delta)
      return shape;
    return __spreadValues4(__spreadValues4({}, shape), delta);
  }
  static onChildrenChange(data, shape, pageId) {
    var _a3, _b;
    if (!shape.children)
      return;
    const delta = (_b = (_a3 = _TLDR.getShapeUtil(shape)).onChildrenChange) == null ? void 0 : _b.call(_a3, shape, shape.children.map((id) => _TLDR.getShape(data, id, pageId)));
    if (!delta)
      return shape;
    return __spreadValues4(__spreadValues4({}, shape), delta);
  }
  static updateArrowBindings(page7, arrowShape) {
    var _a3, _b, _c, _d, _e, _f;
    const result = {
      start: deepCopy(arrowShape.handles.start),
      end: deepCopy(arrowShape.handles.end)
    };
    let start = {
      isBound: false,
      handle: arrowShape.handles.start,
      point: e.add(arrowShape.handles.start.point, arrowShape.point)
    };
    let end = {
      isBound: false,
      handle: arrowShape.handles.end,
      point: e.add(arrowShape.handles.end.point, arrowShape.point)
    };
    if (arrowShape.handles.start.bindingId) {
      const hasDecoration = ((_a3 = arrowShape.decorations) == null ? void 0 : _a3.start) !== void 0;
      const handle = arrowShape.handles.start;
      const binding = page7.bindings[arrowShape.handles.start.bindingId];
      if (!binding)
        throw Error("Could not find a binding to match the start handle's bindingId");
      const target = page7.shapes[binding.toId];
      const util = _TLDR.getShapeUtil(target);
      const bounds = util.getBounds(target);
      const expandedBounds = util.getExpandedBounds(target);
      const intersectBounds = hasDecoration ? Utils.expandBounds(bounds, binding.distance) : bounds;
      const { minX, minY, width, height } = expandedBounds;
      const anchorPoint = e.add([minX, minY], e.mulV([width, height], e.rotWith(binding.point, [0.5, 0.5], target.rotation || 0)));
      start = {
        isBound: true,
        hasDecoration,
        binding,
        handle,
        point: anchorPoint,
        util,
        target,
        bounds,
        expandedBounds,
        intersectBounds,
        center: util.getCenter(target)
      };
    }
    if (arrowShape.handles.end.bindingId) {
      const hasDecoration = ((_b = arrowShape.decorations) == null ? void 0 : _b.end) !== void 0;
      const handle = arrowShape.handles.end;
      const binding = page7.bindings[arrowShape.handles.end.bindingId];
      if (!binding)
        throw Error("Could not find a binding to match the end handle's bindingId");
      const target = page7.shapes[binding.toId];
      const util = _TLDR.getShapeUtil(target);
      const bounds = util.getBounds(target);
      const expandedBounds = util.getExpandedBounds(target);
      const intersectBounds = hasDecoration ? Utils.expandBounds(bounds, binding.distance) : bounds;
      const { minX, minY, width, height } = expandedBounds;
      const anchorPoint = e.add([minX, minY], e.mulV([width, height], e.rotWith(binding.point, [0.5, 0.5], target.rotation || 0)));
      end = {
        isBound: true,
        hasDecoration,
        binding,
        handle,
        point: anchorPoint,
        util,
        target,
        bounds,
        expandedBounds,
        intersectBounds,
        center: util.getCenter(target)
      };
    }
    for (const ID2 of ["end", "start"]) {
      const A4 = ID2 === "start" ? start : end;
      const B4 = ID2 === "start" ? end : start;
      if (A4.isBound) {
        if (!A4.binding.distance) {
          result[ID2].point = e.sub(A4.point, arrowShape.point);
        } else {
          const direction = e.uni(e.sub(A4.point, B4.point));
          switch (A4.target.type) {
            case "ellipse": {
              const hits = intersectRayEllipse(B4.point, direction, A4.center, A4.target.radius[0] + (A4.hasDecoration ? A4.binding.distance : 0), A4.target.radius[1] + (A4.hasDecoration ? A4.binding.distance : 0), A4.target.rotation || 0).points.sort((a6, b7) => e.dist(a6, B4.point) - e.dist(b7, B4.point));
              if (hits[0] !== void 0) {
                result[ID2].point = e.toFixed(e.sub(hits[0], arrowShape.point));
              }
              break;
            }
            case "triangle": {
              const targetPoint = A4.target.point;
              const points = getTrianglePoints(A4.target.size, A4.hasDecoration ? BINDING_DISTANCE : 0, A4.target.rotation).map((pt) => e.add(pt, targetPoint));
              const hits = Utils.pointsToLineSegments(points, true).map(([p0, p1]) => intersectRayLineSegment(B4.point, direction, p0, p1)).filter((intersection) => intersection.didIntersect).flatMap((intersection) => intersection.points).sort((a6, b7) => e.dist(a6, B4.point) - e.dist(b7, B4.point));
              if (hits[0] !== void 0) {
                result[ID2].point = e.toFixed(e.sub(hits[0], arrowShape.point));
              }
              break;
            }
            default: {
              const hits = intersectRayBounds(B4.point, direction, A4.intersectBounds, A4.target.rotation).filter((int) => int.didIntersect).map((int) => int.points[0]).sort((a6, b7) => e.dist(a6, B4.point) - e.dist(b7, B4.point));
              if (!hits[0])
                continue;
              let bHit = void 0;
              if (B4.isBound) {
                const bHits = intersectRayBounds(B4.point, direction, B4.intersectBounds, B4.target.rotation).filter((int) => int.didIntersect).map((int) => int.points[0]).sort((a6, b7) => e.dist(a6, B4.point) - e.dist(b7, B4.point));
                bHit = bHits[0];
              }
              if (B4.isBound && (hits.length < 2 || bHit && hits[0] && Math.ceil(e.dist(hits[0], bHit)) < BINDING_DISTANCE * 2.5 || Utils.boundsContain(A4.expandedBounds, B4.expandedBounds) || Utils.boundsCollide(A4.expandedBounds, B4.expandedBounds))) {
                const shortArrowDirection = e.uni(e.sub(B4.point, A4.point));
                const shortArrowHits = intersectRayBounds(A4.point, shortArrowDirection, A4.bounds, A4.target.rotation).filter((int) => int.didIntersect).map((int) => int.points[0]);
                if (!shortArrowHits[0])
                  continue;
                result[ID2].point = e.toFixed(e.sub(shortArrowHits[0], arrowShape.point));
                result[ID2 === "start" ? "end" : "start"].point = e.toFixed(e.add(e.sub(shortArrowHits[0], arrowShape.point), e.mul(shortArrowDirection, Math.min(e.dist(shortArrowHits[0], B4.point), BINDING_DISTANCE * 2.5 * (Utils.boundsContain(B4.bounds, A4.intersectBounds) ? -1 : 1)))));
              } else if (!B4.isBound && (hits[0] && e.dist(hits[0], B4.point) < BINDING_DISTANCE * 2.5 || Utils.pointInBounds(B4.point, A4.intersectBounds))) {
                const shortArrowDirection = e.uni(e.sub(A4.center, B4.point));
                return (_d = (_c = _TLDR.getShapeUtil(arrowShape)).onHandleChange) == null ? void 0 : _d.call(_c, arrowShape, {
                  [ID2]: __spreadProps4(__spreadValues4({}, arrowShape.handles[ID2]), {
                    point: e.toFixed(e.add(e.sub(B4.point, arrowShape.point), e.mul(shortArrowDirection, BINDING_DISTANCE * 2.5)))
                  })
                });
              } else if (hits[0]) {
                result[ID2].point = e.toFixed(e.sub(hits[0], arrowShape.point));
              }
            }
          }
        }
      }
    }
    return (_f = (_e = _TLDR.getShapeUtil(arrowShape)).onHandleChange) == null ? void 0 : _f.call(_e, arrowShape, result);
  }
  static transform(shape, bounds, info) {
    const delta = _TLDR.getShapeUtil(shape).transform(shape, bounds, info);
    if (!delta)
      return shape;
    return __spreadValues4(__spreadValues4({}, shape), delta);
  }
  static transformSingle(shape, bounds, info) {
    const delta = _TLDR.getShapeUtil(shape).transformSingle(shape, bounds, info);
    if (!delta)
      return shape;
    return __spreadValues4(__spreadValues4({}, shape), delta);
  }
  static getRotatedShapeMutation(shape, center, origin, delta) {
    var _a3, _b;
    const relativeCenter = e.sub(center, shape.point);
    const rotatedCenter = e.rotWith(center, origin, delta);
    const nextPoint = e.toFixed(e.sub(rotatedCenter, relativeCenter));
    if (shape.handles !== void 0) {
      const change = (_b = (_a3 = this.getShapeUtil(shape)).onHandleChange) == null ? void 0 : _b.call(_a3, __spreadProps4(__spreadValues4({}, shape), { point: nextPoint }), Object.fromEntries(Object.entries(shape.handles).map(([handleId, handle]) => {
        const point = e.toFixed(e.rotWith(handle.point, relativeCenter, delta));
        return [handleId, __spreadProps4(__spreadValues4({}, handle), { point })];
      })));
      return change;
    }
    const nextRotation = Utils.clampRadians((shape.rotation || 0) + delta);
    return {
      point: nextPoint,
      rotation: nextRotation
    };
  }
  static updateParents(data, pageId, changedShapeIds) {
    const page7 = _TLDR.getPage(data, pageId);
    if (changedShapeIds.length === 0)
      return;
    const { shapes } = _TLDR.getPage(data, pageId);
    const parentToUpdateIds = Array.from(new Set(changedShapeIds.map((id) => shapes[id].parentId).values())).filter((id) => id !== page7.id);
    for (const parentId of parentToUpdateIds) {
      const parent = shapes[parentId];
      if (!parent.children) {
        throw Error("A shape is parented to a shape without a children array.");
      }
      _TLDR.onChildrenChange(data, parent, pageId);
    }
    _TLDR.updateParents(data, pageId, parentToUpdateIds);
  }
  static getBinding(data, id, pageId) {
    return _TLDR.getPage(data, pageId).bindings[id];
  }
  static getBindings(data, pageId) {
    const page7 = _TLDR.getPage(data, pageId);
    return Object.values(page7.bindings);
  }
  static getBindableShapeIds(data) {
    return _TLDR.getShapes(data, data.appState.currentPageId).filter((shape) => _TLDR.getShapeUtil(shape).canBind).sort((a6, b7) => b7.childIndex - a6.childIndex).map((shape) => shape.id);
  }
  static getBindingsWithShapeIds(data, ids, pageId) {
    return Array.from(new Set(_TLDR.getBindings(data, pageId).filter((binding) => {
      return ids.includes(binding.toId) || ids.includes(binding.fromId);
    })).values());
  }
  static getRelatedBindings(data, ids, pageId) {
    const changedShapeIds = new Set(ids);
    const page7 = _TLDR.getPage(data, pageId);
    const bindingsArr = Object.values(page7.bindings);
    const bindingsToUpdate = new Set(bindingsArr.filter((binding) => changedShapeIds.has(binding.toId) || changedShapeIds.has(binding.fromId)));
    let prevSize2 = bindingsToUpdate.size;
    let delta = -1;
    while (delta !== 0) {
      bindingsToUpdate.forEach((binding) => {
        const fromId = binding.fromId;
        for (const otherBinding of bindingsArr) {
          if (otherBinding.fromId === fromId) {
            bindingsToUpdate.add(otherBinding);
          }
          if (otherBinding.toId === fromId) {
            bindingsToUpdate.add(otherBinding);
          }
        }
      });
      delta = bindingsToUpdate.size - prevSize2;
      prevSize2 = bindingsToUpdate.size;
    }
    return Array.from(bindingsToUpdate.values());
  }
  static normalizeText(text21) {
    return text21.replace(_TLDR.fixNewLines, "\n").split("\n").map((x7) => x7 || " ").join("\n");
  }
  static assertShapeHasProperty(shape, prop) {
    if (shape[prop] === void 0) {
      throw new Error();
    }
  }
  static warn(e13) {
    if (isDev) {
      console.warn(e13);
    }
  }
  static error(e13) {
    if (isDev) {
      console.error(e13);
    }
  }
  static getSvgString(svg, scale = 1) {
    const clone = svg.cloneNode(true);
    svg.setAttribute("width", +svg.getAttribute("width") * scale + "");
    svg.setAttribute("height", +svg.getAttribute("height") * scale + "");
    return new XMLSerializer().serializeToString(clone).replaceAll("&#10;      ", "").replaceAll(/((\s|")[0-9]*\.[0-9]{2})([0-9]*)(\b|"|\))/g, "$1");
  }
  static getSvgAsDataUrl(svg, scale = 1) {
    const svgString = _TLDR.getSvgString(svg, scale);
    const base64SVG = window.btoa(unescape(svgString));
    return `data:image/svg+xml;base64,${base64SVG}`;
  }
  static getImageForSvg(_0) {
    return __async2(this, arguments, function* (svg, type = "png", opts = {}) {
      const { scale = 2, quality = 1 } = opts;
      const svgString = _TLDR.getSvgString(svg, scale);
      const width = +svg.getAttribute("width");
      const height = +svg.getAttribute("height");
      if (!svgString)
        return;
      const canvas = yield new Promise((resolve) => {
        const image = new Image();
        image.crossOrigin = "anonymous";
        const base64SVG = window.btoa(unescape(encodeURIComponent(svgString)));
        const dataUrl = `data:image/svg+xml;base64,${base64SVG}`;
        image.onload = () => {
          const canvas2 = document.createElement("canvas");
          const context = canvas2.getContext("2d");
          canvas2.width = width;
          canvas2.height = height;
          context.drawImage(image, 0, 0, width, height);
          URL.revokeObjectURL(dataUrl);
          resolve(canvas2);
        };
        image.onerror = () => {
          console.warn("Could not convert that SVG to an image.");
        };
        image.src = dataUrl;
      });
      const blob2 = yield new Promise((resolve) => canvas.toBlob((blob3) => resolve(blob3), "image/" + type, quality));
      return blob2;
    });
  }
};
var TLDR = _TLDR;
__publicField2(TLDR, "copyStringToClipboard", (string) => {
  try {
    if (navigator.clipboard) {
      navigator.clipboard.write([
        new ClipboardItem({
          "text/plain": new Blob([string], { type: "text/plain" })
        })
      ]);
    }
  } catch (e13) {
    const textarea = document.createElement("textarea");
    textarea.setAttribute("position", "fixed");
    textarea.setAttribute("top", "0");
    textarea.setAttribute("readonly", "true");
    textarea.setAttribute("contenteditable", "true");
    textarea.style.position = "fixed";
    textarea.value = string;
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();
    try {
      const range = document.createRange();
      range.selectNodeContents(textarea);
      const sel = window.getSelection();
      if (sel) {
        sel.removeAllRanges();
        sel.addRange(range);
        textarea.setSelectionRange(0, textarea.value.length);
      }
      document.execCommand("copy");
    } catch (err) {
      null;
    } finally {
      document.body.removeChild(textarea);
    }
  }
});
__publicField2(TLDR, "flattenShape", (data, shape) => {
  var _a3;
  return [
    shape,
    ...((_a3 = shape.children) != null ? _a3 : []).map((childId) => _TLDR.getShape(data, childId, data.appState.currentPageId)).sort((a6, b7) => a6.childIndex - b7.childIndex).flatMap((shape2) => _TLDR.flattenShape(data, shape2))
  ];
});
__publicField2(TLDR, "flattenPage", (data, pageId) => {
  return Object.values(data.document.pages[pageId].shapes).sort((a6, b7) => a6.childIndex - b7.childIndex).reduce((acc, shape) => [...acc, ..._TLDR.flattenShape(data, shape)], []);
});
__publicField2(TLDR, "getTopChildIndex", (data, pageId) => {
  const shapes = _TLDR.getShapes(data, pageId);
  return shapes.length === 0 ? 1 : shapes.filter((shape) => shape.parentId === pageId).sort((a6, b7) => b7.childIndex - a6.childIndex)[0].childIndex + 1;
});
__publicField2(TLDR, "fixNewLines", /\r?\n|\r/g);
function alignShapes(app, ids, type) {
  const { currentPageId } = app;
  const initialShapes = ids.map((id) => app.getShape(id));
  const boundsForShapes = initialShapes.map((shape) => {
    return {
      id: shape.id,
      point: [...shape.point],
      bounds: TLDR.getBounds(shape)
    };
  });
  const commonBounds = Utils.getCommonBounds(boundsForShapes.map(({ bounds }) => bounds));
  const midX = commonBounds.minX + commonBounds.width / 2;
  const midY = commonBounds.minY + commonBounds.height / 2;
  const deltaMap = Object.fromEntries(boundsForShapes.map(({ id, point, bounds }) => {
    return [
      id,
      {
        prev: point,
        next: {
          ["top"]: [point[0], commonBounds.minY],
          ["centerVertical"]: [point[0], midY - bounds.height / 2],
          ["bottom"]: [point[0], commonBounds.maxY - bounds.height],
          ["left"]: [commonBounds.minX, point[1]],
          ["centerHorizontal"]: [midX - bounds.width / 2, point[1]],
          ["right"]: [commonBounds.maxX - bounds.width, point[1]]
        }[type]
      }
    ];
  }));
  const { before, after } = TLDR.mutateShapes(app.state, ids, (shape) => {
    if (!deltaMap[shape.id])
      return shape;
    return { point: deltaMap[shape.id].next };
  }, currentPageId);
  initialShapes.forEach((shape) => {
    if (shape.type === "group") {
      const delta = e.sub(after[shape.id].point, before[shape.id].point);
      shape.children.forEach((id) => {
        const child = app.getShape(id);
        before[child.id] = { point: child.point };
        after[child.id] = { point: e.add(child.point, delta) };
      });
      delete before[shape.id];
      delete after[shape.id];
    }
  });
  return {
    id: "align",
    before: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: before
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: after
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function changePage(app, pageId) {
  return {
    id: "change_page",
    before: {
      appState: {
        currentPageId: app.currentPageId
      }
    },
    after: {
      appState: {
        currentPageId: pageId
      }
    }
  };
}
function getIncrementedName(name, others) {
  var _a3;
  let result = name;
  const set32 = new Set(others);
  while (set32.has(result)) {
    result = ((_a3 = /^.*(\d+)$/.exec(result)) == null ? void 0 : _a3[1]) ? result.replace(/(\d+)(?=\D?)$/, (m8) => (+m8 + 1).toString()) : `${result} 1`;
  }
  return result;
}
function createPage(app, center, pageId = Utils.uniqueId(), pageName = "Page") {
  const { currentPageId } = app;
  const pages = Object.values(app.state.document.pages).sort((a6, b7) => {
    var _a3, _b;
    return ((_a3 = a6.childIndex) != null ? _a3 : 0) - ((_b = b7.childIndex) != null ? _b : 0);
  });
  const topPage = pages[pages.length - 1];
  const nextChildIndex = (topPage == null ? void 0 : topPage.childIndex) ? (topPage == null ? void 0 : topPage.childIndex) + 1 : 1;
  const page7 = {
    id: pageId,
    name: getIncrementedName(pageName, pages.map((p7) => {
      var _a3;
      return (_a3 = p7.name) != null ? _a3 : "";
    })),
    childIndex: nextChildIndex,
    shapes: {},
    bindings: {}
  };
  const pageState = {
    id: pageId,
    selectedIds: [],
    camera: { point: center, zoom: 1 },
    editingId: void 0,
    bindingId: void 0,
    hoveredId: void 0,
    pointedId: void 0
  };
  return {
    id: "create_page",
    before: {
      appState: {
        currentPageId
      },
      document: {
        pages: {
          [pageId]: void 0
        },
        pageStates: {
          [pageId]: void 0
        }
      }
    },
    after: {
      appState: {
        currentPageId: page7.id
      },
      document: {
        pages: {
          [pageId]: page7
        },
        pageStates: {
          [pageId]: pageState
        }
      }
    }
  };
}
function createShapes(app, shapes, bindings = []) {
  const { currentPageId } = app;
  const beforeShapes = {};
  const afterShapes = {};
  shapes.forEach((shape) => {
    beforeShapes[shape.id] = void 0;
    afterShapes[shape.id] = shape;
  });
  const beforeBindings = {};
  const afterBindings = {};
  bindings.forEach((binding) => {
    beforeBindings[binding.id] = void 0;
    afterBindings[binding.id] = binding;
  });
  return {
    id: "create",
    before: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: beforeShapes,
            bindings: beforeBindings
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: [...app.selectedIds]
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: afterShapes,
            bindings: afterBindings
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: shapes.map((shape) => shape.id)
          }
        }
      }
    }
  };
}
function deletePage(app, pageId) {
  const {
    currentPageId,
    document: { pages, pageStates }
  } = app;
  const pagesArr = Object.values(pages).sort((a6, b7) => (a6.childIndex || 0) - (b7.childIndex || 0));
  const currentIndex = pagesArr.findIndex((page7) => page7.id === pageId);
  let nextCurrentPageId;
  if (pageId === currentPageId) {
    if (currentIndex === pagesArr.length - 1) {
      nextCurrentPageId = pagesArr[pagesArr.length - 2].id;
    } else {
      nextCurrentPageId = pagesArr[currentIndex + 1].id;
    }
  } else {
    nextCurrentPageId = currentPageId;
  }
  return {
    id: "delete_page",
    before: {
      appState: {
        currentPageId: pageId
      },
      document: {
        pages: {
          [pageId]: __spreadValues4({}, pages[pageId])
        },
        pageStates: {
          [pageId]: __spreadValues4({}, pageStates[pageId])
        }
      }
    },
    after: {
      appState: {
        currentPageId: nextCurrentPageId
      },
      document: {
        pages: {
          [pageId]: void 0
        },
        pageStates: {
          [pageId]: void 0
        }
      }
    }
  };
}
function removeShapesFromPage(data, ids, pageId) {
  const before = {
    shapes: {},
    bindings: {}
  };
  const after = {
    shapes: {},
    bindings: {}
  };
  const parentsToUpdate = [];
  const deletedIds = /* @__PURE__ */ new Set();
  const assetsToRemove = /* @__PURE__ */ new Set();
  ids.filter((id) => !TLDR.getShape(data, id, pageId).isLocked).forEach((id) => {
    deletedIds.add(id);
    const shape = TLDR.getShape(data, id, pageId);
    before.shapes[id] = shape;
    after.shapes[id] = void 0;
    if (shape.children !== void 0) {
      shape.children.forEach((childId) => {
        deletedIds.add(childId);
        const child = TLDR.getShape(data, childId, pageId);
        before.shapes[childId] = child;
        after.shapes[childId] = void 0;
      });
    }
    if (shape.parentId !== pageId) {
      parentsToUpdate.push(TLDR.getShape(data, shape.parentId, pageId));
    }
    if (shape.assetId) {
      assetsToRemove.add(shape.assetId);
    }
  });
  parentsToUpdate.forEach((parent) => {
    var _a3;
    if (ids.includes(parent.id))
      return;
    deletedIds.add(parent.id);
    before.shapes[parent.id] = { children: parent.children };
    after.shapes[parent.id] = { children: parent.children.filter((id) => !ids.includes(id)) };
    if (((_a3 = after.shapes[parent.id]) == null ? void 0 : _a3.children.length) === 0) {
      after.shapes[parent.id] = void 0;
      before.shapes[parent.id] = TLDR.getShape(data, parent.id, pageId);
    }
  });
  const page7 = TLDR.getPage(data, pageId);
  Object.values(page7.bindings).filter((binding) => deletedIds.has(binding.fromId) || deletedIds.has(binding.toId)).forEach((binding) => {
    for (const id of [binding.toId, binding.fromId]) {
      if (after.shapes[id] === void 0) {
        before.bindings[binding.id] = binding;
        after.bindings[binding.id] = void 0;
        const shape = page7.shapes[id];
        if (shape && shape.handles) {
          Object.values(shape.handles).filter((handle) => handle.bindingId === binding.id).forEach((handle) => {
            var _a3, _b, _c, _d, _e, _f;
            before.shapes[id] = __spreadProps4(__spreadValues4({}, before.shapes[id]), {
              handles: __spreadProps4(__spreadValues4({}, (_a3 = before.shapes[id]) == null ? void 0 : _a3.handles), {
                [handle.id]: __spreadProps4(__spreadValues4({}, (_c = (_b = before.shapes[id]) == null ? void 0 : _b.handles) == null ? void 0 : _c[handle.id]), {
                  bindingId: binding.id
                })
              })
            });
            if (!deletedIds.has(id)) {
              after.shapes[id] = __spreadProps4(__spreadValues4({}, after.shapes[id]), {
                handles: __spreadProps4(__spreadValues4({}, (_d = after.shapes[id]) == null ? void 0 : _d.handles), {
                  [handle.id]: __spreadProps4(__spreadValues4({}, (_f = (_e = after.shapes[id]) == null ? void 0 : _e.handles) == null ? void 0 : _f[handle.id]), {
                    bindingId: void 0
                  })
                })
              });
            }
          });
        }
      }
    }
  });
  Object.values(data.document.pages).flatMap((page8) => Object.values(page8.shapes)).forEach((shape) => {
    if ("assetId" in shape && shape.assetId && !deletedIds.has(shape.id)) {
      assetsToRemove.delete(shape.assetId);
    }
  });
  return { before, after, assetsToRemove: Array.from(assetsToRemove) };
}
var removeAssetsFromDocument = (assets, idsToRemove) => {
  const afterAssets = __spreadValues4({}, assets);
  idsToRemove.forEach((id) => afterAssets[id] = void 0);
  return afterAssets;
};
function deleteShapes(app, ids, pageId = app.currentPageId) {
  const {
    pageState,
    selectedIds,
    document: { assets: beforeAssets }
  } = app;
  const { before, after, assetsToRemove } = removeShapesFromPage(app.state, ids, pageId);
  const afterAssets = removeAssetsFromDocument(beforeAssets, assetsToRemove);
  return {
    id: "delete",
    before: {
      document: {
        assets: beforeAssets,
        pages: {
          [pageId]: before
        },
        pageStates: {
          [pageId]: { selectedIds: [...app.selectedIds] }
        }
      }
    },
    after: {
      document: {
        assets: afterAssets,
        pages: {
          [pageId]: after
        },
        pageStates: {
          [pageId]: {
            selectedIds: selectedIds.filter((id) => !ids.includes(id)),
            hoveredId: pageState.hoveredId && ids.includes(pageState.hoveredId) ? void 0 : pageState.hoveredId
          }
        }
      }
    }
  };
}
function distributeShapes(app, ids, type) {
  const { currentPageId } = app;
  const initialShapes = ids.map((id) => app.getShape(id));
  const deltaMap = Object.fromEntries(getDistributions(initialShapes, type).map((d8) => [d8.id, d8]));
  const { before, after } = TLDR.mutateShapes(app.state, ids.filter((id) => deltaMap[id] !== void 0), (shape) => ({ point: deltaMap[shape.id].next }), currentPageId);
  initialShapes.forEach((shape) => {
    if (shape.type === "group") {
      const delta = p.sub(after[shape.id].point, before[shape.id].point);
      shape.children.forEach((id) => {
        const child = app.getShape(id);
        before[child.id] = { point: child.point };
        after[child.id] = { point: p.add(child.point, delta) };
      });
      delete before[shape.id];
      delete after[shape.id];
    }
  });
  return {
    id: "distribute",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function getDistributions(initialShapes, type) {
  const entries2 = initialShapes.map((shape) => {
    const utils = TLDR.getShapeUtil(shape);
    return {
      id: shape.id,
      point: [...shape.point],
      bounds: utils.getBounds(shape),
      center: utils.getCenter(shape)
    };
  });
  const len = entries2.length;
  const commonBounds = Utils.getCommonBounds(entries2.map(({ bounds }) => bounds));
  const results = [];
  switch (type) {
    case "horizontal": {
      const span = entries2.reduce((a6, c8) => a6 + c8.bounds.width, 0);
      if (span > commonBounds.width) {
        const left6 = entries2.sort((a6, b7) => a6.bounds.minX - b7.bounds.minX)[0];
        const right6 = entries2.sort((a6, b7) => b7.bounds.maxX - a6.bounds.maxX)[0];
        const entriesToMove = entries2.filter((a6) => a6 !== left6 && a6 !== right6).sort((a6, b7) => a6.center[0] - b7.center[0]);
        const step = (right6.center[0] - left6.center[0]) / (len - 1);
        const x7 = left6.center[0] + step;
        entriesToMove.forEach(({ id, point, bounds }, i7) => {
          results.push({
            id,
            prev: point,
            next: [x7 + step * i7 - bounds.width / 2, bounds.minY]
          });
        });
      } else {
        const entriesToMove = entries2.sort((a6, b7) => a6.center[0] - b7.center[0]);
        let x7 = commonBounds.minX;
        const step = (commonBounds.width - span) / (len - 1);
        entriesToMove.forEach(({ id, point, bounds }) => {
          results.push({ id, prev: point, next: [x7, bounds.minY] });
          x7 += bounds.width + step;
        });
      }
      break;
    }
    case "vertical": {
      const span = entries2.reduce((a6, c8) => a6 + c8.bounds.height, 0);
      if (span > commonBounds.height) {
        const top7 = entries2.sort((a6, b7) => a6.bounds.minY - b7.bounds.minY)[0];
        const bottom6 = entries2.sort((a6, b7) => b7.bounds.maxY - a6.bounds.maxY)[0];
        const entriesToMove = entries2.filter((a6) => a6 !== top7 && a6 !== bottom6).sort((a6, b7) => a6.center[1] - b7.center[1]);
        const step = (bottom6.center[1] - top7.center[1]) / (len - 1);
        const y4 = top7.center[1] + step;
        entriesToMove.forEach(({ id, point, bounds }, i7) => {
          results.push({
            id,
            prev: point,
            next: [bounds.minX, y4 + step * i7 - bounds.height / 2]
          });
        });
      } else {
        const entriesToMove = entries2.sort((a6, b7) => a6.center[1] - b7.center[1]);
        let y4 = commonBounds.minY;
        const step = (commonBounds.height - span) / (len - 1);
        entriesToMove.forEach(({ id, point, bounds }) => {
          results.push({ id, prev: point, next: [bounds.minX, y4] });
          y4 += bounds.height + step;
        });
      }
      break;
    }
  }
  return results;
}
function duplicatePage(app, pageId) {
  const newId = Utils.uniqueId();
  const {
    currentPageId,
    page: page7,
    pageState: { camera }
  } = app;
  const nextPage = __spreadProps4(__spreadValues4({}, page7), {
    id: newId,
    name: page7.name + " Copy",
    shapes: Object.fromEntries(Object.entries(page7.shapes).map(([id, shape]) => {
      return [
        id,
        __spreadProps4(__spreadValues4({}, shape), {
          parentId: shape.parentId === pageId ? newId : shape.parentId
        })
      ];
    }))
  });
  return {
    id: "duplicate_page",
    before: {
      appState: {
        currentPageId
      },
      document: {
        pages: {
          [newId]: void 0
        },
        pageStates: {
          [newId]: void 0
        }
      }
    },
    after: {
      appState: {
        currentPageId: newId
      },
      document: {
        pages: {
          [newId]: nextPage
        },
        pageStates: {
          [newId]: __spreadProps4(__spreadValues4({}, page7), {
            id: newId,
            selectedIds: [],
            camera: __spreadValues4({}, camera),
            editingId: void 0,
            bindingId: void 0,
            hoveredId: void 0,
            pointedId: void 0
          })
        }
      }
    }
  };
}
function duplicateShapes(app, ids, point) {
  const { selectedIds, currentPageId, page: page7, shapes } = app;
  const before = {
    shapes: {},
    bindings: {}
  };
  const after = {
    shapes: {},
    bindings: {}
  };
  const duplicateMap = {};
  const shapesToDuplicate = ids.map((id) => app.getShape(id)).filter((shape) => !ids.includes(shape.parentId));
  shapesToDuplicate.forEach((shape) => {
    const duplicatedId = Utils.uniqueId();
    before.shapes[duplicatedId] = void 0;
    after.shapes[duplicatedId] = __spreadProps4(__spreadValues4({}, Utils.deepClone(shape)), {
      id: duplicatedId,
      childIndex: TLDR.getChildIndexAbove(app.state, shape.id, currentPageId)
    });
    if (shape.children) {
      after.shapes[duplicatedId].children = [];
    }
    if (shape.parentId !== currentPageId) {
      const parent = app.getShape(shape.parentId);
      before.shapes[parent.id] = __spreadProps4(__spreadValues4({}, before.shapes[parent.id]), {
        children: parent.children
      });
      after.shapes[parent.id] = __spreadProps4(__spreadValues4({}, after.shapes[parent.id]), {
        children: [...(after.shapes[parent.id] || parent).children, duplicatedId]
      });
    }
    duplicateMap[shape.id] = duplicatedId;
  });
  shapesToDuplicate.forEach((shape) => {
    if (shape.children) {
      shape.children.forEach((childId) => {
        var _a3, _b;
        const child = app.getShape(childId);
        const duplicatedId = Utils.uniqueId();
        const duplicatedParentId = duplicateMap[shape.id];
        before.shapes[duplicatedId] = void 0;
        after.shapes[duplicatedId] = __spreadProps4(__spreadValues4({}, Utils.deepClone(child)), {
          id: duplicatedId,
          parentId: duplicatedParentId,
          childIndex: TLDR.getChildIndexAbove(app.state, child.id, currentPageId)
        });
        duplicateMap[childId] = duplicatedId;
        (_b = (_a3 = after.shapes[duplicateMap[shape.id]]) == null ? void 0 : _a3.children) == null ? void 0 : _b.push(duplicatedId);
      });
    }
  });
  const dupedShapeIds = new Set(Object.keys(duplicateMap));
  Object.values(page7.bindings).filter((binding) => dupedShapeIds.has(binding.fromId) || dupedShapeIds.has(binding.toId)).forEach((binding) => {
    if (dupedShapeIds.has(binding.fromId)) {
      if (dupedShapeIds.has(binding.toId)) {
        const duplicatedBindingId = Utils.uniqueId();
        const duplicatedBinding = __spreadProps4(__spreadValues4({}, Utils.deepClone(binding)), {
          id: duplicatedBindingId,
          fromId: duplicateMap[binding.fromId],
          toId: duplicateMap[binding.toId]
        });
        before.bindings[duplicatedBindingId] = void 0;
        after.bindings[duplicatedBindingId] = duplicatedBinding;
        const boundShape = after.shapes[duplicatedBinding.fromId];
        Object.values(boundShape.handles).forEach((handle) => {
          if (handle.bindingId === binding.id) {
            handle.bindingId = duplicatedBindingId;
          }
        });
      } else {
        const boundShape = after.shapes[duplicateMap[binding.fromId]];
        Object.values(boundShape.handles).forEach((handle) => {
          if (handle.bindingId === binding.id) {
            handle.bindingId = void 0;
          }
        });
      }
    }
  });
  const shapesToMove = Object.values(after.shapes);
  if (point) {
    const commonBounds = Utils.getCommonBounds(shapesToMove.map((shape) => TLDR.getBounds(shape)));
    const center = Utils.getBoundsCenter(commonBounds);
    shapesToMove.forEach((shape) => {
      if (!shape.point)
        return;
      shape.point = e.sub(point, e.sub(center, shape.point));
    });
  } else {
    const offset = [16, 16];
    shapesToMove.forEach((shape) => {
      if (!shape.point)
        return;
      shape.point = e.add(shape.point, offset);
    });
  }
  shapesToMove.forEach((shape) => {
    if (shape.isLocked) {
      shape.isLocked = false;
    }
  });
  return {
    id: "duplicate",
    before: {
      document: {
        pages: {
          [currentPageId]: before
        },
        pageStates: {
          [currentPageId]: { selectedIds }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: after
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: Array.from(dupedShapeIds.values()).map((id) => duplicateMap[id])
          }
        }
      }
    }
  };
}
function flipShapes(app, ids, type) {
  const {
    selectedIds,
    currentPageId,
    page: { shapes }
  } = app;
  const boundsForShapes = ids.map((id) => TLDR.getBounds(shapes[id]));
  const commonBounds = Utils.getCommonBounds(boundsForShapes);
  const { before, after } = TLDR.mutateShapes(app.state, ids, (shape) => {
    const shapeBounds = TLDR.getBounds(shape);
    switch (type) {
      case "horizontal": {
        const newShapeBounds = Utils.getRelativeTransformedBoundingBox(commonBounds, commonBounds, shapeBounds, true, false);
        return TLDR.getShapeUtil(shape).transform(shape, newShapeBounds, {
          type: TLBoundsCorner.TopLeft,
          scaleX: -1,
          scaleY: 1,
          initialShape: shape,
          transformOrigin: [0.5, 0.5]
        });
      }
      case "vertical": {
        const newShapeBounds = Utils.getRelativeTransformedBoundingBox(commonBounds, commonBounds, shapeBounds, false, true);
        return TLDR.getShapeUtil(shape).transform(shape, newShapeBounds, {
          type: TLBoundsCorner.TopLeft,
          scaleX: 1,
          scaleY: -1,
          initialShape: shape,
          transformOrigin: [0.5, 0.5]
        });
      }
    }
  }, currentPageId);
  return {
    id: "flip",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function groupShapes(app, ids, groupId, pageId) {
  var _a3, _b;
  if (ids.length < 2)
    return;
  const beforeShapes = {};
  const afterShapes = {};
  const beforeBindings = {};
  const afterBindings = {};
  const idsToGroup = [...ids];
  const shapesToGroup = [];
  const deletedGroupIds = [];
  const otherEffectedGroups = [];
  for (const id of ids) {
    const shape = app.getShape(id);
    if (shape.isLocked)
      continue;
    if (shape.children === void 0) {
      shapesToGroup.push(shape);
    } else {
      const childIds = shape.children.filter((id2) => !app.getShape(id2).isLocked);
      otherEffectedGroups.push(shape);
      idsToGroup.push(...childIds);
      shapesToGroup.push(...childIds.map((id2) => app.getShape(id2)).filter(Boolean));
    }
  }
  if (shapesToGroup.every((shape) => shape.parentId === shapesToGroup[0].parentId)) {
    if (shapesToGroup[0].parentId !== pageId) {
      const commonParent = app.getShape(shapesToGroup[0].parentId);
      if (((_a3 = commonParent.children) == null ? void 0 : _a3.length) === idsToGroup.length) {
        return;
      }
    }
  }
  const flattenedShapes = TLDR.flattenPage(app.state, pageId);
  const shapeIndexMap = Object.fromEntries(shapesToGroup.map((shape) => [shape.id, flattenedShapes.indexOf(shape)]));
  const sortedShapes = shapesToGroup.sort((a6, b7) => shapeIndexMap[a6.id] - shapeIndexMap[b7.id]);
  const groupParentId = pageId;
  const groupChildIndex = (sortedShapes.filter((shape) => shape.parentId === pageId)[0] || sortedShapes[0]).childIndex;
  const groupBounds = Utils.getCommonBounds(shapesToGroup.map((shape) => TLDR.getBounds(shape)));
  beforeShapes[groupId] = void 0;
  afterShapes[groupId] = TLDR.getShapeUtil("group").create({
    id: groupId,
    childIndex: groupChildIndex,
    parentId: groupParentId,
    point: [groupBounds.minX, groupBounds.minY],
    size: [groupBounds.width, groupBounds.height],
    children: sortedShapes.map((shape) => shape.id)
  });
  sortedShapes.forEach((shape, index2) => {
    if (shape.parentId !== pageId) {
      const parentShape = app.getShape(shape.parentId);
      otherEffectedGroups.push(parentShape);
    }
    beforeShapes[shape.id] = __spreadProps4(__spreadValues4({}, beforeShapes[shape.id]), {
      parentId: shape.parentId,
      childIndex: shape.childIndex
    });
    afterShapes[shape.id] = __spreadProps4(__spreadValues4({}, afterShapes[shape.id]), {
      parentId: groupId,
      childIndex: index2 + 1
    });
  });
  while (otherEffectedGroups.length > 0) {
    const shape = otherEffectedGroups.pop();
    if (!shape)
      break;
    const nextChildren = (((_b = beforeShapes[shape.id]) == null ? void 0 : _b.children) || shape.children).filter((childId) => childId && !(idsToGroup.includes(childId) || deletedGroupIds.includes(childId)));
    if (nextChildren.length === 0) {
      beforeShapes[shape.id] = shape;
      afterShapes[shape.id] = void 0;
      if (shape.parentId !== pageId) {
        deletedGroupIds.push(shape.id);
        otherEffectedGroups.push(app.getShape(shape.parentId));
      }
    } else {
      beforeShapes[shape.id] = __spreadProps4(__spreadValues4({}, beforeShapes[shape.id]), {
        children: shape.children
      });
      afterShapes[shape.id] = __spreadProps4(__spreadValues4({}, afterShapes[shape.id]), {
        children: nextChildren
      });
    }
  }
  const { bindings } = app;
  const deletedGroupIdsSet = new Set(deletedGroupIds);
  bindings.forEach((binding) => {
    for (const id of [binding.toId, binding.fromId]) {
      if (deletedGroupIdsSet.has(id)) {
        beforeBindings[binding.id] = binding;
        afterBindings[binding.id] = void 0;
        const shape = app.getShape(id);
        if (shape.handles) {
          Object.values(shape.handles).filter((handle) => handle.bindingId === binding.id).forEach((handle) => {
            var _a22, _b2;
            beforeShapes[id] = __spreadProps4(__spreadValues4({}, beforeShapes[id]), {
              handles: __spreadProps4(__spreadValues4({}, (_a22 = beforeShapes[id]) == null ? void 0 : _a22.handles), {
                [handle.id]: { bindingId: binding.id }
              })
            });
            if (!deletedGroupIds.includes(id)) {
              afterShapes[id] = __spreadProps4(__spreadValues4({}, afterShapes[id]), {
                handles: __spreadProps4(__spreadValues4({}, (_b2 = afterShapes[id]) == null ? void 0 : _b2.handles), {
                  [handle.id]: { bindingId: void 0 }
                })
              });
            }
          });
        }
      }
    }
  });
  return {
    id: "group",
    before: {
      document: {
        pages: {
          [pageId]: {
            shapes: beforeShapes,
            bindings: beforeBindings
          }
        },
        pageStates: {
          [pageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [pageId]: {
            shapes: afterShapes,
            bindings: beforeBindings
          }
        },
        pageStates: {
          [pageId]: {
            selectedIds: [groupId]
          }
        }
      }
    }
  };
}
function moveShapesToPage(app, ids, viewportBounds, fromPageId, toPageId) {
  const { page: page7 } = app;
  const fromPage = {
    before: {
      shapes: {},
      bindings: {}
    },
    after: {
      shapes: {},
      bindings: {}
    }
  };
  const toPage = {
    before: {
      shapes: {},
      bindings: {}
    },
    after: {
      shapes: {},
      bindings: {}
    }
  };
  const movingShapeIds = /* @__PURE__ */ new Set();
  const shapesToMove = /* @__PURE__ */ new Set();
  ids.map((id) => app.getShape(id, fromPageId)).filter((shape) => !shape.isLocked).forEach((shape) => {
    movingShapeIds.add(shape.id);
    shapesToMove.add(shape);
    if (shape.children !== void 0) {
      shape.children.forEach((childId) => {
        movingShapeIds.add(childId);
        shapesToMove.add(app.getShape(childId, fromPageId));
      });
    }
  });
  const startingChildIndex = TLDR.getTopChildIndex(app.state, toPageId);
  const movingShapes = Array.from(shapesToMove.values());
  movingShapes.forEach((shape, i7) => {
    fromPage.before.shapes[shape.id] = shape;
    fromPage.after.shapes[shape.id] = void 0;
    toPage.before.shapes[shape.id] = void 0;
    toPage.after.shapes[shape.id] = shape;
    if (!movingShapeIds.has(shape.parentId)) {
      toPage.after.shapes[shape.id] = __spreadProps4(__spreadValues4({}, shape), {
        parentId: toPageId,
        childIndex: startingChildIndex + i7
      });
      if (shape.parentId !== fromPageId) {
        const parent = app.getShape(shape.parentId, fromPageId);
        fromPage.before.shapes[parent.id] = {
          children: parent.children
        };
        fromPage.after.shapes[parent.id] = {
          children: parent.children.filter((childId) => childId !== shape.id)
        };
      }
    }
  });
  Object.values(page7.bindings).filter((binding) => movingShapeIds.has(binding.fromId) || movingShapeIds.has(binding.toId)).forEach((binding) => {
    fromPage.before.bindings[binding.id] = binding;
    fromPage.after.bindings[binding.id] = void 0;
    const fromBoundShape = app.getShape(binding.fromId, fromPageId);
    const shouldCopy = movingShapeIds.has(binding.fromId) && movingShapeIds.has(binding.toId);
    if (shouldCopy) {
      toPage.before.bindings[binding.id] = void 0;
      toPage.after.bindings[binding.id] = binding;
    } else {
      if (movingShapeIds.has(binding.fromId)) {
        const fromShape = app.getShape(binding.fromId, fromPageId);
        const handle = Object.values(fromBoundShape.handles).find((handle2) => handle2.bindingId === binding.id);
        const handleId = handle.id;
        const toPageShape = toPage.after.shapes[fromShape.id];
        toPageShape.handles = __spreadProps4(__spreadValues4({}, toPageShape.handles), {
          [handleId]: __spreadProps4(__spreadValues4({}, toPageShape.handles[handleId]), {
            bindingId: void 0
          })
        });
      } else {
        const fromShape = app.getShape(binding.fromId, fromPageId);
        const handle = Object.values(fromBoundShape.handles).find((handle2) => handle2.bindingId === binding.id);
        fromPage.before.shapes[fromShape.id] = {
          handles: { [handle.id]: { bindingId: binding.id } }
        };
        fromPage.after.shapes[fromShape.id] = {
          handles: { [handle.id]: { bindingId: void 0 } }
        };
      }
    }
  });
  const toPageState = app.state.document.pageStates[toPageId];
  const bounds = Utils.getCommonBounds(movingShapes.map((shape) => TLDR.getBounds(shape)));
  const zoom = TLDR.getCameraZoom(viewportBounds.width < viewportBounds.height ? (viewportBounds.width - 128) / bounds.width : (viewportBounds.height - 128) / bounds.height);
  const mx = (viewportBounds.width - bounds.width * zoom) / 2 / zoom;
  const my = (viewportBounds.height - bounds.height * zoom) / 2 / zoom;
  const point = e.toFixed(e.add([-bounds.minX, -bounds.minY], [mx, my]));
  return {
    id: "move_to_page",
    before: {
      appState: {
        currentPageId: fromPageId
      },
      document: {
        pages: {
          [fromPageId]: fromPage.before,
          [toPageId]: toPage.before
        },
        pageStates: {
          [fromPageId]: { selectedIds: ids },
          [toPageId]: {
            selectedIds: toPageState.selectedIds,
            camera: toPageState.camera
          }
        }
      }
    },
    after: {
      appState: {
        currentPageId: toPageId
      },
      document: {
        pages: {
          [fromPageId]: fromPage.after,
          [toPageId]: toPage.after
        },
        pageStates: {
          [fromPageId]: { selectedIds: [] },
          [toPageId]: {
            selectedIds: ids,
            camera: {
              zoom,
              point
            }
          }
        }
      }
    }
  };
}
function movePage(app, pageId, index2) {
  const { pages } = app.document;
  const movingPage = pages[pageId];
  const beforePages = Object.values(pages).sort((a6, b7) => {
    var _a3, _b;
    return ((_a3 = a6.childIndex) != null ? _a3 : 0) - ((_b = b7.childIndex) != null ? _b : 0);
  });
  const fromIndex = beforePages.indexOf(movingPage);
  const afterPages = [...beforePages];
  afterPages.splice(fromIndex, 1);
  afterPages.splice(index2 > fromIndex ? index2 - 1 : index2, 0, movingPage);
  return {
    id: "move_page",
    before: {
      document: {
        pages: Object.fromEntries(beforePages.map((p7) => [p7.id, { childIndex: p7.childIndex }]))
      }
    },
    after: {
      document: {
        pages: Object.fromEntries(afterPages.map((p7, childIndex) => [p7.id, { childIndex }]))
      }
    }
  };
}
function reorderShapes(app, ids, type) {
  const { currentPageId, page: page7 } = app;
  const parentIds = new Set(ids.map((id) => app.getShape(id).parentId));
  let result = { before: {}, after: {} };
  let startIndex;
  let startChildIndex;
  let step;
  Array.from(parentIds.values()).forEach((parentId) => {
    let sortedChildren = [];
    if (parentId === page7.id) {
      sortedChildren = Object.values(page7.shapes).sort((a6, b7) => a6.childIndex - b7.childIndex);
    } else {
      const parent = app.getShape(parentId);
      if (!parent.children)
        throw Error("No children in parent!");
      sortedChildren = parent.children.map((childId) => app.getShape(childId)).sort((a6, b7) => a6.childIndex - b7.childIndex);
    }
    const sortedChildIds = sortedChildren.map((shape) => shape.id);
    const sortedIndicesToMove = ids.filter((id) => sortedChildIds.includes(id)).map((id) => sortedChildIds.indexOf(id)).sort((a6, b7) => a6 - b7);
    if (sortedIndicesToMove.length === sortedChildIds.length)
      return;
    switch (type) {
      case "toBack": {
        for (let i7 = 0; i7 < sortedChildIds.length; i7++) {
          if (sortedIndicesToMove.includes(i7))
            continue;
          startIndex = i7;
          break;
        }
        startChildIndex = sortedChildren[startIndex].childIndex;
        step = startChildIndex / (sortedIndicesToMove.length + 1);
        result = TLDR.mutateShapes(app.state, sortedIndicesToMove.map((i7) => sortedChildren[i7].id).reverse(), (_shape, i7) => ({
          childIndex: startChildIndex - (i7 + 1) * step
        }), currentPageId);
        break;
      }
      case "toFront": {
        for (let i7 = sortedChildIds.length - 1; i7 >= 0; i7--) {
          if (sortedIndicesToMove.includes(i7))
            continue;
          startIndex = i7;
          break;
        }
        startChildIndex = sortedChildren[startIndex].childIndex;
        step = 1;
        result = TLDR.mutateShapes(app.state, sortedIndicesToMove.map((i7) => sortedChildren[i7].id), (_shape, i7) => ({
          childIndex: startChildIndex + (i7 + 1)
        }), currentPageId);
        break;
      }
      case "backward": {
        const indexMap = {};
        for (let i7 = sortedChildIds.length - 1; i7 >= 0; i7--) {
          if (sortedIndicesToMove.includes(i7)) {
            for (let j4 = i7; j4 >= 0; j4--) {
              if (!sortedIndicesToMove.includes(j4)) {
                const endChildIndex = sortedChildren[j4].childIndex;
                let startChildIndex2;
                let step2;
                if (j4 === 0) {
                  startChildIndex2 = endChildIndex / 2;
                  step2 = endChildIndex / 2 / (i7 - j4 + 1);
                } else {
                  startChildIndex2 = sortedChildren[j4 - 1].childIndex;
                  step2 = (endChildIndex - startChildIndex2) / (i7 - j4 + 1);
                  startChildIndex2 += step2;
                }
                for (let k4 = 0; k4 < i7 - j4; k4++) {
                  indexMap[sortedChildren[j4 + k4 + 1].id] = startChildIndex2 + step2 * k4;
                }
                break;
              }
            }
          }
        }
        if (Object.values(indexMap).length > 0) {
          result = TLDR.mutateShapes(app.state, sortedIndicesToMove.map((i7) => sortedChildren[i7].id), (shape) => ({
            childIndex: indexMap[shape.id]
          }), currentPageId);
        }
        break;
      }
      case "forward": {
        const indexMap = {};
        for (let i7 = 0; i7 < sortedChildIds.length; i7++) {
          if (sortedIndicesToMove.includes(i7)) {
            for (let j4 = i7; j4 < sortedChildIds.length; j4++) {
              if (!sortedIndicesToMove.includes(j4)) {
                startChildIndex = sortedChildren[j4].childIndex;
                const step2 = j4 === sortedChildIds.length - 1 ? 1 : (sortedChildren[j4 + 1].childIndex - startChildIndex) / (j4 - i7 + 1);
                for (let k4 = 0; k4 < j4 - i7; k4++) {
                  indexMap[sortedChildren[i7 + k4].id] = startChildIndex + step2 * (k4 + 1);
                }
                break;
              }
            }
          }
        }
        if (Object.values(indexMap).length > 0) {
          result = TLDR.mutateShapes(app.state, sortedIndicesToMove.map((i7) => sortedChildren[i7].id), (shape) => ({
            childIndex: indexMap[shape.id]
          }), currentPageId);
        }
        break;
      }
    }
  });
  return {
    id: "move",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: result.before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: result.after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function renamePage(app, pageId, name) {
  const { page: page7 } = app;
  return {
    id: "rename_page",
    before: {
      document: {
        pages: {
          [pageId]: { name: page7.name }
        }
      }
    },
    after: {
      document: {
        pages: {
          [pageId]: { name }
        }
      }
    }
  };
}
function resetBounds(app, ids, pageId) {
  const { currentPageId } = app;
  const { before, after } = TLDR.mutateShapes(app.state, ids, (shape) => {
    var _a3, _b;
    return (_b = (_a3 = app.getShapeUtil(shape)).onDoubleClickBoundsHandle) == null ? void 0 : _b.call(_a3, shape);
  }, pageId);
  return {
    id: "reset_bounds",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
var PI23 = Math.PI * 2;
function rotateShapes(app, ids, delta = -PI23 / 4) {
  const { currentPageId } = app;
  const before = {};
  const after = {};
  const shapesToRotate = ids.flatMap((id) => {
    const shape = app.getShape(id);
    return shape.children ? shape.children.map((childId) => app.getShape(childId)) : shape;
  }).filter((shape) => !shape.isLocked);
  const origin = Utils.getBoundsCenter(Utils.getCommonBounds(shapesToRotate.map((shape) => TLDR.getBounds(shape))));
  shapesToRotate.forEach((shape) => {
    const change = TLDR.getRotatedShapeMutation(shape, TLDR.getCenter(shape), origin, delta);
    if (!change)
      return;
    before[shape.id] = TLDR.getBeforeShape(shape, change);
    after[shape.id] = change;
  });
  return {
    id: "rotate",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function stretchShapes(app, ids, type) {
  const { currentPageId, selectedIds } = app;
  const initialShapes = ids.map((id) => app.getShape(id));
  const boundsForShapes = initialShapes.map((shape) => TLDR.getBounds(shape));
  const commonBounds = Utils.getCommonBounds(boundsForShapes);
  const idsToMutate = ids.flatMap((id) => {
    const shape = app.getShape(id);
    return shape.children ? shape.children : shape.id;
  }).filter((id) => !app.getShape(id).isLocked);
  const { before, after } = TLDR.mutateShapes(app.state, idsToMutate, (shape) => {
    const bounds = TLDR.getBounds(shape);
    switch (type) {
      case "horizontal": {
        const newBounds = __spreadProps4(__spreadValues4({}, bounds), {
          minX: commonBounds.minX,
          maxX: commonBounds.maxX,
          width: commonBounds.width
        });
        return TLDR.getShapeUtil(shape).transformSingle(shape, newBounds, {
          type: TLBoundsCorner.TopLeft,
          scaleX: newBounds.width / bounds.width,
          scaleY: 1,
          initialShape: shape,
          transformOrigin: [0.5, 0.5]
        });
      }
      case "vertical": {
        const newBounds = __spreadProps4(__spreadValues4({}, bounds), {
          minY: commonBounds.minY,
          maxY: commonBounds.maxY,
          height: commonBounds.height
        });
        return TLDR.getShapeUtil(shape).transformSingle(shape, newBounds, {
          type: TLBoundsCorner.TopLeft,
          scaleX: 1,
          scaleY: newBounds.height / bounds.height,
          initialShape: shape,
          transformOrigin: [0.5, 0.5]
        });
      }
    }
  }, currentPageId);
  initialShapes.forEach((shape) => {
    if (shape.type === "group") {
      delete before[shape.id];
      delete after[shape.id];
    }
  });
  return {
    id: "stretch",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: before }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: after }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function styleShapes(app, ids, changes) {
  const { currentPageId, selectedIds } = app;
  const shapeIdsToMutate = ids.flatMap((id) => TLDR.getDocumentBranch(app.state, id, currentPageId)).filter((id) => !app.getShape(id).isLocked);
  const beforeShapes = {};
  const afterShapes = {};
  shapeIdsToMutate.map((id) => app.getShape(id)).filter((shape) => !shape.isLocked).forEach((shape) => {
    beforeShapes[shape.id] = {
      style: __spreadValues4({}, Object.fromEntries(Object.keys(changes).map((key) => [key, shape.style[key]])))
    };
    afterShapes[shape.id] = {
      style: changes
    };
    if (shape.type === "text") {
      beforeShapes[shape.id].point = shape.point;
      afterShapes[shape.id].point = e.toFixed(e.add(shape.point, e.sub(app.getShapeUtil(shape).getCenter(shape), app.getShapeUtil(shape).getCenter(__spreadProps4(__spreadValues4({}, shape), {
        style: __spreadValues4(__spreadValues4({}, shape.style), changes)
      })))));
    }
  });
  return {
    id: "style",
    before: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: beforeShapes
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      },
      appState: {
        currentStyle: __spreadValues4({}, app.appState.currentStyle)
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: afterShapes
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      },
      appState: {
        currentStyle: changes
      }
    }
  };
}
function toggleShapesDecoration(app, ids, decorationId) {
  const { currentPageId, selectedIds } = app;
  const beforeShapes = Object.fromEntries(ids.map((id) => {
    var _a3;
    return [
      id,
      {
        decorations: {
          [decorationId]: (_a3 = app.getShape(id).decorations) == null ? void 0 : _a3[decorationId]
        }
      }
    ];
  }));
  const afterShapes = Object.fromEntries(ids.filter((id) => !app.getShape(id).isLocked).map((id) => {
    var _a3;
    return [
      id,
      {
        decorations: {
          [decorationId]: ((_a3 = app.getShape(id).decorations) == null ? void 0 : _a3[decorationId]) ? void 0 : "arrow"
        }
      }
    ];
  }));
  return {
    id: "toggle_decorations",
    before: {
      document: {
        pages: {
          [currentPageId]: { shapes: beforeShapes }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: { shapes: afterShapes }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function toggleShapeProp(app, ids, prop) {
  const { currentPageId } = app;
  const initialShapes = ids.map((id) => app.getShape(id)).filter((shape) => prop === "isLocked" ? true : !shape.isLocked);
  const isAllToggled = initialShapes.every((shape) => shape[prop]);
  const before = {};
  const after = {};
  initialShapes.forEach((shape) => {
    before[shape.id] = { [prop]: shape[prop] };
    after[shape.id] = { [prop]: !isAllToggled };
  });
  return {
    id: "toggle",
    before: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: before
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: after
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function translateShapes(app, ids, delta) {
  const { currentPageId, selectedIds } = app;
  app.rotationInfo.selectedIds = [...selectedIds];
  const before = {
    shapes: {},
    bindings: {}
  };
  const after = {
    shapes: {},
    bindings: {}
  };
  const idsToMutate = ids.flatMap((id) => {
    const shape = app.getShape(id);
    return shape.children ? shape.children : shape.id;
  }).filter((id) => !app.getShape(id).isLocked);
  const change = TLDR.mutateShapes(app.state, idsToMutate, (shape) => ({
    point: e.toFixed(e.add(shape.point, delta))
  }), currentPageId);
  before.shapes = change.before;
  after.shapes = change.after;
  const bindingsToDelete = TLDR.getBindings(app.state, currentPageId).filter((binding) => ids.includes(binding.fromId) && !ids.includes(binding.toId));
  bindingsToDelete.forEach((binding) => {
    before.bindings[binding.id] = binding;
    after.bindings[binding.id] = void 0;
    for (const id of [binding.toId, binding.fromId]) {
      const shape = app.getShape(id);
      if (!shape.handles)
        continue;
      Object.values(shape.handles).filter((handle) => handle.bindingId === binding.id).forEach((handle) => {
        var _a3, _b;
        before.shapes[id] = __spreadProps4(__spreadValues4({}, before.shapes[id]), {
          handles: __spreadProps4(__spreadValues4({}, (_a3 = before.shapes[id]) == null ? void 0 : _a3.handles), {
            [handle.id]: { bindingId: binding.id }
          })
        });
        after.shapes[id] = __spreadProps4(__spreadValues4({}, after.shapes[id]), {
          handles: __spreadProps4(__spreadValues4({}, (_b = after.shapes[id]) == null ? void 0 : _b.handles), { [handle.id]: { bindingId: void 0 } })
        });
      });
    }
  });
  return {
    id: "translate",
    before: {
      document: {
        pages: {
          [currentPageId]: before
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: after
        },
        pageStates: {
          [currentPageId]: {
            selectedIds: ids
          }
        }
      }
    }
  };
}
function ungroupShapes(app, selectedIds, groupShapes2, pageId) {
  const { bindings } = app;
  const beforeShapes = {};
  const afterShapes = {};
  const beforeBindings = {};
  const afterBindings = {};
  const beforeSelectedIds = selectedIds;
  const afterSelectedIds = selectedIds.filter((id) => !groupShapes2.find((shape) => shape.id === id));
  groupShapes2.filter((shape) => !shape.isLocked).forEach((groupShape) => {
    const shapesToReparent = [];
    const deletedGroupIds = [];
    beforeShapes[groupShape.id] = groupShape;
    afterShapes[groupShape.id] = void 0;
    groupShape.children.forEach((id) => {
      afterSelectedIds.push(id);
      const shape = app.getShape(id, pageId);
      shapesToReparent.push(shape);
    });
    const startingChildIndex = groupShape.childIndex;
    const endingChildIndex = TLDR.getChildIndexAbove(app.state, groupShape.id, pageId);
    const step = (endingChildIndex - startingChildIndex) / shapesToReparent.length;
    const sortedShapes = shapesToReparent.sort((a6, b7) => a6.childIndex - b7.childIndex);
    sortedShapes.forEach((shape, index2) => {
      beforeShapes[shape.id] = {
        parentId: shape.parentId,
        childIndex: shape.childIndex
      };
      afterShapes[shape.id] = {
        parentId: pageId,
        childIndex: startingChildIndex + step * index2
      };
    });
    bindings.filter((binding) => binding.toId === groupShape.id || binding.fromId === groupShape.id).forEach((binding) => {
      for (const id of [binding.toId, binding.fromId]) {
        if (afterShapes[id] === void 0) {
          beforeBindings[binding.id] = binding;
          afterBindings[binding.id] = void 0;
          const shape = app.getShape(id, pageId);
          if (shape.handles) {
            Object.values(shape.handles).filter((handle) => handle.bindingId === binding.id).forEach((handle) => {
              var _a3, _b;
              beforeShapes[id] = __spreadProps4(__spreadValues4({}, beforeShapes[id]), {
                handles: __spreadProps4(__spreadValues4({}, (_a3 = beforeShapes[id]) == null ? void 0 : _a3.handles), {
                  [handle.id]: { bindingId: binding.id }
                })
              });
              if (!deletedGroupIds.includes(id)) {
                afterShapes[id] = __spreadProps4(__spreadValues4({}, afterShapes[id]), {
                  handles: __spreadProps4(__spreadValues4({}, (_b = afterShapes[id]) == null ? void 0 : _b.handles), {
                    [handle.id]: { bindingId: void 0 }
                  })
                });
              }
            });
          }
        }
      }
    });
  });
  return {
    id: "ungroup",
    before: {
      document: {
        pages: {
          [pageId]: {
            shapes: beforeShapes,
            bindings: beforeBindings
          }
        },
        pageStates: {
          [pageId]: {
            selectedIds: beforeSelectedIds
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [pageId]: {
            shapes: afterShapes,
            bindings: beforeBindings
          }
        },
        pageStates: {
          [pageId]: {
            selectedIds: afterSelectedIds
          }
        }
      }
    }
  };
}
function updateShapes(app, updates, pageId) {
  const ids = updates.map((update) => update.id);
  const change = TLDR.mutateShapes(app.state, ids.filter((id) => !app.getShape(id, pageId).isLocked), (_shape, i7) => updates[i7], pageId);
  return {
    id: "update",
    before: {
      document: {
        pages: {
          [pageId]: {
            shapes: change.before
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [pageId]: {
            shapes: change.after
          }
        }
      }
    }
  };
}
function setShapesProps(app, ids, partial) {
  const { currentPageId, selectedIds } = app;
  const initialShapes = ids.map((id) => app.getShape(id)).filter((shape) => partial["isLocked"] ? true : !shape.isLocked);
  const before = {};
  const after = {};
  const keys = Object.keys(partial);
  initialShapes.forEach((shape) => {
    before[shape.id] = Object.fromEntries(keys.map((key) => [key, shape[key]]));
    after[shape.id] = partial;
  });
  return {
    id: "set_props",
    before: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: before
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: {
            shapes: after
          }
        },
        pageStates: {
          [currentPageId]: {
            selectedIds
          }
        }
      }
    }
  };
}
function insertContent(app, content, opts = {}) {
  const { currentPageId } = app;
  const { point, select: select21, overwrite } = opts;
  const page7 = app.document.pages[currentPageId];
  const before = {
    shapes: {},
    bindings: {}
  };
  const afterAssets = {};
  const after = {
    shapes: {},
    bindings: {}
  };
  if (overwrite) {
    for (const shape of content.shapes) {
      before.shapes[shape.id] = page7.shapes[shape.id];
      after.shapes[shape.id] = shape;
    }
    if (content.bindings) {
      for (const binding of content.bindings) {
        before.bindings[binding.id] = page7.bindings[binding.id];
        after.bindings[binding.id] = binding;
      }
    }
    if (content.assets) {
      for (const asset of content.assets) {
        afterAssets[asset.id] = asset;
      }
    }
  } else {
    const oldToNewIds = {};
    let nextIndex = TLDR.getTopChildIndex(app.state, currentPageId);
    const shapesToInsert = content.shapes.sort((a6, b7) => a6.childIndex - b7.childIndex).map((shape) => {
      const newShapeId = Utils.uniqueId();
      oldToNewIds[shape.id] = newShapeId;
      return __spreadProps4(__spreadValues4({}, Utils.deepClone(shape)), {
        id: newShapeId
      });
    });
    const visited = /* @__PURE__ */ new Set();
    while (shapesToInsert.length > 0) {
      const shape = shapesToInsert.shift();
      if (!shape)
        break;
      visited.add(shape.id);
      if (shape.parentId === "currentPageId") {
        shape.parentId = currentPageId;
        shape.childIndex = nextIndex++;
      } else {
        shape.parentId = oldToNewIds[shape.parentId];
        const parent = after.shapes[shape.parentId];
        if (!parent) {
          if (visited.has(shape.id)) {
            shape.parentId = "currentPageId";
          }
          shapesToInsert.push(shape);
          continue;
        }
        parent.children.push(shape.id);
      }
      if (shape.children) {
        shape.children = [];
      }
      before.shapes[shape.id] = void 0;
      after.shapes[shape.id] = shape;
    }
    Object.values(after.shapes).forEach((shape) => {
      if (shape.children && shape.children.length === 0) {
        delete before.shapes[shape.id];
        delete after.shapes[shape.id];
      }
    });
    if (content.bindings) {
      content.bindings.forEach((binding) => {
        const newBindingId = Utils.uniqueId();
        oldToNewIds[binding.id] = newBindingId;
        const toId = oldToNewIds[binding.toId];
        const fromId = oldToNewIds[binding.fromId];
        if (!toId || !fromId) {
          if (fromId) {
            const handles = after.shapes[fromId].handles;
            if (handles) {
              Object.values(handles).forEach((handle) => {
                if (handle.bindingId === binding.id) {
                  handle.bindingId = void 0;
                }
              });
            }
          }
          if (toId) {
            const handles = after.shapes[toId].handles;
            if (handles) {
              Object.values(handles).forEach((handle) => {
                if (handle.bindingId === binding.id) {
                  handle.bindingId = void 0;
                }
              });
            }
          }
          return;
        }
        const fromHandles = after.shapes[fromId].handles;
        if (fromHandles) {
          Object.values(fromHandles).forEach((handle) => {
            if (handle.bindingId === binding.id) {
              handle.bindingId = newBindingId;
            }
          });
        }
        const toHandles = after.shapes[toId].handles;
        if (toHandles) {
          Object.values(after.shapes[toId].handles).forEach((handle) => {
            if (handle.bindingId === binding.id) {
              handle.bindingId = newBindingId;
            }
          });
        }
        const newBinding = __spreadProps4(__spreadValues4({}, Utils.deepClone(binding)), {
          id: newBindingId,
          toId,
          fromId
        });
        before.bindings[newBinding.id] = void 0;
        after.bindings[newBinding.id] = newBinding;
      });
    }
    const shapesToMove = Object.values(after.shapes);
    if (shapesToMove.length > 0) {
      if (point) {
        const commonBounds = Utils.getCommonBounds(shapesToMove.map((shape) => TLDR.getBounds(shape)));
        const center = Utils.getBoundsCenter(commonBounds);
        shapesToMove.forEach((shape) => {
          if (!shape.point)
            return;
          shape.point = e.sub(point, e.sub(center, shape.point));
        });
      } else {
        const commonBounds = Utils.getCommonBounds(shapesToMove.map(TLDR.getBounds));
        if (!(Utils.boundsContain(app.viewport, commonBounds) || Utils.boundsCollide(app.viewport, commonBounds))) {
          const center = e.toFixed(app.getPagePoint(app.centerPoint));
          const centeredBounds = Utils.centerBounds(commonBounds, center);
          const delta = e.sub(Utils.getBoundsCenter(centeredBounds), Utils.getBoundsCenter(commonBounds));
          shapesToMove.forEach((shape) => {
            shape.point = e.toFixed(e.add(shape.point, delta));
          });
        }
      }
    }
    if (content.assets) {
      for (const asset of content.assets) {
        afterAssets[asset.id] = asset;
      }
    }
  }
  const elm = document.createElement("textarea");
  Object.values(after.shapes).forEach((shape) => {
    if ("text" in shape) {
      elm.innerHTML = shape.text;
      shape.text = elm.value;
    }
    if ("label" in shape) {
      elm.innerHTML = shape.label;
      shape.label = elm.value;
    }
  });
  elm.remove();
  return {
    id: "insert",
    before: {
      document: {
        pages: {
          [currentPageId]: before
        },
        pageStates: {
          [currentPageId]: { selectedIds: [...app.selectedIds] }
        }
      }
    },
    after: {
      document: {
        pages: {
          [currentPageId]: after
        },
        assets: afterAssets,
        pageStates: {
          [currentPageId]: {
            selectedIds: select21 ? Object.keys(after.shapes) : [...app.selectedIds]
          }
        }
      }
    }
  };
}
var BaseSession = class {
  constructor(app) {
    this.app = app;
  }
};
var ArrowSession = class extends BaseSession {
  constructor(app, shapeId, handleId, isCreate = false) {
    super(app);
    __publicField2(this, "type", "arrow");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "translatingHandle");
    __publicField2(this, "newStartBindingId", Utils.uniqueId());
    __publicField2(this, "draggedBindingId", Utils.uniqueId());
    __publicField2(this, "didBind", false);
    __publicField2(this, "initialShape");
    __publicField2(this, "handleId");
    __publicField2(this, "bindableShapeIds");
    __publicField2(this, "initialBinding");
    __publicField2(this, "startBindingShapeId");
    __publicField2(this, "isCreate");
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      var _a4, _b2, _c2;
      const { initialShape } = this;
      const {
        currentPoint,
        shiftKey,
        altKey,
        metaKey,
        currentGrid,
        settings: { showGrid }
      } = this.app;
      const shape = this.app.getShape(initialShape.id);
      if (shape.isLocked)
        return;
      const { handles } = initialShape;
      const handleId2 = this.handleId;
      if (!handles[handleId2].canBind)
        return;
      let delta = e.sub(currentPoint, e.add(handles[handleId2].point, initialShape.point));
      if (shiftKey) {
        const A4 = altKey ? e.med(handles.start.point, handles.end.point) : handles[handleId2 === "start" ? "end" : "start"].point;
        const B4 = handles[handleId2].point;
        const C6 = e.add(B4, delta);
        const angle = e.angle(A4, C6);
        const adjusted = e.rotWith(C6, A4, Utils.snapAngleToSegments(angle, 24) - angle);
        delta = e.add(delta, e.sub(adjusted, C6));
      }
      const nextPoint = e.add(handles[handleId2].point, delta);
      const handleChanges = {
        [handleId2]: __spreadProps4(__spreadValues4({}, handles[handleId2]), {
          point: showGrid ? e.snap(nextPoint, currentGrid) : e.toFixed(nextPoint),
          bindingId: void 0
        })
      };
      const utils = shapeUtils["arrow"];
      const handleChange = (_a4 = utils.onHandleChange) == null ? void 0 : _a4.call(utils, initialShape, handleChanges);
      if (!handleChange)
        return;
      const next = {
        shape: Utils.deepMerge(shape, handleChange),
        bindings: {}
      };
      let draggedBinding;
      const draggingHandle = next.shape.handles[this.handleId];
      const oppositeHandle = next.shape.handles[this.handleId === "start" ? "end" : "start"];
      if (this.startBindingShapeId) {
        let nextStartBinding;
        const startTarget = this.app.page.shapes[this.startBindingShapeId];
        const startTargetUtils = TLDR.getShapeUtil(startTarget);
        const center = startTargetUtils.getCenter(startTarget);
        const startHandle = next.shape.handles.start;
        const endHandle = next.shape.handles.end;
        const rayPoint = e.add(startHandle.point, next.shape.point);
        if (e.isEqual(rayPoint, center))
          rayPoint[1]++;
        const rayOrigin = center;
        const isInsideShape = startTargetUtils.hitTestPoint(startTarget, currentPoint);
        const rayDirection = e.uni(e.sub(rayPoint, rayOrigin));
        const hasStartBinding = this.app.getBinding(this.newStartBindingId) !== void 0;
        if (!metaKey && !startTargetUtils.hitTestPoint(startTarget, e.add(next.shape.point, endHandle.point))) {
          nextStartBinding = this.findBindingPoint(shape, startTarget, "start", this.newStartBindingId, center, rayOrigin, rayDirection, isInsideShape);
        }
        if (nextStartBinding && !hasStartBinding) {
          this.didBind = true;
          next.bindings[this.newStartBindingId] = nextStartBinding;
          next.shape = Utils.deepMerge(next.shape, {
            handles: {
              start: {
                bindingId: nextStartBinding.id
              }
            }
          });
        } else if (!nextStartBinding && hasStartBinding) {
          this.didBind = false;
          next.bindings[this.newStartBindingId] = void 0;
          next.shape = Utils.deepMerge(initialShape, {
            handles: {
              start: {
                bindingId: void 0
              }
            }
          });
        }
      }
      if (!metaKey) {
        const rayOrigin = e.add(oppositeHandle.point, next.shape.point);
        const rayPoint = e.add(draggingHandle.point, next.shape.point);
        const rayDirection = e.uni(e.sub(rayPoint, rayOrigin));
        const startPoint = e.add(next.shape.point, next.shape.handles.start.point);
        const endPoint = e.add(next.shape.point, next.shape.handles.end.point);
        const targets = this.bindableShapeIds.map((id) => this.app.page.shapes[id]).sort((a6, b7) => b7.childIndex - a6.childIndex).filter((shape2) => {
          if (shape2.isLocked)
            return false;
          const utils2 = TLDR.getShapeUtil(shape2);
          return ![startPoint, endPoint].every((point) => utils2.hitTestPoint(shape2, point));
        });
        for (const target of targets) {
          draggedBinding = this.findBindingPoint(shape, target, this.handleId, this.draggedBindingId, rayPoint, rayOrigin, rayDirection, altKey);
          if (draggedBinding)
            break;
        }
      }
      if (draggedBinding) {
        this.didBind = true;
        next.bindings[this.draggedBindingId] = draggedBinding;
        next.shape = Utils.deepMerge(next.shape, {
          handles: {
            [this.handleId]: {
              bindingId: this.draggedBindingId
            }
          }
        });
      } else {
        this.didBind = this.didBind || false;
        const currentBindingId = shape.handles[this.handleId].bindingId;
        if (currentBindingId !== void 0) {
          next.bindings[currentBindingId] = void 0;
          next.shape = Utils.deepMerge(next.shape, {
            handles: {
              [this.handleId]: {
                bindingId: void 0
              }
            }
          });
        }
      }
      const change = (_c2 = (_b2 = TLDR.getShapeUtil(next.shape)).onHandleChange) == null ? void 0 : _c2.call(_b2, next.shape, next.shape.handles);
      return {
        document: {
          pages: {
            [this.app.currentPageId]: {
              shapes: {
                [shape.id]: __spreadValues4(__spreadValues4({}, next.shape), change != null ? change : {})
              },
              bindings: next.bindings
            }
          },
          pageStates: {
            [this.app.currentPageId]: {
              bindingId: next.shape.handles[handleId2].bindingId
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const { initialShape, initialBinding, newStartBindingId, draggedBindingId } = this;
      const currentShape = TLDR.onSessionComplete(this.app.page.shapes[initialShape.id]);
      const isDeleting = this.isCreate || e.dist(currentShape.handles.start.point, currentShape.handles.end.point) < 4;
      const afterBindings = {};
      afterBindings[draggedBindingId] = void 0;
      if (initialBinding) {
        afterBindings[initialBinding.id] = isDeleting ? void 0 : initialBinding;
      }
      if (newStartBindingId) {
        afterBindings[newStartBindingId] = void 0;
      }
      return {
        document: {
          pages: {
            [this.app.currentPageId]: {
              shapes: {
                [initialShape.id]: isDeleting ? void 0 : initialShape
              },
              bindings: afterBindings
            }
          },
          pageStates: {
            [this.app.currentPageId]: {
              selectedIds: isDeleting ? [] : [initialShape.id],
              bindingId: void 0,
              hoveredId: void 0,
              editingId: void 0
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const { initialShape, initialBinding, newStartBindingId, startBindingShapeId, handleId: handleId2 } = this;
      const currentShape = TLDR.onSessionComplete(this.app.page.shapes[initialShape.id]);
      const currentBindingId = currentShape.handles[handleId2].bindingId;
      const length = e.dist(currentShape.handles.start.point, currentShape.handles.end.point);
      if (!(currentBindingId || initialBinding) && length < 4)
        return this.cancel();
      const beforeBindings = {};
      const afterBindings = {};
      if (initialBinding) {
        beforeBindings[initialBinding.id] = this.isCreate ? void 0 : initialBinding;
        afterBindings[initialBinding.id] = void 0;
      }
      if (currentBindingId) {
        beforeBindings[currentBindingId] = void 0;
        afterBindings[currentBindingId] = this.app.page.bindings[currentBindingId];
      }
      if (startBindingShapeId) {
        beforeBindings[newStartBindingId] = void 0;
        afterBindings[newStartBindingId] = this.app.page.bindings[newStartBindingId];
      }
      return {
        id: "arrow",
        before: {
          document: {
            pages: {
              [this.app.currentPageId]: {
                shapes: {
                  [initialShape.id]: this.isCreate ? void 0 : initialShape
                },
                bindings: beforeBindings
              }
            },
            pageStates: {
              [this.app.currentPageId]: {
                selectedIds: this.isCreate ? [] : [initialShape.id],
                bindingId: void 0,
                hoveredId: void 0,
                editingId: void 0
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [this.app.currentPageId]: {
                shapes: {
                  [initialShape.id]: currentShape
                },
                bindings: afterBindings
              }
            },
            pageStates: {
              [this.app.currentPageId]: {
                selectedIds: [initialShape.id],
                bindingId: void 0,
                hoveredId: void 0,
                editingId: void 0
              }
            }
          }
        }
      };
    });
    __publicField2(this, "findBindingPoint", (shape, target, handleId2, bindingId, point, origin, direction, bindAnywhere) => {
      const util = TLDR.getShapeUtil(target.type);
      const bindingPoint = util.getBindingPoint(target, shape, point, origin, direction, bindAnywhere);
      if (!bindingPoint)
        return;
      return {
        id: bindingId,
        type: "arrow",
        fromId: shape.id,
        toId: target.id,
        handleId: handleId2,
        point: e.toFixed(bindingPoint.point),
        distance: bindingPoint.distance
      };
    });
    var _a3, _b, _c;
    this.isCreate = isCreate;
    const { currentPageId } = app.state.appState;
    const page7 = app.state.document.pages[currentPageId];
    this.handleId = handleId;
    this.initialShape = deepCopy(page7.shapes[shapeId]);
    this.bindableShapeIds = TLDR.getBindableShapeIds(app.state).filter((id) => !(id === this.initialShape.id || id === this.initialShape.parentId));
    const oppositeHandleBindingId = (_a3 = this.initialShape.handles[handleId === "start" ? "end" : "start"]) == null ? void 0 : _a3.bindingId;
    if (oppositeHandleBindingId) {
      const oppositeToId = (_b = page7.bindings[oppositeHandleBindingId]) == null ? void 0 : _b.toId;
      if (oppositeToId) {
        this.bindableShapeIds = this.bindableShapeIds.filter((id) => id !== oppositeToId);
      }
    }
    const { originPoint } = this.app;
    if (this.isCreate) {
      this.startBindingShapeId = (_c = this.bindableShapeIds.map((id) => page7.shapes[id]).filter((shape) => !shape.isLocked && Utils.pointInBounds(originPoint, TLDR.getShapeUtil(shape).getBounds(shape))).sort((a6, b7) => {
        return b7.childIndex - a6.childIndex;
      })[0]) == null ? void 0 : _c.id;
      if (this.startBindingShapeId) {
        this.bindableShapeIds.splice(this.bindableShapeIds.indexOf(this.startBindingShapeId), 1);
      }
    } else {
      const initialBindingId = this.initialShape.handles[this.handleId].bindingId;
      if (initialBindingId) {
        this.initialBinding = page7.bindings[initialBindingId];
      } else {
        this.initialShape.handles[this.handleId].bindingId = void 0;
      }
    }
  }
};
var BrushSession = class extends BaseSession {
  constructor(app) {
    super(app);
    __publicField2(this, "type", "brush");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "brushing");
    __publicField2(this, "initialSelectedIds");
    __publicField2(this, "shapesToTest");
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      const {
        initialSelectedIds,
        shapesToTest,
        app: { metaKey, settings, originPoint, currentPoint }
      } = this;
      const brush = Utils.getBoundsFromPoints([originPoint, currentPoint]);
      const selectByContain = settings.isCadSelectMode ? !metaKey && originPoint[0] < currentPoint[0] : metaKey;
      const hits = /* @__PURE__ */ new Set();
      const selectedIds = new Set(initialSelectedIds);
      shapesToTest.forEach(({ id, selectId }) => {
        const shape = this.app.getShape(id);
        if (!hits.has(selectId)) {
          const util = this.app.getShapeUtil(shape);
          if (selectByContain ? Utils.boundsContain(brush, util.getBounds(shape)) : util.hitTestBounds(shape, brush)) {
            hits.add(selectId);
            if (!selectedIds.has(selectId)) {
              selectedIds.add(selectId);
            }
          } else if (selectedIds.has(selectId)) {
            selectedIds.delete(selectId);
          }
        }
      });
      const currentSelectedIds = this.app.selectedIds;
      const didChange = selectedIds.size !== currentSelectedIds.length || currentSelectedIds.some((id) => !selectedIds.has(id));
      const afterSelectedIds = didChange ? Array.from(selectedIds.values()) : currentSelectedIds;
      if (!didChange)
        return {
          document: {
            pageStates: {
              [this.app.currentPageId]: {
                brush
              }
            }
          }
        };
      return {
        appState: {
          selectByContain
        },
        document: {
          pageStates: {
            [this.app.currentPageId]: {
              brush,
              selectedIds: afterSelectedIds
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      return {
        appState: {
          selectByContain: false
        },
        document: {
          pageStates: {
            [this.app.currentPageId]: {
              brush: null,
              selectedIds: Array.from(this.initialSelectedIds.values())
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      return {
        appState: {
          selectByContain: false
        },
        document: {
          pageStates: {
            [this.app.currentPageId]: {
              brush: null,
              selectedIds: [...this.app.selectedIds]
            }
          }
        }
      };
    });
    const { currentPageId } = app;
    this.initialSelectedIds = new Set(this.app.selectedIds);
    this.shapesToTest = this.app.shapes.filter((shape) => !(shape.isLocked || shape.isHidden || shape.parentId !== currentPageId || this.initialSelectedIds.has(shape.id) || this.initialSelectedIds.has(shape.parentId))).map((shape) => ({
      id: shape.id,
      bounds: this.app.getShapeUtil(shape).getBounds(shape),
      selectId: shape.id
    }));
    this.update();
  }
};
var DrawSession = class extends BaseSession {
  constructor(app, id) {
    super(app);
    __publicField2(this, "type", "draw");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "creating");
    __publicField2(this, "topLeft");
    __publicField2(this, "points");
    __publicField2(this, "initialShape");
    __publicField2(this, "lastAdjustedPoint");
    __publicField2(this, "shiftedPoints", []);
    __publicField2(this, "shapeId");
    __publicField2(this, "isLocked");
    __publicField2(this, "isExtending");
    __publicField2(this, "lockedDirection");
    __publicField2(this, "start", () => {
      var _a4;
      const currentPoint2 = this.app.originPoint;
      const newAdjustedPoint = [0, 0, (_a4 = currentPoint2[2]) != null ? _a4 : 0.5];
      this.points.push(newAdjustedPoint);
      const topLeft = [
        Math.min(this.topLeft[0], currentPoint2[0]),
        Math.min(this.topLeft[1], currentPoint2[1])
      ];
      const delta2 = e.sub(topLeft, currentPoint2);
      this.topLeft = topLeft;
      this.shiftedPoints = this.points.map((pt) => e.toFixed(e.sub(pt, delta2)).concat(pt[2]));
      return {
        document: {
          pages: {
            [this.app.currentPageId]: {
              shapes: {
                [this.shapeId]: {
                  point: this.topLeft,
                  points: this.shiftedPoints
                }
              }
            }
          },
          pageStates: {
            [this.app.currentPageId]: {
              selectedIds: [this.shapeId]
            }
          }
        }
      };
    });
    __publicField2(this, "update", () => {
      const { shapeId } = this;
      const { currentPoint: currentPoint2, originPoint: originPoint2, shiftKey } = this.app;
      if (!this.lockedDirection && this.points.length > 1) {
        const bounds = Utils.getBoundsFromPoints(this.points);
        if (bounds.width > 8 || bounds.height > 8) {
          this.lockedDirection = bounds.width > bounds.height ? "horizontal" : "vertical";
        }
      }
      if (shiftKey) {
        if (!this.isLocked && this.points.length > 2) {
          if (!this.lockedDirection) {
            const bounds = Utils.getBoundsFromPoints(this.points);
            this.lockedDirection = bounds.width > bounds.height ? "horizontal" : "vertical";
          }
          this.isLocked = true;
          const returning = [...this.lastAdjustedPoint];
          if (this.lockedDirection === "vertical") {
            returning[0] = 0;
          } else {
            returning[1] = 0;
          }
          this.points.push(returning.concat(currentPoint2[2]));
        }
      } else if (this.isLocked) {
        this.isLocked = false;
      }
      if (this.isLocked) {
        if (this.lockedDirection === "vertical") {
          currentPoint2[0] = originPoint2[0];
        } else {
          currentPoint2[1] = originPoint2[1];
        }
      }
      const change = this.addPoint(currentPoint2);
      if (!change)
        return;
      return {
        document: {
          pages: {
            [this.app.currentPageId]: {
              shapes: {
                [shapeId]: change
              }
            }
          },
          pageStates: {
            [this.app.currentPageId]: {
              selectedIds: [shapeId]
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const { shapeId } = this;
      const pageId = this.app.currentPageId;
      return {
        document: {
          pages: {
            [pageId]: {
              shapes: {
                [shapeId]: this.isExtending ? this.initialShape : void 0
              }
            }
          },
          pageStates: {
            [pageId]: {
              selectedIds: []
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const { shapeId } = this;
      const pageId = this.app.currentPageId;
      const shape = this.app.getShape(shapeId);
      return {
        id: "create_draw",
        before: {
          document: {
            pages: {
              [pageId]: {
                shapes: {
                  [shapeId]: this.isExtending ? this.initialShape : void 0
                }
              }
            },
            pageStates: {
              [pageId]: {
                selectedIds: []
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [pageId]: {
                shapes: {
                  [shapeId]: __spreadProps4(__spreadValues4({}, shape), {
                    point: e.toFixed(shape.point),
                    points: shape.points.map((pt) => e.toFixed(pt)),
                    isComplete: true
                  })
                }
              }
            },
            pageStates: {
              [this.app.currentPageId]: {
                selectedIds: []
              }
            }
          }
        }
      };
    });
    __publicField2(this, "addPoint", (currentPoint2) => {
      const { originPoint: originPoint2 } = this.app;
      const newAdjustedPoint = e.toFixed(e.sub(currentPoint2, originPoint2)).concat(currentPoint2[2]);
      if (e.isEqual(this.lastAdjustedPoint, newAdjustedPoint))
        return;
      this.points.push(newAdjustedPoint);
      this.lastAdjustedPoint = newAdjustedPoint;
      const prevTopLeft = [...this.topLeft];
      const topLeft = [
        Math.min(this.topLeft[0], currentPoint2[0]),
        Math.min(this.topLeft[1], currentPoint2[1])
      ];
      const delta2 = e.sub(topLeft, originPoint2);
      let points;
      if (prevTopLeft[0] !== topLeft[0] || prevTopLeft[1] !== topLeft[1]) {
        this.topLeft = topLeft;
        points = this.points.map((pt) => e.toFixed(e.sub(pt, delta2)).concat(pt[2]));
      } else {
        points = [...this.shiftedPoints, e.sub(newAdjustedPoint, delta2).concat(newAdjustedPoint[2])];
      }
      this.shiftedPoints = points;
      return {
        point: this.topLeft,
        points
      };
    });
    var _a3;
    const { originPoint } = this.app;
    this.shapeId = id;
    this.initialShape = this.app.getShape(id);
    this.topLeft = [...this.initialShape.point];
    const currentPoint = [0, 0, (_a3 = originPoint[2]) != null ? _a3 : 0.5];
    const delta = e.sub(originPoint, this.topLeft);
    const initialPoints = this.initialShape.points.map((pt) => e.sub(pt, delta).concat(pt[2]));
    this.isExtending = initialPoints.length > 0;
    const newPoints = [];
    if (this.isExtending) {
      const prevPoint = initialPoints[initialPoints.length - 1];
      if (prevPoint) {
        newPoints.push(prevPoint, prevPoint);
        const len = Math.floor(e.dist(prevPoint, currentPoint) / 16);
        if (len > 1) {
          for (let i7 = 0; i7 < len; i7++) {
            const t12 = i7 / (len - 1);
            newPoints.push(e.lrp(prevPoint, currentPoint, t12).concat(prevPoint[2]));
          }
        } else {
          newPoints.push(currentPoint, currentPoint);
        }
      }
    } else {
      newPoints.push(currentPoint);
    }
    this.points = [...initialPoints, ...newPoints];
    this.shiftedPoints = this.points.map((pt) => e.add(pt, delta).concat(pt[2]));
    this.lastAdjustedPoint = this.points[this.points.length - 1];
  }
};
var HandleSession = class extends BaseSession {
  constructor(app, shapeId, handleId, commandId = "move_handle") {
    super(app);
    __publicField2(this, "type", "handle");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "translatingHandle");
    __publicField2(this, "commandId");
    __publicField2(this, "topLeft");
    __publicField2(this, "shiftKey", false);
    __publicField2(this, "initialShape");
    __publicField2(this, "handleId");
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      var _a3, _b;
      const {
        initialShape,
        app: { currentPageId, currentPoint }
      } = this;
      const shape = this.app.getShape(initialShape.id);
      if (shape.isLocked)
        return void 0;
      const handles = shape.handles;
      const handleId2 = this.handleId;
      const delta = e.sub(currentPoint, handles[handleId2].point);
      const handleChanges = {
        [handleId2]: __spreadProps4(__spreadValues4({}, handles[handleId2]), {
          point: e.sub(e.add(handles[handleId2].point, delta), shape.point)
        })
      };
      const change = (_b = (_a3 = TLDR.getShapeUtil(shape)).onHandleChange) == null ? void 0 : _b.call(_a3, shape, handleChanges);
      if (!change)
        return;
      return {
        document: {
          pages: {
            [currentPageId]: {
              shapes: {
                [shape.id]: change
              }
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const {
        initialShape,
        app: { currentPageId }
      } = this;
      return {
        document: {
          pages: {
            [currentPageId]: {
              shapes: {
                [initialShape.id]: initialShape
              }
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const {
        initialShape,
        app: { currentPageId }
      } = this;
      return {
        id: this.commandId,
        before: {
          document: {
            pages: {
              [currentPageId]: {
                shapes: {
                  [initialShape.id]: initialShape
                }
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [currentPageId]: {
                shapes: {
                  [initialShape.id]: TLDR.onSessionComplete(this.app.getShape(this.initialShape.id))
                }
              }
            }
          }
        }
      };
    });
    const { originPoint } = app;
    this.topLeft = [...originPoint];
    this.handleId = handleId;
    this.initialShape = this.app.getShape(shapeId);
    this.commandId = commandId;
  }
};
var RotateSession = class extends BaseSession {
  constructor(app) {
    super(app);
    __publicField2(this, "type", "rotate");
    __publicField2(this, "status", "transforming");
    __publicField2(this, "performanceMode");
    __publicField2(this, "delta", [0, 0]);
    __publicField2(this, "commonBoundsCenter");
    __publicField2(this, "initialAngle");
    __publicField2(this, "initialShapes");
    __publicField2(this, "changes", {});
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      const {
        commonBoundsCenter,
        initialShapes: initialShapes2,
        app: { currentPageId: currentPageId2, currentPoint, shiftKey }
      } = this;
      const shapes = {};
      let directionDelta = e.angle(commonBoundsCenter, currentPoint) - this.initialAngle;
      if (shiftKey) {
        directionDelta = Utils.snapAngleToSegments(directionDelta, 24);
      }
      initialShapes2.forEach(({ center, shape }) => {
        const { rotation = 0 } = shape;
        let shapeDelta = 0;
        if (shiftKey) {
          const snappedRotation = Utils.snapAngleToSegments(rotation, 24);
          shapeDelta = snappedRotation - rotation;
        }
        const change = TLDR.getRotatedShapeMutation(shape, center, commonBoundsCenter, shiftKey ? directionDelta + shapeDelta : directionDelta);
        if (change) {
          shapes[shape.id] = change;
        }
      });
      this.changes = shapes;
      return {
        document: {
          pages: {
            [currentPageId2]: {
              shapes
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const {
        initialShapes: initialShapes2,
        app: { currentPageId: currentPageId2 }
      } = this;
      const shapes = {};
      initialShapes2.forEach(({ shape }) => shapes[shape.id] = shape);
      return {
        document: {
          pages: {
            [currentPageId2]: {
              shapes
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const {
        initialShapes: initialShapes2,
        app: { currentPageId: currentPageId2 }
      } = this;
      const beforeShapes = {};
      const afterShapes = this.changes;
      initialShapes2.forEach(({ shape: { id, point, rotation, handles } }) => {
        beforeShapes[id] = { point, rotation, handles };
      });
      return {
        id: "rotate",
        before: {
          document: {
            pages: {
              [currentPageId2]: {
                shapes: beforeShapes
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [currentPageId2]: {
                shapes: afterShapes
              }
            }
          }
        }
      };
    });
    const {
      app: { currentPageId, pageState, originPoint }
    } = this;
    const initialShapes = TLDR.getSelectedBranchSnapshot(app.state, currentPageId).filter((shape) => !shape.isLocked);
    if (initialShapes.length === 0) {
      throw Error("No selected shapes!");
    }
    if (app.rotationInfo.selectedIds === pageState.selectedIds) {
      if (app.rotationInfo.center === void 0) {
        throw Error("We should have a center for rotation!");
      }
      this.commonBoundsCenter = app.rotationInfo.center;
    } else {
      this.commonBoundsCenter = Utils.getBoundsCenter(Utils.getCommonBounds(initialShapes.map(TLDR.getBounds)));
      app.rotationInfo.selectedIds = pageState.selectedIds;
      app.rotationInfo.center = this.commonBoundsCenter;
    }
    this.initialShapes = initialShapes.filter((shape) => shape.children === void 0).map((shape) => {
      return {
        shape,
        center: this.app.getShapeUtil(shape).getCenter(shape)
      };
    });
    this.initialAngle = e.angle(this.commonBoundsCenter, originPoint);
  }
};
var TransformSession = class extends BaseSession {
  constructor(app, transformType = TLBoundsCorner.BottomRight, isCreate = false) {
    super(app);
    this.transformType = transformType;
    this.isCreate = isCreate;
    __publicField2(this, "type", "transform");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "transforming");
    __publicField2(this, "scaleX", 1);
    __publicField2(this, "scaleY", 1);
    __publicField2(this, "initialShapes");
    __publicField2(this, "initialShapeIds");
    __publicField2(this, "initialSelectedIds");
    __publicField2(this, "shapeBounds");
    __publicField2(this, "hasUnlockedShapes");
    __publicField2(this, "isAllAspectRatioLocked");
    __publicField2(this, "initialCommonBounds");
    __publicField2(this, "snapInfo", { state: "empty" });
    __publicField2(this, "prevPoint", [0, 0]);
    __publicField2(this, "speed", 1);
    __publicField2(this, "start", () => {
      this.snapInfo = {
        state: "ready",
        bounds: this.app.shapes.filter((shape) => !this.initialShapeIds.includes(shape.id)).map((shape) => Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape)))
      };
      return void 0;
    });
    __publicField2(this, "update", () => {
      const {
        transformType: transformType2,
        shapeBounds,
        initialCommonBounds,
        isAllAspectRatioLocked,
        app: {
          currentPageId,
          pageState: { camera },
          viewport,
          currentPoint,
          previousPoint,
          originPoint,
          shiftKey,
          altKey,
          metaKey,
          currentGrid,
          settings: { isSnapping, showGrid }
        }
      } = this;
      const shapes = {};
      const delta = altKey ? e.mul(e.sub(currentPoint, originPoint), 2) : e.sub(currentPoint, originPoint);
      let newBounds = Utils.getTransformedBoundingBox(initialCommonBounds, transformType2, delta, 0, shiftKey || isAllAspectRatioLocked);
      if (altKey) {
        newBounds = __spreadValues4(__spreadValues4({}, newBounds), Utils.centerBounds(newBounds, Utils.getBoundsCenter(initialCommonBounds)));
      }
      if (showGrid) {
        newBounds = __spreadValues4(__spreadValues4({}, newBounds), Utils.snapBoundsToGrid(newBounds, currentGrid));
      }
      const speed = e.dist(currentPoint, previousPoint);
      const speedChange = speed - this.speed;
      this.speed = this.speed + speedChange * (speedChange > 1 ? 0.5 : 0.15);
      let snapLines = [];
      if ((isSnapping && !metaKey || !isSnapping && metaKey) && this.speed * camera.zoom < SLOW_SPEED && this.snapInfo.state === "ready") {
        const snapResult = Utils.getSnapPoints(Utils.getBoundsWithCenter(newBounds), this.snapInfo.bounds.filter((bounds) => Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds)), SNAP_DISTANCE / camera.zoom);
        if (snapResult) {
          snapLines = snapResult.snapLines;
          newBounds = Utils.getTransformedBoundingBox(initialCommonBounds, transformType2, e.sub(delta, snapResult.offset), 0, shiftKey || isAllAspectRatioLocked);
        }
      }
      this.scaleX = newBounds.scaleX;
      this.scaleY = newBounds.scaleY;
      shapeBounds.forEach(({ initialShape, initialShapeBounds, transformOrigin }) => {
        let newShapeBounds = Utils.getRelativeTransformedBoundingBox(newBounds, initialCommonBounds, initialShapeBounds, this.scaleX < 0, this.scaleY < 0);
        if (showGrid) {
          newShapeBounds = Utils.snapBoundsToGrid(newShapeBounds, currentGrid);
        }
        const afterShape = TLDR.transform(this.app.getShape(initialShape.id), newShapeBounds, {
          type: this.transformType,
          initialShape,
          scaleX: this.scaleX,
          scaleY: this.scaleY,
          transformOrigin
        });
        shapes[initialShape.id] = afterShape;
      });
      return {
        appState: {
          snapLines
        },
        document: {
          pages: {
            [currentPageId]: {
              shapes
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const {
        shapeBounds,
        app: { currentPageId }
      } = this;
      const shapes = {};
      if (this.isCreate) {
        shapeBounds.forEach((shape) => shapes[shape.initialShape.id] = void 0);
      } else {
        shapeBounds.forEach((shape) => shapes[shape.initialShape.id] = shape.initialShape);
      }
      return {
        appState: {
          snapLines: []
        },
        document: {
          pages: {
            [currentPageId]: {
              shapes
            }
          },
          pageStates: {
            [currentPageId]: {
              selectedIds: this.isCreate ? [] : shapeBounds.map((shape) => shape.initialShape.id)
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const {
        isCreate: isCreate2,
        shapeBounds,
        hasUnlockedShapes,
        app: { currentPageId }
      } = this;
      if (!hasUnlockedShapes)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2) {
        return this.cancel();
      }
      const beforeShapes = {};
      const afterShapes = {};
      let beforeSelectedIds;
      let afterSelectedIds;
      if (isCreate2) {
        beforeSelectedIds = [];
        afterSelectedIds = [];
        shapeBounds.forEach(({ initialShape }) => {
          beforeShapes[initialShape.id] = void 0;
          afterShapes[initialShape.id] = this.app.getShape(initialShape.id);
        });
      } else {
        beforeSelectedIds = this.initialSelectedIds;
        afterSelectedIds = this.initialSelectedIds;
        shapeBounds.forEach(({ initialShape }) => {
          beforeShapes[initialShape.id] = initialShape;
          afterShapes[initialShape.id] = this.app.getShape(initialShape.id);
        });
      }
      return {
        id: "transform",
        before: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId]: {
                shapes: beforeShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: beforeSelectedIds,
                hoveredId: void 0,
                editingId: void 0
              }
            }
          }
        },
        after: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId]: {
                shapes: afterShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: afterSelectedIds,
                hoveredId: void 0,
                editingId: void 0
              }
            }
          }
        }
      };
    });
    this.initialSelectedIds = [...this.app.selectedIds];
    this.app.rotationInfo.selectedIds = [...this.initialSelectedIds];
    this.initialShapes = TLDR.getSelectedBranchSnapshot(this.app.state, this.app.currentPageId).filter((shape) => !shape.isLocked);
    this.initialShapeIds = this.initialShapes.map((shape) => shape.id);
    this.hasUnlockedShapes = this.initialShapes.length > 0;
    this.isAllAspectRatioLocked = this.initialShapes.every((shape) => shape.isAspectRatioLocked || TLDR.getShapeUtil(shape).isAspectRatioLocked);
    const shapesBounds = Object.fromEntries(this.initialShapes.map((shape) => [shape.id, TLDR.getBounds(shape)]));
    const boundsArr = Object.values(shapesBounds);
    this.initialCommonBounds = Utils.getCommonBounds(boundsArr);
    const initialInnerBounds = Utils.getBoundsFromPoints(boundsArr.map(Utils.getBoundsCenter));
    this.shapeBounds = this.initialShapes.map((shape) => {
      const initialShapeBounds = shapesBounds[shape.id];
      const ic = Utils.getBoundsCenter(initialShapeBounds);
      const ix = (ic[0] - initialInnerBounds.minX) / initialInnerBounds.width;
      const iy = (ic[1] - initialInnerBounds.minY) / initialInnerBounds.height;
      return {
        initialShape: shape,
        initialShapeBounds,
        transformOrigin: [ix, iy]
      };
    });
  }
};
var TransformSingleSession = class extends BaseSession {
  constructor(app, id, transformType, isCreate = false) {
    super(app);
    __publicField2(this, "type", "transformSingle");
    __publicField2(this, "status", "transforming");
    __publicField2(this, "performanceMode");
    __publicField2(this, "transformType");
    __publicField2(this, "scaleX", 1);
    __publicField2(this, "scaleY", 1);
    __publicField2(this, "isCreate");
    __publicField2(this, "initialShape");
    __publicField2(this, "initialShapeBounds");
    __publicField2(this, "initialCommonBounds");
    __publicField2(this, "snapInfo", { state: "empty" });
    __publicField2(this, "prevPoint", [0, 0]);
    __publicField2(this, "speed", 1);
    __publicField2(this, "start", () => {
      this.snapInfo = {
        state: "ready",
        bounds: this.app.shapes.filter((shape2) => shape2.id !== this.initialShape.id).map((shape2) => Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape2)))
      };
      return void 0;
    });
    __publicField2(this, "update", () => {
      const {
        transformType: transformType2,
        initialShape,
        initialShapeBounds,
        app: {
          settings: { isSnapping, showGrid },
          currentPageId,
          pageState: { camera },
          viewport,
          currentPoint,
          previousPoint,
          originPoint,
          currentGrid,
          shiftKey,
          altKey,
          metaKey
        }
      } = this;
      if (initialShape.isLocked)
        return void 0;
      const shapes = {};
      const delta = altKey ? e.mul(e.sub(currentPoint, originPoint), 2) : e.sub(currentPoint, originPoint);
      const shape2 = this.app.getShape(initialShape.id);
      const utils = TLDR.getShapeUtil(shape2);
      let newBounds = Utils.getTransformedBoundingBox(initialShapeBounds, transformType2, delta, shape2.rotation, shiftKey || shape2.isAspectRatioLocked || utils.isAspectRatioLocked);
      if (altKey) {
        newBounds = __spreadValues4(__spreadValues4({}, newBounds), Utils.centerBounds(newBounds, Utils.getBoundsCenter(initialShapeBounds)));
      }
      if (showGrid) {
        newBounds = __spreadValues4(__spreadValues4({}, newBounds), Utils.snapBoundsToGrid(newBounds, currentGrid));
      }
      const speed = e.dist(currentPoint, previousPoint);
      const speedChange = speed - this.speed;
      this.speed = this.speed + speedChange * (speedChange > 1 ? 0.5 : 0.15);
      let snapLines = [];
      if ((isSnapping && !metaKey || !isSnapping && metaKey) && !initialShape.rotation && this.speed * camera.zoom < SLOW_SPEED && this.snapInfo.state === "ready") {
        const snapResult = Utils.getSnapPoints(Utils.getBoundsWithCenter(newBounds), this.snapInfo.bounds.filter((bounds) => Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds)), SNAP_DISTANCE / camera.zoom);
        if (snapResult) {
          snapLines = snapResult.snapLines;
          newBounds = Utils.getTransformedBoundingBox(initialShapeBounds, transformType2, e.sub(delta, snapResult.offset), shape2.rotation, shiftKey || shape2.isAspectRatioLocked || utils.isAspectRatioLocked);
        }
      }
      const afterShape = TLDR.getShapeUtil(shape2).transformSingle(shape2, newBounds, {
        initialShape,
        type: this.transformType,
        scaleX: newBounds.scaleX,
        scaleY: newBounds.scaleY,
        transformOrigin: [0.5, 0.5]
      });
      if (afterShape) {
        shapes[shape2.id] = afterShape;
      }
      if (showGrid && afterShape && afterShape.point) {
        afterShape.point = e.snap(afterShape.point, currentGrid);
      }
      return {
        appState: {
          snapLines
        },
        document: {
          pages: {
            [currentPageId]: {
              shapes
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const {
        initialShape,
        app: { currentPageId }
      } = this;
      const shapes = {};
      if (this.isCreate) {
        shapes[initialShape.id] = void 0;
      } else {
        shapes[initialShape.id] = initialShape;
      }
      return {
        appState: {
          snapLines: []
        },
        document: {
          pages: {
            [currentPageId]: {
              shapes
            }
          },
          pageStates: {
            [currentPageId]: {
              selectedIds: this.isCreate ? [] : [initialShape.id]
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const {
        initialShape,
        app: { currentPageId }
      } = this;
      if (initialShape.isLocked)
        return;
      if (this.isCreate && e.dist(this.app.originPoint, this.app.currentPoint) < 2) {
        return this.cancel();
      }
      const beforeShapes = {};
      const afterShapes = {};
      beforeShapes[initialShape.id] = this.isCreate ? void 0 : initialShape;
      afterShapes[initialShape.id] = TLDR.onSessionComplete(this.app.getShape(initialShape.id));
      return {
        id: "transform_single",
        before: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId]: {
                shapes: beforeShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: this.isCreate ? [] : [initialShape.id],
                editingId: void 0,
                hoveredId: void 0
              }
            }
          }
        },
        after: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId]: {
                shapes: afterShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: [initialShape.id],
                editingId: void 0,
                hoveredId: void 0
              }
            }
          }
        }
      };
    });
    this.isCreate = isCreate;
    this.transformType = transformType;
    const shape = this.app.getShape(id);
    this.initialShape = shape;
    this.initialShapeBounds = TLDR.getBounds(shape);
    this.initialCommonBounds = TLDR.getRotatedBounds(shape);
    this.app.rotationInfo.selectedIds = [shape.id];
  }
};
var TranslateSession = class extends BaseSession {
  constructor(app, isCreate = false, link = false) {
    super(app);
    __publicField2(this, "performanceMode");
    __publicField2(this, "type", "translate");
    __publicField2(this, "status", "translating");
    __publicField2(this, "delta", [0, 0]);
    __publicField2(this, "prev", [0, 0]);
    __publicField2(this, "prevPoint", [0, 0]);
    __publicField2(this, "speed", 1);
    __publicField2(this, "cloneInfo", {
      state: "empty"
    });
    __publicField2(this, "snapInfo", {
      state: "empty"
    });
    __publicField2(this, "snapLines", []);
    __publicField2(this, "isCloning", false);
    __publicField2(this, "isCreate");
    __publicField2(this, "link");
    __publicField2(this, "initialIds");
    __publicField2(this, "hasUnlockedShapes");
    __publicField2(this, "initialSelectedIds");
    __publicField2(this, "initialCommonBounds");
    __publicField2(this, "initialShapes");
    __publicField2(this, "initialParentChildren");
    __publicField2(this, "bindingsToDelete");
    __publicField2(this, "start", () => {
      const {
        bindingsToDelete,
        initialIds,
        app: { currentPageId: currentPageId2, page: page72 }
      } = this;
      const allBounds = [];
      const otherBounds = [];
      Object.values(page72.shapes).forEach((shape) => {
        const bounds = Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape));
        allBounds.push(bounds);
        if (!initialIds.has(shape.id)) {
          otherBounds.push(bounds);
        }
      });
      this.snapInfo = {
        state: "ready",
        bounds: allBounds,
        others: otherBounds
      };
      if (bindingsToDelete.length === 0)
        return;
      const nextBindings = {};
      bindingsToDelete.forEach((binding) => nextBindings[binding.id] = void 0);
      return {
        document: {
          pages: {
            [currentPageId2]: {
              bindings: nextBindings
            }
          }
        }
      };
    });
    __publicField2(this, "update", () => {
      const {
        initialParentChildren,
        initialShapes,
        initialCommonBounds,
        bindingsToDelete,
        app: {
          pageState: { camera },
          settings: { isSnapping, showGrid },
          currentPageId: currentPageId2,
          viewport,
          selectedIds: selectedIds2,
          currentPoint,
          previousPoint,
          originPoint,
          altKey,
          shiftKey,
          metaKey,
          currentGrid
        }
      } = this;
      const nextBindings = {};
      const nextShapes = {};
      const nextPageState = {};
      let delta = e.sub(currentPoint, originPoint);
      let didChangeCloning = false;
      if (!this.isCreate) {
        if (altKey && !this.isCloning) {
          this.isCloning = true;
          didChangeCloning = true;
        } else if (!altKey && this.isCloning) {
          this.isCloning = false;
          didChangeCloning = true;
        }
      }
      if (shiftKey) {
        if (Math.abs(delta[0]) < Math.abs(delta[1])) {
          delta[0] = 0;
        } else {
          delta[1] = 0;
        }
      }
      const speed = e.dist(currentPoint, previousPoint);
      const change = speed - this.speed;
      this.speed = this.speed + change * (change > 1 ? 0.5 : 0.15);
      this.snapLines = [];
      if ((isSnapping && !metaKey || !isSnapping && metaKey) && this.speed * camera.zoom < SLOW_SPEED && this.snapInfo.state === "ready") {
        const snapResult = Utils.getSnapPoints(Utils.getBoundsWithCenter(showGrid ? Utils.snapBoundsToGrid(Utils.translateBounds(initialCommonBounds, delta), currentGrid) : Utils.translateBounds(initialCommonBounds, delta)), (this.isCloning ? this.snapInfo.bounds : this.snapInfo.others).filter((bounds) => {
          return Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds);
        }), SNAP_DISTANCE / camera.zoom);
        if (snapResult) {
          this.snapLines = snapResult.snapLines;
          delta = e.sub(delta, snapResult.offset);
        }
      }
      this.prev = delta;
      if (this.isCloning) {
        if (didChangeCloning) {
          if (this.cloneInfo.state === "empty") {
            this.createCloneInfo();
          }
          if (this.cloneInfo.state === "empty") {
            throw Error;
          }
          const { clones, clonedBindings } = this.cloneInfo;
          this.isCloning = true;
          bindingsToDelete.forEach((binding) => nextBindings[binding.id] = binding);
          initialShapes.forEach((shape) => nextShapes[shape.id] = { point: shape.point });
          clones.forEach((clone) => {
            var _a3;
            nextShapes[clone.id] = __spreadValues4({}, clone);
            if (clone.parentId !== currentPageId2 && !selectedIds2.includes(clone.parentId)) {
              const children = ((_a3 = nextShapes[clone.parentId]) == null ? void 0 : _a3.children) || initialParentChildren[clone.parentId];
              if (!children.includes(clone.id)) {
                nextShapes[clone.parentId] = __spreadProps4(__spreadValues4({}, nextShapes[clone.parentId]), {
                  children: [...children, clone.id]
                });
              }
            }
          });
          for (const binding of clonedBindings) {
            nextBindings[binding.id] = binding;
          }
          nextPageState.selectedIds = clones.map((clone) => clone.id);
          clones.forEach((clone) => {
            nextShapes[clone.id] = __spreadProps4(__spreadValues4({}, clone), {
              point: showGrid ? e.snap(e.toFixed(e.add(clone.point, delta)), currentGrid) : e.toFixed(e.add(clone.point, delta))
            });
          });
        } else {
          if (this.cloneInfo.state === "empty")
            throw Error;
          const { clones } = this.cloneInfo;
          clones.forEach((clone) => {
            nextShapes[clone.id] = {
              point: showGrid ? e.snap(e.toFixed(e.add(clone.point, delta)), currentGrid) : e.toFixed(e.add(clone.point, delta))
            };
          });
        }
      } else {
        if (didChangeCloning) {
          if (this.cloneInfo.state === "empty")
            throw Error;
          const { clones, clonedBindings } = this.cloneInfo;
          this.isCloning = false;
          bindingsToDelete.forEach((binding) => nextBindings[binding.id] = void 0);
          clones.forEach((clone) => {
            if (clone.parentId !== currentPageId2) {
              nextShapes[clone.parentId] = __spreadProps4(__spreadValues4({}, nextShapes[clone.parentId]), {
                children: initialParentChildren[clone.parentId]
              });
            }
          });
          clones.forEach((clone) => nextShapes[clone.id] = void 0);
          initialShapes.forEach((shape) => {
            nextShapes[shape.id] = {
              point: showGrid ? e.snap(e.toFixed(e.add(shape.point, delta)), currentGrid) : e.toFixed(e.add(shape.point, delta))
            };
          });
          for (const binding of clonedBindings) {
            nextBindings[binding.id] = void 0;
          }
          nextPageState.selectedIds = initialShapes.map((shape) => shape.id);
        } else {
          initialShapes.forEach((shape) => {
            nextShapes[shape.id] = {
              point: showGrid ? e.snap(e.toFixed(e.add(shape.point, delta)), currentGrid) : e.toFixed(e.add(shape.point, delta))
            };
          });
        }
      }
      return {
        appState: {
          snapLines: this.snapLines
        },
        document: {
          pages: {
            [currentPageId2]: {
              shapes: nextShapes,
              bindings: nextBindings
            }
          },
          pageStates: {
            [currentPageId2]: nextPageState
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const {
        initialShapes,
        initialSelectedIds,
        bindingsToDelete,
        app: { currentPageId: currentPageId2 }
      } = this;
      const nextBindings = {};
      const nextShapes = {};
      const nextPageState = {
        editingId: void 0,
        hoveredId: void 0
      };
      bindingsToDelete.forEach((binding) => nextBindings[binding.id] = binding);
      if (this.isCreate) {
        initialShapes.forEach(({ id }) => nextShapes[id] = void 0);
        nextPageState.selectedIds = [];
      } else {
        initialShapes.forEach(({ id, point }) => nextShapes[id] = __spreadProps4(__spreadValues4({}, nextShapes[id]), { point }));
        nextPageState.selectedIds = initialSelectedIds;
      }
      if (this.cloneInfo.state === "ready") {
        const { clones, clonedBindings } = this.cloneInfo;
        clones.forEach((clone) => nextShapes[clone.id] = void 0);
        clonedBindings.forEach((binding) => nextBindings[binding.id] = void 0);
      }
      return {
        appState: {
          snapLines: []
        },
        document: {
          pages: {
            [currentPageId2]: {
              shapes: nextShapes,
              bindings: nextBindings
            }
          },
          pageStates: {
            [currentPageId2]: nextPageState
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const {
        initialShapes,
        initialParentChildren,
        bindingsToDelete,
        app: { currentPageId: currentPageId2 }
      } = this;
      const beforeBindings = {};
      const beforeShapes = {};
      const afterBindings = {};
      const afterShapes = {};
      if (this.isCloning) {
        if (this.cloneInfo.state === "empty") {
          this.createCloneInfo();
        }
        if (this.cloneInfo.state !== "ready")
          throw Error;
        const { clones, clonedBindings } = this.cloneInfo;
        clones.forEach((clone) => {
          beforeShapes[clone.id] = void 0;
          afterShapes[clone.id] = this.app.getShape(clone.id);
          if (clone.parentId !== currentPageId2) {
            beforeShapes[clone.parentId] = __spreadProps4(__spreadValues4({}, beforeShapes[clone.parentId]), {
              children: initialParentChildren[clone.parentId]
            });
            afterShapes[clone.parentId] = __spreadProps4(__spreadValues4({}, afterShapes[clone.parentId]), {
              children: this.app.getShape(clone.parentId).children
            });
          }
        });
        clonedBindings.forEach((binding) => {
          beforeBindings[binding.id] = void 0;
          afterBindings[binding.id] = this.app.getBinding(binding.id);
        });
      } else {
        initialShapes.forEach((shape) => {
          beforeShapes[shape.id] = this.isCreate ? void 0 : __spreadProps4(__spreadValues4({}, beforeShapes[shape.id]), {
            point: shape.point
          });
          afterShapes[shape.id] = __spreadValues4(__spreadValues4({}, afterShapes[shape.id]), this.isCreate ? this.app.getShape(shape.id) : { point: this.app.getShape(shape.id).point });
        });
      }
      bindingsToDelete.forEach((binding) => {
        beforeBindings[binding.id] = binding;
        for (const id of [binding.toId, binding.fromId]) {
          const shape = this.app.getShape(id);
          if (!shape.handles)
            continue;
          Object.values(shape.handles).filter((handle) => handle.bindingId === binding.id).forEach((handle) => {
            beforeShapes[id] = __spreadProps4(__spreadValues4({}, beforeShapes[id]), { handles: {} });
            afterShapes[id] = __spreadProps4(__spreadValues4({}, afterShapes[id]), { handles: {} });
            beforeShapes[id].handles[handle.id] = {
              bindingId: binding.id
            };
            afterShapes[id].handles[handle.id] = {
              bindingId: void 0
            };
          });
        }
      });
      return {
        id: "translate",
        before: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId2]: {
                shapes: beforeShapes,
                bindings: beforeBindings
              }
            },
            pageStates: {
              [currentPageId2]: {
                selectedIds: this.isCreate ? [] : [...this.initialSelectedIds]
              }
            }
          }
        },
        after: {
          appState: {
            snapLines: []
          },
          document: {
            pages: {
              [currentPageId2]: {
                shapes: afterShapes,
                bindings: afterBindings
              }
            },
            pageStates: {
              [currentPageId2]: {
                selectedIds: [...this.app.selectedIds]
              }
            }
          }
        }
      };
    });
    __publicField2(this, "createCloneInfo", () => {
      const {
        initialShapes,
        initialParentChildren,
        app: { selectedIds: selectedIds2, currentPageId: currentPageId2, page: page72 }
      } = this;
      const cloneMap = {};
      const clonedBindingsMap = {};
      const clonedBindings = [];
      const clones = [];
      initialShapes.forEach((shape) => {
        const newId = Utils.uniqueId();
        initialParentChildren[newId] = initialParentChildren[shape.id];
        cloneMap[shape.id] = newId;
        const clone = __spreadProps4(__spreadValues4({}, Utils.deepClone(shape)), {
          id: newId,
          parentId: shape.parentId,
          childIndex: TLDR.getChildIndexAbove(this.app.state, shape.id, currentPageId2)
        });
        if (clone.type === "video") {
          const element = document.getElementById(shape.id + "_video");
          if (element)
            clone.currentTime = (element.currentTime + 16) % element.duration;
        }
        clones.push(clone);
      });
      clones.forEach((clone) => {
        if (clone.children !== void 0) {
          clone.children = clone.children.map((childId) => cloneMap[childId]);
        }
      });
      clones.forEach((clone) => {
        if (selectedIds2.includes(clone.parentId)) {
          clone.parentId = cloneMap[clone.parentId];
        }
      });
      const clonedShapeIds = new Set(Object.keys(cloneMap));
      Object.values(page72.bindings).filter((binding) => clonedShapeIds.has(binding.fromId) || clonedShapeIds.has(binding.toId)).forEach((binding) => {
        if (clonedShapeIds.has(binding.fromId)) {
          if (clonedShapeIds.has(binding.toId)) {
            const cloneId = Utils.uniqueId();
            const cloneBinding = __spreadProps4(__spreadValues4({}, Utils.deepClone(binding)), {
              id: cloneId,
              fromId: cloneMap[binding.fromId] || binding.fromId,
              toId: cloneMap[binding.toId] || binding.toId
            });
            clonedBindingsMap[binding.id] = cloneId;
            clonedBindings.push(cloneBinding);
          }
        }
      });
      clones.forEach((clone) => {
        if (clone.handles) {
          if (clone.handles) {
            for (const id in clone.handles) {
              const handle = clone.handles[id];
              handle.bindingId = handle.bindingId ? clonedBindingsMap[handle.bindingId] : void 0;
            }
          }
        }
      });
      clones.forEach((clone) => {
        if (page72.shapes[clone.id]) {
          throw Error("uh oh, we didn't clone correctly");
        }
      });
      this.cloneInfo = {
        state: "ready",
        clones,
        cloneMap,
        clonedBindings
      };
    });
    this.isCreate = isCreate;
    this.link = link;
    const { currentPageId, selectedIds, page: page7 } = this.app;
    this.initialSelectedIds = [...selectedIds];
    const selectedShapes = (link ? TLDR.getLinkedShapeIds(this.app.state, currentPageId, link, false) : selectedIds).map((id) => this.app.getShape(id)).filter((shape) => !shape.isLocked);
    const selectedShapeIds = new Set(selectedShapes.map((shape) => shape.id));
    this.hasUnlockedShapes = selectedShapes.length > 0;
    this.initialShapes = Array.from(new Set(selectedShapes.filter((shape) => !selectedShapeIds.has(shape.parentId)).flatMap((shape) => {
      return shape.children ? [shape, ...shape.children.map((childId) => this.app.getShape(childId))] : [shape];
    })).values());
    this.initialIds = new Set(this.initialShapes.map((shape) => shape.id));
    this.bindingsToDelete = [];
    Object.values(page7.bindings).filter((binding) => this.initialIds.has(binding.fromId) || this.initialIds.has(binding.toId)).forEach((binding) => {
      if (this.initialIds.has(binding.fromId)) {
        if (!this.initialIds.has(binding.toId)) {
          this.bindingsToDelete.push(binding);
        }
      }
    });
    this.initialParentChildren = {};
    this.initialShapes.map((s9) => s9.parentId).filter((id) => id !== page7.id).forEach((id) => {
      this.initialParentChildren[id] = this.app.getShape(id).children;
    });
    this.initialCommonBounds = Utils.getCommonBounds(this.initialShapes.map(TLDR.getRotatedBounds));
    this.app.rotationInfo.selectedIds = [...this.app.selectedIds];
  }
};
var EraseSession = class extends BaseSession {
  constructor(app) {
    super(app);
    __publicField2(this, "type", "draw");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "creating");
    __publicField2(this, "isLocked");
    __publicField2(this, "lockedDirection");
    __publicField2(this, "erasedShapes", /* @__PURE__ */ new Set());
    __publicField2(this, "erasedBindings", /* @__PURE__ */ new Set());
    __publicField2(this, "initialSelectedShapes");
    __publicField2(this, "erasableShapes");
    __publicField2(this, "prevPoint");
    __publicField2(this, "prevEraseShapesSize", 0);
    __publicField2(this, "interval");
    __publicField2(this, "timestamp1", 0);
    __publicField2(this, "timestamp2", 0);
    __publicField2(this, "prevErasePoint", []);
    __publicField2(this, "loop", () => {
      const now2 = Date.now();
      const elapsed1 = now2 - this.timestamp1;
      const elapsed2 = now2 - this.timestamp2;
      const { eraseLine } = this.app.appState;
      let next = [...eraseLine];
      let didUpdate = false;
      if (elapsed1 > 16 && this.prevErasePoint !== this.prevPoint) {
        didUpdate = true;
        next = [...eraseLine, this.prevPoint];
        this.prevErasePoint = this.prevPoint;
      }
      if (elapsed2 > 32) {
        if (next.length > 1) {
          didUpdate = true;
          next.splice(0, Math.ceil(next.length * 0.1));
          this.timestamp2 = now2;
        }
      }
      if (didUpdate) {
        this.app.patchState({
          appState: {
            eraseLine: next
          }
        }, "eraseline");
      }
      this.interval = requestAnimationFrame(this.loop);
    });
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      const { page: page7, shiftKey, originPoint, currentPoint, zoom } = this.app;
      if (shiftKey) {
        if (!this.isLocked && e.dist(originPoint, currentPoint) > 4 / zoom) {
          if (!this.lockedDirection) {
            const delta = e.sub(currentPoint, originPoint);
            this.lockedDirection = delta[0] > delta[1] ? "horizontal" : "vertical";
          }
          this.isLocked = true;
        }
      } else if (this.isLocked) {
        this.isLocked = false;
      }
      if (this.isLocked) {
        if (this.lockedDirection === "vertical") {
          currentPoint[0] = originPoint[0];
        } else {
          currentPoint[1] = originPoint[1];
        }
      }
      const newPoint = e.toFixed(e.add(originPoint, e.sub(currentPoint, originPoint)));
      const deletedShapeIds = /* @__PURE__ */ new Set([]);
      this.erasableShapes.forEach((shape) => {
        if (this.erasedShapes.has(shape))
          return;
        if (this.app.getShapeUtil(shape).hitTestLineSegment(shape, this.prevPoint, newPoint)) {
          this.erasedShapes.add(shape);
          deletedShapeIds.add(shape.id);
          if (shape.children !== void 0) {
            for (const childId of shape.children) {
              this.erasedShapes.add(this.app.getShape(childId));
              deletedShapeIds.add(childId);
            }
          }
        }
      });
      Object.values(page7.bindings).forEach((binding) => {
        for (const id of [binding.toId, binding.fromId]) {
          if (deletedShapeIds.has(id)) {
            this.erasedBindings.add(binding);
          }
        }
      });
      this.erasedShapes.forEach((shape) => {
        if (!this.app.getShape(shape.id)) {
          this.erasedShapes.delete(shape);
          this.erasableShapes.delete(shape);
          deletedShapeIds.delete(shape.id);
        }
      });
      const erasedShapes = Array.from(this.erasedShapes.values());
      this.prevPoint = newPoint;
      if (erasedShapes.length === this.prevEraseShapesSize) {
        return;
      }
      this.prevEraseShapesSize = erasedShapes.length;
      return {
        document: {
          pages: {
            [page7.id]: {
              shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, { isGhost: true }]))
            }
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const { page: page7 } = this.app;
      cancelAnimationFrame(this.interval);
      this.erasedShapes.forEach((shape) => {
        if (!this.app.getShape(shape.id)) {
          this.erasedShapes.delete(shape);
          this.erasableShapes.delete(shape);
        }
      });
      const erasedShapes = Array.from(this.erasedShapes.values());
      return {
        document: {
          pages: {
            [page7.id]: {
              shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, { isGhost: false }]))
            }
          },
          pageStates: {
            [page7.id]: {
              selectedIds: this.initialSelectedShapes.map((shape) => shape.id)
            }
          }
        },
        appState: {
          eraseLine: []
        }
      };
    });
    __publicField2(this, "complete", () => {
      const { page: page7 } = this.app;
      cancelAnimationFrame(this.interval);
      this.erasedShapes.forEach((shape) => {
        if (!this.app.getShape(shape.id)) {
          this.erasedShapes.delete(shape);
          this.erasableShapes.delete(shape);
        }
      });
      this.erasedBindings.forEach((binding) => {
        if (!this.app.getBinding(binding.id)) {
          this.erasedBindings.delete(binding);
        }
      });
      const erasedShapes = Array.from(this.erasedShapes.values());
      const erasedBindings = Array.from(this.erasedBindings.values());
      const erasedShapeIds = erasedShapes.map((shape) => shape.id);
      const erasedBindingIds = erasedBindings.map((binding) => binding.id);
      const before = {
        shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, shape])),
        bindings: Object.fromEntries(erasedBindings.map((binding) => [binding.id, binding]))
      };
      const after = {
        shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, void 0])),
        bindings: Object.fromEntries(erasedBindings.map((binding) => [binding.id, void 0]))
      };
      this.app.shapes.forEach((shape) => {
        if (shape.handles && !after.shapes[shape.id]) {
          Object.values(shape.handles).forEach((handle) => {
            var _a3, _b;
            if (handle.bindingId && erasedBindingIds.includes(handle.bindingId)) {
              before.shapes[shape.id] = __spreadProps4(__spreadValues4({}, before.shapes[shape.id]), {
                handles: __spreadProps4(__spreadValues4({}, (_a3 = before.shapes[shape.id]) == null ? void 0 : _a3.handles), {
                  [handle.id]: handle
                })
              });
              if (!erasedShapeIds.includes(shape.id)) {
                after.shapes[shape.id] = __spreadProps4(__spreadValues4({}, after.shapes[shape.id]), {
                  handles: __spreadProps4(__spreadValues4({}, (_b = after.shapes[shape.id]) == null ? void 0 : _b.handles), {
                    [handle.id]: __spreadProps4(__spreadValues4({}, handle), {
                      bindingId: void 0
                    })
                  })
                });
              }
            }
          });
        }
      });
      return {
        id: "erase",
        before: {
          document: {
            pages: {
              [page7.id]: before
            },
            pageStates: {
              [page7.id]: {
                selectedIds: this.initialSelectedShapes.filter((shape) => !!this.app.getShape(shape.id)).map((shape) => shape.id)
              }
            }
          },
          appState: {
            eraseLine: []
          }
        },
        after: {
          document: {
            pages: {
              [page7.id]: after
            },
            pageStates: {
              [page7.id]: {
                selectedIds: this.initialSelectedShapes.filter((shape) => !!this.app.getShape(shape.id)).filter((shape) => !erasedShapeIds.includes(shape.id)).map((shape) => shape.id)
              }
            }
          },
          appState: {
            eraseLine: []
          }
        }
      };
    });
    this.prevPoint = [...app.originPoint];
    this.initialSelectedShapes = this.app.selectedIds.map((id) => this.app.getShape(id));
    this.erasableShapes = new Set(this.app.shapes.filter((shape) => !shape.isLocked));
    this.interval = this.loop();
  }
};
var GridSession = class extends BaseSession {
  constructor(app, id) {
    super(app);
    __publicField2(this, "type", "grid");
    __publicField2(this, "performanceMode");
    __publicField2(this, "status", "translating");
    __publicField2(this, "shape");
    __publicField2(this, "bounds");
    __publicField2(this, "initialSelectedIds");
    __publicField2(this, "initialSiblings");
    __publicField2(this, "grid", {});
    __publicField2(this, "columns", 1);
    __publicField2(this, "rows", 1);
    __publicField2(this, "isCopying", false);
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => {
      const { currentPageId, altKey, shiftKey, currentPoint } = this.app;
      const nextShapes = {};
      const nextPageState = {};
      const center = Utils.getBoundsCenter(this.bounds);
      const offset = e.sub(currentPoint, center);
      if (shiftKey) {
        if (Math.abs(offset[0]) < Math.abs(offset[1])) {
          offset[0] = 0;
        } else {
          offset[1] = 0;
        }
      }
      const gapX = this.bounds.width + 32;
      const gapY = this.bounds.height + 32;
      const columns = Math.ceil(offset[0] / gapX);
      const rows = Math.ceil(offset[1] / gapY);
      const minX = Math.min(columns, 0);
      const minY = Math.min(rows, 0);
      const maxX = Math.max(columns, 1);
      const maxY = Math.max(rows, 1);
      const inGrid = /* @__PURE__ */ new Set();
      const isCopying = altKey;
      if (isCopying !== this.isCopying) {
        Object.values(this.grid).filter((id2) => id2 !== this.shape.id).forEach((id2) => nextShapes[id2] = void 0);
        this.grid = { "0_0": this.shape.id };
        this.isCopying = isCopying;
      }
      for (let x7 = minX; x7 < maxX; x7++) {
        for (let y4 = minY; y4 < maxY; y4++) {
          const position = `${x7}_${y4}`;
          inGrid.add(position);
          if (this.grid[position])
            continue;
          if (x7 === 0 && y4 === 0)
            continue;
          const clone = this.getClone(e.add(this.shape.point, [x7 * gapX, y4 * gapY]), isCopying);
          nextShapes[clone.id] = clone;
          this.grid[position] = clone.id;
        }
      }
      Object.entries(this.grid).forEach(([position, id2]) => {
        if (!inGrid.has(position)) {
          nextShapes[id2] = void 0;
          delete this.grid[position];
        }
      });
      if (Object.values(nextShapes).length === 0)
        return;
      if (this.initialSiblings) {
        nextShapes[this.shape.parentId] = {
          children: [...this.initialSiblings, ...Object.values(this.grid)]
        };
      }
      return {
        document: {
          pages: {
            [currentPageId]: {
              shapes: nextShapes
            }
          },
          pageStates: {
            [currentPageId]: nextPageState
          }
        }
      };
    });
    __publicField2(this, "cancel", () => {
      const { currentPageId } = this.app;
      const nextShapes = {};
      Object.values(this.grid).forEach((id2) => {
        nextShapes[id2] = void 0;
      });
      nextShapes[this.shape.id] = __spreadProps4(__spreadValues4({}, nextShapes[this.shape.id]), { point: this.shape.point });
      if (this.initialSiblings) {
        nextShapes[this.shape.parentId] = {
          children: [...this.initialSiblings, this.shape.id]
        };
      }
      return {
        document: {
          pages: {
            [currentPageId]: {
              shapes: nextShapes
            }
          },
          pageStates: {
            [currentPageId]: {
              selectedIds: [this.shape.id]
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const { currentPageId } = this.app;
      const beforeShapes = {};
      const afterShapes = {};
      const afterSelectedIds = [];
      Object.values(this.grid).forEach((id2) => {
        beforeShapes[id2] = void 0;
        afterShapes[id2] = this.app.getShape(id2);
        afterSelectedIds.push(id2);
      });
      beforeShapes[this.shape.id] = this.shape;
      if (this.initialSiblings) {
        beforeShapes[this.shape.parentId] = {
          children: [...this.initialSiblings, this.shape.id]
        };
        afterShapes[this.shape.parentId] = {
          children: [...this.initialSiblings, ...Object.values(this.grid)]
        };
      }
      if (afterSelectedIds.length === 1)
        return;
      return {
        id: "grid",
        before: {
          document: {
            pages: {
              [currentPageId]: {
                shapes: beforeShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: [],
                hoveredId: void 0
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [currentPageId]: {
                shapes: afterShapes
              }
            },
            pageStates: {
              [currentPageId]: {
                selectedIds: afterSelectedIds,
                hoveredId: void 0
              }
            }
          }
        }
      };
    });
    __publicField2(this, "getClone", (point, copy21) => {
      const clone = __spreadProps4(__spreadValues4({}, this.shape), {
        id: Utils.uniqueId(),
        point
      });
      if (!copy21) {
        if (clone.type === "sticky") {
          clone.text = "";
        }
      }
      return clone;
    });
    var _a3;
    this.shape = this.app.getShape(id);
    this.grid["0_0"] = this.shape.id;
    this.bounds = this.app.getShapeBounds(id);
    this.initialSelectedIds = [...this.app.selectedIds];
    if (this.shape.parentId !== this.app.currentPageId) {
      this.initialSiblings = (_a3 = this.app.getShape(this.shape.parentId).children) == null ? void 0 : _a3.filter((id2) => id2 !== this.shape.id);
    }
  }
};
var EditSession = class extends BaseSession {
  constructor(app, id, isCreating) {
    super(app);
    __publicField2(this, "type", "edit");
    __publicField2(this, "performanceMode");
    __publicField2(this, "initialShape");
    __publicField2(this, "initialSelectedIds");
    __publicField2(this, "currentPageId");
    __publicField2(this, "isCreating");
    __publicField2(this, "start", () => void 0);
    __publicField2(this, "update", () => void 0);
    __publicField2(this, "cancel", () => {
      return {
        document: {
          pages: {
            [this.currentPageId]: {
              shapes: {
                [this.initialShape.id]: this.isCreating ? void 0 : this.initialShape
              }
            }
          },
          pageStates: {
            [this.currentPageId]: {
              selectedIds: this.isCreating ? [] : this.initialSelectedIds,
              editingId: void 0
            }
          }
        }
      };
    });
    __publicField2(this, "complete", () => {
      const shape = this.app.getShape(this.initialShape.id);
      return {
        id: "edit",
        before: {
          document: {
            pages: {
              [this.currentPageId]: {
                shapes: {
                  [this.initialShape.id]: this.isCreating ? void 0 : this.initialShape
                }
              }
            },
            pageStates: {
              [this.currentPageId]: {
                selectedIds: this.isCreating ? [] : this.initialSelectedIds,
                editingId: void 0
              }
            }
          }
        },
        after: {
          document: {
            pages: {
              [this.currentPageId]: {
                shapes: {
                  [this.initialShape.id]: shape
                }
              }
            },
            pageStates: {
              [this.currentPageId]: {
                selectedIds: [shape.id],
                editingId: void 0
              }
            }
          }
        }
      };
    });
    this.initialShape = app.getShape(id, app.currentPageId);
    this.currentPageId = app.currentPageId;
    this.isCreating = isCreating;
    this.initialSelectedIds = [...app.selectedIds];
  }
};
var sessions = {
  ["arrow"]: ArrowSession,
  ["brush"]: BrushSession,
  ["draw"]: DrawSession,
  ["erase"]: EraseSession,
  ["handle"]: HandleSession,
  ["rotate"]: RotateSession,
  ["transform"]: TransformSession,
  ["transformSingle"]: TransformSingleSession,
  ["translate"]: TranslateSession,
  ["grid"]: GridSession,
  ["edit"]: EditSession
};
var getSession = (type) => {
  return sessions[type];
};
var BaseTool = class extends TDEventHandler {
  constructor(app) {
    super();
    this.app = app;
    __publicField2(this, "type", "select");
    __publicField2(this, "previous");
    __publicField2(this, "status", "idle");
    __publicField2(this, "setStatus", (status) => {
      this.status = status;
      this.app.setStatus(this.status);
    });
    __publicField2(this, "onEnter", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "onExit", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "onCancel", () => {
      if (this.status === "idle") {
        this.app.selectTool("select");
      } else {
        this.setStatus("idle");
      }
      this.app.cancelSession();
    });
    __publicField2(this, "getNextChildIndex", () => {
      const {
        shapes,
        appState: { currentPageId }
      } = this.app;
      return shapes.length === 0 ? 1 : shapes.filter((shape) => shape.parentId === currentPageId).sort((a6, b7) => b7.childIndex - a6.childIndex)[0].childIndex + 1;
    });
    __publicField2(this, "onPinchStart", () => {
      this.app.cancelSession();
      this.setStatus("pinching");
    });
    __publicField2(this, "onPinchEnd", () => {
      if (Utils.isMobileSafari()) {
        this.app.undoSelect();
      }
      this.setStatus("idle");
    });
    __publicField2(this, "onPinch", (info, e13) => {
      var _a3;
      if (this.status !== "pinching")
        return;
      if (isNaN(info.delta[0]) || isNaN(info.delta[1]))
        return;
      this.app.pinchZoom(info.point, info.delta, info.delta[2]);
      (_a3 = this.onPointerMove) == null ? void 0 : _a3.call(this, info, e13);
    });
    __publicField2(this, "onKeyDown", (key) => {
      if (key === "Escape") {
        this.onCancel();
        return;
      }
      if (key === "Meta" || key === "Control" || key === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    __publicField2(this, "onKeyUp", (key) => {
      if (key === "Meta" || key === "Control" || key === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    __publicField2(this, "onPointerMove", () => {
      if (this.status === "creating") {
        this.app.updateSession();
      }
    });
    __publicField2(this, "onPointerUp", () => {
      if (this.status === "creating") {
        this.app.completeSession();
        const { isToolLocked } = this.app.appState;
        if (!isToolLocked) {
          this.app.selectTool("select");
        }
      }
      this.setStatus("idle");
    });
  }
};
var SelectTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "select");
    __publicField2(this, "pointedId");
    __publicField2(this, "selectedGroupId");
    __publicField2(this, "pointedHandleId");
    __publicField2(this, "pointedBoundsHandle");
    __publicField2(this, "pointedLinkHandleId");
    __publicField2(this, "onEnter", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "onExit", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "clonePaint", (point) => {
      if (this.app.selectedIds.length === 0)
        return;
      const shapes = this.app.selectedIds.map((id) => this.app.getShape(id));
      const bounds = Utils.expandBounds(Utils.getCommonBounds(shapes.map(TLDR.getBounds)), 16);
      const center = Utils.getBoundsCenter(bounds);
      const size = [bounds.width, bounds.height];
      const gridPoint = [
        center[0] + size[0] * Math.floor((point[0] + size[0] / 2 - center[0]) / size[0]),
        center[1] + size[1] * Math.floor((point[1] + size[1] / 2 - center[1]) / size[1])
      ];
      const centeredBounds = Utils.centerBounds(bounds, gridPoint);
      const hit = this.app.shapes.some((shape) => TLDR.getShapeUtil(shape).hitTestBounds(shape, centeredBounds));
      if (!hit) {
        this.app.duplicate(this.app.selectedIds, gridPoint);
      }
    });
    __publicField2(this, "getShapeClone", (id, side) => {
      const shape = this.app.getShape(id);
      const utils = TLDR.getShapeUtil(shape);
      if (utils.canClone) {
        const bounds = utils.getBounds(shape);
        const center = utils.getCenter(shape);
        let point = {
          top: [bounds.minX, bounds.minY - (bounds.height + CLONING_DISTANCE)],
          right: [bounds.maxX + CLONING_DISTANCE, bounds.minY],
          bottom: [bounds.minX, bounds.maxY + CLONING_DISTANCE],
          left: [bounds.minX - (bounds.width + CLONING_DISTANCE), bounds.minY],
          topLeft: [
            bounds.minX - (bounds.width + CLONING_DISTANCE),
            bounds.minY - (bounds.height + CLONING_DISTANCE)
          ],
          topRight: [
            bounds.maxX + CLONING_DISTANCE,
            bounds.minY - (bounds.height + CLONING_DISTANCE)
          ],
          bottomLeft: [
            bounds.minX - (bounds.width + CLONING_DISTANCE),
            bounds.maxY + CLONING_DISTANCE
          ],
          bottomRight: [bounds.maxX + CLONING_DISTANCE, bounds.maxY + CLONING_DISTANCE]
        }[side];
        if (shape.rotation !== 0) {
          const newCenter = p.add(point, [bounds.width / 2, bounds.height / 2]);
          const rotatedCenter = p.rotWith(newCenter, center, shape.rotation || 0);
          point = p.sub(rotatedCenter, [bounds.width / 2, bounds.height / 2]);
        }
        const id2 = Utils.uniqueId();
        const clone = __spreadProps4(__spreadValues4({}, shape), {
          id: id2,
          point
        });
        if (clone.type === "sticky") {
          clone.text = "";
        }
        return clone;
      }
      return;
    });
    __publicField2(this, "onCancel", () => {
      if (this.app.session) {
        this.app.cancelSession();
      } else {
        this.selectNone();
      }
      this.setStatus("idle");
    });
    __publicField2(this, "onKeyDown", (key, info, e13) => {
      switch (key) {
        case "Escape": {
          this.onCancel();
          break;
        }
        case "Tab": {
          if (this.app.readOnly)
            return;
          if (!this.app.pageState.editingId && this.status === "idle" && this.app.selectedIds.length === 1) {
            const [selectedId] = this.app.selectedIds;
            const clonedShape = this.getShapeClone(selectedId, "right");
            if (clonedShape) {
              this.app.createShapes(clonedShape);
              this.setStatus("idle");
              if (clonedShape.type === "sticky") {
                this.app.select(clonedShape.id);
                this.app.setEditingId(clonedShape.id);
              }
            }
          }
          break;
        }
        case "Meta":
        case "Control":
        case "Alt": {
          this.app.updateSession();
          break;
        }
        case "Enter": {
          if (this.app.readOnly)
            return;
          const { pageState } = this.app;
          if (pageState.selectedIds.length === 1 && !pageState.editingId) {
            this.app.setEditingId(pageState.selectedIds[0]);
            e13.preventDefault();
          }
        }
      }
    });
    __publicField2(this, "onKeyUp", (key, info) => {
      if (this.status === "clonePainting" && !(info.altKey && info.shiftKey)) {
        this.setStatus("idle");
        return;
      }
      if (key === "Meta" || key === "Control" || key === "Alt") {
        this.app.updateSession();
        return;
      }
    });
    __publicField2(this, "onPointerMove", () => {
      const { originPoint, currentPoint } = this.app;
      if (this.app.readOnly && this.app.isPointing) {
        if (this.app.session) {
          this.app.updateSession();
        } else {
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            this.app.startSession("brush");
            this.setStatus("brushing");
          }
        }
        return;
      }
      switch (this.status) {
        case "pointingBoundsHandle": {
          if (!this.pointedBoundsHandle)
            throw Error("No pointed bounds handle");
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            if (this.pointedBoundsHandle === "rotate") {
              this.setStatus("rotating");
              this.app.startSession("rotate");
            } else if (this.pointedBoundsHandle === "center" || this.pointedBoundsHandle === "left" || this.pointedBoundsHandle === "right") {
              this.setStatus("translating");
              this.app.startSession("translate", false, this.pointedBoundsHandle);
            } else {
              this.setStatus("transforming");
              const idsToTransform = this.app.selectedIds.flatMap((id) => TLDR.getDocumentBranch(this.app.state, id, this.app.currentPageId));
              if (idsToTransform.length === 1) {
                this.app.startSession("transformSingle", idsToTransform[0], this.pointedBoundsHandle);
              } else {
                this.app.startSession("transform", this.pointedBoundsHandle);
              }
            }
            this.app.updateSession();
          }
          break;
        }
        case "pointingCanvas": {
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            this.app.startSession("brush");
            this.setStatus("brushing");
          }
          break;
        }
        case "pointingClone": {
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            this.setStatus("translatingClone");
            this.app.startSession("translate");
            this.app.updateSession();
          }
          break;
        }
        case "pointingBounds": {
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            this.setStatus("translating");
            this.app.startSession("translate");
            this.app.updateSession();
          }
          break;
        }
        case "pointingHandle": {
          if (!this.pointedHandleId)
            throw Error("No pointed handle");
          if (p.dist(originPoint, currentPoint) > DEAD_ZONE) {
            this.setStatus("translatingHandle");
            const selectedShape = this.app.getShape(this.app.selectedIds[0]);
            if (selectedShape) {
              if (this.pointedHandleId === "bend") {
                this.app.startSession("handle", selectedShape.id, this.pointedHandleId);
                this.app.updateSession();
              } else {
                this.app.startSession("arrow", selectedShape.id, this.pointedHandleId, false);
                this.app.updateSession();
              }
            }
          }
          break;
        }
        case "clonePainting": {
          this.clonePaint(currentPoint);
          break;
        }
        default: {
          if (this.app.session) {
            this.app.updateSession();
            break;
          }
        }
      }
    });
    __publicField2(this, "onPointerDown", (info, e13) => {
      if (info.target === "canvas" && this.status === "idle") {
        const { currentPoint } = this.app;
        if (info.spaceKey && e13.buttons === 1)
          return;
        if (this.status === "idle" && info.altKey && info.shiftKey) {
          this.setStatus("clonePainting");
          this.clonePaint(currentPoint);
          return;
        }
        if (!info.shiftKey) {
          this.app.onShapeBlur();
          if (info.altKey && this.app.selectedIds.length > 0) {
            this.app.duplicate(this.app.selectedIds, currentPoint);
            return;
          }
          this.selectNone();
        }
        this.setStatus("pointingCanvas");
      }
    });
    __publicField2(this, "onPointerUp", (info) => {
      var _a3;
      if (this.status === "translatingClone" || this.status === "pointingClone") {
        if (this.pointedId) {
          this.app.completeSession();
          this.app.setEditingId(this.pointedId);
        }
        this.setStatus("idle");
        this.pointedId = void 0;
        return;
      }
      if (this.status === "pointingBounds") {
        if (info.target === "bounds") {
          this.selectNone();
        } else if (this.app.isSelected(info.target)) {
          if (info.shiftKey) {
            if (this.pointedId !== info.target) {
              this.deselect(info.target);
            }
          } else {
            if (this.pointedId !== info.target && this.app.selectedIds.length > 1) {
              this.select(info.target);
            }
          }
        } else if (this.pointedId === info.target) {
          if (this.app.getShape(info.target).isLocked)
            return;
          if (info.shiftKey) {
            this.pushSelect(info.target);
          } else {
            this.select(info.target);
          }
        }
      }
      this.setStatus("idle");
      this.pointedBoundsHandle = void 0;
      this.pointedHandleId = void 0;
      this.pointedId = void 0;
      if (((_a3 = this.app.session) == null ? void 0 : _a3.type) === "edit") {
        return;
      }
      this.app.completeSession();
    });
    __publicField2(this, "onDoubleClickCanvas", () => {
      if (this.app.readOnly)
        return;
    });
    __publicField2(this, "onPointShape", (info, e13) => {
      if (info.spaceKey && e13.buttons === 1)
        return;
      if (this.app.getShape(info.target).isLocked)
        return;
      const { editingId, hoveredId } = this.app.pageState;
      if (editingId && info.target !== editingId) {
        this.app.onShapeBlur();
      }
      if ((this.status === "idle" || this.status === "pointingBounds") && info.metaKey && info.shiftKey && hoveredId) {
        this.pointedId = hoveredId;
        if (this.app.isSelected(hoveredId)) {
          this.deselect(hoveredId);
        } else {
          this.pushSelect(hoveredId);
          this.setStatus("pointingBounds");
        }
        return;
      }
      if (this.status === "pointingBounds") {
        const { parentId } = this.app.getShape(info.target);
        this.pointedId = parentId === this.app.currentPageId ? info.target : parentId;
        return;
      }
      if (this.status === "idle") {
        this.setStatus("pointingBounds");
        if (info.metaKey) {
          if (!info.shiftKey) {
            this.selectNone();
          }
          this.app.startSession("brush");
          this.setStatus("brushing");
          return;
        }
        let shapeIdToSelect;
        const { parentId } = this.app.getShape(info.target);
        if (parentId === this.app.currentPageId) {
          shapeIdToSelect = info.target;
          this.selectedGroupId = void 0;
        } else {
          if (parentId === this.selectedGroupId) {
            shapeIdToSelect = info.target;
          } else {
            shapeIdToSelect = parentId;
            this.selectedGroupId = void 0;
          }
        }
        if (!this.app.isSelected(shapeIdToSelect)) {
          this.pointedId = shapeIdToSelect;
          if (info.shiftKey) {
            this.pushSelect(shapeIdToSelect);
          } else {
            this.select(shapeIdToSelect);
          }
        }
      }
    });
    __publicField2(this, "onDoubleClickShape", (info) => {
      if (this.app.readOnly)
        return;
      const shape = this.app.getShape(info.target);
      if (shape.isLocked) {
        this.app.select(info.target);
        return;
      }
      if (TLDR.getShapeUtil(shape.type).canEdit && (shape.parentId === this.app.currentPageId || shape.parentId === this.selectedGroupId)) {
        this.app.setEditingId(info.target);
      }
      if (shape.parentId !== this.app.currentPageId) {
        this.selectedGroupId = shape.parentId;
      }
      this.app.select(info.target);
    });
    __publicField2(this, "onRightPointShape", (info) => {
      if (!this.app.isSelected(info.target)) {
        this.app.select(info.target);
      }
    });
    __publicField2(this, "onHoverShape", (info) => {
      this.app.setHoveredId(info.target);
    });
    __publicField2(this, "onUnhoverShape", (info) => {
      const { currentPageId: oldCurrentPageId } = this.app;
      requestAnimationFrame(() => {
        if (oldCurrentPageId === this.app.currentPageId && this.app.pageState.hoveredId === info.target) {
          this.app.setHoveredId(void 0);
        }
      });
    });
    __publicField2(this, "onPointBounds", (info) => {
      if (info.metaKey) {
        if (!info.shiftKey) {
          this.selectNone();
        }
        this.app.startSession("brush");
        this.setStatus("brushing");
        return;
      }
      this.setStatus("pointingBounds");
    });
    __publicField2(this, "onRightPointBounds", (info, e13) => {
      e13.stopPropagation();
    });
    __publicField2(this, "onReleaseBounds", () => {
      if (this.status === "translating" || this.status === "brushing") {
        this.app.completeSession();
      }
      this.setStatus("idle");
    });
    __publicField2(this, "onPointBoundsHandle", (info) => {
      this.pointedBoundsHandle = info.target;
      this.setStatus("pointingBoundsHandle");
    });
    __publicField2(this, "onDoubleClickBoundsHandle", (info) => {
      switch (info.target) {
        case "center":
        case "left":
        case "right": {
          this.app.select(...TLDR.getLinkedShapeIds(this.app.state, this.app.currentPageId, info.target, info.shiftKey));
          break;
        }
        default: {
          if (this.app.selectedIds.length === 1) {
            this.app.resetBounds(this.app.selectedIds);
            const shape = this.app.getShape(this.app.selectedIds[0]);
            if ("label" in shape) {
              this.app.setEditingId(shape.id);
            }
          }
        }
      }
    });
    __publicField2(this, "onReleaseBoundsHandle", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "onPointHandle", (info) => {
      this.pointedHandleId = info.target;
      this.setStatus("pointingHandle");
    });
    __publicField2(this, "onDoubleClickHandle", (info) => {
      if (info.target === "bend") {
        const { selectedIds } = this.app;
        if (selectedIds.length !== 1)
          return;
        const shape = this.app.getShape(selectedIds[0]);
        if (TLDR.getShapeUtil(shape.type).canEdit && (shape.parentId === this.app.currentPageId || shape.parentId === this.selectedGroupId)) {
          this.app.setEditingId(shape.id);
        }
        return;
      }
      this.app.toggleDecoration(info.target);
    });
    __publicField2(this, "onReleaseHandle", () => {
      this.setStatus("idle");
    });
    __publicField2(this, "onShapeClone", (info) => {
      const selectedShapeId = this.app.selectedIds[0];
      const clonedShape = this.getShapeClone(selectedShapeId, info.target);
      if (info.target === "left" || info.target === "right" || info.target === "top" || info.target === "bottom") {
        if (clonedShape) {
          this.app.createShapes(clonedShape);
          this.pointedId = clonedShape.id;
          this.setStatus("pointingClone");
        }
      } else {
        this.setStatus("gridCloning");
        this.app.startSession("grid", selectedShapeId);
      }
    });
  }
  deselect(id) {
    this.app.select(...this.app.selectedIds.filter((oid) => oid !== id));
  }
  select(id) {
    this.app.select(id);
  }
  pushSelect(id) {
    const shape = this.app.getShape(id);
    this.app.select(...this.app.selectedIds.filter((oid) => oid !== shape.parentId), id);
  }
  selectNone() {
    this.app.selectNone();
  }
};
var EraseTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "erase");
    __publicField2(this, "status", "idle");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status !== "idle")
        return;
      this.setStatus("pointing");
    });
    __publicField2(this, "onPointerMove", (info) => {
      if (this.app.readOnly)
        return;
      switch (this.status) {
        case "pointing": {
          if (p.dist(info.origin, info.point) > DEAD_ZONE) {
            this.app.startSession("erase");
            this.app.updateSession();
            this.setStatus("erasing");
          }
          break;
        }
        case "erasing": {
          this.app.updateSession();
        }
      }
    });
    __publicField2(this, "onPointerUp", () => {
      if (this.app.readOnly)
        return;
      switch (this.status) {
        case "pointing": {
          const shapeIdsAtPoint = this.app.shapes.filter((shape) => !shape.isLocked).filter((shape) => this.app.getShapeUtil(shape).hitTestPoint(shape, this.app.currentPoint)).flatMap((shape) => shape.children ? [shape.id, ...shape.children] : shape.id);
          this.app.delete(shapeIdsAtPoint);
          break;
        }
        case "erasing": {
          this.app.completeSession();
        }
      }
      this.setStatus("idle");
    });
    __publicField2(this, "onCancel", () => {
      if (this.status === "idle") {
        if (this.previous) {
          this.app.selectTool(this.previous);
        } else {
          this.app.selectTool("select");
        }
      } else {
        this.setStatus("idle");
      }
      this.app.cancelSession();
    });
  }
};
var TextTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "text");
    __publicField2(this, "stopEditingShape", () => {
      this.setStatus("idle");
      if (!this.app.appState.isToolLocked) {
        this.app.selectTool("select");
      }
    });
    __publicField2(this, "onKeyUp", () => {
    });
    __publicField2(this, "onKeyDown", () => {
    });
    __publicField2(this, "onPointerDown", () => {
      if (this.status === "creating") {
        this.stopEditingShape();
        return;
      }
      if (this.status === "idle") {
        const {
          currentPoint,
          currentGrid,
          settings: { showGrid }
        } = this.app;
        this.app.createTextShapeAtPoint(showGrid ? p.snap(currentPoint, currentGrid) : currentPoint, void 0, true);
        this.setStatus("creating");
        return;
      }
    });
    __publicField2(this, "onPointerUp", () => {
    });
    __publicField2(this, "onPointShape", (info) => {
      if (this.app.readOnly)
        return;
      const shape = this.app.getShape(info.target);
      if (shape.type === "text") {
        this.setStatus("idle");
        this.app.setEditingId(shape.id);
      }
    });
    __publicField2(this, "onShapeBlur", () => {
      if (this.app.readOnly)
        return;
      this.stopEditingShape();
    });
  }
};
var DrawTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "draw");
    __publicField2(this, "lastShapeId");
    __publicField2(this, "onEnter", () => {
      this.lastShapeId = void 0;
    });
    __publicField2(this, "onCancel", () => {
      switch (this.status) {
        case "idle": {
          this.app.selectTool("select");
          break;
        }
        default: {
          this.setStatus("idle");
          break;
        }
      }
      this.app.cancelSession();
    });
    __publicField2(this, "onPointerDown", (info) => {
      if (this.status !== "idle")
        return;
      if (this.app.readOnly)
        return;
      const {
        currentPoint,
        appState: { currentPageId, currentStyle }
      } = this.app;
      const previous = this.lastShapeId && this.app.getShape(this.lastShapeId);
      if (info.shiftKey && previous) {
        this.app.startSession("draw", previous.id);
        this.setStatus("extending");
      } else {
        const childIndex = this.getNextChildIndex();
        const id = Utils.uniqueId();
        const newShape = Draw.create({
          id,
          parentId: currentPageId,
          childIndex,
          point: currentPoint,
          style: __spreadValues4({}, currentStyle)
        });
        this.lastShapeId = id;
        this.app.patchCreate([newShape]);
        this.app.startSession("draw", id);
        this.setStatus("creating");
      }
    });
    __publicField2(this, "onPointerMove", () => {
      if (this.app.readOnly)
        return;
      switch (this.status) {
        case "extending":
        case "creating": {
          this.app.updateSession();
        }
      }
    });
    __publicField2(this, "onPointerUp", () => {
      this.app.completeSession();
      this.setStatus("idle");
    });
  }
};
var EllipseTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "ellipse");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status !== "idle")
        return;
      const {
        currentPoint,
        currentGrid,
        settings: { showGrid },
        appState: { currentPageId, currentStyle }
      } = this.app;
      const childIndex = this.getNextChildIndex();
      const id = Utils.uniqueId();
      const newShape = Ellipse.create({
        id,
        parentId: currentPageId,
        childIndex,
        point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
        style: __spreadValues4({}, currentStyle)
      });
      this.app.patchCreate([newShape]);
      this.app.startSession("transformSingle", newShape.id, TLBoundsCorner.BottomRight, true);
      this.setStatus("creating");
    });
  }
};
var RectangleTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "rectangle");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status !== "idle")
        return;
      const {
        currentPoint,
        currentGrid,
        settings: { showGrid },
        appState: { currentPageId, currentStyle }
      } = this.app;
      const childIndex = this.getNextChildIndex();
      const id = Utils.uniqueId();
      const newShape = Rectangle.create({
        id,
        parentId: currentPageId,
        childIndex,
        point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
        style: __spreadValues4({}, currentStyle)
      });
      this.app.patchCreate([newShape]);
      this.app.startSession("transformSingle", newShape.id, TLBoundsCorner.BottomRight, true);
      this.setStatus("creating");
    });
  }
};
var TriangleTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "triangle");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status !== "idle")
        return;
      const {
        currentPoint,
        currentGrid,
        settings: { showGrid },
        appState: { currentPageId, currentStyle }
      } = this.app;
      const childIndex = this.getNextChildIndex();
      const id = Utils.uniqueId();
      const newShape = Triangle.create({
        id,
        parentId: currentPageId,
        childIndex,
        point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
        style: __spreadValues4({}, currentStyle)
      });
      this.app.patchCreate([newShape]);
      this.app.startSession("transformSingle", newShape.id, TLBoundsCorner.BottomRight, true);
      this.setStatus("creating");
    });
  }
};
var LineTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "line");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status !== "idle")
        return;
      const {
        currentPoint,
        currentGrid,
        settings: { showGrid },
        appState: { currentPageId, currentStyle }
      } = this.app;
      const childIndex = this.getNextChildIndex();
      const id = Utils.uniqueId();
      const newShape = Arrow6.create({
        id,
        parentId: currentPageId,
        childIndex,
        point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
        decorations: {
          start: void 0,
          end: void 0
        },
        style: __spreadValues4({}, currentStyle)
      });
      this.app.patchCreate([newShape]);
      this.app.startSession("arrow", newShape.id, "end", true);
      this.setStatus("creating");
    });
  }
};
var ArrowTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "arrow");
    __publicField2(this, "onPointerDown", () => {
      if (this.status !== "idle")
        return;
      const {
        currentPoint,
        currentGrid,
        settings: { showGrid },
        appState: { currentPageId, currentStyle }
      } = this.app;
      const childIndex = this.getNextChildIndex();
      const id = Utils.uniqueId();
      const newShape = Arrow6.create({
        id,
        parentId: currentPageId,
        childIndex,
        point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
        style: __spreadValues4({}, currentStyle)
      });
      this.app.patchCreate([newShape]);
      this.app.startSession("arrow", newShape.id, "end", true);
      this.setStatus("creating");
    });
  }
};
var StickyTool = class extends BaseTool {
  constructor() {
    super(...arguments);
    __publicField2(this, "type", "sticky");
    __publicField2(this, "shapeId");
    __publicField2(this, "onPointerDown", () => {
      if (this.app.readOnly)
        return;
      if (this.status === "creating") {
        this.setStatus("idle");
        if (!this.app.appState.isToolLocked) {
          this.app.selectTool("select");
        }
        return;
      }
      if (this.status === "idle") {
        const {
          currentPoint,
          currentGrid,
          settings: { showGrid },
          appState: { currentPageId, currentStyle }
        } = this.app;
        const childIndex = this.getNextChildIndex();
        const id = Utils.uniqueId();
        this.shapeId = id;
        const newShape = Sticky.create({
          id,
          parentId: currentPageId,
          childIndex,
          point: showGrid ? p.snap(currentPoint, currentGrid) : currentPoint,
          style: __spreadValues4({}, currentStyle)
        });
        const bounds = Sticky.getBounds(newShape);
        newShape.point = p.sub(newShape.point, [bounds.width / 2, bounds.height / 2]);
        this.app.patchCreate([newShape]);
        this.app.startSession("translate");
        this.setStatus("creating");
      }
    });
    __publicField2(this, "onPointerUp", () => {
      if (this.app.readOnly)
        return;
      if (this.status === "creating") {
        this.setStatus("idle");
        this.app.completeSession();
        this.app.selectTool("select");
        this.app.setEditingId(this.shapeId);
      }
    });
  }
};
var StateManager = class {
  constructor(initialState, id, version, update) {
    __publicField2(this, "_idbId");
    __publicField2(this, "initialState");
    __publicField2(this, "store");
    __publicField2(this, "pointer", -1);
    __publicField2(this, "_state");
    __publicField2(this, "_status", "loading");
    __publicField2(this, "stack", []);
    __publicField2(this, "_snapshot");
    __publicField2(this, "useStore");
    __publicField2(this, "ready");
    __publicField2(this, "isPaused", false);
    __publicField2(this, "persist", (patch, id2) => {
      if (this._status !== "ready")
        return;
      if (this.onPersist) {
        this.onPersist(this._state, patch, id2);
      }
      if (this._idbId) {
        return set4(this._idbId, this._state).catch((e13) => console.error(e13));
      }
    });
    __publicField2(this, "applyPatch", (patch, id2) => {
      const prev = this._state;
      const next = Utils.deepMerge(this._state, patch);
      const final = this.cleanup(next, prev, patch, id2);
      if (this.onStateWillChange) {
        this.onStateWillChange(final, id2);
      }
      this._state = final;
      this.store.setState(this._state, true);
      if (this.onStateDidChange) {
        this.onStateDidChange(this._state, id2);
      }
      return this;
    });
    __publicField2(this, "migrate", (next) => {
      return next;
    });
    __publicField2(this, "cleanup", (nextState, _prevState, _patch, _id) => nextState);
    __publicField2(this, "onStateWillChange");
    __publicField2(this, "onStateDidChange");
    __publicField2(this, "patchState", (patch, id2) => {
      this.applyPatch(patch, id2);
      if (this.onPatch) {
        this.onPatch(this._state, patch, id2);
      }
      return this;
    });
    __publicField2(this, "replaceState", (state, id2) => {
      const final = this.cleanup(state, this._state, state, id2);
      if (this.onStateWillChange) {
        this.onStateWillChange(final, "replace");
      }
      this._state = final;
      this.store.setState(this._state, true);
      if (this.onStateDidChange) {
        this.onStateDidChange(this._state, "replace");
      }
      return this;
    });
    __publicField2(this, "setState", (command, id2 = command.id) => {
      if (this.pointer < this.stack.length - 1) {
        this.stack = this.stack.slice(0, this.pointer + 1);
      }
      this.stack.push(__spreadProps4(__spreadValues4({}, command), { id: id2 }));
      this.pointer = this.stack.length - 1;
      this.applyPatch(command.after, id2);
      if (this.onCommand)
        this.onCommand(this._state, command, id2);
      this.persist(command.after, id2);
      return this;
    });
    __publicField2(this, "onReady");
    __publicField2(this, "onPatch");
    __publicField2(this, "onCommand");
    __publicField2(this, "onPersist");
    __publicField2(this, "onReplace");
    __publicField2(this, "onReset");
    __publicField2(this, "onResetHistory");
    __publicField2(this, "onUndo");
    __publicField2(this, "onRedo");
    __publicField2(this, "reset", () => {
      if (this.onStateWillChange) {
        this.onStateWillChange(this.initialState, "reset");
      }
      this._state = this.initialState;
      this.store.setState(this._state, true);
      this.resetHistory();
      this.persist({}, "reset");
      if (this.onStateDidChange) {
        this.onStateDidChange(this._state, "reset");
      }
      if (this.onReset) {
        this.onReset(this._state);
      }
      return this;
    });
    __publicField2(this, "replaceHistory", (history, pointer = history.length - 1) => {
      this.stack = history;
      this.pointer = pointer;
      if (this.onReplace) {
        this.onReplace(this._state);
      }
      return this;
    });
    __publicField2(this, "resetHistory", () => {
      this.stack = [];
      this.pointer = -1;
      if (this.onResetHistory) {
        this.onResetHistory(this._state);
      }
      return this;
    });
    __publicField2(this, "undo", () => {
      if (!this.isPaused) {
        if (!this.canUndo)
          return this;
        const command = this.stack[this.pointer];
        this.pointer--;
        this.applyPatch(command.before, `undo`);
        this.persist(command.before, "undo");
      }
      if (this.onUndo)
        this.onUndo(this._state);
      return this;
    });
    __publicField2(this, "redo", () => {
      if (!this.isPaused) {
        if (!this.canRedo)
          return this;
        this.pointer++;
        const command = this.stack[this.pointer];
        this.applyPatch(command.after, "redo");
        this.persist(command.after, "undo");
      }
      if (this.onRedo)
        this.onRedo(this._state);
      return this;
    });
    __publicField2(this, "setSnapshot", () => {
      this._snapshot = __spreadValues4({}, this._state);
      return this;
    });
    __publicField2(this, "forceUpdate", () => {
      this.store.setState(this._state, true);
    });
    this._idbId = id;
    this._state = deepCopy(initialState);
    this._snapshot = deepCopy(initialState);
    this.initialState = deepCopy(initialState);
    this.store = createStore2(() => this._state);
    this.useStore = create2(this.store);
    this.ready = new Promise((resolve) => {
      let message = "none";
      if (this._idbId) {
        message = "restored";
        get3(this._idbId).then((saved) => __async2(this, null, function* () {
          if (saved) {
            let next = saved;
            if (version) {
              const savedVersion = yield get3(id + "_version");
              if (savedVersion && savedVersion < version) {
                next = update ? update(saved, initialState, savedVersion) : initialState;
                message = "migrated";
              }
            }
            yield set4(id + "_version", version || -1);
            const prevEmpty = this._state.appState.isEmptyCanvas;
            next = this.migrate(next);
            this._state = deepCopy(next);
            this._snapshot = deepCopy(next);
            this._state.appState.isEmptyCanvas = prevEmpty;
            this.store.setState(this._state, true);
          } else {
            yield set4(id + "_version", version || -1);
          }
          this._status = "ready";
          resolve(message);
        })).catch((e13) => console.error(e13));
      } else {
        this._status = "ready";
        resolve(message);
      }
    }).then((message) => {
      if (this.onReady)
        this.onReady(message);
      return message;
    });
  }
  pause() {
    this.isPaused = true;
  }
  resume() {
    this.isPaused = false;
  }
  get canUndo() {
    return this.pointer > -1;
  }
  get canRedo() {
    return this.pointer < this.stack.length - 1;
  }
  get state() {
    return this._state;
  }
  get status() {
    return this._status;
  }
  get snapshot() {
    return this._snapshot;
  }
};
var ID = "tldraw_clipboard";
function getClipboard() {
  return __async2(this, null, function* () {
    return get3(ID);
  });
}
function setClipboard(item) {
  return __async2(this, null, function* () {
    return set4(ID, item);
  });
}
var uuid = Utils.uniqueId();
var _TldrawApp = class extends StateManager {
  constructor(id, callbacks = {}) {
    super(_TldrawApp.defaultState, id, _TldrawApp.version, (prev, next, prevVersion) => {
      return migrate(__spreadProps4(__spreadValues4({}, next), {
        document: __spreadProps4(__spreadValues4(__spreadValues4({}, next.document), prev.document), { version: prevVersion })
      }), _TldrawApp.version);
    });
    __publicField2(this, "callbacks", {});
    __publicField2(this, "tools", {
      select: new SelectTool(this),
      erase: new EraseTool(this),
      ["text"]: new TextTool(this),
      ["draw"]: new DrawTool(this),
      ["ellipse"]: new EllipseTool(this),
      ["rectangle"]: new RectangleTool(this),
      ["triangle"]: new TriangleTool(this),
      ["line"]: new LineTool(this),
      ["arrow"]: new ArrowTool(this),
      ["sticky"]: new StickyTool(this)
    });
    __publicField2(this, "currentTool", this.tools.select);
    __publicField2(this, "session");
    __publicField2(this, "readOnly", false);
    __publicField2(this, "isDirty", false);
    __publicField2(this, "isCreating", false);
    __publicField2(this, "originPoint", [0, 0]);
    __publicField2(this, "currentPoint", [0, 0]);
    __publicField2(this, "previousPoint", [0, 0]);
    __publicField2(this, "shiftKey", false);
    __publicField2(this, "altKey", false);
    __publicField2(this, "metaKey", false);
    __publicField2(this, "ctrlKey", false);
    __publicField2(this, "spaceKey", false);
    __publicField2(this, "isPointing", false);
    __publicField2(this, "isForcePanning", false);
    __publicField2(this, "editingStartTime", -1);
    __publicField2(this, "fileSystemHandle", null);
    __publicField2(this, "viewport", Utils.getBoundsFromPoints([
      [0, 0],
      [100, 100]
    ]));
    __publicField2(this, "rendererBounds", Utils.getBoundsFromPoints([
      [0, 0],
      [100, 100]
    ]));
    __publicField2(this, "selectHistory", {
      stack: [[]],
      pointer: 0
    });
    __publicField2(this, "clipboard");
    __publicField2(this, "rotationInfo", {
      selectedIds: [],
      center: [0, 0]
    });
    __publicField2(this, "migrate", (state) => {
      return migrate(state, _TldrawApp.version);
    });
    __publicField2(this, "onReady", () => {
      var _a3, _b;
      this.loadDocument(this.document);
      loadFileHandle().then((fileHandle) => {
        this.fileSystemHandle = fileHandle;
      });
      try {
        this.patchState(__spreadProps4(__spreadValues4({}, migrate(this.state, _TldrawApp.version)), {
          appState: {
            status: "idle"
          }
        }));
      } catch (e13) {
        console.error("The data appears to be corrupted. Resetting!", e13);
        localStorage.setItem(this.document.id + "_corrupted", JSON.stringify(this.document));
        this.patchState(__spreadProps4(__spreadValues4({}, _TldrawApp.defaultState), {
          appState: __spreadProps4(__spreadValues4({}, _TldrawApp.defaultState.appState), {
            status: "idle"
          })
        }));
      }
      (_b = (_a3 = this.callbacks).onMount) == null ? void 0 : _b.call(_a3, this);
    });
    __publicField2(this, "cleanup", (state, prev) => {
      var _a3;
      const next = __spreadValues4({}, state);
      if (next.document !== prev.document) {
        Object.entries(next.document.pages).forEach(([pageId, page7]) => {
          if (page7 === void 0) {
            delete next.document.pages[pageId];
            delete next.document.pageStates[pageId];
            return;
          }
          const prevPage = prev.document.pages[pageId];
          const changedShapes = {};
          if (!prevPage || page7.shapes !== prevPage.shapes || page7.bindings !== prevPage.bindings) {
            page7.shapes = __spreadValues4({}, page7.shapes);
            page7.bindings = __spreadValues4({}, page7.bindings);
            const groupsToUpdate = /* @__PURE__ */ new Set();
            Object.entries(page7.shapes).forEach(([id2, shape]) => {
              var _a22;
              let parentId;
              if (!shape) {
                parentId = (_a22 = prevPage == null ? void 0 : prevPage.shapes[id2]) == null ? void 0 : _a22.parentId;
                delete page7.shapes[id2];
              } else {
                parentId = shape.parentId;
              }
              if (page7.id === next.appState.currentPageId) {
                if ((prevPage == null ? void 0 : prevPage.shapes[id2]) !== shape) {
                  changedShapes[id2] = shape;
                }
              }
              if (parentId && parentId !== pageId) {
                const group21 = page7.shapes[parentId];
                if (group21 !== void 0) {
                  groupsToUpdate.add(page7.shapes[parentId]);
                }
              }
            });
            Object.keys(page7.bindings).forEach((id2) => {
              if (!page7.bindings[id2]) {
                delete page7.bindings[id2];
              }
            });
            next.document.pages[pageId] = page7;
            const bindingsToUpdate = TLDR.getRelatedBindings(next, Object.keys(changedShapes), pageId);
            const visitedShapes = /* @__PURE__ */ new Set();
            bindingsToUpdate.forEach((binding) => {
              if (!page7.bindings[binding.id]) {
                return;
              }
              const toShape = page7.shapes[binding.toId];
              const fromShape = page7.shapes[binding.fromId];
              if (!(toShape && fromShape)) {
                delete next.document.pages[pageId].bindings[binding.id];
                return;
              }
              if (visitedShapes.has(fromShape)) {
                return;
              }
              const fromDelta = TLDR.updateArrowBindings(page7, fromShape);
              visitedShapes.add(fromShape);
              if (fromDelta) {
                const nextShape = __spreadValues4(__spreadValues4({}, fromShape), fromDelta);
                page7.shapes[fromShape.id] = nextShape;
              }
            });
            groupsToUpdate.forEach((group21) => {
              if (!group21)
                throw Error("no group!");
              const children = group21.children.filter((id2) => page7.shapes[id2] !== void 0);
              const commonBounds = Utils.getCommonBounds(children.map((id2) => page7.shapes[id2]).filter(Boolean).map((shape) => TLDR.getRotatedBounds(shape)));
              page7.shapes[group21.id] = __spreadProps4(__spreadValues4({}, group21), {
                point: [commonBounds.minX, commonBounds.minY],
                size: [commonBounds.width, commonBounds.height],
                children
              });
            });
          }
          const nextPageState = __spreadValues4({}, next.document.pageStates[pageId]);
          if (!nextPageState.brush) {
            delete nextPageState.brush;
          }
          if (nextPageState.hoveredId && !page7.shapes[nextPageState.hoveredId]) {
            delete nextPageState.hoveredId;
          }
          if (nextPageState.bindingId && !page7.bindings[nextPageState.bindingId]) {
            TLDR.warn(`Could not find the binding of ${pageId}`);
            delete nextPageState.bindingId;
          }
          if (nextPageState.editingId && !page7.shapes[nextPageState.editingId]) {
            TLDR.warn("Could not find the editing shape!");
            delete nextPageState.editingId;
          }
          next.document.pageStates[pageId] = nextPageState;
        });
      }
      Object.keys((_a3 = next.document.assets) != null ? _a3 : {}).forEach((id2) => {
        var _a22, _b;
        if (!((_a22 = next.document.assets) == null ? void 0 : _a22[id2])) {
          (_b = next.document.assets) == null ? true : delete _b[id2];
        }
      });
      const currentPageId = next.appState.currentPageId;
      const currentPageState = next.document.pageStates[currentPageId];
      if (next.room && next.room !== prev.room) {
        const room = __spreadProps4(__spreadValues4({}, next.room), { users: __spreadValues4({}, next.room.users) });
        if (prev.room) {
          Object.values(prev.room.users).filter(Boolean).forEach((user) => {
            if (room.users[user.id] === void 0) {
              delete room.users[user.id];
            }
          });
        }
        next.room = room;
      }
      if (next.room) {
        next.room.users[next.room.userId] = __spreadProps4(__spreadValues4({}, next.room.users[next.room.userId]), {
          point: this.currentPoint,
          selectedIds: currentPageState.selectedIds
        });
      }
      if (this.readOnly) {
        next.document.pages = prev.document.pages;
      }
      return next;
    });
    __publicField2(this, "broadcastPatch", (patch, addToHistory) => {
      var _a3, _b, _c, _d, _e, _f, _g, _h, _i;
      const changedShapes = {};
      const changedBindings = {};
      const changedAssets = {};
      const shapes = (_c = (_b = (_a3 = patch == null ? void 0 : patch.document) == null ? void 0 : _a3.pages) == null ? void 0 : _b[this.currentPageId]) == null ? void 0 : _c.shapes;
      const bindings = (_f = (_e = (_d = patch == null ? void 0 : patch.document) == null ? void 0 : _d.pages) == null ? void 0 : _e[this.currentPageId]) == null ? void 0 : _f.bindings;
      const assets = (_g = patch == null ? void 0 : patch.document) == null ? void 0 : _g.assets;
      if (shapes) {
        Object.keys(shapes).forEach((id2) => {
          changedShapes[id2] = this.getShape(id2, this.currentPageId);
        });
      }
      if (bindings) {
        Object.keys(bindings).forEach((id2) => {
          changedBindings[id2] = this.getBinding(id2, this.currentPageId);
        });
      }
      if (assets) {
        Object.keys(assets).forEach((id2) => {
          changedAssets[id2] = this.document.assets[id2];
        });
      }
      (_i = (_h = this.callbacks).onChangePage) == null ? void 0 : _i.call(_h, this, changedShapes, changedBindings, changedAssets, addToHistory);
    });
    __publicField2(this, "onPatch", (state, patch, id2) => {
      var _a3, _b, _c, _d, _e, _f;
      if (this.callbacks.onChangePage && ((_b = (_a3 = patch == null ? void 0 : patch.document) == null ? void 0 : _a3.pages) == null ? void 0 : _b[this.currentPageId]) || ((_c = patch == null ? void 0 : patch.document) == null ? void 0 : _c.assets)) {
        if (((_d = patch == null ? void 0 : patch.document) == null ? void 0 : _d.assets) || this.session && this.session.type !== "brush" && this.session.type !== "erase" && this.session.type !== "draw") {
          this.broadcastPatch(patch, false);
        }
      }
      (_f = (_e = this.callbacks).onPatch) == null ? void 0 : _f.call(_e, this, patch, id2);
    });
    __publicField2(this, "onCommand", (state, command, id2) => {
      var _a3, _b;
      this.clearSelectHistory();
      this.isDirty = true;
      (_b = (_a3 = this.callbacks).onCommand) == null ? void 0 : _b.call(_a3, this, command, id2);
    });
    __publicField2(this, "onReplace", () => {
      this.clearSelectHistory();
      this.isDirty = false;
    });
    __publicField2(this, "onUndo", () => {
      var _a3, _b;
      this.rotationInfo.selectedIds = [...this.selectedIds];
      (_b = (_a3 = this.callbacks).onUndo) == null ? void 0 : _b.call(_a3, this);
    });
    __publicField2(this, "onRedo", () => {
      var _a3, _b;
      this.rotationInfo.selectedIds = [...this.selectedIds];
      (_b = (_a3 = this.callbacks).onRedo) == null ? void 0 : _b.call(_a3, this);
    });
    __publicField2(this, "onPersist", (state, patch) => {
      var _a3, _b;
      (_b = (_a3 = this.callbacks).onPersist) == null ? void 0 : _b.call(_a3, this);
      this.broadcastPatch(patch, true);
    });
    __publicField2(this, "prevSelectedIds", this.selectedIds);
    __publicField2(this, "onStateDidChange", (_state, id2) => {
      var _a3, _b, _c, _d;
      (_b = (_a3 = this.callbacks).onChange) == null ? void 0 : _b.call(_a3, this, id2);
      if (this.room && this.selectedIds !== this.prevSelectedIds) {
        (_d = (_c = this.callbacks).onChangePresence) == null ? void 0 : _d.call(_c, this, __spreadProps4(__spreadValues4({}, this.room.users[this.room.userId]), {
          selectedIds: this.selectedIds,
          session: !!this.session
        }));
        this.prevSelectedIds = this.selectedIds;
      }
    });
    __publicField2(this, "justSent", false);
    __publicField2(this, "prevShapes", this.page.shapes);
    __publicField2(this, "prevBindings", this.page.bindings);
    __publicField2(this, "prevAssets", this.document.assets);
    __publicField2(this, "getReservedContent", (coreReservedIds, pageId = this.currentPageId) => {
      const { bindings } = this.document.pages[pageId];
      const reservedShapes = {};
      const reservedBindings = {};
      const bindingsArr = Object.values(bindings);
      const boundTos = new Map(bindingsArr.map((binding) => [binding.toId, binding]));
      const boundFroms = new Map(bindingsArr.map((binding) => [binding.fromId, binding]));
      const bindingMaps = [boundTos, boundFroms];
      const reservedShapeIds = [];
      if (this.session)
        coreReservedIds.forEach((id2) => reservedShapeIds.push(id2));
      if (this.pageState.editingId)
        reservedShapeIds.push(this.pageState.editingId);
      const strongReservedShapeIds = new Set(reservedShapeIds);
      const visited = /* @__PURE__ */ new Set();
      while (reservedShapeIds.length > 0) {
        const id2 = reservedShapeIds.pop();
        if (!id2)
          break;
        if (visited.has(id2))
          continue;
        visited.add(id2);
        const shape = this.getShape(id2);
        reservedShapes[id2] = shape;
        if (shape.parentId !== pageId)
          reservedShapeIds.push(shape.parentId);
        if (shape.children)
          reservedShapeIds.push(...shape.children);
        bindingMaps.map((map2) => map2.get(shape.id)).filter(Boolean).forEach((binding) => {
          reservedBindings[binding.id] = binding;
          reservedShapeIds.push(binding.toId, binding.fromId);
        });
      }
      return { reservedShapes, reservedBindings, strongReservedShapeIds };
    });
    __publicField2(this, "replacePageContent", (shapes, bindings, assets, pageId = this.currentPageId) => {
      if (this.justSent) {
        this.justSent = false;
        return this;
      }
      const page7 = this.document.pages[this.currentPageId];
      Object.values(shapes).forEach((shape) => {
        if (shape.parentId !== pageId && !(page7.shapes[shape.parentId] || shapes[shape.parentId])) {
          console.warn("Added a shape without a parent on the page");
          shape.parentId = pageId;
        }
      });
      this.useStore.setState((current) => {
        const { hoveredId, editingId, bindingId, selectedIds } = current.document.pageStates[pageId];
        const coreReservedIds = [...selectedIds];
        const editingShape = editingId && current.document.pages[this.currentPageId].shapes[editingId];
        if (editingShape)
          coreReservedIds.push(editingShape.id);
        const { reservedShapes, reservedBindings, strongReservedShapeIds } = this.getReservedContent(coreReservedIds, this.currentPageId);
        Object.values(reservedShapes).filter((reservedShape) => !("text" in reservedShape)).forEach((reservedShape) => {
          const incomingShape = shapes[reservedShape.id];
          if (!incomingShape)
            return;
          if (!(reservedShape.type === "arrow" || strongReservedShapeIds.has(reservedShape.id))) {
            shapes[reservedShape.id] = incomingShape;
            return;
          }
          if ("decorations" in incomingShape && "decorations" in reservedShape) {
            shapes[reservedShape.id] = __spreadProps4(__spreadValues4({}, reservedShape), { decorations: incomingShape.decorations });
          }
          reservedShape.style = incomingShape.style;
        });
        this.prevShapes = shapes;
        this.prevBindings = bindings;
        this.prevAssets = assets;
        const nextShapes = __spreadValues4(__spreadValues4({}, shapes), reservedShapes);
        if (editingShape) {
          nextShapes[editingShape.id] = editingShape;
        }
        const nextBindings = __spreadValues4(__spreadValues4({}, bindings), reservedBindings);
        const nextAssets = __spreadValues4({}, assets);
        const next = __spreadProps4(__spreadValues4({}, current), {
          document: __spreadProps4(__spreadValues4({}, current.document), {
            pages: {
              [pageId]: __spreadProps4(__spreadValues4({}, current.document.pages[pageId]), {
                shapes: nextShapes,
                bindings: nextBindings
              })
            },
            assets: nextAssets,
            pageStates: __spreadProps4(__spreadValues4({}, current.document.pageStates), {
              [pageId]: __spreadProps4(__spreadValues4({}, current.document.pageStates[pageId]), {
                selectedIds: selectedIds.filter((id2) => nextShapes[id2] !== void 0),
                hoveredId: hoveredId ? nextShapes[hoveredId] === void 0 ? void 0 : hoveredId : void 0,
                editingId,
                bindingId: bindingId ? nextBindings[bindingId] === void 0 ? void 0 : bindingId : void 0
              })
            })
          })
        });
        const page8 = next.document.pages[pageId];
        const bindingsToUpdate = TLDR.getRelatedBindings(next, Object.keys(nextShapes), pageId);
        const visitedShapes = /* @__PURE__ */ new Set();
        bindingsToUpdate.forEach((binding) => {
          if (!page8.bindings[binding.id]) {
            return;
          }
          const fromShape = page8.shapes[binding.fromId];
          if (visitedShapes.has(fromShape)) {
            return;
          }
          const fromDelta = TLDR.updateArrowBindings(page8, fromShape);
          visitedShapes.add(fromShape);
          if (fromDelta) {
            const nextShape = __spreadValues4(__spreadValues4({}, fromShape), fromDelta);
            page8.shapes[fromShape.id] = nextShape;
          }
        });
        Object.values(nextShapes).forEach((shape) => {
          if (shape.type !== "group")
            return;
          const children = shape.children.filter((id2) => page8.shapes[id2] !== void 0);
          const commonBounds = Utils.getCommonBounds(children.map((id2) => page8.shapes[id2]).filter(Boolean).map((shape2) => TLDR.getRotatedBounds(shape2)));
          page8.shapes[shape.id] = __spreadProps4(__spreadValues4({}, shape), {
            point: [commonBounds.minX, commonBounds.minY],
            size: [commonBounds.width, commonBounds.height],
            children
          });
        });
        this.state.document = next.document;
        return next;
      }, true);
      return this;
    });
    __publicField2(this, "updateBounds", (bounds) => {
      this.rendererBounds = bounds;
      const { point, zoom } = this.camera;
      this.updateViewport(point, zoom);
      if (!this.readOnly && this.session) {
        this.session.update();
      }
    });
    __publicField2(this, "updateViewport", (point, zoom) => {
      const { width, height } = this.rendererBounds;
      const [minX, minY] = e.sub(e.div([0, 0], zoom), point);
      const [maxX, maxY] = e.sub(e.div([width, height], zoom), point);
      this.viewport = {
        minX,
        minY,
        maxX,
        maxY,
        height: maxX - minX,
        width: maxY - minY
      };
    });
    __publicField2(this, "setEditingId", (id2, isCreating = false) => {
      if (this.readOnly)
        return;
      if (id2) {
        this.startSession("edit", id2, isCreating);
      } else {
        if (!this.pageState.editingId)
          return;
        this.completeSession();
      }
      this.editingStartTime = performance.now();
      this.patchState({
        document: {
          pageStates: {
            [this.currentPageId]: {
              editingId: id2
            }
          }
        }
      }, `set_editing_id`);
    });
    __publicField2(this, "setHoveredId", (id2) => {
      this.patchState({
        document: {
          pageStates: {
            [this.currentPageId]: {
              hoveredId: id2
            }
          }
        }
      }, `set_hovered_id`);
    });
    __publicField2(this, "setSetting", (name, value) => {
      if (this.session)
        return this;
      const patch = {
        settings: {
          [name]: typeof value === "function" ? value(this.settings[name]) : value
        }
      };
      this.patchState(patch, `settings:${name}`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "toggleFocusMode", () => {
      if (this.session)
        return this;
      const patch = {
        settings: {
          isFocusMode: !this.settings.isFocusMode
        }
      };
      this.patchState(patch, `settings:toggled_focus_mode`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "togglePenMode", () => {
      if (this.session)
        return this;
      const patch = {
        settings: {
          isPenMode: !this.settings.isPenMode
        }
      };
      this.patchState(patch, `settings:toggled_pen_mode`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "toggleDarkMode", () => {
      if (this.session)
        return this;
      const patch = { settings: { isDarkMode: !this.settings.isDarkMode } };
      this.patchState(patch, `settings:toggled_dark_mode`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "toggleZoomSnap", () => {
      if (this.session)
        return this;
      const patch = { settings: { isZoomSnap: !this.settings.isZoomSnap } };
      this.patchState(patch, `settings:toggled_zoom_snap`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "toggleDebugMode", () => {
      if (this.session)
        return this;
      const patch = { settings: { isDebugMode: !this.settings.isDebugMode } };
      this.patchState(patch, `settings:toggled_debug`);
      this.persist(patch);
      return this;
    });
    __publicField2(this, "setMenuOpen", (isOpen) => {
      const patch = { appState: { isMenuOpen: isOpen } };
      this.patchState(patch, "ui:toggled_menu_opened");
      this.persist(patch);
      return this;
    });
    __publicField2(this, "setIsLoading", (isLoading) => {
      const patch = { appState: { isLoading } };
      this.patchState(patch, "ui:toggled_is_loading");
      this.persist(patch);
      return this;
    });
    __publicField2(this, "setDisableAssets", (disableAssets) => {
      this.patchState({ appState: { disableAssets } }, "ui:toggled_disable_images");
      return this;
    });
    __publicField2(this, "toggleGrid", () => {
      if (this.session)
        return this;
      const patch = { settings: { showGrid: !this.settings.showGrid } };
      this.patchState(patch, "settings:toggled_grid");
      this.persist(patch);
      return this;
    });
    __publicField2(this, "selectTool", (type) => {
      if (this.readOnly || this.session)
        return this;
      this.isPointing = false;
      const tool = this.tools[type];
      if (tool === this.currentTool) {
        this.patchState({
          appState: {
            isToolLocked: false
          }
        });
        return this;
      }
      this.currentTool.onExit();
      tool.previous = this.currentTool.type;
      this.currentTool = tool;
      this.currentTool.onEnter();
      return this.patchState({
        appState: {
          activeTool: type,
          isToolLocked: false
        }
      }, `selected_tool:${type}`);
    });
    __publicField2(this, "toggleToolLock", () => {
      if (this.session)
        return this;
      return this.patchState({
        appState: {
          isToolLocked: !this.appState.isToolLocked
        }
      }, `toggled_tool_lock`);
    });
    __publicField2(this, "resetDocument", () => {
      if (this.session)
        return this;
      this.session = void 0;
      this.currentTool = this.tools.select;
      const doc = _TldrawApp.defaultDocument;
      doc.pages["page"].name = "Page 1";
      this.resetHistory().clearSelectHistory().loadDocument(_TldrawApp.defaultDocument).persist({});
      return this;
    });
    __publicField2(this, "updateUsers", (users, isOwnUpdate = false) => {
      this.patchState({
        room: {
          users: Object.fromEntries(users.map((user) => [user.id, user]))
        }
      }, isOwnUpdate ? "room:self:update" : "room:user:update");
    });
    __publicField2(this, "removeUser", (userId) => {
      this.patchState({
        room: {
          users: {
            [userId]: void 0
          }
        }
      });
    });
    __publicField2(this, "mergeDocument", (document2) => {
      if (this.document.id !== document2.id) {
        this.replaceState(__spreadProps4(__spreadValues4({}, migrate(__spreadProps4(__spreadValues4({}, this.state), {
          document: document2
        }), _TldrawApp.version)), {
          appState: __spreadProps4(__spreadValues4({}, this.appState), {
            currentPageId: Object.keys(document2.pages)[0]
          })
        }));
        return this;
      }
      const currentPageStates = __spreadValues4({}, this.document.pageStates);
      const nextAppState = __spreadProps4(__spreadValues4({}, this.appState), {
        currentPageId: document2.pages[this.currentPageId] ? this.currentPageId : Object.keys(document2.pages)[0],
        pages: Object.values(document2.pages).map((page7, i7) => ({
          id: page7.id,
          name: page7.name,
          childIndex: page7.childIndex || i7
        }))
      });
      this.resetHistory();
      Object.keys(this.document.pages).forEach((pageId) => {
        if (!document2.pages[pageId]) {
          if (pageId === this.appState.currentPageId) {
            this.cancelSession();
            this.selectNone();
          }
          currentPageStates[pageId] = void 0;
        }
      });
      if (this.session) {
        this.selectedIds.filter((id2) => !document2.pages[this.currentPageId].shapes[id2]).forEach((id2) => document2.pages[this.currentPageId].shapes[id2] = this.page.shapes[id2]);
      }
      Object.entries(currentPageStates).forEach(([pageId, pageState]) => {
        pageState.selectedIds = pageState.selectedIds.filter((id2) => !!document2.pages[pageId].shapes[id2]);
      });
      const { editingId } = this.pageState;
      if (editingId) {
        document2.pages[this.currentPageId].shapes[editingId] = this.page.shapes[editingId];
        currentPageStates[this.currentPageId].selectedIds = [editingId];
      }
      return this.replaceState(__spreadProps4(__spreadValues4({}, migrate(__spreadProps4(__spreadValues4({}, this.state), { document: __spreadProps4(__spreadValues4({}, document2), { pageStates: currentPageStates }) }), _TldrawApp.version)), {
        appState: nextAppState
      }), "merge");
    });
    __publicField2(this, "updateDocument", (document2, reason = "updated_document") => {
      const prevState = this.state;
      let nextState = __spreadProps4(__spreadValues4({}, prevState), { document: __spreadValues4({}, prevState.document) });
      if (!document2.pages[this.currentPageId]) {
        nextState.appState = __spreadProps4(__spreadValues4({}, prevState.appState), {
          currentPageId: Object.keys(document2.pages)[0]
        });
      }
      let i7 = 1;
      for (const nextPage of Object.values(document2.pages)) {
        if (nextPage !== prevState.document.pages[nextPage.id]) {
          nextState.document.pages[nextPage.id] = nextPage;
          if (!nextPage.name) {
            nextState.document.pages[nextPage.id].name = `Page ${i7 + 1}`;
            i7++;
          }
        }
      }
      for (const nextPageState of Object.values(document2.pageStates)) {
        if (nextPageState !== prevState.document.pageStates[nextPageState.id]) {
          nextState.document.pageStates[nextPageState.id] = nextPageState;
          const nextPage = document2.pages[nextPageState.id];
          const keysToCheck = ["bindingId", "editingId", "hoveredId", "pointedId"];
          for (const key of keysToCheck) {
            if (!nextPage.shapes[key]) {
              nextPageState[key] = void 0;
            }
          }
          nextPageState.selectedIds = nextPageState.selectedIds.filter((id2) => !!document2.pages[nextPage.id].shapes[id2]);
        }
      }
      return this.replaceState(migrate(nextState, nextState.document.version || 0), `${reason}:${document2.id}`);
    });
    __publicField2(this, "loadRoom", (roomId2) => {
      this.patchState({
        room: {
          id: roomId2,
          userId: uuid,
          users: {
            [uuid]: {
              id: uuid,
              color: USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)],
              point: [100, 100],
              selectedIds: [],
              activeShapes: []
            }
          }
        }
      });
      return this;
    });
    __publicField2(this, "loadDocument", (document2) => {
      this.selectNone();
      this.resetHistory();
      this.clearSelectHistory();
      this.session = void 0;
      const state = __spreadProps4(__spreadValues4({}, _TldrawApp.defaultState), {
        settings: __spreadValues4({}, this.state.settings),
        document: document2,
        appState: __spreadProps4(__spreadValues4(__spreadValues4({}, _TldrawApp.defaultState.appState), this.state.appState), {
          currentPageId: Object.keys(document2.pages)[0],
          disableAssets: this.disableAssets
        })
      });
      this.replaceState(migrate(state, _TldrawApp.version), "loaded_document");
      const { point, zoom } = this.camera;
      this.updateViewport(point, zoom);
      return this;
    });
    __publicField2(this, "newProject", () => {
      if (!this.isLocal)
        return;
      this.fileSystemHandle = null;
      this.resetDocument();
    });
    __publicField2(this, "saveProject", () => __async2(this, null, function* () {
      if (this.readOnly)
        return;
      try {
        const fileHandle = yield saveToFileSystem(migrate(this.state, _TldrawApp.version).document, this.fileSystemHandle);
        this.fileSystemHandle = fileHandle;
        this.persist({});
        this.isDirty = false;
      } catch (e13) {
        console.error(e13.message);
      }
      return this;
    }));
    __publicField2(this, "saveProjectAs", () => __async2(this, null, function* () {
      try {
        const fileHandle = yield saveToFileSystem(this.document, null);
        this.fileSystemHandle = fileHandle;
        this.persist({});
        this.isDirty = false;
      } catch (e13) {
        console.error(e13.message);
      }
      return this;
    }));
    __publicField2(this, "openProject", () => __async2(this, null, function* () {
      if (!this.isLocal)
        return;
      try {
        const result = yield openFromFileSystem();
        if (!result) {
          throw Error();
        }
        const { fileHandle, document: document2 } = result;
        this.loadDocument(document2);
        this.fileSystemHandle = fileHandle;
        this.zoomToFit();
        this.persist({});
      } catch (e13) {
        console.error(e13);
      } finally {
        this.persist({});
      }
    }));
    __publicField2(this, "openAsset", () => __async2(this, null, function* () {
      if (!this.disableAssets)
        try {
          const file = yield openAssetsFromFileSystem();
          if (Array.isArray(file)) {
            this.addMediaFromFiles(file, this.centerPoint);
          } else {
            if (!file)
              return;
            this.addMediaFromFiles([file]);
          }
        } catch (e13) {
          console.error(e13);
        } finally {
          this.persist({});
        }
    }));
    __publicField2(this, "signOut", () => {
    });
    __publicField2(this, "getAppState", () => {
      return this.appState;
    });
    __publicField2(this, "getPage", (pageId = this.currentPageId) => {
      return TLDR.getPage(this.state, pageId || this.currentPageId);
    });
    __publicField2(this, "getShapes", (pageId = this.currentPageId) => {
      return TLDR.getShapes(this.state, pageId || this.currentPageId);
    });
    __publicField2(this, "getBindings", (pageId = this.currentPageId) => {
      return TLDR.getBindings(this.state, pageId || this.currentPageId);
    });
    __publicField2(this, "getShape", (id2, pageId = this.currentPageId) => {
      return TLDR.getShape(this.state, id2, pageId);
    });
    __publicField2(this, "getShapeBounds", (id2, pageId = this.currentPageId) => {
      return TLDR.getBounds(this.getShape(id2, pageId));
    });
    __publicField2(this, "getBinding", (id2, pageId = this.currentPageId) => {
      return TLDR.getBinding(this.state, id2, pageId);
    });
    __publicField2(this, "getPageState", (pageId = this.currentPageId) => {
      return TLDR.getPageState(this.state, pageId || this.currentPageId);
    });
    __publicField2(this, "getPagePoint", (point, pageId = this.currentPageId) => {
      const { camera } = this.getPageState(pageId);
      return e.sub(e.div(point, camera.zoom), camera.point);
    });
    __publicField2(this, "createPage", (id2, name) => {
      if (this.readOnly)
        return this;
      const { width, height } = this.rendererBounds;
      return this.setState(createPage(this, [-width / 2, -height / 2], id2, name));
    });
    __publicField2(this, "changePage", (pageId) => {
      return this.setState(changePage(this, pageId));
    });
    __publicField2(this, "movePage", (pageId, index2) => {
      if (this.readOnly)
        return this;
      return this.setState(movePage(this, pageId, index2));
    });
    __publicField2(this, "renamePage", (pageId, name) => {
      if (this.readOnly)
        return this;
      return this.setState(renamePage(this, pageId, name));
    });
    __publicField2(this, "duplicatePage", (pageId) => {
      if (this.readOnly)
        return this;
      return this.setState(duplicatePage(this, pageId));
    });
    __publicField2(this, "deletePage", (pageId) => {
      if (this.readOnly)
        return this;
      if (Object.values(this.document.pages).length <= 1)
        return this;
      return this.setState(deletePage(this, pageId ? pageId : this.currentPageId));
    });
    __publicField2(this, "cut", (ids = this.selectedIds, e13) => {
      e13 == null ? void 0 : e13.preventDefault();
      this.copy(ids, e13);
      if (!this.readOnly) {
        this.delete(ids);
      }
      return this;
    });
    __publicField2(this, "copy", (ids = this.selectedIds, e13) => {
      var _a3;
      e13 == null ? void 0 : e13.preventDefault();
      this.clipboard = this.getContent(ids);
      const jsonString = JSON.stringify(__spreadValues4({
        type: "tldr/clipboard"
      }, this.clipboard));
      const tldrawString = `<tldraw>${jsonString}</tldraw>`;
      setClipboard(tldrawString);
      if (e13) {
        (_a3 = e13.clipboardData) == null ? void 0 : _a3.setData("text/html", tldrawString);
      }
      if (navigator.clipboard && window.ClipboardItem) {
        navigator.clipboard.write([
          new ClipboardItem({
            "text/html": new Blob([tldrawString], { type: "text/html" })
          })
        ]);
      }
      return this;
    });
    __publicField2(this, "paste", (point, e13) => __async2(this, null, function* () {
      var _a3, _b;
      if (this.readOnly)
        return;
      const shapesToCreate = [];
      const filesToPaste = [];
      let clipboardData;
      const getSvgFromText = (text21) => __async2(this, null, function* () {
        const div = document.createElement("div");
        div.innerHTML = text21;
        const svg = div.firstChild;
        svg.style.setProperty("background-color", "transparent");
        console.log(text21);
        const imageBlob = yield TLDR.getImageForSvg(svg, "svg", {
          scale: 1,
          quality: 1
        });
        if (imageBlob) {
          const file = new File([imageBlob], "image.svg");
          filesToPaste.push(file);
        } else {
          getShapeFromText(text21);
        }
      });
      const getShapeFromText = (text21) => {
        const pagePoint = this.getPagePoint(point != null ? point : this.centerPoint, this.currentPageId);
        const isMultiline = text21.includes("\n");
        shapesToCreate.push(TLDR.getShapeUtil("text").getShape({
          id: Utils.uniqueId(),
          type: "text",
          parentId: this.appState.currentPageId,
          text: TLDR.normalizeText(text21.trim()),
          point: pagePoint,
          style: __spreadProps4(__spreadValues4({}, this.appState.currentStyle), {
            textAlign: isMultiline ? "start" : this.appState.currentStyle.textAlign
          })
        }));
      };
      const getShapeFromHtml = (html) => {
        var _a22;
        try {
          const maybeJson = (_a22 = html.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : _a22[1];
          if (!maybeJson)
            return;
          const json = JSON.parse(maybeJson);
          if (json.type === "tldr/clipboard") {
            clipboardData = json;
            return;
          } else {
            throw Error("Not tldraw data!");
          }
        } catch (e22) {
          getShapeFromText(html);
        }
      };
      if (e13 !== void 0) {
        const items = Array.from((_b = (_a3 = e13.clipboardData) == null ? void 0 : _a3.items) != null ? _b : []);
        yield Promise.all(items.map((item) => __async2(this, null, function* () {
          var _a22;
          const { type, kind } = item;
          switch (kind) {
            case "string": {
              const str = yield new Promise((resolve) => item.getAsString(resolve));
              switch (type) {
                case "text/html": {
                  if ((_a22 = str.match(/<tldraw>(.*)<\/tldraw>/)) == null ? void 0 : _a22[1]) {
                    getShapeFromHtml(str);
                    return;
                  }
                  break;
                }
                case "text/plain": {
                  console.log(str);
                  if (str.startsWith("<svg")) {
                    getSvgFromText(str);
                  } else {
                    getShapeFromText(str);
                  }
                  break;
                }
              }
              break;
            }
            case "file": {
              const file = item.getAsFile();
              if (file)
                filesToPaste.push(file);
              break;
            }
          }
        })));
      }
      if (clipboardData) {
        this.insertContent(clipboardData, { point, select: true });
        return this;
      }
      if (filesToPaste.length) {
        this.addMediaFromFiles(filesToPaste, point);
        return this;
      }
      if (shapesToCreate.length) {
        const pagePoint = this.getPagePoint(point != null ? point : this.centerPoint, this.currentPageId);
        const currentPoint = e.add(pagePoint, [0, 0]);
        shapesToCreate.forEach((shape, i7) => {
          const bounds = TLDR.getBounds(shape);
          if (i7 === 0) {
            currentPoint[0] -= bounds.width / 2;
            currentPoint[1] -= bounds.height / 2;
          }
          shape.point = [...currentPoint];
          currentPoint[0] += bounds.width;
        });
        this.createShapes(...shapesToCreate);
        return this;
      }
      if (this.clipboard) {
        this.insertContent(this.clipboard);
      } else {
        getClipboard().then((text21) => {
          if (text21)
            getShapeFromHtml(text21);
        });
      }
      return this;
    }));
    __publicField2(this, "getSvg", (..._0) => __async2(this, [..._0], function* (ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes), opts = {}) {
      if (ids.length === 0)
        return;
      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
      const style = document.createElementNS("http://www.w3.org/2000/svg", "style");
      if (typeof window !== "undefined") {
        window.focus();
      }
      if (opts.includeFonts) {
        try {
          const { fonts } = yield fetch(_TldrawApp.assetSrc, { mode: "no-cors" }).then((d8) => d8.json());
          style.textContent = `
          @font-face {
            font-family: 'Caveat Brush';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.caveat}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Code Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.source_code_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Source Sans Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.source_sans_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          @font-face {
            font-family: 'Crimson Pro';
            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.crimson_pro}) format('woff');
            font-weight: 500;
            font-style: normal;
          }
          `;
        } catch (e13) {
          TLDR.warn("Could not find tldraw-assets.json file.");
        }
      } else {
        style.textContent = `@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');`;
      }
      defs.append(style);
      svg.append(defs);
      const shapes = ids.map((id2) => this.getShape(id2, this.currentPageId)).sort((a6, b7) => a6.childIndex - b7.childIndex);
      const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getRotatedBounds));
      const getSvgElementForShape = (shape) => {
        const util = TLDR.getShapeUtil(shape);
        const bounds = util.getBounds(shape);
        const elm = util.getSvgElement(shape, this.settings.isDarkMode);
        if (!elm)
          return;
        if (shape.type === "image") {
          elm.setAttribute("xlink:href", this.document.assets[shape.assetId].src);
        } else if (shape.type === "video") {
          elm.setAttribute("xlink:href", this.serializeVideo(shape.id));
        }
        elm.setAttribute("transform", `translate(${(SVG_EXPORT_PADDING + shape.point[0] - commonBounds.minX).toFixed(2)}, ${(SVG_EXPORT_PADDING + shape.point[1] - commonBounds.minY).toFixed(2)}) rotate(${((shape.rotation || 0) * 180 / Math.PI).toFixed(2)}, ${(bounds.width / 2).toFixed(2)}, ${(bounds.height / 2).toFixed(2)})`);
        return elm;
      };
      shapes.forEach((shape) => {
        var _a3;
        if ((_a3 = shape.children) == null ? void 0 : _a3.length) {
          const g7 = document.createElementNS("http://www.w3.org/2000/svg", "g");
          shape.children.forEach((childId) => {
            const shape2 = this.getShape(childId, this.currentPageId);
            const elm2 = getSvgElementForShape(shape2);
            if (elm2) {
              g7.append(elm2);
            }
          });
          svg.append(g7);
          return;
        }
        const elm = getSvgElementForShape(shape);
        if (elm) {
          svg.append(elm);
        }
      });
      svg.setAttribute("viewBox", [
        0,
        0,
        commonBounds.width + SVG_EXPORT_PADDING * 2,
        commonBounds.height + SVG_EXPORT_PADDING * 2
      ].join(" "));
      svg.setAttribute("width", commonBounds.width.toString());
      svg.setAttribute("height", commonBounds.height.toString());
      if (opts.transparentBackground) {
        svg.style.setProperty("background-color", "transparent");
      } else {
        svg.style.setProperty("background-color", this.settings.isDarkMode ? "#212529" : "rgb(248, 249, 250)");
      }
      svg.querySelectorAll(".tl-fill-hitarea, .tl-stroke-hitarea, .tl-binding-indicator").forEach((elm) => elm.remove());
      return svg;
    }));
    __publicField2(this, "copySvg", (..._0) => __async2(this, [..._0], function* (ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes)) {
      if (ids.length === 0)
        return;
      const svg = yield this.getSvg(ids);
      if (!svg)
        return;
      const svgString = TLDR.getSvgString(svg, 1);
      this.clipboard = this.getContent(ids);
      const tldrawString = JSON.stringify(__spreadValues4({
        type: "tldr/clipboard"
      }, this.clipboard));
      if (navigator.clipboard && window.ClipboardItem) {
        navigator.clipboard.write([
          new ClipboardItem({
            "text/html": new Blob([tldrawString], { type: "text/html" }),
            "text/plain": new Blob([svgString], { type: "text/plain" })
          })
        ]);
      }
      return svgString;
    }));
    __publicField2(this, "getContent", (ids) => {
      const page7 = this.getPage(this.currentPageId);
      if (ids && ids.length === 0)
        return;
      if (!ids)
        ids = this.selectedIds;
      if (ids.length === 0)
        ids = Object.keys(page7.shapes);
      if (ids.length === 0)
        return;
      const shapes = ids.map((id2) => page7.shapes[id2]).flatMap((shape) => {
        var _a3;
        return [shape, ...((_a3 = shape.children) != null ? _a3 : []).map((childId) => page7.shapes[childId])];
      }).map(deepCopy);
      const idsSet = new Set(shapes.map((s9) => s9.id));
      shapes.forEach((shape) => {
        if (shape.parentId === this.currentPageId) {
          shape.parentId = "currentPageId";
        }
      });
      const bindings = Object.values(page7.bindings).filter((binding) => {
        if (idsSet.has(binding.fromId) || idsSet.has(binding.toId)) {
          return true;
        }
        if (idsSet.has(binding.fromId)) {
          const shape = shapes.find((s9) => s9.id === binding.fromId);
          const handles = shape.handles;
          if (handles) {
            Object.values(handles).forEach((handle) => {
              if (handle.bindingId === binding.id) {
                handle.bindingId = void 0;
              }
            });
          }
        }
        if (idsSet.has(binding.toId)) {
          const shape = shapes.find((s9) => s9.id === binding.toId);
          const handles = shape.handles;
          if (handles) {
            Object.values(handles).forEach((handle) => {
              if (handle.bindingId === binding.id) {
                handle.bindingId = void 0;
              }
            });
          }
        }
        return false;
      }).map(deepCopy);
      const assets = [
        ...new Set(shapes.map((shape) => {
          if (!shape.assetId)
            return;
          return this.document.assets[shape.assetId];
        }).filter(Boolean).map(deepCopy))
      ];
      return { shapes, bindings, assets };
    });
    __publicField2(this, "copyJson", (ids = this.selectedIds) => {
      const content = this.getContent(ids);
      if (content) {
        TLDR.copyStringToClipboard(JSON.stringify(content));
      }
      return this;
    });
    __publicField2(this, "exportJson", (ids = this.selectedIds) => {
      const content = this.getContent(ids);
      if (content) {
        const blob2 = new Blob([JSON.stringify(content)], { type: "application/json" });
        const url = URL.createObjectURL(blob2);
        const link = document.createElement("a");
        link.href = url;
        link.download = `export.json`;
        link.click();
      }
      return this;
    });
    __publicField2(this, "insertContent", (content, opts = {}) => {
      return this.setState(insertContent(this, content, opts), "insert_content");
    });
    __publicField2(this, "getImage", (..._0) => __async2(this, [..._0], function* (format = "png", opts = {}) {
      const { ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes) } = opts;
      const svg = yield this.getSvg(ids, {
        includeFonts: format !== "svg",
        transparentBackground: format === "png"
      });
      if (!svg)
        return;
      if (format === "svg") {
        const svgString = TLDR.getSvgString(svg, 1);
        const blob2 = new Blob([svgString], { type: "image/svg+xml" });
        return blob2;
      }
      const imageBlob = yield TLDR.getImageForSvg(svg, format, opts);
      if (!imageBlob)
        return;
      return imageBlob;
    }));
    __publicField2(this, "copyImage", (..._0) => __async2(this, [..._0], function* (format = "png", opts = {}) {
      if (format === "svg") {
        this.copySvg(opts.ids);
        return;
      }
      if (!(navigator.clipboard && window.ClipboardItem)) {
        console.warn("Sorry, your browser does not support copying images.");
        return;
      }
      const blob2 = yield this.getImage(format, opts);
      if (!blob2)
        return;
      navigator.clipboard.write([
        new ClipboardItem({
          [blob2.type]: blob2
        })
      ]);
    }));
    __publicField2(this, "exportImage", (..._0) => __async2(this, [..._0], function* (format = "png", opts = {}) {
      var _a3;
      const { pageId = this.currentPageId } = opts;
      const blob2 = yield this.getImage(format, opts);
      if (!blob2)
        return;
      const name = (_a3 = this.document.pages[pageId].name) != null ? _a3 : "export";
      if (this.callbacks.onExport) {
        this.callbacks.onExport(this, {
          name,
          type: format,
          blob: blob2
        });
      } else {
        const url = URL.createObjectURL(blob2);
        const link = document.createElement("a");
        link.href = url;
        link.download = `${name}.${format}`;
        link.click();
      }
    }));
    __publicField2(this, "setCamera", (point, zoom, reason) => {
      this.updateViewport(point, zoom);
      this.patchState({
        document: {
          pageStates: {
            [this.currentPageId]: { camera: { point, zoom } }
          }
        }
      }, reason);
      return this;
    });
    __publicField2(this, "resetCamera", () => {
      return this.setCamera(this.centerPoint, 1, `reset_camera`);
    });
    __publicField2(this, "pan", (delta) => {
      const { camera } = this.pageState;
      return this.setCamera(e.toFixed(e.sub(camera.point, delta)), camera.zoom, `panned`);
    });
    __publicField2(this, "pinchZoom", (point, delta, zoom) => {
      const { camera } = this.pageState;
      const nextPoint = e.sub(camera.point, e.div(delta, camera.zoom));
      const nextZoom = zoom;
      const p0 = e.sub(e.div(point, camera.zoom), nextPoint);
      const p1 = e.sub(e.div(point, nextZoom), nextPoint);
      return this.setCamera(e.toFixed(e.add(nextPoint, e.sub(p1, p0))), nextZoom, `pinch_zoomed`);
    });
    __publicField2(this, "zoomTo", (next, center = this.centerPoint) => {
      const { zoom, point } = this.camera;
      const p0 = e.sub(e.div(center, zoom), point);
      const p1 = e.sub(e.div(center, next), point);
      return this.setCamera(e.toFixed(e.add(point, e.sub(p1, p0))), next, `zoomed_camera`);
    });
    __publicField2(this, "zoomIn", () => {
      const i7 = Math.round(this.camera.zoom * 100 / 25);
      const nextZoom = TLDR.getCameraZoom((i7 + 1) * 0.25);
      return this.zoomTo(nextZoom);
    });
    __publicField2(this, "zoomOut", () => {
      const i7 = Math.round(this.camera.zoom * 100 / 25);
      const nextZoom = TLDR.getCameraZoom((i7 - 1) * 0.25);
      return this.zoomTo(nextZoom);
    });
    __publicField2(this, "zoomToFit", () => {
      const {
        shapes,
        pageState: { camera }
      } = this;
      if (shapes.length === 0)
        return this;
      const { rendererBounds } = this;
      const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getBounds));
      let zoom = TLDR.getCameraZoom(Math.min((rendererBounds.width - FIT_TO_SCREEN_PADDING) / commonBounds.width, (rendererBounds.height - FIT_TO_SCREEN_PADDING) / commonBounds.height));
      zoom = camera.zoom === zoom || camera.zoom < 1 ? Math.min(1, zoom) : zoom;
      const mx = (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom;
      const my = (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom;
      return this.setCamera(e.toFixed(e.sub([mx, my], [commonBounds.minX, commonBounds.minY])), zoom, `zoomed_to_fit`);
    });
    __publicField2(this, "zoomToSelection", () => {
      if (this.selectedIds.length === 0)
        return this;
      const { rendererBounds } = this;
      const selectedBounds = TLDR.getSelectedBounds(this.state);
      let zoom = TLDR.getCameraZoom(Math.min((rendererBounds.width - FIT_TO_SCREEN_PADDING) / selectedBounds.width, (rendererBounds.height - FIT_TO_SCREEN_PADDING) / selectedBounds.height));
      zoom = this.camera.zoom === zoom || this.camera.zoom < 1 ? Math.min(1, zoom) : zoom;
      const mx = (rendererBounds.width - selectedBounds.width * zoom) / 2 / zoom;
      const my = (rendererBounds.height - selectedBounds.height * zoom) / 2 / zoom;
      return this.setCamera(e.toFixed(e.sub([mx, my], [selectedBounds.minX, selectedBounds.minY])), zoom, `zoomed_to_selection`);
    });
    __publicField2(this, "zoomToContent", () => {
      const shapes = this.shapes;
      const pageState = this.pageState;
      if (shapes.length === 0)
        return this;
      const { rendererBounds } = this;
      const { zoom } = pageState.camera;
      const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getBounds));
      const mx = (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom;
      const my = (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom;
      return this.setCamera(e.toFixed(e.sub([mx, my], [commonBounds.minX, commonBounds.minY])), this.camera.zoom, `zoomed_to_content`);
    });
    __publicField2(this, "resetZoom", () => {
      return this.zoomTo(1);
    });
    __publicField2(this, "zoomBy", Utils.throttle((delta, center) => {
      const { zoom } = this.camera;
      const nextZoom = TLDR.getCameraZoom(zoom - delta * zoom);
      return this.zoomTo(nextZoom, center);
    }, 16));
    __publicField2(this, "clearSelectHistory", () => {
      this.selectHistory.pointer = 0;
      this.selectHistory.stack = [this.selectedIds];
      return this;
    });
    __publicField2(this, "addToSelectHistory", (ids) => {
      if (this.selectHistory.pointer < this.selectHistory.stack.length) {
        this.selectHistory.stack = this.selectHistory.stack.slice(0, this.selectHistory.pointer + 1);
      }
      this.selectHistory.pointer++;
      this.selectHistory.stack.push(ids);
      return this;
    });
    __publicField2(this, "setSelectedIds", (ids, push2 = false) => {
      const nextIds = push2 ? [...this.pageState.selectedIds, ...ids] : [...ids];
      return this.patchState({
        appState: {
          activeTool: "select"
        },
        document: {
          pageStates: {
            [this.currentPageId]: {
              selectedIds: nextIds
            }
          }
        }
      }, `selected`);
    });
    __publicField2(this, "undoSelect", () => {
      if (this.selectHistory.pointer > 0) {
        this.selectHistory.pointer--;
        this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer]);
      }
      return this;
    });
    __publicField2(this, "redoSelect", () => {
      if (this.selectHistory.pointer < this.selectHistory.stack.length - 1) {
        this.selectHistory.pointer++;
        this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer]);
      }
      return this;
    });
    __publicField2(this, "select", (...ids) => {
      ids.forEach((id2) => {
        if (!this.page.shapes[id2]) {
          throw Error(`That shape does not exist on page ${this.currentPageId}`);
        }
      });
      this.setSelectedIds(ids);
      this.addToSelectHistory(ids);
      return this;
    });
    __publicField2(this, "selectAll", (pageId = this.currentPageId) => {
      if (this.session)
        return this;
      this.setSelectedIds(Object.values(this.document.pages[pageId].shapes).filter((shape) => shape.parentId === pageId).map((shape) => shape.id));
      this.addToSelectHistory(this.selectedIds);
      this.selectTool("select");
      return this;
    });
    __publicField2(this, "selectNone", () => {
      this.setSelectedIds([]);
      this.addToSelectHistory(this.selectedIds);
      return this;
    });
    __publicField2(this, "startSession", (type, ...args) => {
      var _a3, _b;
      if (this.readOnly && type !== "brush")
        return this;
      if (this.session) {
        TLDR.warn(`Already in a session! (${this.session.constructor.name})`);
        this.cancelSession();
      }
      const Session = getSession(type);
      this.session = new Session(this, ...args);
      const result = this.session.start();
      if (result) {
        this.patchState(result, `session:start_${this.session.constructor.name}`);
      }
      (_b = (_a3 = this.callbacks).onSessionStart) == null ? void 0 : _b.call(_a3, this, this.session.constructor.name);
      return this;
    });
    __publicField2(this, "updateSession", () => {
      const { session } = this;
      if (!session)
        return this;
      const patch = session.update();
      if (!patch)
        return this;
      return this.patchState(patch, `session:${session == null ? void 0 : session.constructor.name}`);
    });
    __publicField2(this, "cancelSession", () => {
      var _a3, _b;
      const { session } = this;
      if (!session)
        return this;
      this.session = void 0;
      const result = session.cancel();
      if (result) {
        this.patchState(result, `session:cancel:${session.constructor.name}`);
      }
      this.setEditingId();
      (_b = (_a3 = this.callbacks).onSessionEnd) == null ? void 0 : _b.call(_a3, this, session.constructor.name);
      return this;
    });
    __publicField2(this, "completeSession", () => {
      var _a3, _b, _c, _d, _e, _f, _g, _h, _i;
      const { session } = this;
      if (!session)
        return this;
      this.session = void 0;
      const result = session.complete();
      if (result === void 0) {
        this.isCreating = false;
        this.patchState({
          appState: {
            status: "idle"
          },
          document: {
            pageStates: {
              [this.currentPageId]: {
                editingId: void 0,
                bindingId: void 0,
                hoveredId: void 0
              }
            }
          }
        }, `session:complete:${session.constructor.name}`);
      } else if ("after" in result) {
        if (this.isCreating) {
          result.before = {
            appState: __spreadProps4(__spreadValues4({}, result.before.appState), {
              status: "idle"
            }),
            document: {
              pages: {
                [this.currentPageId]: {
                  shapes: Object.fromEntries(this.selectedIds.map((id2) => [id2, void 0]))
                }
              },
              pageStates: {
                [this.currentPageId]: {
                  selectedIds: [],
                  editingId: null,
                  bindingId: null,
                  hoveredId: null
                }
              }
            }
          };
          if (this.appState.isToolLocked) {
            const pageState = ((_c = (_b = (_a3 = result.after) == null ? void 0 : _a3.document) == null ? void 0 : _b.pageStates) == null ? void 0 : _c[this.currentPageId]) || {};
            pageState.selectedIds = [];
          }
          this.isCreating = false;
        }
        result.after.appState = __spreadProps4(__spreadValues4({}, result.after.appState), {
          status: "idle"
        });
        result.after.document = __spreadProps4(__spreadValues4({}, result.after.document), {
          pageStates: __spreadProps4(__spreadValues4({}, (_d = result.after.document) == null ? void 0 : _d.pageStates), {
            [this.currentPageId]: __spreadProps4(__spreadValues4({}, (((_e = result.after.document) == null ? void 0 : _e.pageStates) || {})[this.currentPageId]), {
              editingId: null
            })
          })
        });
        this.setState(result, `session:complete:${session.constructor.name}`);
      } else {
        this.patchState(__spreadProps4(__spreadValues4({}, result), {
          appState: __spreadProps4(__spreadValues4({}, result.appState), {
            status: "idle"
          }),
          document: __spreadProps4(__spreadValues4({}, result.document), {
            pageStates: {
              [this.currentPageId]: __spreadProps4(__spreadValues4({}, (_g = (_f = result.document) == null ? void 0 : _f.pageStates) == null ? void 0 : _g[this.currentPageId]), {
                editingId: null
              })
            }
          })
        }), `session:complete:${session.constructor.name}`);
      }
      (_i = (_h = this.callbacks).onSessionEnd) == null ? void 0 : _i.call(_h, this, session.constructor.name);
      return this;
    });
    __publicField2(this, "createShapes", (...shapes) => {
      if (shapes.length === 0)
        return this;
      return this.create(shapes.map((shape) => {
        return TLDR.getShapeUtil(shape.type).create(__spreadValues4({
          parentId: this.currentPageId
        }, shape));
      }));
    });
    __publicField2(this, "updateShapes", (...shapes) => {
      const pageShapes = this.document.pages[this.currentPageId].shapes;
      const shapesToUpdate = shapes.filter((shape) => pageShapes[shape.id]);
      if (shapesToUpdate.length === 0)
        return this;
      return this.setState(updateShapes(this, shapesToUpdate, this.currentPageId), "updated_shapes");
    });
    __publicField2(this, "create", (shapes = [], bindings = []) => {
      if (shapes.length === 0)
        return this;
      return this.setState(createShapes(this, shapes, bindings));
    });
    __publicField2(this, "patchCreate", (shapes = [], bindings = []) => {
      if (shapes.length === 0)
        return this;
      return this.patchState(createShapes(this, shapes, bindings).after);
    });
    __publicField2(this, "delete", (ids = this.selectedIds) => {
      var _a3, _b;
      if (ids.length === 0)
        return this;
      const drawCommand = deleteShapes(this, ids);
      if (this.callbacks.onAssetDelete && ((_a3 = drawCommand.before.document) == null ? void 0 : _a3.assets) && ((_b = drawCommand.after.document) == null ? void 0 : _b.assets)) {
        const beforeAssetIds = Object.keys(drawCommand.before.document.assets).filter((k4) => !!drawCommand.before.document.assets[k4]);
        const afterAssetIds = Object.keys(drawCommand.after.document.assets).filter((k4) => !!drawCommand.after.document.assets[k4]);
        const intersection = beforeAssetIds.filter((x7) => !afterAssetIds.includes(x7));
        intersection.forEach((id2) => this.callbacks.onAssetDelete(this, id2));
      }
      return this.setState(drawCommand);
    });
    __publicField2(this, "deleteAll", () => {
      this.selectAll();
      this.delete();
      return this;
    });
    __publicField2(this, "style", (style, ids = this.selectedIds) => {
      return this.setState(styleShapes(this, ids, style));
    });
    __publicField2(this, "align", (type, ids = this.selectedIds) => {
      if (ids.length < 2)
        return this;
      return this.setState(alignShapes(this, ids, type));
    });
    __publicField2(this, "distribute", (direction, ids = this.selectedIds) => {
      if (ids.length < 3)
        return this;
      return this.setState(distributeShapes(this, ids, direction));
    });
    __publicField2(this, "stretch", (direction, ids = this.selectedIds) => {
      if (ids.length < 2)
        return this;
      return this.setState(stretchShapes(this, ids, direction));
    });
    __publicField2(this, "flipHorizontal", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(flipShapes(this, ids, "horizontal"));
    });
    __publicField2(this, "flipVertical", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(flipShapes(this, ids, "vertical"));
    });
    __publicField2(this, "moveToPage", (toPageId, fromPageId = this.currentPageId, ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      const { rendererBounds } = this;
      this.setState(moveShapesToPage(this, ids, rendererBounds, fromPageId, toPageId));
      return this;
    });
    __publicField2(this, "moveToBack", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(reorderShapes(this, ids, "toBack"));
    });
    __publicField2(this, "moveBackward", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(reorderShapes(this, ids, "backward"));
    });
    __publicField2(this, "moveForward", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(reorderShapes(this, ids, "forward"));
    });
    __publicField2(this, "moveToFront", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(reorderShapes(this, ids, "toFront"));
    });
    __publicField2(this, "nudge", (delta, isMajor = false, ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      const size = isMajor ? this.settings.showGrid ? this.currentGrid * 4 : 10 : this.settings.showGrid ? this.currentGrid : 1;
      return this.setState(translateShapes(this, ids, e.mul(delta, size)));
    });
    __publicField2(this, "duplicate", (ids = this.selectedIds, point) => {
      if (this.readOnly)
        return this;
      if (ids.length === 0)
        return this;
      return this.setState(duplicateShapes(this, ids, point));
    });
    __publicField2(this, "resetBounds", (ids = this.selectedIds) => {
      const command = resetBounds(this, ids, this.currentPageId);
      return this.setState(resetBounds(this, ids, this.currentPageId), command.id);
    });
    __publicField2(this, "toggleHidden", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(toggleShapeProp(this, ids, "isHidden"));
    });
    __publicField2(this, "toggleLocked", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(toggleShapeProp(this, ids, "isLocked"));
    });
    __publicField2(this, "toggleAspectRatioLocked", (ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      return this.setState(toggleShapeProp(this, ids, "isAspectRatioLocked"));
    });
    __publicField2(this, "toggleDecoration", (handleId, ids = this.selectedIds) => {
      if (ids.length === 0 || !(handleId === "start" || handleId === "end"))
        return this;
      return this.setState(toggleShapesDecoration(this, ids, handleId));
    });
    __publicField2(this, "setShapeProps", (props, ids = this.selectedIds) => {
      return this.setState(setShapesProps(this, ids, props));
    });
    __publicField2(this, "rotate", (delta = Math.PI * -0.5, ids = this.selectedIds) => {
      if (ids.length === 0)
        return this;
      const change = rotateShapes(this, ids, delta);
      if (!change)
        return this;
      return this.setState(change);
    });
    __publicField2(this, "group", (ids = this.selectedIds, groupId = Utils.uniqueId(), pageId = this.currentPageId) => {
      if (this.readOnly)
        return this;
      if (ids.length === 1 && this.getShape(ids[0], pageId).type === "group") {
        return this.ungroup(ids, pageId);
      }
      if (ids.length < 2)
        return this;
      const command = groupShapes(this, ids, groupId, pageId);
      if (!command)
        return this;
      return this.setState(command);
    });
    __publicField2(this, "ungroup", (ids = this.selectedIds, pageId = this.currentPageId) => {
      if (this.readOnly)
        return this;
      const groups = ids.map((id2) => this.getShape(id2, pageId)).filter((shape) => shape.type === "group");
      if (groups.length === 0)
        return this;
      const command = ungroupShapes(this, ids, groups, pageId);
      if (!command) {
        return this;
      }
      return this.setState(command);
    });
    __publicField2(this, "cancel", () => {
      var _a3, _b;
      (_b = (_a3 = this.currentTool).onCancel) == null ? void 0 : _b.call(_a3);
      return this;
    });
    __publicField2(this, "addMediaFromFiles", (_0, ..._1) => __async2(this, [_0, ..._1], function* (files, point = this.centerPoint) {
      this.setIsLoading(true);
      const shapesToCreate = [];
      const pagePoint = this.getPagePoint(point);
      for (const file of files) {
        const id2 = Utils.uniqueId();
        const extension = file.name.match(/\.[0-9a-z]+$/i);
        if (!extension)
          throw Error("No extension");
        const isImage = IMAGE_EXTENSIONS.includes(extension[0].toLowerCase());
        const isVideo = VIDEO_EXTENSIONS.includes(extension[0].toLowerCase());
        if (!(isImage || isVideo))
          throw Error("Wrong extension");
        const shapeType = isImage ? "image" : "video";
        const assetType = isImage ? "image" : "video";
        let src;
        try {
          if (this.callbacks.onAssetCreate) {
            const result = yield this.callbacks.onAssetCreate(this, file, id2);
            if (!result)
              throw Error("Asset creation callback returned false");
            src = result;
          } else {
            src = yield fileToBase64(file);
          }
          if (typeof src === "string") {
            let size = [0, 0];
            if (isImage) {
              if (extension[0] == ".svg") {
                let viewBox;
                const svgString = yield fileToText(file);
                const viewBoxAttribute = this.getViewboxFromSVG(svgString);
                if (viewBoxAttribute) {
                  viewBox = viewBoxAttribute.split(" ");
                  size[0] = parseFloat(viewBox[2]);
                  size[1] = parseFloat(viewBox[3]);
                }
              }
              if (e.isEqual(size, [0, 0])) {
                size = yield getImageSizeFromSrc(src);
              }
            } else {
              size = yield getVideoSizeFromSrc(src);
            }
            const match = Object.values(this.document.assets).find((asset) => asset.type === assetType && asset.src === src);
            let assetId;
            if (!match) {
              assetId = Utils.uniqueId();
              const asset = {
                id: assetId,
                type: assetType,
                name: file.name,
                src,
                size
              };
              this.patchState({
                document: {
                  assets: {
                    [assetId]: asset
                  }
                }
              });
            } else {
              assetId = match.id;
            }
            shapesToCreate.push(this.getImageOrVideoShapeAtPoint(id2, shapeType, point, size, assetId));
          }
        } catch (error) {
          console.warn(error);
        }
      }
      if (shapesToCreate.length) {
        const currentPoint = e.add(pagePoint, [0, 0]);
        shapesToCreate.forEach((shape, i7) => {
          const bounds = TLDR.getBounds(shape);
          if (i7 === 0) {
            currentPoint[0] -= bounds.width / 2;
            currentPoint[1] -= bounds.height / 2;
          }
          shape.point = [...currentPoint];
          currentPoint[0] += bounds.width;
        });
        const commonBounds = Utils.getCommonBounds(shapesToCreate.map(TLDR.getBounds));
        this.createShapes(...shapesToCreate);
        if (!Utils.boundsContain(this.viewport, commonBounds)) {
          this.zoomToSelection();
          if (this.zoom > 1) {
            this.resetZoom();
          }
        }
      }
      this.setIsLoading(false);
      return this;
    }));
    __publicField2(this, "getViewboxFromSVG", (svgStr) => {
      const viewBoxRegex = /.*?viewBox=["'](-?[\d.]+[, ]+-?[\d.]+[, ][\d.]+[, ][\d.]+)["']/;
      if (typeof svgStr === "string") {
        const matches = svgStr.match(viewBoxRegex);
        return matches && matches.length >= 2 ? matches[1] : null;
      }
      console.warn("could not get viewbox from svg string");
      this.setIsLoading(false);
      return null;
    });
    __publicField2(this, "onKeyDown", (key, info, e13) => {
      var _a3, _b;
      switch (e13.key) {
        case "/": {
          if (this.status === "idle" && !this.pageState.editingId) {
            const { shiftKey, metaKey, altKey, ctrlKey, spaceKey } = this;
            this.onPointerDown({
              target: "canvas",
              pointerId: 0,
              origin: info.point,
              point: info.point,
              delta: [0, 0],
              pressure: 0.5,
              shiftKey,
              ctrlKey,
              metaKey,
              altKey,
              spaceKey
            }, {
              shiftKey,
              altKey,
              ctrlKey,
              pointerId: 0,
              clientX: info.point[0],
              clientY: info.point[1]
            });
          }
          break;
        }
        case "Escape": {
          this.cancel();
          break;
        }
        case "Meta": {
          this.metaKey = true;
          break;
        }
        case "Alt": {
          this.altKey = true;
          break;
        }
        case "Control": {
          this.ctrlKey = true;
          break;
        }
        case " ": {
          this.isForcePanning = true;
          this.spaceKey = true;
          break;
        }
      }
      (_b = (_a3 = this.currentTool).onKeyDown) == null ? void 0 : _b.call(_a3, key, info, e13);
      return this;
    });
    __publicField2(this, "onKeyUp", (key, info, e13) => {
      var _a3, _b;
      if (!info)
        return;
      switch (e13.key) {
        case "/": {
          const { currentPoint, shiftKey, metaKey, altKey, ctrlKey, spaceKey } = this;
          this.onPointerUp({
            target: "canvas",
            pointerId: 0,
            origin: currentPoint,
            point: currentPoint,
            delta: [0, 0],
            pressure: 0.5,
            shiftKey,
            ctrlKey,
            metaKey,
            altKey,
            spaceKey
          }, {
            shiftKey,
            altKey,
            ctrlKey,
            pointerId: 0,
            clientX: currentPoint[0],
            clientY: currentPoint[1]
          });
          break;
        }
        case "Meta": {
          this.metaKey = false;
          break;
        }
        case "Alt": {
          this.altKey = false;
          break;
        }
        case "Control": {
          this.ctrlKey = false;
          break;
        }
        case " ": {
          this.isForcePanning = false;
          this.spaceKey = false;
          break;
        }
      }
      (_b = (_a3 = this.currentTool).onKeyUp) == null ? void 0 : _b.call(_a3, key, info, e13);
    });
    __publicField2(this, "refreshBoundingBoxes", () => {
      const force = this.shapes.map((shape) => {
        return [
          shape.id,
          __spreadValues4({
            point: [...shape.point]
          }, "label" in shape && { label: "" })
        ];
      });
      const restore = this.shapes.map((shape) => {
        return [
          shape.id,
          __spreadValues4({
            point: [...shape.point]
          }, "label" in shape && { label: shape.label })
        ];
      });
      clearPrevSize();
      this.patchState({
        document: {
          pages: {
            [this.currentPageId]: {
              shapes: Object.fromEntries(force)
            }
          }
        }
      });
      this.patchState({
        document: {
          pages: {
            [this.currentPageId]: {
              shapes: Object.fromEntries(restore)
            }
          }
        }
      });
    });
    __publicField2(this, "onDragOver", (e13) => {
      e13.preventDefault();
    });
    __publicField2(this, "onDrop", (e13) => __async2(this, null, function* () {
      var _a3;
      e13.preventDefault();
      if (this.disableAssets)
        return this;
      if ((_a3 = e13.dataTransfer.files) == null ? void 0 : _a3.length) {
        this.addMediaFromFiles(Object.values(e13.dataTransfer.files), [e13.clientX, e13.clientY]);
      }
      return this;
    }));
    __publicField2(this, "onPinchStart", (info, e13) => {
      var _a3, _b;
      (_b = (_a3 = this.currentTool).onPinchStart) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPinchEnd", (info, e13) => {
      var _a3, _b;
      return (_b = (_a3 = this.currentTool).onPinchEnd) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPinch", (info, e13) => {
      var _a3, _b;
      return (_b = (_a3 = this.currentTool).onPinch) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPan", (info, e13) => {
      if (this.appState.status === "pinching")
        return;
      const delta = e.div(info.delta, this.camera.zoom);
      const prev = this.camera.point;
      const next = e.sub(prev, delta);
      if (e.isEqual(next, prev))
        return;
      this.pan(delta);
      if (!this.isForcePanning)
        this.onPointerMove(info, e13);
    });
    __publicField2(this, "onZoom", (info, e13) => {
      if (this.state.appState.status !== "idle")
        return;
      const delta = info.delta[2] / 50;
      this.zoomBy(delta, info.point);
      this.onPointerMove(info, e13);
    });
    __publicField2(this, "updateInputs", (info) => {
      this.currentPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.shiftKey = info.shiftKey;
      this.altKey = info.altKey;
      this.ctrlKey = info.ctrlKey;
      this.metaKey = info.metaKey;
    });
    __publicField2(this, "onPointerMove", (info, e13) => {
      var _a3, _b, _c, _d, _e;
      this.previousPoint = this.currentPoint;
      this.updateInputs(info, e13);
      if (this.isForcePanning && this.isPointing) {
        (_a3 = this.onPan) == null ? void 0 : _a3.call(this, __spreadProps4(__spreadValues4({}, info), { delta: e.neg(info.delta) }), e13);
        return;
      }
      (_c = (_b = this.currentTool).onPointerMove) == null ? void 0 : _c.call(_b, info, e13);
      if (this.state.room) {
        const { users, userId } = this.state.room;
        (_e = (_d = this.callbacks).onChangePresence) == null ? void 0 : _e.call(_d, this, __spreadProps4(__spreadValues4({}, users[userId]), {
          point: this.getPagePoint(info.point),
          session: !!this.session
        }));
      }
    });
    __publicField2(this, "onPointerDown", (info, e13) => {
      var _a3, _b;
      if (e13.buttons === 4) {
        this.isForcePanning = true;
      } else if (this.isPointing) {
        return;
      }
      this.isPointing = true;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      if (this.isForcePanning)
        return;
      (_b = (_a3 = this.currentTool).onPointerDown) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointerUp", (info, e13) => {
      var _a3, _b;
      this.isPointing = false;
      if (!this.shiftKey)
        this.isForcePanning = false;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointerUp) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointCanvas", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointCanvas) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDoubleClickCanvas", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDoubleClickCanvas) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onRightPointCanvas", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onRightPointCanvas) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDragCanvas", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDragCanvas) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onReleaseCanvas", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onReleaseCanvas) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointShape", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onReleaseShape", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onReleaseShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDoubleClickShape", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDoubleClickShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onRightPointShape", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onRightPointShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDragShape", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDragShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onHoverShape", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onHoverShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onUnhoverShape", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onUnhoverShape) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointBounds", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDoubleClickBounds", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDoubleClickBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onRightPointBounds", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onRightPointBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDragBounds", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDragBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onHoverBounds", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onHoverBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onUnhoverBounds", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onUnhoverBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onReleaseBounds", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onReleaseBounds) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDoubleClickBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDoubleClickBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
      if (this.selectedIds.length !== 1)
        return;
      const shape = this.getShape(this.selectedIds[0]);
      if (shape.type === "image" || shape.type === "video") {
        const asset = this.document.assets[shape.assetId];
        const util = TLDR.getShapeUtil(shape);
        const centerA = util.getCenter(shape);
        const centerB = util.getCenter(__spreadProps4(__spreadValues4({}, shape), { size: asset.size }));
        const delta = e.sub(centerB, centerA);
        this.updateShapes({
          id: shape.id,
          point: e.sub(shape.point, delta),
          size: asset.size
        });
      }
    });
    __publicField2(this, "onRightPointBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onRightPointBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDragBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDragBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onHoverBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onHoverBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onUnhoverBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onUnhoverBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onReleaseBoundsHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onReleaseBoundsHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onPointHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onPointHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDoubleClickHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDoubleClickHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onRightPointHandle", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onRightPointHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onDragHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onDragHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onHoverHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onHoverHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onUnhoverHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onUnhoverHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onReleaseHandle", (info, e13) => {
      var _a3, _b;
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onReleaseHandle) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onShapeChange", (shape) => {
      const pageShapes = this.document.pages[this.currentPageId].shapes;
      const shapeToUpdate = __spreadValues4(__spreadValues4({}, pageShapes[shape.id]), shape);
      const patch = updateShapes(this, [shapeToUpdate], this.currentPageId).after;
      return this.patchState(patch, "patched_shapes");
    });
    __publicField2(this, "onShapeBlur", () => {
      var _a3, _b;
      if (performance.now() - this.editingStartTime < 50)
        return;
      const { editingId } = this.pageState;
      const { isToolLocked } = this.getAppState();
      if (editingId) {
        const shape = this.getShape(editingId);
        this.setEditingId();
        if (shape.type === "text") {
          if (shape.text.trim().length <= 0) {
            this.patchState(deleteShapes(this, [editingId]).after, "delete_empty_text");
          } else if (!isToolLocked) {
            this.select(editingId);
          }
        }
      }
      (_b = (_a3 = this.currentTool).onShapeBlur) == null ? void 0 : _b.call(_a3);
    });
    __publicField2(this, "onShapeClone", (info, e13) => {
      var _a3, _b;
      this.originPoint = this.getPagePoint(info.point).concat(info.pressure);
      this.updateInputs(info, e13);
      (_b = (_a3 = this.currentTool).onShapeClone) == null ? void 0 : _b.call(_a3, info, e13);
    });
    __publicField2(this, "onRenderCountChange", (ids) => {
      const appState = this.getAppState();
      if (appState.isEmptyCanvas && ids.length > 0) {
        this.patchState({
          appState: {
            isEmptyCanvas: false
          }
        }, "empty_canvas:false");
      } else if (!appState.isEmptyCanvas && ids.length <= 0) {
        this.patchState({
          appState: {
            isEmptyCanvas: true
          }
        }, "empty_canvas:true");
      }
    });
    __publicField2(this, "onError", () => {
    });
    __publicField2(this, "getShapeUtil", TLDR.getShapeUtil);
    this.callbacks = callbacks;
  }
  setStatus(status) {
    return this.patchState({
      appState: { status }
    }, `set_status:${status}`);
  }
  get isMenuOpen() {
    return this.appState.isMenuOpen;
  }
  get isLoading() {
    return this.appState.isLoading;
  }
  get disableAssets() {
    return this.appState.disableAssets;
  }
  get history() {
    return this.stack.slice(0, this.pointer + 1);
  }
  set history(commands) {
    this.replaceHistory(commands);
  }
  get document() {
    return this.state.document;
  }
  get settings() {
    return this.state.settings;
  }
  get appState() {
    return this.state.appState;
  }
  get currentPageId() {
    return this.state.appState.currentPageId;
  }
  get page() {
    return this.state.document.pages[this.currentPageId];
  }
  get shapes() {
    return Object.values(this.page.shapes);
  }
  get bindings() {
    return Object.values(this.page.bindings);
  }
  get assets() {
    return Object.values(this.document.assets);
  }
  get pageState() {
    return this.state.document.pageStates[this.currentPageId];
  }
  get camera() {
    return this.pageState.camera;
  }
  get zoom() {
    return this.pageState.camera.zoom;
  }
  get selectedIds() {
    return this.pageState.selectedIds;
  }
  createTextShapeAtPoint(point, id, patch) {
    const {
      shapes,
      appState: { currentPageId, currentStyle }
    } = this;
    const childIndex = shapes.length === 0 ? 1 : shapes.filter((shape) => shape.parentId === currentPageId).sort((a6, b7) => b7.childIndex - a6.childIndex)[0].childIndex + 1;
    const Text2 = shapeUtils["text"];
    const newShape = Text2.create({
      id: id || Utils.uniqueId(),
      parentId: currentPageId,
      childIndex,
      point,
      style: __spreadValues4({}, currentStyle)
    });
    const bounds = Text2.getBounds(newShape);
    newShape.point = e.sub(newShape.point, [bounds.width / 2, bounds.height / 2]);
    if (patch) {
      this.patchCreate([TLDR.getShapeUtil(newShape.type).create(newShape)]);
    } else {
      this.createShapes(newShape);
    }
    this.setEditingId(newShape.id, true);
    return this;
  }
  getImageOrVideoShapeAtPoint(id, type, point, size, assetId) {
    const {
      shapes,
      appState: { currentPageId, currentStyle }
    } = this;
    const childIndex = shapes.length === 0 ? 1 : shapes.filter((shape) => shape.parentId === currentPageId).sort((a6, b7) => b7.childIndex - a6.childIndex)[0].childIndex + 1;
    const Shape3 = shapeUtils[type];
    if (size[0] > this.viewport.width) {
      const r12 = size[1] / size[0];
      size[0] = this.viewport.width - FIT_TO_SCREEN_PADDING / this.camera.zoom * 2;
      size[1] = size[0] * r12;
      if (size[1] < 32 || size[1] < 32) {
        size[1] = 32;
        size[0] = size[1] / r12;
      }
    } else if (size[1] > this.viewport.height) {
      const r12 = size[0] / size[1];
      size[1] = this.viewport.height - FIT_TO_SCREEN_PADDING / this.camera.zoom * 2;
      size[0] = size[1] * r12;
      if (size[1] < 32 || size[1] < 32) {
        size[0] = 32;
        size[1] = size[0] / r12;
      }
    }
    const newShape = Shape3.create({
      id,
      parentId: currentPageId,
      childIndex,
      point,
      size,
      style: __spreadValues4({}, currentStyle),
      assetId
    });
    return newShape;
  }
  isSelected(id) {
    return this.selectedIds.includes(id);
  }
  serializeVideo(id) {
    const video = document.getElementById(id + "_video");
    if (video) {
      const canvas = document.createElement("canvas");
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext("2d").drawImage(video, 0, 0);
      return canvas.toDataURL("image/png");
    } else
      throw new Error("Video with id " + id + " not found");
  }
  serializeImage(id) {
    const image = document.getElementById(id + "_image");
    if (image) {
      const canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      canvas.getContext("2d").drawImage(image, 0, 0);
      return canvas.toDataURL("image/png");
    } else
      throw new Error("Image with id " + id + " not found");
  }
  patchAssets(assets) {
    this.document.assets = __spreadValues4(__spreadValues4({}, this.document.assets), assets);
  }
  get room() {
    return this.state.room;
  }
  get isLocal() {
    return this.state.room === void 0 || this.state.room.id === "local";
  }
  get status() {
    return this.appState.status;
  }
  get currentUser() {
    if (!this.state.room)
      return;
    return this.state.room.users[this.state.room.userId];
  }
  get centerPoint() {
    const { width, height } = this.rendererBounds;
    return e.toFixed([width / 2, height / 2]);
  }
  get currentGrid() {
    const { zoom } = this.camera;
    if (zoom < 0.15) {
      return GRID_SIZE * 16;
    } else if (zoom < 1) {
      return GRID_SIZE * 4;
    } else {
      return GRID_SIZE * 1;
    }
  }
};
var TldrawApp = _TldrawApp;
__publicField2(TldrawApp, "version", 15.4);
__publicField2(TldrawApp, "defaultDocument", {
  id: "doc",
  name: "New Document",
  version: _TldrawApp.version,
  pages: {
    page: {
      id: "page",
      name: "Page 1",
      childIndex: 1,
      shapes: {},
      bindings: {}
    }
  },
  pageStates: {
    page: {
      id: "page",
      selectedIds: [],
      camera: {
        point: [0, 0],
        zoom: 1
      }
    }
  },
  assets: {}
});
__publicField2(TldrawApp, "defaultState", {
  settings: {
    isCadSelectMode: false,
    isPenMode: false,
    isDarkMode: false,
    isZoomSnap: false,
    isFocusMode: false,
    isSnapping: false,
    isDebugMode: false,
    isReadonlyMode: false,
    keepStyleMenuOpen: false,
    nudgeDistanceLarge: 16,
    nudgeDistanceSmall: 1,
    showRotateHandles: true,
    showBindingHandles: true,
    showCloneHandles: false,
    showGrid: false,
    language: "en",
    dockPosition: "bottom"
  },
  appState: {
    status: "idle",
    activeTool: "select",
    hoveredId: void 0,
    currentPageId: "page",
    currentStyle: defaultStyle,
    isToolLocked: false,
    isMenuOpen: false,
    isEmptyCanvas: false,
    eraseLine: [],
    snapLines: [],
    isLoading: false,
    disableAssets: false
  },
  document: _TldrawApp.defaultDocument
});
__publicField2(TldrawApp, "assetSrc", "tldraw-assets.json");
var tools = {
  select: SelectTool,
  erase: EraseTool,
  ["text"]: TextTool,
  ["draw"]: DrawTool,
  ["ellipse"]: EllipseTool,
  ["rectangle"]: RectangleTool,
  ["triangle"]: TriangleTool,
  ["line"]: LineTool,
  ["arrow"]: ArrowTool,
  ["sticky"]: StickyTool
};
function useKeyboardShortcuts(ref) {
  const app = useTldrawApp();
  const canHandleEvent = React252.useCallback((ignoreMenus = false) => {
    const elm = ref.current;
    if (ignoreMenus && (app.isMenuOpen || app.settings.keepStyleMenuOpen))
      return true;
    return elm && (document.activeElement === elm || elm.contains(document.activeElement));
  }, [ref]);
  React252.useEffect(() => {
    if (!app)
      return;
    const handleCut = (e13) => {
      if (!canHandleEvent(true))
        return;
      if (app.readOnly) {
        app.copy(void 0, e13);
        return;
      }
      app.cut(void 0, e13);
    };
    const handleCopy = (e13) => {
      if (!canHandleEvent(true))
        return;
      app.copy(void 0, e13);
    };
    const handlePaste = (e13) => {
      if (!canHandleEvent(true))
        return;
      if (app.readOnly)
        return;
      app.paste(void 0, e13);
    };
    document.addEventListener("cut", handleCut);
    document.addEventListener("copy", handleCopy);
    document.addEventListener("paste", handlePaste);
    return () => {
      document.removeEventListener("cut", handleCut);
      document.removeEventListener("copy", handleCopy);
      document.removeEventListener("paste", handlePaste);
    };
  }, [app]);
  useHotkeys("v,1", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("select");
  }, [app, ref.current]);
  useHotkeys("d,p,2", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("draw");
  }, void 0, [app]);
  useHotkeys("e,3", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("erase");
  }, void 0, [app]);
  useHotkeys("r,4", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("rectangle");
  }, void 0, [app]);
  useHotkeys("o,5", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("ellipse");
  }, void 0, [app]);
  useHotkeys("g,6", () => {
    if (!canHandleEvent())
      return;
    app.selectTool("triangle");
  }, void 0, [app]);
  useHotkeys("l,7", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("line");
  }, void 0, [app]);
  useHotkeys("a,8", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("arrow");
  }, void 0, [app]);
  useHotkeys("t,9", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("text");
  }, void 0, [app]);
  useHotkeys("s,0", () => {
    if (!canHandleEvent(true))
      return;
    app.selectTool("sticky");
  }, void 0, [app]);
  useHotkeys("ctrl+shift+d,\u2318+shift+d", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.toggleDarkMode();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("ctrl+.,\u2318+.", () => {
    if (!canHandleEvent(true))
      return;
    app.toggleFocusMode();
  }, void 0, [app]);
  useHotkeys("ctrl+shift+g,\u2318+shift+g", () => {
    if (!canHandleEvent(true))
      return;
    app.toggleGrid();
  }, void 0, [app]);
  const { onNewProject, onOpenProject, onSaveProject, onSaveProjectAs, onOpenMedia } = useFileSystemHandlers();
  useHotkeys("ctrl+n,\u2318+n", (e13) => {
    if (!canHandleEvent())
      return;
    onNewProject(e13);
  }, void 0, [app]);
  useHotkeys("ctrl+s,\u2318+s", (e13) => {
    if (!canHandleEvent())
      return;
    onSaveProject(e13);
  }, void 0, [app]);
  useHotkeys("ctrl+shift+s,\u2318+shift+s", (e13) => {
    if (!canHandleEvent())
      return;
    onSaveProjectAs(e13);
  }, void 0, [app]);
  useHotkeys("ctrl+o,\u2318+o", (e13) => {
    if (!canHandleEvent())
      return;
    onOpenProject(e13);
  }, void 0, [app]);
  useHotkeys("ctrl+u,\u2318+u", (e13) => {
    if (!canHandleEvent())
      return;
    onOpenMedia(e13);
  }, void 0, [app]);
  useHotkeys("\u2318+z,ctrl+z", (e13) => {
    e13.preventDefault();
    if (!canHandleEvent(true))
      return;
    if (app.session) {
      app.cancelSession();
    } else {
      app.undo();
    }
  }, void 0, [app]);
  useHotkeys("ctrl+shift+z,\u2318+shift+z", () => {
    if (!canHandleEvent(true))
      return;
    if (app.session) {
      app.cancelSession();
    } else {
      app.redo();
    }
  }, void 0, [app]);
  useHotkeys("\u2318+u,ctrl+u", () => {
    if (!canHandleEvent())
      return;
    app.undoSelect();
  }, void 0, [app]);
  useHotkeys("ctrl+shift-u,\u2318+shift+u", () => {
    if (!canHandleEvent())
      return;
    app.redoSelect();
  }, void 0, [app]);
  useHotkeys("ctrl+=,\u2318+=,ctrl+num_subtract,\u2318+num_subtract", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.zoomIn();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("ctrl+-,\u2318+-,ctrl+num_add,\u2318+num_add", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.zoomOut();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("shift+0,ctrl+numpad_0,\u2318+numpad_0", () => {
    if (!canHandleEvent(true))
      return;
    app.resetZoom();
  }, void 0, [app]);
  useHotkeys("shift+1", () => {
    if (!canHandleEvent(true))
      return;
    app.zoomToFit();
  }, void 0, [app]);
  useHotkeys("shift+2", () => {
    if (!canHandleEvent(true))
      return;
    app.zoomToSelection();
  }, void 0, [app]);
  useHotkeys("ctrl+d,\u2318+d", (e13) => {
    if (!canHandleEvent())
      return;
    app.duplicate();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("shift+h", () => {
    if (!canHandleEvent(true))
      return;
    app.flipHorizontal();
  }, void 0, [app]);
  useHotkeys("shift+v", () => {
    if (!canHandleEvent(true))
      return;
    app.flipVertical();
  }, void 0, [app]);
  useHotkeys("escape", () => {
    if (!canHandleEvent(true))
      return;
    app.cancel();
  }, void 0, [app]);
  useHotkeys("backspace,del", () => {
    if (!canHandleEvent())
      return;
    app.delete();
  }, void 0, [app]);
  useHotkeys("\u2318+a,ctrl+a", () => {
    if (!canHandleEvent(true))
      return;
    app.selectAll();
  }, void 0, [app]);
  useHotkeys("up", () => {
    if (!canHandleEvent())
      return;
    app.nudge([0, -1], false);
  }, void 0, [app]);
  useHotkeys("right", () => {
    if (!canHandleEvent())
      return;
    app.nudge([1, 0], false);
  }, void 0, [app]);
  useHotkeys("down", () => {
    if (!canHandleEvent())
      return;
    app.nudge([0, 1], false);
  }, void 0, [app]);
  useHotkeys("left", () => {
    if (!canHandleEvent())
      return;
    app.nudge([-1, 0], false);
  }, void 0, [app]);
  useHotkeys("shift+up", () => {
    if (!canHandleEvent())
      return;
    app.nudge([0, -1], true);
  }, void 0, [app]);
  useHotkeys("shift+right", () => {
    if (!canHandleEvent())
      return;
    app.nudge([1, 0], true);
  }, void 0, [app]);
  useHotkeys("shift+down", () => {
    if (!canHandleEvent())
      return;
    app.nudge([0, 1], true);
  }, void 0, [app]);
  useHotkeys("shift+left", () => {
    if (!canHandleEvent())
      return;
    app.nudge([-1, 0], true);
  }, void 0, [app]);
  useHotkeys("\u2318+shift+l,ctrl+shift+l", () => {
    if (!canHandleEvent())
      return;
    app.toggleLocked();
  }, void 0, [app]);
  useHotkeys("\u2318+shift+c,ctrl+shift+c", (e13) => {
    if (!canHandleEvent())
      return;
    app.copySvg();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("\u2318+g,ctrl+g", (e13) => {
    if (!canHandleEvent())
      return;
    app.group();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("\u2318+shift+g,ctrl+shift+g", (e13) => {
    if (!canHandleEvent())
      return;
    app.ungroup();
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("[", () => {
    if (!canHandleEvent(true))
      return;
    app.moveBackward();
  }, void 0, [app]);
  useHotkeys("]", () => {
    if (!canHandleEvent(true))
      return;
    app.moveForward();
  }, void 0, [app]);
  useHotkeys("shift+[", () => {
    if (!canHandleEvent(true))
      return;
    app.moveToBack();
  }, void 0, [app]);
  useHotkeys("shift+]", () => {
    if (!canHandleEvent(true))
      return;
    app.moveToFront();
  }, void 0, [app]);
  useHotkeys("ctrl+shift+backspace,\u2318+shift+backspace", (e13) => {
    if (!canHandleEvent())
      return;
    if (app.settings.isDebugMode) {
      app.resetDocument();
    }
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("alt+command+l,alt+ctrl+l", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.style({ textAlign: "start" });
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("alt+command+t,alt+ctrl+t", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.style({ textAlign: "middle" });
    e13.preventDefault();
  }, void 0, [app]);
  useHotkeys("alt+command+r,alt+ctrl+r", (e13) => {
    if (!canHandleEvent(true))
      return;
    app.style({ textAlign: "end" });
    e13.preventDefault();
  }, void 0, [app]);
}
var TldrawContext = React262.createContext({});
function useTldrawApp() {
  const context = React262.useContext(TldrawContext);
  return context;
}
var styles2 = /* @__PURE__ */ new Map();
var UID = `tldraw-fonts`;
var CSS = `
@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');

@font-face {
  font-family: 'Recursive';
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@font-face {
  font-family: 'Recursive';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImKsvxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@font-face {
  font-family: 'Recursive Mono';
  font-style: normal;
  font-weight: 420;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/recursive/v23/8vI-7wMr0mhh-RQChyHEH06TlXhq_gukbYrFMk1QuAIcyEwG_X-dpEfaE5YaERmK-CImqvTxvU-MXGX2fSqasNfUlTGZnI14ZeY.woff2)
    format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC,
    U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
`;
function useStylesheet() {
  React272.useLayoutEffect(() => {
    if (styles2.get(UID))
      return;
    const style = document.createElement("style");
    style.innerHTML = CSS;
    style.setAttribute("id", UID);
    document.head.appendChild(style);
    styles2.set(UID, style);
    return () => {
      if (style && document.head.contains(style)) {
        document.head.removeChild(style);
        styles2.delete(UID);
      }
    };
  }, []);
}
function useFileSystemHandlers() {
  const app = useTldrawApp();
  const onNewProject = React282.useCallback((e13) => __async2(this, null, function* () {
    var _a3, _b;
    if (e13 && app.callbacks.onOpenProject)
      e13.preventDefault();
    (_b = (_a3 = app.callbacks).onNewProject) == null ? void 0 : _b.call(_a3, app);
  }), [app]);
  const onSaveProject = React282.useCallback((e13) => {
    var _a3, _b;
    if (e13 && app.callbacks.onOpenProject)
      e13.preventDefault();
    (_b = (_a3 = app.callbacks).onSaveProject) == null ? void 0 : _b.call(_a3, app);
  }, [app]);
  const onSaveProjectAs = React282.useCallback((e13) => {
    var _a3, _b;
    if (e13 && app.callbacks.onOpenProject)
      e13.preventDefault();
    (_b = (_a3 = app.callbacks).onSaveProjectAs) == null ? void 0 : _b.call(_a3, app);
  }, [app]);
  const onOpenProject = React282.useCallback((e13) => __async2(this, null, function* () {
    var _a3, _b;
    if (e13 && app.callbacks.onOpenProject)
      e13.preventDefault();
    (_b = (_a3 = app.callbacks).onOpenProject) == null ? void 0 : _b.call(_a3, app);
  }), [app]);
  const onOpenMedia = React282.useCallback((e13) => __async2(this, null, function* () {
    var _a3, _b;
    if (e13 && app.callbacks.onOpenMedia)
      e13.preventDefault();
    (_b = (_a3 = app.callbacks).onOpenMedia) == null ? void 0 : _b.call(_a3, app);
  }), [app]);
  return {
    onNewProject,
    onSaveProject,
    onSaveProjectAs,
    onOpenProject,
    onOpenMedia
  };
}
var style_menu_color = "\u0627\u0644\u0644\u0648\u0646";
var style_menu_fill = "\u064A\u0645\u0644\u0623";
var style_menu_dash = "\u0645\u062A\u0642\u0637\u0639";
var style_menu_size = "\u062D\u062C\u0645";
var style_menu_keep_open = "\u062A\u0628\u0642\u0649 \u0645\u0641\u062A\u0648\u062D\u0629";
var style_menu_font = "\u0627\u0644\u062E\u0637";
var style_menu_align = "\u0645\u062D\u0627\u0630\u0627\u0629";
var styles22 = "\u0627\u0644\u0623\u0646\u0645\u0627\u0637";
var zoom_in = "\u062A\u0643\u0628\u064A\u0631";
var zoom_out = "\u062A\u0635\u063A\u064A\u0631";
var to = "\u0625\u0644\u0649";
var to_selection = "\u0644\u0644\u0627\u062E\u062A\u064A\u0627\u0631";
var to_fit = "\u062A\u0646\u0627\u0633\u0628";
var menu_file = "\u0645\u0644\u0641";
var menu_edit = "\u062A\u062D\u0631\u064A\u0631";
var menu_view = "\u0645\u0639\u0627\u064A\u0646\u0629";
var menu_preferences = "\u0627\u0644\u062A\u0641\u0636\u064A\u0644\u0627\u062A";
var menu_sign_in = "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644";
var menu_sign_out = "\u062E\u0631\u0648\u062C";
var sponsored = "\u0628\u0631\u0639\u0627\u064A\u0629";
var become_a_sponsor = "\u0643\u0646 \u0631\u0627\u0639\u064A\u0627\u064B";
var zoom_to_content = "\u0627\u0644\u0639\u0648\u062F\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u062A\u0648\u0649";
var zoom_to_selection = "\u062A\u0643\u0628\u064A\u0631 \u0644\u0644\u062A\u062D\u062F\u064A\u062F";
var zoom_to_fit = "\u062A\u0643\u0628\u064A\u0631 \u0644\u062A\u0646\u0627\u0633\u0628";
var zoom_to = "\u062A\u0643\u0628\u064A\u0631 \u0625\u0644\u0649";
var preferences_dark_mode = "\u0627\u0644\u0648\u0636\u0639 \u0627\u0644\u062F\u0627\u0643\u0646";
var preferences_focus_mode = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0631\u0643\u064A\u0632";
var preferences_debug_mode = "\u0648\u0636\u0639 \u0627\u0644\u062A\u0635\u062D\u064A\u062D";
var preferences_show_grid = "\u0627\u0638\u0647\u0631 \u0627\u0644\u0634\u0628\u0643\u0629";
var preferences_use_cad_selection = "\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062F CAD";
var preferences_keep_stylemenu_open = "\u0627\u0644\u0627\u062D\u062A\u0641\u0627\u0638 \u0628\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0646\u0645\u0637 \u0645\u0641\u062A\u0648\u062D\u0629";
var preferences_always_show_snaps = "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0644\u0642\u0637\u0627\u062A \u062F\u0627\u0626\u0645\u064B\u0627";
var preferences_rotate_handles = "\u062A\u062F\u0648\u064A\u0631 \u0627\u0644\u0645\u0642\u0627\u0628\u0636";
var preferences_binding_handles = "\u0645\u0642\u0627\u0628\u0636 \u0645\u0644\u0632\u0645\u0629";
var preferences_clone_handles = "\u0645\u0642\u0627\u0628\u0636 \u0627\u0633\u062A\u0646\u0633\u0627\u062E";
var undo = "\u0627\u0644\u063A\u0627\u0621";
var redo = "\u0625\u0639\u0627\u062F\u0629";
var cut = "\u0642\u0637\u0639";
var copy = "\u0646\u0633\u062D";
var paste = "\u0644\u0635\u0642";
var copy_as = "\u0646\u0633\u062E \u0627\u0644\u0649";
var export_as = "\u0635\u062F\u0631 \u0627\u0644\u0649";
var select_all = "\u0627\u062E\u062A\u0631 \u0627\u0644\u0643\u0644";
var select_none = "\u0644\u0627 \u062A\u062E\u062A\u0631 \u0634\u064A\u0621";
var delete2 = "\u062D\u0630\u0641";
var new_project = "\u0645\u0634\u0631\u0648\u0639 \u062C\u062F\u064A\u062F";
var open = "\u0641\u062A\u062D";
var save = "\u062D\u0641\u0638";
var save_as = "\u062D\u0641\u0638 \u0628\u0627\u0633\u0645";
var upload_media = "\u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0648\u0633\u0627\u0626\u0637";
var create_page = "\u0625\u0646\u0634\u0627\u0621 \u0635\u0641\u062D\u0629";
var new_page = "\u0635\u0641\u062D\u0629 \u062C\u062F\u064A\u062F\u0629";
var page_name = "\u0627\u0633\u0645 \u0627\u0644\u0635\u0641\u062D\u0629";
var duplicate = "\u0646\u0633\u062E";
var cancel = "\u0627\u0644\u063A\u0627\u0621";
var copy_invite_link = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u0627\u0644\u062F\u0639\u0648\u0629";
var copy_readonly_link = "\u0646\u0633\u062E \u0631\u0627\u0628\u0637 \u062F\u0639\u0648\u0629 \u0627\u0644\u0642\u0631\u0627\u0621\u0629 \u0641\u0642\u0637";
var create_multiplayer_project = "\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var copy_multiplayer_project = "\u0646\u0633\u062E \u0625\u0644\u0649 \u0645\u0634\u0631\u0648\u0639 \u0645\u062A\u0639\u062F\u062F \u0627\u0644\u0644\u0627\u0639\u0628\u064A\u0646";
var select = "\u0627\u062E\u062A\u0631";
var eraser = "\u0645\u0645\u062D\u0627\u0629";
var draw = "\u0631\u0633\u0645";
var arrow = "\u0633\u0647\u0645";
var text = "\u0646\u0635";
var sticky = "\u0644\u0627\u0635\u0642";
var Rectangle2 = "\u0645\u0631\u0628\u0639";
var Ellipse2 = "\u0628\u064A\u0636\u0627\u0648\u064A";
var Triangle2 = "\u0645\u062B\u0644\u062B";
var Line = "\u062E\u0637";
var rotate = "\u062F\u0648\u0651\u0631";
var lock_aspect_ratio = "\u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var unlock_aspect_ratio = "\u0641\u062A\u062D \u0642\u0641\u0644 \u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0628\u0639\u0627\u062F";
var group = "\u062C\u0645\u0651\u0639";
var ungroup = "\u0641\u0643 \u0627\u0644\u062A\u062C\u0645\u0639";
var move_to_back = "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u062E\u0644\u0641";
var move_backward = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u062E\u0644\u0641";
var move_forward = "\u062A\u062D\u0631\u064A\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var move_to_front = "\u062A\u062D\u0631\u0643 \u0644\u0644\u0623\u0645\u0627\u0645";
var reset_angle = "\u0625\u0639\u0627\u062F\u0629 \u0636\u0628\u0637 \u0627\u0644\u0632\u0627\u0648\u064A\u0629";
var lock = "\u0642\u0641\u0644";
var unlock = "\u0627\u0644\u063A\u0627\u0621 \u0627\u0644\u0642\u0641\u0644";
var move_to_page = "\u0627\u0646\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629";
var flip_horizontal = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0623\u0641\u0642\u064A";
var flip_vertical = "\u0627\u0646\u0639\u0643\u0627\u0633 \u0639\u0645\u0648\u062F\u064A";
var move = "\u062D\u0631\u0651\u0643";
var to_front = "\u0644\u0644\u0627\u0645\u0627\u0645";
var forward = "\u0644\u0644\u062E\u0644\u0641";
var backward = "\u0644\u0644\u0648\u0631\u0627\u0621";
var back = "\u062E\u0644\u0641";
var language = "\u0644\u063A\u0629";
var translation_link = "\u0644\u0644\u0645\u0632\u064A\u062F";
var dock_position = "\u0645\u0648\u0642\u0639 \u0627\u0644\u0627\u062F\u0648\u0627\u062A";
var bottom = "\u0627\u0633\u0641\u0644";
var left = "\u064A\u0633\u0627\u0631";
var right = "\u064A\u0645\u064A\u0646";
var top2 = "\u0623\u0639\u0644\u0649";
var page = "\u0635\u0641\u062D\u0629";
var keyboard_shortcuts = "\u0627\u062E\u062A\u0635\u0627\u0631\u0627\u062A \u0644\u0648\u062D\u0629 \u0627\u0644\u0645\u0641\u0627\u062A\u064A\u062D";
var search = "\u0628\u062D\u062B";
var loading = "{dots}\u062A\u062D\u0645\u064A\u0644 ";
var ar_default = {
  "style.menu.color": style_menu_color,
  "style.menu.fill": style_menu_fill,
  "style.menu.dash": style_menu_dash,
  "style.menu.size": style_menu_size,
  "style.menu.keep.open": style_menu_keep_open,
  "style.menu.font": style_menu_font,
  "style.menu.align": style_menu_align,
  styles: styles22,
  "zoom.in": zoom_in,
  "zoom.out": zoom_out,
  to,
  "to.selection": to_selection,
  "to.fit": to_fit,
  "menu.file": menu_file,
  "menu.edit": menu_edit,
  "menu.view": menu_view,
  "menu.preferences": menu_preferences,
  "menu.sign.in": menu_sign_in,
  "menu.sign.out": menu_sign_out,
  sponsored,
  "become.a.sponsor": become_a_sponsor,
  "zoom.to.content": zoom_to_content,
  "zoom.to.selection": zoom_to_selection,
  "zoom.to.fit": zoom_to_fit,
  "zoom.to": zoom_to,
  "preferences.dark.mode": preferences_dark_mode,
  "preferences.focus.mode": preferences_focus_mode,
  "preferences.debug.mode": preferences_debug_mode,
  "preferences.show.grid": preferences_show_grid,
  "preferences.use.cad.selection": preferences_use_cad_selection,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open,
  "preferences.always.show.snaps": preferences_always_show_snaps,
  "preferences.rotate.handles": preferences_rotate_handles,
  "preferences.binding.handles": preferences_binding_handles,
  "preferences.clone.handles": preferences_clone_handles,
  undo,
  redo,
  cut,
  copy,
  paste,
  "copy.as": copy_as,
  "export.as": export_as,
  "select.all": select_all,
  "select.none": select_none,
  delete: delete2,
  "new.project": new_project,
  open,
  save,
  "save.as": save_as,
  "upload.media": upload_media,
  "create.page": create_page,
  "new.page": new_page,
  "page.name": page_name,
  duplicate,
  cancel,
  "copy.invite.link": copy_invite_link,
  "copy.readonly.link": copy_readonly_link,
  "create.multiplayer.project": create_multiplayer_project,
  "copy.multiplayer.project": copy_multiplayer_project,
  select,
  eraser,
  draw,
  arrow,
  text,
  sticky,
  Rectangle: Rectangle2,
  Ellipse: Ellipse2,
  Triangle: Triangle2,
  Line,
  rotate,
  "lock.aspect.ratio": lock_aspect_ratio,
  "unlock.aspect.ratio": unlock_aspect_ratio,
  group,
  ungroup,
  "move.to.back": move_to_back,
  "move.backward": move_backward,
  "move.forward": move_forward,
  "move.to.front": move_to_front,
  "reset.angle": reset_angle,
  lock,
  unlock,
  "move.to.page": move_to_page,
  "flip.horizontal": flip_horizontal,
  "flip.vertical": flip_vertical,
  move,
  "to.front": to_front,
  forward,
  backward,
  back,
  language,
  "translation.link": translation_link,
  "dock.position": dock_position,
  bottom,
  left,
  right,
  top: top2,
  page,
  "keyboard.shortcuts": keyboard_shortcuts,
  search,
  loading
};
var style_menu_color2 = "Farve";
var style_menu_fill2 = "Fyld";
var style_menu_dash2 = "Streg";
var style_menu_size2 = "St\xF8rrelse";
var style_menu_keep_open2 = "Hold \xE5ben";
var style_menu_font2 = "Skrifttype";
var style_menu_align2 = "Juster";
var styles3 = "Format";
var zoom_in2 = "Zoom ind";
var zoom_out2 = "Zoom ud";
var to2 = "til";
var to_selection2 = "Til valgte";
var to_fit2 = "Til l\xE6rred";
var menu_file2 = "Fil";
var menu_edit2 = "Rediger";
var menu_view2 = "Vis";
var menu_preferences2 = "Indstillinger";
var menu_sign_in2 = "Log ind";
var menu_sign_out2 = "Log ud";
var sponsored2 = "Sponsoreret";
var become_a_sponsor2 = "Bliv sponsor";
var zoom_to_selection2 = "Zoom til valgte";
var zoom_to_fit2 = "Zoom til l\xE6rred";
var zoom_to2 = "Zoom til";
var preferences_dark_mode2 = "M\xF8rkt udseende";
var preferences_focus_mode2 = "Fokus tilstand";
var preferences_debug_mode2 = "Debug tilstand";
var preferences_show_grid2 = "Vis net";
var preferences_use_cad_selection2 = "Brug CAD udv\xE6lgelse";
var preferences_keep_stylemenu_open2 = "Hold formatmenuen \xE5ben";
var preferences_always_show_snaps2 = "Vis altid snaps";
var preferences_rotate_handles2 = "Roteringsh\xE5ndtag";
var preferences_binding_handles2 = "Bindingsh\xE5ndtag";
var preferences_clone_handles2 = "Kloningsh\xE5ndtag";
var undo2 = "Fortryd";
var redo2 = "Gentag";
var cut2 = "Klip";
var copy2 = "Kopier";
var paste2 = "Inds\xE6t";
var copy_as2 = "Kopier som";
var export_as2 = "Eksporter som";
var select_all2 = "V\xE6lg alt";
var select_none2 = "Frav\xE6lg alt";
var delete3 = "Slet";
var new_project2 = "Nyt projekt";
var open2 = "\xC5ben";
var save2 = "Gem";
var save_as2 = "Gem som";
var upload_media2 = "Upload medie";
var create_page2 = "Opret side";
var new_page2 = "Ny side";
var page_name2 = "Sidenavn";
var duplicate2 = "Dupliker";
var cancel2 = "Fortryd";
var copy_invite_link2 = "Kopier invitationslink";
var create_multiplayer_project2 = "Opret multiplayer projekt";
var copy_multiplayer_project2 = "Kopier til multiplayer projekt";
var select2 = "V\xE6lg";
var eraser2 = "Viskel\xE6der";
var draw2 = "Tegn";
var arrow2 = "Pil";
var text2 = "Tekst";
var sticky2 = "Note";
var Rectangle3 = "Rektangel";
var Ellipse3 = "Ellipse";
var Triangle3 = "Trekant";
var Line2 = "Linje";
var rotate2 = "Roter";
var lock_aspect_ratio2 = "L\xE5s billedformat";
var unlock_aspect_ratio2 = "Frig\xF8r billedformat";
var group2 = "Grupper";
var ungroup2 = "Opdel gruppe";
var move_to_back2 = "Placer bagerst";
var move_backward2 = "Flyt tilbage";
var move_forward2 = "Flyt frem";
var move_to_front2 = "L\xE6g forrest";
var reset_angle2 = "Nulstil vinkel";
var lock2 = "L\xE5s";
var unlock2 = "L\xE5s op";
var move_to_page2 = "Flyt til side";
var flip_horizontal2 = "Vend vandret";
var flip_vertical2 = "Vend lodret";
var move2 = "Flyt";
var to_front2 = "Forrest";
var forward2 = "Frem";
var backward2 = "Tilbage";
var back2 = "Bagerst";
var language2 = "Sprog";
var da_default = {
  "style.menu.color": style_menu_color2,
  "style.menu.fill": style_menu_fill2,
  "style.menu.dash": style_menu_dash2,
  "style.menu.size": style_menu_size2,
  "style.menu.keep.open": style_menu_keep_open2,
  "style.menu.font": style_menu_font2,
  "style.menu.align": style_menu_align2,
  styles: styles3,
  "zoom.in": zoom_in2,
  "zoom.out": zoom_out2,
  to: to2,
  "to.selection": to_selection2,
  "to.fit": to_fit2,
  "menu.file": menu_file2,
  "menu.edit": menu_edit2,
  "menu.view": menu_view2,
  "menu.preferences": menu_preferences2,
  "menu.sign.in": menu_sign_in2,
  "menu.sign.out": menu_sign_out2,
  sponsored: sponsored2,
  "become.a.sponsor": become_a_sponsor2,
  "zoom.to.selection": zoom_to_selection2,
  "zoom.to.fit": zoom_to_fit2,
  "zoom.to": zoom_to2,
  "preferences.dark.mode": preferences_dark_mode2,
  "preferences.focus.mode": preferences_focus_mode2,
  "preferences.debug.mode": preferences_debug_mode2,
  "preferences.show.grid": preferences_show_grid2,
  "preferences.use.cad.selection": preferences_use_cad_selection2,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open2,
  "preferences.always.show.snaps": preferences_always_show_snaps2,
  "preferences.rotate.handles": preferences_rotate_handles2,
  "preferences.binding.handles": preferences_binding_handles2,
  "preferences.clone.handles": preferences_clone_handles2,
  undo: undo2,
  redo: redo2,
  cut: cut2,
  copy: copy2,
  paste: paste2,
  "copy.as": copy_as2,
  "export.as": export_as2,
  "select.all": select_all2,
  "select.none": select_none2,
  delete: delete3,
  "new.project": new_project2,
  open: open2,
  save: save2,
  "save.as": save_as2,
  "upload.media": upload_media2,
  "create.page": create_page2,
  "new.page": new_page2,
  "page.name": page_name2,
  duplicate: duplicate2,
  cancel: cancel2,
  "copy.invite.link": copy_invite_link2,
  "create.multiplayer.project": create_multiplayer_project2,
  "copy.multiplayer.project": copy_multiplayer_project2,
  select: select2,
  eraser: eraser2,
  draw: draw2,
  arrow: arrow2,
  text: text2,
  sticky: sticky2,
  Rectangle: Rectangle3,
  Ellipse: Ellipse3,
  Triangle: Triangle3,
  Line: Line2,
  rotate: rotate2,
  "lock.aspect.ratio": lock_aspect_ratio2,
  "unlock.aspect.ratio": unlock_aspect_ratio2,
  group: group2,
  ungroup: ungroup2,
  "move.to.back": move_to_back2,
  "move.backward": move_backward2,
  "move.forward": move_forward2,
  "move.to.front": move_to_front2,
  "reset.angle": reset_angle2,
  lock: lock2,
  unlock: unlock2,
  "move.to.page": move_to_page2,
  "flip.horizontal": flip_horizontal2,
  "flip.vertical": flip_vertical2,
  move: move2,
  "to.front": to_front2,
  forward: forward2,
  backward: backward2,
  back: back2,
  language: language2
};
var style_menu_color3 = "Farbe";
var style_menu_fill3 = "F\xFCllen";
var style_menu_dash3 = "Strich";
var style_menu_size3 = "Gr\xF6\xDFe";
var style_menu_keep_open3 = "Offen halten";
var style_menu_font3 = "Schriftart";
var style_menu_align3 = "Ausrichten";
var styles4 = "Stile";
var zoom_in3 = "Heranzoomen";
var zoom_out3 = "Herauszoomen";
var to3 = "zu";
var to_selection3 = "Zur Auswahl";
var to_fit3 = "Anpassen";
var menu_file3 = "Datei";
var menu_edit3 = "Bearbeiten";
var menu_view3 = "Ansicht";
var menu_preferences3 = "Pr\xE4ferenzen";
var menu_sign_in3 = "Einloggen";
var menu_sign_out3 = "Ausloggen";
var sponsored3 = "Gesponsert";
var become_a_sponsor3 = "Sponsor werden";
var zoom_to_selection3 = "Zur Auswahl zoomen";
var zoom_to_fit3 = "Zoom anpassen";
var zoom_to3 = "Zoomen nach";
var preferences_dark_mode3 = "Dunkler Modus";
var preferences_focus_mode3 = "Fokus Modus";
var preferences_debug_mode3 = "Debug Modus";
var preferences_show_grid3 = "Gitter anzeigen";
var preferences_use_cad_selection3 = "CAD Auswahl verwenden";
var preferences_keep_stylemenu_open3 = "Stilmen\xFC offen halten";
var preferences_always_show_snaps3 = "Hilfslinien immer anzeigen";
var preferences_rotate_handles3 = "Rotiergriffe";
var preferences_binding_handles3 = "Bindegriffe";
var preferences_clone_handles3 = "Klongriffe";
var undo3 = "R\xFCckg\xE4ngig machen";
var redo3 = "Wiederherstellen";
var cut3 = "Ausschneiden";
var copy3 = "Kopieren";
var paste3 = "Einf\xFCgen";
var copy_as3 = "Kopieren als";
var export_as3 = "Exportieren als";
var select_all3 = "Alles ausw\xE4hlen";
var select_none3 = "Nichts ausw\xE4hlen";
var delete4 = "L\xF6schen";
var new_project3 = "Neues Projekt";
var open3 = "\xD6ffnen";
var save3 = "Speichern";
var save_as3 = "Speichern als";
var upload_media3 = "Medien hochladen";
var create_page3 = "Seite erstellen";
var new_page3 = "Neue Seite";
var page_name3 = "Seitenname";
var duplicate3 = "Duplizieren";
var cancel3 = "Abbrechen";
var copy_invite_link3 = "Einladungslink kopieren";
var create_multiplayer_project3 = "Mehrspielerprojekt kreieren";
var copy_multiplayer_project3 = "In Mehrspielerprojekt kopieren";
var select3 = "Ausw\xE4hlen";
var eraser3 = "Radierer";
var draw3 = "Malen";
var arrow3 = "Pfeil";
var text3 = "Text";
var sticky3 = "Notiz";
var Rectangle4 = "Rechteck";
var Ellipse4 = "Ellipse";
var Triangle4 = "Dreieck";
var Line3 = "Linie";
var rotate3 = "Drehen";
var lock_aspect_ratio3 = "Seitenverh\xE4ltnis sperren";
var unlock_aspect_ratio3 = "Seitenverh\xE4ltnis entsperren";
var group3 = "Gruppieren";
var ungroup3 = "Gruppierung aufheben";
var move_to_back3 = "Nach Hinten verschieben";
var move_backward3 = "R\xFCckw\xE4rts schieben";
var move_forward3 = "Vorw\xE4rts schieben";
var move_to_front3 = "Nach Vorne verschieben";
var reset_angle3 = "Winkel zur\xFCcksetzen";
var lock3 = "Sperren";
var unlock3 = "Entsperren";
var move_to_page3 = "Zu Seite verschieben";
var flip_horizontal3 = "Horizontal spiegeln";
var flip_vertical3 = "Vertikal spiegeln";
var move3 = "Verschieben";
var to_front3 = "Nach Vorne";
var forward3 = "Vorw\xE4rts";
var backward3 = "R\xFCckw\xE4rts";
var back3 = "Hinten";
var language3 = "Sprache";
var de_default = {
  "style.menu.color": style_menu_color3,
  "style.menu.fill": style_menu_fill3,
  "style.menu.dash": style_menu_dash3,
  "style.menu.size": style_menu_size3,
  "style.menu.keep.open": style_menu_keep_open3,
  "style.menu.font": style_menu_font3,
  "style.menu.align": style_menu_align3,
  styles: styles4,
  "zoom.in": zoom_in3,
  "zoom.out": zoom_out3,
  to: to3,
  "to.selection": to_selection3,
  "to.fit": to_fit3,
  "menu.file": menu_file3,
  "menu.edit": menu_edit3,
  "menu.view": menu_view3,
  "menu.preferences": menu_preferences3,
  "menu.sign.in": menu_sign_in3,
  "menu.sign.out": menu_sign_out3,
  sponsored: sponsored3,
  "become.a.sponsor": become_a_sponsor3,
  "zoom.to.selection": zoom_to_selection3,
  "zoom.to.fit": zoom_to_fit3,
  "zoom.to": zoom_to3,
  "preferences.dark.mode": preferences_dark_mode3,
  "preferences.focus.mode": preferences_focus_mode3,
  "preferences.debug.mode": preferences_debug_mode3,
  "preferences.show.grid": preferences_show_grid3,
  "preferences.use.cad.selection": preferences_use_cad_selection3,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open3,
  "preferences.always.show.snaps": preferences_always_show_snaps3,
  "preferences.rotate.handles": preferences_rotate_handles3,
  "preferences.binding.handles": preferences_binding_handles3,
  "preferences.clone.handles": preferences_clone_handles3,
  undo: undo3,
  redo: redo3,
  cut: cut3,
  copy: copy3,
  paste: paste3,
  "copy.as": copy_as3,
  "export.as": export_as3,
  "select.all": select_all3,
  "select.none": select_none3,
  delete: delete4,
  "new.project": new_project3,
  open: open3,
  save: save3,
  "save.as": save_as3,
  "upload.media": upload_media3,
  "create.page": create_page3,
  "new.page": new_page3,
  "page.name": page_name3,
  duplicate: duplicate3,
  cancel: cancel3,
  "copy.invite.link": copy_invite_link3,
  "create.multiplayer.project": create_multiplayer_project3,
  "copy.multiplayer.project": copy_multiplayer_project3,
  select: select3,
  eraser: eraser3,
  draw: draw3,
  arrow: arrow3,
  text: text3,
  sticky: sticky3,
  Rectangle: Rectangle4,
  Ellipse: Ellipse4,
  Triangle: Triangle4,
  Line: Line3,
  rotate: rotate3,
  "lock.aspect.ratio": lock_aspect_ratio3,
  "unlock.aspect.ratio": unlock_aspect_ratio3,
  group: group3,
  ungroup: ungroup3,
  "move.to.back": move_to_back3,
  "move.backward": move_backward3,
  "move.forward": move_forward3,
  "move.to.front": move_to_front3,
  "reset.angle": reset_angle3,
  lock: lock3,
  unlock: unlock3,
  "move.to.page": move_to_page3,
  "flip.horizontal": flip_horizontal3,
  "flip.vertical": flip_vertical3,
  move: move3,
  "to.front": to_front3,
  forward: forward3,
  backward: backward3,
  back: back3,
  language: language3
};
var en_default = {};
var style_menu_color4 = "Color";
var style_menu_fill4 = "Relleno";
var style_menu_dash4 = "L\xEDnea";
var style_menu_size4 = "Tama\xF1o";
var style_menu_keep_open4 = "Mantener abierto";
var style_menu_font4 = "Fuente";
var style_menu_align4 = "Alineaci\xF3n";
var styles5 = "Estilos";
var zoom_in4 = "Acercar";
var zoom_out4 = "Alejar";
var to4 = "A";
var to_selection4 = "A la selecci\xF3n";
var to_fit4 = "Ajustar";
var menu_file4 = "Archivo";
var menu_edit4 = "Editar";
var menu_view4 = "Ver";
var menu_preferences4 = "Preferencias";
var menu_sign_in4 = "Iniciar sesi\xF3n";
var menu_sign_out4 = "Cerrar sesi\xF3n";
var sponsored4 = "Patrocinado";
var become_a_sponsor4 = "Convi\xE9rtete en patrocinador";
var zoom_to_selection4 = "Acercar a la selecci\xF3n";
var zoom_to_fit4 = "Ajustar a la ventana";
var zoom_to4 = "Acercar a";
var preferences_dark_mode4 = "Modo oscuro";
var preferences_focus_mode4 = "Modo concentraci\xF3n";
var preferences_debug_mode4 = "Modo depuraci\xF3n";
var preferences_show_grid4 = "Mostrar cuadr\xEDcula";
var preferences_use_cad_selection4 = "Usar selecci\xF3n CAD";
var preferences_keep_stylemenu_open4 = "Mantener men\xFA de estilos abierto";
var preferences_always_show_snaps4 = "Mostrar puntos de ajuste";
var preferences_rotate_handles4 = "Control de rotaci\xF3n";
var preferences_binding_handles4 = "Control de vinculaci\xF3n";
var preferences_clone_handles4 = "Control de clonaci\xF3n";
var undo4 = "Deshacer";
var redo4 = "Rehacer";
var cut4 = "Cortar";
var copy4 = "Copiar";
var paste4 = "Pegar";
var copy_as4 = "Copiar como";
var export_as4 = "Exportar como";
var select_all4 = "Selecionar todo";
var select_none4 = "Selecionar nada";
var delete5 = "Borrar";
var new_project4 = "Nuevo Proyecto";
var open4 = "Abrir";
var save4 = "Guardar";
var save_as4 = "Guardar como";
var upload_media4 = "Subir medios";
var create_page4 = "Crear p\xE1gina";
var new_page4 = "Nueva p\xE1gina";
var page_name4 = "Nombre de p\xE1gina";
var page2 = "P\xE1gina";
var duplicate4 = "Duplicar";
var cancel4 = "Cancelar";
var copy_invite_link4 = "Copiar invitaci\xF3n";
var create_multiplayer_project4 = "Crear proyecto multijugador";
var copy_multiplayer_project4 = "Copiar proyecto multijugador";
var select4 = "Seleccionar";
var eraser4 = "Borrador";
var draw4 = "Dibujar";
var arrow4 = "Flecha";
var text4 = "Texto";
var sticky4 = "Pegatina";
var Rectangle5 = "Rect\xE1ngulo";
var Ellipse5 = "Elipse";
var Triangle5 = "Tri\xE1ngulo";
var Line4 = "L\xEDnea";
var rotate4 = "Rotar";
var lock_aspect_ratio4 = "Bloquear relaci\xF3n de aspecto";
var unlock_aspect_ratio4 = "Desbloquear relaci\xF3n de aspecto";
var group4 = "Agrupar";
var ungroup4 = "Desagrupar";
var move_to_back4 = "Mover al fondo";
var move_backward4 = "Mover atr\xE1s";
var move_forward4 = "Mover adelante";
var move_to_front4 = "Mover al frente";
var reset_angle4 = "Restablecer \xE1ngulo";
var lock4 = "Bloquear";
var unlock4 = "Desbloquear";
var move_to_page4 = "Mover a p\xE1gina";
var flip_horizontal4 = "Voltear horizontalmente";
var flip_vertical4 = "Voltear verticalmente";
var move4 = "Mover";
var to_front4 = "Al frente";
var forward4 = "Adelante";
var backward4 = "Atr\xE1s";
var back4 = "Fondo";
var language4 = "Idioma";
var es_default = {
  "style.menu.color": style_menu_color4,
  "style.menu.fill": style_menu_fill4,
  "style.menu.dash": style_menu_dash4,
  "style.menu.size": style_menu_size4,
  "style.menu.keep.open": style_menu_keep_open4,
  "style.menu.font": style_menu_font4,
  "style.menu.align": style_menu_align4,
  styles: styles5,
  "zoom.in": zoom_in4,
  "zoom.out": zoom_out4,
  to: to4,
  "to.selection": to_selection4,
  "to.fit": to_fit4,
  "menu.file": menu_file4,
  "menu.edit": menu_edit4,
  "menu.view": menu_view4,
  "menu.preferences": menu_preferences4,
  "menu.sign.in": menu_sign_in4,
  "menu.sign.out": menu_sign_out4,
  sponsored: sponsored4,
  "become.a.sponsor": become_a_sponsor4,
  "zoom.to.selection": zoom_to_selection4,
  "zoom.to.fit": zoom_to_fit4,
  "zoom.to": zoom_to4,
  "preferences.dark.mode": preferences_dark_mode4,
  "preferences.focus.mode": preferences_focus_mode4,
  "preferences.debug.mode": preferences_debug_mode4,
  "preferences.show.grid": preferences_show_grid4,
  "preferences.use.cad.selection": preferences_use_cad_selection4,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open4,
  "preferences.always.show.snaps": preferences_always_show_snaps4,
  "preferences.rotate.handles": preferences_rotate_handles4,
  "preferences.binding.handles": preferences_binding_handles4,
  "preferences.clone.handles": preferences_clone_handles4,
  undo: undo4,
  redo: redo4,
  cut: cut4,
  copy: copy4,
  paste: paste4,
  "copy.as": copy_as4,
  "export.as": export_as4,
  "select.all": select_all4,
  "select.none": select_none4,
  delete: delete5,
  "new.project": new_project4,
  open: open4,
  save: save4,
  "save.as": save_as4,
  "upload.media": upload_media4,
  "create.page": create_page4,
  "new.page": new_page4,
  "page.name": page_name4,
  page: page2,
  duplicate: duplicate4,
  cancel: cancel4,
  "copy.invite.link": copy_invite_link4,
  "create.multiplayer.project": create_multiplayer_project4,
  "copy.multiplayer.project": copy_multiplayer_project4,
  select: select4,
  eraser: eraser4,
  draw: draw4,
  arrow: arrow4,
  text: text4,
  sticky: sticky4,
  Rectangle: Rectangle5,
  Ellipse: Ellipse5,
  Triangle: Triangle5,
  Line: Line4,
  rotate: rotate4,
  "lock.aspect.ratio": lock_aspect_ratio4,
  "unlock.aspect.ratio": unlock_aspect_ratio4,
  group: group4,
  ungroup: ungroup4,
  "move.to.back": move_to_back4,
  "move.backward": move_backward4,
  "move.forward": move_forward4,
  "move.to.front": move_to_front4,
  "reset.angle": reset_angle4,
  lock: lock4,
  unlock: unlock4,
  "move.to.page": move_to_page4,
  "flip.horizontal": flip_horizontal4,
  "flip.vertical": flip_vertical4,
  move: move4,
  "to.front": to_front4,
  forward: forward4,
  backward: backward4,
  back: back4,
  language: language4
};
var style_menu_color5 = "\u0631\u0646\u06AF";
var style_menu_fill5 = "\u062A\u0648\u067E\u064F\u0631";
var style_menu_dash5 = "\u062E\u0637\u200C \u0686\u06CC\u0646";
var style_menu_size5 = "\u0627\u0646\u062F\u0627\u0632\u0647";
var style_menu_keep_open5 = "\u0628\u0627\u0632 \u0628\u0627\u0634";
var style_menu_font5 = "\u0641\u0648\u0646\u062A";
var style_menu_align5 = "\u062A\u0631\u0627\u0632";
var styles6 = "\u0627\u0633\u062A\u0627\u06CC\u0644\u200C\u0647\u0627";
var zoom_in5 = "\u0632\u0648\u0645 \u062C\u0644\u0648";
var zoom_out5 = "\u0632\u0648\u0645 \u0639\u0642\u0628";
var to5 = "\u0628\u0647";
var to_selection5 = "\u0628\u0647 \u0627\u0646\u062A\u062E\u0627\u0628\u200C\u0634\u062F\u0647\u200C\u0647\u0627";
var to_fit5 = "\u0628\u0647 \u06A9\u0644 \u0635\u0641\u062D\u0647";
var menu_file5 = "\u0641\u0627\u06CC\u0644";
var menu_edit5 = "\u0648\u06CC\u0631\u0627\u06CC\u0634";
var menu_view5 = "\u0646\u0645\u0627\u06CC\u0634";
var menu_preferences5 = "\u062A\u0646\u0638\u06CC\u0645\u200C\u0647\u0627";
var menu_sign_in5 = "\u0648\u0631\u0648\u062F";
var menu_sign_out5 = "\u062E\u0631\u0648\u062C";
var sponsored5 = "\u062D\u0627\u0645\u06CC\u0627\u0646";
var become_a_sponsor5 = " \u062D\u0627\u0645\u06CC \u0634\u0648";
var zoom_to_selection5 = "\u0646\u0645\u0627\u06CC\u0634 \u0627\u0646\u062A\u062E\u0627\u0628\u200C\u0634\u062F\u0647\u200C\u0647\u0627";
var zoom_to_fit5 = "\u0646\u0645\u0627\u06CC\u0634 \u06A9\u0644 \u0635\u0641\u062D\u0647";
var zoom_to5 = "\u0632\u0648\u0645 \u0628\u0647 ";
var preferences_dark_mode5 = "\u062D\u0627\u0644\u062A \u0634\u0628";
var preferences_focus_mode5 = "\u062D\u0627\u0644\u062A \u062A\u0645\u0631\u06A9\u0632";
var preferences_debug_mode5 = "\u062D\u0627\u0644\u062A \u0639\u06CC\u0628\u200C\u06CC\u0627\u06CC\u06CC";
var preferences_show_grid5 = "\u0646\u0645\u0627\u06CC\u0634 \u062E\u0637\u0648\u0637 \u0631\u0627\u0647\u0646\u0645\u0627";
var preferences_use_cad_selection5 = "\u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u0627\u0632 \u062D\u0627\u0644\u062A \u0627\u0646\u062A\u062E\u0627\u0628\u06CC CAD";
var preferences_keep_stylemenu_open5 = "\u0645\u0646\u0648\u06CC \u0627\u0633\u062A\u0627\u06CC\u0644 \u0628\u0627\u0632 \u0628\u0627\u0634\u0647";
var preferences_always_show_snaps5 = "\u0631\u0627\u0647\u0646\u0645\u0627\u06CC \u0644\u0628\u0647\u200C\u0647\u0627 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var preferences_rotate_handles5 = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u0686\u0631\u062E\u0634 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var preferences_binding_handles5 = "\u062F\u0633\u062A\u0647\u0654 \u0644\u0628\u0647\u200C\u0647\u0627 \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var preferences_clone_handles5 = "\u062F\u0633\u062A\u06AF\u06CC\u0631\u0647\u200C\u0647\u0627\u06CC \u06A9\u067E\u06CC \u0631\u0648 \u0646\u0634\u0648\u0646 \u0628\u062F\u0647";
var undo5 = "\u06CC\u0647 \u0642\u062F\u0645 \u0639\u0642\u0628";
var redo5 = "\u06CC\u0647 \u0642\u062F\u0645 \u062C\u0644\u0648";
var cut5 = "\u0628\u0631\u06CC\u062F\u0646";
var copy5 = "\u06A9\u067E\u06CC";
var paste5 = "\u062C\u0627\u06CC\u200C\u06AF\u0630\u0627\u0631\u06CC";
var copy_as5 = "\u06A9\u067E\u06CC \u0628\u0647\u200C\u200C\u0639\u0646\u0648\u0627\u0646";
var export_as5 = "\u062E\u0631\u0648\u062C\u06CC \u0628\u0627 \u0641\u0631\u0645\u062A";
var select_all5 = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u0645\u0647";
var select_none5 = "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u06CC\u0686";
var delete6 = " \u067E\u0627\u06A9\u200C\u06A9\u0631\u062F\u0646";
var new_project5 = "\u067E\u0631\u0648\u0698\u0647\u0654 \u062A\u0627\u0632\u0647";
var open5 = "\u0628\u0627\u0632 \u06A9\u0646";
var save5 = "\u0630\u062E\u06CC\u0631\u0647";
var save_as5 = "\u0630\u062E\u06CC\u0631\u0647 \u0628\u0627 \u0627\u0633\u0645";
var upload_media5 = "\u0622\u067E\u0644\u0648\u062F \u0639\u06A9\u0633";
var create_page5 = "\u0633\u0627\u062E\u062A \u0635\u0641\u062D\u0647";
var new_page5 = "\u0635\u0641\u062D\u0647\u0654 \u062A\u0627\u0632\u0647";
var page_name5 = "\u0627\u0633\u0645 \u0635\u0641\u062D\u0647";
var duplicate5 = "\u06A9\u067E\u06CC \u062F\u0631\u062C\u0627";
var cancel5 = "\u0628\u06CC\u200C\u062E\u06CC\u0627\u0644";
var copy_invite_link5 = "\u06A9\u067E\u06CC \u0644\u06CC\u0646\u06A9 \u062F\u0639\u0648\u062A";
var create_multiplayer_project5 = "\u0633\u0627\u062E\u062A \u067E\u0631\u0648\u0698\u0647\u0654 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var copy_multiplayer_project5 = "\u06A9\u067E\u06CC \u062F\u0631 \u067E\u0631\u0648\u0698\u0647\u0654 \u0686\u0646\u062F\u0646\u0641\u0631\u0647";
var select5 = "\u0627\u0646\u062A\u062E\u0627\u0628";
var eraser5 = "\u067E\u0627\u06A9\u200C\u06A9\u0646";
var draw5 = "\u0631\u0633\u0645";
var arrow5 = "\u0641\u0644\u0650\u0634";
var text5 = "\u0645\u062A\u0646";
var sticky5 = "\u06CC\u0627\u062F\u062F\u0627\u0634\u062A";
var Rectangle6 = "\u0686\u0627\u0631\u06AF\u0648\u0634";
var Ellipse6 = "\u06AF\u0631\u062F\u06CC";
var Triangle6 = "\u0633\u0647\u200C\u06AF\u0648\u0634";
var Line5 = "\u062E\u0637";
var rotate5 = "\u0686\u0631\u062E\u0634";
var lock_aspect_ratio5 = "\u062A\u062B\u0628\u06CC\u062A \u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F";
var unlock_aspect_ratio5 = "\u0646\u0633\u0628\u062A \u0627\u0628\u0639\u0627\u062F \u0645\u062A\u063A\u06CC\u0631";
var group5 = "\u062C\u0645\u0639 \u06A9\u0646";
var ungroup5 = "\u062C\u062F\u0627 \u06A9\u0646";
var move_to_back5 = "\u0628\u0628\u0631 \u0622\u062E\u0631";
var move_backward5 = "\u0628\u0628\u0631 \u0639\u0642\u0628";
var move_forward5 = "\u0628\u0628\u0631 \u0627\u0648\u0644";
var move_to_front5 = "\u0628\u0628\u0631 \u062C\u0644\u0648";
var reset_angle5 = "\u062D\u0630\u0641 \u0686\u0631\u062E\u0634";
var lock5 = "\u0642\u0641\u0644\u200C \u06A9\u0646";
var unlock5 = "\u0628\u0627\u0632 \u06A9\u0646";
var move_to_page5 = "\u0628\u0628\u0631 \u0628\u0647 \u0635\u0641\u062D\u0647";
var flip_horizontal5 = "\u0628\u0631\u06AF\u0631\u062F\u0648\u0646 \u0627\u0641\u0642\u06CC";
var flip_vertical5 = "\u0628\u0631\u06AF\u0631\u062F\u0648\u0646 \u0639\u0645\u0648\u062F\u06CC";
var move5 = "\u062C\u0627\u0628\u0647\u200C\u062C\u0627\u0634 \u06A9\u0646";
var to_front5 = "\u0628\u0647 \u0627\u0648\u0644";
var forward5 = "\u0628\u0647 \u062C\u0644\u0648";
var backward5 = "\u0628\u0647 \u0639\u0642\u0628";
var back5 = "\u0628\u0647 \u0622\u062E\u0631";
var language5 = "\u0632\u0628\u0627\u0646";
var fa_default = {
  "style.menu.color": style_menu_color5,
  "style.menu.fill": style_menu_fill5,
  "style.menu.dash": style_menu_dash5,
  "style.menu.size": style_menu_size5,
  "style.menu.keep.open": style_menu_keep_open5,
  "style.menu.font": style_menu_font5,
  "style.menu.align": style_menu_align5,
  styles: styles6,
  "zoom.in": zoom_in5,
  "zoom.out": zoom_out5,
  to: to5,
  "to.selection": to_selection5,
  "to.fit": to_fit5,
  "menu.file": menu_file5,
  "menu.edit": menu_edit5,
  "menu.view": menu_view5,
  "menu.preferences": menu_preferences5,
  "menu.sign.in": menu_sign_in5,
  "menu.sign.out": menu_sign_out5,
  sponsored: sponsored5,
  "become.a.sponsor": become_a_sponsor5,
  "zoom.to.selection": zoom_to_selection5,
  "zoom.to.fit": zoom_to_fit5,
  "zoom.to": zoom_to5,
  "preferences.dark.mode": preferences_dark_mode5,
  "preferences.focus.mode": preferences_focus_mode5,
  "preferences.debug.mode": preferences_debug_mode5,
  "preferences.show.grid": preferences_show_grid5,
  "preferences.use.cad.selection": preferences_use_cad_selection5,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open5,
  "preferences.always.show.snaps": preferences_always_show_snaps5,
  "preferences.rotate.handles": preferences_rotate_handles5,
  "preferences.binding.handles": preferences_binding_handles5,
  "preferences.clone.handles": preferences_clone_handles5,
  undo: undo5,
  redo: redo5,
  cut: cut5,
  copy: copy5,
  paste: paste5,
  "copy.as": copy_as5,
  "export.as": export_as5,
  "select.all": select_all5,
  "select.none": select_none5,
  delete: delete6,
  "new.project": new_project5,
  open: open5,
  save: save5,
  "save.as": save_as5,
  "upload.media": upload_media5,
  "create.page": create_page5,
  "new.page": new_page5,
  "page.name": page_name5,
  duplicate: duplicate5,
  cancel: cancel5,
  "copy.invite.link": copy_invite_link5,
  "create.multiplayer.project": create_multiplayer_project5,
  "copy.multiplayer.project": copy_multiplayer_project5,
  select: select5,
  eraser: eraser5,
  draw: draw5,
  arrow: arrow5,
  text: text5,
  sticky: sticky5,
  Rectangle: Rectangle6,
  Ellipse: Ellipse6,
  Triangle: Triangle6,
  Line: Line5,
  rotate: rotate5,
  "lock.aspect.ratio": lock_aspect_ratio5,
  "unlock.aspect.ratio": unlock_aspect_ratio5,
  group: group5,
  ungroup: ungroup5,
  "move.to.back": move_to_back5,
  "move.backward": move_backward5,
  "move.forward": move_forward5,
  "move.to.front": move_to_front5,
  "reset.angle": reset_angle5,
  lock: lock5,
  unlock: unlock5,
  "move.to.page": move_to_page5,
  "flip.horizontal": flip_horizontal5,
  "flip.vertical": flip_vertical5,
  move: move5,
  "to.front": to_front5,
  forward: forward5,
  backward: backward5,
  back: back5,
  language: language5
};
var style_menu_color6 = "Couleur";
var style_menu_fill6 = "Remplir";
var style_menu_dash6 = "Bordure";
var style_menu_size6 = "Taille";
var style_menu_keep_open6 = "Toujours afficher le menu";
var style_menu_font6 = "Police";
var style_menu_align6 = "Alignement";
var styles7 = "Styles";
var zoom_in6 = "Zoom avant";
var zoom_out6 = "Zoom arri\xE8re";
var to6 = "\xC0";
var to_selection6 = "S\xE9lection";
var to_fit6 = "Contenu";
var menu_file6 = "Fichier";
var menu_edit6 = "\xC9dition";
var menu_view6 = "Afficher";
var menu_preferences6 = "Pr\xE9f\xE9rences";
var menu_sign_in6 = "S'authentifier";
var menu_sign_out6 = "Se d\xE9connecter";
var sponsored6 = "Sponsoris\xE9";
var become_a_sponsor6 = "Devenir un sponsor";
var zoom_to_content2 = "Retour au contenu";
var zoom_to_selection6 = "Ajuster le zoom \xE0 la s\xE9lection";
var zoom_to_fit6 = "Adapter le zoom au contenu";
var zoom_to6 = "R\xE9tablir le zoom \xE0";
var preferences_dark_mode6 = "Mode sombre";
var preferences_focus_mode6 = "Mode focus";
var preferences_debug_mode6 = "Afficher la barre d\xE9veloppeur";
var preferences_show_grid6 = "Afficher la grille";
var preferences_use_cad_selection6 = "Utiliser la s\xE9lection CAD";
var preferences_keep_stylemenu_open6 = "Toujours afficher le menu styles";
var preferences_always_show_snaps6 = "Afficher les rep\xE8res dynamiques";
var preferences_rotate_handles6 = "Manier la rotation";
var preferences_binding_handles6 = "Manier les liaisons";
var preferences_clone_handles6 = "Manier le clonage";
var undo6 = "Annuler";
var redo6 = "R\xE9tablir";
var cut6 = "Couper";
var copy6 = "Copier";
var paste6 = "Coller";
var copy_as6 = "Copier au format";
var export_as6 = "Exporter au format";
var select_all6 = "Tout s\xE9lectionner";
var select_none6 = "Tout d\xE9s\xE9lectionner";
var delete7 = "Supprimer";
var new_project6 = "Nouveau project";
var open6 = "Ouvrir";
var save6 = "Enregistrer";
var save_as6 = "Enregistrer sous";
var upload_media6 = "Importer un m\xE9dia";
var create_page6 = "Cr\xE9er une page";
var new_page6 = "Nouvelle Page";
var page_name6 = "Nom de la page";
var duplicate6 = "Dupliquer";
var cancel6 = "Annuler";
var copy_invite_link6 = "Copier le lien d'invitation";
var copy_readonly_link2 = "Copier le lien en lecture seule d'invitation";
var create_multiplayer_project6 = "Cr\xE9er un project multi-joueurs";
var copy_multiplayer_project6 = "Copier dans un projet multi-joueurs";
var select6 = "S\xE9lection";
var eraser6 = "Gomme";
var draw6 = "Crayon";
var arrow6 = "Fl\xE8che";
var text6 = "Texte";
var sticky6 = "Note";
var Rectangle7 = "Rectangle";
var Ellipse7 = "Cercle";
var Triangle7 = "Triangle";
var Line6 = "Ligne";
var rotate6 = "Rotation";
var lock_aspect_ratio6 = "Verrouiller les proportions";
var unlock_aspect_ratio6 = "D\xE9verrouiller les proportions";
var group6 = "Grouper";
var ungroup6 = "D\xE9grouper";
var move_to_back6 = "D\xE9placer \xE0 l'arri\xE8re-plan";
var move_backward6 = "Reculer d'un plan";
var move_forward6 = "Avancer d'un plan";
var move_to_front6 = "Placer au premier plan";
var reset_angle6 = "R\xE9initialiser la rotation";
var lock6 = "Verrouiller";
var unlock6 = "D\xE9verrouiller";
var move_to_page6 = "D\xE9placer vers la page";
var flip_horizontal6 = "Retourner horizontalement";
var flip_vertical6 = "Retourner verticalement";
var move6 = "Disposition";
var to_front6 = "Placer au premier plan";
var forward6 = "Avancer d'un plan";
var backward6 = "Reculer d'un plan";
var back6 = "D\xE9placer \xE0 l'arri\xE8re-plan";
var language6 = "Langage";
var dock_position2 = "Position du dock";
var bottom2 = "En bas";
var keyboard_shortcuts2 = "Raccourci clavier";
var loading2 = "Chargement{dots}";
var left2 = "\xC0 gauche";
var right2 = "\xC0 droite";
var top3 = "En haut";
var page3 = "Page";
var fr_default = {
  "style.menu.color": style_menu_color6,
  "style.menu.fill": style_menu_fill6,
  "style.menu.dash": style_menu_dash6,
  "style.menu.size": style_menu_size6,
  "style.menu.keep.open": style_menu_keep_open6,
  "style.menu.font": style_menu_font6,
  "style.menu.align": style_menu_align6,
  styles: styles7,
  "zoom.in": zoom_in6,
  "zoom.out": zoom_out6,
  to: to6,
  "to.selection": to_selection6,
  "to.fit": to_fit6,
  "menu.file": menu_file6,
  "menu.edit": menu_edit6,
  "menu.view": menu_view6,
  "menu.preferences": menu_preferences6,
  "menu.sign.in": menu_sign_in6,
  "menu.sign.out": menu_sign_out6,
  sponsored: sponsored6,
  "become.a.sponsor": become_a_sponsor6,
  "zoom.to.content": zoom_to_content2,
  "zoom.to.selection": zoom_to_selection6,
  "zoom.to.fit": zoom_to_fit6,
  "zoom.to": zoom_to6,
  "preferences.dark.mode": preferences_dark_mode6,
  "preferences.focus.mode": preferences_focus_mode6,
  "preferences.debug.mode": preferences_debug_mode6,
  "preferences.show.grid": preferences_show_grid6,
  "preferences.use.cad.selection": preferences_use_cad_selection6,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open6,
  "preferences.always.show.snaps": preferences_always_show_snaps6,
  "preferences.rotate.handles": preferences_rotate_handles6,
  "preferences.binding.handles": preferences_binding_handles6,
  "preferences.clone.handles": preferences_clone_handles6,
  undo: undo6,
  redo: redo6,
  cut: cut6,
  copy: copy6,
  paste: paste6,
  "copy.as": copy_as6,
  "export.as": export_as6,
  "select.all": select_all6,
  "select.none": select_none6,
  delete: delete7,
  "new.project": new_project6,
  open: open6,
  save: save6,
  "save.as": save_as6,
  "upload.media": upload_media6,
  "create.page": create_page6,
  "new.page": new_page6,
  "page.name": page_name6,
  duplicate: duplicate6,
  cancel: cancel6,
  "copy.invite.link": copy_invite_link6,
  "copy.readonly.link": copy_readonly_link2,
  "create.multiplayer.project": create_multiplayer_project6,
  "copy.multiplayer.project": copy_multiplayer_project6,
  select: select6,
  eraser: eraser6,
  draw: draw6,
  arrow: arrow6,
  text: text6,
  sticky: sticky6,
  Rectangle: Rectangle7,
  Ellipse: Ellipse7,
  Triangle: Triangle7,
  Line: Line6,
  rotate: rotate6,
  "lock.aspect.ratio": lock_aspect_ratio6,
  "unlock.aspect.ratio": unlock_aspect_ratio6,
  group: group6,
  ungroup: ungroup6,
  "move.to.back": move_to_back6,
  "move.backward": move_backward6,
  "move.forward": move_forward6,
  "move.to.front": move_to_front6,
  "reset.angle": reset_angle6,
  lock: lock6,
  unlock: unlock6,
  "move.to.page": move_to_page6,
  "flip.horizontal": flip_horizontal6,
  "flip.vertical": flip_vertical6,
  move: move6,
  "to.front": to_front6,
  forward: forward6,
  backward: backward6,
  back: back6,
  language: language6,
  "dock.position": dock_position2,
  bottom: bottom2,
  "keyboard.shortcuts": keyboard_shortcuts2,
  loading: loading2,
  left: left2,
  right: right2,
  top: top3,
  page: page3
};
var style_menu_color7 = "\u05E6\u05D1\u05E2";
var style_menu_fill7 = "\u05DE\u05DC\u05D0";
var style_menu_dash7 = "\u05D2\u05D1\u05D5\u05DC";
var style_menu_size7 = "\u05D2\u05D5\u05D3\u05DC";
var style_menu_keep_open7 = "\u05D4\u05E9\u05D0\u05E8 \u05E4\u05EA\u05D5\u05D7";
var style_menu_font7 = "\u05D2\u05D5\u05E4\u05DF";
var style_menu_align7 = "\u05D9\u05D9\u05E9\u05D5\u05E8";
var styles8 = "\u05E2\u05D9\u05E6\u05D5\u05D1";
var zoom_in7 = "\u05D4\u05D2\u05D3\u05DC \u05EA\u05E6\u05D5\u05D2\u05D4";
var zoom_out7 = "\u05D4\u05E7\u05D8\u05DF \u05EA\u05E6\u05D5\u05D2\u05D4";
var to7 = "\u05DC";
var to_selection7 = "\u05DC\u05E1\u05D9\u05DE\u05D5\u05DF";
var to_fit7 = "\u05DC\u05D4\u05EA\u05D0\u05DE\u05D4";
var menu_file7 = "\u05E7\u05D5\u05D1\u05E5";
var menu_edit7 = "\u05E2\u05E8\u05D9\u05DB\u05D4";
var menu_view7 = "\u05EA\u05E6\u05D5\u05D2\u05D4";
var menu_preferences7 = "\u05DE\u05D0\u05E4\u05D9\u05D9\u05E0\u05D9\u05DD";
var menu_sign_in7 = "\u05D4\u05D9\u05E8\u05E9\u05DD";
var menu_sign_out7 = "\u05D4\u05EA\u05E0\u05EA\u05E7";
var sponsored7 = "\u05D7\u05E1\u05D5\u05EA";
var become_a_sponsor7 = "\u05DE\u05EA\u05DF \u05D7\u05E1\u05D5\u05EA";
var zoom_to_selection7 = "\u05D6\u05D5\u05DD \u05DC\u05D1\u05D7\u05D9\u05E8\u05D4";
var zoom_to_fit7 = "\u05D6\u05D5\u05DD \u05DC\u05D4\u05EA\u05D0\u05DE\u05D4";
var zoom_to7 = "\u05D6\u05D5\u05DD \u05DC";
var preferences_dark_mode7 = "\u05DE\u05E6\u05D1 \u05D7\u05E9\u05D5\u05DA";
var preferences_focus_mode7 = "\u05DE\u05E6\u05D1 \u05E4\u05D5\u05E7\u05D5\u05E1";
var preferences_debug_mode7 = "\u05DE\u05E6\u05D1 \u05D3\u05D9\u05D1\u05D0\u05D2";
var preferences_show_grid7 = "(\u05D2\u05E8\u05D9\u05D3)\u05D4\u05E8\u05D0\u05D4 \u05E8\u05E9\u05EA \u05E2\u05D9\u05DE\u05D5\u05D3";
var preferences_use_cad_selection7 = "\u05E1\u05D9\u05DE\u05D5\u05DF CAD";
var preferences_keep_stylemenu_open7 = "\u05D4\u05E9\u05D0\u05E8 \u05EA\u05E4\u05E8\u05D9\u05D8 \u05E2\u05D9\u05E6\u05D5\u05D1 \u05E4\u05EA\u05D5\u05D7";
var preferences_always_show_snaps7 = "\u05D4\u05E8\u05D0\u05D4 \u05E7\u05D5\u05D5\u05D9 \u05DE\u05EA\u05D0\u05E8";
var preferences_rotate_handles7 = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E1\u05D9\u05D1\u05D5\u05D1";
var preferences_binding_handles7 = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E7\u05E9\u05D9\u05E8\u05D4";
var preferences_clone_handles7 = "\u05D4\u05E8\u05D0\u05D4 \u05D9\u05D3\u05D9\u05D5\u05EA \u05E9\u05D9\u05DB\u05E4\u05D5\u05DC";
var undo7 = "\u05D1\u05D8\u05DC";
var redo7 = "\u05E2\u05E9\u05D4 \u05DE\u05D7\u05D3\u05E9";
var cut7 = "\u05D2\u05D6\u05D5\u05E8";
var copy7 = "\u05D4\u05E2\u05EA\u05E7";
var paste7 = "\u05D4\u05D3\u05D1\u05E7";
var copy_as7 = "\u05D4\u05E2\u05EA\u05E7 \u05DB";
var export_as7 = "\u05D9\u05D9\u05E6\u05D0 \u05DB";
var select_all7 = "\u05D1\u05D7\u05E8 \u05D4\u05DB\u05DC";
var select_none7 = "\u05D1\u05D8\u05DC \u05D1\u05D7\u05D9\u05E8\u05D4";
var delete8 = "\u05DE\u05D7\u05E7";
var new_project7 = "\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05D7\u05D3\u05E9";
var open7 = "\u05E4\u05EA\u05D7";
var save7 = "\u05E9\u05DE\u05D5\u05E8";
var save_as7 = "\u05E9\u05DE\u05D5\u05E8 \u05DB";
var upload_media7 = "\u05D4\u05E2\u05DC\u05D0\u05EA \u05DE\u05D3\u05D9\u05D4";
var create_page7 = "\u05E6\u05D5\u05E8 \u05D3\u05E3";
var new_page7 = "\u05D3\u05E3 \u05D7\u05D3\u05E9";
var page_name7 = "\u05E9\u05DD \u05D4\u05D3\u05E3";
var duplicate7 = "\u05E9\u05DB\u05E4\u05DC";
var cancel7 = "\u05D1\u05D8\u05DC";
var copy_invite_link7 = "\u05D4\u05E2\u05EA\u05E7 \u05E7\u05D9\u05E9\u05D5\u05E8 \u05D4\u05D6\u05DE\u05E0\u05D4";
var create_multiplayer_project7 = "\u05E6\u05D5\u05E8 \u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var copy_multiplayer_project7 = "\u05D4\u05E2\u05EA\u05E7 \u05DC\u05E4\u05E8\u05D5\u05D9\u05E7\u05D8 \u05E8\u05D1 \u05DE\u05E9\u05EA\u05EA\u05E4\u05D9\u05DD";
var select7 = "\u05E1\u05DE\u05DF";
var eraser7 = "\u05DE\u05D7\u05E7";
var draw7 = "\u05E6\u05D9\u05D9\u05E8";
var arrow7 = "\u05D7\u05E5";
var text7 = "\u05D8\u05E7\u05E1\u05D8";
var sticky7 = "\u05D3\u05D1\u05D9\u05E7\u05D9";
var Rectangle8 = "\u05DE\u05E8\u05D5\u05D1\u05E2";
var Ellipse8 = "\u05D0\u05DC\u05D9\u05E4\u05E1\u05D4";
var Triangle8 = "\u05DE\u05E9\u05D5\u05DC\u05E9";
var Line7 = "\u05E7\u05D5";
var rotate7 = "\u05E1\u05D5\u05D1\u05D1";
var lock_aspect_ratio7 = "\u05E0\u05E2\u05DC \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var unlock_aspect_ratio7 = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05EA \u05D9\u05D7\u05E1 \u05E8\u05D5\u05D7\u05D1-\u05D2\u05D5\u05D1\u05D4";
var group7 = "\u05E7\u05D1\u05E5";
var ungroup7 = "\u05D1\u05D8\u05DC \u05E7\u05D9\u05D1\u05D5\u05E5";
var move_to_back7 = "\u05D4\u05D1\u05D0 \u05DC\u05EA\u05D7\u05EA\u05D9\u05EA";
var move_backward7 = "\u05D4\u05D6\u05D6 \u05D0\u05D7\u05D5\u05E8\u05D4";
var move_forward7 = "\u05D4\u05D6\u05D6 \u05E7\u05D3\u05D9\u05DE\u05D4";
var move_to_front7 = "\u05D4\u05D1\u05D0 \u05DC\u05D7\u05D6\u05D9\u05EA";
var reset_angle7 = "\u05D0\u05E4\u05E1 \u05D6\u05D5\u05D5\u05D9\u05EA";
var lock7 = "\u05E0\u05E2\u05DC";
var unlock7 = "\u05E9\u05D7\u05E8\u05E8 \u05E0\u05E2\u05D9\u05DC\u05D4";
var move_to_page7 = "\u05D4\u05D6\u05D6 \u05DC\u05D3\u05E3";
var flip_horizontal7 = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05D5\u05E4\u05E7\u05D9\u05EA";
var flip_vertical7 = "\u05D4\u05E4\u05D5\u05DA \u05D0\u05E0\u05DB\u05D9\u05EA";
var move7 = "\u05D4\u05D6\u05D6";
var to_front7 = "\u05D4\u05D1\u05D0 \u05DC\u05E7\u05D3\u05D9\u05DE\u05D4";
var forward7 = "\u05E7\u05D3\u05D9\u05DE\u05D4";
var backward7 = "\u05D0\u05D7\u05D5\u05E8\u05D4";
var back7 = "\u05D1\u05D7\u05D6\u05E8\u05D4";
var language7 = "\u05E9\u05E4\u05D4";
var he_default = {
  "style.menu.color": style_menu_color7,
  "style.menu.fill": style_menu_fill7,
  "style.menu.dash": style_menu_dash7,
  "style.menu.size": style_menu_size7,
  "style.menu.keep.open": style_menu_keep_open7,
  "style.menu.font": style_menu_font7,
  "style.menu.align": style_menu_align7,
  styles: styles8,
  "zoom.in": zoom_in7,
  "zoom.out": zoom_out7,
  to: to7,
  "to.selection": to_selection7,
  "to.fit": to_fit7,
  "menu.file": menu_file7,
  "menu.edit": menu_edit7,
  "menu.view": menu_view7,
  "menu.preferences": menu_preferences7,
  "menu.sign.in": menu_sign_in7,
  "menu.sign.out": menu_sign_out7,
  sponsored: sponsored7,
  "become.a.sponsor": become_a_sponsor7,
  "zoom.to.selection": zoom_to_selection7,
  "zoom.to.fit": zoom_to_fit7,
  "zoom.to": zoom_to7,
  "preferences.dark.mode": preferences_dark_mode7,
  "preferences.focus.mode": preferences_focus_mode7,
  "preferences.debug.mode": preferences_debug_mode7,
  "preferences.show.grid": preferences_show_grid7,
  "preferences.use.cad.selection": preferences_use_cad_selection7,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open7,
  "preferences.always.show.snaps": preferences_always_show_snaps7,
  "preferences.rotate.handles": preferences_rotate_handles7,
  "preferences.binding.handles": preferences_binding_handles7,
  "preferences.clone.handles": preferences_clone_handles7,
  undo: undo7,
  redo: redo7,
  cut: cut7,
  copy: copy7,
  paste: paste7,
  "copy.as": copy_as7,
  "export.as": export_as7,
  "select.all": select_all7,
  "select.none": select_none7,
  delete: delete8,
  "new.project": new_project7,
  open: open7,
  save: save7,
  "save.as": save_as7,
  "upload.media": upload_media7,
  "create.page": create_page7,
  "new.page": new_page7,
  "page.name": page_name7,
  duplicate: duplicate7,
  cancel: cancel7,
  "copy.invite.link": copy_invite_link7,
  "create.multiplayer.project": create_multiplayer_project7,
  "copy.multiplayer.project": copy_multiplayer_project7,
  select: select7,
  eraser: eraser7,
  draw: draw7,
  arrow: arrow7,
  text: text7,
  sticky: sticky7,
  Rectangle: Rectangle8,
  Ellipse: Ellipse8,
  Triangle: Triangle8,
  Line: Line7,
  rotate: rotate7,
  "lock.aspect.ratio": lock_aspect_ratio7,
  "unlock.aspect.ratio": unlock_aspect_ratio7,
  group: group7,
  ungroup: ungroup7,
  "move.to.back": move_to_back7,
  "move.backward": move_backward7,
  "move.forward": move_forward7,
  "move.to.front": move_to_front7,
  "reset.angle": reset_angle7,
  lock: lock7,
  unlock: unlock7,
  "move.to.page": move_to_page7,
  "flip.horizontal": flip_horizontal7,
  "flip.vertical": flip_vertical7,
  move: move7,
  "to.front": to_front7,
  forward: forward7,
  backward: backward7,
  back: back7,
  language: language7
};
var style_menu_color8 = "Colore";
var style_menu_fill8 = "Riempi";
var style_menu_dash8 = "Tratteggo";
var style_menu_size8 = "Dimensione";
var style_menu_keep_open8 = "Mantieni aperto";
var style_menu_font8 = "Font";
var style_menu_align8 = "Allineamento";
var styles9 = "Stile";
var zoom_in8 = "Ingrandisci";
var zoom_out8 = "Rimpicciolisci";
var to8 = "Imposta";
var to_selection8 = "Adatta alla selezione";
var to_fit8 = "Adatta";
var menu_file8 = "File";
var menu_edit8 = "Modifica";
var menu_view8 = "Visualizzazione";
var menu_preferences8 = "Preferenze";
var menu_sign_in8 = "Accedi";
var menu_sign_out8 = "Esci";
var sponsored8 = "Sponsorizza";
var become_a_sponsor8 = "Sponsorizza";
var zoom_to_selection8 = "Adatta alla selezione";
var zoom_to_fit8 = "Adatta";
var zoom_to8 = "Ingrandisci";
var preferences_dark_mode8 = "Modalit\xE0 scura";
var preferences_focus_mode8 = "Modalit\xE0 zen";
var preferences_debug_mode8 = "Modalit\xE0 sviluppatore";
var preferences_show_grid8 = "Mostra griglia";
var preferences_use_cad_selection8 = "Selezione CAD";
var preferences_keep_stylemenu_open8 = "Mantieni menu stile aperto";
var preferences_always_show_snaps8 = "Mostra sempre le guide";
var preferences_rotate_handles8 = "Controlli d'inclinazione";
var preferences_binding_handles8 = "Controlli d'associazione";
var preferences_clone_handles8 = "Controlli di clonazione";
var undo8 = "Annulla";
var redo8 = "Ripristina";
var cut8 = "Taglia";
var copy8 = "Copia";
var paste8 = "Incolla";
var copy_as8 = "Copia come";
var export_as8 = "Esporta come";
var select_all8 = "Seleziona tutto";
var select_none8 = "Deseleziona tutto";
var delete9 = "Elimina";
var new_project8 = "Nuovo progetto";
var open8 = "Apri";
var save8 = "Salva";
var save_as8 = "Salva come";
var upload_media8 = "Carica contenuti multimediali";
var create_page8 = "Crea nuova pagina";
var new_page8 = "Nuova pagina";
var page_name8 = "Nome pagina";
var page4 = "Pagina";
var duplicate8 = "Duplica";
var cancel8 = "Chiudi";
var copy_invite_link8 = "Copia link invito";
var create_multiplayer_project8 = "Crea progetto multiplayer";
var copy_multiplayer_project8 = "Trasforma in progetto multiplayer";
var select8 = "Seleziona";
var eraser8 = "Gomma";
var draw8 = "Matita";
var arrow8 = "Freccia";
var text8 = "Casella di testo";
var sticky8 = "Post-it";
var Rectangle9 = "Rettangolo";
var Ellipse9 = "Ellisse";
var Triangle9 = "Triangolo";
var Line8 = "Linea";
var rotate8 = "Ruota";
var lock_aspect_ratio8 = "Blocca rapporto lati";
var unlock_aspect_ratio8 = "Sblocca rapporto lati";
var group8 = "Raggruppa";
var ungroup8 = "Separa";
var move_to_back8 = "Muovi in fondo";
var move_backward8 = "Sposta indietro";
var move_forward8 = "Sposta avanti";
var move_to_front8 = "Muovi in fronte";
var reset_angle8 = "Reimposta angolo";
var lock8 = "Blocca";
var unlock8 = "Sblocca";
var move_to_page8 = "Trasferisci a pagina";
var flip_horizontal8 = "Ribalta orizzontalmente";
var flip_vertical8 = "Ribalta verticalmente";
var move8 = "Sposta";
var to_front8 = "In primo piano";
var forward8 = "Sposta avanti";
var backward8 = "Sposta indietro";
var back8 = "In fondo";
var language8 = "Lingua";
var dock_position3 = "Posizione dock";
var bottom3 = "In basso";
var left3 = "Sinistra";
var right3 = "Destra";
var top4 = "In Alto";
var it_default = {
  "style.menu.color": style_menu_color8,
  "style.menu.fill": style_menu_fill8,
  "style.menu.dash": style_menu_dash8,
  "style.menu.size": style_menu_size8,
  "style.menu.keep.open": style_menu_keep_open8,
  "style.menu.font": style_menu_font8,
  "style.menu.align": style_menu_align8,
  styles: styles9,
  "zoom.in": zoom_in8,
  "zoom.out": zoom_out8,
  to: to8,
  "to.selection": to_selection8,
  "to.fit": to_fit8,
  "menu.file": menu_file8,
  "menu.edit": menu_edit8,
  "menu.view": menu_view8,
  "menu.preferences": menu_preferences8,
  "menu.sign.in": menu_sign_in8,
  "menu.sign.out": menu_sign_out8,
  sponsored: sponsored8,
  "become.a.sponsor": become_a_sponsor8,
  "zoom.to.selection": zoom_to_selection8,
  "zoom.to.fit": zoom_to_fit8,
  "zoom.to": zoom_to8,
  "preferences.dark.mode": preferences_dark_mode8,
  "preferences.focus.mode": preferences_focus_mode8,
  "preferences.debug.mode": preferences_debug_mode8,
  "preferences.show.grid": preferences_show_grid8,
  "preferences.use.cad.selection": preferences_use_cad_selection8,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open8,
  "preferences.always.show.snaps": preferences_always_show_snaps8,
  "preferences.rotate.handles": preferences_rotate_handles8,
  "preferences.binding.handles": preferences_binding_handles8,
  "preferences.clone.handles": preferences_clone_handles8,
  undo: undo8,
  redo: redo8,
  cut: cut8,
  copy: copy8,
  paste: paste8,
  "copy.as": copy_as8,
  "export.as": export_as8,
  "select.all": select_all8,
  "select.none": select_none8,
  delete: delete9,
  "new.project": new_project8,
  open: open8,
  save: save8,
  "save.as": save_as8,
  "upload.media": upload_media8,
  "create.page": create_page8,
  "new.page": new_page8,
  "page.name": page_name8,
  page: page4,
  duplicate: duplicate8,
  cancel: cancel8,
  "copy.invite.link": copy_invite_link8,
  "create.multiplayer.project": create_multiplayer_project8,
  "copy.multiplayer.project": copy_multiplayer_project8,
  select: select8,
  eraser: eraser8,
  draw: draw8,
  arrow: arrow8,
  text: text8,
  sticky: sticky8,
  Rectangle: Rectangle9,
  Ellipse: Ellipse9,
  Triangle: Triangle9,
  Line: Line8,
  rotate: rotate8,
  "lock.aspect.ratio": lock_aspect_ratio8,
  "unlock.aspect.ratio": unlock_aspect_ratio8,
  group: group8,
  ungroup: ungroup8,
  "move.to.back": move_to_back8,
  "move.backward": move_backward8,
  "move.forward": move_forward8,
  "move.to.front": move_to_front8,
  "reset.angle": reset_angle8,
  lock: lock8,
  unlock: unlock8,
  "move.to.page": move_to_page8,
  "flip.horizontal": flip_horizontal8,
  "flip.vertical": flip_vertical8,
  move: move8,
  "to.front": to_front8,
  forward: forward8,
  backward: backward8,
  back: back8,
  language: language8,
  "dock.position": dock_position3,
  bottom: bottom3,
  left: left3,
  right: right3,
  top: top4
};
var style_menu_color9 = "\u8272";
var style_menu_fill9 = "\u5857\u308A\u3064\u3076\u3057";
var style_menu_dash9 = "\u7DDA";
var style_menu_size9 = "\u5927\u304D\u3055";
var style_menu_keep_open9 = "\u5E38\u306B\u8868\u793A";
var style_menu_font9 = "\u30D5\u30A9\u30F3\u30C8";
var style_menu_align9 = "\u914D\u7F6E";
var styles10 = "\u30B9\u30BF\u30A4\u30EB";
var zoom_in9 = "\u62E1\u5927";
var zoom_out9 = "\u7E2E\u5C0F";
var to9 = " ";
var to_selection9 = "\u9078\u629E\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306B\u5408\u308F\u305B\u308B";
var to_fit9 = "\u3059\u3079\u3066\u8868\u793A";
var menu_file9 = "\u30D5\u30A1\u30A4\u30EB";
var menu_edit9 = "\u7DE8\u96C6";
var menu_view9 = "\u8868\u793A";
var menu_preferences9 = "\u8A2D\u5B9A";
var menu_sign_in9 = "\u30B5\u30A4\u30F3\u30A4\u30F3";
var menu_sign_out9 = "\u30B5\u30A4\u30F3\u30A2\u30A6\u30C8";
var sponsored9 = "\u652F\u63F4";
var become_a_sponsor9 = "\u652F\u63F4\u3059\u308B";
var zoom_to_selection9 = "\u9078\u629E\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306B\u5408\u308F\u305B\u3066\u62E1\u5927";
var zoom_to_fit9 = "\u62E1\u5927\u3057\u3066\u3059\u3079\u3066\u3092\u8868\u793A";
var zoom_to9 = " ";
var preferences_dark_mode9 = "\u30C0\u30FC\u30AF\u30E2\u30FC\u30C9";
var preferences_focus_mode9 = "\u30D5\u30A9\u30FC\u30AB\u30B9\u30E2\u30FC\u30C9";
var preferences_debug_mode9 = "\u30C7\u30D0\u30C3\u30B0\u30E2\u30FC\u30C9";
var preferences_show_grid9 = "\u30B0\u30EA\u30C3\u30C9\u3092\u8868\u793A";
var preferences_use_cad_selection9 = "CAD\u306E\u9078\u629E\u6CD5\u3092\u4F7F\u7528";
var preferences_keep_stylemenu_open9 = "\u30B9\u30BF\u30A4\u30EB\u30E1\u30CB\u30E5\u30FC\u3092\u5E38\u306B\u8868\u793A";
var preferences_always_show_snaps9 = "\u30B9\u30CA\u30C3\u30D7\u3092\u5E38\u306B\u8868\u793A";
var preferences_rotate_handles9 = "\u56DE\u8EE2\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var preferences_binding_handles9 = "\u7D50\u5408\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var preferences_clone_handles9 = "\u30AF\u30ED\u30FC\u30F3\u30CF\u30F3\u30C9\u30EB\u3092\u8868\u793A";
var undo9 = "\u5143\u306B\u623B\u3059";
var redo9 = "\u3084\u308A\u76F4\u3057";
var cut9 = "\u5207\u308A\u53D6\u308A";
var copy9 = "\u30B3\u30D4\u30FC";
var paste9 = "\u8CBC\u308A\u4ED8\u3051";
var copy_as9 = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30B3\u30D4\u30FC";
var export_as9 = "\u5F62\u5F0F\u3092\u9078\u629E\u3057\u3066\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8";
var select_all9 = "\u3059\u3079\u3066\u9078\u629E";
var select_none9 = "\u9078\u629E\u3092\u89E3\u9664";
var delete10 = "\u524A\u9664";
var new_project9 = "\u65B0\u3057\u3044\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8";
var open9 = "\u958B\u304F";
var save9 = "\u4FDD\u5B58";
var save_as9 = "\u540D\u524D\u3092\u3064\u3051\u3066\u4FDD\u5B58";
var upload_media9 = "\u30E1\u30C7\u30A3\u30A2\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9";
var create_page9 = "\u30DA\u30FC\u30B8\u3092\u4F5C\u6210";
var new_page9 = "\u65B0\u898F\u30DA\u30FC\u30B8";
var page_name9 = "\u30DA\u30FC\u30B8\u540D";
var duplicate9 = "\u8907\u88FD";
var cancel9 = "\u30AD\u30E3\u30F3\u30BB\u30EB";
var copy_invite_link9 = "\u5171\u6709\u30EA\u30F3\u30AF\u3092\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC";
var create_multiplayer_project9 = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u3092\u4F5C\u6210";
var copy_multiplayer_project9 = "\u30DE\u30EB\u30C1\u30D7\u30EC\u30A4\u30E4\u30FC\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u306B\u30B3\u30D4\u30FC";
var select9 = "\u9078\u629E";
var eraser9 = "\u6D88\u3057\u30B4\u30E0";
var draw9 = "\u63CF\u753B";
var arrow9 = "\u77E2\u5370";
var text9 = "\u30C6\u30AD\u30B9\u30C8";
var sticky9 = "\u3075\u305B\u3093";
var Rectangle10 = "\u9577\u65B9\u5F62";
var Ellipse10 = "\u6955\u5186\u5F62";
var Triangle10 = "\u4E09\u89D2\u5F62";
var Line9 = "\u7DDA";
var rotate9 = "\u56DE\u8EE2";
var lock_aspect_ratio9 = "\u7E26\u6A2A\u6BD4\u3092\u56FA\u5B9A";
var unlock_aspect_ratio9 = "\u7E26\u6A2A\u6BD4\u306E\u56FA\u5B9A\u3092\u89E3\u9664";
var group9 = "\u30B0\u30EB\u30FC\u30D4\u30F3\u30B0";
var ungroup9 = "\u30B0\u30EB\u30FC\u30D7\u89E3\u9664";
var move_to_back9 = "\u6700\u5F8C\u9762\u306B\u79FB\u52D5";
var move_backward9 = "\u3072\u3068\u3064\u5F8C\u308D\u306B\u79FB\u52D5";
var move_forward9 = "\u3072\u3068\u3064\u524D\u306B\u79FB\u52D5";
var move_to_front9 = "\u6700\u80CC\u9762\u306B\u79FB\u52D5";
var reset_angle9 = "\u89D2\u5EA6\u3092\u521D\u671F\u5316";
var lock9 = "\u30ED\u30C3\u30AF";
var unlock9 = "\u30A2\u30F3\u30ED\u30C3\u30AF";
var move_to_page9 = "\u30DA\u30FC\u30B8\u3078\u79FB\u52D5";
var flip_horizontal9 = "\u6C34\u5E73\u65B9\u5411\u306B\u53CD\u8EE2";
var flip_vertical9 = "\u5782\u76F4\u65B9\u5411\u306B\u53CD\u8EE2";
var move9 = "\u79FB\u52D5";
var to_front9 = "\u6700\u524D\u9762\u3078";
var forward9 = "\u3072\u3068\u3064\u524D\u3078";
var backward9 = "\u3072\u3068\u3064\u5F8C\u308D\u3078";
var back9 = "\u6700\u80CC\u9762\u3078";
var language9 = "\u8A00\u8A9E";
var ja_default = {
  "style.menu.color": style_menu_color9,
  "style.menu.fill": style_menu_fill9,
  "style.menu.dash": style_menu_dash9,
  "style.menu.size": style_menu_size9,
  "style.menu.keep.open": style_menu_keep_open9,
  "style.menu.font": style_menu_font9,
  "style.menu.align": style_menu_align9,
  styles: styles10,
  "zoom.in": zoom_in9,
  "zoom.out": zoom_out9,
  to: to9,
  "to.selection": to_selection9,
  "to.fit": to_fit9,
  "menu.file": menu_file9,
  "menu.edit": menu_edit9,
  "menu.view": menu_view9,
  "menu.preferences": menu_preferences9,
  "menu.sign.in": menu_sign_in9,
  "menu.sign.out": menu_sign_out9,
  sponsored: sponsored9,
  "become.a.sponsor": become_a_sponsor9,
  "zoom.to.selection": zoom_to_selection9,
  "zoom.to.fit": zoom_to_fit9,
  "zoom.to": zoom_to9,
  "preferences.dark.mode": preferences_dark_mode9,
  "preferences.focus.mode": preferences_focus_mode9,
  "preferences.debug.mode": preferences_debug_mode9,
  "preferences.show.grid": preferences_show_grid9,
  "preferences.use.cad.selection": preferences_use_cad_selection9,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open9,
  "preferences.always.show.snaps": preferences_always_show_snaps9,
  "preferences.rotate.handles": preferences_rotate_handles9,
  "preferences.binding.handles": preferences_binding_handles9,
  "preferences.clone.handles": preferences_clone_handles9,
  undo: undo9,
  redo: redo9,
  cut: cut9,
  copy: copy9,
  paste: paste9,
  "copy.as": copy_as9,
  "export.as": export_as9,
  "select.all": select_all9,
  "select.none": select_none9,
  delete: delete10,
  "new.project": new_project9,
  open: open9,
  save: save9,
  "save.as": save_as9,
  "upload.media": upload_media9,
  "create.page": create_page9,
  "new.page": new_page9,
  "page.name": page_name9,
  duplicate: duplicate9,
  cancel: cancel9,
  "copy.invite.link": copy_invite_link9,
  "create.multiplayer.project": create_multiplayer_project9,
  "copy.multiplayer.project": copy_multiplayer_project9,
  select: select9,
  eraser: eraser9,
  draw: draw9,
  arrow: arrow9,
  text: text9,
  sticky: sticky9,
  Rectangle: Rectangle10,
  Ellipse: Ellipse10,
  Triangle: Triangle10,
  Line: Line9,
  rotate: rotate9,
  "lock.aspect.ratio": lock_aspect_ratio9,
  "unlock.aspect.ratio": unlock_aspect_ratio9,
  group: group9,
  ungroup: ungroup9,
  "move.to.back": move_to_back9,
  "move.backward": move_backward9,
  "move.forward": move_forward9,
  "move.to.front": move_to_front9,
  "reset.angle": reset_angle9,
  lock: lock9,
  unlock: unlock9,
  "move.to.page": move_to_page9,
  "flip.horizontal": flip_horizontal9,
  "flip.vertical": flip_vertical9,
  move: move9,
  "to.front": to_front9,
  forward: forward9,
  backward: backward9,
  back: back9,
  language: language9
};
var style_menu_color10 = "\uC0C9\uAE54";
var style_menu_fill10 = "\uCC44\uC6B0\uAE30";
var style_menu_dash10 = "\uD14C\uB450\uB9AC";
var style_menu_size10 = "\uD06C\uAE30";
var style_menu_keep_open10 = "\uD56D\uC0C1 \uC5F4\uAE30";
var style_menu_font10 = "\uAE00\uAF34";
var style_menu_align10 = "\uC815\uB82C";
var styles11 = "\uC2A4\uD0C0\uC77C";
var zoom_in10 = "\uD655\uB300";
var zoom_out10 = "\uCD95\uC18C";
var to10 = "to";
var to_selection10 = "\uC120\uD0DD \uC694\uC18C \uB9DE\uCDA4";
var to_fit10 = "\uC804\uCCB4 \uB9DE\uCDA4";
var menu_file10 = "\uD30C\uC77C";
var menu_edit10 = "\uD3B8\uC9D1";
var menu_view10 = "\uBCF4\uAE30";
var menu_preferences10 = "\uC124\uC815";
var menu_sign_in10 = "\uB85C\uADF8\uC778";
var menu_sign_out10 = "\uB85C\uADF8\uC544\uC6C3";
var sponsored10 = "\uD6C4\uC6D0";
var become_a_sponsor10 = "\uD6C4\uC6D0\uC790 \uB418\uAE30";
var zoom_to_selection10 = "\uC120\uD0DD \uC694\uC18C \uB9DE\uCD94\uAE30";
var zoom_to_fit10 = "\uC804\uCCB4 \uB9DE\uCD94\uAE30";
var zoom_to10 = "\uB9DE\uCD94\uAE30";
var preferences_dark_mode10 = "\uB2E4\uD06C \uBAA8\uB4DC";
var preferences_focus_mode10 = "\uC9D1\uC911 \uBAA8\uB4DC";
var preferences_debug_mode10 = "\uB514\uBC84\uADF8 \uBAA8\uB4DC";
var preferences_show_grid10 = "\uACA9\uC790 \uBCF4\uAE30";
var preferences_use_cad_selection10 = "CAD \uC120\uD0DD \uC0AC\uC6A9";
var preferences_keep_stylemenu_open10 = "\uC2A4\uD0C0\uC77C \uBA54\uB274 \uD56D\uC0C1 \uC5F4\uAE30";
var preferences_always_show_snaps10 = "Snap \uD56D\uC0C1 \uC5F4\uAE30";
var preferences_rotate_handles10 = "\uD68C\uC804 \uBCF4\uC774\uAE30";
var preferences_binding_handles10 = "Binding Handles";
var preferences_clone_handles10 = "\uBCF5\uC81C \uBCF4\uC774\uAE30";
var undo10 = "\uC2E4\uD589 \uCDE8\uC18C";
var redo10 = "\uB2E4\uC2DC \uC2E4\uD589";
var cut10 = "\uC790\uB974\uAE30";
var copy10 = "\uBCF5\uC0AC";
var paste10 = "\uBD99\uC5EC\uB123\uAE30";
var copy_as10 = "\uB2E4\uB978 \uD615\uC2DD\uC73C\uB85C \uBCF5\uC0AC\uD558\uAE30";
var export_as10 = "\uB0B4\uBCF4\uB0B4\uAE30";
var select_all10 = "\uC804\uCCB4 \uC120\uD0DD";
var select_none10 = "\uC120\uD0DD \uC548\uD568";
var delete11 = "\uC0AD\uC81C\uD558\uAE30";
var new_project10 = "\uC0C8 \uD504\uB85C\uC81D\uD2B8";
var open10 = "\uC5F4\uAE30";
var save10 = "\uC800\uC7A5";
var save_as10 = "\uB2E4\uB978 \uC774\uB984\uC73C\uB85C \uC800\uC7A5";
var upload_media10 = "\uBBF8\uB514\uC5B4 \uC5C5\uB85C\uB4DC";
var create_page10 = "\uC0C8 \uD398\uC774\uC9C0 \uB9CC\uB4E4\uAE30";
var new_page10 = "\uC0C8 \uD398\uC774\uC9C0";
var page_name10 = "\uD398\uC774\uC9C0 \uC774\uB984";
var duplicate10 = "\uBCF5\uC81C";
var cancel10 = "\uCDE8\uC18C";
var copy_invite_link10 = "\uCD08\uB300 \uB9C1\uD06C \uBCF5\uC0AC\uD558\uAE30";
var create_multiplayer_project10 = "\uACF5\uB3D9 \uD504\uB85C\uC81D\uD2B8 \uB9CC\uB4E4\uAE30";
var copy_multiplayer_project10 = "\uACF5\uB3D9 \uD504\uB85C\uC81D\uD2B8\uB85C \uBCF5\uC0AC\uD558\uAE30";
var select10 = "\uC120\uD0DD";
var eraser10 = "\uC9C0\uC6B0\uAC1C";
var draw10 = "\uADF8\uB9AC\uAE30";
var arrow10 = "\uD654\uC0B4\uD45C";
var text10 = "\uD14D\uC2A4\uD2B8";
var sticky10 = "\uBA54\uBAA8";
var Rectangle11 = "\uC0AC\uAC01\uD615";
var Ellipse11 = "\uC6D0";
var Triangle11 = "\uC0BC\uAC01\uD615";
var Line10 = "\uC120";
var rotate10 = "\uD68C\uC804";
var lock_aspect_ratio10 = "\uBE44\uC728 \uC7A0\uAE08";
var unlock_aspect_ratio10 = "\uBE44\uC728 \uC7A0\uAE08 \uD574\uC81C";
var group10 = "\uADF8\uB8F9\uD654";
var ungroup10 = "\uADF8\uB8F9\uD654 \uD574\uC81C";
var move_to_back10 = "\uB9E8 \uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var move_backward10 = "\uB4A4\uB85C \uBCF4\uB0B4\uAE30";
var move_forward10 = "\uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var move_to_front10 = "\uB9E8 \uC55E\uC73C\uB85C \uAC00\uC838\uC624\uAE30";
var reset_angle10 = "\uD68C\uC804 \uCD08\uAE30\uD654";
var lock10 = "\uC7A0\uAD6C\uAE30";
var unlock10 = "\uC7A0\uAE08 \uD574\uC81C\uD558\uAE30";
var move_to_page10 = "\uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
var flip_horizontal10 = "\uC218\uD3C9\uC73C\uB85C \uB4A4\uC9D1\uAE30";
var flip_vertical10 = "\uC218\uC9C1\uC73C\uB85C \uB4A4\uC9D1\uAE30";
var move10 = "\uC21C\uC11C";
var to_front10 = "\uB9E8 \uC55E\uC73C\uB85C";
var forward10 = "\uC55E\uC73C\uB85C";
var backward10 = "\uB4A4\uB85C";
var back10 = "\uB9E8 \uB4A4\uB85C";
var language10 = "\uC5B8\uC5B4";
var ko_kr_default = {
  "style.menu.color": style_menu_color10,
  "style.menu.fill": style_menu_fill10,
  "style.menu.dash": style_menu_dash10,
  "style.menu.size": style_menu_size10,
  "style.menu.keep.open": style_menu_keep_open10,
  "style.menu.font": style_menu_font10,
  "style.menu.align": style_menu_align10,
  styles: styles11,
  "zoom.in": zoom_in10,
  "zoom.out": zoom_out10,
  to: to10,
  "to.selection": to_selection10,
  "to.fit": to_fit10,
  "menu.file": menu_file10,
  "menu.edit": menu_edit10,
  "menu.view": menu_view10,
  "menu.preferences": menu_preferences10,
  "menu.sign.in": menu_sign_in10,
  "menu.sign.out": menu_sign_out10,
  sponsored: sponsored10,
  "become.a.sponsor": become_a_sponsor10,
  "zoom.to.selection": zoom_to_selection10,
  "zoom.to.fit": zoom_to_fit10,
  "zoom.to": zoom_to10,
  "preferences.dark.mode": preferences_dark_mode10,
  "preferences.focus.mode": preferences_focus_mode10,
  "preferences.debug.mode": preferences_debug_mode10,
  "preferences.show.grid": preferences_show_grid10,
  "preferences.use.cad.selection": preferences_use_cad_selection10,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open10,
  "preferences.always.show.snaps": preferences_always_show_snaps10,
  "preferences.rotate.handles": preferences_rotate_handles10,
  "preferences.binding.handles": preferences_binding_handles10,
  "preferences.clone.handles": preferences_clone_handles10,
  undo: undo10,
  redo: redo10,
  cut: cut10,
  copy: copy10,
  paste: paste10,
  "copy.as": copy_as10,
  "export.as": export_as10,
  "select.all": select_all10,
  "select.none": select_none10,
  delete: delete11,
  "new.project": new_project10,
  open: open10,
  save: save10,
  "save.as": save_as10,
  "upload.media": upload_media10,
  "create.page": create_page10,
  "new.page": new_page10,
  "page.name": page_name10,
  duplicate: duplicate10,
  cancel: cancel10,
  "copy.invite.link": copy_invite_link10,
  "create.multiplayer.project": create_multiplayer_project10,
  "copy.multiplayer.project": copy_multiplayer_project10,
  select: select10,
  eraser: eraser10,
  draw: draw10,
  arrow: arrow10,
  text: text10,
  sticky: sticky10,
  Rectangle: Rectangle11,
  Ellipse: Ellipse11,
  Triangle: Triangle11,
  Line: Line10,
  rotate: rotate10,
  "lock.aspect.ratio": lock_aspect_ratio10,
  "unlock.aspect.ratio": unlock_aspect_ratio10,
  group: group10,
  ungroup: ungroup10,
  "move.to.back": move_to_back10,
  "move.backward": move_backward10,
  "move.forward": move_forward10,
  "move.to.front": move_to_front10,
  "reset.angle": reset_angle10,
  lock: lock10,
  unlock: unlock10,
  "move.to.page": move_to_page10,
  "flip.horizontal": flip_horizontal10,
  "flip.vertical": flip_vertical10,
  move: move10,
  "to.front": to_front10,
  forward: forward10,
  backward: backward10,
  back: back10,
  language: language10
};
var style_menu_color11 = "Color";
var style_menu_fill11 = "Fill";
var style_menu_dash11 = "Dash";
var style_menu_size11 = "Size";
var style_menu_keep_open11 = "Keep Open";
var style_menu_font11 = "Font";
var style_menu_align11 = "Align";
var styles12 = "Styles";
var zoom_in11 = "Zoom In";
var zoom_out11 = "Zoom Out";
var to11 = "To";
var to_selection11 = "To Selection";
var to_fit11 = "To Fit";
var menu_file11 = "File";
var menu_edit11 = "Edit";
var menu_view11 = "View";
var menu_preferences11 = "Preferences";
var menu_sign_in11 = "Sign In";
var menu_sign_out11 = "Sign Out";
var sponsored11 = "Sponsored";
var become_a_sponsor11 = "Become a Sponsor";
var zoom_to_content3 = "Back to content";
var zoom_to_selection11 = "Zoom to Selection";
var zoom_to_fit11 = "Zoom to Fit";
var zoom_to11 = "Zoom to";
var preferences_dark_mode11 = "Dark Mode";
var preferences_focus_mode11 = "Focus Mode";
var preferences_debug_mode11 = "Debug Mode";
var preferences_show_grid11 = "Show Grid";
var preferences_use_cad_selection11 = "Use CAD Selection";
var preferences_keep_stylemenu_open11 = "Keep Style Menu Open";
var preferences_always_show_snaps11 = "Always Show Snaps";
var preferences_rotate_handles11 = "Rotate Handles";
var preferences_binding_handles11 = "Binding Handles";
var preferences_clone_handles11 = "Clone Handles";
var undo11 = "Undo";
var redo11 = "Redo";
var cut11 = "Cut";
var copy11 = "Copy";
var paste11 = "Paste";
var copy_as11 = "Copy As";
var export_as11 = "Export As";
var select_all11 = "Select All";
var select_none11 = "Select None";
var delete12 = "Delete";
var new_project11 = "New Project";
var open11 = "Open";
var save11 = "Save";
var save_as11 = "Save As";
var upload_media11 = "Upload Media";
var create_page11 = "Create Page";
var new_page11 = "New Page";
var page_name11 = "Page Name";
var duplicate11 = "Duplicate";
var cancel11 = "Cancel";
var copy_invite_link11 = "Copy Invite Link";
var copy_readonly_link3 = "Copy ReadOnly Link";
var create_multiplayer_project11 = "Create a Multiplayer Project";
var copy_multiplayer_project11 = "Copy to Multiplayer Project";
var select11 = "Select";
var eraser11 = "Eraser";
var draw11 = "Draw";
var arrow11 = "Arrow";
var text11 = "Text";
var sticky11 = "Sticky";
var rectangle = "Rectangle";
var ellipse = "Ellipse";
var triangle = "Triangle";
var line = "Line";
var rotate11 = "Rotate";
var lock_aspect_ratio11 = "Lock Aspect Ratio";
var unlock_aspect_ratio11 = "Unlock Aspect Ratio";
var group11 = "Group";
var ungroup11 = "Ungroup";
var move_to_back11 = "Move to Back";
var move_backward11 = "Move Backward";
var move_forward11 = "Move Forward";
var move_to_front11 = "Move to Front";
var reset_angle11 = "Reset Angle";
var lock11 = "Lock";
var unlock11 = "Unlock";
var move_to_page11 = "Move to Page";
var flip_horizontal11 = "Flip Horizontal";
var flip_vertical11 = "Flip Vertical";
var move11 = "Move";
var to_front11 = "To Front";
var forward11 = "Forward";
var backward11 = "Backward";
var back11 = "To Back";
var language11 = "Language";
var translation_link2 = "Learn More";
var dock_position4 = "Dock Position";
var bottom4 = "Bottom";
var left4 = "Left";
var right4 = "Right";
var top5 = "Top";
var page5 = "Page";
var keyboard_shortcuts3 = "Keyboard shortcuts";
var search2 = "Search";
var loading3 = "Loading{dots}";
var main_default = {
  "style.menu.color": style_menu_color11,
  "style.menu.fill": style_menu_fill11,
  "style.menu.dash": style_menu_dash11,
  "style.menu.size": style_menu_size11,
  "style.menu.keep.open": style_menu_keep_open11,
  "style.menu.font": style_menu_font11,
  "style.menu.align": style_menu_align11,
  styles: styles12,
  "zoom.in": zoom_in11,
  "zoom.out": zoom_out11,
  to: to11,
  "to.selection": to_selection11,
  "to.fit": to_fit11,
  "menu.file": menu_file11,
  "menu.edit": menu_edit11,
  "menu.view": menu_view11,
  "menu.preferences": menu_preferences11,
  "menu.sign.in": menu_sign_in11,
  "menu.sign.out": menu_sign_out11,
  sponsored: sponsored11,
  "become.a.sponsor": become_a_sponsor11,
  "zoom.to.content": zoom_to_content3,
  "zoom.to.selection": zoom_to_selection11,
  "zoom.to.fit": zoom_to_fit11,
  "zoom.to": zoom_to11,
  "preferences.dark.mode": preferences_dark_mode11,
  "preferences.focus.mode": preferences_focus_mode11,
  "preferences.debug.mode": preferences_debug_mode11,
  "preferences.show.grid": preferences_show_grid11,
  "preferences.use.cad.selection": preferences_use_cad_selection11,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open11,
  "preferences.always.show.snaps": preferences_always_show_snaps11,
  "preferences.rotate.handles": preferences_rotate_handles11,
  "preferences.binding.handles": preferences_binding_handles11,
  "preferences.clone.handles": preferences_clone_handles11,
  undo: undo11,
  redo: redo11,
  cut: cut11,
  copy: copy11,
  paste: paste11,
  "copy.as": copy_as11,
  "export.as": export_as11,
  "select.all": select_all11,
  "select.none": select_none11,
  delete: delete12,
  "new.project": new_project11,
  open: open11,
  save: save11,
  "save.as": save_as11,
  "upload.media": upload_media11,
  "create.page": create_page11,
  "new.page": new_page11,
  "page.name": page_name11,
  duplicate: duplicate11,
  cancel: cancel11,
  "copy.invite.link": copy_invite_link11,
  "copy.readonly.link": copy_readonly_link3,
  "create.multiplayer.project": create_multiplayer_project11,
  "copy.multiplayer.project": copy_multiplayer_project11,
  select: select11,
  eraser: eraser11,
  draw: draw11,
  arrow: arrow11,
  text: text11,
  sticky: sticky11,
  rectangle,
  ellipse,
  triangle,
  line,
  rotate: rotate11,
  "lock.aspect.ratio": lock_aspect_ratio11,
  "unlock.aspect.ratio": unlock_aspect_ratio11,
  group: group11,
  ungroup: ungroup11,
  "move.to.back": move_to_back11,
  "move.backward": move_backward11,
  "move.forward": move_forward11,
  "move.to.front": move_to_front11,
  "reset.angle": reset_angle11,
  lock: lock11,
  unlock: unlock11,
  "move.to.page": move_to_page11,
  "flip.horizontal": flip_horizontal11,
  "flip.vertical": flip_vertical11,
  move: move11,
  "to.front": to_front11,
  forward: forward11,
  backward: backward11,
  back: back11,
  language: language11,
  "translation.link": translation_link2,
  "dock.position": dock_position4,
  bottom: bottom4,
  left: left4,
  right: right4,
  top: top5,
  page: page5,
  "keyboard.shortcuts": keyboard_shortcuts3,
  search: search2,
  loading: loading3
};
var style_menu_color12 = "\u0930\u0902\u0917";
var style_menu_fill12 = "\u092D\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var style_menu_dash12 = "\u0927\u0930\u094D\u0915\u093E";
var style_menu_size12 = "\u0906\u0915\u093E\u0930";
var style_menu_keep_open12 = "\u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var style_menu_font12 = "\u092B\u0928\u094D\u091F";
var style_menu_align12 = "\u092A\u0919\u094D\u0915\u094D\u0924\u093F\u092C\u0926\u094D\u0927";
var styles13 = "\u0936\u0948\u0932\u0940\u0939\u0930\u0942";
var zoom_in12 = "\u091C\u0941\u092E \u0907\u0928";
var zoom_out12 = "\u091C\u0941\u092E \u0906\u0909\u091F";
var to12 = "\u091F\u0941";
var to_selection12 = "\u091F\u0941 \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928";
var to_fit12 = "\u091F\u0941 \u092B\u093F\u091F";
var menu_file12 = "\u092B\u093E\u0907\u0932";
var menu_edit12 = "\u0938\u092E\u094D\u092A\u093E\u0926\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var menu_view12 = "\u092D\u094D\u092F\u0942";
var menu_preferences12 = "\u092A\u094D\u0930\u093E\u0925\u092E\u093F\u0915\u0924\u093E\u0939\u0930\u0942";
var menu_sign_in12 = "\u0938\u093E\u0907\u0928 \u0907\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var menu_sign_out12 = "\u0938\u093E\u0907\u0928 \u0906\u0909\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var sponsored12 = "\u092A\u094D\u0930\u093E\u092F\u094B\u091C\u093F\u0924";
var become_a_sponsor12 = "\u092A\u094D\u0930\u093E\u092F\u094B\u091C\u0915 \u092C\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var zoom_to_selection12 = "\u091C\u0941\u092E \u091F\u0941 \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928";
var zoom_to_fit12 = "\u091C\u0941\u092E \u091F\u0941 \u092B\u093F\u091F";
var zoom_to12 = "\u091C\u0941\u092E \u091F\u0941";
var preferences_dark_mode12 = "\u0905\u0901\u0927\u094D\u092F\u093E\u0930\u094B \u092E\u094B\u0921";
var preferences_focus_mode12 = "\u092B\u094B\u0915\u0938 \u092E\u094B\u0921";
var preferences_debug_mode12 = "\u0921\u093F\u092C\u0917 \u092E\u094B\u0921";
var preferences_show_grid12 = "\u0917\u094D\u0930\u093F\u0921 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var preferences_use_cad_selection12 = "CAD \u0938\u0947\u0932\u0947\u0915\u094D\u0938\u0928 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var preferences_keep_stylemenu_open12 = "\u0938\u094D\u091F\u093E\u0907\u0932 \u092E\u0947\u0928\u0941 \u0916\u0941\u0932\u093E \u0930\u093E\u0916\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var preferences_always_show_snaps12 = "\u0938\u0927\u0948\u0901 \u0938\u094D\u0928\u094D\u092F\u093E\u092A\u0939\u0930\u0942 \u0926\u0947\u0916\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var preferences_rotate_handles12 = "\u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942 \u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var preferences_binding_handles12 = "\u092C\u093E\u0907\u0928\u094D\u0921\u093F\u0919 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var preferences_clone_handles12 = "\u0915\u094D\u0932\u094B\u0928 \u0939\u094D\u092F\u093E\u0928\u094D\u0921\u0932\u0939\u0930\u0942";
var undo12 = "\u092A\u0942\u0930\u094D\u0935\u0935\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var redo12 = "\u092A\u0941\u0928\u0903 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var cut12 = "\u0915\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var copy12 = "\u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var paste12 = "\u092A\u0947\u0938\u094D\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var copy_as12 = "\u0915\u092A\u093F \u090F\u091C";
var export_as12 = "\u090F\u0915\u094D\u0938\u092A\u094B\u0930\u094D\u091F \u090F\u091C";
var select_all12 = "\u0938\u092C\u0948 \u091B\u093E\u0928\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var select_none12 = "\u0915\u0947\u0939\u093F \u092A\u0928\u093F \u0938\u0947\u0932\u0947\u0915\u094D\u091F \u0928\u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var delete13 = "\u092E\u0947\u091F\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var new_project12 = "\u0928\u092F\u093E\u0901 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E";
var open12 = "\u0916\u094B\u0932\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var save12 = "\u0938\u0941\u0930\u0915\u094D\u0937\u093F\u0924 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var save_as12 = "\u0938\u0947\u092D \u090F\u091C";
var upload_media12 = "\u092E\u093F\u0921\u093F\u092F\u093E \u0905\u092A\u0932\u094B\u0921 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var create_page12 = "\u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var new_page12 = "\u0928\u092F\u093E\u0901 \u092A\u0943\u0937\u094D\u0920 \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var page_name12 = "\u092A\u0943\u0937\u094D\u0920\u0915\u094B \u0928\u093E\u092E";
var duplicate12 = "\u0905\u0928\u0941\u0932\u093F\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var cancel12 = "\u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var copy_invite_link12 = "\u0928\u093F\u092E\u0928\u094D\u0924\u094D\u0930\u0923\u093E \u0932\u093F\u0919\u094D\u0915 \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var create_multiplayer_project12 = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u0930\u093F\u092F\u094B\u091C\u0928\u093E \u0938\u093F\u0930\u094D\u091C\u0928\u093E \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var copy_multiplayer_project12 = "\u092E\u0932\u094D\u091F\u093F\u092A\u094D\u0932\u0947\u092F\u0930 \u092A\u094D\u0930\u094B\u091C\u0947\u0915\u094D\u091F\u092E\u093E \u0915\u092A\u093F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var select12 = "\u0938\u0947\u0932\u0947\u0915\u094D\u091F";
var eraser12 = "\u0907\u0930\u0947\u091C\u0930";
var draw12 = "\u091A\u093F\u0924\u094D\u0930 \u092C\u0928\u093E\u0909\u0928\u0941";
var arrow12 = "\u0924\u0940\u0930";
var text12 = "\u0936\u092C\u094D\u0926";
var sticky12 = "\u091F\u093E\u0901\u0938\u093F\u0928\u0947";
var Rectangle12 = "\u0906\u092F\u0924";
var Ellipse12 = "\u0926\u0940\u0930\u094D\u0918\u0935\u0943\u0924\u094D\u0924";
var Triangle12 = "\u0924\u094D\u0930\u093F\u092D\u0941\u091C";
var Line11 = "\u0930\u0947\u0916\u093E";
var rotate12 = "\u0918\u0941\u092E\u093E\u0909\u0928\u0941\u0939\u094B\u0938\u094D";
var lock_aspect_ratio12 = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var unlock_aspect_ratio12 = "\u0906\u0915\u093E\u0930 \u0905\u0928\u0941\u092A\u093E\u0924 \u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var group12 = "\u0938\u092E\u0942\u0939";
var ungroup12 = "\u0938\u092E\u0942\u0939 \u0930\u0926\u094D\u0926 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move_to_back12 = "\u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move_backward12 = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move_forward12 = "\u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move_to_front12 = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var reset_angle12 = "\u0915\u094B\u0923 \u0930\u093F\u0938\u0947\u091F \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var lock12 = "\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var unlock12 = "\u0905\u0928\u0932\u0915 \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move_to_page12 = "\u092A\u0943\u0937\u094D\u0920\u092E\u093E \u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var flip_horizontal12 = "\u0924\u0947\u0930\u094D\u0938\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var flip_vertical12 = "\u0920\u093E\u0921\u094B \u092B\u094D\u0932\u093F\u092A \u0917\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var move12 = "\u0938\u093E\u0930\u094D\u0928\u0941\u0939\u094B\u0938\u094D";
var to_front12 = "\u0925\u092A \u0905\u0917\u093E\u0921\u093F";
var forward12 = "\u0905\u0917\u093E\u0921\u093F";
var backward12 = "\u092A\u091B\u093E\u0921\u093F";
var back12 = "\u0925\u092A \u092A\u091B\u093E\u0921\u093F";
var language12 = "\u092D\u093E\u0937\u093E";
var ne_default = {
  "style.menu.color": style_menu_color12,
  "style.menu.fill": style_menu_fill12,
  "style.menu.dash": style_menu_dash12,
  "style.menu.size": style_menu_size12,
  "style.menu.keep.open": style_menu_keep_open12,
  "style.menu.font": style_menu_font12,
  "style.menu.align": style_menu_align12,
  styles: styles13,
  "zoom.in": zoom_in12,
  "zoom.out": zoom_out12,
  to: to12,
  "to.selection": to_selection12,
  "to.fit": to_fit12,
  "menu.file": menu_file12,
  "menu.edit": menu_edit12,
  "menu.view": menu_view12,
  "menu.preferences": menu_preferences12,
  "menu.sign.in": menu_sign_in12,
  "menu.sign.out": menu_sign_out12,
  sponsored: sponsored12,
  "become.a.sponsor": become_a_sponsor12,
  "zoom.to.selection": zoom_to_selection12,
  "zoom.to.fit": zoom_to_fit12,
  "zoom.to": zoom_to12,
  "preferences.dark.mode": preferences_dark_mode12,
  "preferences.focus.mode": preferences_focus_mode12,
  "preferences.debug.mode": preferences_debug_mode12,
  "preferences.show.grid": preferences_show_grid12,
  "preferences.use.cad.selection": preferences_use_cad_selection12,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open12,
  "preferences.always.show.snaps": preferences_always_show_snaps12,
  "preferences.rotate.handles": preferences_rotate_handles12,
  "preferences.binding.handles": preferences_binding_handles12,
  "preferences.clone.handles": preferences_clone_handles12,
  undo: undo12,
  redo: redo12,
  cut: cut12,
  copy: copy12,
  paste: paste12,
  "copy.as": copy_as12,
  "export.as": export_as12,
  "select.all": select_all12,
  "select.none": select_none12,
  delete: delete13,
  "new.project": new_project12,
  open: open12,
  save: save12,
  "save.as": save_as12,
  "upload.media": upload_media12,
  "create.page": create_page12,
  "new.page": new_page12,
  "page.name": page_name12,
  duplicate: duplicate12,
  cancel: cancel12,
  "copy.invite.link": copy_invite_link12,
  "create.multiplayer.project": create_multiplayer_project12,
  "copy.multiplayer.project": copy_multiplayer_project12,
  select: select12,
  eraser: eraser12,
  draw: draw12,
  arrow: arrow12,
  text: text12,
  sticky: sticky12,
  Rectangle: Rectangle12,
  Ellipse: Ellipse12,
  Triangle: Triangle12,
  Line: Line11,
  rotate: rotate12,
  "lock.aspect.ratio": lock_aspect_ratio12,
  "unlock.aspect.ratio": unlock_aspect_ratio12,
  group: group12,
  ungroup: ungroup12,
  "move.to.back": move_to_back12,
  "move.backward": move_backward12,
  "move.forward": move_forward12,
  "move.to.front": move_to_front12,
  "reset.angle": reset_angle12,
  lock: lock12,
  unlock: unlock12,
  "move.to.page": move_to_page12,
  "flip.horizontal": flip_horizontal12,
  "flip.vertical": flip_vertical12,
  move: move12,
  "to.front": to_front12,
  forward: forward12,
  backward: backward12,
  back: back12,
  language: language12
};
var style_menu_color13 = "Farge";
var style_menu_fill13 = "Fyll";
var style_menu_dash13 = "Linje";
var style_menu_size13 = "St\xF8rrelse";
var style_menu_keep_open13 = "Hold \xE5pen";
var style_menu_font13 = "Teksttype";
var style_menu_align13 = "Juster";
var styles14 = "Stiler";
var zoom_in13 = "Zoom inn";
var zoom_out13 = "Zoom ut";
var to13 = "til";
var to_selection13 = "Til valg";
var to_fit13 = "For \xE5 passe";
var menu_file13 = "Fil";
var menu_edit13 = "Rediger";
var menu_view13 = "Vis";
var menu_preferences13 = "Preferanser";
var menu_sign_in13 = "Logg inn";
var menu_sign_out13 = "Logg ut";
var sponsored13 = "Sponset";
var become_a_sponsor13 = "Bli en sponsor";
var zoom_to_selection13 = "Zoom til valg";
var zoom_to_fit13 = "Zoom for \xE5 passe";
var zoom_to13 = "Zoom til";
var preferences_dark_mode13 = "M\xF8rk modus";
var preferences_focus_mode13 = "Fokus modus";
var preferences_debug_mode13 = "Debug modus";
var preferences_show_grid13 = "Vis rutenett";
var preferences_use_cad_selection13 = "Bruk CAD seleksjon";
var preferences_keep_stylemenu_open13 = "Hold stilmeny \xE5pen";
var preferences_always_show_snaps13 = "Vis alltid snaps";
var preferences_rotate_handles13 = "Vis roteringsh\xE5ndtak";
var preferences_binding_handles13 = "Vis bindingsh\xE5ndtak";
var preferences_clone_handles13 = "Vis kloningsh\xE5ndtak";
var undo13 = "Angre";
var redo13 = "Gj\xF8r om";
var cut13 = "Klipp ut";
var copy13 = "Kopier";
var paste13 = "Lim inn";
var copy_as13 = "Kopier som";
var export_as13 = "Eksporter som";
var select_all13 = "Velg alle";
var select_none13 = "Velg ingen";
var delete14 = "Slett";
var new_project13 = "Nytt prosjekt";
var open13 = "\xC5pne";
var save13 = "Lagre";
var save_as13 = "Lagre som";
var upload_media13 = "Last opp media";
var create_page13 = "Opprett side";
var new_page13 = "Ny side";
var page_name13 = "Sidenavn";
var duplicate13 = "Dupliser";
var cancel13 = "Avbryt";
var copy_invite_link13 = "Kopier invitasjonslink";
var create_multiplayer_project13 = "Opprett et flerspiller prosjekt";
var copy_multiplayer_project13 = "Kopier til flerspiller prosjekt";
var select13 = "Velg";
var eraser13 = "Viskel\xE6r";
var draw13 = "Tegn";
var arrow13 = "Pil";
var text13 = "Tekst";
var sticky13 = "Lapp";
var Rectangle13 = "Rektangel";
var Ellipse13 = "Ellipse";
var Triangle13 = "Trekant";
var Line12 = "Linje";
var rotate13 = "Roter";
var lock_aspect_ratio13 = "L\xE5s st\xF8rrelsesforhold";
var unlock_aspect_ratio13 = "L\xE5s opp st\xF8rrelsesforhold";
var group13 = "Grupper";
var ungroup13 = "Avgrupper";
var move_to_back13 = "Flytt bakerst";
var move_backward13 = "Flytt bakover";
var move_forward13 = "Flytt forover";
var move_to_front13 = "Flytt til front";
var reset_angle13 = "Tilbakestill vinkel";
var lock13 = "L\xE5s";
var unlock13 = "L\xE5s opp";
var move_to_page13 = "Flytt til side";
var flip_horizontal13 = "Snu horisontalt";
var flip_vertical13 = "Snu vertikalt";
var move13 = "Flytt";
var to_front13 = "Foran";
var forward13 = "Framover";
var backward13 = "Bakover";
var back13 = "Bakerst";
var language13 = "Spr\xE5k";
var no_default = {
  "style.menu.color": style_menu_color13,
  "style.menu.fill": style_menu_fill13,
  "style.menu.dash": style_menu_dash13,
  "style.menu.size": style_menu_size13,
  "style.menu.keep.open": style_menu_keep_open13,
  "style.menu.font": style_menu_font13,
  "style.menu.align": style_menu_align13,
  styles: styles14,
  "zoom.in": zoom_in13,
  "zoom.out": zoom_out13,
  to: to13,
  "to.selection": to_selection13,
  "to.fit": to_fit13,
  "menu.file": menu_file13,
  "menu.edit": menu_edit13,
  "menu.view": menu_view13,
  "menu.preferences": menu_preferences13,
  "menu.sign.in": menu_sign_in13,
  "menu.sign.out": menu_sign_out13,
  sponsored: sponsored13,
  "become.a.sponsor": become_a_sponsor13,
  "zoom.to.selection": zoom_to_selection13,
  "zoom.to.fit": zoom_to_fit13,
  "zoom.to": zoom_to13,
  "preferences.dark.mode": preferences_dark_mode13,
  "preferences.focus.mode": preferences_focus_mode13,
  "preferences.debug.mode": preferences_debug_mode13,
  "preferences.show.grid": preferences_show_grid13,
  "preferences.use.cad.selection": preferences_use_cad_selection13,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open13,
  "preferences.always.show.snaps": preferences_always_show_snaps13,
  "preferences.rotate.handles": preferences_rotate_handles13,
  "preferences.binding.handles": preferences_binding_handles13,
  "preferences.clone.handles": preferences_clone_handles13,
  undo: undo13,
  redo: redo13,
  cut: cut13,
  copy: copy13,
  paste: paste13,
  "copy.as": copy_as13,
  "export.as": export_as13,
  "select.all": select_all13,
  "select.none": select_none13,
  delete: delete14,
  "new.project": new_project13,
  open: open13,
  save: save13,
  "save.as": save_as13,
  "upload.media": upload_media13,
  "create.page": create_page13,
  "new.page": new_page13,
  "page.name": page_name13,
  duplicate: duplicate13,
  cancel: cancel13,
  "copy.invite.link": copy_invite_link13,
  "create.multiplayer.project": create_multiplayer_project13,
  "copy.multiplayer.project": copy_multiplayer_project13,
  select: select13,
  eraser: eraser13,
  draw: draw13,
  arrow: arrow13,
  text: text13,
  sticky: sticky13,
  Rectangle: Rectangle13,
  Ellipse: Ellipse13,
  Triangle: Triangle13,
  Line: Line12,
  rotate: rotate13,
  "lock.aspect.ratio": lock_aspect_ratio13,
  "unlock.aspect.ratio": unlock_aspect_ratio13,
  group: group13,
  ungroup: ungroup13,
  "move.to.back": move_to_back13,
  "move.backward": move_backward13,
  "move.forward": move_forward13,
  "move.to.front": move_to_front13,
  "reset.angle": reset_angle13,
  lock: lock13,
  unlock: unlock13,
  "move.to.page": move_to_page13,
  "flip.horizontal": flip_horizontal13,
  "flip.vertical": flip_vertical13,
  move: move13,
  "to.front": to_front13,
  forward: forward13,
  backward: backward13,
  back: back13,
  language: language13
};
var style_menu_color14 = "Kolor";
var style_menu_fill14 = "Wype\u0142nienie";
var style_menu_dash14 = "Linia";
var style_menu_size14 = "Rozmiar";
var style_menu_keep_open14 = "Zachowaj otwarte";
var style_menu_font14 = "Czcionka";
var style_menu_align14 = "Wyr\xF3wnanie";
var styles15 = "Style";
var zoom_in14 = "Przybli\u017C";
var zoom_out14 = "Oddal";
var to14 = "do";
var to_selection14 = "Do zaznaczenia";
var to_fit14 = "Do wype\u0142nienia";
var menu_file14 = "Plik";
var menu_edit14 = "Edycja";
var menu_view14 = "Widok";
var menu_preferences14 = "Preferencje";
var menu_sign_in14 = "Zaloguj";
var menu_sign_out14 = "Wyloguj";
var sponsored14 = "Sponsorzy";
var become_a_sponsor14 = "Zosta\u0144 sponsorem";
var zoom_to_selection14 = "Przybli\u017C do zaznaczenia";
var zoom_to_fit14 = "Wype\u0142nij ekran";
var zoom_to14 = "Przybli\u017C do";
var preferences_dark_mode14 = "Tryb ciemny";
var preferences_focus_mode14 = "Tryb skupienia";
var preferences_debug_mode14 = "Tryb debugowania";
var preferences_show_grid14 = "Poka\u017C siatk\u0119";
var preferences_use_cad_selection14 = "U\u017Cyj zaznaczania CAD";
var preferences_keep_stylemenu_open14 = "Zachowaj menu styli otwarte";
var preferences_always_show_snaps14 = "Przyci\u0105gaj obiekty";
var preferences_rotate_handles14 = "Uchwyty obrotu";
var preferences_binding_handles14 = "Uchwyty powi\u0105zania";
var preferences_clone_handles14 = "Uchwyty klonuj\u0105ce";
var undo14 = "Cofnij";
var redo14 = "Powt\xF3rz";
var cut14 = "Wytnij";
var copy14 = "Kopiuj";
var paste14 = "Wklej";
var copy_as14 = "Kopiuj jako";
var export_as14 = "Eksportuj jako";
var select_all14 = "Zaznacz wszystko";
var select_none14 = "Odznacz wszystko";
var delete15 = "Usu\u0144";
var new_project14 = "Nowy projekt";
var open14 = "Otw\xF3rz";
var save14 = "Zapisz";
var save_as14 = "Zapisz jako";
var upload_media14 = "Za\u0142aduj multimedia";
var create_page14 = "Utw\xF3rz stron\u0119";
var new_page14 = "Nowa strona";
var page_name14 = "Nazwa strony";
var duplicate14 = "Powiel";
var cancel14 = "Anuluj";
var copy_invite_link14 = "Kopiuj link zaproszenia";
var create_multiplayer_project14 = "Stw\xF3rz projekt wieloosobowy";
var copy_multiplayer_project14 = "Kopiuj do projektu wieloosobowego";
var select14 = "Zaznacz";
var eraser14 = "Gumka";
var draw14 = "Rysuj";
var arrow14 = "Strza\u0142ka";
var text14 = "Tekst";
var sticky14 = "Naklejka";
var Rectangle14 = "Prostok\u0105t";
var Ellipse14 = "Elipsa";
var Triangle14 = "Tr\xF3jk\u0105t";
var Line13 = "Linia";
var rotate14 = "Obr\xF3\u0107";
var lock_aspect_ratio14 = "Zablokuj proporcje";
var unlock_aspect_ratio14 = "Odblokuj proporcje";
var group14 = "Grupuj";
var ungroup14 = "Rozgrupuj";
var move_to_back14 = "Przenie\u015B na ty\u0142";
var move_backward14 = "Przesu\u0144 do ty\u0142u";
var move_forward14 = "Przesu\u0144 do przodu";
var move_to_front14 = "Przenie\u015B na prz\xF3d";
var reset_angle14 = "Resetuj k\u0105t";
var lock14 = "Zablokuj";
var unlock14 = "Odblokuj";
var move_to_page14 = "Przenie\u015B na stron\u0119";
var flip_horizontal14 = "Odwr\xF3\u0107 w poziomie";
var flip_vertical14 = "Odwr\xF3\u0107 w pionie";
var move14 = "Przenie\u015B";
var to_front14 = "Na wierzch";
var forward14 = "Do przodu";
var backward14 = "Do ty\u0142u";
var back14 = "Na sp\xF3d";
var language14 = "J\u0119zyk";
var pl_default = {
  "style.menu.color": style_menu_color14,
  "style.menu.fill": style_menu_fill14,
  "style.menu.dash": style_menu_dash14,
  "style.menu.size": style_menu_size14,
  "style.menu.keep.open": style_menu_keep_open14,
  "style.menu.font": style_menu_font14,
  "style.menu.align": style_menu_align14,
  styles: styles15,
  "zoom.in": zoom_in14,
  "zoom.out": zoom_out14,
  to: to14,
  "to.selection": to_selection14,
  "to.fit": to_fit14,
  "menu.file": menu_file14,
  "menu.edit": menu_edit14,
  "menu.view": menu_view14,
  "menu.preferences": menu_preferences14,
  "menu.sign.in": menu_sign_in14,
  "menu.sign.out": menu_sign_out14,
  sponsored: sponsored14,
  "become.a.sponsor": become_a_sponsor14,
  "zoom.to.selection": zoom_to_selection14,
  "zoom.to.fit": zoom_to_fit14,
  "zoom.to": zoom_to14,
  "preferences.dark.mode": preferences_dark_mode14,
  "preferences.focus.mode": preferences_focus_mode14,
  "preferences.debug.mode": preferences_debug_mode14,
  "preferences.show.grid": preferences_show_grid14,
  "preferences.use.cad.selection": preferences_use_cad_selection14,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open14,
  "preferences.always.show.snaps": preferences_always_show_snaps14,
  "preferences.rotate.handles": preferences_rotate_handles14,
  "preferences.binding.handles": preferences_binding_handles14,
  "preferences.clone.handles": preferences_clone_handles14,
  undo: undo14,
  redo: redo14,
  cut: cut14,
  copy: copy14,
  paste: paste14,
  "copy.as": copy_as14,
  "export.as": export_as14,
  "select.all": select_all14,
  "select.none": select_none14,
  delete: delete15,
  "new.project": new_project14,
  open: open14,
  save: save14,
  "save.as": save_as14,
  "upload.media": upload_media14,
  "create.page": create_page14,
  "new.page": new_page14,
  "page.name": page_name14,
  duplicate: duplicate14,
  cancel: cancel14,
  "copy.invite.link": copy_invite_link14,
  "create.multiplayer.project": create_multiplayer_project14,
  "copy.multiplayer.project": copy_multiplayer_project14,
  select: select14,
  eraser: eraser14,
  draw: draw14,
  arrow: arrow14,
  text: text14,
  sticky: sticky14,
  Rectangle: Rectangle14,
  Ellipse: Ellipse14,
  Triangle: Triangle14,
  Line: Line13,
  rotate: rotate14,
  "lock.aspect.ratio": lock_aspect_ratio14,
  "unlock.aspect.ratio": unlock_aspect_ratio14,
  group: group14,
  ungroup: ungroup14,
  "move.to.back": move_to_back14,
  "move.backward": move_backward14,
  "move.forward": move_forward14,
  "move.to.front": move_to_front14,
  "reset.angle": reset_angle14,
  lock: lock14,
  unlock: unlock14,
  "move.to.page": move_to_page14,
  "flip.horizontal": flip_horizontal14,
  "flip.vertical": flip_vertical14,
  move: move14,
  "to.front": to_front14,
  forward: forward14,
  backward: backward14,
  back: back14,
  language: language14
};
var style_menu_color15 = "Cor";
var style_menu_fill15 = "Preencher";
var style_menu_dash15 = "Tra\xE7o";
var style_menu_size15 = "Tamanho";
var style_menu_keep_open15 = "Manter aberto";
var style_menu_font15 = "Fonte";
var style_menu_align15 = "Alinhamento";
var styles16 = "Estilos";
var zoom_in15 = "Aumentar zoom";
var zoom_out15 = "Diminuir zoom";
var to15 = "para";
var to_selection15 = "Para sele\xE7\xE3o";
var to_fit15 = "Para encaixar";
var menu_file15 = "Arquivo";
var menu_edit15 = "Editar";
var menu_view15 = "Visualizar";
var menu_preferences15 = "Prefer\xEAncias";
var menu_sign_in15 = "Entrar";
var menu_sign_out15 = "Sair";
var sponsored15 = "Patrocinado";
var become_a_sponsor15 = "Torne-se um patrocinador";
var zoom_to_selection15 = "Zoom para a sele\xE7\xE3o";
var zoom_to_fit15 = "Zoom para ajuste";
var zoom_to15 = "Zoom para";
var preferences_dark_mode15 = "Modo Escuro";
var preferences_focus_mode15 = "Modo Foco";
var preferences_debug_mode15 = "Modo Debug";
var preferences_show_grid15 = "Mostrar Grade";
var preferences_use_cad_selection15 = "Usar sele\xE7\xE3o CAD";
var preferences_keep_stylemenu_open15 = "Manter Menu de Estilos Aberto";
var preferences_always_show_snaps15 = "Mostrar Pontos de Ajuste";
var preferences_rotate_handles15 = "Controle de Rota\xE7\xE3o";
var preferences_binding_handles15 = "Controle de V\xEDnculos";
var preferences_clone_handles15 = "Controle de Clone";
var undo15 = "Desfazer";
var redo15 = "Refazer";
var cut15 = "Cortar";
var copy15 = "Copiar";
var paste15 = "Colar";
var copy_as15 = "Copiar como";
var export_as15 = "Exportar como";
var select_all15 = "Selecionar todos";
var select_none15 = "Selecionar nenhum";
var delete16 = "Deletar";
var new_project15 = "Novo Projeto";
var open15 = "Abrir";
var save15 = "Salvar";
var save_as15 = "Salvar Como";
var upload_media15 = "Carregar M\xEDdia";
var create_page15 = "Criar P\xE1gina";
var new_page15 = "Nova P\xE1gina";
var page_name15 = "Nome da P\xE1gina";
var duplicate15 = "Duplicar";
var cancel15 = "Cancelar";
var copy_invite_link15 = "Copiar Link de Convite";
var create_multiplayer_project15 = "Criar um Projeto Multijogador";
var copy_multiplayer_project15 = "Copiar para Projeto Multijogador";
var select15 = "Selecionar";
var eraser15 = "Borracha";
var draw15 = "Desenhar";
var arrow15 = "Seta";
var text15 = "Texto";
var sticky15 = "Adesivo";
var Rectangle15 = "Ret\xE2ngulo";
var Ellipse15 = "Elipse";
var Triangle15 = "Tri\xE2ngulo";
var Line14 = "Linha";
var rotate15 = "Rotacionar";
var lock_aspect_ratio15 = "Travar Propor\xE7\xE3o da Tela";
var unlock_aspect_ratio15 = "Destravar Propor\xE7\xE3o da Tela";
var group15 = "Agrupar";
var ungroup15 = "Desagrupar";
var move_to_back15 = "Recuar";
var move_backward15 = "Enviar para Tr\xE1s";
var move_forward15 = "Avan\xE7ar";
var move_to_front15 = "Trazer para Frente";
var reset_angle15 = "Reiniciar \xC2ngulo";
var lock15 = "Travar";
var unlock15 = "Destravar";
var move_to_page15 = "Mover para P\xE1gina";
var flip_horizontal15 = "Virar Horizontalmente";
var flip_vertical15 = "Virar Verticalmente";
var move15 = "Mover";
var to_front15 = "Para Frente";
var forward15 = "Avan\xE7ar";
var backward15 = "Recuar";
var back15 = "Voltar";
var language15 = "Idioma";
var pt_br_default = {
  "style.menu.color": style_menu_color15,
  "style.menu.fill": style_menu_fill15,
  "style.menu.dash": style_menu_dash15,
  "style.menu.size": style_menu_size15,
  "style.menu.keep.open": style_menu_keep_open15,
  "style.menu.font": style_menu_font15,
  "style.menu.align": style_menu_align15,
  styles: styles16,
  "zoom.in": zoom_in15,
  "zoom.out": zoom_out15,
  to: to15,
  "to.selection": to_selection15,
  "to.fit": to_fit15,
  "menu.file": menu_file15,
  "menu.edit": menu_edit15,
  "menu.view": menu_view15,
  "menu.preferences": menu_preferences15,
  "menu.sign.in": menu_sign_in15,
  "menu.sign.out": menu_sign_out15,
  sponsored: sponsored15,
  "become.a.sponsor": become_a_sponsor15,
  "zoom.to.selection": zoom_to_selection15,
  "zoom.to.fit": zoom_to_fit15,
  "zoom.to": zoom_to15,
  "preferences.dark.mode": preferences_dark_mode15,
  "preferences.focus.mode": preferences_focus_mode15,
  "preferences.debug.mode": preferences_debug_mode15,
  "preferences.show.grid": preferences_show_grid15,
  "preferences.use.cad.selection": preferences_use_cad_selection15,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open15,
  "preferences.always.show.snaps": preferences_always_show_snaps15,
  "preferences.rotate.handles": preferences_rotate_handles15,
  "preferences.binding.handles": preferences_binding_handles15,
  "preferences.clone.handles": preferences_clone_handles15,
  undo: undo15,
  redo: redo15,
  cut: cut15,
  copy: copy15,
  paste: paste15,
  "copy.as": copy_as15,
  "export.as": export_as15,
  "select.all": select_all15,
  "select.none": select_none15,
  delete: delete16,
  "new.project": new_project15,
  open: open15,
  save: save15,
  "save.as": save_as15,
  "upload.media": upload_media15,
  "create.page": create_page15,
  "new.page": new_page15,
  "page.name": page_name15,
  duplicate: duplicate15,
  cancel: cancel15,
  "copy.invite.link": copy_invite_link15,
  "create.multiplayer.project": create_multiplayer_project15,
  "copy.multiplayer.project": copy_multiplayer_project15,
  select: select15,
  eraser: eraser15,
  draw: draw15,
  arrow: arrow15,
  text: text15,
  sticky: sticky15,
  Rectangle: Rectangle15,
  Ellipse: Ellipse15,
  Triangle: Triangle15,
  Line: Line14,
  rotate: rotate15,
  "lock.aspect.ratio": lock_aspect_ratio15,
  "unlock.aspect.ratio": unlock_aspect_ratio15,
  group: group15,
  ungroup: ungroup15,
  "move.to.back": move_to_back15,
  "move.backward": move_backward15,
  "move.forward": move_forward15,
  "move.to.front": move_to_front15,
  "reset.angle": reset_angle15,
  lock: lock15,
  unlock: unlock15,
  "move.to.page": move_to_page15,
  "flip.horizontal": flip_horizontal15,
  "flip.vertical": flip_vertical15,
  move: move15,
  "to.front": to_front15,
  forward: forward15,
  backward: backward15,
  back: back15,
  language: language15
};
var style_menu_color16 = "\u0426\u0432\u0435\u0442";
var style_menu_fill16 = "\u0417\u0430\u043F\u043E\u043B\u043D\u044F\u0442\u044C";
var style_menu_dash16 = "\u0428\u0442\u0440\u0438\u0445";
var style_menu_size16 = "\u0420\u0430\u0437\u043C\u0435\u0440";
var style_menu_keep_open16 = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var style_menu_font16 = "\u0428\u0440\u0438\u0444\u0442";
var style_menu_align16 = "\u0412\u044B\u0440\u043E\u0432\u043D\u044F\u0442\u044C";
var styles17 = "\u0421\u0442\u0438\u043B\u044C";
var zoom_in16 = "\u0423\u0432\u0435\u043B\u0438\u0447\u0438\u0442\u044C";
var zoom_out16 = "\u0423\u043C\u0435\u043D\u044C\u0448\u0438\u0442\u044C";
var to16 = "\u043A";
var to_selection16 = "\u041A \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044E";
var to_fit16 = "\u041F\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0443 \u044D\u043A\u0440\u0430\u043D\u0430";
var menu_file16 = "\u0424\u0430\u0439\u043B";
var menu_edit16 = "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435";
var menu_view16 = "\u0412\u0438\u0434";
var menu_preferences16 = "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438";
var menu_sign_in16 = "\u0412\u043E\u0439\u0442\u0438";
var menu_sign_out16 = "\u0412\u044B\u0439\u0442\u0438";
var sponsored16 = "\u0421\u043F\u043E\u043D\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043E";
var become_a_sponsor16 = "\u0421\u0442\u0430\u0442\u044C \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var zoom_to_selection16 = "\u041F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u044C \u043A \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044E";
var zoom_to_fit16 = "\u0423\u0432\u0435\u043B\u0438\u0447\u0438\u0442\u044C \u043F\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0443 \u044D\u043A\u0440\u0430\u043D\u0430";
var zoom_to16 = "\u041F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u044C \u043A";
var preferences_dark_mode16 = "\u0422\u0451\u043C\u043D\u0430\u044F \u0442\u0435\u043C\u0430";
var preferences_focus_mode16 = "\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C";
var preferences_debug_mode16 = "\u0420\u0435\u0436\u0438\u043C \u043E\u0442\u043B\u0430\u0434\u043A\u0438";
var preferences_show_grid16 = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0441\u0435\u0442\u043A\u0443";
var preferences_use_cad_selection16 = "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C CAD \u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var preferences_keep_stylemenu_open16 = "\u0414\u0435\u0440\u0436\u0430\u0442\u044C \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0435\u0439 \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u043C";
var preferences_always_show_snaps16 = "\u0412\u0441\u0435\u0433\u0434\u0430 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var preferences_rotate_handles16 = "\u0420\u0443\u0447\u043A\u0438 \u0432\u0440\u0430\u0449\u0435\u043D\u0438\u044F";
var preferences_binding_handles16 = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432\u044F\u0437\u043A\u0438";
var preferences_clone_handles16 = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F";
var undo16 = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var redo16 = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C";
var cut16 = "\u0412\u044B\u0440\u0435\u0437\u0430\u0442\u044C";
var copy16 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var paste16 = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044C";
var copy_as16 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var export_as16 = "\u042D\u043A\u0441\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043A\u0430\u043A";
var select_all16 = "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0451";
var select_none16 = "\u0421\u043D\u044F\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435";
var delete17 = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C";
var new_project16 = "\u041D\u043E\u0432\u044B\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var open16 = "\u041E\u0442\u043A\u0440\u044B\u0442\u044C";
var save16 = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C";
var save_as16 = "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u043A\u0430\u043A";
var upload_media16 = "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0444\u043E\u0442\u043E";
var create_page16 = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var new_page16 = "\u041D\u043E\u0432\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
var page_name16 = "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B";
var duplicate16 = "\u0414\u0443\u0431\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var cancel16 = "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C";
var copy_invite_link16 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u043F\u0440\u0438\u0433\u043B\u0430\u0448\u0435\u043D\u0438\u0435";
var create_multiplayer_project16 = "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var copy_multiplayer_project16 = "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0432 \u043C\u043D\u043E\u0433\u043E\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var select16 = "\u0412\u044B\u0431\u0438\u0440\u0430\u0442\u044C";
var eraser16 = "\u041B\u0430\u0441\u0442\u0438\u043A";
var draw16 = "\u0420\u0438\u0441\u043E\u0432\u0430\u0442\u044C";
var arrow16 = "\u0421\u0442\u0440\u0435\u043B\u043A\u0430";
var text16 = "\u0422\u0435\u043A\u0441\u0442";
var sticky16 = "\u0417\u0430\u043C\u0435\u0442\u043A\u0430";
var Rectangle16 = "\u041F\u0440\u044F\u043C\u043E\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var Ellipse16 = "\u042D\u043B\u043B\u0438\u043F\u0441";
var Triangle16 = "\u0422\u0440\u0435\u0443\u0433\u043E\u043B\u044C\u043D\u0438\u043A";
var Line15 = "\u041B\u0438\u043D\u0438\u044F";
var rotate16 = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u044C";
var lock_aspect_ratio16 = "\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var unlock_aspect_ratio16 = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0435 \u0441\u0442\u043E\u0440\u043E\u043D";
var group16 = "\u0421\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var ungroup16 = "\u0420\u0430\u0437\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C";
var move_to_back16 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430\u0437\u0430\u0434";
var move_backward16 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var move_forward16 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u0432\u043F\u0435\u0440\u0451\u0434";
var move_to_front16 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var reset_angle16 = "\u0421\u0431\u0440\u043E\u0441 \u0443\u0433\u043B\u0430";
var lock16 = "\u0411\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430";
var unlock16 = "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430";
var move_to_page16 = "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
var flip_horizontal16 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var flip_vertical16 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var move16 = "\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C";
var to_front16 = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var forward16 = "\u0412\u043F\u0435\u0440\u0435\u0434";
var backward16 = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0438\u0439 \u043F\u043B\u0430\u043D";
var back16 = "\u041D\u0430\u0437\u0430\u0434";
var language16 = "\u042F\u0437\u044B\u043A";
var ru_default = {
  "style.menu.color": style_menu_color16,
  "style.menu.fill": style_menu_fill16,
  "style.menu.dash": style_menu_dash16,
  "style.menu.size": style_menu_size16,
  "style.menu.keep.open": style_menu_keep_open16,
  "style.menu.font": style_menu_font16,
  "style.menu.align": style_menu_align16,
  styles: styles17,
  "zoom.in": zoom_in16,
  "zoom.out": zoom_out16,
  to: to16,
  "to.selection": to_selection16,
  "to.fit": to_fit16,
  "menu.file": menu_file16,
  "menu.edit": menu_edit16,
  "menu.view": menu_view16,
  "menu.preferences": menu_preferences16,
  "menu.sign.in": menu_sign_in16,
  "menu.sign.out": menu_sign_out16,
  sponsored: sponsored16,
  "become.a.sponsor": become_a_sponsor16,
  "zoom.to.selection": zoom_to_selection16,
  "zoom.to.fit": zoom_to_fit16,
  "zoom.to": zoom_to16,
  "preferences.dark.mode": preferences_dark_mode16,
  "preferences.focus.mode": preferences_focus_mode16,
  "preferences.debug.mode": preferences_debug_mode16,
  "preferences.show.grid": preferences_show_grid16,
  "preferences.use.cad.selection": preferences_use_cad_selection16,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open16,
  "preferences.always.show.snaps": preferences_always_show_snaps16,
  "preferences.rotate.handles": preferences_rotate_handles16,
  "preferences.binding.handles": preferences_binding_handles16,
  "preferences.clone.handles": preferences_clone_handles16,
  undo: undo16,
  redo: redo16,
  cut: cut16,
  copy: copy16,
  paste: paste16,
  "copy.as": copy_as16,
  "export.as": export_as16,
  "select.all": select_all16,
  "select.none": select_none16,
  delete: delete17,
  "new.project": new_project16,
  open: open16,
  save: save16,
  "save.as": save_as16,
  "upload.media": upload_media16,
  "create.page": create_page16,
  "new.page": new_page16,
  "page.name": page_name16,
  duplicate: duplicate16,
  cancel: cancel16,
  "copy.invite.link": copy_invite_link16,
  "create.multiplayer.project": create_multiplayer_project16,
  "copy.multiplayer.project": copy_multiplayer_project16,
  select: select16,
  eraser: eraser16,
  draw: draw16,
  arrow: arrow16,
  text: text16,
  sticky: sticky16,
  Rectangle: Rectangle16,
  Ellipse: Ellipse16,
  Triangle: Triangle16,
  Line: Line15,
  rotate: rotate16,
  "lock.aspect.ratio": lock_aspect_ratio16,
  "unlock.aspect.ratio": unlock_aspect_ratio16,
  group: group16,
  ungroup: ungroup16,
  "move.to.back": move_to_back16,
  "move.backward": move_backward16,
  "move.forward": move_forward16,
  "move.to.front": move_to_front16,
  "reset.angle": reset_angle16,
  lock: lock16,
  unlock: unlock16,
  "move.to.page": move_to_page16,
  "flip.horizontal": flip_horizontal16,
  "flip.vertical": flip_vertical16,
  move: move16,
  "to.front": to_front16,
  forward: forward16,
  backward: backward16,
  back: back16,
  language: language16
};
var style_menu_color17 = "Renk";
var style_menu_fill17 = "Doldur";
var style_menu_dash17 = "\xC7izgi";
var style_menu_size17 = "Boyut";
var style_menu_keep_open17 = "A\xE7\u0131k Tut";
var style_menu_font17 = "Yaz\u0131 Tipi";
var style_menu_align17 = "Hizala";
var styles18 = "Stiller";
var zoom_in17 = "Yak\u0131nla\u015Ft\u0131r";
var zoom_out17 = "Uzakla\u015Ft\u0131r";
var to17 = "";
var to_selection17 = "Se\xE7ime G\xF6re";
var to_fit17 = "S\u0131\u011Fd\u0131rmaya G\xF6re";
var menu_file17 = "Dosya";
var menu_edit17 = "D\xFCzenle";
var menu_view17 = "G\xF6r\xFCnt\xFC";
var menu_preferences17 = "Tercihler";
var menu_sign_in17 = "Giri\u015F Yap";
var menu_sign_out17 = "Oturumu Kapat";
var sponsored17 = "Sponsorlu";
var become_a_sponsor17 = "Sponsor Ol";
var zoom_to_selection17 = "Se\xE7ime Yak\u0131nla\u015Ft\u0131r";
var zoom_to_fit17 = "S\u0131\u011Fd\u0131rmak i\xE7in Yak\u0131nla\u015Ft\u0131r";
var zoom_to17 = "Yak\u0131nla\u015Ft\u0131r";
var preferences_dark_mode17 = "Karanl\u0131k Mod";
var preferences_focus_mode17 = "Odak Modu";
var preferences_debug_mode17 = "Debug Modu";
var preferences_show_grid17 = "Izgaray\u0131 G\xF6ster";
var preferences_use_cad_selection17 = "CAD Se\xE7imi Kullan";
var preferences_keep_stylemenu_open17 = "Stil Men\xFCs\xFCn\xFC A\xE7\u0131k Tut";
var preferences_always_show_snaps17 = "Hiza \xC7izgilerini Hep G\xF6ster";
var preferences_rotate_handles17 = "Rotasyon Kontrolc\xFCleri";
var preferences_binding_handles17 = "Ba\u011Flama Kontrolc\xFCleri";
var preferences_clone_handles17 = "Klon Kontrolc\xFCleri";
var undo17 = "Geri Al";
var redo17 = "Yinele";
var cut17 = "Kes";
var copy17 = "Kopyala";
var paste17 = "Yap\u0131\u015Ft\u0131r";
var copy_as17 = "Olarak Kopyala";
var export_as17 = "Olarak D\u0131\u015Far\u0131 Aktar";
var select_all17 = "Hepsini Se\xE7";
var select_none17 = "Hi\xE7birini Se\xE7me";
var delete18 = "Sil";
var new_project17 = "Yeni Proje";
var open17 = "A\xE7";
var save17 = "Kaydet";
var save_as17 = "Farkl\u0131 Kaydet";
var upload_media17 = "Medya Y\xFCkle";
var create_page17 = "Sayfa Olu\u015Ftur";
var new_page17 = "Yeni Sayfa";
var page_name17 = "Sayfa \u0130smi";
var duplicate17 = "Kopya Olu\u015Ftur";
var cancel17 = "\u0130ptal";
var copy_invite_link17 = "Davet Linkini Kopyala";
var create_multiplayer_project17 = "\xC7ok Oyunculu Proje Olu\u015Ftur";
var copy_multiplayer_project17 = "\xC7ok Oyunculu Projeye Kopyala";
var select17 = "Se\xE7";
var eraser17 = "Silgi";
var draw17 = "\xC7izim";
var arrow17 = "Ok";
var text17 = "Yaz\u0131";
var sticky17 = "Yap\u0131\u015Fkan";
var Rectangle17 = "Dikd\xF6rtgen";
var Ellipse17 = "Elips";
var Triangle17 = "\xDC\xE7gen";
var Line16 = "\xC7izgi";
var rotate17 = "D\xF6nd\xFCr";
var lock_aspect_ratio17 = "En Boy Oran\u0131n\u0131 Kilitle";
var unlock_aspect_ratio17 = "En Boy Oran\u0131 Kilidini A\xE7";
var group17 = "Grupla";
var ungroup17 = "Gruplamay\u0131 Kald\u0131r";
var move_to_back17 = "Arkaya Ta\u015F\u0131";
var move_backward17 = "En Arkaya Ta\u015F\u0131";
var move_forward17 = "En \xD6ne Ta\u015F\u0131";
var move_to_front17 = "\xD6ne Ta\u015F\u0131";
var reset_angle17 = "A\xE7\u0131y\u0131 S\u0131f\u0131rla";
var lock17 = "Kilitle";
var unlock17 = "Kilidini A\xE7";
var move_to_page17 = "Sayfaya Ta\u015F\u0131";
var flip_horizontal17 = "Yatay \xC7evir";
var flip_vertical17 = "Dikey \xC7evir";
var move17 = "Ta\u015F\u0131";
var to_front17 = "\xD6ne";
var forward17 = "En \xD6ne";
var backward17 = "En Arkaya";
var back17 = "Arkaya";
var language17 = "Dil";
var tr_default = {
  "style.menu.color": style_menu_color17,
  "style.menu.fill": style_menu_fill17,
  "style.menu.dash": style_menu_dash17,
  "style.menu.size": style_menu_size17,
  "style.menu.keep.open": style_menu_keep_open17,
  "style.menu.font": style_menu_font17,
  "style.menu.align": style_menu_align17,
  styles: styles18,
  "zoom.in": zoom_in17,
  "zoom.out": zoom_out17,
  to: to17,
  "to.selection": to_selection17,
  "to.fit": to_fit17,
  "menu.file": menu_file17,
  "menu.edit": menu_edit17,
  "menu.view": menu_view17,
  "menu.preferences": menu_preferences17,
  "menu.sign.in": menu_sign_in17,
  "menu.sign.out": menu_sign_out17,
  sponsored: sponsored17,
  "become.a.sponsor": become_a_sponsor17,
  "zoom.to.selection": zoom_to_selection17,
  "zoom.to.fit": zoom_to_fit17,
  "zoom.to": zoom_to17,
  "preferences.dark.mode": preferences_dark_mode17,
  "preferences.focus.mode": preferences_focus_mode17,
  "preferences.debug.mode": preferences_debug_mode17,
  "preferences.show.grid": preferences_show_grid17,
  "preferences.use.cad.selection": preferences_use_cad_selection17,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open17,
  "preferences.always.show.snaps": preferences_always_show_snaps17,
  "preferences.rotate.handles": preferences_rotate_handles17,
  "preferences.binding.handles": preferences_binding_handles17,
  "preferences.clone.handles": preferences_clone_handles17,
  undo: undo17,
  redo: redo17,
  cut: cut17,
  copy: copy17,
  paste: paste17,
  "copy.as": copy_as17,
  "export.as": export_as17,
  "select.all": select_all17,
  "select.none": select_none17,
  delete: delete18,
  "new.project": new_project17,
  open: open17,
  save: save17,
  "save.as": save_as17,
  "upload.media": upload_media17,
  "create.page": create_page17,
  "new.page": new_page17,
  "page.name": page_name17,
  duplicate: duplicate17,
  cancel: cancel17,
  "copy.invite.link": copy_invite_link17,
  "create.multiplayer.project": create_multiplayer_project17,
  "copy.multiplayer.project": copy_multiplayer_project17,
  select: select17,
  eraser: eraser17,
  draw: draw17,
  arrow: arrow17,
  text: text17,
  sticky: sticky17,
  Rectangle: Rectangle17,
  Ellipse: Ellipse17,
  Triangle: Triangle17,
  Line: Line16,
  rotate: rotate17,
  "lock.aspect.ratio": lock_aspect_ratio17,
  "unlock.aspect.ratio": unlock_aspect_ratio17,
  group: group17,
  ungroup: ungroup17,
  "move.to.back": move_to_back17,
  "move.backward": move_backward17,
  "move.forward": move_forward17,
  "move.to.front": move_to_front17,
  "reset.angle": reset_angle17,
  lock: lock17,
  unlock: unlock17,
  "move.to.page": move_to_page17,
  "flip.horizontal": flip_horizontal17,
  "flip.vertical": flip_vertical17,
  move: move17,
  "to.front": to_front17,
  forward: forward17,
  backward: backward17,
  back: back17,
  language: language17
};
var style_menu_color18 = "\u041A\u043E\u043B\u0456\u0440";
var style_menu_fill18 = "\u0417\u0430\u043F\u043E\u0432\u043D\u044E\u0432\u0430\u0442\u0438";
var style_menu_dash18 = "\u0428\u0442\u0440\u0438\u0445";
var style_menu_size18 = "\u0420\u043E\u0437\u043C\u0456\u0440";
var style_menu_keep_open18 = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var style_menu_font18 = "\u0428\u0440\u0438\u0444\u0442";
var style_menu_align18 = "\u0412\u0438\u0440\u0456\u0432\u043D\u044F\u0442\u0438";
var styles19 = "\u0421\u0442\u0438\u043B\u044C";
var zoom_in18 = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438";
var zoom_out18 = "\u0417\u043C\u0435\u043D\u0448\u0438\u0442\u0438";
var to18 = "\u0434\u043E";
var to_selection18 = "\u0414\u043E \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var to_fit18 = "\u0417\u0430 \u0440\u043E\u0437\u043C\u0456\u0440\u043E\u043C \u0435\u043A\u0440\u0430\u043D\u0443";
var menu_file18 = "\u0424\u0430\u0439\u043B";
var menu_edit18 = "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043D\u043D\u044F";
var menu_view18 = "\u0412\u0438\u0433\u043B\u044F\u0434";
var menu_preferences18 = "\u041D\u0430\u043B\u0430\u0448\u0442\u0443\u0432\u0430\u043D\u043D\u044F";
var menu_sign_in18 = "\u0423\u0432\u0456\u0439\u0442\u0438";
var menu_sign_out18 = "\u0412\u0438\u0439\u0442\u0438";
var sponsored18 = "\u0421\u043F\u043E\u043D\u0441\u043E\u0432\u0430\u043D\u043E";
var become_a_sponsor18 = "\u0421\u0442\u0430\u0442\u0438 \u0441\u043F\u043E\u043D\u0441\u043E\u0440\u043E\u043C";
var zoom_to_selection18 = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var zoom_to_fit18 = "\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438 \u0437\u0430 \u0440\u043E\u0437\u043C\u0456\u0440\u043E\u043C \u0435\u043A\u0440\u0430\u043D\u0443";
var zoom_to18 = "\u041D\u0430\u0431\u043B\u0438\u0437\u0438\u0442\u0438 \u0434\u043E";
var preferences_dark_mode18 = "\u0422\u0435\u043C\u043D\u0430 \u0442\u0435\u043C\u0430";
var preferences_focus_mode18 = "\u041C\u0456\u043D\u0456\u043C\u0430\u043B\u0456\u0441\u0442\u0438\u0447\u043D\u0438\u0439 \u0440\u0435\u0436\u0438\u043C";
var preferences_debug_mode18 = "\u0420\u0435\u0436\u0438\u043C \u043D\u0430\u043B\u0430\u0433\u043E\u0434\u0436\u0435\u043D\u043D\u044F";
var preferences_show_grid18 = "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0441\u0456\u0442\u043A\u0443";
var preferences_use_cad_selection18 = "\u0412\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0432\u0430\u0442\u0438 CAD \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var preferences_keep_stylemenu_open18 = "\u0422\u0440\u0438\u043C\u0430\u0442\u0438 \u043C\u0435\u043D\u044E \u0441\u0442\u0438\u043B\u0456\u0432 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438\u043C";
var preferences_always_show_snaps18 = "\u0417\u0430\u0432\u0436\u0434\u0438 \u043F\u043E\u043A\u0430\u0437\u0443\u0432\u0430\u0442\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var preferences_rotate_handles18 = "\u0420\u0443\u0447\u043A\u0438 \u043E\u0431\u0435\u0440\u0442\u0430\u043D\u043D\u044F";
var preferences_binding_handles18 = "\u0420\u0443\u0447\u043A\u0438 \u043F\u0440\u0438\u0432'\u044F\u0437\u043A\u0438";
var preferences_clone_handles18 = "\u0420\u0443\u0447\u043A\u0438 \u043A\u043B\u043E\u043D\u0443\u0432\u0430\u043D\u043D\u044F";
var undo18 = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var redo18 = "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0438";
var cut18 = "\u0412\u0438\u0440\u0456\u0437\u0430\u0442\u0438";
var copy18 = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438";
var paste18 = "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u0438";
var copy_as18 = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u044F\u043A";
var export_as18 = "\u0415\u043A\u0441\u043F\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u044F\u043A";
var select_all18 = "\u041E\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0435";
var select_none18 = "\u0417\u043D\u044F\u0442\u0438 \u0432\u0438\u0434\u0456\u043B\u0435\u043D\u043D\u044F";
var delete19 = "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438";
var new_project18 = "\u041D\u043E\u0432\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var open18 = "\u0412\u0456\u0434\u043A\u0440\u0438\u0442\u0438";
var save18 = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438";
var save_as18 = "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u044F\u043A";
var upload_media18 = "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438 \u043C\u0435\u0434\u0456\u0430";
var create_page18 = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var new_page18 = "\u041D\u043E\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0430";
var page_name18 = "\u041D\u0430\u0437\u0432\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0438";
var duplicate18 = "\u0414\u0443\u0431\u043B\u044E\u0432\u0430\u0442\u0438";
var cancel18 = "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438";
var copy_invite_link18 = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u043F\u043E\u0441\u0438\u043B\u0430\u043D\u043D\u044F \u043D\u0430 \u0437\u0430\u043F\u0440\u043E\u0448\u0435\u043D\u043D\u044F";
var create_multiplayer_project18 = "\u0421\u0442\u0432\u043E\u0440\u0438\u0442\u0438 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var copy_multiplayer_project18 = "\u0421\u043A\u043E\u043F\u0456\u044E\u0432\u0430\u0442\u0438 \u0432 \u0431\u0430\u0433\u0430\u0442\u043E\u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0446\u044C\u043A\u0438\u0439 \u043F\u0440\u043E\u0435\u043A\u0442";
var select18 = "\u0412\u0438\u0431\u0438\u0440\u0430\u0442\u0438";
var eraser18 = "\u041B\u0430\u0441\u0442\u0438\u043A";
var draw18 = "\u041C\u0430\u043B\u044E\u0432\u0430\u0442\u0438";
var arrow18 = "\u0421\u0442\u0440\u0456\u043B\u043A\u0430";
var text18 = "\u0422\u0435\u043A\u0441\u0442";
var sticky18 = "\u041D\u043E\u0442\u0430\u0442\u043A\u0430";
var Rectangle18 = "\u041F\u0440\u044F\u043C\u043E\u043A\u0443\u0442\u043D\u0438\u043A";
var Ellipse18 = "\u0415\u043B\u0456\u043F\u0441";
var Triangle18 = "\u0422\u0440\u0438\u043A\u0443\u0442\u043D\u0438\u043A";
var Line17 = " \u041B\u0456\u043D\u0456\u044F";
var rotate18 = "\u041F\u043E\u0432\u0435\u0440\u043D\u0443\u0442\u0438";
var lock_aspect_ratio18 = "\u0417\u0430\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var unlock_aspect_ratio18 = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u0442\u0438 \u0441\u043F\u0456\u0432\u0432\u0456\u0434\u043D\u043E\u0448\u0435\u043D\u043D\u044F \u0441\u0442\u043E\u0440\u0456\u043D";
var group18 = "\u0417\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var ungroup18 = " \u0420\u043E\u0437\u0433\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438";
var move_to_back18 = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430\u0437\u0430\u0434";
var move_backward18 = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var move_forward18 = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u0432\u043F\u0435\u0440\u0435\u0434";
var move_to_front18 = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var reset_angle18 = "\u0421\u043A\u0438\u0434\u0430\u043D\u043D\u044F \u043A\u0443\u0442\u0430";
var lock18 = "\u0411\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var unlock18 = " \u0420\u043E\u0437\u0431\u043B\u043E\u043A\u0443\u0432\u0430\u043D\u043D\u044F";
var move_to_page18 = "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
var flip_horizontal18 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E";
var flip_vertical18 = "\u041F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u0438 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E";
var move18 = "\u041F\u0435\u0440\u0435\u043C\u0456\u0441\u0442\u0438\u0442\u0438";
var to_front18 = "\u041D\u0430 \u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var forward18 = " \u0412\u043F\u0435\u0440\u0435\u0434";
var backward18 = "\u041D\u0430 \u0437\u0430\u0434\u043D\u0456\u0439 \u043F\u043B\u0430\u043D";
var back18 = "\u041D\u0430\u0437\u0430\u0434";
var language18 = "\u041C\u043E\u0432\u0430";
var uk_default = {
  "style.menu.color": style_menu_color18,
  "style.menu.fill": style_menu_fill18,
  "style.menu.dash": style_menu_dash18,
  "style.menu.size": style_menu_size18,
  "style.menu.keep.open": style_menu_keep_open18,
  "style.menu.font": style_menu_font18,
  "style.menu.align": style_menu_align18,
  styles: styles19,
  "zoom.in": zoom_in18,
  "zoom.out": zoom_out18,
  to: to18,
  "to.selection": to_selection18,
  "to.fit": to_fit18,
  "menu.file": menu_file18,
  "menu.edit": menu_edit18,
  "menu.view": menu_view18,
  "menu.preferences": menu_preferences18,
  "menu.sign.in": menu_sign_in18,
  "menu.sign.out": menu_sign_out18,
  sponsored: sponsored18,
  "become.a.sponsor": become_a_sponsor18,
  "zoom.to.selection": zoom_to_selection18,
  "zoom.to.fit": zoom_to_fit18,
  "zoom.to": zoom_to18,
  "preferences.dark.mode": preferences_dark_mode18,
  "preferences.focus.mode": preferences_focus_mode18,
  "preferences.debug.mode": preferences_debug_mode18,
  "preferences.show.grid": preferences_show_grid18,
  "preferences.use.cad.selection": preferences_use_cad_selection18,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open18,
  "preferences.always.show.snaps": preferences_always_show_snaps18,
  "preferences.rotate.handles": preferences_rotate_handles18,
  "preferences.binding.handles": preferences_binding_handles18,
  "preferences.clone.handles": preferences_clone_handles18,
  undo: undo18,
  redo: redo18,
  cut: cut18,
  copy: copy18,
  paste: paste18,
  "copy.as": copy_as18,
  "export.as": export_as18,
  "select.all": select_all18,
  "select.none": select_none18,
  delete: delete19,
  "new.project": new_project18,
  open: open18,
  save: save18,
  "save.as": save_as18,
  "upload.media": upload_media18,
  "create.page": create_page18,
  "new.page": new_page18,
  "page.name": page_name18,
  duplicate: duplicate18,
  cancel: cancel18,
  "copy.invite.link": copy_invite_link18,
  "create.multiplayer.project": create_multiplayer_project18,
  "copy.multiplayer.project": copy_multiplayer_project18,
  select: select18,
  eraser: eraser18,
  draw: draw18,
  arrow: arrow18,
  text: text18,
  sticky: sticky18,
  Rectangle: Rectangle18,
  Ellipse: Ellipse18,
  Triangle: Triangle18,
  Line: Line17,
  rotate: rotate18,
  "lock.aspect.ratio": lock_aspect_ratio18,
  "unlock.aspect.ratio": unlock_aspect_ratio18,
  group: group18,
  ungroup: ungroup18,
  "move.to.back": move_to_back18,
  "move.backward": move_backward18,
  "move.forward": move_forward18,
  "move.to.front": move_to_front18,
  "reset.angle": reset_angle18,
  lock: lock18,
  unlock: unlock18,
  "move.to.page": move_to_page18,
  "flip.horizontal": flip_horizontal18,
  "flip.vertical": flip_vertical18,
  move: move18,
  "to.front": to_front18,
  forward: forward18,
  backward: backward18,
  back: back18,
  language: language18
};
var style_menu_color19 = "\u989C\u8272";
var style_menu_fill19 = "\u586B\u5145";
var style_menu_dash19 = "\u8FB9\u6846";
var style_menu_size19 = "\u5C3A\u5BF8";
var style_menu_keep_open19 = "\u4FDD\u6301\u5E38\u5F00";
var style_menu_font19 = "\u5B57\u4F53";
var style_menu_align19 = "\u5BF9\u9F50";
var styles20 = "\u6837\u5F0F";
var zoom_in19 = "\u653E\u5927";
var zoom_out19 = "\u7F29\u5C0F";
var to19 = "\u7F29\u653E\u81F3";
var to_selection19 = "\u7F29\u653E\u9009\u4E2D";
var to_fit19 = "\u81EA\u9002\u5E94\u7F29\u653E";
var menu_file19 = "\u6587\u4EF6";
var menu_edit19 = "\u7F16\u8F91";
var menu_view19 = "\u89C6\u56FE";
var menu_preferences19 = "\u504F\u597D";
var menu_sign_in19 = "\u767B\u5F55";
var menu_sign_out19 = "\u767B\u51FA";
var sponsored19 = "\u5DF2\u8D5E\u52A9";
var become_a_sponsor19 = "\u6210\u4E3A\u8D5E\u52A9\u8005";
var zoom_to_selection19 = "\u7F29\u653E\u9009\u4E2D";
var zoom_to_fit19 = "\u81EA\u9002\u5E94\u7F29\u653E";
var zoom_to19 = "\u7F29\u653E\u81F3";
var preferences_dark_mode19 = "\u6697\u9ED1\u6A21\u5F0F";
var preferences_focus_mode19 = "\u4E13\u6CE8\u6A21\u5F0F";
var preferences_debug_mode19 = "\u8C03\u8BD5\u6A21\u5F0F";
var preferences_show_grid19 = "\u663E\u793A\u7F51\u683C";
var preferences_use_cad_selection19 = "\u4F7F\u7528 CAD \u9009\u62E9";
var preferences_keep_stylemenu_open19 = "\u4FDD\u6301\u6837\u5F0F\u83DC\u5355\u5E38\u5F00";
var preferences_always_show_snaps19 = "\u603B\u662F\u5C55\u793A\u5BF9\u9F50\u7EBF";
var preferences_rotate_handles19 = "\u65CB\u8F6C\u624B\u67C4";
var preferences_binding_handles19 = "\u6346\u7ED1\u624B\u67C4";
var preferences_clone_handles19 = "\u514B\u9686\u624B\u67C4";
var undo19 = "\u64A4\u9500";
var redo19 = "\u91CD\u505A";
var cut19 = "\u526A\u5207";
var copy19 = "\u590D\u5236";
var paste19 = "\u7C98\u8D34";
var copy_as19 = "\u590D\u5236\u4E3A";
var export_as19 = "\u5BFC\u51FA\u4E3A";
var select_all19 = "\u9009\u4E2D\u5168\u90E8";
var select_none19 = "\u53D6\u6D88\u9009\u4E2D";
var delete20 = "\u5220\u9664";
var new_project19 = "\u65B0\u5DE5\u7A0B";
var open19 = "\u6253\u5F00";
var save19 = "\u4FDD\u5B58";
var save_as19 = "\u4FDD\u5B58\u4E3A";
var upload_media19 = "\u4E0A\u4F20\u5A92\u4F53\u6587\u4EF6";
var create_page19 = "\u521B\u5EFA\u9875\u9762";
var new_page19 = "\u65B0\u9875\u9762";
var page_name19 = "\u9875\u9762\u540D\u79F0";
var duplicate19 = "\u590D\u5236";
var cancel19 = "\u53D6\u6D88";
var copy_invite_link19 = "\u590D\u5236\u9080\u8BF7\u94FE\u63A5";
var create_multiplayer_project19 = "\u521B\u5EFA\u591A\u4EBA\u5DE5\u7A0B";
var copy_multiplayer_project19 = "\u590D\u5236\u5230\u591A\u4EBA\u5DE5\u7A0B";
var select19 = "\u9009\u62E9";
var eraser19 = "\u6A61\u76AE";
var draw19 = "\u753B\u7B14";
var arrow19 = "\u7BAD\u5934";
var text19 = "\u6587\u672C";
var sticky19 = "\u4FBF\u5229\u8D34";
var Rectangle19 = "\u77E9\u5F62";
var Ellipse19 = "\u692D\u5706\u5F62";
var Triangle19 = "\u4E09\u89D2\u5F62";
var Line18 = "\u76F4\u7EBF";
var rotate19 = "\u65CB\u8F6C";
var lock_aspect_ratio19 = "\u9501\u5B9A\u5BBD\u9AD8\u6BD4";
var unlock_aspect_ratio19 = "\u89E3\u9501\u5BBD\u9AD8\u6BD4";
var group19 = "\u5206\u7EC4";
var ungroup19 = "\u53D6\u6D88\u5206\u7EC4";
var move_to_back19 = "\u7F6E\u5E95";
var move_backward19 = "\u4E0B\u79FB\u4E00\u5C42";
var move_forward19 = "\u4E0A\u79FB\u4E00\u5C42";
var move_to_front19 = "\u7F6E\u9876";
var reset_angle19 = "\u91CD\u7F6E\u65CB\u8F6C\u89D2\u5EA6";
var lock19 = "\u9501\u5B9A";
var unlock19 = "\u89E3\u9501";
var move_to_page19 = "\u79FB\u52A8\u5230\u9875\u9762";
var flip_horizontal19 = "\u6C34\u5E73\u7FFB\u8F6C";
var flip_vertical19 = "\u5782\u76F4\u7FFB\u8F6C";
var move19 = "\u79FB\u52A8";
var to_front19 = "\u7F6E\u9876";
var forward19 = "\u4E0A\u4E00\u5C42";
var backward19 = "\u4E0B\u4E00\u5C42";
var back19 = "\u7F6E\u5E95";
var language19 = "\u8BED\u8A00";
var zh_cn_default = {
  "style.menu.color": style_menu_color19,
  "style.menu.fill": style_menu_fill19,
  "style.menu.dash": style_menu_dash19,
  "style.menu.size": style_menu_size19,
  "style.menu.keep.open": style_menu_keep_open19,
  "style.menu.font": style_menu_font19,
  "style.menu.align": style_menu_align19,
  styles: styles20,
  "zoom.in": zoom_in19,
  "zoom.out": zoom_out19,
  to: to19,
  "to.selection": to_selection19,
  "to.fit": to_fit19,
  "menu.file": menu_file19,
  "menu.edit": menu_edit19,
  "menu.view": menu_view19,
  "menu.preferences": menu_preferences19,
  "menu.sign.in": menu_sign_in19,
  "menu.sign.out": menu_sign_out19,
  sponsored: sponsored19,
  "become.a.sponsor": become_a_sponsor19,
  "zoom.to.selection": zoom_to_selection19,
  "zoom.to.fit": zoom_to_fit19,
  "zoom.to": zoom_to19,
  "preferences.dark.mode": preferences_dark_mode19,
  "preferences.focus.mode": preferences_focus_mode19,
  "preferences.debug.mode": preferences_debug_mode19,
  "preferences.show.grid": preferences_show_grid19,
  "preferences.use.cad.selection": preferences_use_cad_selection19,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open19,
  "preferences.always.show.snaps": preferences_always_show_snaps19,
  "preferences.rotate.handles": preferences_rotate_handles19,
  "preferences.binding.handles": preferences_binding_handles19,
  "preferences.clone.handles": preferences_clone_handles19,
  undo: undo19,
  redo: redo19,
  cut: cut19,
  copy: copy19,
  paste: paste19,
  "copy.as": copy_as19,
  "export.as": export_as19,
  "select.all": select_all19,
  "select.none": select_none19,
  delete: delete20,
  "new.project": new_project19,
  open: open19,
  save: save19,
  "save.as": save_as19,
  "upload.media": upload_media19,
  "create.page": create_page19,
  "new.page": new_page19,
  "page.name": page_name19,
  duplicate: duplicate19,
  cancel: cancel19,
  "copy.invite.link": copy_invite_link19,
  "create.multiplayer.project": create_multiplayer_project19,
  "copy.multiplayer.project": copy_multiplayer_project19,
  select: select19,
  eraser: eraser19,
  draw: draw19,
  arrow: arrow19,
  text: text19,
  sticky: sticky19,
  Rectangle: Rectangle19,
  Ellipse: Ellipse19,
  Triangle: Triangle19,
  Line: Line18,
  rotate: rotate19,
  "lock.aspect.ratio": lock_aspect_ratio19,
  "unlock.aspect.ratio": unlock_aspect_ratio19,
  group: group19,
  ungroup: ungroup19,
  "move.to.back": move_to_back19,
  "move.backward": move_backward19,
  "move.forward": move_forward19,
  "move.to.front": move_to_front19,
  "reset.angle": reset_angle19,
  lock: lock19,
  unlock: unlock19,
  "move.to.page": move_to_page19,
  "flip.horizontal": flip_horizontal19,
  "flip.vertical": flip_vertical19,
  move: move19,
  "to.front": to_front19,
  forward: forward19,
  backward: backward19,
  back: back19,
  language: language19
};
var style_menu_color20 = "\u984F\u8272";
var style_menu_fill20 = "\u586B\u5145";
var style_menu_dash20 = "\u865B\u7DDA";
var style_menu_size20 = "\u5927\u5C0F";
var style_menu_keep_open20 = "\u4FDD\u6301\u958B\u555F";
var style_menu_font20 = "\u5B57\u578B";
var style_menu_align20 = "\u5C0D\u9F4A";
var styles21 = "\u6A23\u5F0F";
var zoom_in20 = "\u653E\u5927";
var zoom_out20 = "\u7E2E\u5C0F";
var to20 = "\u81F3";
var to_selection20 = "\u81F3\u9078\u53D6\u7BC4\u570D";
var to_fit20 = "\u81F3\u9069\u7576\u5927\u5C0F";
var menu_file20 = "\u6A94\u6848";
var menu_edit20 = "\u7DE8\u8F2F";
var menu_view20 = "\u6AA2\u8996";
var menu_preferences20 = "\u9078\u9805";
var menu_sign_in20 = "\u767B\u5165";
var menu_sign_out20 = "\u767B\u51FA";
var sponsored20 = "\u8D0A\u52A9";
var become_a_sponsor20 = "\u6210\u70BA\u8D0A\u52A9\u8005";
var zoom_to_selection20 = "\u7E2E\u653E\u81F3\u9078\u53D6\u7BC4\u570D";
var zoom_to_fit20 = "\u7E2E\u653E\u81F3\u9069\u7576\u5927\u5C0F";
var zoom_to20 = "\u7E2E\u653E\u81F3";
var preferences_dark_mode20 = "\u6DF1\u8272\u6A21\u5F0F";
var preferences_focus_mode20 = "\u5C08\u6CE8\u6A21\u5F0F";
var preferences_debug_mode20 = "\u9664\u932F\u6A21\u5F0F";
var preferences_show_grid20 = "\u986F\u793A\u7DB2\u683C";
var preferences_use_cad_selection20 = "\u4F7F\u7528 CAD \u9078\u53D6";
var preferences_keep_stylemenu_open20 = "\u6A23\u5F0F\u9078\u55AE\u4FDD\u6301\u958B\u555F";
var preferences_always_show_snaps20 = "\u6C38\u9060\u986F\u793A\u5C0D\u9F4A\u7DDA";
var preferences_rotate_handles20 = "\u65CB\u8F49\u63A7\u9EDE";
var preferences_binding_handles20 = "\u7D81\u5B9A\u63A7\u9EDE";
var preferences_clone_handles20 = "\u8907\u88FD\u63A7\u9EDE";
var undo20 = "\u5FA9\u539F";
var redo20 = "\u53D6\u6D88\u5FA9\u539F";
var cut20 = "\u526A\u4E0B";
var copy20 = "\u8907\u88FD";
var paste20 = "\u8CBC\u4E0A";
var copy_as20 = "\u8907\u88FD\u6210";
var export_as20 = "\u532F\u51FA\u6210";
var select_all20 = "\u5168\u9078";
var select_none20 = "\u53D6\u6D88\u9078\u53D6";
var delete21 = "\u522A\u9664";
var new_project20 = "\u65B0\u5C08\u6848";
var open20 = "\u958B\u555F";
var save20 = "\u5132\u5B58";
var save_as20 = "\u53E6\u5B58\u70BA";
var upload_media20 = "\u4E0A\u50B3\u5A92\u9AD4";
var create_page20 = "\u5EFA\u7ACB\u9801\u9762";
var new_page20 = "\u65B0\u9801\u9762";
var page_name20 = "\u9801\u9762\u540D\u7A31";
var duplicate20 = "\u8907\u88FD";
var cancel20 = "\u53D6\u6D88";
var copy_invite_link20 = "\u8907\u88FD\u9080\u8ACB\u9023\u7D50";
var copy_readonly_link4 = "\u8907\u88FD\u552F\u8B80\u9023\u7D50";
var create_multiplayer_project20 = "\u5EFA\u7ACB\u591A\u4EBA\u5C08\u6848";
var copy_multiplayer_project20 = "\u8907\u88FD\u81F3\u591A\u4EBA\u5C08\u6848";
var select20 = "\u9078\u53D6";
var eraser20 = "\u6A61\u76AE\u64E6";
var draw20 = "\u624B\u7E6A";
var arrow20 = "\u7BAD\u982D";
var text20 = "\u6587\u5B57";
var sticky20 = "\u4FBF\u5229\u8CBC";
var Rectangle20 = "\u9577\u65B9\u5F62";
var Ellipse20 = "\u6A62\u5713\u5F62";
var Triangle20 = "\u4E09\u89D2\u5F62";
var Line19 = "\u76F4\u7DDA";
var rotate20 = "\u65CB\u8F49";
var lock_aspect_ratio20 = "\u9396\u5B9A\u9577\u5BEC\u6BD4";
var unlock_aspect_ratio20 = "\u89E3\u9396\u9577\u5BEC\u6BD4";
var group20 = "\u7D44\u6210\u7FA4\u7D44";
var ungroup20 = "\u53D6\u6D88\u7FA4\u7D44";
var move_to_back20 = "\u79FB\u5230\u6700\u4E0B\u5C64";
var move_backward20 = "\u4E0B\u79FB\u4E00\u5C64";
var move_forward20 = "\u4E0A\u79FB\u4E00\u5C64";
var move_to_front20 = "\u79FB\u5230\u6700\u4E0A\u5C64";
var reset_angle20 = "\u91CD\u8A2D\u89D2\u5EA6";
var lock20 = "\u9396\u5B9A";
var unlock20 = "\u89E3\u9396";
var move_to_page20 = "\u79FB\u81F3\u9801\u9762";
var flip_horizontal20 = "\u6C34\u5E73\u7FFB\u8F49";
var flip_vertical20 = "\u5782\u76F4\u7FFB\u8F49";
var move20 = "\u79FB\u52D5";
var to_front20 = "\u5230\u6700\u4E0A\u5C64";
var forward20 = "\u5230\u4E0A\u4E00\u5C64";
var backward20 = "\u5230\u4E0B\u4E00\u5C64";
var back20 = "\u5230\u6700\u4E0B\u5C64";
var language20 = "\u8A9E\u8A00";
var translation_link3 = "\u4E86\u89E3\u8A73\u60C5";
var dock_position5 = "\u5DE5\u5177\u5217\u4F4D\u7F6E";
var bottom5 = "\u4E0B\u65B9";
var left5 = "\u5DE6\u5074";
var right5 = "\u53F3\u5074";
var top6 = "\u4E0A\u65B9";
var page6 = "\u9801\u9762";
var zh_tw_default = {
  "style.menu.color": style_menu_color20,
  "style.menu.fill": style_menu_fill20,
  "style.menu.dash": style_menu_dash20,
  "style.menu.size": style_menu_size20,
  "style.menu.keep.open": style_menu_keep_open20,
  "style.menu.font": style_menu_font20,
  "style.menu.align": style_menu_align20,
  styles: styles21,
  "zoom.in": zoom_in20,
  "zoom.out": zoom_out20,
  to: to20,
  "to.selection": to_selection20,
  "to.fit": to_fit20,
  "menu.file": menu_file20,
  "menu.edit": menu_edit20,
  "menu.view": menu_view20,
  "menu.preferences": menu_preferences20,
  "menu.sign.in": menu_sign_in20,
  "menu.sign.out": menu_sign_out20,
  sponsored: sponsored20,
  "become.a.sponsor": become_a_sponsor20,
  "zoom.to.selection": zoom_to_selection20,
  "zoom.to.fit": zoom_to_fit20,
  "zoom.to": zoom_to20,
  "preferences.dark.mode": preferences_dark_mode20,
  "preferences.focus.mode": preferences_focus_mode20,
  "preferences.debug.mode": preferences_debug_mode20,
  "preferences.show.grid": preferences_show_grid20,
  "preferences.use.cad.selection": preferences_use_cad_selection20,
  "preferences.keep.stylemenu.open": preferences_keep_stylemenu_open20,
  "preferences.always.show.snaps": preferences_always_show_snaps20,
  "preferences.rotate.handles": preferences_rotate_handles20,
  "preferences.binding.handles": preferences_binding_handles20,
  "preferences.clone.handles": preferences_clone_handles20,
  undo: undo20,
  redo: redo20,
  cut: cut20,
  copy: copy20,
  paste: paste20,
  "copy.as": copy_as20,
  "export.as": export_as20,
  "select.all": select_all20,
  "select.none": select_none20,
  delete: delete21,
  "new.project": new_project20,
  open: open20,
  save: save20,
  "save.as": save_as20,
  "upload.media": upload_media20,
  "create.page": create_page20,
  "new.page": new_page20,
  "page.name": page_name20,
  duplicate: duplicate20,
  cancel: cancel20,
  "copy.invite.link": copy_invite_link20,
  "copy.readonly.link": copy_readonly_link4,
  "create.multiplayer.project": create_multiplayer_project20,
  "copy.multiplayer.project": copy_multiplayer_project20,
  select: select20,
  eraser: eraser20,
  draw: draw20,
  arrow: arrow20,
  text: text20,
  sticky: sticky20,
  Rectangle: Rectangle20,
  Ellipse: Ellipse20,
  Triangle: Triangle20,
  Line: Line19,
  rotate: rotate20,
  "lock.aspect.ratio": lock_aspect_ratio20,
  "unlock.aspect.ratio": unlock_aspect_ratio20,
  group: group20,
  ungroup: ungroup20,
  "move.to.back": move_to_back20,
  "move.backward": move_backward20,
  "move.forward": move_forward20,
  "move.to.front": move_to_front20,
  "reset.angle": reset_angle20,
  lock: lock20,
  unlock: unlock20,
  "move.to.page": move_to_page20,
  "flip.horizontal": flip_horizontal20,
  "flip.vertical": flip_vertical20,
  move: move20,
  "to.front": to_front20,
  forward: forward20,
  backward: backward20,
  back: back20,
  language: language20,
  "translation.link": translation_link3,
  "dock.position": dock_position5,
  bottom: bottom5,
  left: left5,
  right: right5,
  top: top6,
  page: page6
};
var TRANSLATIONS = [
  { locale: "ar", label: "\u0639\u0631\u0628\u064A", messages: ar_default },
  { locale: "da", label: "Danish", messages: da_default },
  { locale: "de", label: "Deutsch", messages: de_default },
  { locale: "en", label: "English", messages: en_default },
  { locale: "es", label: "Espa\xF1ol", messages: es_default },
  { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC", messages: fa_default },
  { locale: "fr", label: "Fran\xE7ais", messages: fr_default },
  { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA", messages: he_default },
  { locale: "it", label: "Italiano", messages: it_default },
  { locale: "ja", label: "\u65E5\u672C\u8A9E", messages: ja_default },
  { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4", messages: ko_kr_default },
  { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940", messages: ne_default },
  { locale: "no", label: "Norwegian", messages: no_default },
  { locale: "pl", label: "Polski", messages: pl_default },
  { locale: "pt-br", label: "Portugu\xEAs - Brasil", messages: pt_br_default },
  { locale: "ru", label: "Russian", messages: ru_default },
  { locale: "tr", label: "T\xFCrk\xE7e", messages: tr_default },
  { locale: "uk", label: "Ukrainian", messages: uk_default },
  { locale: "zh-ch", label: "Chinese - Simplified", messages: zh_cn_default },
  { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)", messages: zh_tw_default }
];
TRANSLATIONS.sort((a6, b7) => a6.locale < b7.locale ? -1 : 1);
function getTranslation(locale) {
  var _a3;
  const translation = TRANSLATIONS.find((t12) => t12.locale === locale);
  return {
    locale,
    label: (_a3 = translation == null ? void 0 : translation.label) != null ? _a3 : locale,
    messages: __spreadValues4(__spreadValues4({}, main_default), translation == null ? void 0 : translation.messages)
  };
}
function useTranslation(locale) {
  return React302.useMemo(() => {
    return getTranslation(locale != null ? locale : navigator.language.split(/[-_]/)[0]);
  }, [locale]);
}
var breakpoints = {
  "@initial": "mobile",
  "@micro": "micro",
  "@sm": "small",
  "@md": "medium",
  "@lg": "large"
};
var statusSelector = (s9) => s9.appState.status;
var activeToolSelector = (s9) => s9.appState.activeTool;
function StatusBar() {
  const app = useTldrawApp();
  const status = app.useStore(statusSelector);
  const activeTool = app.useStore(activeToolSelector);
  return /* @__PURE__ */ React312.createElement(StyledStatusBar, {
    bp: breakpoints,
    id: "TD-StatusBar"
  }, /* @__PURE__ */ React312.createElement(StyledSection, null, activeTool, " | ", status));
}
var StyledStatusBar = styled("div", {
  height: 40,
  userSelect: "none",
  borderTop: "1px solid $panelContrast",
  gridArea: "status",
  display: "flex",
  color: "$text",
  justifyContent: "space-between",
  alignItems: "center",
  backgroundColor: "$panel",
  gap: 8,
  fontFamily: "$ui",
  fontSize: "$0",
  padding: "0 16px",
  variants: {
    bp: {
      small: {
        fontSize: "$1"
      }
    }
  }
});
var StyledSection = styled("div", {
  whiteSpace: "nowrap",
  overflow: "hidden"
});
var commandKey = () => Utils.isDarwin() ? "\u2318" : "Ctrl";
function Kbd({ variant, children }) {
  return /* @__PURE__ */ React323.createElement(StyledKbd, {
    variant
  }, children.split("").map((k4, i7) => {
    return /* @__PURE__ */ React323.createElement("span", {
      key: i7
    }, k4.replace("#", commandKey()));
  }));
}
var StyledKbd = styled("kbd", {
  marginLeft: "$3",
  textShadow: "$2",
  textAlign: "center",
  fontSize: "$0",
  fontFamily: "$ui",
  color: "$text",
  background: "none",
  fontWeight: 400,
  gap: "$1",
  display: "flex",
  alignItems: "center",
  "& > span": {
    padding: "$0",
    borderRadius: "$0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  },
  variants: {
    variant: {
      tooltip: {
        "& > span": {
          color: "$tooltipContrast",
          background: "$overlayContrast",
          boxShadow: "$key",
          width: "20px",
          height: "20px"
        }
      },
      menu: {}
    }
  }
});
var SmallIcon = styled("div", {
  height: "100%",
  borderRadius: "4px",
  marginRight: "1px",
  width: "fit-content",
  display: "grid",
  alignItems: "center",
  justifyContent: "center",
  outline: "none",
  border: "none",
  pointerEvents: "all",
  cursor: "pointer",
  color: "currentColor",
  "& svg": {
    height: 16,
    width: 16,
    strokeWidth: 1
  },
  "& > *": {
    gridRow: 1,
    gridColumn: 1
  }
});
var RowButton = React332.forwardRef((_a3, ref) => {
  var _b = _a3, {
    onClick,
    isActive = false,
    isWarning = false,
    hasIndicator = false,
    hasArrow = false,
    disabled = false,
    variant,
    kbd,
    children
  } = _b, rest = __objRest3(_b, [
    "onClick",
    "isActive",
    "isWarning",
    "hasIndicator",
    "hasArrow",
    "disabled",
    "variant",
    "kbd",
    "children"
  ]);
  return /* @__PURE__ */ React332.createElement(StyledRowButton, __spreadValues4({
    ref,
    bp: breakpoints,
    isWarning,
    isActive,
    disabled,
    onClick,
    variant
  }, rest), /* @__PURE__ */ React332.createElement(StyledRowButtonInner, null, children, kbd ? /* @__PURE__ */ React332.createElement(Kbd, {
    variant: "menu"
  }, kbd) : void 0, hasIndicator && /* @__PURE__ */ React332.createElement(ItemIndicator2, {
    dir: "ltr"
  }, /* @__PURE__ */ React332.createElement(SmallIcon, null, /* @__PURE__ */ React332.createElement(CheckIcon, null))), hasArrow && /* @__PURE__ */ React332.createElement(SmallIcon, null, /* @__PURE__ */ React332.createElement(ChevronRightIcon, null))));
});
var StyledRowButtonInner = styled("div", {
  height: "100%",
  width: "100%",
  backgroundColor: "$panel",
  borderRadius: "$2",
  display: "flex",
  gap: "$1",
  flexDirection: "row",
  alignItems: "center",
  padding: "0 $3",
  justifyContent: "space-between",
  border: "1px solid transparent",
  "& svg": {
    position: "relative",
    stroke: "$overlay",
    strokeWidth: 1,
    zIndex: 1
  },
  [`& > ${SmallIcon}`]: {
    paddingLeft: "$3"
  }
});
var StyledRowButton = styled("button", {
  position: "relative",
  width: "100%",
  background: "none",
  border: "none",
  cursor: "pointer",
  height: 32,
  minHeight: 32,
  outline: "none",
  color: "$text",
  fontFamily: "$ui",
  fontWeight: 400,
  fontSize: "$1",
  borderRadius: 4,
  userSelect: "none",
  margin: 0,
  padding: "0 0",
  "&[data-disabled]": {
    opacity: 0.3
  },
  "&:disabled": {
    opacity: 0.3
  },
  [`&:focus:not(:disabled) ${StyledRowButtonInner}`]: {
    backgroundColor: "$hover"
  },
  "& a": {
    textDecoration: "none",
    color: "$text"
  },
  variants: {
    bp: {
      mobile: {},
      small: {}
    },
    variant: {
      styleMenu: {
        margin: "$1 0 $1 0"
      },
      wide: {
        gridColumn: "1 / span 4"
      }
    },
    size: {
      icon: {
        padding: "4px ",
        width: "auto"
      }
    },
    isSponsor: {
      true: {
        color: "#eb30a2"
      },
      false: {}
    },
    isWarning: {
      true: {
        color: "$warn"
      }
    },
    isActive: {
      true: {
        backgroundColor: "$hover"
      },
      false: {}
    }
  },
  compoundVariants: [
    {
      isActive: false,
      isSponsor: true,
      bp: "small",
      css: {
        [`&:hover:not(:disabled) ${StyledRowButtonInner}`]: {
          backgroundColor: "$sponsorContrast",
          border: "1px solid $panel",
          '& *[data-shy="true"]': {
            opacity: 1
          }
        }
      }
    },
    {
      isActive: false,
      isSponsor: false,
      bp: "small",
      css: {
        [`&:hover:not(:disabled) ${StyledRowButtonInner}`]: {
          backgroundColor: "$hover",
          border: "1px solid $panel",
          '& *[data-shy="true"]': {
            opacity: 1
          }
        }
      }
    }
  ]
});
var MenuContent2 = styled("div", {
  position: "relative",
  overflow: "hidden",
  userSelect: "none",
  display: "flex",
  flexDirection: "column",
  zIndex: 180,
  minWidth: 180,
  pointerEvents: "all",
  backgroundColor: "$panel",
  boxShadow: "$panel",
  padding: "$2 $2",
  borderRadius: "$3",
  font: "$ui",
  maxHeight: "100vh",
  overflowY: "auto",
  overflowX: "hidden",
  "&::webkit-scrollbar": {
    display: "none"
  },
  "-ms-overflow-style": "none",
  scrollbarWidth: "none",
  variants: {
    size: {
      small: {
        minWidth: 72
      }
    },
    overflow: {
      true: {
        maxHeight: "60vh"
      }
    }
  }
});
var isEmptyCanvasSelector = (s9) => {
  return s9.appState.isEmptyCanvas && Object.keys(s9.document.pages[s9.appState.currentPageId].shapes).length > 0;
};
var isDebugModeSelector = (s9) => s9.settings.isDebugMode;
var dockPositionState = (s9) => s9.settings.dockPosition;
var BackToContent = React342.memo(function BackToContent2() {
  const app = useTldrawApp();
  const isEmptyCanvas = app.useStore(isEmptyCanvasSelector);
  const dockPosition = app.useStore(dockPositionState);
  const isDebugMode = app.useStore(isDebugModeSelector);
  const style = {
    bottom: dockPosition === "bottom" && isDebugMode ? 120 : dockPosition === "bottom" ? 80 : isDebugMode ? 60 : 20,
    left: "50%",
    transform: "translate(-50%,0)"
  };
  if (!isEmptyCanvas)
    return null;
  return /* @__PURE__ */ React342.createElement(BackToContentContainer, {
    id: "TD-Tools-Back_to_content",
    style: __spreadValues4({}, style)
  }, /* @__PURE__ */ React342.createElement(RowButton, {
    onClick: app.zoomToContent
  }, /* @__PURE__ */ React342.createElement(message_default, {
    id: "zoom.to.content"
  })));
});
var BackToContentContainer = styled(MenuContent2, {
  pointerEvents: "all",
  width: "fit-content",
  minWidth: 0,
  position: "fixed",
  bottom: 0
});
function Tooltip2({ children, label, kbd: kbdProp, id, side = "top" }) {
  return /* @__PURE__ */ React352.createElement("span", {
    id
  }, /* @__PURE__ */ React352.createElement(Root7, null, /* @__PURE__ */ React352.createElement(Trigger2, {
    dir: "ltr",
    asChild: true
  }, /* @__PURE__ */ React352.createElement("span", null, children)), /* @__PURE__ */ React352.createElement(StyledContent, {
    dir: "ltr",
    side,
    sideOffset: 8
  }, label, kbdProp ? /* @__PURE__ */ React352.createElement(Kbd, {
    variant: "tooltip"
  }, kbdProp) : null, /* @__PURE__ */ React352.createElement(StyledArrow, null))));
}
var StyledContent = styled(Content4, {
  borderRadius: 3,
  padding: "$3 $3 $3 $3",
  fontSize: "$1",
  backgroundColor: "$tooltip",
  color: "$tooltipContrast",
  boxShadow: "$3",
  display: "flex",
  alignItems: "center",
  fontFamily: "$ui",
  userSelect: "none"
});
var StyledArrow = styled(Arrow5, {
  fill: "$tooltip",
  margin: "0 8px"
});
var ToolButton = React362.forwardRef((_a3, ref) => {
  var _b = _a3, {
    onSelect,
    onClick,
    onDoubleClick,
    variant,
    children,
    isToolLocked = false,
    disabled = false,
    isActive = false,
    isSponsor = false,
    onKeyDown,
    id
  } = _b, rest = __objRest3(_b, [
    "onSelect",
    "onClick",
    "onDoubleClick",
    "variant",
    "children",
    "isToolLocked",
    "disabled",
    "isActive",
    "isSponsor",
    "onKeyDown",
    "id"
  ]);
  return /* @__PURE__ */ React362.createElement(StyledToolButton, __spreadValues4({
    ref,
    isActive,
    isSponsor,
    variant,
    onClick,
    disabled,
    onPointerDown: onSelect,
    onDoubleClick,
    onKeyDown,
    bp: breakpoints,
    id
  }, rest), /* @__PURE__ */ React362.createElement(StyledToolButtonInner, null, children), isToolLocked && /* @__PURE__ */ React362.createElement(ToolLockIndicator, null));
});
function ToolButtonWithTooltip(_a3) {
  var _b = _a3, {
    label,
    kbd,
    isLocked
  } = _b, rest = __objRest3(_b, [
    "label",
    "kbd",
    "isLocked"
  ]);
  const app = useTldrawApp();
  const handleDoubleClick = React362.useCallback(() => {
    app.toggleToolLock();
  }, []);
  const handleKeyDown = React362.useCallback((e13) => {
    if (e13.key === " " && app.isForcePanning) {
      e13.preventDefault();
    }
  }, []);
  return /* @__PURE__ */ React362.createElement(Tooltip2, {
    label: label[0].toUpperCase() + label.slice(1),
    kbd
  }, /* @__PURE__ */ React362.createElement(ToolButton, __spreadProps4(__spreadValues4({}, rest), {
    variant: "primary",
    isToolLocked: isLocked && rest.isActive,
    onDoubleClick: handleDoubleClick,
    onKeyDown: handleKeyDown
  })));
}
var StyledToolButtonInner = styled("div", {
  position: "relative",
  height: "100%",
  width: "100%",
  backgroundColor: "$panel",
  borderRadius: "$2",
  margin: "0",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  fontFamily: "$ui",
  color: "inherit",
  userSelect: "none",
  boxSizing: "border-box",
  border: "1px solid transparent"
});
var StyledToolButton = styled("button", {
  position: "relative",
  color: "$text",
  fontSize: "$0",
  background: "none",
  margin: "0",
  padding: "$2",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  outline: "none",
  cursor: "pointer",
  pointerEvents: "all",
  border: "none",
  height: "40px",
  width: "40px",
  [`&:disabled ${StyledToolButtonInner}`]: {
    opacity: 0.618
  },
  variants: {
    variant: {
      primary: {
        marginTop: "0"
      },
      icon: {
        [`& ${StyledToolButtonInner}`]: {
          display: "grid",
          "& > *": {
            gridRow: 1,
            gridColumn: 1
          }
        }
      },
      text: {
        width: "auto",
        [`& ${StyledToolButtonInner}`]: {
          fontSize: "$1",
          padding: "0 $3",
          gap: "$3"
        }
      },
      circle: {
        padding: 0,
        height: 32,
        width: 32,
        [`& ${StyledToolButtonInner}`]: {
          border: "1px solid $panelContrast",
          borderRadius: "100%",
          boxShadow: "$panel"
        },
        [`& ${StyledToolButtonInner} > svg`]: {
          width: 14,
          height: 14
        }
      }
    },
    isSponsor: {
      true: {
        [`${StyledToolButtonInner}`]: {
          backgroundColor: "$sponsorContrast"
        }
      }
    },
    isActive: {
      true: {},
      false: {}
    },
    bp: {
      mobile: {},
      small: {}
    }
  },
  compoundVariants: [
    {
      variant: "primary",
      bp: "mobile",
      css: {
        height: "40px",
        width: "40px",
        [`& ${StyledToolButtonInner} > svg`]: {
          width: 16,
          height: 16
        }
      }
    },
    {
      variant: "primary",
      bp: "small",
      css: {
        height: "44px",
        width: "44px",
        [`& ${StyledToolButtonInner} > svg`]: {
          width: 20,
          height: 20
        }
      }
    },
    {
      isActive: true,
      css: {
        [`${StyledToolButtonInner}`]: {
          backgroundColor: "$selected",
          color: "$selectedContrast"
        }
      }
    },
    {
      isActive: false,
      bp: "small",
      css: {
        [`&:hover:not(:disabled) ${StyledToolButtonInner}`]: {
          backgroundColor: "$hover",
          border: "1px solid $panel"
        },
        [`&:focus:not(:disabled) ${StyledToolButtonInner}`]: {
          backgroundColor: "$hover"
        }
      }
    }
  ]
});
var ToolLockIndicator = styled("div", {
  position: "absolute",
  width: 10,
  height: 10,
  backgroundColor: "$selected",
  borderRadius: "100%",
  bottom: -2,
  border: "2px solid $panel",
  zIndex: 100
});
var Panel = styled("div", {
  backgroundColor: "$panel",
  display: "flex",
  flexDirection: "row",
  boxShadow: "$panel",
  padding: "$2",
  border: "1px solid $panelContrast",
  gap: 0,
  variants: {
    side: {
      center: {
        borderRadius: "$4"
      },
      left: {
        padding: 0,
        borderTop: 0,
        borderLeft: 0,
        borderTopRightRadius: "$1",
        borderBottomRightRadius: "$3",
        borderBottomLeftRadius: "$1"
      },
      right: {
        padding: 0,
        borderTop: 0,
        borderRight: 0,
        borderTopLeftRadius: "$1",
        borderBottomLeftRadius: "$3",
        borderBottomRightRadius: "$1"
      }
    }
  }
});
function CircleIcon2(props) {
  const _a3 = props, { size = 16 } = _a3, rest = __objRest3(_a3, ["size"]);
  return /* @__PURE__ */ React382.createElement("svg", __spreadValues4({
    width: 24,
    height: 24
  }, rest), /* @__PURE__ */ React382.createElement("circle", {
    cx: 12,
    cy: 12,
    r: size / 2
  }));
}
function DashDashedIcon() {
  return /* @__PURE__ */ React392.createElement("svg", {
    width: "24",
    height: "24",
    stroke: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React392.createElement("circle", {
    cx: 12,
    cy: 12,
    r: 8,
    fill: "none",
    strokeWidth: 2.5,
    strokeLinecap: "round",
    strokeDasharray: 50.26548 * 0.1
  }));
}
var dottedDasharray = `${50.26548 * 0.025} ${50.26548 * 0.1}`;
function DashDottedIcon() {
  return /* @__PURE__ */ React402.createElement("svg", {
    width: "24",
    height: "24",
    stroke: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React402.createElement("circle", {
    cx: 12,
    cy: 12,
    r: 8,
    fill: "none",
    strokeWidth: 2.5,
    strokeLinecap: "round",
    strokeDasharray: dottedDasharray
  }));
}
function DashDrawIcon() {
  return /* @__PURE__ */ React412.createElement("svg", {
    width: "24",
    height: "24",
    viewBox: "1 1.5 21 22",
    fill: "currentColor",
    stroke: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React412.createElement("path", {
    d: "M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z",
    strokeWidth: "2"
  }));
}
function DashSolidIcon() {
  return /* @__PURE__ */ React422.createElement("svg", {
    width: "24",
    height: "24",
    stroke: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React422.createElement("circle", {
    cx: 12,
    cy: 12,
    r: 8,
    fill: "none",
    strokeWidth: 2,
    strokeLinecap: "round"
  }));
}
function RedoIcon(props) {
  return /* @__PURE__ */ React442.createElement("svg", __spreadValues4({
    width: 32,
    height: 32,
    viewBox: "0 0 15 15",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React442.createElement("path", {
    d: "M4.32978 8.5081C4.32978 10.1923 5.70009 11.5625 7.38418 11.5625H8.46539C8.64456 11.5625 8.78975 11.4173 8.78975 11.2382V11.13C8.78975 10.9508 8.64457 10.8057 8.46539 10.8057H7.38418C6.11736 10.8057 5.08662 9.77492 5.08662 8.5081C5.08662 7.24128 6.11736 6.21054 7.38418 6.21054H9.37894L8.00515 7.58433C7.8576 7.73183 7.8576 7.97195 8.00515 8.11944C8.14833 8.26251 8.39751 8.2623 8.54036 8.11944L10.56 6.09971C10.6315 6.02824 10.6709 5.93321 10.6709 5.8321C10.6709 5.73106 10.6315 5.63598 10.56 5.56454L8.54025 3.54472C8.3974 3.40176 8.14801 3.40176 8.00513 3.54472C7.85758 3.69218 7.85758 3.93234 8.00513 4.07979L9.37892 5.45368H7.38418C5.70009 5.45368 4.32978 6.82393 4.32978 8.5081Z"
  }));
}
function TrashIcon(props) {
  return /* @__PURE__ */ React452.createElement("svg", __spreadValues4({
    width: 18,
    height: 18,
    viewBox: "0 0 15 15",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React452.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z"
  }), /* @__PURE__ */ React452.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z"
  }), /* @__PURE__ */ React452.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z"
  }));
}
function UndoIcon(props) {
  return /* @__PURE__ */ React462.createElement("svg", __spreadValues4({
    width: 32,
    height: 32,
    viewBox: "0 0 15 15",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React462.createElement("path", {
    d: "M10.6707 8.5081C10.6707 10.1923 9.3004 11.5625 7.61631 11.5625H6.5351C6.35593 11.5625 6.21074 11.4173 6.21074 11.2382V11.13C6.21074 10.9508 6.35591 10.8057 6.5351 10.8057H7.61631C8.88313 10.8057 9.91387 9.77492 9.91387 8.5081C9.91387 7.24128 8.88313 6.21054 7.61631 6.21054H5.62155L6.99534 7.58433C7.14289 7.73183 7.14289 7.97195 6.99534 8.11944C6.85216 8.26251 6.60298 8.2623 6.46013 8.11944L4.44045 6.09971C4.36898 6.02824 4.32959 5.93321 4.32959 5.8321C4.32959 5.73106 4.36898 5.63598 4.44045 5.56454L6.46024 3.54472C6.60309 3.40176 6.85248 3.40176 6.99535 3.54472C7.14291 3.69218 7.14291 3.93234 6.99535 4.07979L5.62156 5.45368H7.61631C9.3004 5.45368 10.6707 6.82393 10.6707 8.5081Z"
  }));
}
function SizeSmallIcon(props) {
  return /* @__PURE__ */ React472.createElement("svg", __spreadValues4({
    width: 24,
    height: 24,
    viewBox: "-2 -2 28 28",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React472.createElement("path", {
    d: "M12.4239 4.62C13.3572 4.62 14.1572 4.73333 14.8239 4.96C15.4906 5.17333 15.9772 5.43333 16.2839 5.74C16.3639 5.82 16.4039 5.94 16.4039 6.1V8.86H14.0639C13.9172 8.86 13.8439 8.78666 13.8439 8.64V7.26C13.4306 7.12666 12.9572 7.06 12.4239 7.06C11.6506 7.06 11.0639 7.18 10.6639 7.42C10.2639 7.66 10.0639 8.04666 10.0639 8.58V9C10.0639 9.38666 10.1639 9.69333 10.3639 9.92C10.5772 10.1333 11.0306 10.3467 11.7239 10.56L13.6439 11.14C14.4706 11.38 15.1172 11.66 15.5839 11.98C16.0506 12.3 16.3772 12.68 16.5639 13.12C16.7639 13.5467 16.8639 14.0733 16.8639 14.7V15.62C16.8639 16.7933 16.4039 17.7133 15.4839 18.38C14.5639 19.0467 13.2839 19.38 11.6439 19.38C10.6706 19.38 9.79723 19.2867 9.0239 19.1C8.2639 18.9133 7.71056 18.6533 7.3639 18.32C7.3239 18.28 7.29056 18.24 7.2639 18.2C7.25056 18.1467 7.2439 18.06 7.2439 17.94V15.74H7.6239C8.2239 16.1533 8.85056 16.4533 9.5039 16.64C10.1572 16.8267 10.9306 16.92 11.8239 16.92C12.6506 16.92 13.2506 16.7867 13.6239 16.52C14.0106 16.2533 14.2039 15.9333 14.2039 15.56V14.88C14.2039 14.6667 14.1639 14.48 14.0839 14.32C14.0172 14.16 13.8706 14.0133 13.6439 13.88C13.4172 13.7467 13.0572 13.6067 12.5639 13.46L10.6639 12.88C9.7839 12.6133 9.11056 12.3 8.6439 11.94C8.17723 11.58 7.85056 11.18 7.6639 10.74C7.49056 10.3 7.4039 9.83333 7.4039 9.34V8.38C7.4039 7.64666 7.61056 7 8.0239 6.44C8.43723 5.88 9.01723 5.44 9.7639 5.12C10.5239 4.78666 11.4106 4.62 12.4239 4.62Z"
  }));
}
function SizeMediumIcon(props) {
  return /* @__PURE__ */ React482.createElement("svg", __spreadValues4({
    width: 24,
    height: 24,
    viewBox: "-2 -2 28 28",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React482.createElement("path", {
    d: "M8.16191 19H5.68191C5.53525 19 5.46191 18.9267 5.46191 18.78V5H8.76191C8.88191 5 8.97525 5.03333 9.04191 5.1C9.10858 5.15333 9.17525 5.27333 9.24191 5.46C9.72191 6.59333 10.1686 7.7 10.5819 8.78C11.0086 9.84667 11.4352 10.98 11.8619 12.18H12.1619C12.6019 10.9667 13.0352 9.79333 13.4619 8.66C13.8886 7.52667 14.3552 6.30667 14.8619 5H18.3219C18.4686 5 18.5419 5.07333 18.5419 5.22V19H16.0619C15.9152 19 15.8419 18.9267 15.8419 18.78V16.26C15.8419 15.5267 15.8486 14.8133 15.8619 14.12C15.8886 13.4267 15.9286 12.6867 15.9819 11.9C16.0486 11.1 16.1419 10.1933 16.2619 9.18H15.9019C15.4352 10.3533 14.9486 11.5667 14.4419 12.82C13.9486 14.06 13.4819 15.2333 13.0419 16.34H11.1019C11.0619 16.34 11.0152 16.3333 10.9619 16.32C10.9219 16.2933 10.8886 16.2467 10.8619 16.18C10.4619 15.18 10.0086 14.06 9.50191 12.82C9.00858 11.58 8.53525 10.3667 8.08191 9.18H7.70191C7.83525 10.18 7.93525 11.0733 8.00191 11.86C8.06858 12.6467 8.10858 13.3933 8.12191 14.1C8.14858 14.8067 8.16191 15.5267 8.16191 16.26V19Z"
  }));
}
function SizeLargeIcon(props) {
  return /* @__PURE__ */ React492.createElement("svg", __spreadValues4({
    width: 24,
    height: 24,
    viewBox: "-2 -2 28 28",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /* @__PURE__ */ React492.createElement("path", {
    d: "M7.68191 19C7.53525 19 7.46191 18.9267 7.46191 18.78V5H10.1219C10.2686 5 10.3419 5.07333 10.3419 5.22V16.56H13.4419V15.02H15.7619C15.9086 15.02 15.9819 15.0933 15.9819 15.24V19H7.68191Z"
  }));
}
function EraserIcon() {
  return /* @__PURE__ */ React502.createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React502.createElement("path", {
    d: "M1.72838 9.33987L8.84935 2.34732C9.23874 1.96494 9.86279 1.96539 10.2516 2.34831L13.5636 5.60975C13.9655 6.00555 13.9607 6.65526 13.553 7.04507L8.13212 12.2278C7.94604 12.4057 7.69851 12.505 7.44107 12.505L6.06722 12.505L3.83772 12.505C3.5673 12.505 3.30842 12.3954 3.12009 12.2014L1.7114 10.7498C1.32837 10.3551 1.33596 9.72521 1.72838 9.33987Z",
    stroke: "currentColor"
  }), /* @__PURE__ */ React502.createElement("line", {
    x1: "6.01807",
    y1: "12.5",
    x2: "10.7959",
    y2: "12.5",
    stroke: "currentColor",
    strokeLinecap: "round"
  }), /* @__PURE__ */ React502.createElement("line", {
    x1: "5.50834",
    y1: "5.74606",
    x2: "10.1984",
    y2: "10.4361",
    stroke: "currentColor"
  }));
}
function LineIcon() {
  return /* @__PURE__ */ React532.createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React532.createElement("path", {
    d: "M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L11.1464 3.14645C11.3417 2.95118 11.6583 2.95118 11.8536 3.14645C12.0488 3.34171 12.0488 3.65829 11.8536 3.85355L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z"
  }));
}
function ImageIcon() {
  return /* @__PURE__ */ React552.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    strokeWidth: "2"
  }, /* @__PURE__ */ React552.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var shapeShapes = [
  "rectangle",
  "ellipse",
  "triangle",
  "line"
];
var shapeShapeIcons = {
  ["rectangle"]: /* @__PURE__ */ React562.createElement(SquareIcon, null),
  ["ellipse"]: /* @__PURE__ */ React562.createElement(CircleIcon, null),
  ["triangle"]: /* @__PURE__ */ React562.createElement(VercelLogoIcon, null),
  ["line"]: /* @__PURE__ */ React562.createElement(LineIcon, null)
};
var dockPositionState2 = (s9) => s9.settings.dockPosition;
var ShapesMenu = React562.memo(function ShapesMenu2({
  activeTool,
  isToolLocked
}) {
  const app = useTldrawApp();
  const intl = useIntl();
  const dockPosition = app.useStore(dockPositionState2);
  const [lastActiveTool, setLastActiveTool] = React562.useState("rectangle");
  React562.useEffect(() => {
    if (shapeShapes.includes(activeTool) && lastActiveTool !== activeTool) {
      setLastActiveTool(activeTool);
    }
  }, [activeTool]);
  const selectShapeTool = React562.useCallback(() => {
    app.selectTool(lastActiveTool);
  }, [activeTool, app]);
  const handleDoubleClick = React562.useCallback(() => {
    app.toggleToolLock();
  }, [app]);
  const handleKeyDown = React562.useCallback((e13) => {
    if (e13.key === " ") {
      if (app.shiftKey) {
        e13.preventDefault();
      }
    }
  }, []);
  const isActive = shapeShapes.includes(activeTool);
  const contentSide = dockPosition === "bottom" || dockPosition === "top" ? "top" : dockPosition;
  const panelStyle = dockPosition === "bottom" || dockPosition === "top" ? "row" : "column";
  return /* @__PURE__ */ React562.createElement(Root5, {
    dir: "ltr",
    onOpenChange: selectShapeTool
  }, /* @__PURE__ */ React562.createElement(Trigger, {
    dir: "ltr",
    asChild: true,
    id: "TD-PrimaryTools-Shapes"
  }, /* @__PURE__ */ React562.createElement(ToolButton, {
    disabled: isActive && app.shiftKey,
    variant: "primary",
    onDoubleClick: handleDoubleClick,
    isToolLocked: isActive && isToolLocked,
    isActive,
    onKeyDown: handleKeyDown
  }, shapeShapeIcons[lastActiveTool])), /* @__PURE__ */ React562.createElement(Content3, {
    asChild: true,
    dir: "ltr",
    side: contentSide,
    sideOffset: 12
  }, /* @__PURE__ */ React562.createElement(Panel, {
    side: "center",
    style: { flexDirection: panelStyle }
  }, shapeShapes.map((shape, i7) => /* @__PURE__ */ React562.createElement(Tooltip2, {
    key: shape,
    label: intl.formatMessage({ id: shape }),
    kbd: (4 + i7).toString(),
    id: `TD-PrimaryTools-Shapes-${shape}`
  }, /* @__PURE__ */ React562.createElement(Item3, {
    asChild: true
  }, /* @__PURE__ */ React562.createElement(ToolButton, {
    variant: "primary",
    onClick: () => {
      app.selectTool(shape);
      setLastActiveTool(shape);
    }
  }, shapeShapeIcons[shape])))))));
});
var activeToolSelector2 = (s9) => s9.appState.activeTool;
var toolLockedSelector = (s9) => s9.appState.isToolLocked;
var dockPositionState3 = (s9) => s9.settings.dockPosition;
var PrimaryTools = React572.memo(function PrimaryTools2() {
  const app = useTldrawApp();
  const intl = useIntl();
  const activeTool = app.useStore(activeToolSelector2);
  const isToolLocked = app.useStore(toolLockedSelector);
  const dockPosition = app.useStore(dockPositionState3);
  const selectSelectTool = React572.useCallback(() => {
    app.selectTool("select");
  }, [app]);
  const selectEraseTool = React572.useCallback(() => {
    app.selectTool("erase");
  }, [app]);
  const selectDrawTool = React572.useCallback(() => {
    app.selectTool("draw");
  }, [app]);
  const selectArrowTool = React572.useCallback(() => {
    app.selectTool("arrow");
  }, [app]);
  const selectTextTool = React572.useCallback(() => {
    app.selectTool("text");
  }, [app]);
  const selectStickyTool = React572.useCallback(() => {
    app.selectTool("sticky");
  }, [app]);
  const uploadMedias = React572.useCallback(() => __async2(this, null, function* () {
    app.openAsset();
  }), [app]);
  const panelStyle = dockPosition === "bottom" || dockPosition === "top" ? "row" : "column";
  return /* @__PURE__ */ React572.createElement(Panel, {
    side: "center",
    id: "TD-PrimaryTools",
    style: { flexDirection: panelStyle }
  }, /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "1",
    label: intl.formatMessage({ id: "select" }),
    onClick: selectSelectTool,
    isActive: activeTool === "select",
    id: "TD-PrimaryTools-CursorArrow"
  }, /* @__PURE__ */ React572.createElement(CursorArrowIcon, null)), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "2",
    label: intl.formatMessage({ id: "draw" }),
    onClick: selectDrawTool,
    isActive: activeTool === "draw",
    id: "TD-PrimaryTools-Pencil"
  }, /* @__PURE__ */ React572.createElement(Pencil1Icon, null)), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "3",
    label: intl.formatMessage({ id: "eraser" }),
    onClick: selectEraseTool,
    isActive: activeTool === "erase",
    id: "TD-PrimaryTools-Eraser"
  }, /* @__PURE__ */ React572.createElement(EraserIcon, null)), /* @__PURE__ */ React572.createElement(ShapesMenu, {
    activeTool,
    isToolLocked
  }), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "8",
    label: intl.formatMessage({ id: "arrow" }),
    onClick: selectArrowTool,
    isLocked: isToolLocked,
    isActive: activeTool === "arrow",
    id: "TD-PrimaryTools-ArrowTopRight"
  }, /* @__PURE__ */ React572.createElement(ArrowTopRightIcon, null)), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "9",
    label: intl.formatMessage({ id: "text" }),
    onClick: selectTextTool,
    isLocked: isToolLocked,
    isActive: activeTool === "text",
    id: "TD-PrimaryTools-Text"
  }, /* @__PURE__ */ React572.createElement(TextIcon, null)), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    kbd: "0",
    label: intl.formatMessage({ id: "sticky" }),
    onClick: selectStickyTool,
    isActive: activeTool === "sticky",
    id: "TD-PrimaryTools-Pencil2"
  }, /* @__PURE__ */ React572.createElement(Pencil2Icon, null)), /* @__PURE__ */ React572.createElement(ToolButtonWithTooltip, {
    label: "Image",
    onClick: uploadMedias,
    id: "TD-PrimaryTools-Image"
  }, /* @__PURE__ */ React572.createElement(ImageIcon, null)));
});
function DMItem(_a3) {
  var _b = _a3, {
    onSelect,
    id
  } = _b, rest = __objRest3(_b, [
    "onSelect",
    "id"
  ]);
  return /* @__PURE__ */ React582.createElement(Item3, {
    dir: "ltr",
    asChild: true,
    onSelect,
    id
  }, /* @__PURE__ */ React582.createElement(RowButton, __spreadValues4({}, rest)));
}
var preventEvent = (e13) => e13.preventDefault();
function DMCheckboxItem({
  checked,
  disabled = false,
  variant,
  onCheckedChange,
  kbd,
  id,
  children
}) {
  return /* @__PURE__ */ React592.createElement(CheckboxItem2, {
    dir: "ltr",
    onSelect: preventEvent,
    onCheckedChange,
    checked,
    disabled,
    asChild: true,
    id
  }, /* @__PURE__ */ React592.createElement(RowButton, {
    kbd,
    variant,
    hasIndicator: true
  }, children));
}
function DMContent({
  sideOffset = 8,
  children,
  align,
  variant,
  id,
  overflow = false,
  side = "bottom"
}) {
  return /* @__PURE__ */ React602.createElement(Content3, {
    dir: "ltr",
    align,
    sideOffset,
    onEscapeKeyDown: stopPropagation,
    asChild: true,
    id,
    side
  }, /* @__PURE__ */ React602.createElement(StyledContent2, {
    variant,
    overflow
  }, children));
}
var StyledContent2 = styled(MenuContent2, {
  width: "fit-content",
  height: "fit-content",
  minWidth: 0,
  maxHeight: "100vh",
  overflowY: "auto",
  overflowX: "hidden",
  "&::webkit-scrollbar": {
    display: "none"
  },
  "-ms-overflow-style": "none",
  scrollbarWidth: "none",
  variants: {
    variant: {
      horizontal: {
        flexDirection: "row"
      },
      menu: {
        minWidth: 128
      }
    },
    overflow: {
      true: {
        maxHeight: "60vh"
      }
    }
  }
});
var DMDivider = styled(Separator2, {
  backgroundColor: "$hover",
  height: 1,
  marginTop: "$2",
  marginRight: "-$2",
  marginBottom: "$2",
  marginLeft: "-$2"
});
var DMRadioItem = styled(RadioItem2, {
  height: "32px",
  width: "32px",
  backgroundColor: "$panel",
  borderRadius: "4px",
  padding: "0",
  margin: "0",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  outline: "none",
  border: "none",
  pointerEvents: "all",
  cursor: "pointer",
  variants: {
    isActive: {
      true: {
        backgroundColor: "$selected",
        color: "$panel"
      },
      false: {}
    },
    bp: {
      mobile: {},
      small: {}
    }
  },
  compoundVariants: [
    {
      isActive: false,
      bp: "small",
      css: {
        "&:focus": {
          backgroundColor: "$hover"
        },
        "&:hover:not(:disabled)": {
          backgroundColor: "$hover"
        }
      }
    }
  ]
});
function DMSubMenu({
  children,
  size,
  overflow = false,
  disabled = false,
  label,
  id
}) {
  return /* @__PURE__ */ React61.createElement("span", {
    id
  }, /* @__PURE__ */ React61.createElement(Root5, {
    dir: "ltr"
  }, /* @__PURE__ */ React61.createElement(TriggerItem, {
    dir: "ltr",
    asChild: true
  }, /* @__PURE__ */ React61.createElement(RowButton, {
    disabled,
    hasArrow: true
  }, label)), /* @__PURE__ */ React61.createElement(Content3, {
    dir: "ltr",
    asChild: true,
    sideOffset: 2,
    alignOffset: -2,
    align: "start"
  }, /* @__PURE__ */ React61.createElement(MenuContent2, {
    size,
    overflow
  }, children, /* @__PURE__ */ React61.createElement(Arrow4, {
    offset: 13
  })))));
}
function DMTriggerIcon(_a3) {
  var _b = _a3, { id, children } = _b, rest = __objRest3(_b, ["id", "children"]);
  return /* @__PURE__ */ React622.createElement(Trigger, {
    asChild: true,
    id
  }, /* @__PURE__ */ React622.createElement(ToolButton, __spreadValues4({}, rest), children));
}
var Divider = styled("hr", {
  height: 1,
  marginTop: "$1",
  marginRight: "-$0",
  marginBottom: "$1",
  marginLeft: "-$0",
  border: "none",
  borderBottom: "1px solid $hover"
});
var dockPositionState4 = (s9) => s9.settings.dockPosition;
var selectedShapesCountSelector = (s9) => s9.document.pageStates[s9.appState.currentPageId].selectedIds.length;
var isAllLockedSelector = (s9) => {
  const page7 = s9.document.pages[s9.appState.currentPageId];
  const { selectedIds } = s9.document.pageStates[s9.appState.currentPageId];
  return selectedIds.every((id) => page7.shapes[id].isLocked);
};
var isAllAspectLockedSelector = (s9) => {
  const page7 = s9.document.pages[s9.appState.currentPageId];
  const { selectedIds } = s9.document.pageStates[s9.appState.currentPageId];
  return selectedIds.every((id) => page7.shapes[id].isAspectRatioLocked);
};
var isAllGroupedSelector = (s9) => {
  const page7 = s9.document.pages[s9.appState.currentPageId];
  const selectedShapes = s9.document.pageStates[s9.appState.currentPageId].selectedIds.map((id) => page7.shapes[id]);
  return selectedShapes.every((shape) => shape.children !== void 0 || shape.parentId === selectedShapes[0].parentId && selectedShapes[0].parentId !== s9.appState.currentPageId);
};
var hasSelectionSelector = (s9) => {
  const { selectedIds } = s9.document.pageStates[s9.appState.currentPageId];
  return selectedIds.length > 0;
};
var hasMultipleSelectionSelector = (s9) => {
  const { selectedIds } = s9.document.pageStates[s9.appState.currentPageId];
  return selectedIds.length > 1;
};
function ActionButton() {
  const app = useTldrawApp();
  const intl = useIntl();
  const isAllLocked = app.useStore(isAllLockedSelector);
  const isAllAspectLocked = app.useStore(isAllAspectLockedSelector);
  const isAllGrouped = app.useStore(isAllGroupedSelector);
  const hasSelection = app.useStore(hasSelectionSelector);
  const hasMultipleSelection = app.useStore(hasMultipleSelectionSelector);
  const selectedShapesCount = app.useStore(selectedShapesCountSelector);
  const dockPosition = app.useStore(dockPositionState4);
  const hasTwoOrMore = selectedShapesCount > 1;
  const hasThreeOrMore = selectedShapesCount > 2;
  const handleRotate = React63.useCallback(() => {
    app.rotate();
  }, [app]);
  const handleDuplicate = React63.useCallback(() => {
    app.duplicate();
  }, [app]);
  const handleToggleLocked = React63.useCallback(() => {
    app.toggleLocked();
  }, [app]);
  const handleToggleAspectRatio = React63.useCallback(() => {
    app.toggleAspectRatioLocked();
  }, [app]);
  const handleGroup = React63.useCallback(() => {
    app.group();
  }, [app]);
  const handleMoveToBack = React63.useCallback(() => {
    app.moveToBack();
  }, [app]);
  const handleMoveBackward = React63.useCallback(() => {
    app.moveBackward();
  }, [app]);
  const handleMoveForward = React63.useCallback(() => {
    app.moveForward();
  }, [app]);
  const handleMoveToFront = React63.useCallback(() => {
    app.moveToFront();
  }, [app]);
  const handleResetAngle = React63.useCallback(() => {
    app.setShapeProps({ rotation: 0 });
  }, [app]);
  const alignTop = React63.useCallback(() => {
    app.align("top");
  }, [app]);
  const alignCenterVertical = React63.useCallback(() => {
    app.align("centerVertical");
  }, [app]);
  const alignBottom = React63.useCallback(() => {
    app.align("bottom");
  }, [app]);
  const stretchVertically = React63.useCallback(() => {
    app.stretch("vertical");
  }, [app]);
  const distributeVertically = React63.useCallback(() => {
    app.distribute("vertical");
  }, [app]);
  const alignLeft = React63.useCallback(() => {
    app.align("left");
  }, [app]);
  const alignCenterHorizontal = React63.useCallback(() => {
    app.align("centerHorizontal");
  }, [app]);
  const alignRight = React63.useCallback(() => {
    app.align("right");
  }, [app]);
  const stretchHorizontally = React63.useCallback(() => {
    app.stretch("horizontal");
  }, [app]);
  const distributeHorizontally = React63.useCallback(() => {
    app.distribute("horizontal");
  }, [app]);
  const handleMenuOpenChange = React63.useCallback((open21) => {
    app.setMenuOpen(open21);
  }, [app]);
  const contentSide = dockPosition === "bottom" || dockPosition === "top" ? "top" : dockPosition;
  return /* @__PURE__ */ React63.createElement(Root5, {
    dir: "ltr",
    onOpenChange: handleMenuOpenChange
  }, /* @__PURE__ */ React63.createElement(Trigger, {
    dir: "ltr",
    asChild: true,
    id: "TD-Tools-Dots"
  }, /* @__PURE__ */ React63.createElement(ToolButton, {
    variant: "circle"
  }, /* @__PURE__ */ React63.createElement(DotsHorizontalIcon, null))), /* @__PURE__ */ React63.createElement(DMContent, {
    sideOffset: 16,
    side: contentSide
  }, /* @__PURE__ */ React63.createElement(React63.Fragment, null, /* @__PURE__ */ React63.createElement(ButtonsRow, null, /* @__PURE__ */ React63.createElement(ToolButton, {
    variant: "icon",
    disabled: !hasSelection,
    onClick: handleDuplicate
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "duplicate" }),
    kbd: `#D`,
    id: "TD-Tools-Copy"
  }, /* @__PURE__ */ React63.createElement(CopyIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleRotate
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "rotate" }),
    id: "TD-Tools-Rotate"
  }, /* @__PURE__ */ React63.createElement(RotateCounterClockwiseIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleToggleLocked
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: isAllLocked ? "unlock" : "lock" }),
    kbd: `#L`,
    id: "TD-Tools-Lock"
  }, isAllLocked ? /* @__PURE__ */ React63.createElement(LockClosedIcon, null) : /* @__PURE__ */ React63.createElement(LockOpen1Icon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleToggleAspectRatio
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({
      id: isAllAspectLocked ? "unlock.aspect.ratio" : "lock.aspect.ratio"
    }),
    id: "TD-Tools-AspectRatio"
  }, isAllAspectLocked ? /* @__PURE__ */ React63.createElement(AspectRatioIcon, null) : /* @__PURE__ */ React63.createElement(BoxIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection || !isAllGrouped && !hasMultipleSelection,
    onClick: handleGroup
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "group" }),
    kbd: `#G`,
    id: "TD-Tools-Group"
  }, /* @__PURE__ */ React63.createElement(GroupIcon, null)))), /* @__PURE__ */ React63.createElement(ButtonsRow, null, /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleMoveToBack
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "move.to.back" }),
    kbd: `#\u21E7[`,
    id: "TD-Tools-PinBottom"
  }, /* @__PURE__ */ React63.createElement(PinBottomIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleMoveBackward
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "move.backward" }),
    kbd: `#[`,
    id: "TD-Tools-ArrowDown"
  }, /* @__PURE__ */ React63.createElement(ArrowDownIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleMoveForward
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "move.forward" }),
    kbd: `#]`,
    id: "TD-Tools-ArrowUp"
  }, /* @__PURE__ */ React63.createElement(ArrowUpIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleMoveToFront
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "move.to.front" }),
    kbd: `#\u21E7]`,
    id: "TD-Tools-PinTop"
  }, /* @__PURE__ */ React63.createElement(PinTopIcon, null))), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasSelection,
    onClick: handleResetAngle
  }, /* @__PURE__ */ React63.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "reset.angle" }),
    id: "TD-Tools-ResetAngle"
  }, /* @__PURE__ */ React63.createElement(AngleIcon, null)))), /* @__PURE__ */ React63.createElement(Divider, null), /* @__PURE__ */ React63.createElement(ButtonsRow, null, /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignLeft,
    id: "TD-Tools-AlignLeft"
  }, /* @__PURE__ */ React63.createElement(AlignLeftIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignCenterHorizontal,
    id: "TD-Tools-AlignCenterHorizontal"
  }, /* @__PURE__ */ React63.createElement(AlignCenterHorizontallyIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignRight,
    id: "TD-Tools-AlignRight"
  }, /* @__PURE__ */ React63.createElement(AlignRightIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: stretchHorizontally,
    id: "TD-Tools-StretchHorizontal"
  }, /* @__PURE__ */ React63.createElement(StretchHorizontallyIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasThreeOrMore,
    onClick: distributeHorizontally,
    id: "TD-Tools-SpaceEvenlyHorizontal"
  }, /* @__PURE__ */ React63.createElement(SpaceEvenlyHorizontallyIcon, null))), /* @__PURE__ */ React63.createElement(ButtonsRow, null, /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignTop,
    id: "TD-Tools-AlignTop"
  }, /* @__PURE__ */ React63.createElement(AlignTopIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignCenterVertical,
    id: "TD-Tools-AlignCenterVertical"
  }, /* @__PURE__ */ React63.createElement(AlignCenterVerticallyIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: alignBottom,
    id: "TD-Tools-AlignBottom"
  }, /* @__PURE__ */ React63.createElement(AlignBottomIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasTwoOrMore,
    onClick: stretchVertically,
    id: "TD-Tools-tretchVertical"
  }, /* @__PURE__ */ React63.createElement(StretchVerticallyIcon, null)), /* @__PURE__ */ React63.createElement(ToolButton, {
    disabled: !hasThreeOrMore,
    onClick: distributeVertically,
    id: "TD-Tools-SpaceEvenlyVertical"
  }, /* @__PURE__ */ React63.createElement(SpaceEvenlyVerticallyIcon, null))))));
}
var ButtonsRow = styled("div", {
  position: "relative",
  display: "flex",
  width: "100%",
  background: "none",
  border: "none",
  cursor: "pointer",
  outline: "none",
  alignItems: "center",
  justifyContent: "flex-start",
  padding: 0
});
function DeleteButton() {
  const app = useTldrawApp();
  const intl = useIntl();
  const handleDelete = React64.useCallback(() => {
    app.delete();
  }, [app]);
  const hasSelection = app.useStore((s9) => s9.appState.status === "idle" && s9.document.pageStates[s9.appState.currentPageId].selectedIds.length > 0);
  return /* @__PURE__ */ React64.createElement(Tooltip2, {
    label: intl.formatMessage({ id: "delete" }),
    kbd: "\u232B",
    id: "TD-Delete"
  }, /* @__PURE__ */ React64.createElement(ToolButton, {
    variant: "circle",
    disabled: !hasSelection,
    onSelect: handleDelete
  }, /* @__PURE__ */ React64.createElement(TrashIcon, null)));
}
var languageSelector = (s9) => s9.settings.language;
function LanguageMenu() {
  const app = useTldrawApp();
  const language21 = app.useStore(languageSelector);
  const handleChangeLanguage = React65.useCallback((locale) => {
    app.setSetting("language", locale);
  }, [app]);
  return /* @__PURE__ */ React65.createElement(DMContent, {
    variant: "menu",
    overflow: true,
    id: "language-menu",
    side: "left",
    sideOffset: 8
  }, TRANSLATIONS.map(({ locale, label }) => /* @__PURE__ */ React65.createElement(DMCheckboxItem, {
    key: locale,
    checked: language21 === locale,
    onCheckedChange: () => handleChangeLanguage(locale),
    id: `TD-MenuItem-Language-${locale}`
  }, label)), /* @__PURE__ */ React65.createElement(DMDivider, null), /* @__PURE__ */ React65.createElement("a", {
    href: "https://github.com/tldraw/tldraw/blob/main/guides/translation.md",
    target: "_blank",
    rel: "nofollow"
  }, /* @__PURE__ */ React65.createElement(DMItem, {
    id: "TD-MenuItem-Translation-Link"
  }, /* @__PURE__ */ React65.createElement(message_default, {
    id: "translation.link"
  }), /* @__PURE__ */ React65.createElement(SmallIcon, null, /* @__PURE__ */ React65.createElement(ExternalLinkIcon, null)))));
}
var IconButton = styled("button", {
  position: "relative",
  height: "32px",
  width: "32px",
  backgroundColor: "$panel",
  borderRadius: "4px",
  padding: "0",
  margin: "0",
  outline: "none",
  border: "none",
  pointerEvents: "all",
  fontSize: "$0",
  color: "$text",
  cursor: "pointer",
  display: "grid",
  alignItems: "center",
  justifyContent: "center",
  "& > *": {
    gridRow: 1,
    gridColumn: 1
  },
  "&:disabled": {
    opacity: "0.5"
  },
  "& > span": {
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center"
  },
  variants: {
    bp: {
      mobile: {
        backgroundColor: "transparent"
      },
      small: {
        "&:hover:not(:disabled)": {
          backgroundColor: "$hover"
        }
      }
    },
    size: {
      small: {
        height: 32,
        width: 32,
        "& svg:nth-of-type(1)": {
          height: "16px",
          width: "16px"
        }
      },
      medium: {
        height: 44,
        width: 44,
        "& svg:nth-of-type(1)": {
          height: "18px",
          width: "18px"
        }
      },
      large: {
        height: 44,
        width: 44,
        "& svg:nth-of-type(1)": {
          height: "20px",
          width: "20px"
        }
      }
    },
    isActive: {
      true: {
        color: "$selected"
      }
    }
  }
});
function KeyboardShortcutDialog({
  onOpenChange
}) {
  const intl = useIntl();
  const shortcuts = {
    Tools: [
      { label: intl.formatMessage({ id: "select" }), kbd: "1" },
      { label: intl.formatMessage({ id: "draw" }), kbd: "2" },
      { label: intl.formatMessage({ id: "eraser" }), kbd: "3" },
      { label: intl.formatMessage({ id: "rectangle" }), kbd: "4" },
      { label: intl.formatMessage({ id: "ellipse" }), kbd: "5" },
      { label: intl.formatMessage({ id: "triangle" }), kbd: "6" },
      { label: intl.formatMessage({ id: "line" }), kbd: "7" },
      { label: intl.formatMessage({ id: "arrow" }), kbd: "8" },
      { label: intl.formatMessage({ id: "text" }), kbd: "9" },
      { label: intl.formatMessage({ id: "sticky" }), kbd: "0" }
    ],
    View: [
      { label: intl.formatMessage({ id: "zoom.in" }), kbd: "#+" },
      { label: intl.formatMessage({ id: "zoom.out" }), kbd: "#-" },
      { label: `${intl.formatMessage({ id: "zoom.to" })} 100%`, kbd: "\u21E7+0" },
      { label: intl.formatMessage({ id: "zoom.to.fit" }), kbd: "\u21E7+1" },
      { label: intl.formatMessage({ id: "zoom.to.selection" }), kbd: "\u21E7+2" },
      { label: intl.formatMessage({ id: "preferences.dark.mode" }), kbd: "#\u21E7D" },
      { label: intl.formatMessage({ id: "preferences.focus.mode" }), kbd: "#." },
      { label: intl.formatMessage({ id: "preferences.show.grid" }), kbd: "#\u21E7G" }
    ],
    Transform: [
      { label: intl.formatMessage({ id: "flip.horizontal" }), kbd: "\u21E7H" },
      { label: intl.formatMessage({ id: "flip.vertical" }), kbd: "\u21E7V" },
      {
        label: `${intl.formatMessage({ id: "lock" })} / ${intl.formatMessage({ id: "unlock" })}`,
        kbd: "#\u21E7L"
      },
      {
        label: `${intl.formatMessage({ id: "move" })} ${intl.formatMessage({ id: "to.front" })}`,
        kbd: "\u21E7]"
      },
      {
        label: `${intl.formatMessage({ id: "move" })} ${intl.formatMessage({ id: "forward" })}`,
        kbd: "]"
      },
      {
        label: `${intl.formatMessage({ id: "move" })} ${intl.formatMessage({ id: "backward" })}`,
        kbd: "["
      },
      {
        label: `${intl.formatMessage({ id: "move" })} ${intl.formatMessage({ id: "back" })}`,
        kbd: "\u21E7["
      }
    ],
    File: [
      { label: intl.formatMessage({ id: "new.project" }), kbd: "#N" },
      { label: intl.formatMessage({ id: "open" }), kbd: "#O" },
      { label: intl.formatMessage({ id: "save" }), kbd: "#S" },
      { label: intl.formatMessage({ id: "save.as" }), kbd: "#\u21E7S" },
      { label: intl.formatMessage({ id: "upload.media" }), kbd: "#U" }
    ],
    Edit: [
      { label: intl.formatMessage({ id: "undo" }), kbd: "#Z" },
      { label: intl.formatMessage({ id: "redo" }), kbd: "#\u21E7Z" },
      { label: intl.formatMessage({ id: "cut" }), kbd: "#X" },
      { label: intl.formatMessage({ id: "copy" }), kbd: "#C" },
      { label: intl.formatMessage({ id: "paste" }), kbd: "#V" },
      { label: intl.formatMessage({ id: "select.all" }), kbd: "#A" },
      { label: intl.formatMessage({ id: "delete" }), kbd: "\u232B" },
      { label: intl.formatMessage({ id: "duplicate" }), kbd: "#D" }
    ]
  };
  return /* @__PURE__ */ React66.createElement(Root9, {
    onOpenChange
  }, /* @__PURE__ */ React66.createElement(Trigger4, {
    asChild: true
  }, /* @__PURE__ */ React66.createElement(RowButton, {
    id: "TD-HelpItem-Keyboard",
    variant: "wide"
  }, /* @__PURE__ */ React66.createElement(message_default, {
    id: "keyboard.shortcuts"
  }))), /* @__PURE__ */ React66.createElement(Portal2, null, /* @__PURE__ */ React66.createElement(DialogOverlay2, null), /* @__PURE__ */ React66.createElement(DialogContent2, null, /* @__PURE__ */ React66.createElement(DialogTitle2, null, /* @__PURE__ */ React66.createElement(message_default, {
    id: "keyboard.shortcuts"
  }), /* @__PURE__ */ React66.createElement(Close, {
    asChild: true
  }, /* @__PURE__ */ React66.createElement(DialogIconButton, null, /* @__PURE__ */ React66.createElement(Cross2Icon, null)))), /* @__PURE__ */ React66.createElement(StyledColumns, {
    bp: breakpoints
  }, Object.entries(shortcuts).map(([key, value]) => /* @__PURE__ */ React66.createElement(StyledSection2, {
    key
  }, /* @__PURE__ */ React66.createElement(Label2, null, key), /* @__PURE__ */ React66.createElement(ContentItem, null, value.map((shortcut) => /* @__PURE__ */ React66.createElement(StyledItem, {
    key: shortcut.label
  }, shortcut.label, /* @__PURE__ */ React66.createElement(Kbd, {
    variant: "menu"
  }, shortcut.kbd))))))))));
}
var Label2 = styled("h3", {
  fontSize: "$2",
  color: "$text",
  fontFamily: "$ui",
  margin: 0,
  paddingBottom: "$5"
});
var StyledSection2 = styled("div", {
  breakInside: "avoid",
  paddingBottom: 24
});
var ContentItem = styled("ul", {
  listStyleType: "none",
  width: "100%",
  padding: 0,
  margin: 0
});
var StyledItem = styled("li", {
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between",
  height: 32,
  minHeight: 32,
  width: "100%",
  outline: "none",
  color: "$text",
  fontFamily: "$ui",
  fontWeight: 400,
  fontSize: "$1",
  borderRadius: 4,
  userSelect: "none",
  margin: 0,
  padding: "0 0"
});
var DialogContent2 = styled(Content6, {
  backgroundColor: "white",
  borderRadius: 6,
  boxShadow: "hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px",
  position: "fixed",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: "fit-content",
  maxWidth: "90vw",
  maxHeight: "74vh",
  overflowY: "auto",
  padding: 25,
  "&:focus": { outline: "none" }
});
var StyledColumns = styled("div", {
  maxWidth: "100%",
  width: "fit-content",
  height: "fit-content",
  overflowY: "auto",
  columnGap: 64,
  variants: {
    bp: {
      mobile: {
        columns: 1,
        [`& ${StyledSection2}`]: {
          minWidth: "0px"
        }
      },
      small: {
        columns: 2,
        [`& ${StyledSection2}`]: {
          minWidth: "200px"
        }
      },
      medium: {
        columns: 3
      },
      large: {
        columns: 3
      }
    }
  }
});
var DialogOverlay2 = styled(Overlay3, {
  backgroundColor: "$overlay",
  position: "fixed",
  inset: 0
});
var DialogIconButton = styled(IconButton, {
  fontFamily: "inherit",
  borderRadius: "100%",
  height: 25,
  width: 25,
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  color: "$text",
  cursor: "pointer",
  "&:hover": { backgroundColor: "$hover" }
});
var DialogTitle2 = styled(Title, {
  fontFamily: "$body",
  fontSize: "$3",
  color: "$text",
  paddingBottom: 32,
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between",
  margin: 0
});
var isDebugModeSelector2 = (s9) => s9.settings.isDebugMode;
var dockPositionState5 = (s9) => s9.settings.dockPosition;
function HelpPanel() {
  const app = useTldrawApp();
  const isDebugMode = app.useStore(isDebugModeSelector2);
  const side = app.useStore(dockPositionState5);
  const [isKeyboardShortcutsOpen, setIsKeyboardShortcutsOpen] = React67.useState(false);
  return /* @__PURE__ */ React67.createElement(Root8, null, /* @__PURE__ */ React67.createElement(PopoverAnchor2, {
    dir: "ltr"
  }, /* @__PURE__ */ React67.createElement(Trigger3, {
    asChild: true,
    dir: "ltr"
  }, /* @__PURE__ */ React67.createElement(HelpButton, {
    side,
    debug: isDebugMode,
    bp: breakpoints
  }, /* @__PURE__ */ React67.createElement(QuestionMarkIcon, null)))), /* @__PURE__ */ React67.createElement(Content5, {
    dir: "ltr"
  }, /* @__PURE__ */ React67.createElement(StyledContent3, {
    style: { visibility: isKeyboardShortcutsOpen ? "hidden" : "visible" }
  }, /* @__PURE__ */ React67.createElement(LanguageMenuDropdown, null), /* @__PURE__ */ React67.createElement(KeyboardShortcutDialog, {
    onOpenChange: setIsKeyboardShortcutsOpen
  }), /* @__PURE__ */ React67.createElement(DMDivider, null))));
}
var LanguageMenuDropdown = () => {
  return /* @__PURE__ */ React67.createElement(Root5, {
    dir: "ltr"
  }, /* @__PURE__ */ React67.createElement(Trigger, {
    asChild: true
  }, /* @__PURE__ */ React67.createElement(RowButton, {
    variant: "wide",
    hasArrow: true
  }, /* @__PURE__ */ React67.createElement(message_default, {
    id: "language"
  }))), /* @__PURE__ */ React67.createElement(LanguageMenu, null));
};
var HelpButton = styled("button", {
  width: 28,
  height: 28,
  borderRadius: "100%",
  position: "fixed",
  right: 10,
  display: "grid",
  placeItems: "center",
  border: "none",
  backgroundColor: "white",
  cursor: "pointer",
  boxShadow: "$panel",
  bottom: 10,
  variants: {
    debug: {
      true: {},
      false: {}
    },
    bp: {
      mobile: {},
      small: {},
      medium: {},
      large: {}
    },
    side: {
      top: {},
      left: {},
      right: {},
      bottom: {}
    }
  },
  compoundVariants: [
    {
      bp: "mobile",
      side: "bottom",
      debug: false,
      css: {
        bottom: 70
      }
    },
    {
      bp: "mobile",
      debug: true,
      css: {
        bottom: 50
      }
    },
    {
      bp: "mobile",
      side: "bottom",
      debug: true,
      css: {
        bottom: 110
      }
    },
    {
      bp: "small",
      side: "bottom",
      debug: true,
      css: {
        bottom: 50
      }
    },
    {
      bp: "small",
      debug: false,
      css: {
        bottom: 10
      }
    }
  ]
});
var StyledContent3 = styled(MenuContent2, {
  width: "fit-content",
  height: "fit-content",
  minWidth: 200,
  maxHeight: 380,
  overflowY: "auto",
  "& *": {
    boxSizing: "border-box"
  },
  variants: {
    variant: {
      horizontal: {
        flexDirection: "row"
      },
      menu: {
        minWidth: 128
      }
    }
  }
});
var PopoverAnchor2 = styled(Anchor3, {
  position: "absolute",
  right: 10,
  zIndex: 999,
  bottom: 50
});
var isDebugModeSelector3 = (s9) => s9.settings.isDebugMode;
var dockPositionState6 = (s9) => s9.settings.dockPosition;
var ToolsPanel = React68.memo(function ToolsPanel2({ onBlur }) {
  const app = useTldrawApp();
  const side = app.useStore(dockPositionState6);
  const isDebugMode = app.useStore(isDebugModeSelector3);
  return /* @__PURE__ */ React68.createElement(React68.Fragment, null, /* @__PURE__ */ React68.createElement(StyledToolsPanelContainer, {
    side,
    onBlur,
    bp: breakpoints,
    debug: isDebugMode
  }, /* @__PURE__ */ React68.createElement(StyledCenterWrap, {
    id: "TD-Tools"
  }, /* @__PURE__ */ React68.createElement(BackToContent, null), /* @__PURE__ */ React68.createElement(StyledPrimaryTools, {
    orientation: side === "bottom" || side === "top" ? "horizontal" : "vertical"
  }, /* @__PURE__ */ React68.createElement(ActionButton, null), /* @__PURE__ */ React68.createElement(PrimaryTools, null), /* @__PURE__ */ React68.createElement(DeleteButton, null)))), /* @__PURE__ */ React68.createElement(HelpPanel, null), isDebugMode && /* @__PURE__ */ React68.createElement(StyledStatusWrap, null, /* @__PURE__ */ React68.createElement(StatusBar, null)));
});
var StyledToolsPanelContainer = styled("div", {
  position: "absolute",
  width: "100%",
  minWidth: 0,
  maxWidth: "100%",
  height: "64px",
  gap: "$4",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  zIndex: 200,
  overflow: "hidden",
  pointerEvents: "none",
  "& > div > *": {
    pointerEvents: "all"
  },
  variants: {
    debug: {
      true: {},
      false: {}
    },
    bp: {
      mobile: {},
      small: {},
      medium: {},
      large: {}
    },
    side: {
      top: {
        width: "100%",
        height: 64,
        left: 0,
        right: 0,
        top: 45
      },
      right: { width: 64, height: "100%", top: 0, right: 0 },
      bottom: {
        width: "100%",
        left: 0,
        right: 0,
        bottom: 4
      },
      left: { width: 64, height: "100%", left: 0 }
    }
  },
  compoundVariants: [
    {
      side: "top",
      bp: "large",
      css: {
        top: "10px"
      }
    },
    {
      side: "bottom",
      debug: true,
      css: {
        bottom: 44
      }
    }
  ]
});
var StyledCenterWrap = styled("div", {
  display: "flex",
  width: "fit-content",
  height: "fit-content",
  alignItems: "center",
  justifyContent: "center",
  flexDirection: "column",
  gap: "$4"
});
var StyledStatusWrap = styled("div", {
  position: "absolute",
  bottom: "0px",
  left: "0px",
  right: "0px",
  height: "40px",
  width: "100%",
  maxWidth: "100%"
});
var StyledPrimaryTools = styled("div", {
  position: "relative",
  display: "flex",
  alignItems: "center",
  height: "fit-content",
  gap: "$3",
  variants: {
    orientation: {
      horizontal: {
        flexDirection: "row"
      },
      vertical: {
        flexDirection: "column"
      }
    }
  }
});
var settingsSelector = (s9) => s9.settings;
var DockPosition = ["bottom", "left", "right", "top"];
function PreferencesMenu() {
  const app = useTldrawApp();
  const intl = useIntl();
  const settings = app.useStore(settingsSelector);
  const toggleDebugMode = React69.useCallback(() => {
    app.setSetting("isDebugMode", (v6) => !v6);
  }, [app]);
  const toggleDarkMode = React69.useCallback(() => {
    app.setSetting("isDarkMode", (v6) => !v6);
  }, [app]);
  const toggleFocusMode = React69.useCallback(() => {
    app.setSetting("isFocusMode", (v6) => !v6);
  }, [app]);
  const toggleRotateHandle = React69.useCallback(() => {
    app.setSetting("showRotateHandles", (v6) => !v6);
  }, [app]);
  const toggleGrid = React69.useCallback(() => {
    app.setSetting("showGrid", (v6) => !v6);
  }, [app]);
  const toggleBoundShapesHandle = React69.useCallback(() => {
    app.setSetting("showBindingHandles", (v6) => !v6);
  }, [app]);
  const toggleisSnapping = React69.useCallback(() => {
    app.setSetting("isSnapping", (v6) => !v6);
  }, [app]);
  const toggleKeepStyleMenuOpen = React69.useCallback(() => {
    app.setSetting("keepStyleMenuOpen", (v6) => !v6);
  }, [app]);
  const toggleCloneControls = React69.useCallback(() => {
    app.setSetting("showCloneHandles", (v6) => !v6);
  }, [app]);
  const toggleCadSelectMode = React69.useCallback(() => {
    app.setSetting("isCadSelectMode", (v6) => !v6);
  }, [app]);
  const handleChangeDockPosition = React69.useCallback((position) => {
    app.setSetting("dockPosition", position);
  }, [app]);
  return /* @__PURE__ */ React69.createElement(DMSubMenu, {
    label: intl.formatMessage({ id: "menu.preferences" }),
    id: "TD-MenuItem-Preferences"
  }, /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.isDarkMode,
    onCheckedChange: toggleDarkMode,
    kbd: "#\u21E7D",
    id: "TD-MenuItem-Preferences-Dark_Mode"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.dark.mode"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.isFocusMode,
    onCheckedChange: toggleFocusMode,
    kbd: "#.",
    id: "TD-MenuItem-Preferences-Focus_Mode"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.focus.mode"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.isDebugMode,
    onCheckedChange: toggleDebugMode,
    id: "TD-MenuItem-Preferences-Debug_Mode"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.debug.mode"
  })), /* @__PURE__ */ React69.createElement(DMDivider, null), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.showGrid,
    onCheckedChange: toggleGrid,
    kbd: "#\u21E7G",
    id: "TD-MenuItem-Preferences-Grid"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.show.grid"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.isCadSelectMode,
    onCheckedChange: toggleCadSelectMode,
    id: "TD-MenuItem-Preferences-Cad_Selection"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.use.cad.selection"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.keepStyleMenuOpen,
    onCheckedChange: toggleKeepStyleMenuOpen,
    id: "TD-MenuItem-Preferences-Style_menu"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.keep.stylemenu.open"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.isSnapping,
    onCheckedChange: toggleisSnapping,
    id: "TD-MenuItem-Preferences-Always_Show_Snaps"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.always.show.snaps"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.showRotateHandles,
    onCheckedChange: toggleRotateHandle,
    id: "TD-MenuItem-Preferences-Rotate_Handles"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.rotate.handles"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.showBindingHandles,
    onCheckedChange: toggleBoundShapesHandle,
    id: "TD-MenuItem-Preferences-Binding_Handles"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.binding.handles"
  })), /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    checked: settings.showCloneHandles,
    onCheckedChange: toggleCloneControls,
    id: "TD-MenuItem-Preferences-Clone_Handles"
  }, /* @__PURE__ */ React69.createElement(message_default, {
    id: "preferences.clone.handles"
  })), /* @__PURE__ */ React69.createElement(DMSubMenu, {
    label: intl.formatMessage({ id: "dock.position" }),
    overflow: false
  }, DockPosition.map((position) => /* @__PURE__ */ React69.createElement(DMCheckboxItem, {
    key: position,
    checked: settings.dockPosition === position,
    onCheckedChange: () => handleChangeDockPosition(position),
    id: `TD-MenuItem-DockPosition-${position}`
  }, /* @__PURE__ */ React69.createElement(StyledText2, null, /* @__PURE__ */ React69.createElement(message_default, {
    id: position
  }))))));
}
var StyledText2 = styled("span", {
  textTransform: "capitalize"
});
var numberOfSelectedIdsSelector = (s9) => {
  return s9.document.pageStates[s9.appState.currentPageId].selectedIds.length;
};
var disableAssetsSelector = (s9) => {
  return s9.appState.disableAssets;
};
var Menu2 = React70.memo(function Menu22({ sponsor, readOnly }) {
  const app = useTldrawApp();
  const intl = useIntl();
  const numberOfSelectedIds = app.useStore(numberOfSelectedIdsSelector);
  const disableAssets = app.useStore(disableAssetsSelector);
  const [_4, setForce] = React70.useState(0);
  React70.useEffect(() => setForce(1), []);
  const { onNewProject, onOpenProject, onSaveProject, onSaveProjectAs } = useFileSystemHandlers();
  const handleDelete = React70.useCallback(() => {
    app.delete();
  }, [app]);
  const handleCopySVG = React70.useCallback(() => {
    app.copyImage("svg", { scale: 1, quality: 1, transparentBackground: false });
  }, [app]);
  const handleCopyPNG = React70.useCallback(() => {
    app.copyImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }, [app]);
  const handleExportPNG = React70.useCallback(() => __async2(this, null, function* () {
    app.exportImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }), [app]);
  const handleExportJPG = React70.useCallback(() => __async2(this, null, function* () {
    app.exportImage("jpeg", { scale: 2, quality: 1, transparentBackground: false });
  }), [app]);
  const handleExportWEBP = React70.useCallback(() => __async2(this, null, function* () {
    app.exportImage("webp", { scale: 2, quality: 1, transparentBackground: false });
  }), [app]);
  const handleExportSVG = React70.useCallback(() => __async2(this, null, function* () {
    app.exportImage("svg", { scale: 2, quality: 1, transparentBackground: false });
  }), [app]);
  const handleCopyJSON = React70.useCallback(() => __async2(this, null, function* () {
    app.copyJson();
  }), [app]);
  const handleExportJSON = React70.useCallback(() => __async2(this, null, function* () {
    app.exportJson();
  }), [app]);
  const handleSignIn = React70.useCallback(() => {
    var _a3, _b;
    (_b = (_a3 = app.callbacks).onSignIn) == null ? void 0 : _b.call(_a3, app);
  }, [app]);
  const handleSignOut = React70.useCallback(() => {
    var _a3, _b;
    (_b = (_a3 = app.callbacks).onSignOut) == null ? void 0 : _b.call(_a3, app);
  }, [app]);
  const handleCut = React70.useCallback(() => {
    app.cut();
  }, [app]);
  const handleCopy = React70.useCallback(() => {
    app.copy();
  }, [app]);
  const handlePaste = React70.useCallback(() => {
    app.paste();
  }, [app]);
  const handleSelectAll = React70.useCallback(() => {
    app.selectAll();
  }, [app]);
  const handleSelectNone = React70.useCallback(() => {
    app.selectNone();
  }, [app]);
  const handleUploadMedia = React70.useCallback(() => {
    app.openAsset();
  }, [app]);
  const handleZoomTo100 = React70.useCallback(() => {
    app.zoomTo(1);
  }, [app]);
  const showFileMenu = app.callbacks.onNewProject || app.callbacks.onOpenProject || app.callbacks.onSaveProject || app.callbacks.onSaveProjectAs || app.callbacks.onExport;
  const showSignInOutMenu = app.callbacks.onSignIn || app.callbacks.onSignOut;
  const hasSelection = numberOfSelectedIds > 0;
  return /* @__PURE__ */ React70.createElement(Root5, {
    dir: "ltr"
  }, /* @__PURE__ */ React70.createElement(DMTriggerIcon, {
    id: "TD-MenuIcon"
  }, /* @__PURE__ */ React70.createElement(HamburgerMenuIcon, null)), /* @__PURE__ */ React70.createElement(DMContent, {
    variant: "menu",
    id: "TD-Menu"
  }, showFileMenu && /* @__PURE__ */ React70.createElement(DMSubMenu, {
    label: `${intl.formatMessage({ id: "menu.file" })}...`,
    id: "TD-MenuItem-File"
  }, app.callbacks.onNewProject && /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: onNewProject,
    kbd: "#N",
    id: "TD-MenuItem-File-New_Project"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "new.project"
  })), app.callbacks.onOpenProject && /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: onOpenProject,
    kbd: "#O",
    id: "TD-MenuItem-File-Open"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "open"
  }), "..."), app.callbacks.onSaveProject && /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: onSaveProject,
    kbd: "#S",
    id: "TD-MenuItem-File-Save"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "save"
  })), app.callbacks.onSaveProjectAs && /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: onSaveProjectAs,
    kbd: "#\u21E7S",
    id: "TD-MenuItem-File-Save_As"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "save.as"
  }), "..."), !disableAssets && /* @__PURE__ */ React70.createElement(React70.Fragment, null, /* @__PURE__ */ React70.createElement(Divider, null), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleUploadMedia,
    kbd: "#U",
    id: "TD-MenuItem-File-Upload_Media"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "upload.media"
  })))), /* @__PURE__ */ React70.createElement(DMSubMenu, {
    label: `${intl.formatMessage({ id: "menu.edit" })}...`,
    id: "TD-MenuItem-Edit"
  }, /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.undo,
    disabled: readOnly,
    kbd: "#Z",
    id: "TD-MenuItem-Edit-Undo"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "undo"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.redo,
    disabled: readOnly,
    kbd: "#\u21E7Z",
    id: "TD-MenuItem-Edit-Redo"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "redo"
  })), /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    disabled: !hasSelection || readOnly,
    onClick: handleCut,
    kbd: "#X",
    id: "TD-MenuItem-Edit-Cut"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "cut"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    disabled: !hasSelection,
    onClick: handleCopy,
    kbd: "#C",
    id: "TD-MenuItem-Edit-Copy"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "copy"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: handlePaste,
    kbd: "#V",
    id: "TD-MenuItem-Edit-Paste"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "paste"
  })), /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), /* @__PURE__ */ React70.createElement(DMSubMenu, {
    label: `${intl.formatMessage({ id: "copy.as" })}...`,
    size: "small",
    id: "TD-MenuItem-Copy-As"
  }, /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleCopySVG,
    id: "TD-MenuItem-Copy-as-SVG"
  }, "SVG"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleCopyPNG,
    id: "TD-MenuItem-Copy-As-PNG"
  }, "PNG"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleCopyJSON,
    id: "TD-MenuItem-Copy_as_JSON"
  }, "JSON")), /* @__PURE__ */ React70.createElement(DMSubMenu, {
    label: `${intl.formatMessage({ id: "export.as" })}...`,
    size: "small",
    id: "TD-MenuItem-Export"
  }, /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleExportSVG,
    id: "TD-MenuItem-Export-SVG"
  }, "SVG"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleExportPNG,
    id: "TD-MenuItem-Export-PNG"
  }, "PNG"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleExportJPG,
    id: "TD-MenuItem-Export-JPG"
  }, "JPG"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleExportWEBP,
    id: "TD-MenuItem-Export-WEBP"
  }, "WEBP"), /* @__PURE__ */ React70.createElement(DMItem, {
    onClick: handleExportJSON,
    id: "TD-MenuItem-Export-JSON"
  }, "JSON")), /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: handleSelectAll,
    kbd: "#A",
    id: "TD-MenuItem-Select_All"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "select.all"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    disabled: !hasSelection,
    onClick: handleSelectNone,
    id: "TD-MenuItem-Select_None"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "select.none"
  })), /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: handleDelete,
    disabled: !hasSelection,
    kbd: "\u232B",
    id: "TD-MenuItem-Delete"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "delete"
  }))), /* @__PURE__ */ React70.createElement(DMSubMenu, {
    label: intl.formatMessage({ id: "menu.view" }),
    id: "TD-MenuItem-Edit"
  }, /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomIn,
    kbd: "#+",
    id: "TD-MenuItem-View-ZoomIn"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "zoom.in"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomOut,
    kbd: "#-",
    id: "TD-MenuItem-View-ZoomOut"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "zoom.out"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: handleZoomTo100,
    kbd: "\u21E7+0",
    id: "TD-MenuItem-View-ZoomTo100"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "zoom.to"
  }), " 100%"), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomToFit,
    kbd: "\u21E7+1",
    id: "TD-MenuItem-View-ZoomToFit"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "zoom.to.fit"
  })), /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomToSelection,
    kbd: "\u21E7+2",
    id: "TD-MenuItem-View-ZoomToSelection"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "zoom.to.selection"
  }))), /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), /* @__PURE__ */ React70.createElement(PreferencesMenu, null), showSignInOutMenu && /* @__PURE__ */ React70.createElement(React70.Fragment, null, /* @__PURE__ */ React70.createElement(DMDivider, {
    dir: "ltr"
  }), " ", app.callbacks.onSignIn && /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: handleSignIn,
    id: "TD-MenuItem-Sign_in"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "menu.sign.in"
  })), app.callbacks.onSignOut && /* @__PURE__ */ React70.createElement(DMItem, {
    onSelect: handleSignOut,
    id: "TD-MenuItem-Sign_out"
  }, /* @__PURE__ */ React70.createElement(message_default, {
    id: "menu.sign.out"
  }), /* @__PURE__ */ React70.createElement(SmallIcon, null, /* @__PURE__ */ React70.createElement(ExitIcon, null))))));
});
var TextField = React71.forwardRef((_a3, ref) => {
  var _b = _a3, { icon } = _b, rest = __objRest3(_b, ["icon"]);
  return /* @__PURE__ */ React71.createElement(StyledInputWrapper, null, /* @__PURE__ */ React71.createElement(StyledInput, __spreadProps4(__spreadValues4({}, rest), {
    ref
  })), icon ? /* @__PURE__ */ React71.createElement(StyledInputIcon, null, icon) : null);
});
var StyledInputWrapper = styled("div", {
  position: "relative",
  width: "100%",
  height: "min-content"
});
var StyledInput = styled("input", {
  color: "$text",
  border: "none",
  textAlign: "left",
  width: "100%",
  paddingLeft: "$3",
  paddingRight: "$6",
  backgroundColor: "$background",
  height: "32px",
  outline: "none",
  fontFamily: "$ui",
  fontSize: "$1",
  "&:focus": {
    backgroundColor: "$hover"
  },
  borderRadius: "$2"
});
var StyledInputIcon = styled(SmallIcon, {
  top: 0,
  right: 0,
  position: "absolute",
  paddingLeft: "$3",
  paddingRight: "$3",
  pointerEvents: "none",
  color: "$text"
});
var canDeleteSelector = (s9) => {
  return Object.keys(s9.document.pages).length > 1;
};
function PageOptionsDialog({ page: page7, onOpen, onClose }) {
  const app = useTldrawApp();
  const intl = useIntl();
  const [isOpen, setIsOpen] = React722.useState(false);
  const [pageName, setPageName] = React722.useState(page7.name || "Page");
  const canDelete = app.useStore(canDeleteSelector);
  const rInput = React722.useRef(null);
  const handleClose = React722.useCallback(() => {
    setIsOpen(false);
  }, []);
  const handleDuplicate = React722.useCallback(() => {
    app.duplicatePage(page7.id);
  }, [app]);
  const handleDelete = React722.useCallback(() => {
    if (window.confirm(`Are you sure you want to delete this page?`)) {
      app.deletePage(page7.id);
    }
  }, [app]);
  const handleOpenChange = React722.useCallback((isOpen2) => {
    setIsOpen(isOpen2);
    if (isOpen2) {
      onOpen == null ? void 0 : onOpen();
      return;
    }
  }, [app]);
  function stopPropagation2(e13) {
    e13.stopPropagation();
  }
  const rInitialName = React722.useRef(page7.name || "Page");
  const rCurrentName = React722.useRef(rInitialName.current);
  const handleTextFieldChange = React722.useCallback((event) => {
    const value = event.target.value.trimStart();
    rCurrentName.current = value;
    setPageName(value);
  }, []);
  const handleTextFieldKeyDown = React722.useCallback((e13) => {
    switch (e13.key) {
      case "Enter": {
        if (rCurrentName.current === rInitialName.current) {
          setIsOpen(false);
        } else {
          rInitialName.current = rCurrentName.current;
          app.renamePage(page7.id, rCurrentName.current.trim());
        }
        break;
      }
      case "Escape": {
        if (rCurrentName.current === rInitialName.current) {
          setIsOpen(false);
          return;
        }
        rCurrentName.current = rInitialName.current;
        setPageName(rInitialName.current);
        requestAnimationFrame(() => {
          const elm = rInput.current;
          if (elm) {
            elm.focus();
            elm.setSelectionRange(0, elm.value.length);
          }
        });
        break;
      }
    }
  }, []);
  const rWasOpen = React722.useRef(false);
  React722.useEffect(() => {
    if (isOpen) {
      rWasOpen.current = true;
      rInitialName.current = page7.name || "Page";
      rCurrentName.current = rInitialName.current;
      requestAnimationFrame(() => {
        const elm = rInput.current;
        if (elm) {
          elm.focus();
          elm.setSelectionRange(0, elm.value.length);
        }
      });
    } else if (rWasOpen.current) {
      onClose == null ? void 0 : onClose();
    }
    return () => {
      if (rCurrentName.current !== rInitialName.current) {
        rInitialName.current = rCurrentName.current;
        app.renamePage(page7.id, rCurrentName.current);
      }
    };
  }, [isOpen]);
  return /* @__PURE__ */ React722.createElement(Root10, {
    open: isOpen,
    onOpenChange: handleOpenChange
  }, /* @__PURE__ */ React722.createElement(Trigger5, {
    asChild: true,
    "data-shy": "true"
  }, /* @__PURE__ */ React722.createElement(IconButton, {
    bp: breakpoints
  }, /* @__PURE__ */ React722.createElement(SmallIcon, null, /* @__PURE__ */ React722.createElement(MixerVerticalIcon, null)))), /* @__PURE__ */ React722.createElement(Portal3, null, /* @__PURE__ */ React722.createElement(StyledDialogOverlay, {
    onPointerDown: handleClose
  }), /* @__PURE__ */ React722.createElement(StyledDialogContent, {
    dir: "ltr",
    onKeyDown: stopPropagation2,
    onKeyUp: stopPropagation2
  }, /* @__PURE__ */ React722.createElement(TextField, {
    ref: rInput,
    placeholder: intl.formatMessage({ id: "page.name" }),
    value: pageName,
    onChange: handleTextFieldChange,
    onKeyDown: handleTextFieldKeyDown,
    icon: /* @__PURE__ */ React722.createElement(Pencil1Icon, null)
  }), /* @__PURE__ */ React722.createElement(Divider, null), /* @__PURE__ */ React722.createElement(DialogAction, {
    onSelect: handleDuplicate
  }, /* @__PURE__ */ React722.createElement(message_default, {
    id: "duplicate"
  })), /* @__PURE__ */ React722.createElement(DialogAction, {
    disabled: !canDelete,
    onSelect: handleDelete
  }, /* @__PURE__ */ React722.createElement(message_default, {
    id: "delete"
  })), /* @__PURE__ */ React722.createElement(Divider, null), /* @__PURE__ */ React722.createElement(Cancel, {
    asChild: true
  }, /* @__PURE__ */ React722.createElement(RowButton, null, /* @__PURE__ */ React722.createElement(message_default, {
    id: "cancel"
  }))))));
}
var StyledDialogContent = styled(Content7, {
  position: "fixed",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  minWidth: 240,
  maxWidth: "fit-content",
  maxHeight: "85vh",
  marginTop: "-5vh",
  pointerEvents: "all",
  backgroundColor: "$panel",
  padding: "$1",
  borderRadius: "$2",
  font: "$ui",
  "&:focus": {
    outline: "none"
  }
});
var StyledDialogOverlay = styled(Overlay4, {
  backgroundColor: "rgba(0, 0, 0, .15)",
  position: "fixed",
  pointerEvents: "all",
  inset: 0
});
function DialogAction(_a3) {
  var _b = _a3, {
    onSelect
  } = _b, rest = __objRest3(_b, [
    "onSelect"
  ]);
  return /* @__PURE__ */ React722.createElement(Action, {
    asChild: true,
    onClick: onSelect,
    onSelect
  }, /* @__PURE__ */ React722.createElement(RowButton, __spreadValues4({}, rest)));
}
var sortedSelector = (s9) => Object.values(s9.document.pages).sort((a6, b7) => (a6.childIndex || 0) - (b7.childIndex || 0));
var currentPageNameSelector = (s9) => s9.document.pages[s9.appState.currentPageId].name;
var currentPageIdSelector = (s9) => s9.document.pages[s9.appState.currentPageId].id;
function PageMenu() {
  const app = useTldrawApp();
  const rIsOpen = React73.useRef(false);
  const [isOpen, setIsOpen] = React73.useState(false);
  React73.useEffect(() => {
    if (rIsOpen.current !== isOpen) {
      rIsOpen.current = isOpen;
    }
  }, [isOpen]);
  const handleClose = React73.useCallback(() => {
    setIsOpen(false);
  }, [setIsOpen]);
  const handleOpenChange = React73.useCallback((isOpen2) => {
    if (rIsOpen.current !== isOpen2) {
      setIsOpen(isOpen2);
    }
  }, [setIsOpen]);
  const currentPageName = app.useStore(currentPageNameSelector);
  return /* @__PURE__ */ React73.createElement(Root5, {
    dir: "ltr",
    open: isOpen,
    onOpenChange: handleOpenChange
  }, /* @__PURE__ */ React73.createElement(Trigger, {
    dir: "ltr",
    asChild: true,
    id: "TD-Page"
  }, /* @__PURE__ */ React73.createElement(ToolButton, {
    variant: "text"
  }, currentPageName || "Page")), /* @__PURE__ */ React73.createElement(DMContent, {
    variant: "menu",
    align: "start"
  }, isOpen && /* @__PURE__ */ React73.createElement(PageMenuContent, {
    onClose: handleClose
  })));
}
function PageMenuContent({ onClose }) {
  const app = useTldrawApp();
  const intl = useIntl();
  const sortedPages = app.useStore(sortedSelector);
  const currentPageId = app.useStore(currentPageIdSelector);
  const handleCreatePage = React73.useCallback(() => {
    const pageName = intl.formatMessage({ id: "page" }) + " " + (Object.keys(app.document.pages).length + 1);
    app.createPage(void 0, pageName);
  }, [app]);
  const handleChangePage = React73.useCallback((id) => {
    onClose();
    app.changePage(id);
  }, [app]);
  const [dragId, setDragId] = React73.useState(null);
  const [dropIndex, setDropIndex] = React73.useState(null);
  const handleDragStart = React73.useCallback((ev) => {
    setDragId(ev.currentTarget.id);
    setDropIndex(sortedPages.findIndex((p7) => p7.id === ev.currentTarget.id));
    ev.dataTransfer.effectAllowed = "move";
  }, []);
  const handleDrag = React73.useCallback((ev) => {
    ev.preventDefault();
    let dropIndex2 = sortedPages.findIndex((p7) => p7.id === ev.currentTarget.id);
    const rect = ev.currentTarget.getBoundingClientRect();
    const ny = (ev.clientY - rect.top) / rect.height;
    dropIndex2 = ny < 0.5 ? dropIndex2 : dropIndex2 + 1;
    setDropIndex(dropIndex2);
  }, [dragId, sortedPages]);
  const handleDrop = React73.useCallback(() => {
    if (dragId !== null && dropIndex !== null) {
      app.movePage(dragId, dropIndex);
    }
    setDragId(null);
    setDropIndex(null);
  }, [dragId, dropIndex]);
  return /* @__PURE__ */ React73.createElement(React73.Fragment, null, /* @__PURE__ */ React73.createElement(RadioGroup2, {
    dir: "ltr",
    value: currentPageId,
    onValueChange: handleChangePage
  }, sortedPages.map((page7, i7) => /* @__PURE__ */ React73.createElement(ButtonWithOptions, {
    key: page7.id,
    isDropAbove: i7 === dropIndex && i7 === 0,
    isDropBelow: dropIndex !== null && i7 === dropIndex - 1
  }, /* @__PURE__ */ React73.createElement(RadioItem2, {
    title: page7.name || "Page",
    value: page7.id,
    key: page7.id,
    id: page7.id,
    asChild: true,
    onDragOver: handleDrag,
    onDragStart: handleDragStart,
    onDrop: handleDrop,
    draggable: true
  }, /* @__PURE__ */ React73.createElement(PageButton, null, /* @__PURE__ */ React73.createElement("span", {
    id: page7.id
  }, page7.name || "Page"), /* @__PURE__ */ React73.createElement(ItemIndicator2, null, /* @__PURE__ */ React73.createElement(SmallIcon, null, /* @__PURE__ */ React73.createElement(CheckIcon, null))))), /* @__PURE__ */ React73.createElement(PageOptionsDialog, {
    page: page7,
    onClose
  })))), /* @__PURE__ */ React73.createElement(DMDivider, null), /* @__PURE__ */ React73.createElement(Item3, {
    onSelect: handleCreatePage,
    asChild: true
  }, /* @__PURE__ */ React73.createElement(RowButton, null, /* @__PURE__ */ React73.createElement("span", null, /* @__PURE__ */ React73.createElement(message_default, {
    id: "create.page"
  })), /* @__PURE__ */ React73.createElement(SmallIcon, null, /* @__PURE__ */ React73.createElement(PlusIcon, null)))));
}
var ButtonWithOptions = styled("div", {
  position: "relative",
  display: "grid",
  gridTemplateColumns: "1fr auto",
  gridAutoFlow: "column",
  margin: 0,
  '& > *[data-shy="true"]': {
    opacity: 0
  },
  '&:hover > *[data-shy="true"]': {
    opacity: 1
  },
  variants: {
    isDropAbove: {
      true: {
        "&::after": {
          content: "",
          display: "block",
          position: "absolute",
          top: 0,
          width: "100%",
          height: "1px",
          backgroundColor: "$selected",
          zIndex: 999,
          pointerEvents: "none"
        }
      }
    },
    isDropBelow: {
      true: {
        "&::after": {
          content: "",
          display: "block",
          position: "absolute",
          width: "100%",
          height: "1px",
          top: "100%",
          backgroundColor: "$selected",
          zIndex: 999,
          pointerEvents: "none"
        }
      }
    }
  }
});
var PageButton = styled(RowButton, {
  minWidth: 128
});
var zoomSelector = (s9) => s9.document.pageStates[s9.appState.currentPageId].camera.zoom;
var ZoomMenu = React74.memo(function ZoomMenu2() {
  const app = useTldrawApp();
  const zoom = app.useStore(zoomSelector);
  return /* @__PURE__ */ React74.createElement(Root5, {
    dir: "ltr"
  }, /* @__PURE__ */ React74.createElement(Trigger, {
    dir: "ltr",
    asChild: true,
    id: "TD-Zoom"
  }, /* @__PURE__ */ React74.createElement(FixedWidthToolButton, {
    onDoubleClick: app.resetZoom,
    variant: "text"
  }, Math.round(zoom * 100), "%")), /* @__PURE__ */ React74.createElement(DMContent, {
    align: "end"
  }, /* @__PURE__ */ React74.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomIn,
    kbd: "#+",
    id: "TD-Zoom-Zoom_In"
  }, /* @__PURE__ */ React74.createElement(message_default, {
    id: "zoom.in"
  })), /* @__PURE__ */ React74.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomOut,
    kbd: "#\u2212",
    id: "TD-Zoom-Zoom_Out"
  }, /* @__PURE__ */ React74.createElement(message_default, {
    id: "zoom.out"
  })), /* @__PURE__ */ React74.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.resetZoom,
    kbd: "\u21E70",
    id: "TD-Zoom-Zoom_To_100%"
  }, /* @__PURE__ */ React74.createElement(message_default, {
    id: "to"
  }), " 100%"), /* @__PURE__ */ React74.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomToFit,
    kbd: "\u21E71",
    id: "TD-Zoom-To_Fit"
  }, /* @__PURE__ */ React74.createElement(message_default, {
    id: "to.fit"
  })), /* @__PURE__ */ React74.createElement(DMItem, {
    onSelect: preventEvent,
    onClick: app.zoomToSelection,
    kbd: "\u21E72",
    id: "TD-Zoom-To_Selection"
  }, /* @__PURE__ */ React74.createElement(message_default, {
    id: "to.selection"
  }))));
});
var FixedWidthToolButton = styled(ToolButton, {
  minWidth: 56
});
var currentStyleSelector = (s9) => s9.appState.currentStyle;
var selectedIdsSelector = (s9) => s9.document.pageStates[s9.appState.currentPageId].selectedIds;
var STYLE_KEYS = Object.keys(defaultTextStyle);
var DASH_ICONS = {
  ["draw"]: /* @__PURE__ */ React75.createElement(DashDrawIcon, null),
  ["solid"]: /* @__PURE__ */ React75.createElement(DashSolidIcon, null),
  ["dashed"]: /* @__PURE__ */ React75.createElement(DashDashedIcon, null),
  ["dotted"]: /* @__PURE__ */ React75.createElement(DashDottedIcon, null)
};
var SIZE_ICONS = {
  ["small"]: /* @__PURE__ */ React75.createElement(SizeSmallIcon, null),
  ["medium"]: /* @__PURE__ */ React75.createElement(SizeMediumIcon, null),
  ["large"]: /* @__PURE__ */ React75.createElement(SizeLargeIcon, null)
};
var ALIGN_ICONS = {
  ["start"]: /* @__PURE__ */ React75.createElement(TextAlignLeftIcon, null),
  ["middle"]: /* @__PURE__ */ React75.createElement(TextAlignCenterIcon, null),
  ["end"]: /* @__PURE__ */ React75.createElement(TextAlignRightIcon, null),
  ["justify"]: /* @__PURE__ */ React75.createElement(TextAlignJustifyIcon, null)
};
var themeSelector = (s9) => s9.settings.isDarkMode ? "dark" : "light";
var keepOpenSelector = (s9) => s9.settings.keepStyleMenuOpen;
var optionsSelector = (s9) => {
  const { activeTool, currentPageId: pageId } = s9.appState;
  switch (activeTool) {
    case "select": {
      const page7 = s9.document.pages[pageId];
      let hasText = false;
      let hasLabel = false;
      for (const id of s9.document.pageStates[pageId].selectedIds) {
        if ("text" in page7.shapes[id])
          hasText = true;
        if ("label" in page7.shapes[id])
          hasLabel = true;
      }
      return hasText ? "text" : hasLabel ? "label" : "";
    }
    case "text": {
      return "text";
    }
    case "rectangle": {
      return "label";
    }
    case "ellipse": {
      return "label";
    }
    case "triangle": {
      return "label";
    }
    case "arrow": {
      return "label";
    }
    case "line": {
      return "label";
    }
  }
  return false;
};
var StyleMenu = React75.memo(function ColorMenu() {
  const app = useTldrawApp();
  const theme = app.useStore(themeSelector);
  const keepOpen = app.useStore(keepOpenSelector);
  const options2 = app.useStore(optionsSelector);
  const currentStyle = app.useStore(currentStyleSelector);
  const selectedIds = app.useStore(selectedIdsSelector);
  const [displayedStyle, setDisplayedStyle] = React75.useState(currentStyle);
  const rDisplayedStyle = React75.useRef(currentStyle);
  React75.useEffect(() => {
    const {
      appState: { currentStyle: currentStyle2 },
      page: page7,
      selectedIds: selectedIds2
    } = app;
    let commonStyle = {};
    if (selectedIds2.length <= 0) {
      commonStyle = currentStyle2;
    } else {
      const overrides = /* @__PURE__ */ new Set([]);
      app.selectedIds.map((id) => page7.shapes[id]).forEach((shape) => {
        STYLE_KEYS.forEach((key) => {
          if (overrides.has(key))
            return;
          if (commonStyle[key] === void 0) {
            commonStyle[key] = shape.style[key];
          } else {
            if (commonStyle[key] === shape.style[key])
              return;
            commonStyle[key] = shape.style[key];
            overrides.add(key);
          }
        });
      });
    }
    if (JSON.stringify(commonStyle) !== JSON.stringify(rDisplayedStyle.current)) {
      rDisplayedStyle.current = commonStyle;
      setDisplayedStyle(commonStyle);
    }
  }, [currentStyle, selectedIds]);
  const handleToggleKeepOpen = React75.useCallback((checked) => {
    app.setSetting("keepStyleMenuOpen", checked);
  }, []);
  const handleToggleFilled = React75.useCallback((checked) => {
    app.style({ isFilled: checked });
  }, []);
  const handleDashChange = React75.useCallback((value) => {
    app.style({ dash: value });
  }, []);
  const handleSizeChange = React75.useCallback((value) => {
    app.style({ size: value });
  }, []);
  const handleFontChange = React75.useCallback((value) => {
    app.style({ font: value });
  }, []);
  const handleTextAlignChange = React75.useCallback((value) => {
    app.style({ textAlign: value });
  }, []);
  const handleMenuOpenChange = React75.useCallback((open21) => {
    app.setMenuOpen(open21);
  }, [app]);
  return /* @__PURE__ */ React75.createElement(Root5, {
    dir: "ltr",
    onOpenChange: handleMenuOpenChange,
    open: keepOpen ? true : void 0,
    modal: false
  }, /* @__PURE__ */ React75.createElement(Trigger, {
    asChild: true,
    id: "TD-Styles"
  }, /* @__PURE__ */ React75.createElement(ToolButton, {
    variant: "text"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "styles"
  }), /* @__PURE__ */ React75.createElement(OverlapIcons, {
    style: {
      color: strokes[theme][displayedStyle.color]
    }
  }, displayedStyle.isFilled && /* @__PURE__ */ React75.createElement(CircleIcon2, {
    size: 16,
    stroke: "none",
    fill: fills[theme][displayedStyle.color]
  }), DASH_ICONS[displayedStyle.dash]))), /* @__PURE__ */ React75.createElement(DMContent, null, /* @__PURE__ */ React75.createElement(StyledRow, {
    variant: "tall",
    id: "TD-Styles-Color-Container"
  }, /* @__PURE__ */ React75.createElement("span", null, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.color"
  })), /* @__PURE__ */ React75.createElement(ColorGrid, null, Object.keys(strokes.light).map((style) => /* @__PURE__ */ React75.createElement(Item3, {
    key: style,
    onSelect: preventEvent,
    asChild: true,
    id: `TD-Styles-Color-Swatch-${style}`
  }, /* @__PURE__ */ React75.createElement(ToolButton, {
    variant: "icon",
    isActive: displayedStyle.color === style,
    onClick: () => app.style({ color: style })
  }, /* @__PURE__ */ React75.createElement(CircleIcon2, {
    size: 18,
    strokeWidth: 2.5,
    fill: displayedStyle.isFilled ? fills.light[style] : "transparent",
    stroke: strokes.light[style]
  })))))), /* @__PURE__ */ React75.createElement(DMCheckboxItem, {
    variant: "styleMenu",
    checked: !!displayedStyle.isFilled,
    onCheckedChange: handleToggleFilled,
    id: "TD-Styles-Fill"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.fill"
  })), /* @__PURE__ */ React75.createElement(StyledRow, {
    id: "TD-Styles-Dash-Container"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.dash"
  }), /* @__PURE__ */ React75.createElement(StyledGroup, {
    dir: "ltr",
    value: displayedStyle.dash,
    onValueChange: handleDashChange
  }, Object.values(DashStyle).map((style) => /* @__PURE__ */ React75.createElement(DMRadioItem, {
    key: style,
    isActive: style === displayedStyle.dash,
    value: style,
    onSelect: preventEvent,
    bp: breakpoints,
    id: `TD-Styles-Dash-${style}`
  }, DASH_ICONS[style])))), /* @__PURE__ */ React75.createElement(StyledRow, {
    id: "TD-Styles-Size-Container"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.size"
  }), /* @__PURE__ */ React75.createElement(StyledGroup, {
    dir: "ltr",
    value: displayedStyle.size,
    onValueChange: handleSizeChange
  }, Object.values(SizeStyle).map((sizeStyle) => /* @__PURE__ */ React75.createElement(DMRadioItem, {
    key: sizeStyle,
    isActive: sizeStyle === displayedStyle.size,
    value: sizeStyle,
    onSelect: preventEvent,
    bp: breakpoints,
    id: `TD-Styles-Dash-${sizeStyle}`
  }, SIZE_ICONS[sizeStyle])))), (options2 === "text" || options2 === "label") && /* @__PURE__ */ React75.createElement(React75.Fragment, null, /* @__PURE__ */ React75.createElement(Divider, null), /* @__PURE__ */ React75.createElement(StyledRow, {
    id: "TD-Styles-Font-Container"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.font"
  }), /* @__PURE__ */ React75.createElement(StyledGroup, {
    dir: "ltr",
    value: displayedStyle.font,
    onValueChange: handleFontChange
  }, Object.values(FontStyle).map((fontStyle) => /* @__PURE__ */ React75.createElement(DMRadioItem, {
    key: fontStyle,
    isActive: fontStyle === displayedStyle.font,
    value: fontStyle,
    onSelect: preventEvent,
    bp: breakpoints,
    id: `TD-Styles-Font-${fontStyle}`
  }, /* @__PURE__ */ React75.createElement(FontIcon, {
    fontStyle
  }, "Aa"))))), options2 === "text" && /* @__PURE__ */ React75.createElement(StyledRow, {
    id: "TD-Styles-Align-Container"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.align"
  }), /* @__PURE__ */ React75.createElement(StyledGroup, {
    dir: "ltr",
    value: displayedStyle.textAlign,
    onValueChange: handleTextAlignChange
  }, Object.values(AlignStyle).map((style) => /* @__PURE__ */ React75.createElement(DMRadioItem, {
    key: style,
    isActive: style === displayedStyle.textAlign,
    value: style,
    onSelect: preventEvent,
    bp: breakpoints,
    id: `TD-Styles-Align-${style}`
  }, ALIGN_ICONS[style]))))), /* @__PURE__ */ React75.createElement(DMDivider, null), /* @__PURE__ */ React75.createElement(DMCheckboxItem, {
    variant: "styleMenu",
    checked: keepOpen,
    onCheckedChange: handleToggleKeepOpen,
    id: "TD-Styles-Keep-Open"
  }, /* @__PURE__ */ React75.createElement(message_default, {
    id: "style.menu.keep.open"
  }))));
});
var ColorGrid = styled("div", {
  display: "grid",
  gridTemplateColumns: "repeat(4, auto)",
  gap: 0
});
var StyledRow = styled("div", {
  position: "relative",
  width: "100%",
  background: "none",
  border: "none",
  cursor: "pointer",
  minHeight: "32px",
  outline: "none",
  color: "$text",
  fontFamily: "$ui",
  fontWeight: 400,
  fontSize: "$1",
  padding: "$2 0 $2 $3",
  borderRadius: 4,
  userSelect: "none",
  margin: 0,
  display: "flex",
  gap: "$3",
  flexDirection: "row",
  alignItems: "center",
  justifyContent: "space-between",
  variants: {
    variant: {
      tall: {
        alignItems: "flex-start",
        padding: "0 0 0 $3",
        "& > span": {
          paddingTop: "$4"
        }
      }
    }
  }
});
var StyledGroup = styled(DropdownMenuRadioGroup, {
  display: "flex",
  flexDirection: "row",
  gap: "$1"
});
var OverlapIcons = styled("div", {
  display: "grid",
  "& > *": {
    gridColumn: 1,
    gridRow: 1
  }
});
var FontIcon = styled("div", {
  width: 32,
  height: 32,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  fontSize: "$3",
  variants: {
    fontStyle: {
      ["script"]: {
        fontFamily: "Caveat Brush"
      },
      ["sans"]: {
        fontFamily: "Recursive"
      },
      ["erif"]: {
        fontFamily: "Georgia"
      },
      ["mono"]: {
        fontFamily: "Recursive Mono"
      }
    }
  }
});
function MultiplayerIcon2() {
  return /* @__PURE__ */ React76.createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }, /* @__PURE__ */ React76.createElement("path", {
    d: "M1.36482 4.71089C1.36482 3.21371 2.57853 2 4.07572 2C5.5729 2 6.78661 3.21371 6.78661 4.71089C6.78661 5.76842 6.18106 6.68452 5.29779 7.13136C5.80465 7.24611 6.26407 7.44186 6.66028 7.73182C7.18674 8.11711 7.57215 8.64722 7.81073 9.30983C7.81452 9.30606 7.81832 9.3023 7.82212 9.29855C8.30448 8.82317 8.91325 8.52463 9.60905 8.37275C8.68812 7.922 8.05394 6.97569 8.05394 5.88126C8.05394 4.35017 9.29513 3.10898 10.8262 3.10898C12.3573 3.10898 13.5985 4.35017 13.5985 5.88126C13.5985 6.97561 12.9644 7.92186 12.0436 8.37265C12.7396 8.52449 13.3486 8.82306 13.831 9.29854C14.5795 10.0361 14.9481 11.1249 14.9481 12.5176C14.9481 12.7799 14.7354 12.9926 14.473 12.9926C14.2107 12.9926 13.9981 12.7799 13.9981 12.5175C13.9981 11.2848 13.6738 10.4774 13.1642 9.97518C12.6532 9.4716 11.8802 9.20024 10.8266 9.20024C9.77294 9.20024 8.99993 9.4716 8.48896 9.97518C7.97939 10.4774 7.65513 11.2848 7.65513 12.5176C7.65513 12.7799 7.44247 12.9926 7.18013 12.9926C6.9178 12.9926 6.70513 12.7799 6.70513 12.5176C6.70513 11.6734 6.84053 10.941 7.11384 10.3307C7.0922 10.2895 7.0763 10.2444 7.06737 10.1962C6.91739 9.38749 6.57392 8.84586 6.09923 8.49845C5.61626 8.14499 4.94481 7.95427 4.07574 7.95427C3.05232 7.95427 2.30368 8.21784 1.80952 8.70485C1.31675 9.19047 1.00176 9.97257 1.00176 11.1702C1.00176 11.4326 0.789093 11.6452 0.526758 11.6452C0.264423 11.6452 0.0517578 11.4326 0.0517578 11.1702C0.0517578 9.81263 0.411052 8.74925 1.14268 8.02821C1.60624 7.57137 2.18892 7.28191 2.85378 7.13142C1.97043 6.68461 1.36482 5.76848 1.36482 4.71089ZM4.07572 2.95C3.1032 2.95 2.31482 3.73838 2.31482 4.71089C2.31482 5.68341 3.1032 6.47178 4.07572 6.47178C5.04823 6.47178 5.83661 5.68341 5.83661 4.71089C5.83661 3.73838 5.04823 2.95 4.07572 2.95ZM10.8262 4.05898C9.8198 4.05898 9.00394 4.87484 9.00394 5.88126C9.00394 6.88768 9.8198 7.70355 10.8262 7.70355C11.8326 7.70355 12.6485 6.88768 12.6485 5.88126C12.6485 4.87484 11.8326 4.05898 10.8262 4.05898Z"
  }));
}
var roomSelector = (state) => state.room;
var MultiplayerMenu = React77.memo(function MultiplayerMenu2() {
  const app = useTldrawApp();
  const room = app.useStore(roomSelector);
  const [copied, setCopied] = React77.useState(false);
  const rTimeout = React77.useRef(0);
  const handleCopySelect = React77.useCallback(() => {
    setCopied(true);
    TLDR.copyStringToClipboard(window.location.href);
    clearTimeout(rTimeout.current);
    rTimeout.current = setTimeout(() => setCopied(false), 1200);
  }, []);
  const handleCopyReadOnlySelect = React77.useCallback(() => {
    setCopied(true);
    const segs = window.location.href.split("/");
    segs[segs.length - 2] = "v";
    segs[segs.length - 1] = Utils.lns(segs[segs.length - 1]);
    TLDR.copyStringToClipboard(segs.join("/"));
    clearTimeout(rTimeout.current);
    rTimeout.current = setTimeout(() => setCopied(false), 1200);
  }, []);
  const handleCreateMultiplayerProject = React77.useCallback(() => __async2(this, null, function* () {
    if (app.isDirty) {
      if (app.fileSystemHandle) {
        if (window.confirm("Do you want to save changes to your current project?")) {
          yield app.saveProject();
        }
      } else {
        if (window.confirm("Do you want to save your current project?")) {
          yield app.saveProject();
        }
      }
    } else if (!app.fileSystemHandle) {
      if (window.confirm("Do you want to save your current project?")) {
        yield app.saveProject();
      }
    }
  }), []);
  const handleCopyToMultiplayerProject = React77.useCallback(() => __async2(this, null, function* () {
    var _a3;
    const nextDocument = Utils.deepClone(app.document);
    app.setIsLoading(true);
    try {
      if (app.callbacks.onAssetUpload) {
        for (const id in nextDocument.assets) {
          const asset = nextDocument.assets[id];
          if (asset.src.includes("base64")) {
            const file = dataURLtoFile(asset.src, ((_a3 = asset.fileName) != null ? _a3 : asset.type === "video") ? "image.png" : "image.mp4");
            const newSrc = yield app.callbacks.onAssetUpload(app, file, id);
            if (newSrc) {
              asset.src = newSrc;
            } else {
              asset.src = "";
            }
          }
        }
      }
      const result = yield fetch(`/api/create`, {
        method: "POST",
        mode: "no-cors",
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          roomId: Utils.uniqueId(),
          pageId: app.currentPageId,
          document: nextDocument
        })
      }).then((d8) => d8.json());
      if (result == null ? void 0 : result.url) {
        window.location.href = result.url;
      } else {
        TLDR.warn(result == null ? void 0 : result.message);
      }
    } catch (e13) {
      TLDR.warn(e13.message);
    }
    app.setIsLoading(false);
  }), []);
  return /* @__PURE__ */ React77.createElement(Root5, {
    dir: "ltr"
  }, /* @__PURE__ */ React77.createElement(DMTriggerIcon, {
    id: "TD-MultiplayerMenuIcon",
    isActive: !!room
  }, /* @__PURE__ */ React77.createElement(MultiplayerIcon2, null)), /* @__PURE__ */ React77.createElement(DMContent, {
    variant: "menu",
    align: "start",
    id: "TD-MultiplayerMenu"
  }, /* @__PURE__ */ React77.createElement(DMItem, {
    id: "TD-Multiplayer-CopyInviteLink",
    onClick: handleCopySelect,
    disabled: !room
  }, /* @__PURE__ */ React77.createElement(message_default, {
    id: "copy.invite.link"
  }), /* @__PURE__ */ React77.createElement(SmallIcon, null, copied ? /* @__PURE__ */ React77.createElement(CheckIcon, null) : /* @__PURE__ */ React77.createElement(ClipboardIcon, null))), /* @__PURE__ */ React77.createElement(DMItem, {
    id: "TD-Multiplayer-CopyReadOnlyLink",
    onClick: handleCopyReadOnlySelect,
    disabled: !room
  }, /* @__PURE__ */ React77.createElement(message_default, {
    id: "copy.readonly.link"
  }), /* @__PURE__ */ React77.createElement(SmallIcon, null, copied ? /* @__PURE__ */ React77.createElement(CheckIcon, null) : /* @__PURE__ */ React77.createElement(ClipboardIcon, null))), /* @__PURE__ */ React77.createElement(DMDivider, {
    id: "TD-Multiplayer-CopyInviteLinkDivider"
  }), /* @__PURE__ */ React77.createElement(DMItem, {
    id: "TD-Multiplayer-CreateMultiplayerProject",
    onClick: handleCreateMultiplayerProject
  }, /* @__PURE__ */ React77.createElement("a", {
    href: "https://tldraw.com/r"
  }, /* @__PURE__ */ React77.createElement(message_default, {
    id: "create.multiplayer.project"
  }))), /* @__PURE__ */ React77.createElement(DMItem, {
    id: "TD-Multiplayer-CopyToMultiplayerProject",
    onClick: handleCopyToMultiplayerProject
  }, /* @__PURE__ */ React77.createElement(message_default, {
    id: "copy.multiplayer.project"
  }))));
});
function dataURLtoFile(dataurl, filename) {
  var _a3, _b;
  const arr = dataurl.split(",");
  const mime = (_b = (_a3 = arr[0]) == null ? void 0 : _a3.match(/:(.*?);/)) == null ? void 0 : _b[1];
  const bstr = window.atob(arr[1]);
  let n6 = bstr.length;
  const u8arr = new Uint8Array(n6);
  while (n6--) {
    u8arr[n6] = bstr.charCodeAt(n6);
  }
  return new File([u8arr], filename, { type: mime });
}
function TopPanel({
  readOnly,
  showPages,
  showMenu,
  showStyles,
  showZoom,
  sponsor,
  showMultiplayerMenu
}) {
  const app = useTldrawApp();
  return /* @__PURE__ */ React78.createElement(StyledTopPanel, null, (showMenu || showPages) && /* @__PURE__ */ React78.createElement(Panel, {
    side: "left",
    id: "TD-MenuPanel"
  }, showMenu && /* @__PURE__ */ React78.createElement(Menu2, {
    sponsor,
    readOnly
  }), showMultiplayerMenu && /* @__PURE__ */ React78.createElement(MultiplayerMenu, null), showPages && /* @__PURE__ */ React78.createElement(PageMenu, null)), /* @__PURE__ */ React78.createElement(StyledSpacer, null), (showStyles || showZoom) && /* @__PURE__ */ React78.createElement(Panel, {
    side: "right"
  }, app.readOnly ? /* @__PURE__ */ React78.createElement(ReadOnlyLabel, null, "Read Only") : /* @__PURE__ */ React78.createElement(React78.Fragment, null, " ", /* @__PURE__ */ React78.createElement(ToolButton, null, /* @__PURE__ */ React78.createElement(UndoIcon, {
    onClick: app.undo
  })), /* @__PURE__ */ React78.createElement(ToolButton, null, /* @__PURE__ */ React78.createElement(RedoIcon, {
    onClick: app.redo
  }))), showZoom && /* @__PURE__ */ React78.createElement(ZoomMenu, null), showStyles && !readOnly && /* @__PURE__ */ React78.createElement(StyleMenu, null)));
}
var StyledTopPanel = styled("div", {
  width: "100%",
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  display: "flex",
  flexDirection: "row",
  pointerEvents: "none",
  "& > *": {
    pointerEvents: "all"
  }
});
var StyledSpacer = styled("div", {
  flexGrow: 2,
  pointerEvents: "none"
});
var ReadOnlyLabel = styled("div", {
  width: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  fontFamily: "$ui",
  fontSize: "$1",
  paddingLeft: "$4",
  paddingRight: "$1",
  userSelect: "none"
});
var numberOfSelectedIdsSelector2 = (s9) => {
  return s9.document.pageStates[s9.appState.currentPageId].selectedIds.length;
};
var isDebugModeSelector4 = (s9) => {
  return s9.settings.isDebugMode;
};
var hasGroupSelectedSelector = (s9) => {
  return s9.document.pageStates[s9.appState.currentPageId].selectedIds.some((id) => s9.document.pages[s9.appState.currentPageId].shapes[id].children !== void 0);
};
var preventDefault = (e13) => e13.stopPropagation();
var ContextMenu2 = ({ onBlur, children }) => {
  return /* @__PURE__ */ React79.createElement(Root11, {
    dir: "ltr"
  }, /* @__PURE__ */ React79.createElement(Trigger6, {
    dir: "ltr"
  }, children), /* @__PURE__ */ React79.createElement(InnerMenu, {
    onBlur
  }));
};
var InnerMenu = React79.memo(function InnerMenu2({ onBlur }) {
  const app = useTldrawApp();
  const intl = useIntl();
  const numberOfSelectedIds = app.useStore(numberOfSelectedIdsSelector2);
  const isDebugMode = app.useStore(isDebugModeSelector4);
  const hasGroupSelected = app.useStore(hasGroupSelectedSelector);
  const rContent = React79.useRef(null);
  const handleFlipHorizontal = React79.useCallback(() => {
    app.flipHorizontal();
  }, [app]);
  const handleFlipVertical = React79.useCallback(() => {
    app.flipVertical();
  }, [app]);
  const handleDuplicate = React79.useCallback(() => {
    app.duplicate();
  }, [app]);
  const handleLock = React79.useCallback(() => {
    app.toggleLocked();
  }, [app]);
  const handleGroup = React79.useCallback(() => {
    app.group();
  }, [app]);
  const handleMoveToBack = React79.useCallback(() => {
    app.moveToBack();
  }, [app]);
  const handleMoveBackward = React79.useCallback(() => {
    app.moveBackward();
  }, [app]);
  const handleMoveForward = React79.useCallback(() => {
    app.moveForward();
  }, [app]);
  const handleMoveToFront = React79.useCallback(() => {
    app.moveToFront();
  }, [app]);
  const handleDelete = React79.useCallback(() => {
    app.delete();
  }, [app]);
  const handleCut = React79.useCallback(() => {
    app.cut();
  }, [app]);
  const handleCopy = React79.useCallback(() => {
    app.copy();
  }, [app]);
  const handlePaste = React79.useCallback(() => {
    app.paste();
  }, [app]);
  const handleCopySVG = React79.useCallback(() => {
    app.copyImage("svg", { scale: 1, quality: 1, transparentBackground: false });
  }, [app]);
  const handleCopyPNG = React79.useCallback(() => {
    app.copyImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }, [app]);
  const handleUndo = React79.useCallback(() => {
    app.undo();
  }, [app]);
  const handleRedo = React79.useCallback(() => {
    app.redo();
  }, [app]);
  const handleExportPNG = React79.useCallback(() => __async2(this, null, function* () {
    app.exportImage("png", { scale: 2, quality: 1, transparentBackground: true });
  }), [app]);
  const handleExportJPG = React79.useCallback(() => __async2(this, null, function* () {
    app.exportImage("jpeg", { scale: 2, quality: 1, transparentBackground: false });
  }), [app]);
  const handleExportWEBP = React79.useCallback(() => __async2(this, null, function* () {
    app.exportImage("webp", { scale: 2, quality: 1, transparentBackground: false });
  }), [app]);
  const handleExportSVG = React79.useCallback(() => __async2(this, null, function* () {
    app.exportImage("svg", { scale: 1, quality: 1, transparentBackground: false });
  }), [app]);
  const handleCopyJSON = React79.useCallback(() => __async2(this, null, function* () {
    app.copyJson();
  }), [app]);
  const handleExportJSON = React79.useCallback(() => __async2(this, null, function* () {
    app.exportJson();
  }), [app]);
  const hasSelection = numberOfSelectedIds > 0;
  const hasTwoOrMore = numberOfSelectedIds > 1;
  const hasThreeOrMore = numberOfSelectedIds > 2;
  return /* @__PURE__ */ React79.createElement(Content8, {
    dir: "ltr",
    ref: rContent,
    onEscapeKeyDown: preventDefault,
    asChild: true,
    tabIndex: -1,
    onBlur
  }, /* @__PURE__ */ React79.createElement(MenuContent2, {
    id: "TD-ContextMenu"
  }, hasSelection ? /* @__PURE__ */ React79.createElement(React79.Fragment, null, /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleDuplicate,
    kbd: "#D",
    id: "TD-ContextMenu-Duplicate"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "duplicate"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleFlipHorizontal,
    kbd: "\u21E7H",
    id: "TD-ContextMenu-Flip_Horizontal"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "flip.horizontal"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleFlipVertical,
    kbd: "\u21E7V",
    id: "TD-ContextMenu-Flip_Vertical"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "flip.vertical"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleLock,
    kbd: "#\u21E7L",
    id: "TD-ContextMenu- Lock_Unlock"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "lock"
  }), " / ", /* @__PURE__ */ React79.createElement(message_default, {
    id: "unlock"
  })), (hasTwoOrMore || hasGroupSelected) && /* @__PURE__ */ React79.createElement(Divider, null), hasTwoOrMore && /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleGroup,
    kbd: "#G",
    id: "TD-ContextMenu-Group"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "group"
  })), hasGroupSelected && /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleGroup,
    kbd: "#G",
    id: "TD-ContextMenu-Ungroup"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "ungroup"
  })), /* @__PURE__ */ React79.createElement(Divider, null), /* @__PURE__ */ React79.createElement(ContextMenuSubMenu, {
    label: intl.formatMessage({ id: "move" }),
    id: "TD-ContextMenu-Move"
  }, /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleMoveToFront,
    kbd: "\u21E7]",
    id: "TD-ContextMenu-Move-To_Front"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "to.front"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleMoveForward,
    kbd: "]",
    id: "TD-ContextMenu-Move-Forward"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "forward"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleMoveBackward,
    kbd: "[",
    id: "TD-ContextMenu-Move-Backward"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "backward"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleMoveToBack,
    kbd: "\u21E7[",
    id: "TD-ContextMenu-Move-To_Back"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "back"
  }))), /* @__PURE__ */ React79.createElement(MoveToPageMenu, null), hasTwoOrMore && /* @__PURE__ */ React79.createElement(AlignDistributeSubMenu, {
    hasTwoOrMore,
    hasThreeOrMore
  }), /* @__PURE__ */ React79.createElement(Divider, null), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleCut,
    kbd: "#X",
    id: "TD-ContextMenu-Cut"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "cut"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleCopy,
    kbd: "#C",
    id: "TD-ContextMenu-Copy"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "copy"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handlePaste,
    kbd: "#V",
    id: "TD-ContextMenu-Paste"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "paste"
  })), /* @__PURE__ */ React79.createElement(Divider, null), /* @__PURE__ */ React79.createElement(ContextMenuSubMenu, {
    label: `${intl.formatMessage({ id: "copy.as" })}...`,
    size: "small",
    id: "TD-ContextMenu-Copy-As"
  }, /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleCopySVG,
    id: "TD-ContextMenu-Copy-as-SVG"
  }, "SVG"), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleCopyPNG,
    id: "TD-ContextMenu-Copy-As-PNG"
  }, "PNG"), isDebugMode && /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleCopyJSON,
    id: "TD-ContextMenu-Copy_as_JSON"
  }, "JSON")), /* @__PURE__ */ React79.createElement(ContextMenuSubMenu, {
    label: `${intl.formatMessage({ id: "export.as" })}...`,
    size: "small",
    id: "TD-ContextMenu-Export"
  }, /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleExportSVG,
    id: "TD-ContextMenu-Export-SVG"
  }, "SVG"), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleExportPNG,
    id: "TD-ContextMenu-Export-PNG"
  }, "PNG"), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleExportJPG,
    id: "TD-ContextMenu-Export-JPG"
  }, "JPG"), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleExportWEBP,
    id: "TD-ContextMenu-Export-WEBP"
  }, "WEBP"), isDebugMode && /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleExportJSON,
    id: "TD-ContextMenu-Export-JSON"
  }, "JSON")), /* @__PURE__ */ React79.createElement(Divider, null), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleDelete,
    kbd: "\u232B",
    id: "TD-ContextMenu-Delete"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "delete"
  }))) : /* @__PURE__ */ React79.createElement(React79.Fragment, null, /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handlePaste,
    kbd: "#V",
    id: "TD-ContextMenu-Paste"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "paste"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleUndo,
    kbd: "#Z",
    id: "TD-ContextMenu-Undo"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "undo"
  })), /* @__PURE__ */ React79.createElement(CMRowButton, {
    onClick: handleRedo,
    kbd: "#\u21E7Z",
    id: "TD-ContextMenu-Redo"
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "redo"
  })))));
});
function AlignDistributeSubMenu({
  hasThreeOrMore
}) {
  const app = useTldrawApp();
  const alignTop = React79.useCallback(() => {
    app.align("top");
  }, [app]);
  const alignCenterVertical = React79.useCallback(() => {
    app.align("centerVertical");
  }, [app]);
  const alignBottom = React79.useCallback(() => {
    app.align("bottom");
  }, [app]);
  const stretchVertically = React79.useCallback(() => {
    app.stretch("vertical");
  }, [app]);
  const distributeVertically = React79.useCallback(() => {
    app.distribute("vertical");
  }, [app]);
  const alignLeft = React79.useCallback(() => {
    app.align("left");
  }, [app]);
  const alignCenterHorizontal = React79.useCallback(() => {
    app.align("centerHorizontal");
  }, [app]);
  const alignRight = React79.useCallback(() => {
    app.align("right");
  }, [app]);
  const stretchHorizontally = React79.useCallback(() => {
    app.stretch("horizontal");
  }, [app]);
  const distributeHorizontally = React79.useCallback(() => {
    app.distribute("horizontal");
  }, [app]);
  return /* @__PURE__ */ React79.createElement("span", {
    id: "TD-ContextMenu-Align_Duplicate"
  }, /* @__PURE__ */ React79.createElement(Root11, {
    dir: "ltr"
  }, /* @__PURE__ */ React79.createElement(CMTriggerButton, {
    isSubmenu: true
  }, "Align / Distribute"), /* @__PURE__ */ React79.createElement(Content8, {
    asChild: true,
    sideOffset: 2,
    alignOffset: -2
  }, /* @__PURE__ */ React79.createElement(StyledGridContent, {
    numberOfSelected: hasThreeOrMore ? "threeOrMore" : "twoOrMore"
  }, /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignLeft,
    id: "TD-ContextMenu-Align_Duplicate-AlignLeft"
  }, /* @__PURE__ */ React79.createElement(AlignLeftIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignCenterHorizontal,
    id: "TD-ContextMenu-Align_Duplicate-AlignCenterHorizontal"
  }, /* @__PURE__ */ React79.createElement(AlignCenterHorizontallyIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignRight,
    id: "TD-ContextMenu-Align_Duplicate-AlignRight"
  }, /* @__PURE__ */ React79.createElement(AlignRightIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: stretchHorizontally,
    id: "TD-ContextMenu-Align_Duplicate-StretchHorizontal"
  }, /* @__PURE__ */ React79.createElement(StretchHorizontallyIcon, null)), hasThreeOrMore && /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: distributeHorizontally,
    id: "TD-ContextMenu-Align_Duplicate-SpaceEvenlyHorizontal"
  }, /* @__PURE__ */ React79.createElement(SpaceEvenlyHorizontallyIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignTop,
    id: "TD-ContextMenu-Align_Duplicate-AlignTop"
  }, /* @__PURE__ */ React79.createElement(AlignTopIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignCenterVertical,
    id: "TD-ContextMenu-Align_Duplicate-AlignCenterVertical"
  }, /* @__PURE__ */ React79.createElement(AlignCenterVerticallyIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: alignBottom,
    id: "TD-ContextMenu-Align_Duplicate-AlignBottom"
  }, /* @__PURE__ */ React79.createElement(AlignBottomIcon, null)), /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: stretchVertically,
    id: "TD-ContextMenu-Align_Duplicate-StretchVertical"
  }, /* @__PURE__ */ React79.createElement(StretchVerticallyIcon, null)), hasThreeOrMore && /* @__PURE__ */ React79.createElement(CMIconButton, {
    onClick: distributeVertically,
    id: "TD-ContextMenu-Align_Duplicate-SpaceEvenlyVertical"
  }, /* @__PURE__ */ React79.createElement(SpaceEvenlyVerticallyIcon, null)), /* @__PURE__ */ React79.createElement(CMArrow, {
    offset: 13
  })))));
}
var StyledGridContent = styled(MenuContent2, {
  display: "grid",
  variants: {
    numberOfSelected: {
      threeOrMore: {
        gridTemplateColumns: "repeat(5, auto)"
      },
      twoOrMore: {
        gridTemplateColumns: "repeat(4, auto)"
      }
    }
  }
});
var currentPageIdSelector2 = (s9) => s9.appState.currentPageId;
var documentPagesSelector = (s9) => s9.document.pages;
function MoveToPageMenu() {
  const app = useTldrawApp();
  const currentPageId = app.useStore(currentPageIdSelector2);
  const documentPages = app.useStore(documentPagesSelector);
  const sorted = Object.values(documentPages).sort((a6, b7) => (a6.childIndex || 0) - (b7.childIndex || 0)).filter((a6) => a6.id !== currentPageId);
  if (sorted.length === 0)
    return null;
  return /* @__PURE__ */ React79.createElement(Root11, {
    dir: "ltr"
  }, /* @__PURE__ */ React79.createElement(CMTriggerButton, {
    isSubmenu: true
  }, /* @__PURE__ */ React79.createElement(message_default, {
    id: "move.to.page"
  })), /* @__PURE__ */ React79.createElement(Content8, {
    dir: "ltr",
    sideOffset: 2,
    alignOffset: -2,
    asChild: true
  }, /* @__PURE__ */ React79.createElement(MenuContent2, null, sorted.map(({ id, name }, i7) => /* @__PURE__ */ React79.createElement(CMRowButton, {
    key: id,
    disabled: id === currentPageId,
    onClick: () => app.moveToPage(id)
  }, name || `Page ${i7}`)), /* @__PURE__ */ React79.createElement(CMArrow, {
    offset: 13
  }))));
}
function ContextMenuSubMenu({ children, label, size, id }) {
  return /* @__PURE__ */ React79.createElement("span", {
    id
  }, /* @__PURE__ */ React79.createElement(Root11, {
    dir: "ltr"
  }, /* @__PURE__ */ React79.createElement(CMTriggerButton, {
    isSubmenu: true
  }, label), /* @__PURE__ */ React79.createElement(Content8, {
    dir: "ltr",
    sideOffset: 2,
    alignOffset: -2,
    asChild: true
  }, /* @__PURE__ */ React79.createElement(MenuContent2, {
    size
  }, children, /* @__PURE__ */ React79.createElement(CMArrow, {
    offset: 13
  })))));
}
var CMArrow = styled(ContextMenuArrow, {
  fill: "$panel"
});
function CMIconButton(_a3) {
  var _b = _a3, { onSelect } = _b, rest = __objRest3(_b, ["onSelect"]);
  return /* @__PURE__ */ React79.createElement(ContextMenuItem, {
    dir: "ltr",
    onSelect,
    asChild: true
  }, /* @__PURE__ */ React79.createElement(ToolButton, __spreadValues4({}, rest)));
}
var CMRowButton = (_a3) => {
  var _b = _a3, { id } = _b, rest = __objRest3(_b, ["id"]);
  return /* @__PURE__ */ React79.createElement(ContextMenuItem, {
    asChild: true,
    id
  }, /* @__PURE__ */ React79.createElement(RowButton, __spreadValues4({}, rest)));
};
var CMTriggerButton = (_a3) => {
  var _b = _a3, { isSubmenu } = _b, rest = __objRest3(_b, ["isSubmenu"]);
  return /* @__PURE__ */ React79.createElement(ContextMenuTriggerItem, {
    asChild: true
  }, /* @__PURE__ */ React79.createElement(RowButton, __spreadValues4({
    hasArrow: isSubmenu
  }, rest)));
};
function FocusButton({ onSelect }) {
  return /* @__PURE__ */ React80.createElement(StyledButtonContainer, null, /* @__PURE__ */ React80.createElement(IconButton, {
    onClick: onSelect
  }, /* @__PURE__ */ React80.createElement(DotFilledIcon, null)));
}
var StyledButtonContainer = styled("div", {
  opacity: 1,
  zIndex: 100,
  backgroundColor: "transparent",
  "& svg": {
    color: "$text"
  },
  "&:hover svg": {
    color: "$text"
  }
});
var loadingSelector = (s9) => s9.appState.isLoading;
function Loading() {
  const app = useTldrawApp();
  const isLoading = app.useStore(loadingSelector);
  return /* @__PURE__ */ React81.createElement(StyledLoadingPanelContainer, {
    hidden: !isLoading
  }, /* @__PURE__ */ React81.createElement(message_default, {
    id: "loading",
    values: { dots: "..." }
  }));
}
var StyledLoadingPanelContainer = styled("div", {
  position: "absolute",
  top: 0,
  left: "50%",
  transform: `translate(-50%, 0)`,
  borderBottomLeftRadius: "12px",
  borderBottomRightRadius: "12px",
  padding: "8px 16px",
  fontFamily: "var(--fonts-ui)",
  fontSize: "var(--fontSizes-1)",
  boxShadow: "var(--shadows-panel)",
  backgroundColor: "white",
  zIndex: 200,
  pointerEvents: "none",
  "& > div > *": {
    pointerEvents: "all"
  },
  variants: {
    transform: {
      hidden: {
        transform: `translate(-50%, 100%)`
      },
      visible: {
        transform: `translate(-50%, 0%)`
      }
    }
  }
});
function ErrorFallback({ error, resetErrorBoundary }) {
  const app = useTldrawApp();
  const refreshPage = () => {
    window.location.reload();
    resetErrorBoundary();
  };
  const copyError = () => {
    const textarea = document.createElement("textarea");
    textarea.value = error.message;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    textarea.remove();
  };
  const downloadBackup = () => {
    app.saveProjectAs();
  };
  const resetDocument = () => {
    app.resetDocument();
    resetErrorBoundary();
  };
  return /* @__PURE__ */ React822.createElement(Container3, null, /* @__PURE__ */ React822.createElement(InnerContainer, null, /* @__PURE__ */ React822.createElement("div", null, "We've encountered an error!"), /* @__PURE__ */ React822.createElement("pre", null, /* @__PURE__ */ React822.createElement("code", null, error.message)), /* @__PURE__ */ React822.createElement(Buttons, null, /* @__PURE__ */ React822.createElement(RowButton, {
    onClick: copyError
  }, "Copy Error"), /* @__PURE__ */ React822.createElement(RowButton, {
    onClick: refreshPage
  }, "Refresh Page")), /* @__PURE__ */ React822.createElement(Divider, null), /* @__PURE__ */ React822.createElement("p", null, "Keep getting this error?", " ", /* @__PURE__ */ React822.createElement("a", {
    onClick: downloadBackup,
    title: "Download your project"
  }, "Download your project"), " ", "as a backup and then", " ", /* @__PURE__ */ React822.createElement("a", {
    onClick: resetDocument,
    title: "Reset the document"
  }, "reset the document"), ".")));
}
var Container3 = styled("div", {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  backgroundColor: "$canvas"
});
var InnerContainer = styled("div", {
  backgroundColor: "$panel",
  border: "1px solid $panelContrast",
  padding: "$5",
  borderRadius: 8,
  boxShadow: "$panel",
  maxWidth: 320,
  color: "$text",
  fontFamily: "$ui",
  fontSize: "$2",
  textAlign: "center",
  display: "flex",
  flexDirection: "column",
  gap: "$3",
  "& > pre": {
    marginTop: "$3",
    marginBottom: "$3",
    textAlign: "left",
    whiteSpace: "pre-wrap",
    backgroundColor: "$hover",
    padding: "$4",
    borderRadius: "$2",
    fontFamily: '"Menlo", "Monaco", monospace',
    fontWeight: 500
  },
  "& p": {
    fontFamily: "$body",
    lineHeight: 1.7,
    padding: "$5",
    margin: 0
  },
  "& a": {
    color: "$text",
    cursor: "pointer",
    textDecoration: "underline"
  },
  "& hr": {
    marginLeft: "-$5",
    marginRight: "-$5"
  }
});
var Buttons = styled("div", {
  display: "flex",
  "& > button > div": {
    justifyContent: "center",
    textAlign: "center"
  }
});
var ErrorBoundary = import_react_error_boundary.ErrorBoundary;
function Tldraw({
  id,
  document: document2,
  currentPageId,
  autofocus = true,
  showMenu = true,
  showMultiplayerMenu = true,
  showPages = true,
  showTools = true,
  showZoom = true,
  showStyles = true,
  showUI = true,
  readOnly = false,
  disableAssets = false,
  darkMode = false,
  showSponsorLink,
  onMount,
  onChange,
  onChangePresence,
  onNewProject,
  onSaveProject,
  onSaveProjectAs,
  onOpenProject,
  onOpenMedia,
  onSignOut,
  onSignIn,
  onUndo,
  onRedo,
  onPersist,
  onPatch,
  onCommand,
  onChangePage,
  onAssetCreate,
  onAssetDelete,
  onAssetUpload,
  onSessionStart,
  onSessionEnd,
  onExport
}) {
  const [sId, setSId] = React83.useState(id);
  const [app, setApp] = React83.useState(() => {
    const app2 = new TldrawApp(id, {
      onMount,
      onChange,
      onChangePresence,
      onNewProject,
      onSaveProject,
      onSaveProjectAs,
      onOpenProject,
      onOpenMedia,
      onSignOut,
      onSignIn,
      onUndo,
      onRedo,
      onPersist,
      onPatch,
      onCommand,
      onChangePage,
      onAssetDelete,
      onAssetCreate,
      onAssetUpload,
      onSessionStart,
      onSessionEnd
    });
    return app2;
  });
  React83.useLayoutEffect(() => {
    if (id === sId)
      return;
    const newApp = new TldrawApp(id, {
      onMount,
      onChange,
      onChangePresence,
      onNewProject,
      onSaveProject,
      onSaveProjectAs,
      onOpenProject,
      onOpenMedia,
      onSignOut,
      onSignIn,
      onUndo,
      onRedo,
      onPersist,
      onPatch,
      onCommand,
      onChangePage,
      onAssetDelete,
      onAssetCreate,
      onAssetUpload,
      onExport,
      onSessionStart,
      onSessionEnd
    });
    setSId(id);
    setApp(newApp);
  }, [sId, id]);
  React83.useEffect(() => {
    if (!document2)
      return;
    if (document2.id === app.document.id) {
      app.updateDocument(document2);
    } else {
      app.loadDocument(document2);
    }
  }, [document2, app]);
  React83.useEffect(() => {
    app.setDisableAssets(disableAssets);
  }, [app, disableAssets]);
  React83.useEffect(() => {
    if (!currentPageId)
      return;
    app.changePage(currentPageId);
  }, [currentPageId, app]);
  React83.useEffect(() => {
    app.readOnly = readOnly;
    if (!readOnly) {
      app.selectNone();
      app.cancelSession();
      app.setEditingId();
    }
  }, [app, readOnly]);
  React83.useEffect(() => {
    if (darkMode !== app.settings.isDarkMode) {
      app.toggleDarkMode();
    }
  }, [app, darkMode]);
  React83.useEffect(() => {
    app.callbacks = {
      onMount,
      onChange,
      onChangePresence,
      onNewProject,
      onSaveProject,
      onSaveProjectAs,
      onOpenProject,
      onOpenMedia,
      onSignOut,
      onSignIn,
      onUndo,
      onRedo,
      onPersist,
      onPatch,
      onCommand,
      onChangePage,
      onAssetDelete,
      onAssetCreate,
      onAssetUpload,
      onExport,
      onSessionStart,
      onSessionEnd
    };
  }, [
    onMount,
    onChange,
    onChangePresence,
    onNewProject,
    onSaveProject,
    onSaveProjectAs,
    onOpenProject,
    onOpenMedia,
    onSignOut,
    onSignIn,
    onUndo,
    onRedo,
    onPersist,
    onPatch,
    onCommand,
    onChangePage,
    onAssetDelete,
    onAssetCreate,
    onAssetUpload,
    onExport,
    onSessionStart,
    onSessionEnd
  ]);
  React83.useLayoutEffect(() => {
    var _a3;
    if (typeof window === "undefined")
      return;
    if (!((_a3 = window.document) == null ? void 0 : _a3.fonts))
      return;
    function refreshBoundingBoxes() {
      app.refreshBoundingBoxes();
    }
    window.document.fonts.addEventListener("loadingdone", refreshBoundingBoxes);
    return () => {
      window.document.fonts.removeEventListener("loadingdone", refreshBoundingBoxes);
    };
  }, [app]);
  return /* @__PURE__ */ React83.createElement(TldrawContext.Provider, {
    value: app
  }, /* @__PURE__ */ React83.createElement(InnerTldraw, {
    key: sId || "Tldraw",
    id: sId,
    autofocus,
    showPages,
    showMenu,
    showMultiplayerMenu,
    showStyles,
    showZoom,
    showTools,
    showUI,
    showSponsorLink,
    readOnly
  }));
}
var InnerTldraw = React83.memo(function InnerTldraw2({
  id,
  autofocus,
  showPages,
  showMenu,
  showMultiplayerMenu,
  showZoom,
  showStyles,
  showTools,
  showSponsorLink,
  readOnly,
  showUI
}) {
  var _a3, _b;
  const app = useTldrawApp();
  const rWrapper = React83.useRef(null);
  const state = app.useStore();
  const { document: document2, settings, appState, room } = state;
  const isSelecting = state.appState.activeTool === "select";
  const page7 = document2.pages[appState.currentPageId];
  const pageState = document2.pageStates[page7.id];
  const assets = document2.assets;
  const { selectedIds } = pageState;
  const isHideBoundsShape = selectedIds.length === 1 && page7.shapes[selectedIds[0]] && TLDR.getShapeUtil(page7.shapes[selectedIds[0]].type).hideBounds;
  const isHideResizeHandlesShape = selectedIds.length === 1 && page7.shapes[selectedIds[0]] && TLDR.getShapeUtil(page7.shapes[selectedIds[0]].type).hideResizeHandles;
  const meta = React83.useMemo(() => {
    return { isDarkMode: settings.isDarkMode };
  }, [settings.isDarkMode]);
  const showDashedBrush = settings.isCadSelectMode ? !appState.selectByContain : appState.selectByContain;
  const theme = React83.useMemo(() => {
    const { selectByContain } = appState;
    const { isDarkMode, isCadSelectMode } = settings;
    if (isDarkMode) {
      const brushBase2 = isCadSelectMode ? selectByContain ? "69, 155, 255" : "105, 209, 73" : "180, 180, 180";
      return {
        brushFill: `rgba(${brushBase2}, ${isCadSelectMode ? 0.08 : 0.05})`,
        brushStroke: `rgba(${brushBase2}, ${isCadSelectMode ? 0.5 : 0.25})`,
        brushDashStroke: `rgba(${brushBase2}, .6)`,
        selected: "rgba(38, 150, 255, 1.000)",
        selectFill: "rgba(38, 150, 255, 0.05)",
        background: "#212529",
        foreground: "#49555f"
      };
    }
    const brushBase = isCadSelectMode ? selectByContain ? "0, 89, 242" : "51, 163, 23" : "0,0,0";
    return {
      brushFill: `rgba(${brushBase}, ${isCadSelectMode ? 0.08 : 0.05})`,
      brushStroke: `rgba(${brushBase}, ${isCadSelectMode ? 0.4 : 0.25})`,
      brushDashStroke: `rgba(${brushBase}, .6)`
    };
  }, [settings.isDarkMode, settings.isCadSelectMode, appState.selectByContain]);
  const isInSession = app.session !== void 0;
  const hideBounds = isInSession && ((_a3 = app.session) == null ? void 0 : _a3.constructor.name) !== "BrushSession" || !isSelecting || isHideBoundsShape || !!pageState.editingId;
  const hideHandles = isInSession || !isSelecting;
  const hideIndicators = isInSession && state.appState.status !== "brushing" || !isSelecting;
  const hideCloneHandles = isInSession || !isSelecting || !settings.showCloneHandles || pageState.camera.zoom < 0.2;
  const translation = useTranslation(settings.language);
  React83.useLayoutEffect(() => {
    if (settings.isDarkMode) {
      window.document.body.classList.add(dark);
    } else {
      window.document.body.classList.remove(dark);
    }
  }, [settings.isDarkMode]);
  return /* @__PURE__ */ React83.createElement(provider_default, {
    locale: translation.locale,
    messages: translation.messages
  }, /* @__PURE__ */ React83.createElement(StyledLayout, {
    ref: rWrapper,
    tabIndex: -0
  }, /* @__PURE__ */ React83.createElement(Loading, null), /* @__PURE__ */ React83.createElement(OneOff, {
    focusableRef: rWrapper,
    autofocus
  }), /* @__PURE__ */ React83.createElement(ContextMenu2, null, /* @__PURE__ */ React83.createElement(ErrorBoundary, {
    FallbackComponent: ErrorFallback
  }, /* @__PURE__ */ React83.createElement(Renderer, {
    id,
    containerRef: rWrapper,
    shapeUtils,
    page: page7,
    pageState,
    assets,
    snapLines: appState.snapLines,
    eraseLine: appState.eraseLine,
    grid: GRID_SIZE,
    users: room == null ? void 0 : room.users,
    userId: room == null ? void 0 : room.userId,
    theme,
    meta,
    hideBounds,
    hideHandles,
    hideResizeHandles: isHideResizeHandlesShape,
    hideIndicators,
    hideBindingHandles: !settings.showBindingHandles,
    hideCloneHandles,
    hideRotateHandles: !settings.showRotateHandles,
    hideGrid: !settings.showGrid,
    showDashedBrush,
    performanceMode: (_b = app.session) == null ? void 0 : _b.performanceMode,
    onPinchStart: app.onPinchStart,
    onPinchEnd: app.onPinchEnd,
    onPinch: app.onPinch,
    onPan: app.onPan,
    onZoom: app.onZoom,
    onPointerDown: app.onPointerDown,
    onPointerMove: app.onPointerMove,
    onPointerUp: app.onPointerUp,
    onPointCanvas: app.onPointCanvas,
    onDoubleClickCanvas: app.onDoubleClickCanvas,
    onRightPointCanvas: app.onRightPointCanvas,
    onDragCanvas: app.onDragCanvas,
    onReleaseCanvas: app.onReleaseCanvas,
    onPointShape: app.onPointShape,
    onDoubleClickShape: app.onDoubleClickShape,
    onRightPointShape: app.onRightPointShape,
    onDragShape: app.onDragShape,
    onHoverShape: app.onHoverShape,
    onUnhoverShape: app.onUnhoverShape,
    onReleaseShape: app.onReleaseShape,
    onPointBounds: app.onPointBounds,
    onDoubleClickBounds: app.onDoubleClickBounds,
    onRightPointBounds: app.onRightPointBounds,
    onDragBounds: app.onDragBounds,
    onHoverBounds: app.onHoverBounds,
    onUnhoverBounds: app.onUnhoverBounds,
    onReleaseBounds: app.onReleaseBounds,
    onPointBoundsHandle: app.onPointBoundsHandle,
    onDoubleClickBoundsHandle: app.onDoubleClickBoundsHandle,
    onRightPointBoundsHandle: app.onRightPointBoundsHandle,
    onDragBoundsHandle: app.onDragBoundsHandle,
    onHoverBoundsHandle: app.onHoverBoundsHandle,
    onUnhoverBoundsHandle: app.onUnhoverBoundsHandle,
    onReleaseBoundsHandle: app.onReleaseBoundsHandle,
    onPointHandle: app.onPointHandle,
    onDoubleClickHandle: app.onDoubleClickHandle,
    onRightPointHandle: app.onRightPointHandle,
    onDragHandle: app.onDragHandle,
    onHoverHandle: app.onHoverHandle,
    onUnhoverHandle: app.onUnhoverHandle,
    onReleaseHandle: app.onReleaseHandle,
    onError: app.onError,
    onRenderCountChange: app.onRenderCountChange,
    onShapeChange: app.onShapeChange,
    onShapeBlur: app.onShapeBlur,
    onShapeClone: app.onShapeClone,
    onBoundsChange: app.updateBounds,
    onKeyDown: app.onKeyDown,
    onKeyUp: app.onKeyUp,
    onDragOver: app.onDragOver,
    onDrop: app.onDrop
  }))), showUI && /* @__PURE__ */ React83.createElement(StyledUI, null, settings.isFocusMode ? /* @__PURE__ */ React83.createElement(FocusButton, {
    onSelect: app.toggleFocusMode
  }) : /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement(TopPanel, {
    readOnly,
    showPages,
    showMenu,
    showMultiplayerMenu,
    showStyles,
    showZoom,
    sponsor: showSponsorLink
  }), /* @__PURE__ */ React83.createElement(StyledSpacer2, null), showTools && !readOnly && /* @__PURE__ */ React83.createElement(ToolsPanel, null)))));
});
var OneOff = React83.memo(function OneOff2({
  focusableRef,
  autofocus
}) {
  useKeyboardShortcuts(focusableRef);
  useStylesheet();
  React83.useEffect(() => {
    var _a3;
    if (autofocus) {
      (_a3 = focusableRef.current) == null ? void 0 : _a3.focus();
    }
  }, [autofocus]);
  return null;
});
var StyledLayout = styled("div", {
  position: "absolute",
  height: "100%",
  width: "100%",
  minHeight: 0,
  minWidth: 0,
  maxHeight: "100%",
  maxWidth: "100%",
  overflow: "hidden",
  boxSizing: "border-box",
  outline: "none",
  "& .tl-container": {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    zIndex: 1
  },
  "& input, textarea, button, select, label, button": {
    webkitTouchCallout: "none",
    webkitUserSelect: "none",
    "-webkit-tap-highlight-color": "transparent",
    "tap-highlight-color": "transparent"
  }
});
var StyledUI = styled("div", {
  position: "absolute",
  top: 0,
  left: 0,
  height: "100%",
  width: "100%",
  padding: "8px 8px 0 8px",
  display: "flex",
  alignItems: "flex-start",
  justifyContent: "flex-start",
  pointerEvents: "none",
  zIndex: 2,
  "& > *": {
    pointerEvents: "all"
  }
});
var StyledSpacer2 = styled("div", {
  flexGrow: 2
});

// ../../node_modules/@liveblocks/client/shared.mjs
function errorIf(condition, message) {
  false;
}
function __rest4(s9, e13) {
  var t12 = {};
  for (var p7 in s9)
    Object.prototype.hasOwnProperty.call(s9, p7) && e13.indexOf(p7) < 0 && (t12[p7] = s9[p7]);
  if (s9 != null && typeof Object.getOwnPropertySymbols == "function") {
    var i7 = 0;
    for (p7 = Object.getOwnPropertySymbols(s9); i7 < p7.length; i7++)
      e13.indexOf(p7[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s9, p7[i7]) && (t12[p7[i7]] = s9[p7[i7]]);
  }
  return t12;
}
function assertNever(_value, errmsg) {
  throw new Error(errmsg);
}
function nn(value, errmsg = "Expected value to be non-nullable") {
  return function(condition, errmsg2) {
    if (false) {
      const err = new Error(errmsg2);
      throw err.name = "Assertion failure", err;
    }
  }(value != null, errmsg), value;
}
var ClientMsgCode;
var OpCode;
var CrdtType;
var ServerMsgCode;
var WebsocketCloseCodes;
var OpSource;
function isRootCrdt(crdt) {
  return crdt.type === CrdtType.OBJECT && !isChildCrdt(crdt);
}
function isChildCrdt(crdt) {
  return crdt.parentId !== void 0 && crdt.parentKey !== void 0;
}
function isRoomEventName(value) {
  return value === "my-presence" || value === "others" || value === "event" || value === "error" || value === "connection";
}
function HasParent(node, key) {
  return Object.freeze({ type: "HasParent", node, key });
}
!function(ClientMsgCode2) {
  ClientMsgCode2[ClientMsgCode2.UPDATE_PRESENCE = 100] = "UPDATE_PRESENCE", ClientMsgCode2[ClientMsgCode2.BROADCAST_EVENT = 103] = "BROADCAST_EVENT", ClientMsgCode2[ClientMsgCode2.FETCH_STORAGE = 200] = "FETCH_STORAGE", ClientMsgCode2[ClientMsgCode2.UPDATE_STORAGE = 201] = "UPDATE_STORAGE";
}(ClientMsgCode || (ClientMsgCode = {})), function(OpCode2) {
  OpCode2[OpCode2.INIT = 0] = "INIT", OpCode2[OpCode2.SET_PARENT_KEY = 1] = "SET_PARENT_KEY", OpCode2[OpCode2.CREATE_LIST = 2] = "CREATE_LIST", OpCode2[OpCode2.UPDATE_OBJECT = 3] = "UPDATE_OBJECT", OpCode2[OpCode2.CREATE_OBJECT = 4] = "CREATE_OBJECT", OpCode2[OpCode2.DELETE_CRDT = 5] = "DELETE_CRDT", OpCode2[OpCode2.DELETE_OBJECT_KEY = 6] = "DELETE_OBJECT_KEY", OpCode2[OpCode2.CREATE_MAP = 7] = "CREATE_MAP", OpCode2[OpCode2.CREATE_REGISTER = 8] = "CREATE_REGISTER";
}(OpCode || (OpCode = {})), function(CrdtType2) {
  CrdtType2[CrdtType2.OBJECT = 0] = "OBJECT", CrdtType2[CrdtType2.LIST = 1] = "LIST", CrdtType2[CrdtType2.MAP = 2] = "MAP", CrdtType2[CrdtType2.REGISTER = 3] = "REGISTER";
}(CrdtType || (CrdtType = {})), function(ServerMsgCode2) {
  ServerMsgCode2[ServerMsgCode2.UPDATE_PRESENCE = 100] = "UPDATE_PRESENCE", ServerMsgCode2[ServerMsgCode2.USER_JOINED = 101] = "USER_JOINED", ServerMsgCode2[ServerMsgCode2.USER_LEFT = 102] = "USER_LEFT", ServerMsgCode2[ServerMsgCode2.BROADCASTED_EVENT = 103] = "BROADCASTED_EVENT", ServerMsgCode2[ServerMsgCode2.ROOM_STATE = 104] = "ROOM_STATE", ServerMsgCode2[ServerMsgCode2.INITIAL_STORAGE_STATE = 200] = "INITIAL_STORAGE_STATE", ServerMsgCode2[ServerMsgCode2.UPDATE_STORAGE = 201] = "UPDATE_STORAGE";
}(ServerMsgCode || (ServerMsgCode = {})), function(WebsocketCloseCodes2) {
  WebsocketCloseCodes2[WebsocketCloseCodes2.CLOSE_ABNORMAL = 1006] = "CLOSE_ABNORMAL", WebsocketCloseCodes2[WebsocketCloseCodes2.INVALID_MESSAGE_FORMAT = 4e3] = "INVALID_MESSAGE_FORMAT", WebsocketCloseCodes2[WebsocketCloseCodes2.NOT_ALLOWED = 4001] = "NOT_ALLOWED", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_MESSAGES_PER_SECONDS = 4002] = "MAX_NUMBER_OF_MESSAGES_PER_SECONDS", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS = 4003] = "MAX_NUMBER_OF_CONCURRENT_CONNECTIONS", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP = 4004] = "MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP", WebsocketCloseCodes2[WebsocketCloseCodes2.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM = 4005] = "MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM", WebsocketCloseCodes2[WebsocketCloseCodes2.CLOSE_WITHOUT_RETRY = 4999] = "CLOSE_WITHOUT_RETRY";
}(WebsocketCloseCodes || (WebsocketCloseCodes = {})), function(OpSource2) {
  OpSource2[OpSource2.UNDOREDO_RECONNECT = 0] = "UNDOREDO_RECONNECT", OpSource2[OpSource2.REMOTE = 1] = "REMOTE", OpSource2[OpSource2.ACK = 2] = "ACK";
}(OpSource || (OpSource = {}));
var NoParent = Object.freeze({ type: "NoParent" });
function Orphaned(oldKey) {
  return Object.freeze({ type: "Orphaned", oldKey });
}
var AbstractCrdt = class {
  constructor() {
    this._parent = NoParent;
  }
  _getParentKeyOrThrow() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.key;
      case "NoParent":
        throw new Error("Parent key is missing");
      case "Orphaned":
        return this.parent.oldKey;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  get _doc() {
    return this.__doc;
  }
  get roomId() {
    return this.__doc ? this.__doc.roomId : null;
  }
  get _id() {
    return this.__id;
  }
  get parent() {
    return this._parent;
  }
  get _parentNode() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.node;
      case "NoParent":
      case "Orphaned":
        return null;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  get _parentKey() {
    switch (this.parent.type) {
      case "HasParent":
        return this.parent.key;
      case "NoParent":
        return null;
      case "Orphaned":
        return this.parent.oldKey;
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  _apply(op, _isLocal) {
    return op.type === OpCode.DELETE_CRDT && this.parent.type === "HasParent" ? this.parent.node._detachChild(this) : { modified: false };
  }
  _setParentLink(newParentNode, newParentKey) {
    switch (this.parent.type) {
      case "HasParent":
        if (this.parent.node !== newParentNode)
          throw new Error("Cannot attach parent if it already exist");
        return void (this._parent = HasParent(newParentNode, newParentKey));
      case "Orphaned":
      case "NoParent":
        return void (this._parent = HasParent(newParentNode, newParentKey));
      default:
        return assertNever(this.parent, "Unknown state");
    }
  }
  _attach(id, doc) {
    if (this.__id || this.__doc)
      throw new Error("Cannot attach if CRDT is already attached");
    doc.addItem(id, this), this.__id = id, this.__doc = doc;
  }
  _detach() {
    switch (this.__doc && this.__id && this.__doc.deleteItem(this.__id), this.parent.type) {
      case "HasParent":
        this._parent = Orphaned(this.parent.key);
        break;
      case "NoParent":
        this._parent = NoParent;
        break;
      case "Orphaned":
        this._parent = Orphaned(this.parent.oldKey);
        break;
      default:
        assertNever(this.parent, "Unknown state");
    }
    this.__doc = void 0;
  }
};
var LiveRegister = class extends AbstractCrdt {
  constructor(data) {
    super(), this._data = data;
  }
  get data() {
    return this._data;
  }
  static _deserialize([id, item], _parentToChildren, doc) {
    const register = new LiveRegister(item.data);
    return register._attach(id, doc), register;
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null || parentId == null || parentKey == null)
      throw new Error("Cannot serialize register if parentId or parentKey is undefined");
    return [
      {
        type: OpCode.CREATE_REGISTER,
        opId: doc == null ? void 0 : doc.generateOpId(),
        id: this._id,
        parentId,
        parentKey,
        data: this.data
      }
    ];
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveRegister if parent is missing");
    return {
      type: CrdtType.REGISTER,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key,
      data: this.data
    };
  }
  _attachChild(_op) {
    throw new Error("Method not implemented.");
  }
  _detachChild(_crdt) {
    throw new Error("Method not implemented.");
  }
  _apply(op, isLocal) {
    return super._apply(op, isLocal);
  }
};
function makePosition(before, after) {
  return before != null && after != null ? pos(makePositionFromCodes(posCodes(before), posCodes(after))) : before != null ? function(before2) {
    const result = [], beforeCodes = posCodes(before2);
    for (let i7 = 0; i7 < beforeCodes.length; i7++) {
      const code3 = beforeCodes[i7];
      if (code3 !== 126) {
        result.push(code3 + 1);
        break;
      }
      if (result.push(code3), beforeCodes.length - 1 === i7) {
        result.push(33);
        break;
      }
    }
    return pos(result);
  }(before) : after != null ? function(after2) {
    const result = [], afterCodes = posCodes(after2);
    for (let i7 = 0; i7 < afterCodes.length; i7++) {
      const code3 = afterCodes[i7];
      if (!(code3 <= 33)) {
        result.push(code3 - 1);
        break;
      }
      if (result.push(32), afterCodes.length - 1 === i7) {
        result.push(126);
        break;
      }
    }
    return pos(result);
  }(after) : pos([33]);
}
function makePositionFromCodes(before, after) {
  let index2 = 0;
  const result = [];
  for (; ; ) {
    const beforeDigit = before[index2] || 32, afterDigit = after[index2] || 126;
    if (beforeDigit > afterDigit)
      throw new Error(`Impossible to generate position between ${before} and ${after}`);
    if (beforeDigit === afterDigit) {
      result.push(beforeDigit), index2++;
      continue;
    }
    if (afterDigit - beforeDigit == 1) {
      result.push(beforeDigit), result.push(...makePositionFromCodes(before.slice(index2 + 1), []));
      break;
    }
    const mid = afterDigit + beforeDigit >> 1;
    result.push(mid);
    break;
  }
  return result;
}
function posCodes(str) {
  const codes = [];
  for (let i7 = 0; i7 < str.length; i7++)
    codes.push(str.charCodeAt(i7));
  return codes;
}
function pos(codes) {
  return String.fromCharCode(...codes);
}
function comparePosition(posA, posB) {
  const aCodes = posCodes(posA), bCodes = posCodes(posB), maxLength = Math.max(aCodes.length, bCodes.length);
  for (let i7 = 0; i7 < maxLength; i7++) {
    const a6 = aCodes[i7] == null ? 32 : aCodes[i7], b7 = bCodes[i7] == null ? 32 : bCodes[i7];
    if (a6 !== b7)
      return a6 - b7;
  }
  throw new Error(`Impossible to compare similar position "${posA}" and "${posB}"`);
}
var LiveList = class extends AbstractCrdt {
  constructor(items = []) {
    let position;
    super(), this._items = [], this._implicitlyDeletedItems = /* @__PURE__ */ new Set(), this._unacknowledgedSets = /* @__PURE__ */ new Map();
    for (let i7 = 0; i7 < items.length; i7++) {
      const newPosition = makePosition(position), item = lsonToLiveNode(items[i7]);
      item._setParentLink(this, newPosition), this._items.push(item), position = newPosition;
    }
  }
  static _deserialize([id], parentToChildren, doc) {
    const list = new LiveList();
    list._attach(id, doc);
    const children = parentToChildren.get(id);
    if (children == null)
      return list;
    for (const [id2, crdt] of children) {
      const child = deserialize([id2, crdt], parentToChildren, doc);
      child._setParentLink(list, crdt.parentKey), list._items.push(child), sortListItem(list._items);
    }
    return list;
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const ops = [], op = {
      id: this._id,
      opId: doc == null ? void 0 : doc.generateOpId(),
      type: OpCode.CREATE_LIST,
      parentId,
      parentKey
    };
    ops.push(op);
    for (const item of this._items)
      ops.push(...item._serialize(this._id, item._getParentKeyOrThrow(), doc));
    return ops;
  }
  _indexOfPosition(position) {
    return this._items.findIndex((item) => item._getParentKeyOrThrow() === position);
  }
  _attach(id, doc) {
    super._attach(id, doc);
    for (const item of this._items)
      item._attach(doc.generateId(), doc);
  }
  _detach() {
    super._detach();
    for (const item of this._items)
      item._detach();
  }
  _applySetRemote(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const { id, parentKey: key } = op, child = creationOpToLiveNode(op);
    child._attach(id, this._doc), child._setParentLink(this, key);
    const deletedId = op.deletedId, indexOfItemWithSamePosition = this._indexOfPosition(key);
    if (indexOfItemWithSamePosition !== -1) {
      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];
      if (itemWithSamePosition._id === deletedId)
        return itemWithSamePosition._detach(), this._items[indexOfItemWithSamePosition] = child, {
          modified: makeUpdate(this, [
            setDelta(indexOfItemWithSamePosition, child)
          ]),
          reverse: []
        };
      {
        this._implicitlyDeletedItems.add(itemWithSamePosition), this._items[indexOfItemWithSamePosition] = child;
        const delta = [setDelta(indexOfItemWithSamePosition, child)], deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);
        return deleteDelta2 && delta.push(deleteDelta2), { modified: makeUpdate(this, delta), reverse: [] };
      }
    }
    {
      const updates = [], deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);
      return deleteDelta2 && updates.push(deleteDelta2), this._items.push(child), sortListItem(this._items), updates.push(insertDelta(this._indexOfPosition(key), child)), { reverse: [], modified: makeUpdate(this, updates) };
    }
  }
  _applySetAck(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const delta = [], deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);
    deletedDelta && delta.push(deletedDelta);
    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);
    if (unacknowledgedOpId != null) {
      if (unacknowledgedOpId !== op.opId)
        return delta.length === 0 ? { modified: false } : { modified: makeUpdate(this, delta), reverse: [] };
      this._unacknowledgedSets.delete(op.parentKey);
    }
    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey), existingItem = this._items.find((item) => item._id === op.id);
    if (existingItem != null) {
      if (existingItem._parentKey === op.parentKey)
        return {
          modified: delta.length > 0 && makeUpdate(this, delta),
          reverse: []
        };
      indexOfItemWithSamePosition !== -1 && (this._implicitlyDeletedItems.add(this._items[indexOfItemWithSamePosition]), this._items.splice(indexOfItemWithSamePosition, 1), delta.push(deleteDelta(indexOfItemWithSamePosition)));
      const previousIndex = this._items.indexOf(existingItem);
      existingItem._setParentLink(this, op.parentKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(existingItem);
      return newIndex !== previousIndex && delta.push(moveDelta(previousIndex, newIndex, existingItem)), { modified: delta.length > 0 && makeUpdate(this, delta), reverse: [] };
    }
    {
      const orphan = this._doc.getItem(op.id);
      if (orphan && this._implicitlyDeletedItems.has(orphan)) {
        orphan._setParentLink(this, op.parentKey), this._implicitlyDeletedItems.delete(orphan), this._items.push(orphan), sortListItem(this._items);
        const recreatedItemIndex = this._items.indexOf(orphan);
        return {
          modified: makeUpdate(this, [
            indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),
            ...delta
          ]),
          reverse: []
        };
      }
      {
        indexOfItemWithSamePosition !== -1 && this._items.splice(indexOfItemWithSamePosition, 1);
        const { newItem, newIndex } = this._createAttachItemAndSort(op, op.parentKey);
        return {
          modified: makeUpdate(this, [
            indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),
            ...delta
          ]),
          reverse: []
        };
      }
    }
  }
  _detachItemAssociatedToSetOperation(deletedId) {
    if (deletedId == null || this._doc == null)
      return null;
    const deletedItem = this._doc.getItem(deletedId);
    if (deletedItem == null)
      return null;
    const result = this._detachChild(deletedItem);
    return result.modified === false ? null : result.modified.updates[0];
  }
  _applyRemoteInsert(op) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const key = op.parentKey, existingItemIndex = this._indexOfPosition(key);
    existingItemIndex !== -1 && this._shiftItemPosition(existingItemIndex, key);
    const { newItem, newIndex } = this._createAttachItemAndSort(op, key);
    return {
      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),
      reverse: []
    };
  }
  _applyInsertAck(op) {
    const existingItem = this._items.find((item) => item._id === op.id), key = op.parentKey, itemIndexAtPosition = this._indexOfPosition(key);
    if (existingItem) {
      if (existingItem._parentKey === key)
        return { modified: false };
      {
        const oldPositionIndex = this._items.indexOf(existingItem);
        itemIndexAtPosition !== -1 && this._shiftItemPosition(itemIndexAtPosition, key), existingItem._setParentLink(this, key), sortListItem(this._items);
        const newIndex = this._indexOfPosition(key);
        return newIndex === oldPositionIndex ? { modified: false } : {
          modified: makeUpdate(this, [
            moveDelta(oldPositionIndex, newIndex, existingItem)
          ]),
          reverse: []
        };
      }
    }
    {
      const orphan = nn(this._doc).getItem(op.id);
      if (orphan && this._implicitlyDeletedItems.has(orphan)) {
        orphan._setParentLink(this, key), this._implicitlyDeletedItems.delete(orphan), this._items.push(orphan), sortListItem(this._items);
        return {
          modified: makeUpdate(this, [
            insertDelta(this._indexOfPosition(key), orphan)
          ]),
          reverse: []
        };
      }
      {
        itemIndexAtPosition !== -1 && this._shiftItemPosition(itemIndexAtPosition, key);
        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);
        return {
          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),
          reverse: []
        };
      }
    }
  }
  _applyInsertUndoRedo(op) {
    var _a3;
    const { id, parentKey: key } = op, child = creationOpToLiveNode(op);
    if (((_a3 = this._doc) === null || _a3 === void 0 ? void 0 : _a3.getItem(id)) !== void 0)
      return { modified: false };
    child._attach(id, nn(this._doc)), child._setParentLink(this, key);
    const existingItemIndex = this._indexOfPosition(key);
    let newKey = key;
    if (existingItemIndex !== -1) {
      newKey = makePosition(this._items[existingItemIndex] ? this._items[existingItemIndex]._getParentKeyOrThrow() : void 0, this._items[existingItemIndex + 1] ? this._items[existingItemIndex + 1]._getParentKeyOrThrow() : void 0), child._setParentLink(this, newKey);
    }
    this._items.push(child), sortListItem(this._items);
    return {
      modified: makeUpdate(this, [
        insertDelta(this._indexOfPosition(newKey), child)
      ]),
      reverse: [{ type: OpCode.DELETE_CRDT, id }]
    };
  }
  _applySetUndoRedo(op) {
    var _a3;
    const { id, parentKey: key } = op, child = creationOpToLiveNode(op);
    if (((_a3 = this._doc) === null || _a3 === void 0 ? void 0 : _a3.getItem(id)) !== void 0)
      return { modified: false };
    this._unacknowledgedSets.set(key, nn(op.opId));
    const indexOfItemWithSameKey = this._indexOfPosition(key);
    child._attach(id, nn(this._doc)), child._setParentLink(this, key);
    const newKey = key;
    if (indexOfItemWithSameKey !== -1) {
      const existingItem = this._items[indexOfItemWithSameKey];
      existingItem._detach(), this._items[indexOfItemWithSameKey] = child;
      const reverse2 = existingItem._serialize(nn(this._id), key, this._doc);
      addIntentAndDeletedIdToOperation(reverse2, op.id);
      const delta = [setDelta(indexOfItemWithSameKey, child)], deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);
      return deletedDelta && delta.push(deletedDelta), { modified: makeUpdate(this, delta), reverse: reverse2 };
    }
    {
      this._items.push(child), sortListItem(this._items), this._detachItemAssociatedToSetOperation(op.deletedId);
      const newIndex = this._indexOfPosition(newKey);
      return {
        reverse: [{ type: OpCode.DELETE_CRDT, id }],
        modified: makeUpdate(this, [insertDelta(newIndex, child)])
      };
    }
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    if (op.intent === "set") {
      if (source === OpSource.REMOTE)
        return this._applySetRemote(op);
      if (source === OpSource.UNDOREDO_RECONNECT)
        return this._applySetUndoRedo(op);
      if (source === OpSource.ACK)
        return this._applySetAck(op);
    }
    return source === OpSource.REMOTE ? this._applyRemoteInsert(op) : source === OpSource.ACK ? this._applyInsertAck(op) : this._applyInsertUndoRedo(op);
  }
  _detachChild(child) {
    if (child) {
      const parentKey = nn(child._parentKey), reverse2 = child._serialize(nn(this._id), parentKey, this._doc), indexToDelete = this._items.indexOf(child);
      return this._items.splice(indexToDelete, 1), child._detach(), {
        modified: makeUpdate(this, [deleteDelta(indexToDelete)]),
        reverse: reverse2
      };
    }
    return { modified: false };
  }
  _applySetChildKeyRemote(newKey, child) {
    var _a3;
    if (this._implicitlyDeletedItems.has(child)) {
      this._implicitlyDeletedItems.delete(child), child._setParentLink(this, newKey), this._items.push(child), sortListItem(this._items);
      return {
        modified: makeUpdate(this, [
          insertDelta(this._items.indexOf(child), child)
        ]),
        reverse: []
      };
    }
    if (newKey === child._parentKey)
      return { modified: false };
    const existingItemIndex = this._indexOfPosition(newKey);
    if (existingItemIndex === -1) {
      const previousIndex = this._items.indexOf(child);
      child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return newIndex === previousIndex ? { modified: false } : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
    {
      this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a3 = this._items[existingItemIndex + 1]) === null || _a3 === void 0 ? void 0 : _a3._getParentKeyOrThrow()));
      const previousIndex = this._items.indexOf(child);
      child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return newIndex === previousIndex ? { modified: false } : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
  }
  _applySetChildKeyAck(newKey, child) {
    var _a3, _b;
    const previousKey = nn(child._parentKey);
    if (this._implicitlyDeletedItems.has(child)) {
      const existingItemIndex = this._indexOfPosition(newKey);
      return this._implicitlyDeletedItems.delete(child), existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a3 = this._items[existingItemIndex + 1]) === null || _a3 === void 0 ? void 0 : _a3._getParentKeyOrThrow())), child._setParentLink(this, newKey), this._items.push(child), sortListItem(this._items), { modified: false };
    }
    {
      if (newKey === previousKey)
        return { modified: false };
      const previousIndex = this._items.indexOf(child), existingItemIndex = this._indexOfPosition(newKey);
      existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_b = this._items[existingItemIndex + 1]) === null || _b === void 0 ? void 0 : _b._getParentKeyOrThrow())), child._setParentLink(this, newKey), sortListItem(this._items);
      const newIndex = this._items.indexOf(child);
      return previousIndex === newIndex ? { modified: false } : {
        modified: makeUpdate(this, [
          moveDelta(previousIndex, newIndex, child)
        ]),
        reverse: []
      };
    }
  }
  _applySetChildKeyUndoRedo(newKey, child) {
    var _a3;
    const previousKey = nn(child._parentKey), previousIndex = this._items.indexOf(child), existingItemIndex = this._indexOfPosition(newKey);
    existingItemIndex !== -1 && this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_a3 = this._items[existingItemIndex + 1]) === null || _a3 === void 0 ? void 0 : _a3._getParentKeyOrThrow())), child._setParentLink(this, newKey), sortListItem(this._items);
    const newIndex = this._items.indexOf(child);
    return previousIndex === newIndex ? { modified: false } : {
      modified: makeUpdate(this, [
        moveDelta(previousIndex, newIndex, child)
      ]),
      reverse: [
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(child._id),
          parentKey: previousKey
        }
      ]
    };
  }
  _setChildKey(newKey, child, source) {
    return source === OpSource.REMOTE ? this._applySetChildKeyRemote(newKey, child) : source === OpSource.ACK ? this._applySetChildKeyAck(newKey, child) : this._applySetChildKeyUndoRedo(newKey, child);
  }
  _apply(op, isLocal) {
    return super._apply(op, isLocal);
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveList if parent is missing");
    return {
      type: CrdtType.LIST,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key
    };
  }
  get length() {
    return this._items.length;
  }
  push(element) {
    return this.insert(element, this.length);
  }
  insert(element, index2) {
    if (index2 < 0 || index2 > this._items.length)
      throw new Error(`Cannot insert list item at index "${index2}". index should be between 0 and ${this._items.length}`);
    const position = makePosition(this._items[index2 - 1] ? this._items[index2 - 1]._getParentKeyOrThrow() : void 0, this._items[index2] ? this._items[index2]._getParentKeyOrThrow() : void 0), value = lsonToLiveNode(element);
    if (value._setParentLink(this, position), this._items.push(value), sortListItem(this._items), this._doc && this._id) {
      const id = this._doc.generateId();
      value._attach(id, this._doc), this._doc.dispatch(value._serialize(this._id, position, this._doc), [{ type: OpCode.DELETE_CRDT, id }], /* @__PURE__ */ new Map([[this._id, makeUpdate(this, [insertDelta(index2, value)])]]));
    }
  }
  move(index2, targetIndex) {
    if (targetIndex < 0)
      throw new Error("targetIndex cannot be less than 0");
    if (targetIndex >= this._items.length)
      throw new Error("targetIndex cannot be greater or equal than the list length");
    if (index2 < 0)
      throw new Error("index cannot be less than 0");
    if (index2 >= this._items.length)
      throw new Error("index cannot be greater or equal than the list length");
    let beforePosition = null, afterPosition = null;
    index2 < targetIndex ? (afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._getParentKeyOrThrow(), beforePosition = this._items[targetIndex]._getParentKeyOrThrow()) : (afterPosition = this._items[targetIndex]._getParentKeyOrThrow(), beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._getParentKeyOrThrow());
    const position = makePosition(beforePosition, afterPosition), item = this._items[index2], previousPosition = item._getParentKeyOrThrow();
    if (item._setParentLink(this, position), sortListItem(this._items), this._doc && this._id) {
      const storageUpdates = /* @__PURE__ */ new Map([
        [this._id, makeUpdate(this, [moveDelta(index2, targetIndex, item)])]
      ]);
      this._doc.dispatch([
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(item._id),
          opId: this._doc.generateOpId(),
          parentKey: position
        }
      ], [
        {
          type: OpCode.SET_PARENT_KEY,
          id: nn(item._id),
          parentKey: previousPosition
        }
      ], storageUpdates);
    }
  }
  delete(index2) {
    if (index2 < 0 || index2 >= this._items.length)
      throw new Error(`Cannot delete list item at index "${index2}". index should be between 0 and ${this._items.length - 1}`);
    const item = this._items[index2];
    if (item._detach(), this._items.splice(index2, 1), this._doc) {
      const childRecordId = item._id;
      if (childRecordId) {
        const storageUpdates = /* @__PURE__ */ new Map();
        storageUpdates.set(nn(this._id), makeUpdate(this, [deleteDelta(index2)])), this._doc.dispatch([
          {
            id: childRecordId,
            opId: this._doc.generateOpId(),
            type: OpCode.DELETE_CRDT
          }
        ], item._serialize(nn(this._id), item._getParentKeyOrThrow()), storageUpdates);
      }
    }
  }
  clear() {
    if (this._doc) {
      const ops = [], reverseOps = [], updateDelta = [];
      for (const item of this._items) {
        item._detach();
        const childId = item._id;
        childId && (ops.push({
          type: OpCode.DELETE_CRDT,
          id: childId,
          opId: this._doc.generateOpId()
        }), reverseOps.push(...item._serialize(nn(this._id), item._getParentKeyOrThrow())), updateDelta.push(deleteDelta(0)));
      }
      this._items = [];
      const storageUpdates = /* @__PURE__ */ new Map();
      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta)), this._doc.dispatch(ops, reverseOps, storageUpdates);
    } else {
      for (const item of this._items)
        item._detach();
      this._items = [];
    }
  }
  set(index2, item) {
    if (index2 < 0 || index2 >= this._items.length)
      throw new Error(`Cannot set list item at index "${index2}". index should be between 0 and ${this._items.length - 1}`);
    const existingItem = this._items[index2], position = existingItem._getParentKeyOrThrow(), existingId = existingItem._id;
    existingItem._detach();
    const value = lsonToLiveNode(item);
    if (value._setParentLink(this, position), this._items[index2] = value, this._doc && this._id) {
      const id = this._doc.generateId();
      value._attach(id, this._doc);
      const storageUpdates = /* @__PURE__ */ new Map();
      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index2, value)]));
      const ops = value._serialize(this._id, position, this._doc);
      addIntentAndDeletedIdToOperation(ops, existingId), this._unacknowledgedSets.set(position, nn(ops[0].opId));
      const reverseOps = existingItem._serialize(this._id, position, void 0);
      addIntentAndDeletedIdToOperation(reverseOps, id), this._doc.dispatch(ops, reverseOps, storageUpdates);
    }
  }
  toArray() {
    return this._items.map((entry) => liveNodeToLson(entry));
  }
  every(predicate) {
    return this.toArray().every(predicate);
  }
  filter(predicate) {
    return this.toArray().filter(predicate);
  }
  find(predicate) {
    return this.toArray().find(predicate);
  }
  findIndex(predicate) {
    return this.toArray().findIndex(predicate);
  }
  forEach(callbackfn) {
    return this.toArray().forEach(callbackfn);
  }
  get(index2) {
    if (!(index2 < 0 || index2 >= this._items.length))
      return liveNodeToLson(this._items[index2]);
  }
  indexOf(searchElement, fromIndex) {
    return this.toArray().indexOf(searchElement, fromIndex);
  }
  lastIndexOf(searchElement, fromIndex) {
    return this.toArray().lastIndexOf(searchElement, fromIndex);
  }
  map(callback) {
    return this._items.map((entry, i7) => callback(liveNodeToLson(entry), i7));
  }
  some(predicate) {
    return this.toArray().some(predicate);
  }
  [Symbol.iterator]() {
    return new LiveListIterator(this._items);
  }
  _createAttachItemAndSort(op, key) {
    const newItem = creationOpToLiveNode(op);
    newItem._attach(op.id, nn(this._doc)), newItem._setParentLink(this, key), this._items.push(newItem), sortListItem(this._items);
    return { newItem, newIndex: this._indexOfPosition(key) };
  }
  _shiftItemPosition(index2, key) {
    var _a3;
    const shiftedPosition = makePosition(key, this._items.length > index2 + 1 ? (_a3 = this._items[index2 + 1]) === null || _a3 === void 0 ? void 0 : _a3._getParentKeyOrThrow() : void 0);
    this._items[index2]._setParentLink(this, shiftedPosition);
  }
};
var LiveListIterator = class {
  constructor(items) {
    this._innerIterator = items[Symbol.iterator]();
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    const result = this._innerIterator.next();
    if (result.done)
      return { done: true, value: void 0 };
    return { value: liveNodeToLson(result.value) };
  }
};
function makeUpdate(liveList, deltaUpdates) {
  return { node: liveList, type: "LiveList", updates: deltaUpdates };
}
function setDelta(index2, item) {
  return {
    index: index2,
    type: "set",
    item: item instanceof LiveRegister ? item.data : item
  };
}
function deleteDelta(index2) {
  return { index: index2, type: "delete" };
}
function insertDelta(index2, item) {
  return {
    index: index2,
    type: "insert",
    item: item instanceof LiveRegister ? item.data : item
  };
}
function moveDelta(previousIndex, index2, item) {
  return {
    index: index2,
    type: "move",
    previousIndex,
    item: item instanceof LiveRegister ? item.data : item
  };
}
function sortListItem(items) {
  items.sort((itemA, itemB) => comparePosition(itemA._getParentKeyOrThrow(), itemB._getParentKeyOrThrow()));
}
function addIntentAndDeletedIdToOperation(ops, deletedId) {
  if (ops.length === 0)
    throw new Error("Internal error. Serialized LiveStructure should have at least 1 operation");
  const firstOp = ops[0];
  firstOp.intent = "set", firstOp.deletedId = deletedId;
}
var LiveMap = class extends AbstractCrdt {
  constructor(entries2) {
    if (super(), errorIf(entries2 === null, "Support for calling `new LiveMap(null)` will be removed in @liveblocks/client 0.18. Please call as `new LiveMap()`, or `new LiveMap([])`."), this.unacknowledgedSet = /* @__PURE__ */ new Map(), entries2) {
      const mappedEntries = [];
      for (const entry of entries2) {
        const value = lsonToLiveNode(entry[1]);
        value._setParentLink(this, entry[0]), mappedEntries.push([entry[0], value]);
      }
      this._map = new Map(mappedEntries);
    } else
      this._map = /* @__PURE__ */ new Map();
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const ops = [], op = {
      id: this._id,
      opId: doc == null ? void 0 : doc.generateOpId(),
      type: OpCode.CREATE_MAP,
      parentId,
      parentKey
    };
    ops.push(op);
    for (const [key, value] of this._map)
      ops.push(...value._serialize(this._id, key, doc));
    return ops;
  }
  static _deserialize([id, _item], parentToChildren, doc) {
    const map2 = new LiveMap();
    map2._attach(id, doc);
    const children = parentToChildren.get(id);
    if (children == null)
      return map2;
    for (const [id2, crdt] of children) {
      const child = deserialize([id2, crdt], parentToChildren, doc);
      child._setParentLink(map2, crdt.parentKey), map2._map.set(crdt.parentKey, child);
    }
    return map2;
  }
  _attach(id, doc) {
    super._attach(id, doc);
    for (const [_key, value] of this._map)
      isLiveNode(value) && value._attach(doc.generateId(), doc);
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const { id, parentKey, opId } = op, key = parentKey, child = creationOpToLiveNode(op);
    if (this._doc.getItem(id) !== void 0)
      return { modified: false };
    if (source === OpSource.ACK) {
      const lastUpdateOpId = this.unacknowledgedSet.get(key);
      if (lastUpdateOpId === opId)
        return this.unacknowledgedSet.delete(key), { modified: false };
      if (lastUpdateOpId != null)
        return { modified: false };
    } else
      source === OpSource.REMOTE && this.unacknowledgedSet.delete(key);
    const previousValue = this._map.get(key);
    let reverse2;
    if (previousValue) {
      const thisId = nn(this._id);
      reverse2 = previousValue._serialize(thisId, key), previousValue._detach();
    } else
      reverse2 = [{ type: OpCode.DELETE_CRDT, id }];
    return child._setParentLink(this, key), child._attach(id, this._doc), this._map.set(key, child), {
      modified: {
        node: this,
        type: "LiveMap",
        updates: { [key]: { type: "update" } }
      },
      reverse: reverse2
    };
  }
  _detach() {
    super._detach();
    for (const item of this._map.values())
      item._detach();
  }
  _detachChild(child) {
    const id = nn(this._id), parentKey = nn(child._parentKey), reverse2 = child._serialize(id, parentKey, this._doc);
    for (const [key, value] of this._map)
      value === child && this._map.delete(key);
    child._detach();
    return {
      modified: {
        node: this,
        type: "LiveMap",
        updates: { [parentKey]: { type: "delete" } }
      },
      reverse: reverse2
    };
  }
  _toSerializedCrdt() {
    if (this.parent.type !== "HasParent")
      throw new Error("Cannot serialize LiveMap if parent is missing");
    return {
      type: CrdtType.MAP,
      parentId: nn(this.parent.node._id, "Parent node expected to have ID"),
      parentKey: this.parent.key
    };
  }
  get(key) {
    const value = this._map.get(key);
    if (value != null)
      return liveNodeToLson(value);
  }
  set(key, value) {
    const oldValue = this._map.get(key);
    oldValue && oldValue._detach();
    const item = lsonToLiveNode(value);
    if (item._setParentLink(this, key), this._map.set(key, item), this._doc && this._id) {
      const id = this._doc.generateId();
      item._attach(id, this._doc);
      const storageUpdates = /* @__PURE__ */ new Map();
      storageUpdates.set(this._id, {
        node: this,
        type: "LiveMap",
        updates: { [key]: { type: "update" } }
      });
      const ops = item._serialize(this._id, key, this._doc);
      this.unacknowledgedSet.set(key, nn(ops[0].opId)), this._doc.dispatch(item._serialize(this._id, key, this._doc), oldValue ? oldValue._serialize(this._id, key) : [{ type: OpCode.DELETE_CRDT, id }], storageUpdates);
    }
  }
  get size() {
    return this._map.size;
  }
  has(key) {
    return this._map.has(key);
  }
  delete(key) {
    const item = this._map.get(key);
    if (item == null)
      return false;
    if (item._detach(), this._map.delete(key), this._doc && item._id) {
      const thisId = nn(this._id), storageUpdates = /* @__PURE__ */ new Map();
      storageUpdates.set(thisId, {
        node: this,
        type: "LiveMap",
        updates: { [key]: { type: "delete" } }
      }), this._doc.dispatch([
        {
          type: OpCode.DELETE_CRDT,
          id: item._id,
          opId: this._doc.generateOpId()
        }
      ], item._serialize(thisId, key), storageUpdates);
    }
    return true;
  }
  entries() {
    const innerIterator = this._map.entries();
    return {
      [Symbol.iterator]() {
        return this;
      },
      next() {
        const iteratorValue = innerIterator.next();
        if (iteratorValue.done)
          return { done: true, value: void 0 };
        return {
          value: [
            iteratorValue.value[0],
            liveNodeToLson(iteratorValue.value[1])
          ]
        };
      }
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  keys() {
    return this._map.keys();
  }
  values() {
    const innerIterator = this._map.values();
    return {
      [Symbol.iterator]() {
        return this;
      },
      next() {
        const iteratorValue = innerIterator.next();
        if (iteratorValue.done)
          return { done: true, value: void 0 };
        return { value: liveNodeToLson(iteratorValue.value) };
      }
    };
  }
  forEach(callback) {
    for (const entry of this)
      callback(entry[1], entry[0], this);
  }
};
var LiveObject = class extends AbstractCrdt {
  constructor(obj = {}) {
    super(), this._propToLastUpdate = /* @__PURE__ */ new Map();
    for (const key in obj) {
      const value = obj[key];
      value !== void 0 && isLiveNode(value) && value._setParentLink(this, key);
    }
    this._map = new Map(Object.entries(obj));
  }
  _serialize(parentId, parentKey, doc) {
    if (this._id == null)
      throw new Error("Cannot serialize item is not attached");
    const opId = doc == null ? void 0 : doc.generateOpId(), ops = [], op = parentId !== void 0 && parentKey !== void 0 ? {
      type: OpCode.CREATE_OBJECT,
      id: this._id,
      opId,
      parentId,
      parentKey,
      data: {}
    } : { type: OpCode.CREATE_OBJECT, id: this._id, opId, data: {} };
    ops.push(op);
    for (const [key, value] of this._map)
      isLiveNode(value) ? ops.push(...value._serialize(this._id, key, doc)) : op.data[key] = value;
    return ops;
  }
  static _deserialize([id, item], parentToChildren, doc) {
    const liveObj = new LiveObject(item.data);
    return liveObj._attach(id, doc), this._deserializeChildren(liveObj, parentToChildren, doc);
  }
  static _deserializeChildren(liveObj, parentToChildren, doc) {
    const children = parentToChildren.get(nn(liveObj._id));
    if (children == null)
      return liveObj;
    for (const [id, crdt] of children) {
      const child = deserializeToLson([id, crdt], parentToChildren, doc);
      isLiveStructure(child) && child._setParentLink(liveObj, crdt.parentKey), liveObj._map.set(crdt.parentKey, child);
    }
    return liveObj;
  }
  _attach(id, doc) {
    super._attach(id, doc);
    for (const [_key, value] of this._map)
      isLiveNode(value) && value._attach(doc.generateId(), doc);
  }
  _attachChild(op, source) {
    if (this._doc == null)
      throw new Error("Can't attach child if doc is not present");
    const { id, opId, parentKey: key } = op, child = creationOpToLson(op);
    if (this._doc.getItem(id) !== void 0)
      return this._propToLastUpdate.get(key) === opId && this._propToLastUpdate.delete(key), { modified: false };
    if (source === OpSource.UNDOREDO_RECONNECT)
      this._propToLastUpdate.set(key, nn(opId));
    else if (this._propToLastUpdate.get(key) !== void 0)
      return this._propToLastUpdate.get(key) === opId ? (this._propToLastUpdate.delete(key), { modified: false }) : { modified: false };
    const thisId = nn(this._id), previousValue = this._map.get(key);
    let reverse2;
    return isLiveNode(previousValue) ? (reverse2 = previousValue._serialize(thisId, key), previousValue._detach()) : reverse2 = previousValue === void 0 ? [{ type: OpCode.DELETE_OBJECT_KEY, id: thisId, key }] : [
      {
        type: OpCode.UPDATE_OBJECT,
        id: thisId,
        data: { [key]: previousValue }
      }
    ], this._map.set(key, child), isLiveStructure(child) && (child._setParentLink(this, key), child._attach(id, this._doc)), {
      reverse: reverse2,
      modified: {
        node: this,
        type: "LiveObject",
        updates: { [key]: { type: "update" } }
      }
    };
  }
  _detachChild(child) {
    if (child) {
      const id = nn(this._id), parentKey = nn(child._parentKey), reverse2 = child._serialize(id, parentKey, this._doc);
      for (const [key, value] of this._map)
        value === child && this._map.delete(key);
      child._detach();
      return {
        modified: {
          node: this,
          type: "LiveObject",
          updates: { [parentKey]: { type: "delete" } }
        },
        reverse: reverse2
      };
    }
    return { modified: false };
  }
  _detach() {
    super._detach();
    for (const value of this._map.values())
      isLiveNode(value) && value._detach();
  }
  _apply(op, isLocal) {
    return op.type === OpCode.UPDATE_OBJECT ? this._applyUpdate(op, isLocal) : op.type === OpCode.DELETE_OBJECT_KEY ? this._applyDeleteObjectKey(op) : super._apply(op, isLocal);
  }
  _toSerializedCrdt() {
    const data = {};
    for (const [key, value] of this._map)
      isLiveNode(value) || (data[key] = value);
    return this.parent.type === "HasParent" && this.parent.node._id ? {
      type: CrdtType.OBJECT,
      parentId: this.parent.node._id,
      parentKey: this.parent.key,
      data
    } : { type: CrdtType.OBJECT, data };
  }
  _applyUpdate(op, isLocal) {
    let isModified = false;
    const id = nn(this._id), reverse2 = [], reverseUpdate = { type: OpCode.UPDATE_OBJECT, id, data: {} };
    reverse2.push(reverseUpdate);
    for (const key in op.data) {
      const oldValue = this._map.get(key);
      isLiveNode(oldValue) ? (reverse2.push(...oldValue._serialize(id, key)), oldValue._detach()) : oldValue !== void 0 ? reverseUpdate.data[key] = oldValue : oldValue === void 0 && reverse2.push({ type: OpCode.DELETE_OBJECT_KEY, id, key });
    }
    const updateDelta = {};
    for (const key in op.data) {
      const value = op.data[key];
      if (value === void 0)
        continue;
      if (isLocal)
        this._propToLastUpdate.set(key, nn(op.opId));
      else {
        if (this._propToLastUpdate.get(key) != null) {
          if (this._propToLastUpdate.get(key) === op.opId) {
            this._propToLastUpdate.delete(key);
            continue;
          }
          continue;
        }
        isModified = true;
      }
      const oldValue = this._map.get(key);
      isLiveNode(oldValue) && oldValue._detach(), isModified = true, updateDelta[key] = { type: "update" }, this._map.set(key, value);
    }
    return Object.keys(reverseUpdate.data).length !== 0 && reverse2.unshift(reverseUpdate), isModified ? {
      modified: { node: this, type: "LiveObject", updates: updateDelta },
      reverse: reverse2
    } : { modified: false };
  }
  _applyDeleteObjectKey(op) {
    const key = op.key;
    if (this._map.has(key) === false)
      return { modified: false };
    if (this._propToLastUpdate.get(key) !== void 0)
      return { modified: false };
    const oldValue = this._map.get(key), id = nn(this._id);
    let reverse2 = [];
    return isLiveNode(oldValue) ? (reverse2 = oldValue._serialize(id, op.key), oldValue._detach()) : oldValue !== void 0 && (reverse2 = [
      { type: OpCode.UPDATE_OBJECT, id, data: { [key]: oldValue } }
    ]), this._map.delete(key), {
      modified: {
        node: this,
        type: "LiveObject",
        updates: { [op.key]: { type: "delete" } }
      },
      reverse: reverse2
    };
  }
  toObject() {
    return function(iterable) {
      const obj = {};
      for (const [key, val] of iterable)
        obj[key] = val;
      return obj;
    }(this._map);
  }
  set(key, value) {
    this.update({ [key]: value });
  }
  get(key) {
    return this._map.get(key);
  }
  delete(key) {
    const keyAsString = key, oldValue = this._map.get(keyAsString);
    if (oldValue === void 0)
      return;
    if (this._doc == null || this._id == null)
      return isLiveNode(oldValue) && oldValue._detach(), void this._map.delete(keyAsString);
    let reverse2;
    isLiveNode(oldValue) ? (oldValue._detach(), reverse2 = oldValue._serialize(this._id, keyAsString)) : reverse2 = [
      {
        type: OpCode.UPDATE_OBJECT,
        data: { [keyAsString]: oldValue },
        id: this._id
      }
    ], this._map.delete(keyAsString);
    const storageUpdates = /* @__PURE__ */ new Map();
    storageUpdates.set(this._id, {
      node: this,
      type: "LiveObject",
      updates: { [key]: { type: "delete" } }
    }), this._doc.dispatch([
      {
        type: OpCode.DELETE_OBJECT_KEY,
        key: keyAsString,
        id: this._id,
        opId: this._doc.generateOpId()
      }
    ], reverse2, storageUpdates);
  }
  update(overrides) {
    if (this._doc == null || this._id == null) {
      for (const key in overrides) {
        const newValue = overrides[key];
        if (newValue === void 0)
          continue;
        const oldValue = this._map.get(key);
        isLiveNode(oldValue) && oldValue._detach(), isLiveNode(newValue) && newValue._setParentLink(this, key), this._map.set(key, newValue);
      }
      return;
    }
    const ops = [], reverseOps = [], opId = this._doc.generateOpId(), updatedProps = {}, reverseUpdateOp = { id: this._id, type: OpCode.UPDATE_OBJECT, data: {} }, updateDelta = {};
    for (const key in overrides) {
      const newValue = overrides[key];
      if (newValue === void 0)
        continue;
      const oldValue = this._map.get(key);
      if (isLiveNode(oldValue) ? (reverseOps.push(...oldValue._serialize(this._id, key)), oldValue._detach()) : oldValue === void 0 ? reverseOps.push({
        type: OpCode.DELETE_OBJECT_KEY,
        id: this._id,
        key
      }) : reverseUpdateOp.data[key] = oldValue, isLiveNode(newValue)) {
        newValue._setParentLink(this, key), newValue._attach(this._doc.generateId(), this._doc);
        const newAttachChildOps = newValue._serialize(this._id, key, this._doc), createCrdtOp = newAttachChildOps.find((op) => op.parentId === this._id);
        createCrdtOp && this._propToLastUpdate.set(key, nn(createCrdtOp.opId)), ops.push(...newAttachChildOps);
      } else
        updatedProps[key] = newValue, this._propToLastUpdate.set(key, opId);
      this._map.set(key, newValue), updateDelta[key] = { type: "update" };
    }
    Object.keys(reverseUpdateOp.data).length !== 0 && reverseOps.unshift(reverseUpdateOp), Object.keys(updatedProps).length !== 0 && ops.unshift({
      opId,
      id: this._id,
      type: OpCode.UPDATE_OBJECT,
      data: updatedProps
    });
    const storageUpdates = /* @__PURE__ */ new Map();
    storageUpdates.set(this._id, {
      node: this,
      type: "LiveObject",
      updates: updateDelta
    }), this._doc.dispatch(ops, reverseOps, storageUpdates);
  }
};
function remove2(array2, item) {
  for (let i7 = 0; i7 < array2.length; i7++)
    if (array2[i7] === item) {
      array2.splice(i7, 1);
      break;
    }
}
function compact(items) {
  return items.filter((item) => item != null);
}
function creationOpToLiveNode(op) {
  return lsonToLiveNode(creationOpToLson(op));
}
function creationOpToLson(op) {
  switch (op.type) {
    case OpCode.CREATE_REGISTER:
      return op.data;
    case OpCode.CREATE_OBJECT:
      return new LiveObject(op.data);
    case OpCode.CREATE_MAP:
      return new LiveMap();
    case OpCode.CREATE_LIST:
      return new LiveList();
    default:
      return assertNever(0, "Unknown creation Op");
  }
}
function isSameNodeOrChildOf(node, parent) {
  return node === parent || node.parent.type === "HasParent" && isSameNodeOrChildOf(node.parent.node, parent);
}
function deserialize([id, crdt], parentToChildren, doc) {
  switch (crdt.type) {
    case CrdtType.OBJECT:
      return LiveObject._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.LIST:
      return LiveList._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.MAP:
      return LiveMap._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.REGISTER:
      return LiveRegister._deserialize([id, crdt], parentToChildren, doc);
    default:
      throw new Error("Unexpected CRDT type");
  }
}
function deserializeToLson([id, crdt], parentToChildren, doc) {
  switch (crdt.type) {
    case CrdtType.OBJECT:
      return LiveObject._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.LIST:
      return LiveList._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.MAP:
      return LiveMap._deserialize([id, crdt], parentToChildren, doc);
    case CrdtType.REGISTER:
      return crdt.data;
    default:
      throw new Error("Unexpected CRDT type");
  }
}
function isLiveStructure(value) {
  return isLiveList(value) || function(value2) {
    return value2 instanceof LiveMap;
  }(value) || isLiveObject(value);
}
function isLiveNode(value) {
  return isLiveStructure(value) || function(value2) {
    return value2 instanceof LiveRegister;
  }(value);
}
function isLiveList(value) {
  return value instanceof LiveList;
}
function isLiveObject(value) {
  return value instanceof LiveObject;
}
function liveNodeToLson(obj) {
  return obj instanceof LiveRegister ? obj.data : obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject ? obj : assertNever(0, "Unknown AbstractCrdt");
}
function lsonToLiveNode(value) {
  return value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList ? value : new LiveRegister(value);
}
function getTreesDiffOperations(currentItems, newItems) {
  const ops = [];
  return currentItems.forEach((_4, id) => {
    newItems.get(id) || ops.push({ type: OpCode.DELETE_CRDT, id });
  }), newItems.forEach((crdt, id) => {
    const currentCrdt = currentItems.get(id);
    if (currentCrdt)
      crdt.type === CrdtType.OBJECT && (currentCrdt.type === CrdtType.OBJECT && JSON.stringify(crdt.data) === JSON.stringify(currentCrdt.data) || ops.push({ type: OpCode.UPDATE_OBJECT, id, data: crdt.data })), crdt.parentKey !== currentCrdt.parentKey && ops.push({
        type: OpCode.SET_PARENT_KEY,
        id,
        parentKey: nn(crdt.parentKey, "Parent key must not be missing")
      });
    else
      switch (crdt.type) {
        case CrdtType.REGISTER:
          ops.push({
            type: OpCode.CREATE_REGISTER,
            id,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey,
            data: crdt.data
          });
          break;
        case CrdtType.LIST:
          ops.push({
            type: OpCode.CREATE_LIST,
            id,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey
          });
          break;
        case CrdtType.OBJECT:
          ops.push(crdt.parentId ? {
            type: OpCode.CREATE_OBJECT,
            id,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey,
            data: crdt.data
          } : { type: OpCode.CREATE_OBJECT, id, data: crdt.data });
          break;
        case CrdtType.MAP:
          ops.push({
            type: OpCode.CREATE_MAP,
            id,
            parentId: crdt.parentId,
            parentKey: crdt.parentKey
          });
      }
  }), ops;
}
function mergeStorageUpdates(first, second) {
  return first ? first.type === "LiveObject" && second.type === "LiveObject" ? function(first2, second2) {
    const updates = first2.updates;
    for (const [key, value] of entries(second2.updates))
      updates[key] = value;
    return Object.assign(Object.assign({}, second2), { updates });
  }(first, second) : first.type === "LiveMap" && second.type === "LiveMap" ? function(first2, second2) {
    const updates = first2.updates;
    for (const [key, value] of entries(second2.updates))
      updates[key] = value;
    return Object.assign(Object.assign({}, second2), { updates });
  }(first, second) : first.type === "LiveList" && second.type === "LiveList" ? function(first2, second2) {
    const updates = first2.updates;
    return Object.assign(Object.assign({}, second2), {
      updates: updates.concat(second2.updates)
    });
  }(first, second) : second : second;
}
function isPlainObject2(blob2) {
  return blob2 !== null && typeof blob2 == "object" && Object.prototype.toString.call(blob2) === "[object Object]";
}
function entries(obj) {
  return Object.entries(obj);
}
function tryParseJson(rawMessage) {
  try {
    return JSON.parse(rawMessage);
  } catch (e13) {
    return;
  }
}
function b64decode(b64value) {
  try {
    const formattedValue = b64value.replace(/-/g, "+").replace(/_/g, "/");
    return decodeURIComponent(atob(formattedValue).split("").map(function(c8) {
      return "%" + ("00" + c8.charCodeAt(0).toString(16)).slice(-2);
    }).join(""));
  } catch (err) {
    return atob(b64value);
  }
}
function isTokenExpired(token) {
  const now2 = Date.now() / 1e3;
  return now2 > token.exp - 300 || now2 < token.iat + 300;
}
function isStringList(value) {
  return Array.isArray(value) && value.every((i7) => typeof i7 == "string");
}
function isRoomAuthToken(data) {
  return typeof data.appId == "string" && typeof data.roomId == "string" && typeof data.actor == "number" && (data.id === void 0 || typeof data.id == "string") && isStringList(data.scopes) && (data.maxConnectionsPerRoom === void 0 || typeof data.maxConnectionsPerRoom == "number");
}
function parseJwtToken(token) {
  const tokenParts = token.split(".");
  if (tokenParts.length !== 3)
    throw new Error("Authentication error: invalid JWT token");
  const data = tryParseJson(b64decode(tokenParts[1]));
  if (data && function(data2) {
    if (!isPlainObject2(data2))
      return false;
    const { iat, exp } = data2;
    return typeof iat == "number" && typeof exp == "number";
  }(data))
    return data;
  throw new Error("Authentication error: missing JWT metadata");
}
function parseRoomAuthToken(tokenString) {
  const data = parseJwtToken(tokenString);
  if (data && isRoomAuthToken(data)) {
    return __rest4(data, ["maxConnections"]);
  }
  throw new Error("Authentication error: we expected a room token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback");
}
function isJsonScalar(data) {
  return data === null || typeof data == "string" || typeof data == "number" || typeof data == "boolean";
}
function isJsonArray(data) {
  return Array.isArray(data);
}
function isJsonObject(data) {
  return !isJsonScalar(data) && !isJsonArray(data);
}

// ../../node_modules/@liveblocks/client/index.mjs
var BACKOFF_RETRY_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4];
var BACKOFF_RETRY_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];
function makeOthers(userMap) {
  const users = Object.values(userMap).map((user) => __rest4(user, ["_hasReceivedInitialPresence"]));
  return {
    get count() {
      return users.length;
    },
    [Symbol.iterator]: () => users[Symbol.iterator](),
    map: (callback) => users.map(callback),
    toArray: () => users
  };
}
function makeStateMachine(state, context, mockedEffects) {
  const effects = mockedEffects || {
    authenticate(auth, createWebSocket) {
      const rawToken = state.token, parsedToken = rawToken !== null && parseRoomAuthToken(rawToken);
      if (!parsedToken || isTokenExpired(parsedToken))
        return auth(context.roomId).then(({ token }) => {
          if (state.connection.state !== "authenticating")
            return;
          authenticationSuccess(parseRoomAuthToken(token), createWebSocket(token)), state.token = token;
        }).catch((er) => function(error) {
          false;
          state.token = null, updateConnection({ state: "unavailable" }), state.numberOfRetry++, state.timeoutHandles.reconnect = effects.scheduleReconnect(getRetryDelay());
        }(er instanceof Error ? er : new Error(String(er))));
      authenticationSuccess(parsedToken, createWebSocket(rawToken));
    },
    send(messageOrMessages) {
      if (state.socket == null)
        throw new Error("Can't send message if socket is null");
      state.socket.send(JSON.stringify(messageOrMessages));
    },
    delayFlush: (delay) => setTimeout(tryFlushing, delay),
    startHeartbeatInterval: () => setInterval(heartbeat, 3e4),
    schedulePongTimeout: () => setTimeout(pongTimeout, 2e3),
    scheduleReconnect: (delay) => setTimeout(connect, delay)
  };
  function genericSubscribe(callback) {
    return state.listeners.storage.push(callback), () => remove2(state.listeners.storage, callback);
  }
  function createOrUpdateRootFromMessage(message) {
    if (message.items.length === 0)
      throw new Error("Internal error: cannot load storage without items");
    state.root ? function(items) {
      if (!state.root)
        return;
      const currentItems = /* @__PURE__ */ new Map();
      state.items.forEach((liveCrdt, id) => {
        currentItems.set(id, liveCrdt._toSerializedCrdt());
      });
      const ops = getTreesDiffOperations(currentItems, new Map(items));
      notify(apply(ops, false).updates);
    }(message.items) : state.root = function(items) {
      const [root2, parentToChildren] = function(items2) {
        const parentToChildren2 = /* @__PURE__ */ new Map();
        let root3 = null;
        for (const [id, crdt] of items2)
          if (isRootCrdt(crdt))
            root3 = [id, crdt];
          else {
            const tuple = [id, crdt], children = parentToChildren2.get(crdt.parentId);
            children != null ? children.push(tuple) : parentToChildren2.set(crdt.parentId, [tuple]);
          }
        if (root3 == null)
          throw new Error("Root can't be null");
        return [root3, parentToChildren2];
      }(items);
      return LiveObject._deserialize(root2, parentToChildren, {
        getItem,
        addItem,
        deleteItem,
        generateId,
        generateOpId,
        dispatch: storageDispatch,
        roomId: context.roomId
      });
    }(message.items);
    for (const key in state.defaultStorageRoot)
      state.root.get(key) == null && state.root.set(key, state.defaultStorageRoot[key]);
  }
  function addItem(id, liveItem) {
    state.items.set(id, liveItem);
  }
  function deleteItem(id) {
    state.items.delete(id);
  }
  function getItem(id) {
    return state.items.get(id);
  }
  function addToUndoStack(historyItem) {
    state.undoStack.length >= 50 && state.undoStack.shift(), state.isHistoryPaused ? state.pausedHistory.unshift(...historyItem) : state.undoStack.push(historyItem);
  }
  function storageDispatch(ops, reverse2, storageUpdates) {
    state.isBatching ? (state.batch.ops.push(...ops), storageUpdates.forEach((value, key) => {
      state.batch.updates.storageUpdates.set(key, mergeStorageUpdates(state.batch.updates.storageUpdates.get(key), value));
    }), state.batch.reverseOps.push(...reverse2)) : (addToUndoStack(reverse2), state.redoStack = [], dispatch2(ops), notify({ storageUpdates }));
  }
  function notify({
    storageUpdates = /* @__PURE__ */ new Map(),
    presence = false,
    others: otherEvents = []
  }) {
    if (otherEvents.length > 0) {
      state.others = makeOthers(state.users);
      for (const event of otherEvents)
        for (const listener of state.listeners.others)
          listener(state.others, event);
    }
    if (presence)
      for (const listener of state.listeners["my-presence"])
        listener(state.me);
    if (storageUpdates.size > 0)
      for (const subscriber of state.listeners.storage)
        subscriber(Array.from(storageUpdates.values()));
  }
  function getConnectionId() {
    if (state.connection.state === "open" || state.connection.state === "connecting")
      return state.connection.id;
    if (state.lastConnectionId !== null)
      return state.lastConnectionId;
    throw new Error("Internal. Tried to get connection id but connection was never open");
  }
  function generateId() {
    return `${getConnectionId()}:${state.clock++}`;
  }
  function generateOpId() {
    return `${getConnectionId()}:${state.opClock++}`;
  }
  function apply(item, isLocal) {
    const result = {
      reverse: [],
      updates: { storageUpdates: /* @__PURE__ */ new Map(), presence: false }
    }, createdNodeIds = /* @__PURE__ */ new Set();
    for (const op of item)
      if (op.type === "presence") {
        const reverse2 = { type: "presence", data: {} };
        for (const key in op.data)
          reverse2.data[key] = state.me[key];
        if (state.me = Object.assign(Object.assign({}, state.me), op.data), state.buffer.presence == null)
          state.buffer.presence = op.data;
        else
          for (const key in op.data)
            state.buffer.presence[key] = op.data[key];
        result.reverse.unshift(reverse2), result.updates.presence = true;
      } else {
        let source;
        if (op.opId || (op.opId = generateOpId()), isLocal)
          source = OpSource.UNDOREDO_RECONNECT;
        else {
          source = state.offlineOperations.delete(nn(op.opId)) ? OpSource.ACK : OpSource.REMOTE;
        }
        const applyOpResult = applyOp(op, source);
        if (applyOpResult.modified) {
          const parentId = applyOpResult.modified.node.parent.type === "HasParent" ? nn(applyOpResult.modified.node.parent.node._id, "Expected parent node to have an ID") : void 0;
          parentId && createdNodeIds.has(parentId) || (result.updates.storageUpdates.set(nn(applyOpResult.modified.node._id), mergeStorageUpdates(result.updates.storageUpdates.get(nn(applyOpResult.modified.node._id)), applyOpResult.modified)), result.reverse.unshift(...applyOpResult.reverse)), op.type !== OpCode.CREATE_LIST && op.type !== OpCode.CREATE_MAP && op.type !== OpCode.CREATE_OBJECT || createdNodeIds.add(nn(applyOpResult.modified.node._id));
        }
      }
    return result;
  }
  function applyOp(op, source) {
    switch (op.type) {
      case OpCode.DELETE_OBJECT_KEY:
      case OpCode.UPDATE_OBJECT:
      case OpCode.DELETE_CRDT: {
        const item = state.items.get(op.id);
        return item == null ? { modified: false } : item._apply(op, source === OpSource.UNDOREDO_RECONNECT);
      }
      case OpCode.SET_PARENT_KEY: {
        const item = state.items.get(op.id);
        return item == null ? { modified: false } : item.parent.type === "HasParent" && isLiveList(item.parent.node) ? item.parent.node._setChildKey(op.parentKey, item, source) : { modified: false };
      }
      case OpCode.CREATE_OBJECT:
      case OpCode.CREATE_LIST:
      case OpCode.CREATE_MAP:
      case OpCode.CREATE_REGISTER: {
        if (op.parentId === void 0)
          return { modified: false };
        const parent = state.items.get(op.parentId);
        return parent == null ? { modified: false } : parent._attachChild(op, source);
      }
    }
  }
  function connect() {
    var _a3, _b, _c, _d;
    if (state.connection.state !== "closed" && state.connection.state !== "unavailable")
      return null;
    const auth = function(authentication, fetchPolyfill) {
      if (authentication.type === "public") {
        if (typeof window == "undefined" && fetchPolyfill == null)
          throw new Error("To use Liveblocks client in a non-dom environment with a publicApiKey, you need to provide a fetch polyfill.");
        return (room) => fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {
          room,
          publicApiKey: authentication.publicApiKey
        });
      }
      if (authentication.type === "private") {
        if (typeof window == "undefined" && fetchPolyfill == null)
          throw new Error("To use Liveblocks client in a non-dom environment with a url as auth endpoint, you need to provide a fetch polyfill.");
        return (room) => fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {
          room
        });
      }
      if (authentication.type === "custom") {
        return (room) => authentication.callback(room).then((response) => {
          if (!response || !response.token)
            throw new Error('Authentication error. We expect the authentication callback to return a token, but it does not. Hint: the return value should look like: { token: "..." }');
          return response;
        });
      }
      throw new Error("Internal error. Unexpected authentication type");
    }(context.authentication, (_b = (_a3 = context.polyfills) === null || _a3 === void 0 ? void 0 : _a3.fetch) !== null && _b !== void 0 ? _b : context.fetchPolyfill), createWebSocket = function(liveblocksServer, WebSocketPolyfill) {
      if (typeof window == "undefined" && WebSocketPolyfill == null)
        throw new Error("To use Liveblocks client in a non-dom environment, you need to provide a WebSocket polyfill.");
      const ws = WebSocketPolyfill || WebSocket;
      return (token) => new ws(`${liveblocksServer}/?token=${token}`);
    }(context.liveblocksServer, (_d = (_c = context.polyfills) === null || _c === void 0 ? void 0 : _c.WebSocket) !== null && _d !== void 0 ? _d : context.WebSocketPolyfill);
    updateConnection({ state: "authenticating" }), effects.authenticate(auth, createWebSocket);
  }
  function authenticationSuccess(token, socket) {
    socket.addEventListener("message", onMessage), socket.addEventListener("open", onOpen), socket.addEventListener("close", onClose), socket.addEventListener("error", onError), updateConnection({
      state: "connecting",
      id: token.actor,
      userInfo: token.info,
      userId: token.id
    }), state.idFactory = function(connectionId) {
      let count = 0;
      return () => `${connectionId}:${count++}`;
    }(token.actor), state.socket = socket;
  }
  function onUpdatePresenceMessage(message) {
    const user = state.users[message.actor];
    if (message.targetActor !== void 0 || user == null || user._hasReceivedInitialPresence)
      return state.users[message.actor] = user == null ? {
        connectionId: message.actor,
        presence: message.data,
        id: void 0,
        info: void 0,
        _hasReceivedInitialPresence: true
      } : {
        id: user.id,
        info: user.info,
        connectionId: message.actor,
        presence: Object.assign(Object.assign({}, user.presence), message.data),
        _hasReceivedInitialPresence: true
      }, {
        type: "update",
        updates: message.data,
        user: state.users[message.actor]
      };
  }
  function onUserLeftMessage(message) {
    const userLeftMessage = message, user = state.users[userLeftMessage.actor];
    return user ? (delete state.users[userLeftMessage.actor], { type: "leave", user }) : null;
  }
  function onRoomStateMessage(message) {
    const newUsers = {};
    for (const key in message.users) {
      const connectionId = Number.parseInt(key), user = message.users[key];
      newUsers[connectionId] = {
        connectionId,
        info: user.info,
        id: user.id
      };
    }
    return state.users = newUsers, { type: "reset" };
  }
  function onEvent(message) {
    for (const listener of state.listeners.event)
      listener({ connectionId: message.actor, event: message.event });
  }
  function onUserJoinedMessage(message) {
    return state.users[message.actor] = {
      connectionId: message.actor,
      info: message.info,
      id: message.id,
      _hasReceivedInitialPresence: true
    }, state.me && (state.buffer.messages.push({
      type: ClientMsgCode.UPDATE_PRESENCE,
      data: state.me,
      targetActor: message.actor
    }), tryFlushing()), { type: "enter", user: state.users[message.actor] };
  }
  function parseServerMessage(data) {
    return isJsonObject(data) ? data : null;
  }
  function onMessage(event) {
    if (event.data === "pong")
      return void clearTimeout(state.timeoutHandles.pongTimeout);
    const messages = function(text21) {
      const data = tryParseJson(text21);
      return data === void 0 ? null : isJsonArray(data) ? compact(data.map((item) => parseServerMessage(item))) : compact([parseServerMessage(data)]);
    }(event.data);
    if (messages === null || messages.length === 0)
      return;
    const updates = { storageUpdates: /* @__PURE__ */ new Map(), others: [] };
    for (const message of messages)
      switch (message.type) {
        case ServerMsgCode.USER_JOINED:
          updates.others.push(onUserJoinedMessage(message));
          break;
        case ServerMsgCode.UPDATE_PRESENCE: {
          const othersPresenceUpdate = onUpdatePresenceMessage(message);
          othersPresenceUpdate && updates.others.push(othersPresenceUpdate);
          break;
        }
        case ServerMsgCode.BROADCASTED_EVENT:
          onEvent(message);
          break;
        case ServerMsgCode.USER_LEFT: {
          const event2 = onUserLeftMessage(message);
          event2 && updates.others.push(event2);
          break;
        }
        case ServerMsgCode.ROOM_STATE:
          updates.others.push(onRoomStateMessage(message));
          break;
        case ServerMsgCode.INITIAL_STORAGE_STATE: {
          const offlineOps = new Map(state.offlineOperations);
          createOrUpdateRootFromMessage(message), applyAndSendOfflineOps(offlineOps), _getInitialStateResolver == null || _getInitialStateResolver();
          break;
        }
        case ServerMsgCode.UPDATE_STORAGE:
          apply(message.ops, false).updates.storageUpdates.forEach((value, key) => {
            updates.storageUpdates.set(key, mergeStorageUpdates(updates.storageUpdates.get(key), value));
          });
          break;
      }
    notify(updates);
  }
  function onClose(event) {
    if (state.socket = null, clearTimeout(state.timeoutHandles.pongTimeout), clearInterval(state.intervalHandles.heartbeat), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), state.users = {}, notify({ others: [{ type: "reset" }] }), event.code >= 4e3 && event.code <= 4100) {
      updateConnection({ state: "failed" });
      const error = new LiveblocksError(event.reason, event.code);
      for (const listener of state.listeners.error)
        listener(error);
      const delay = getRetryDelay(true);
      state.numberOfRetry++, false, updateConnection({ state: "unavailable" }), state.timeoutHandles.reconnect = effects.scheduleReconnect(delay);
    } else if (event.code === WebsocketCloseCodes.CLOSE_WITHOUT_RETRY)
      updateConnection({ state: "closed" });
    else {
      const delay = getRetryDelay();
      state.numberOfRetry++, false, updateConnection({ state: "unavailable" }), state.timeoutHandles.reconnect = effects.scheduleReconnect(delay);
    }
  }
  function updateConnection(connection) {
    state.connection = connection;
    for (const listener of state.listeners.connection)
      listener(connection.state);
  }
  function getRetryDelay(slow = false) {
    return slow ? BACKOFF_RETRY_DELAYS_SLOW[state.numberOfRetry < BACKOFF_RETRY_DELAYS_SLOW.length ? state.numberOfRetry : BACKOFF_RETRY_DELAYS_SLOW.length - 1] : BACKOFF_RETRY_DELAYS[state.numberOfRetry < BACKOFF_RETRY_DELAYS.length ? state.numberOfRetry : BACKOFF_RETRY_DELAYS.length - 1];
  }
  function onError() {
  }
  function onOpen() {
    clearInterval(state.intervalHandles.heartbeat), state.intervalHandles.heartbeat = effects.startHeartbeatInterval(), state.connection.state === "connecting" && (updateConnection(Object.assign(Object.assign({}, state.connection), { state: "open" })), state.numberOfRetry = 0, state.lastConnectionId !== void 0 && (state.buffer.presence = state.me, tryFlushing()), state.lastConnectionId = state.connection.id, state.root && state.buffer.messages.push({ type: ClientMsgCode.FETCH_STORAGE }), tryFlushing());
  }
  function heartbeat() {
    state.socket != null && (clearTimeout(state.timeoutHandles.pongTimeout), state.timeoutHandles.pongTimeout = effects.schedulePongTimeout(), state.socket.readyState === state.socket.OPEN && state.socket.send("ping"));
  }
  function pongTimeout() {
    reconnect();
  }
  function reconnect() {
    state.socket && (state.socket.removeEventListener("open", onOpen), state.socket.removeEventListener("message", onMessage), state.socket.removeEventListener("close", onClose), state.socket.removeEventListener("error", onError), state.socket.close(), state.socket = null), updateConnection({ state: "unavailable" }), clearTimeout(state.timeoutHandles.pongTimeout), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), clearInterval(state.intervalHandles.heartbeat), connect();
  }
  function applyAndSendOfflineOps(offlineOps) {
    if (offlineOps.size === 0)
      return;
    const messages = [], ops = Array.from(offlineOps.values()), result = apply(ops, true);
    messages.push({ type: ClientMsgCode.UPDATE_STORAGE, ops }), notify(result.updates), effects.send(messages);
  }
  function tryFlushing() {
    const storageOps = state.buffer.storageOperations;
    if (storageOps.length > 0 && storageOps.forEach((op) => {
      state.offlineOperations.set(nn(op.opId), op);
    }), state.socket == null || state.socket.readyState !== state.socket.OPEN)
      return void (state.buffer.storageOperations = []);
    const now2 = Date.now();
    if (now2 - state.lastFlushTime > context.throttleDelay) {
      const messages = function(state2) {
        const messages2 = [];
        state2.buffer.presence && messages2.push({
          type: ClientMsgCode.UPDATE_PRESENCE,
          data: state2.buffer.presence
        });
        for (const event of state2.buffer.messages)
          messages2.push(event);
        state2.buffer.storageOperations.length > 0 && messages2.push({
          type: ClientMsgCode.UPDATE_STORAGE,
          ops: state2.buffer.storageOperations
        });
        return messages2;
      }(state);
      if (messages.length === 0)
        return;
      effects.send(messages), state.buffer = {
        messages: [],
        storageOperations: [],
        presence: null
      }, state.lastFlushTime = now2;
    } else
      state.timeoutHandles.flush != null && clearTimeout(state.timeoutHandles.flush), state.timeoutHandles.flush = effects.delayFlush(context.throttleDelay - (now2 - state.lastFlushTime));
  }
  function getPresence() {
    return state.me;
  }
  function dispatch2(ops) {
    state.buffer.storageOperations.push(...ops), tryFlushing();
  }
  let _getInitialStatePromise = null, _getInitialStateResolver = null;
  return {
    onClose,
    onMessage,
    authenticationSuccess,
    heartbeat,
    onNavigatorOnline: function() {
      state.connection.state === "unavailable" && reconnect();
    },
    simulateSocketClose: function() {
      state.socket && (state.socket = null);
    },
    simulateSendCloseEvent: function(event) {
      onClose(event);
    },
    onVisibilityChange: function(visibilityState) {
      visibilityState === "visible" && state.connection.state === "open" && heartbeat();
    },
    getUndoStack: () => state.undoStack,
    getItemsCount: () => state.items.size,
    connect,
    disconnect: function() {
      state.socket && (state.socket.removeEventListener("open", onOpen), state.socket.removeEventListener("message", onMessage), state.socket.removeEventListener("close", onClose), state.socket.removeEventListener("error", onError), state.socket.close(), state.socket = null), updateConnection({ state: "closed" }), state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush), clearTimeout(state.timeoutHandles.reconnect), clearTimeout(state.timeoutHandles.pongTimeout), clearInterval(state.intervalHandles.heartbeat), state.users = {}, notify({ others: [{ type: "reset" }] }), function() {
        for (const key in state.listeners)
          state.listeners[key] = [];
      }();
    },
    subscribe: function(first, second, options2) {
      if (second === void 0 || typeof first == "function") {
        if (typeof first == "function") {
          return genericSubscribe(first);
        }
        throw new Error("Please specify a listener callback");
      }
      if (isLiveNode(first)) {
        const node = first;
        if (options2 == null ? void 0 : options2.isDeep) {
          return function(node2, callback) {
            return genericSubscribe((updates) => {
              const relatedUpdates = updates.filter((update) => isSameNodeOrChildOf(update.node, node2));
              relatedUpdates.length > 0 && callback(relatedUpdates);
            });
          }(node, second);
        }
        return function(node2, callback) {
          return genericSubscribe((updates) => {
            for (const update of updates)
              update.node._id === node2._id && callback(update.node);
          });
        }(node, second);
      }
      if (!isRoomEventName(first))
        throw new Error(`"${first}" is not a valid event name`);
      const eventName = first, eventListener = second;
      return state.listeners[eventName].push(eventListener), () => {
        const callbacks = state.listeners[eventName];
        remove2(callbacks, eventListener);
      };
    },
    updatePresence: function(overrides, options2) {
      const oldValues = {};
      state.buffer.presence == null && (state.buffer.presence = {});
      for (const key in overrides) {
        const overrideValue = overrides[key];
        overrideValue !== void 0 && (state.buffer.presence[key] = overrideValue, oldValues[key] = state.me[key]);
      }
      state.me = Object.assign(Object.assign({}, state.me), overrides), state.isBatching ? ((options2 == null ? void 0 : options2.addToHistory) && state.batch.reverseOps.push({
        type: "presence",
        data: oldValues
      }), state.batch.updates.presence = true) : (tryFlushing(), (options2 == null ? void 0 : options2.addToHistory) && addToUndoStack([{ type: "presence", data: oldValues }]), notify({ presence: true }));
    },
    broadcastEvent: function(event, options2 = { shouldQueueEventIfNotReady: false }) {
      state.socket == null && options2.shouldQueueEventIfNotReady == 0 || (state.buffer.messages.push({
        type: ClientMsgCode.BROADCAST_EVENT,
        event
      }), tryFlushing());
    },
    batch: function(callback) {
      if (state.isBatching)
        throw new Error("batch should not be called during a batch");
      state.isBatching = true;
      try {
        callback();
      } finally {
        state.isBatching = false, state.batch.reverseOps.length > 0 && addToUndoStack(state.batch.reverseOps), state.batch.ops.length > 0 && (state.redoStack = []), state.batch.ops.length > 0 && dispatch2(state.batch.ops), notify(state.batch.updates), state.batch = {
          ops: [],
          reverseOps: [],
          updates: { others: [], storageUpdates: /* @__PURE__ */ new Map(), presence: false }
        }, tryFlushing();
      }
    },
    undo: function() {
      if (state.isBatching)
        throw new Error("undo is not allowed during a batch");
      const historyItem = state.undoStack.pop();
      if (historyItem == null)
        return;
      state.isHistoryPaused = false;
      const result = apply(historyItem, true);
      notify(result.updates), state.redoStack.push(result.reverse);
      for (const op of historyItem)
        op.type !== "presence" && state.buffer.storageOperations.push(op);
      tryFlushing();
    },
    redo: function() {
      if (state.isBatching)
        throw new Error("redo is not allowed during a batch");
      const historyItem = state.redoStack.pop();
      if (historyItem == null)
        return;
      state.isHistoryPaused = false;
      const result = apply(historyItem, true);
      notify(result.updates), state.undoStack.push(result.reverse);
      for (const op of historyItem)
        op.type !== "presence" && state.buffer.storageOperations.push(op);
      tryFlushing();
    },
    pauseHistory: function() {
      state.pausedHistory = [], state.isHistoryPaused = true;
    },
    resumeHistory: function() {
      state.isHistoryPaused = false, state.pausedHistory.length > 0 && addToUndoStack(state.pausedHistory), state.pausedHistory = [];
    },
    getStorage: function() {
      return state.root ? new Promise((resolve) => resolve({ root: state.root })) : (_getInitialStatePromise == null && (state.buffer.messages.push({ type: ClientMsgCode.FETCH_STORAGE }), tryFlushing(), _getInitialStatePromise = new Promise((resolve) => _getInitialStateResolver = resolve)), _getInitialStatePromise.then(() => ({ root: nn(state.root) })));
    },
    selectors: {
      getConnectionState: function() {
        return state.connection.state;
      },
      getSelf: function() {
        return state.connection.state === "open" || state.connection.state === "connecting" ? {
          connectionId: state.connection.id,
          id: state.connection.userId,
          info: state.connection.userInfo,
          presence: getPresence()
        } : null;
      },
      getPresence,
      getOthers: function() {
        return state.others;
      }
    }
  };
}
function createRoom(options2, context) {
  var _a3, _b;
  const initialPresence = (_a3 = options2.initialPresence) !== null && _a3 !== void 0 ? _a3 : options2.defaultPresence, initialStorage = (_b = options2.initialStorage) !== null && _b !== void 0 ? _b : options2.defaultStorageRoot, machine = makeStateMachine(function(initialPresence2, initialStorage2) {
    return {
      connection: { state: "closed" },
      token: null,
      lastConnectionId: null,
      socket: null,
      listeners: {
        event: [],
        others: [],
        "my-presence": [],
        error: [],
        connection: [],
        storage: []
      },
      numberOfRetry: 0,
      lastFlushTime: 0,
      timeoutHandles: { flush: null, reconnect: 0, pongTimeout: 0 },
      buffer: {
        presence: initialPresence2 == null ? {} : initialPresence2,
        messages: [],
        storageOperations: []
      },
      intervalHandles: { heartbeat: 0 },
      me: initialPresence2 == null ? {} : initialPresence2,
      users: {},
      others: makeOthers({}),
      defaultStorageRoot: initialStorage2,
      idFactory: null,
      clock: 0,
      opClock: 0,
      items: /* @__PURE__ */ new Map(),
      root: void 0,
      undoStack: [],
      redoStack: [],
      isHistoryPaused: false,
      pausedHistory: [],
      isBatching: false,
      batch: {
        ops: [],
        updates: { storageUpdates: /* @__PURE__ */ new Map(), presence: false, others: [] },
        reverseOps: []
      },
      offlineOperations: /* @__PURE__ */ new Map()
    };
  }(typeof initialPresence == "function" ? initialPresence(context.roomId) : initialPresence, typeof initialStorage == "function" ? initialStorage(context.roomId) : initialStorage), context), room = {
    id: context.roomId,
    getConnectionState: machine.selectors.getConnectionState,
    getSelf: machine.selectors.getSelf,
    subscribe: machine.subscribe,
    getPresence: machine.selectors.getPresence,
    updatePresence: machine.updatePresence,
    getOthers: machine.selectors.getOthers,
    broadcastEvent: machine.broadcastEvent,
    getStorage: machine.getStorage,
    batch: machine.batch,
    history: {
      undo: machine.undo,
      redo: machine.redo,
      pause: machine.pauseHistory,
      resume: machine.resumeHistory
    },
    __INTERNAL_DO_NOT_USE: {
      simulateCloseWebsocket: machine.simulateSocketClose,
      simulateSendCloseEvent: machine.simulateSendCloseEvent
    }
  };
  return {
    connect: machine.connect,
    disconnect: machine.disconnect,
    onNavigatorOnline: machine.onNavigatorOnline,
    onVisibilityChange: machine.onVisibilityChange,
    room
  };
}
var LiveblocksError = class extends Error {
  constructor(message, code3) {
    super(message), this.code = code3;
  }
};
function fetchAuthEndpoint(fetch2, endpoint, body) {
  return fetch2(endpoint, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  }).then((res) => {
    if (!res.ok)
      throw new AuthenticationError(`Expected a status 200 but got ${res.status} when doing a POST request on "${endpoint}"`);
    return res.json().catch((er) => {
      throw new AuthenticationError(`Expected a JSON response when doing a POST request on "${endpoint}". ${er}`);
    });
  }).then((data) => {
    if (!isPlainObject2(data) || typeof data.token != "string")
      throw new AuthenticationError(`Expected a JSON response of the form \`{ token: "..." }\` when doing a POST request on "${endpoint}", but got ${JSON.stringify(data)}`);
    const { token } = data;
    return { token };
  });
}
var AuthenticationError = class extends Error {
  constructor(message) {
    super(message);
  }
};
function createClient(options2) {
  const clientOptions = options2, throttleDelay = function(options3) {
    if (options3.throttle === void 0)
      return 100;
    if (typeof options3.throttle != "number" || options3.throttle < 80 || options3.throttle > 1e3)
      throw new Error("throttle should be a number between 80 and 1000.");
    return options3.throttle;
  }(options2), rooms = /* @__PURE__ */ new Map();
  return typeof window != "undefined" && window.addEventListener !== void 0 && window.addEventListener("online", () => {
    for (const [, room] of rooms)
      room.onNavigatorOnline();
  }), typeof document != "undefined" && document.addEventListener("visibilitychange", () => {
    for (const [, room] of rooms)
      room.onVisibilityChange(document.visibilityState);
  }), {
    getRoom: function(roomId2) {
      const internalRoom = rooms.get(roomId2);
      return internalRoom ? internalRoom.room : null;
    },
    enter: function(roomId2, options3 = {}) {
      var _a3;
      let internalRoom = rooms.get(roomId2);
      if (internalRoom)
        return internalRoom.room;
      if (errorIf(options3.defaultPresence, "Argument `defaultPresence` will be removed in @liveblocks/client 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"), errorIf(options3.defaultStorageRoot, "Argument `defaultStorageRoot` will be removed in @liveblocks/client 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP"), internalRoom = createRoom({
        initialPresence: options3.initialPresence,
        initialStorage: options3.initialStorage,
        defaultPresence: options3.defaultPresence,
        defaultStorageRoot: options3.defaultStorageRoot
      }, {
        roomId: roomId2,
        throttleDelay,
        polyfills: clientOptions.polyfills,
        WebSocketPolyfill: clientOptions.WebSocketPolyfill,
        fetchPolyfill: clientOptions.fetchPolyfill,
        liveblocksServer: (clientOptions == null ? void 0 : clientOptions.liveblocksServer) || "wss://liveblocks.net/v6",
        authentication: prepareAuthentication(clientOptions)
      }), rooms.set(roomId2, internalRoom), !options3.DO_NOT_USE_withoutConnecting) {
        if (typeof atob == "undefined") {
          if (((_a3 = clientOptions.polyfills) === null || _a3 === void 0 ? void 0 : _a3.atob) == null)
            throw new Error("You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill");
          global.atob = clientOptions.polyfills.atob;
        }
        internalRoom.connect();
      }
      return internalRoom.room;
    },
    leave: function(roomId2) {
      const room = rooms.get(roomId2);
      room && (room.disconnect(), rooms.delete(roomId2));
    }
  };
}
function prepareAuthentication(clientOptions) {
  const { publicApiKey, authEndpoint } = clientOptions;
  if (authEndpoint !== void 0 && publicApiKey !== void 0)
    throw new Error("You cannot use both publicApiKey and authEndpoint. Please use either publicApiKey or authEndpoint, but not both. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient");
  if (typeof publicApiKey == "string") {
    if (publicApiKey.startsWith("sk_"))
      throw new Error("Invalid publicApiKey. You are using the secret key which is not supported. Please use the public key instead. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey");
    if (!publicApiKey.startsWith("pk_"))
      throw new Error("Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey");
    return {
      type: "public",
      publicApiKey,
      url: clientOptions.publicAuthorizeEndpoint || "https://liveblocks.io/api/public/authorize"
    };
  }
  if (typeof authEndpoint == "string")
    return { type: "private", url: authEndpoint };
  if (typeof authEndpoint == "function")
    return { type: "custom", callback: authEndpoint };
  if (authEndpoint !== void 0)
    throw new Error("authEndpoint must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint");
  throw new Error("Invalid Liveblocks client options. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient");
}

// ../../node_modules/@liveblocks/react/index.mjs
var React84 = __toESM(require_react(), 1);
var import_react21 = __toESM(require_react(), 1);
var ClientContext = React84.createContext(null);
function useClient() {
  const client2 = React84.useContext(ClientContext);
  if (client2 == null)
    throw new Error("LiveblocksProvider is missing from the react tree");
  return client2;
}
function __awaiter4(thisArg, _arguments, P3, generator) {
  return new (P3 || (P3 = Promise))(function(resolve, reject2) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e13) {
        reject2(e13);
      }
    }
    function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e13) {
        reject2(e13);
      }
    }
    function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P3 ? value : new P3(function(resolve2) {
        resolve2(value);
      })).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function useRerender() {
  const [, update] = (0, import_react21.useReducer)((x7) => x7 + 1, 0);
  return update;
}
function createRoomContext(client2) {
  let useClient$1;
  useClient$1 = client2 !== "__legacy" ? () => client2 : useClient;
  const RoomContext = React84.createContext(null);
  function useRoom2() {
    const room = React84.useContext(RoomContext);
    if (room == null)
      throw new Error("RoomProvider is missing from the react tree");
    return room;
  }
  function useStorage() {
    const room = useRoom2(), [root2, setState] = React84.useState(null);
    return React84.useEffect(() => {
      let didCancel = false;
      return function() {
        __awaiter4(this, void 0, void 0, function* () {
          const storage = yield room.getStorage();
          didCancel || setState(storage.root);
        });
      }(), () => {
        didCancel = true;
      };
    }, [room]), [root2];
  }
  function deprecated_useMap(key, entries2) {
    errorIf(entries2, `Support for initializing entries in useMap() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveMap(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveMap(entries2 != null ? entries2 : void 0));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useMap() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveMap } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveMap(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function deprecated_useList(key, items) {
    errorIf(items, `Support for initializing items in useList() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    import { LiveList } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveList(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveList(items));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useList() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveList } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveList(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function deprecated_useObject(key, initialData) {
    errorIf(initialData, `Support for initializing data in useObject() directly will be removed in @liveblocks/react 0.18.

Instead, please initialize this data where you set up your RoomProvider:

    import { LiveObject } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveObject(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`);
    const value = useStorageValue(key, new LiveObject(initialData));
    return value.status === "ok" ? value.value : (errorIf(value.status === "notfound", `Key ${JSON.stringify(key)} was not found in Storage. Starting with 0.18, useObject() will no longer automatically create this key.

Instead, please initialize your storage where you set up your RoomProvider:

    import { LiveObject } from "@liveblocks/client";

    const initialStorage = () => ({
      ${JSON.stringify(key)}: new LiveObject(...),
      ...
    });

    <RoomProvider initialStorage={initialStorage}>
      ...
    </RoomProvider>

Please see https://bit.ly/3Niy5aP for details.`), null);
  }
  function useHistory2() {
    return useRoom2().history;
  }
  function useStorageValue(key, initialValue) {
    const room = useRoom2(), [root2] = useStorage(), rerender = useRerender();
    if (React84.useEffect(() => {
      if (root2 == null)
        return;
      let liveValue = root2.get(key);
      liveValue == null && (liveValue = initialValue, root2.set(key, liveValue));
      let unsubscribeCrdt = room.subscribe(liveValue, rerender);
      const unsubscribeRoot = room.subscribe(root2, function() {
        const newCrdt = root2.get(key);
        newCrdt !== liveValue && (unsubscribeCrdt(), liveValue = newCrdt, unsubscribeCrdt = room.subscribe(liveValue, rerender), rerender());
      });
      return rerender(), () => {
        unsubscribeRoot(), unsubscribeCrdt();
      };
    }, [root2, room]), root2 == null)
      return { status: "loading" };
    {
      const value = root2.get(key);
      return value == null ? { status: "notfound" } : { status: "ok", value };
    }
  }
  return {
    RoomProvider: function(props) {
      const {
        id: roomId2,
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot
      } = props;
      if (false) {
        if (roomId2 == null)
          throw new Error("RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required");
        if (typeof roomId2 != "string")
          throw new Error("RoomProvider id property should be a string.");
      }
      errorIf(defaultPresence, "RoomProvider's `defaultPresence` prop will be removed in @liveblocks/react 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"), errorIf(defaultStorageRoot, "RoomProvider's `defaultStorageRoot` prop will be removed in @liveblocks/react 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP");
      const _client = useClient$1(), [room, setRoom] = React84.useState(() => _client.enter(roomId2, {
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot,
        DO_NOT_USE_withoutConnecting: typeof window == "undefined"
      }));
      return React84.useEffect(() => (setRoom(_client.enter(roomId2, {
        initialPresence,
        initialStorage,
        defaultPresence,
        defaultStorageRoot,
        DO_NOT_USE_withoutConnecting: typeof window == "undefined"
      })), () => {
        _client.leave(roomId2);
      }), [_client, roomId2]), React84.createElement(RoomContext.Provider, { value: room }, props.children);
    },
    useBatch: function() {
      return useRoom2().batch;
    },
    useBroadcastEvent: function() {
      const room = useRoom2();
      return React84.useCallback((event, options2 = { shouldQueueEventIfNotReady: false }) => {
        room.broadcastEvent(event, options2);
      }, [room]);
    },
    useErrorListener: function(callback) {
      const room = useRoom2(), savedCallback = React84.useRef(callback);
      React84.useEffect(() => {
        savedCallback.current = callback;
      }), React84.useEffect(() => {
        const unsubscribe = room.subscribe("error", (e13) => savedCallback.current(e13));
        return () => {
          unsubscribe();
        };
      }, [room]);
    },
    useEventListener: function(callback) {
      const room = useRoom2(), savedCallback = React84.useRef(callback);
      React84.useEffect(() => {
        savedCallback.current = callback;
      }), React84.useEffect(() => {
        const unsubscribe = room.subscribe("event", (eventData) => {
          savedCallback.current(eventData);
        });
        return () => {
          unsubscribe();
        };
      }, [room]);
    },
    useHistory: useHistory2,
    useList: function(key) {
      return deprecated_useList(key);
    },
    useMap: function(key) {
      return deprecated_useMap(key);
    },
    useMyPresence: function() {
      const room = useRoom2(), presence = room.getPresence(), rerender = useRerender();
      return React84.useEffect(() => {
        const unsubscribe = room.subscribe("my-presence", rerender);
        return () => {
          unsubscribe();
        };
      }, [room]), [
        presence,
        React84.useCallback((overrides, options2) => room.updatePresence(overrides, options2), [room])
      ];
    },
    useObject: function(key) {
      return deprecated_useObject(key);
    },
    useOthers: function() {
      const room = useRoom2(), rerender = useRerender();
      return React84.useEffect(() => {
        const unsubscribe = room.subscribe("others", rerender);
        return () => {
          unsubscribe();
        };
      }, [room]), room.getOthers();
    },
    useRedo: function() {
      return useHistory2().redo;
    },
    useRoom: useRoom2,
    useSelf: function() {
      const room = useRoom2(), rerender = useRerender();
      return React84.useEffect(() => {
        const unsubscribePresence = room.subscribe("my-presence", rerender), unsubscribeConnection = room.subscribe("connection", rerender);
        return () => {
          unsubscribePresence(), unsubscribeConnection();
        };
      }, [room]), room.getSelf();
    },
    useStorage,
    useUndo: function() {
      return useHistory2().undo;
    },
    useUpdateMyPresence: function() {
      const room = useRoom2();
      return React84.useCallback((overrides, options2) => {
        room.updatePresence(overrides, options2);
      }, [room]);
    },
    deprecated_useList,
    deprecated_useMap,
    deprecated_useObject
  };
}
var _hooks = createRoomContext("__legacy");

// src/multiplayer/liveblocks.config.ts
var client = createClient({
  publicApiKey: "pk_live_MQyewokvyPeZAt4CaE5u7o5u",
  throttle: 80
});
var { RoomProvider, useHistory, useRedo, useUndo, useRoom, useUpdateMyPresence } = createRoomContext(client);

// src/multiplayer/useMultiplayerState.ts
var import_react23 = __toESM(require_react());
function useMultiplayerState(roomId2) {
  const [app, setApp] = (0, import_react23.useState)();
  const [error, setError] = (0, import_react23.useState)();
  const [loading4, setLoading] = (0, import_react23.useState)(true);
  const room = useRoom();
  const onUndo = useUndo();
  const onRedo = useRedo();
  const updateMyPresence = useUpdateMyPresence();
  const rIsPaused = (0, import_react23.useRef)(false);
  const rLiveShapes = (0, import_react23.useRef)();
  const rLiveBindings = (0, import_react23.useRef)();
  const rLiveAssets = (0, import_react23.useRef)();
  const onMount = (0, import_react23.useCallback)((app2) => {
    app2.loadRoom(roomId2);
    app2.pause();
    window.app = app2;
    setApp(app2);
  }, [roomId2]);
  const onChangePage = (0, import_react23.useCallback)((app2, shapes, bindings, assets) => {
    room.batch(() => {
      const lShapes = rLiveShapes.current;
      const lBindings = rLiveBindings.current;
      const lAssets = rLiveAssets.current;
      if (!(lShapes && lBindings && lAssets))
        return;
      Object.entries(shapes).forEach(([id, shape]) => {
        if (!shape) {
          lShapes.delete(id);
        } else {
          lShapes.set(shape.id, shape);
        }
      });
      Object.entries(bindings).forEach(([id, binding]) => {
        if (!binding) {
          lBindings.delete(id);
        } else {
          lBindings.set(binding.id, binding);
        }
      });
      Object.entries(assets).forEach(([id, asset]) => {
        if (!asset) {
          lAssets.delete(id);
        } else {
          lAssets.set(asset.id, asset);
        }
      });
    });
  }, [room]);
  const onChangePresence = (0, import_react23.useCallback)((app2, user) => {
    var _a3;
    updateMyPresence({ id: (_a3 = app2.room) == null ? void 0 : _a3.userId, user });
  }, [updateMyPresence]);
  import_react23.default.useEffect(() => {
    const unsubs = [];
    if (!(app && room))
      return;
    unsubs.push(room.subscribe("error", (error2) => setError(error2)));
    unsubs.push(room.subscribe("others", (others, event) => {
      if (event.type === "leave") {
        const { presence } = event.user;
        if (presence) {
          app == null ? void 0 : app.removeUser(presence.id);
        }
      } else {
        app.updateUsers(others.toArray().filter((other) => other.presence).map((other) => other.presence.user).filter(Boolean));
      }
    }));
    let stillAlive = true;
    function setupDocument() {
      return __async(this, null, function* () {
        const storage = yield room.getStorage();
        const version = storage.root.get("version");
        let lShapes = storage.root.get("shapes");
        if (!lShapes || !("_serialize" in lShapes)) {
          storage.root.set("shapes", new LiveMap());
          lShapes = storage.root.get("shapes");
        }
        rLiveShapes.current = lShapes;
        let lBindings = storage.root.get("bindings");
        if (!lBindings || !("_serialize" in lBindings)) {
          storage.root.set("bindings", new LiveMap());
          lBindings = storage.root.get("bindings");
        }
        rLiveBindings.current = lBindings;
        let lAssets = storage.root.get("assets");
        if (!lAssets || !("_serialize" in lAssets)) {
          storage.root.set("assets", new LiveMap());
          lAssets = storage.root.get("assets");
        }
        rLiveAssets.current = lAssets;
        if (!version) {
          const doc = storage.root.get("doc");
          if (doc) {
            const {
              document: {
                pages: {
                  page: { shapes, bindings }
                },
                assets
              }
            } = doc.toObject();
            Object.values(shapes).forEach((shape) => lShapes.set(shape.id, shape));
            Object.values(bindings).forEach((binding) => lBindings.set(binding.id, binding));
            Object.values(assets).forEach((asset) => lAssets.set(asset.id, asset));
          }
        }
        storage.root.set("version", 2.1);
        const handleChanges = () => {
          app == null ? void 0 : app.replacePageContent(Object.fromEntries(lShapes.entries()), Object.fromEntries(lBindings.entries()), Object.fromEntries(lAssets.entries()));
        };
        if (stillAlive) {
          unsubs.push(room.subscribe(lShapes, handleChanges));
          handleChanges();
          if (app) {
            app.zoomToFit();
            if (app.zoom > 1) {
              app.resetZoom();
            }
          }
          setLoading(false);
        }
      });
    }
    setupDocument();
    return () => {
      stillAlive = false;
      unsubs.forEach((unsub) => unsub());
    };
  }, [room, app]);
  const onSessionStart = import_react23.default.useCallback(() => {
    if (!room)
      return;
    room.history.pause();
    rIsPaused.current = true;
  }, [room]);
  const onSessionEnd = import_react23.default.useCallback(() => {
    if (!room)
      return;
    room.history.resume();
    rIsPaused.current = false;
  }, [room]);
  useHotkeys("ctrl+shift+l;,\u2318+shift+l", () => {
    if (window.confirm("Reset the document?")) {
      room.batch(() => {
        const lShapes = rLiveShapes.current;
        const lBindings = rLiveBindings.current;
        const lAssets = rLiveAssets.current;
        if (!(lShapes && lBindings && lAssets))
          return;
        lShapes.forEach((shape) => {
          lShapes.delete(shape.id);
        });
        lBindings.forEach((shape) => {
          lBindings.delete(shape.id);
        });
        lAssets.forEach((shape) => {
          lAssets.delete(shape.id);
        });
      });
    }
  }, []);
  return {
    onUndo,
    onRedo,
    onMount,
    onSessionStart,
    onSessionEnd,
    onChangePage,
    onChangePresence,
    error,
    loading: loading4
  };
}

// src/multiplayer/multiplayer.tsx
var roomId = "mp-test-8";
function Multiplayer() {
  return /* @__PURE__ */ React86.createElement(RoomProvider, {
    id: roomId
  }, /* @__PURE__ */ React86.createElement(Editor, {
    roomId
  }));
}
function Editor({ roomId: roomId2 }) {
  const _a3 = useMultiplayerState(roomId2), { error } = _a3, events = __objRest(_a3, ["error"]);
  if (error)
    return /* @__PURE__ */ React86.createElement("div", null, "Error: ", error.message);
  return /* @__PURE__ */ React86.createElement("div", {
    className: "tldraw"
  }, /* @__PURE__ */ React86.createElement(Tldraw, __spreadProps(__spreadValues({
    showPages: false
  }, events), {
    disableAssets: true
  })));
}

// src/index.tsx
var container = document.getElementById("root");
var root = (0, import_client4.createRoot)(container);
root.render(/* @__PURE__ */ import_react24.default.createElement(import_react24.default.StrictMode, null, /* @__PURE__ */ import_react24.default.createElement(HashRouter, null, /* @__PURE__ */ import_react24.default.createElement(Multiplayer, null))));
/*!
 * hotkeys-js v3.8.7
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 * 
 * Copyright (c) 2021 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 * 
 * Licensed under the MIT license.
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * React Router DOM v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * React Router v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// @license © 2020 Google LLC. Licensed under the Apache License, Version 2.0.
